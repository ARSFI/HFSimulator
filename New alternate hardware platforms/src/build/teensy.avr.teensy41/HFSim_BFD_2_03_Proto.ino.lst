
/Users/lafleur/Library/Caches/arduino/sketches/63A52467A358A44BF39FA86946407033/HFSim_BFD_2_03_Proto.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == dest_end) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4282      	cmp	r2, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	2000a2c0 	.word	0x2000a2c0
6000142c:	20013720 	.word	0x20013720

60001430 <ResetHandler2>:
{
60001430:	b580      	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
60001432:	f3bf 8f4f 	dsb	sy
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001436:	f000 faaf 	bl	60001998 <startup_default_early_hook>
	CCM_ANALOG_PFD_480 = usb_pfd;
6000143a:	4c54      	ldr	r4, [pc, #336]	; (6000158c <ResetHandler2+0x15c>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143c:	4b54      	ldr	r3, [pc, #336]	; (60001590 <ResetHandler2+0x160>)
6000143e:	2008      	movs	r0, #8
	CCM_ANALOG_PFD_528 = sys_pfd;
60001440:	4954      	ldr	r1, [pc, #336]	; (60001594 <ResetHandler2+0x164>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001442:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
60001446:	4a54      	ldr	r2, [pc, #336]	; (60001598 <ResetHandler2+0x168>)
	CCM_ANALOG_PFD_528 = sys_pfd;
60001448:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	memory_copy(&_stext, &_stextload, &_etext);
6000144c:	4853      	ldr	r0, [pc, #332]	; (6000159c <ResetHandler2+0x16c>)
	CCM_ANALOG_PFD_480 = usb_pfd;
6000144e:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
	memory_copy(&_stext, &_stextload, &_etext);
60001452:	4953      	ldr	r1, [pc, #332]	; (600015a0 <ResetHandler2+0x170>)
60001454:	f7ff ffd4 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001458:	4a52      	ldr	r2, [pc, #328]	; (600015a4 <ResetHandler2+0x174>)
6000145a:	4953      	ldr	r1, [pc, #332]	; (600015a8 <ResetHandler2+0x178>)
6000145c:	4853      	ldr	r0, [pc, #332]	; (600015ac <ResetHandler2+0x17c>)
6000145e:	f7ff ffcf 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001462:	4c53      	ldr	r4, [pc, #332]	; (600015b0 <ResetHandler2+0x180>)
60001464:	f7ff ffd6 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001468:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000146c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001470:	2300      	movs	r3, #0
60001472:	4a50      	ldr	r2, [pc, #320]	; (600015b4 <ResetHandler2+0x184>)
	SCB_CPACR = 0x00F00000;
60001474:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001478:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000147c:	3301      	adds	r3, #1
6000147e:	2bb0      	cmp	r3, #176	; 0xb0
60001480:	d1fa      	bne.n	60001478 <ResetHandler2+0x48>
60001482:	4b4d      	ldr	r3, [pc, #308]	; (600015b8 <ResetHandler2+0x188>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001484:	2180      	movs	r1, #128	; 0x80
60001486:	4a4d      	ldr	r2, [pc, #308]	; (600015bc <ResetHandler2+0x18c>)
60001488:	f803 1b01 	strb.w	r1, [r3], #1
6000148c:	4293      	cmp	r3, r2
6000148e:	d1fb      	bne.n	60001488 <ResetHandler2+0x58>
	SCB_VTOR = (uint32_t)_VectorsRam;
60001490:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001494:	4f4a      	ldr	r7, [pc, #296]	; (600015c0 <ResetHandler2+0x190>)
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001496:	4a4b      	ldr	r2, [pc, #300]	; (600015c4 <ResetHandler2+0x194>)
60001498:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
6000149c:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014a0:	2600      	movs	r6, #0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014a2:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
600014a6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014aa:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	69fb      	ldr	r3, [r7, #28]
600014b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014b8:	61fb      	str	r3, [r7, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c4:	627b      	str	r3, [r7, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c6:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014c8:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014ca:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014cc:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014ce:	f000 fa6b 	bl	600019a8 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014d2:	4b3d      	ldr	r3, [pc, #244]	; (600015c8 <ResetHandler2+0x198>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014d4:	2263      	movs	r2, #99	; 0x63
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014d6:	493d      	ldr	r1, [pc, #244]	; (600015cc <ResetHandler2+0x19c>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014d8:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014da:	4b3d      	ldr	r3, [pc, #244]	; (600015d0 <ResetHandler2+0x1a0>)
600014dc:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014de:	2303      	movs	r3, #3
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014e0:	616a      	str	r2, [r5, #20]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014e2:	4a3c      	ldr	r2, [pc, #240]	; (600015d4 <ResetHandler2+0x1a4>)
	SYST_CVR = 0;
600014e4:	61ae      	str	r6, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014e6:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014e8:	f8c5 2d20 	str.w	r2, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014ec:	f8d5 2dfc 	ldr.w	r2, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
600014f0:	4b39      	ldr	r3, [pc, #228]	; (600015d8 <ResetHandler2+0x1a8>)
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
600014f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
600014f6:	f8c5 2dfc 	str.w	r2, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
600014fa:	681a      	ldr	r2, [r3, #0]
600014fc:	f042 0201 	orr.w	r2, r2, #1
60001500:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001502:	685b      	ldr	r3, [r3, #4]
60001504:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
60001506:	f000 fc13 	bl	60001d30 <usb_pll_start>
	set_arm_clock(F_CPU);
6000150a:	4834      	ldr	r0, [pc, #208]	; (600015dc <ResetHandler2+0x1ac>)
6000150c:	f000 fdb4 	bl	60002078 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001510:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001512:	4b33      	ldr	r3, [pc, #204]	; (600015e0 <ResetHandler2+0x1b0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001514:	4a33      	ldr	r2, [pc, #204]	; (600015e4 <ResetHandler2+0x1b4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001516:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
6000151a:	66f9      	str	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
6000151c:	601e      	str	r6, [r3, #0]
	PIT_TCTRL0 = 0;
6000151e:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001522:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001526:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000152a:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000152e:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001530:	07db      	lsls	r3, r3, #31
60001532:	d408      	bmi.n	60001546 <ResetHandler2+0x116>
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001534:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001538:	492b      	ldr	r1, [pc, #172]	; (600015e8 <ResetHandler2+0x1b8>)
6000153a:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000153c:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000153e:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001540:	f043 0301 	orr.w	r3, r3, #1
60001544:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001546:	4a27      	ldr	r2, [pc, #156]	; (600015e4 <ResetHandler2+0x1b4>)
60001548:	4c28      	ldr	r4, [pc, #160]	; (600015ec <ResetHandler2+0x1bc>)
6000154a:	6893      	ldr	r3, [r2, #8]
6000154c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
60001550:	6093      	str	r3, [r2, #8]
	configure_external_ram();
60001552:	f000 fab3 	bl	60001abc <configure_external_ram>
	analog_init();
60001556:	f000 fd4f 	bl	60001ff8 <analog_init>
	pwm_init();
6000155a:	f000 fda5 	bl	600020a8 <__pwm_init_veneer>
	tempmon_init();
6000155e:	f000 fc15 	bl	60001d8c <tempmon_init>
	startup_middle_hook();
60001562:	f000 fa1b 	bl	6000199c <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001566:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001568:	2b13      	cmp	r3, #19
6000156a:	d9fc      	bls.n	60001566 <ResetHandler2+0x136>
	usb_init();
6000156c:	f000 fca6 	bl	60001ebc <usb_init>
60001570:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001572:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001576:	d3fb      	bcc.n	60001570 <ResetHandler2+0x140>
	startup_debug_reset();
60001578:	f000 fa14 	bl	600019a4 <startup_debug_reset>
	startup_late_hook();
6000157c:	f000 fa10 	bl	600019a0 <startup_default_late_hook>
	__libc_init_array();
60001580:	f000 fd6a 	bl	60002058 <____libc_init_array_veneer>
	main();
60001584:	f000 fd6c 	bl	60002060 <__main_veneer>
	while (1) asm("WFI");
60001588:	bf30      	wfi
6000158a:	e7fd      	b.n	60001588 <ResetHandler2+0x158>
6000158c:	13110d0c 	.word	0x13110d0c
60001590:	400d8000 	.word	0x400d8000
60001594:	2018101b 	.word	0x2018101b
60001598:	00028748 	.word	0x00028748
6000159c:	00000000 	.word	0x00000000
600015a0:	60002380 	.word	0x60002380
600015a4:	2000a2c0 	.word	0x2000a2c0
600015a8:	6002aacc 	.word	0x6002aacc
600015ac:	20000000 	.word	0x20000000
600015b0:	2000a000 	.word	0x2000a000
600015b4:	0001c2c9 	.word	0x0001c2c9
600015b8:	e000e400 	.word	0xe000e400
600015bc:	e000e4a0 	.word	0xe000e4a0
600015c0:	400fc000 	.word	0x400fc000
600015c4:	400ac000 	.word	0x400ac000
600015c8:	0001a971 	.word	0x0001a971
600015cc:	20013550 	.word	0x20013550
600015d0:	0001a975 	.word	0x0001a975
600015d4:	20200000 	.word	0x20200000
600015d8:	e0001000 	.word	0xe0001000
600015dc:	23c34600 	.word	0x23c34600
600015e0:	40084000 	.word	0x40084000
600015e4:	400d4000 	.word	0x400d4000
600015e8:	56c00000 	.word	0x56c00000
600015ec:	20013554 	.word	0x20013554

600015f0 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
600015f0:	4b05      	ldr	r3, [pc, #20]	; (60001608 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
600015f2:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
600015f6:	4a05      	ldr	r2, [pc, #20]	; (6000160c <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
600015f8:	4805      	ldr	r0, [pc, #20]	; (60001610 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
600015fa:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
600015fc:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
600015fe:	4a05      	ldr	r2, [pc, #20]	; (60001614 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001600:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001602:	4695      	mov	sp, r2
	ResetHandler2();
60001604:	f7ff ff14 	bl	60001430 <ResetHandler2>
60001608:	400ac000 	.word	0x400ac000
6000160c:	aaaaafff 	.word	0xaaaaafff
60001610:	00200007 	.word	0x00200007
60001614:	20050000 	.word	0x20050000

60001618 <set_audioClock(int, long, unsigned long, bool)>:
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
60001618:	b91b      	cbnz	r3, 60001622 <set_audioClock(int, long, unsigned long, bool)+0xa>
6000161a:	4b12      	ldr	r3, [pc, #72]	; (60001664 <set_audioClock(int, long, unsigned long, bool)+0x4c>)
6000161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
6000161e:	049b      	lsls	r3, r3, #18
60001620:	d41e      	bmi.n	60001660 <set_audioClock(int, long, unsigned long, bool)+0x48>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // page 1105
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60001622:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60001626:	4b0f      	ldr	r3, [pc, #60]	; (60001664 <set_audioClock(int, long, unsigned long, bool)+0x4c>)

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60001628:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
6000162c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60001630:	f440 1089 	orr.w	r0, r0, #1122304	; 0x112000
	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60001634:	6718      	str	r0, [r3, #112]	; 0x70
	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60001636:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
6000163a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
6000163e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
60001640:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
60001644:	671a      	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
60001646:	6f1a      	ldr	r2, [r3, #112]	; 0x70
60001648:	2a00      	cmp	r2, #0
6000164a:	dafc      	bge.n	60001646 <set_audioClock(int, long, unsigned long, bool)+0x2e>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
6000164c:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
60001650:	4a05      	ldr	r2, [pc, #20]	; (60001668 <set_audioClock(int, long, unsigned long, bool)+0x50>)
60001652:	400a      	ands	r2, r1
60001654:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
60001658:	6f1a      	ldr	r2, [r3, #112]	; 0x70
6000165a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
6000165e:	671a      	str	r2, [r3, #112]	; 0x70
}
60001660:	4770      	bx	lr
60001662:	bf00      	nop
60001664:	400d8000 	.word	0x400d8000
60001668:	ff7f7fff 	.word	0xff7f7fff

6000166c <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166c:	6943      	ldr	r3, [r0, #20]
6000166e:	4a0a      	ldr	r2, [pc, #40]	; (60001698 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001670:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001674:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001676:	7a03      	ldrb	r3, [r0, #8]
60001678:	4c08      	ldr	r4, [pc, #32]	; (6000169c <TwoWire::configSDApin(unsigned char)+0x30>)
6000167a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000167e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001682:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001684:	68c2      	ldr	r2, [r0, #12]
60001686:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001688:	6903      	ldr	r3, [r0, #16]
6000168a:	b10b      	cbz	r3, 60001690 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
6000168c:	6942      	ldr	r2, [r0, #20]
6000168e:	601a      	str	r2, [r3, #0]
	}
}
60001690:	f85d 4b04 	ldr.w	r4, [sp], #4
60001694:	4770      	bx	lr
60001696:	bf00      	nop
60001698:	20004be8 	.word	0x20004be8
6000169c:	0001f861 	.word	0x0001f861

600016a0 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a0:	6943      	ldr	r3, [r0, #20]
600016a2:	7e02      	ldrb	r2, [r0, #24]
600016a4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016a8:	f892 c008 	ldrb.w	ip, [r2, #8]
600016ac:	458c      	cmp	ip, r1
600016ae:	d01c      	beq.n	600016ea <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b0:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016b2:	2aff      	cmp	r2, #255	; 0xff
600016b4:	d019      	beq.n	600016ea <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016b6:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016b8:	b510      	push	{r4, lr}
600016ba:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016bc:	d016      	beq.n	600016ec <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016be:	7e1a      	ldrb	r2, [r3, #24]
600016c0:	2aff      	cmp	r2, #255	; 0xff
600016c2:	d006      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x32>
600016c4:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
600016ca:	6812      	ldr	r2, [r2, #0]
600016cc:	421a      	tst	r2, r3
600016ce:	d101      	bne.n	600016d4 <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d0:	7621      	strb	r1, [r4, #24]
}
600016d2:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016d4:	4b06      	ldr	r3, [pc, #24]	; (600016f0 <TwoWire::setSDA(unsigned char)+0x50>)
600016d6:	2205      	movs	r2, #5
		configSDApin(newindex);
600016d8:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016da:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016de:	685b      	ldr	r3, [r3, #4]
600016e0:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016e2:	f7ff ffc3 	bl	6000166c <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016e6:	7621      	strb	r1, [r4, #24]
600016e8:	e7f3      	b.n	600016d2 <TwoWire::setSDA(unsigned char)+0x32>
600016ea:	4770      	bx	lr
		if (sda_pin == pin) break;
600016ec:	2100      	movs	r1, #0
600016ee:	e7ea      	b.n	600016c6 <TwoWire::setSDA(unsigned char)+0x26>
600016f0:	20004be8 	.word	0x20004be8

600016f4 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016f4:	6943      	ldr	r3, [r0, #20]
600016f6:	4a0a      	ldr	r2, [pc, #40]	; (60001720 <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016f8:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
600016fc:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
60001702:	4c08      	ldr	r4, [pc, #32]	; (60001724 <TwoWire::configSCLpin(unsigned char)+0x30>)
60001704:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001708:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
6000170c:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000170e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001710:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001712:	6b03      	ldr	r3, [r0, #48]	; 0x30
60001714:	b10b      	cbz	r3, 6000171a <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001716:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001718:	601a      	str	r2, [r3, #0]
	}
}
6000171a:	f85d 4b04 	ldr.w	r4, [sp], #4
6000171e:	4770      	bx	lr
60001720:	20004be8 	.word	0x20004be8
60001724:	0001f861 	.word	0x0001f861

60001728 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001728:	6943      	ldr	r3, [r0, #20]
6000172a:	7e42      	ldrb	r2, [r0, #25]
6000172c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001730:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
60001734:	458c      	cmp	ip, r1
60001736:	d01e      	beq.n	60001776 <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001738:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
6000173c:	2aff      	cmp	r2, #255	; 0xff
6000173e:	d01a      	beq.n	60001776 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001740:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001742:	b510      	push	{r4, lr}
60001744:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
60001746:	d017      	beq.n	60001778 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001748:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
6000174c:	2aff      	cmp	r2, #255	; 0xff
6000174e:	d006      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x36>
60001750:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001752:	e9d3 2300 	ldrd	r2, r3, [r3]
60001756:	6812      	ldr	r2, [r2, #0]
60001758:	421a      	tst	r2, r3
6000175a:	d101      	bne.n	60001760 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
6000175c:	7661      	strb	r1, [r4, #25]
}
6000175e:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001760:	4b06      	ldr	r3, [pc, #24]	; (6000177c <TwoWire::setSCL(unsigned char)+0x54>)
60001762:	2205      	movs	r2, #5
		configSCLpin(newindex);
60001764:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001766:	eb03 130c 	add.w	r3, r3, ip, lsl #4
6000176a:	685b      	ldr	r3, [r3, #4]
6000176c:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
6000176e:	f7ff ffc1 	bl	600016f4 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
60001772:	7661      	strb	r1, [r4, #25]
60001774:	e7f3      	b.n	6000175e <TwoWire::setSCL(unsigned char)+0x36>
60001776:	4770      	bx	lr
		if (scl_pin == pin) break;
60001778:	2100      	movs	r1, #0
6000177a:	e7ea      	b.n	60001752 <TwoWire::setSCL(unsigned char)+0x2a>
6000177c:	20004be8 	.word	0x20004be8

60001780 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001780:	4916      	ldr	r1, [pc, #88]	; (600017dc <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001782:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001784:	6b8b      	ldr	r3, [r1, #56]	; 0x38
60001786:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
6000178a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
6000178e:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001790:	638b      	str	r3, [r1, #56]	; 0x38
{
60001792:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
60001794:	4d12      	ldr	r5, [pc, #72]	; (600017e0 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001796:	e9d2 1300 	ldrd	r1, r3, [r2]
6000179a:	680a      	ldr	r2, [r1, #0]
6000179c:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
6000179e:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a0:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017a2:	2202      	movs	r2, #2
	port->MCR = 0;
600017a4:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017a6:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017a8:	4a0e      	ldr	r2, [pc, #56]	; (600017e4 <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017aa:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017ac:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017ae:	2201      	movs	r2, #1
600017b0:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017b2:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017b4:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017b8:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017ba:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017be:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c0:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017c2:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c4:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017c6:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017c8:	7e01      	ldrb	r1, [r0, #24]
600017ca:	f7ff ff4f 	bl	6000166c <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017ce:	7e61      	ldrb	r1, [r4, #25]
600017d0:	4620      	mov	r0, r4
}
600017d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017d6:	f7ff bf8d 	b.w	600016f4 <TwoWire::configSCLpin(unsigned char)>
600017da:	bf00      	nop
600017dc:	400fc000 	.word	0x400fc000
600017e0:	05050bb8 	.word	0x05050bb8
600017e4:	1928373b 	.word	0x1928373b

600017e8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
600017e8:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
{
600017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
600017ee:	460e      	mov	r6, r1
600017f0:	b08d      	sub	sp, #52	; 0x34
600017f2:	bf28      	it	cs
600017f4:	f44f 7660 	movcs.w	r6, #896	; 0x380
600017f8:	460f      	mov	r7, r1
600017fa:	4605      	mov	r5, r0
	__disable_irq();
600017fc:	b672      	cpsid	i
	memory_pool = data;
600017fe:	4b2e      	ldr	r3, [pc, #184]	; (600018b8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd0>)
	memory_pool_first_mask = 0;
60001800:	2400      	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
60001802:	2270      	movs	r2, #112	; 0x70
	memory_pool = data;
60001804:	6018      	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001806:	4621      	mov	r1, r4
	memory_pool_first_mask = 0;
60001808:	4b2c      	ldr	r3, [pc, #176]	; (600018bc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd4>)
		memory_pool_available_mask[i] = 0;
6000180a:	482d      	ldr	r0, [pc, #180]	; (600018c0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd8>)
	memory_pool_first_mask = 0;
6000180c:	801c      	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
6000180e:	f000 fc2f 	bl	60002070 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
60001812:	b1cf      	cbz	r7, 60001848 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>
60001814:	4621      	mov	r1, r4
60001816:	482a      	ldr	r0, [pc, #168]	; (600018c0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xd8>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001818:	f04f 0c01 	mov.w	ip, #1
6000181c:	094a      	lsrs	r2, r1, #5
6000181e:	f001 031f 	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
60001822:	3101      	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001824:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
60001828:	fa0c f303 	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
6000182c:	428e      	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000182e:	ea43 0304 	orr.w	r3, r3, r4
60001832:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
60001836:	d8f1      	bhi.n	6000181c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x34>
60001838:	4628      	mov	r0, r5
6000183a:	2300      	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
6000183c:	8043      	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
6000183e:	3301      	adds	r3, #1
60001840:	f500 7082 	add.w	r0, r0, #260	; 0x104
60001844:	429e      	cmp	r6, r3
60001846:	d8f9      	bhi.n	6000183c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x54>
	}
	if (update_scheduled == false) {
60001848:	4c1e      	ldr	r4, [pc, #120]	; (600018c4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xdc>)
6000184a:	7825      	ldrb	r5, [r4, #0]
6000184c:	b115      	cbz	r5, 60001854 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6c>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
6000184e:	b662      	cpsie	i
}
60001850:	b00d      	add	sp, #52	; 0x34
60001852:	bdf0      	pop	{r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
60001854:	2008      	movs	r0, #8
60001856:	f000 fc17 	bl	60002088 <___Znwj_veneer>
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
6000185a:	4b1b      	ldr	r3, [pc, #108]	; (600018c8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xe0>)
// instances may be in use by libraries.
class IntervalTimer {
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
6000185c:	2280      	movs	r2, #128	; 0x80
6000185e:	4606      	mov	r6, r0
60001860:	9300      	str	r3, [sp, #0]
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
    {
        vtable_ptr_->copy_ptr(
60001862:	a902      	add	r1, sp, #8
        vtable_ptr_{other.vtable_ptr_}
60001864:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
60001866:	4b19      	ldr	r3, [pc, #100]	; (600018cc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xe4>)
60001868:	7102      	strb	r2, [r0, #4]
6000186a:	6005      	str	r5, [r0, #0]
        vtable_ptr_->copy_ptr(
6000186c:	a808      	add	r0, sp, #32
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
6000186e:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
60001870:	f000 fc12 	bl	60002098 <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer>
	// for precise timing.  Returns true is sucessful, or false if
	// all hardware timers are already in use.
	template <typename period_t>
	bool begin(callback_t funct, period_t period) {
		uint32_t cycles = cyclesFromPeriod(period);
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
60001874:	a906      	add	r1, sp, #24
60001876:	4a16      	ldr	r2, [pc, #88]	; (600018d0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xe8>)
60001878:	4630      	mov	r0, r6
6000187a:	f000 fc11 	bl	600020a0 <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
6000187e:	9b06      	ldr	r3, [sp, #24]
60001880:	a808      	add	r0, sp, #32
60001882:	68db      	ldr	r3, [r3, #12]
60001884:	4798      	blx	r3
60001886:	9b00      	ldr	r3, [sp, #0]
60001888:	a802      	add	r0, sp, #8
6000188a:	68db      	ldr	r3, [r3, #12]
6000188c:	4798      	blx	r3
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
6000188e:	7823      	ldrb	r3, [r4, #0]
60001890:	2b00      	cmp	r3, #0
60001892:	d1dc      	bne.n	6000184e <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x66>


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001894:	4b0f      	ldr	r3, [pc, #60]	; (600018d4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xec>)
60001896:	4a10      	ldr	r2, [pc, #64]	; (600018d8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xf0>)
60001898:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
6000189c:	490f      	ldr	r1, [pc, #60]	; (600018dc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xf4>)
6000189e:	20d0      	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600018a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018a4:	2240      	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600018a6:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600018aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
600018ae:	2301      	movs	r3, #1
600018b0:	7023      	strb	r3, [r4, #0]
	__enable_irq();
600018b2:	b662      	cpsie	i
}
600018b4:	b00d      	add	sp, #52	; 0x34
600018b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
600018b8:	2000adc0 	.word	0x2000adc0
600018bc:	200136c4 	.word	0x200136c4
600018c0:	2000adc8 	.word	0x2000adc8
600018c4:	200136db 	.word	0x200136db
600018c8:	20003f9c 	.word	0x20003f9c
600018cc:	0001a36d 	.word	0x0001a36d
600018d0:	0001101b 	.word	0x0001101b
600018d4:	2000a000 	.word	0x2000a000
600018d8:	0001a379 	.word	0x0001a379
600018dc:	e000e400 	.word	0xe000e400

600018e0 <flexspi2_psram_size>:
	FLEXSPI2_IPCR0 = addr;
600018e0:	4a2b      	ldr	r2, [pc, #172]	; (60001990 <flexspi2_psram_size+0xb0>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018e2:	2100      	movs	r1, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018e4:	2301      	movs	r3, #1
{
600018e6:	b410      	push	{r4}
	FLEXSPI2_IPCR0 = addr;
600018e8:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ec:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018f4:	6953      	ldr	r3, [r2, #20]
600018f6:	07db      	lsls	r3, r3, #31
600018f8:	d5fc      	bpl.n	600018f4 <flexspi2_psram_size+0x14>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600018fa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018fc:	f44f 3480 	mov.w	r4, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001900:	4923      	ldr	r1, [pc, #140]	; (60001990 <flexspi2_psram_size+0xb0>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001902:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001904:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001908:	f8c2 40a4 	str.w	r4, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000190c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001910:	694b      	ldr	r3, [r1, #20]
60001912:	07dc      	lsls	r4, r3, #31
60001914:	d5fc      	bpl.n	60001910 <flexspi2_psram_size+0x30>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001916:	2301      	movs	r3, #1
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001918:	f44f 3400 	mov.w	r4, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000191c:	4a1c      	ldr	r2, [pc, #112]	; (60001990 <flexspi2_psram_size+0xb0>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000191e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001920:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001924:	f8c1 40a4 	str.w	r4, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001928:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000192c:	6953      	ldr	r3, [r2, #20]
6000192e:	07d9      	lsls	r1, r3, #31
60001930:	d5fc      	bpl.n	6000192c <flexspi2_psram_size+0x4c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001932:	2301      	movs	r3, #1
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001934:	4c17      	ldr	r4, [pc, #92]	; (60001994 <flexspi2_psram_size+0xb4>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001936:	4916      	ldr	r1, [pc, #88]	; (60001990 <flexspi2_psram_size+0xb0>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001938:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
6000193a:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000193e:	f8c2 40a4 	str.w	r4, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001942:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001946:	694b      	ldr	r3, [r1, #20]
60001948:	07db      	lsls	r3, r3, #31
6000194a:	d5fc      	bpl.n	60001946 <flexspi2_psram_size+0x66>
	uint32_t id = FLEXSPI2_RFDR0;
6000194c:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	switch (id & 0xFFFF)
60001950:	f645 500d 	movw	r0, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001954:	2421      	movs	r4, #33	; 0x21
	switch (id & 0xFFFF)
60001956:	b29a      	uxth	r2, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001958:	614c      	str	r4, [r1, #20]
	switch (id & 0xFFFF)
6000195a:	4282      	cmp	r2, r0
6000195c:	d014      	beq.n	60001988 <flexspi2_psram_size+0xa8>
6000195e:	f645 519d 	movw	r1, #23965	; 0x5d9d
60001962:	428a      	cmp	r2, r1
60001964:	d10c      	bne.n	60001980 <flexspi2_psram_size+0xa0>
			switch ((id >> 21) & 0x7) // get size (Datasheet Table 6.2)
60001966:	f3c3 5342 	ubfx	r3, r3, #21, #3
6000196a:	2b03      	cmp	r3, #3
6000196c:	d00c      	beq.n	60001988 <flexspi2_psram_size+0xa8>
6000196e:	f1a3 0304 	sub.w	r3, r3, #4
}
60001972:	f85d 4b04 	ldr.w	r4, [sp], #4
60001976:	fab3 f383 	clz	r3, r3
6000197a:	095b      	lsrs	r3, r3, #5
6000197c:	0118      	lsls	r0, r3, #4
6000197e:	4770      	bx	lr
	switch (id & 0xFFFF)
60001980:	2000      	movs	r0, #0
}
60001982:	f85d 4b04 	ldr.w	r4, [sp], #4
60001986:	4770      	bx	lr
			result = 8;
60001988:	2008      	movs	r0, #8
}
6000198a:	f85d 4b04 	ldr.w	r4, [sp], #4
6000198e:	4770      	bx	lr
60001990:	402a4000 	.word	0x402a4000
60001994:	00030004 	.word	0x00030004

60001998 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001998:	4770      	bx	lr
6000199a:	bf00      	nop

6000199c <startup_default_middle_hook>:
6000199c:	4770      	bx	lr
6000199e:	bf00      	nop

600019a0 <startup_default_late_hook>:
600019a0:	4770      	bx	lr
600019a2:	bf00      	nop

600019a4 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600019a4:	bf00      	nop
600019a6:	4770      	bx	lr

600019a8 <configure_cache>:
{
600019a8:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600019aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600019ae:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600019b0:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600019b2:	4832      	ldr	r0, [pc, #200]	; (60001a7c <configure_cache+0xd4>)
	SCB_MPU_CTRL = 0; // turn off MPU
600019b4:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600019b8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600019bc:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600019be:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600019c2:	482f      	ldr	r0, [pc, #188]	; (60001a80 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600019c4:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600019c8:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600019ca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600019ce:	482d      	ldr	r0, [pc, #180]	; (60001a84 <configure_cache+0xdc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600019d0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600019d4:	4a2c      	ldr	r2, [pc, #176]	; (60001a88 <configure_cache+0xe0>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600019d6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600019da:	4c2c      	ldr	r4, [pc, #176]	; (60001a8c <configure_cache+0xe4>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600019dc:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600019e0:	482b      	ldr	r0, [pc, #172]	; (60001a90 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600019e2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600019e6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600019ea:	4c2a      	ldr	r4, [pc, #168]	; (60001a94 <configure_cache+0xec>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600019ec:	482a      	ldr	r0, [pc, #168]	; (60001a98 <configure_cache+0xf0>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600019ee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600019f2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600019f6:	4c29      	ldr	r4, [pc, #164]	; (60001a9c <configure_cache+0xf4>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600019f8:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600019fc:	4828      	ldr	r0, [pc, #160]	; (60001aa0 <configure_cache+0xf8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600019fe:	4a29      	ldr	r2, [pc, #164]	; (60001aa4 <configure_cache+0xfc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001a00:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001a04:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001a08:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001a0c:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001a10:	4c25      	ldr	r4, [pc, #148]	; (60001aa8 <configure_cache+0x100>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001a12:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001a14:	4825      	ldr	r0, [pc, #148]	; (60001aac <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001a16:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001a1a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001a1e:	4a24      	ldr	r2, [pc, #144]	; (60001ab0 <configure_cache+0x108>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001a20:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001a24:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_32M;
60001a28:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001a2c:	4c21      	ldr	r4, [pc, #132]	; (60001ab4 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_32M;
60001a2e:	3202      	adds	r2, #2
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001a30:	4821      	ldr	r0, [pc, #132]	; (60001ab8 <configure_cache+0x110>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001a32:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_32M;
60001a36:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001a3a:	320a      	adds	r2, #10
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001a3c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001a40:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001a44:	bf00      	nop
	asm("nop");
60001a46:	bf00      	nop
	asm("nop");
60001a48:	bf00      	nop
	asm("nop");
60001a4a:	bf00      	nop
	asm("nop");
60001a4c:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001a4e:	2201      	movs	r2, #1
60001a50:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001a54:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001a58:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001a5c:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001a60:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001a64:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a68:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a70:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001a74:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001a78:	4770      	bx	lr
60001a7a:	bf00      	nop
60001a7c:	1000003f 	.word	0x1000003f
60001a80:	07080025 	.word	0x07080025
60001a84:	00100009 	.word	0x00100009
60001a88:	20013720 	.word	0x20013720
60001a8c:	00200013 	.word	0x00200013
60001a90:	07020021 	.word	0x07020021
60001a94:	20000014 	.word	0x20000014
60001a98:	13080025 	.word	0x13080025
60001a9c:	10000009 	.word	0x10000009
60001aa0:	20200016 	.word	0x20200016
60001aa4:	130b0027 	.word	0x130b0027
60001aa8:	40000017 	.word	0x40000017
60001aac:	60000018 	.word	0x60000018
60001ab0:	070b002f 	.word	0x070b002f
60001ab4:	70000019 	.word	0x70000019
60001ab8:	8000001a 	.word	0x8000001a

60001abc <configure_external_ram>:
{
60001abc:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001abe:	4b82      	ldr	r3, [pc, #520]	; (60001cc8 <configure_external_ram+0x20c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001ac0:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001ac2:	4d82      	ldr	r5, [pc, #520]	; (60001ccc <configure_external_ram+0x210>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001ac4:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001ac6:	4f82      	ldr	r7, [pc, #520]	; (60001cd0 <configure_external_ram+0x214>)
{
60001ac8:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001aca:	f8c3 525c 	str.w	r5, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001ace:	4981      	ldr	r1, [pc, #516]	; (60001cd4 <configure_external_ram+0x218>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001ad0:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001ad4:	4c80      	ldr	r4, [pc, #512]	; (60001cd8 <configure_external_ram+0x21c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001ad6:	f8c3 5264 	str.w	r5, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001ada:	f5a5 4530 	sub.w	r5, r5, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ade:	4e7f      	ldr	r6, [pc, #508]	; (60001cdc <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001ae0:	f8c3 5268 	str.w	r5, [r3, #616]	; 0x268
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001ae4:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001ae8:	f8c3 426c 	str.w	r4, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001aec:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001af0:	f8c3 4274 	str.w	r4, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001af4:	f8c3 4278 	str.w	r4, [r3, #632]	; 0x278
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001af8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001afc:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001afe:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001b00:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001b02:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001b04:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001b12:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001b16:	4a72      	ldr	r2, [pc, #456]	; (60001ce0 <configure_external_ram+0x224>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001b18:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001b1c:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001b20:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001b24:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001b28:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001b2c:	69b1      	ldr	r1, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(4) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 105.6 MHz
60001b2e:	4b6d      	ldr	r3, [pc, #436]	; (60001ce4 <configure_external_ram+0x228>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001b30:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001b32:	486d      	ldr	r0, [pc, #436]	; (60001ce8 <configure_external_ram+0x22c>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b34:	496d      	ldr	r1, [pc, #436]	; (60001cec <configure_external_ram+0x230>)
		| CCM_CBCMR_FLEXSPI2_PODF(4) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 105.6 MHz
60001b36:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001b38:	4a6d      	ldr	r2, [pc, #436]	; (60001cf0 <configure_external_ram+0x234>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001b3a:	61b3      	str	r3, [r6, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001b3c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
60001b40:	f043 030c 	orr.w	r3, r3, #12
60001b44:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001b48:	6803      	ldr	r3, [r0, #0]
60001b4a:	f043 0302 	orr.w	r3, r3, #2
60001b4e:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001b50:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001b52:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(0)
60001b54:	2521      	movs	r5, #33	; 0x21
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001b56:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b58:	4b66      	ldr	r3, [pc, #408]	; (60001cf4 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001b5a:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001b5c:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b5e:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b60:	4c65      	ldr	r4, [pc, #404]	; (60001cf8 <configure_external_ram+0x23c>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b62:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b64:	4a65      	ldr	r2, [pc, #404]	; (60001cfc <configure_external_ram+0x240>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001b66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b6a:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001b6c:	68c3      	ldr	r3, [r0, #12]
60001b6e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001b72:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b74:	6a03      	ldr	r3, [r0, #32]
60001b76:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b78:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b7a:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b7c:	6a03      	ldr	r3, [r0, #32]
60001b7e:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b80:	4a5f      	ldr	r2, [pc, #380]	; (60001d00 <configure_external_ram+0x244>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b82:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b84:	f240 6405 	movw	r4, #1541	; 0x605
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b88:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b8a:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001b8c:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001b8e:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001b90:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001b98:	f043 0301 	orr.w	r3, r3, #1
60001b9c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001ba0:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ba4:	4957      	ldr	r1, [pc, #348]	; (60001d04 <configure_external_ram+0x248>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001ba6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001baa:	f043 0301 	orr.w	r3, r3, #1
60001bae:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001bb2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(0)
60001bb4:	6705      	str	r5, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001bb6:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(0)
60001bba:	6745      	str	r5, [r0, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001bbc:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bc0:	2402      	movs	r4, #2
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001bc2:	6803      	ldr	r3, [r0, #0]
60001bc4:	f023 0302 	bic.w	r3, r3, #2
60001bc8:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001bca:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bcc:	4b4e      	ldr	r3, [pc, #312]	; (60001d08 <configure_external_ram+0x24c>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001bce:	494f      	ldr	r1, [pc, #316]	; (60001d0c <configure_external_ram+0x250>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bd0:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001bd2:	f843 2b04 	str.w	r2, [r3], #4
60001bd6:	428b      	cmp	r3, r1
60001bd8:	d1fb      	bne.n	60001bd2 <configure_external_ram+0x116>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001bda:	4d43      	ldr	r5, [pc, #268]	; (60001ce8 <configure_external_ram+0x22c>)
60001bdc:	682b      	ldr	r3, [r5, #0]
60001bde:	f043 0301 	orr.w	r3, r3, #1
60001be2:	602b      	str	r3, [r5, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001be4:	682c      	ldr	r4, [r5, #0]
60001be6:	f014 0401 	ands.w	r4, r4, #1
60001bea:	d1fb      	bne.n	60001be4 <configure_external_ram+0x128>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001bec:	4945      	ldr	r1, [pc, #276]	; (60001d04 <configure_external_ram+0x248>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bee:	2302      	movs	r3, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bf0:	f240 62f5 	movw	r2, #1781	; 0x6f5
	uint8_t size1 = flexspi2_psram_size(0);
60001bf4:	4620      	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001bf6:	61a9      	str	r1, [r5, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001bf8:	f240 4199 	movw	r1, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bfc:	61eb      	str	r3, [r5, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001bfe:	f240 4366 	movw	r3, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001c02:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001c06:	f242 4201 	movw	r2, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001c0a:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001c0e:	4b40      	ldr	r3, [pc, #256]	; (60001d10 <configure_external_ram+0x254>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001c10:	f8c5 1220 	str.w	r1, [r5, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001c14:	f8c5 3230 	str.w	r3, [r5, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001c18:	f240 4335 	movw	r3, #1077	; 0x435
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001c1c:	f8c5 2234 	str.w	r2, [r5, #564]	; 0x234
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001c20:	493c      	ldr	r1, [pc, #240]	; (60001d14 <configure_external_ram+0x258>)
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001c22:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001c26:	4b3c      	ldr	r3, [pc, #240]	; (60001d18 <configure_external_ram+0x25c>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001c28:	f8c5 1250 	str.w	r1, [r5, #592]	; 0x250
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001c2c:	4a3b      	ldr	r2, [pc, #236]	; (60001d1c <configure_external_ram+0x260>)
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001c2e:	f8c5 3254 	str.w	r3, [r5, #596]	; 0x254
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001c32:	f242 2301 	movw	r3, #8705	; 0x2201
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001c36:	f8c5 2260 	str.w	r2, [r5, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001c3a:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264
	uint8_t size1 = flexspi2_psram_size(0);
60001c3e:	f7ff fe4f 	bl	600018e0 <flexspi2_psram_size>
	if (size1 > 0) {
60001c42:	4606      	mov	r6, r0
60001c44:	2800      	cmp	r0, #0
60001c46:	d036      	beq.n	60001cb6 <configure_external_ram+0x1fa>
		FLEXSPI2_FLSHA1CR0 = size1 << 10;
60001c48:	0283      	lsls	r3, r0, #10
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
		FLEXSPI2_FLSHA1CR0 = size1 << 10;
60001c4e:	662b      	str	r3, [r5, #96]	; 0x60
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c50:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001c52:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c56:	4c24      	ldr	r4, [pc, #144]	; (60001ce8 <configure_external_ram+0x22c>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c58:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c5c:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c60:	6963      	ldr	r3, [r4, #20]
60001c62:	07da      	lsls	r2, r3, #31
60001c64:	d5fc      	bpl.n	60001c60 <configure_external_ram+0x1a4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c66:	2501      	movs	r5, #1
		uint8_t size2 = flexspi2_psram_size(size1 << 20);
60001c68:	0537      	lsls	r7, r6, #20
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c6a:	6165      	str	r5, [r4, #20]
		uint8_t size2 = flexspi2_psram_size(size1 << 20);
60001c6c:	4638      	mov	r0, r7
60001c6e:	f7ff fe37 	bl	600018e0 <flexspi2_psram_size>
		external_psram_size = size1 + size2;
60001c72:	1832      	adds	r2, r6, r0
60001c74:	4b2a      	ldr	r3, [pc, #168]	; (60001d20 <configure_external_ram+0x264>)
60001c76:	b2d2      	uxtb	r2, r2
60001c78:	701a      	strb	r2, [r3, #0]
		if (size2 > 0) {
60001c7a:	b178      	cbz	r0, 60001c9c <configure_external_ram+0x1e0>
			FLEXSPI2_FLSHA2CR0 = size2 << 10;
60001c7c:	0280      	lsls	r0, r0, #10
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c82:	4919      	ldr	r1, [pc, #100]	; (60001ce8 <configure_external_ram+0x22c>)
			FLEXSPI2_FLSHA2CR0 = size2 << 10;
60001c84:	6660      	str	r0, [r4, #100]	; 0x64
	FLEXSPI2_IPCR0 = addr;
60001c86:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c8a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c8e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c92:	694b      	ldr	r3, [r1, #20]
60001c94:	07db      	lsls	r3, r3, #31
60001c96:	d5fc      	bpl.n	60001c92 <configure_external_ram+0x1d6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c98:	2301      	movs	r3, #1
60001c9a:	614b      	str	r3, [r1, #20]
			external_psram_size * 0x100000 -
60001c9c:	4921      	ldr	r1, [pc, #132]	; (60001d24 <configure_external_ram+0x268>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c9e:	2400      	movs	r4, #0
			external_psram_size * 0x100000 -
60001ca0:	4821      	ldr	r0, [pc, #132]	; (60001d28 <configure_external_ram+0x26c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001ca2:	2301      	movs	r3, #1
60001ca4:	9400      	str	r4, [sp, #0]
			external_psram_size * 0x100000 -
60001ca6:	1a40      	subs	r0, r0, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001ca8:	eb00 5202 	add.w	r2, r0, r2, lsl #20
60001cac:	481f      	ldr	r0, [pc, #124]	; (60001d2c <configure_external_ram+0x270>)
60001cae:	f000 f9ef 	bl	60002090 <__sm_set_pool_veneer>
}
60001cb2:	b003      	add	sp, #12
60001cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001cb6:	4b1d      	ldr	r3, [pc, #116]	; (60001d2c <configure_external_ram+0x270>)
		external_psram_size = 0;
60001cb8:	4a19      	ldr	r2, [pc, #100]	; (60001d20 <configure_external_ram+0x264>)
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001cba:	6018      	str	r0, [r3, #0]
		external_psram_size = 0;
60001cbc:	7010      	strb	r0, [r2, #0]
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001cbe:	60d8      	str	r0, [r3, #12]
60001cc0:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
60001cc4:	b003      	add	sp, #12
60001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001cc8:	401f8000 	.word	0x401f8000
60001ccc:	0001b0f9 	.word	0x0001b0f9
60001cd0:	000110f9 	.word	0x000110f9
60001cd4:	401f8400 	.word	0x401f8400
60001cd8:	000170f9 	.word	0x000170f9
60001cdc:	400fc000 	.word	0x400fc000
60001ce0:	1ffffcff 	.word	0x1ffffcff
60001ce4:	80000300 	.word	0x80000300
60001ce8:	402a4000 	.word	0x402a4000
60001cec:	402a8000 	.word	0x402a8000
60001cf0:	ffff0012 	.word	0xffff0012
60001cf4:	00f737ff 	.word	0x00f737ff
60001cf8:	80000040 	.word	0x80000040
60001cfc:	7cf0ff00 	.word	0x7cf0ff00
60001d00:	830f00ff 	.word	0x830f00ff
60001d04:	5af05af0 	.word	0x5af05af0
60001d08:	402a4200 	.word	0x402a4200
60001d0c:	402a4300 	.word	0x402a4300
60001d10:	3018049f 	.word	0x3018049f
60001d14:	0a1806eb 	.word	0x0a1806eb
60001d18:	26013206 	.word	0x26013206
60001d1c:	0a180638 	.word	0x0a180638
60001d20:	200136f0 	.word	0x200136f0
60001d24:	70000000 	.word	0x70000000
60001d28:	70000000 	.word	0x70000000
60001d2c:	200106f4 	.word	0x200106f4

60001d30 <usb_pll_start>:
{
60001d30:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001d32:	4a15      	ldr	r2, [pc, #84]	; (60001d88 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d34:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d36:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d3a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001d3e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001d42:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001d46:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001d4a:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001d4c:	f013 0f02 	tst.w	r3, #2
60001d50:	d10e      	bne.n	60001d70 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001d52:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001d56:	d00f      	beq.n	60001d78 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001d58:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001d5c:	d00e      	beq.n	60001d7c <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d5e:	2b00      	cmp	r3, #0
60001d60:	daf3      	bge.n	60001d4a <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001d66:	d10b      	bne.n	60001d80 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d68:	065b      	lsls	r3, r3, #25
60001d6a:	d50b      	bpl.n	60001d84 <usb_pll_start+0x54>
}
60001d6c:	bcf0      	pop	{r4, r5, r6, r7}
60001d6e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001d70:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001d72:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001d74:	6190      	str	r0, [r2, #24]
			continue;
60001d76:	e7e8      	b.n	60001d4a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001d78:	6155      	str	r5, [r2, #20]
			continue;
60001d7a:	e7e6      	b.n	60001d4a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d7c:	6156      	str	r6, [r2, #20]
			continue;
60001d7e:	e7e4      	b.n	60001d4a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d80:	6191      	str	r1, [r2, #24]
			continue;
60001d82:	e7e2      	b.n	60001d4a <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d84:	6157      	str	r7, [r2, #20]
			continue;
60001d86:	e7e0      	b.n	60001d4a <usb_pll_start+0x1a>
60001d88:	400d8000 	.word	0x400d8000

60001d8c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d8c:	4a3f      	ldr	r2, [pc, #252]	; (60001e8c <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d8e:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001d90:	493f      	ldr	r1, [pc, #252]	; (60001e90 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d92:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d96:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d9a:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d9e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001e94 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001da2:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001e98 <tempmon_init+0x10c>
{
60001daa:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001dac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001db0:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001db4:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001db8:	4d38      	ldr	r5, [pc, #224]	; (60001e9c <tempmon_init+0x110>)
60001dba:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001dbc:	4c38      	ldr	r4, [pc, #224]	; (60001ea0 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001dbe:	4839      	ldr	r0, [pc, #228]	; (60001ea4 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001dc0:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001dc2:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001dc6:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001dc8:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001dd0:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001dd4:	ee07 1a10 	vmov	s14, r1
60001dd8:	4b33      	ldr	r3, [pc, #204]	; (60001ea8 <tempmon_init+0x11c>)
60001dda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001dde:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001de0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001de4:	4931      	ldr	r1, [pc, #196]	; (60001eac <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de6:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dea:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001dee:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001df2:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001df6:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001dfa:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dfe:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001e02:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e06:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001e0a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e0e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e12:	4827      	ldr	r0, [pc, #156]	; (60001eb0 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e14:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e18:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e1c:	ee75 5a87 	vadd.f32	s11, s11, s14
60001e20:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e24:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001e28:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e2c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001e30:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e34:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001e38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e3c:	ee16 3a10 	vmov	r3, s12
60001e40:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e48:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001e4c:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e4e:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e52:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001e5a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001e5e:	430b      	orrs	r3, r1
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001e60:	4914      	ldr	r1, [pc, #80]	; (60001eb4 <tempmon_init+0x128>)
60001e62:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001e66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001e6a:	f043 0302 	orr.w	r3, r3, #2
60001e6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001e72:	4b11      	ldr	r3, [pc, #68]	; (60001eb8 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e74:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001e78:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e80:	2201      	movs	r2, #1
}
60001e82:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e84:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001e88:	4770      	bx	lr
60001e8a:	bf00      	nop
60001e8c:	400d8100 	.word	0x400d8100
60001e90:	401f4400 	.word	0x401f4400
60001e94:	42aa0000 	.word	0x42aa0000
60001e98:	42b40000 	.word	0x42b40000
60001e9c:	20013318 	.word	0x20013318
60001ea0:	20013314 	.word	0x20013314
60001ea4:	2001331c 	.word	0x2001331c
60001ea8:	20013320 	.word	0x20013320
60001eac:	0fff0000 	.word	0x0fff0000
60001eb0:	e000e400 	.word	0xe000e400
60001eb4:	2000a000 	.word	0x2000a000
60001eb8:	0001c4b5 	.word	0x0001c4b5

60001ebc <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ebc:	4b31      	ldr	r3, [pc, #196]	; (60001f84 <usb_init+0xc8>)
60001ebe:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001ec2:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ec4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001ec8:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001ecc:	f000 f8cc 	bl	60002068 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001ed0:	4a2d      	ldr	r2, [pc, #180]	; (60001f88 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001ed2:	492e      	ldr	r1, [pc, #184]	; (60001f8c <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001ed4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001ed8:	482d      	ldr	r0, [pc, #180]	; (60001f90 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001eda:	f043 0303 	orr.w	r3, r3, #3
60001ede:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001ee2:	4b2c      	ldr	r3, [pc, #176]	; (60001f94 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ee4:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001ee8:	6802      	ldr	r2, [r0, #0]
60001eea:	421a      	tst	r2, r3
60001eec:	d103      	bne.n	60001ef6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001eee:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ef2:	079a      	lsls	r2, r3, #30
60001ef4:	d01b      	beq.n	60001f2e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ef6:	4a25      	ldr	r2, [pc, #148]	; (60001f8c <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ef8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001efc:	4b24      	ldr	r3, [pc, #144]	; (60001f90 <usb_init+0xd4>)
60001efe:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001f00:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001f04:	f043 0302 	orr.w	r3, r3, #2
60001f08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001f0c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001f10:	079b      	lsls	r3, r3, #30
60001f12:	d4fb      	bmi.n	60001f0c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001f14:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001f18:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001f1c:	4b1c      	ldr	r3, [pc, #112]	; (60001f90 <usb_init+0xd4>)
60001f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001f22:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001f26:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001f28:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001f2a:	f000 f8a9 	bl	60002080 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001f2e:	4a18      	ldr	r2, [pc, #96]	; (60001f90 <usb_init+0xd4>)
60001f30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001f34:	4c15      	ldr	r4, [pc, #84]	; (60001f8c <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001f36:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001f38:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001f3a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001f3c:	4b16      	ldr	r3, [pc, #88]	; (60001f98 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001f3e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001f40:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001f44:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001f48:	4618      	mov	r0, r3
60001f4a:	f000 f891 	bl	60002070 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001f4e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001f52:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001f54:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001f58:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001f5c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001f5e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001f62:	641a      	str	r2, [r3, #64]	; 0x40
60001f64:	4b0d      	ldr	r3, [pc, #52]	; (60001f9c <usb_init+0xe0>)
60001f66:	4a0e      	ldr	r2, [pc, #56]	; (60001fa0 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001f68:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001f6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001f70:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001f74:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001f78:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001f7a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001f7e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001f82:	bd10      	pop	{r4, pc}
60001f84:	400d8000 	.word	0x400d8000
60001f88:	400fc000 	.word	0x400fc000
60001f8c:	402e0000 	.word	0x402e0000
60001f90:	400d9000 	.word	0x400d9000
60001f94:	001e1c00 	.word	0x001e1c00
60001f98:	20000000 	.word	0x20000000
60001f9c:	2000a000 	.word	0x2000a000
60001fa0:	0001c69d 	.word	0x0001c69d

60001fa4 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001fa4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001fa6:	4b0e      	ldr	r3, [pc, #56]	; (60001fe0 <_reboot_Teensyduino_+0x3c>)
60001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001faa:	079b      	lsls	r3, r3, #30
60001fac:	d400      	bmi.n	60001fb0 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001fae:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001fb0:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001fb2:	4b0c      	ldr	r3, [pc, #48]	; (60001fe4 <_reboot_Teensyduino_+0x40>)
60001fb4:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001fb6:	4a0c      	ldr	r2, [pc, #48]	; (60001fe8 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001fb8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001fbc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001fc0:	490a      	ldr	r1, [pc, #40]	; (60001fec <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001fc2:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001fc6:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001fc8:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001fca:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001fce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001fd2:	4807      	ldr	r0, [pc, #28]	; (60001ff0 <_reboot_Teensyduino_+0x4c>)
60001fd4:	4a07      	ldr	r2, [pc, #28]	; (60001ff4 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001fd6:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001fd8:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001fda:	689b      	ldr	r3, [r3, #8]
60001fdc:	4798      	blx	r3
	}
	__builtin_unreachable();
60001fde:	bf00      	nop
60001fe0:	401f4400 	.word	0x401f4400
60001fe4:	402e0000 	.word	0x402e0000
60001fe8:	400ac000 	.word	0x400ac000
60001fec:	00200003 	.word	0x00200003
60001ff0:	20208000 	.word	0x20208000
60001ff4:	eb120000 	.word	0xeb120000

60001ff8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001ff8:	4b10      	ldr	r3, [pc, #64]	; (6000203c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001ffa:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001ffc:	4a10      	ldr	r2, [pc, #64]	; (60002040 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001ffe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60002000:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60002004:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002006:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002008:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000200c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000200e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60002012:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002014:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002016:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002018:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000201a:	061b      	lsls	r3, r3, #24
6000201c:	d4fc      	bmi.n	60002018 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000201e:	4a09      	ldr	r2, [pc, #36]	; (60002044 <analog_init+0x4c>)
60002020:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002024:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002026:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002028:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000202a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000202c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60002030:	d1fb      	bne.n	6000202a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60002032:	4a05      	ldr	r2, [pc, #20]	; (60002048 <analog_init+0x50>)
60002034:	7013      	strb	r3, [r2, #0]
}
60002036:	f85d 4b04 	ldr.w	r4, [sp], #4
6000203a:	4770      	bx	lr
6000203c:	400fc000 	.word	0x400fc000
60002040:	400c4000 	.word	0x400c4000
60002044:	400c8000 	.word	0x400c8000
60002048:	200136ef 	.word	0x200136ef

6000204c <_init>:
6000204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000204e:	bf00      	nop
60002050:	bcf8      	pop	{r3, r4, r5, r6, r7}
60002052:	bc08      	pop	{r3}
60002054:	469e      	mov	lr, r3
60002056:	4770      	bx	lr

60002058 <____libc_init_array_veneer>:
60002058:	f85f f000 	ldr.w	pc, [pc]	; 6000205c <____libc_init_array_veneer+0x4>
6000205c:	00022635 	.word	0x00022635

60002060 <__main_veneer>:
60002060:	f85f f000 	ldr.w	pc, [pc]	; 60002064 <__main_veneer+0x4>
60002064:	0001bc19 	.word	0x0001bc19

60002068 <__usb_init_serialnumber_veneer>:
60002068:	f85f f000 	ldr.w	pc, [pc]	; 6000206c <__usb_init_serialnumber_veneer+0x4>
6000206c:	0001ce0d 	.word	0x0001ce0d

60002070 <__memset_veneer>:
60002070:	f85f f000 	ldr.w	pc, [pc]	; 60002074 <__memset_veneer+0x4>
60002074:	00022301 	.word	0x00022301

60002078 <__set_arm_clock_veneer>:
60002078:	f85f f000 	ldr.w	pc, [pc]	; 6000207c <__set_arm_clock_veneer+0x4>
6000207c:	0001b245 	.word	0x0001b245

60002080 <__delay_veneer>:
60002080:	f85f f000 	ldr.w	pc, [pc]	; 60002084 <__delay_veneer+0x4>
60002084:	0001b535 	.word	0x0001b535

60002088 <___Znwj_veneer>:
60002088:	f85f f000 	ldr.w	pc, [pc]	; 6000208c <___Znwj_veneer+0x4>
6000208c:	0001bd5d 	.word	0x0001bd5d

60002090 <__sm_set_pool_veneer>:
60002090:	f85f f000 	ldr.w	pc, [pc]	; 60002094 <__sm_set_pool_veneer+0x4>
60002094:	0001d6fd 	.word	0x0001d6fd

60002098 <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer>:
60002098:	f85f f000 	ldr.w	pc, [pc]	; 6000209c <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer+0x4>
6000209c:	0001a3e1 	.word	0x0001a3e1

600020a0 <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer>:
600020a0:	f85f f000 	ldr.w	pc, [pc]	; 600020a4 <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer+0x4>
600020a4:	0001aa49 	.word	0x0001aa49

600020a8 <__pwm_init_veneer>:
600020a8:	f85f f000 	ldr.w	pc, [pc]	; 600020ac <__pwm_init_veneer+0x4>
600020ac:	0001c1b1 	.word	0x0001c1b1

600020b0 <__frame_dummy_init_array_entry>:
600020b0:	00000105 0000593d 0000ad21 0000b4e9     ....=Y..!.......
600020c0:	0000b72d 0000b745 0000b75d 0000b775     -...E...]...u...
600020d0:	0000b78d 0000b7a5 0000b7bd 0000b7d5     ................
600020e0:	0000b7ed 0000b805 0000be19 0000be31     ............1...
600020f0:	0000be49 0000be61 0000be79 0000be91     I...a...y.......
60002100:	0000bea9 0000bec1 0000bef5 0000bf25     ............%...
60002110:	0000bf3d 0000bf55 0000bf6d 0000bf85     =...U...m.......
60002120:	0000d689 00019cf1 0001ab4d              ........M...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
    }
    return ptr;
  }
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      26:	699d      	ldr	r5, [r3, #24]
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      28:	695a      	ldr	r2, [r3, #20]
      2a:	4015      	ands	r5, r2
    return (cp & 0X3FF) + 0XDC00;
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x25>
      2e:	4f25      	ldr	r7, [pc, #148]	; (c4 <_teensy_model_identifier+0x9f>)
      *hs = highSurrogate(cp);
      30:	2601      	movs	r6, #1
      *ls = lowSurrogate(cp);
      32:	619d      	str	r5, [r3, #24]
  }
      34:	fa95 f4a5 	rbit	r4, r5
  static const uint8_t UNSTABLE_STATE  = 0b00000010;
  static const uint8_t CHANGED_STATE   = 0b00000100;

private:
  inline void changeState();
  inline void setStateFlag(const uint8_t flag)    {state |= flag;}
      38:	fab4 f484 	clz	r4, r4
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      40:	fa06 f404 	lsl.w	r4, r6, r4
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      44:	4798      	blx	r3
      46:	43a5      	bics	r5, r4
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0xf>
}
      4a:	4b1f      	ldr	r3, [pc, #124]	; (c8 <_teensy_model_identifier+0xa3>)
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
  }
  if (!dir.isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
      50:	4015      	ands	r5, r2
  return true;

 fail:
  return false;
}
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4b>
      54:	4f1d      	ldr	r7, [pc, #116]	; (cc <_teensy_model_identifier+0xa7>)
      56:	2601      	movs	r6, #1
  return false;
      58:	619d      	str	r5, [r3, #24]
}
      5a:	fa95 f4a5 	rbit	r4, r5
      5e:	fab4 f484 	clz	r4, r4
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
      6a:	4798      	blx	r3
      }
    }
  }
  if (r < 0) {
    // read error
    return -1;
      6c:	43a5      	bics	r5, r4
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
		channel = 0;
	}
#endif
}
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x35>
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
      70:	4b17      	ldr	r3, [pc, #92]	; (d0 <_teensy_model_identifier+0xab>)
      72:	699d      	ldr	r5, [r3, #24]
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
      74:	695a      	ldr	r2, [r3, #20]
      76:	4015      	ands	r5, r2
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x71>
  }
  return true;

 fail:
  return false;
}
      7a:	4f16      	ldr	r7, [pc, #88]	; (d4 <_teensy_model_identifier+0xaf>)
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
  return true;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
  DirName_t* dn;
  size_t n = 0;
      80:	fa95 f4a5 	rbit	r4, r5
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      84:	fab4 f484 	clz	r4, r4
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5b>
		buf[sizeof(buf) - 1] = '0';
      96:	4b10      	ldr	r3, [pc, #64]	; (d8 <_teensy_model_identifier+0xb3>)
      98:	699d      	ldr	r5, [r3, #24]
		i = sizeof(buf) - 1;
      9a:	695a      	ldr	r2, [r3, #20]
	if (base < 2) return 0;
      9c:	4015      	ands	r5, r2
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x97>
      a0:	4f0e      	ldr	r7, [pc, #56]	; (dc <_teensy_model_identifier+0xb7>)
      a2:	2601      	movs	r6, #1
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
}
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
		} while (n > 0);
      aa:	fab4 f484 	clz	r4, r4
}
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FF8000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
      b2:	fa06 f404 	lsl.w	r4, r6, r4
      b6:	4798      	blx	r3
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x81>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
      bc:	f3bf 8f4f 	dsb	sy
}
      c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c2:	bf00      	nop
      c4:	20009a64 	.word	0x20009a64
      c8:	42004000 	.word	0x42004000
      cc:	20009ae4 	.word	0x20009ae4
      d0:	42008000 	.word	0x42008000
      d4:	20009b64 	.word	0x20009b64
      d8:	4200c000 	.word	0x4200c000
      dc:	20009be4 	.word	0x20009be4

000000e0 <register_tm_clones>:
	if (csPin == BUILTIN_SDCARD) {
		bool ret = sdfs.begin(SdioConfig(FIFO_SDIO));
		cardPreviouslyPresent = ret;
		#if defined(__IMXRT1062__)
		// start off with just trying on T4.x
		cdPin_ = _SD_DAT3;
      e0:	4805      	ldr	r0, [pc, #20]	; (f8 <register_tm_clones+0x18>)
		if (!ret) {
      e2:	4b06      	ldr	r3, [pc, #24]	; (fc <register_tm_clones+0x1c>)
      e4:	1a1b      	subs	r3, r3, r0
      e6:	0fd9      	lsrs	r1, r3, #31
      e8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      ec:	1049      	asrs	r1, r1, #1
      ee:	d002      	beq.n	f6 <register_tm_clones+0x16>
      f0:	4b03      	ldr	r3, [pc, #12]	; (100 <register_tm_clones+0x20>)
      f2:	b103      	cbz	r3, f6 <register_tm_clones+0x16>
      f4:	4718      	bx	r3
      f6:	4770      	bx	lr
	virtual void update(void);
	void gain(unsigned int channel, float gain) {
		if (channel >= 4) return;
		if (gain > 32767.0f) gain = 32767.0f;
		else if (gain < -32767.0f) gain = -32767.0f;
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
      f8:	2000a2c0 	.word	0x2000a2c0
      fc:	2000a2c0 	.word	0x2000a2c0
     100:	00000000 	.word	0x00000000

00000104 <frame_dummy>:
     104:	b508      	push	{r3, lr}
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <frame_dummy+0x18>)
			transmit(lsw, 1);
			release(lsw);
			return;
		} else {
			if (msw) release(msw);
			if (lsw) release(lsw);
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4905      	ldr	r1, [pc, #20]	; (120 <frame_dummy+0x1c>)
     10c:	4805      	ldr	r0, [pc, #20]	; (124 <frame_dummy+0x20>)
     10e:	f3af 8000 	nop.w
     112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sum += table[data2 & 255];
		table += 256;

	} while (--count > 0);
	return signed_saturate_rshift(sum, 16, RSHIFT);
}
     116:	f7ff bfe3 	b.w	e0 <register_tm_clones>
     11a:	bf00      	nop
	#if IMXRT_CACHE_ENABLED >= 2
	uint32_t *dc = dest;
	#endif
	
	for (i=0; i < 16; i += 2) {
		src1 = block_input[i] ? (uint32_t *)(block_input[i]->data) : zeros;
     11c:	00000000 	.word	0x00000000
		if (block_ch1 == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_ch1 = new1;
			block_ch2 = new2;
			block_ch3 = new3;
     120:	20012ea0 	.word	0x20012ea0
			block_ch4 = new4;
			block_offset = 0;
			__enable_irq();
     124:	60035c00 	.word	0x60035c00

00000128 <SetFilterBandwidth(int) [clone .part.0]>:

// Subroutine for Setting Filter Bandwith**********************************************************
void SetFilterBandwidth(int intBW)
{
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
  if (intBW == 3000)
     128:	f640 33b8 	movw	r3, #3000	; 0xbb8
     12c:	4298      	cmp	r0, r3
void SetFilterBandwidth(int intBW)
     12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				coeff_p = NULL;
			}
		}
	}
	void end(void) {
		coeff_p = NULL;
     132:	f04f 0800 	mov.w	r8, #0
     136:	b082      	sub	sp, #8
     138:	4e32      	ldr	r6, [pc, #200]	; (204 <SetFilterBandwidth(int) [clone .part.0]+0xdc>)
     13a:	4d33      	ldr	r5, [pc, #204]	; (208 <SetFilterBandwidth(int) [clone .part.0]+0xe0>)
		coeff_p = cp;
     13c:	4f33      	ldr	r7, [pc, #204]	; (20c <SetFilterBandwidth(int) [clone .part.0]+0xe4>)
  if (intBW == 3000)
     13e:	d035      	beq.n	1ac <SetFilterBandwidth(int) [clone .part.0]+0x84>
     140:	4c33      	ldr	r4, [pc, #204]	; (210 <SetFilterBandwidth(int) [clone .part.0]+0xe8>)
		coeff_p = NULL;
     142:	f8c6 801c 	str.w	r8, [r6, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     146:	2c01      	cmp	r4, #1
		coeff_p = NULL;
     148:	f8c5 801c 	str.w	r8, [r5, #28]
		coeff_p = cp;
     14c:	61fc      	str	r4, [r7, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     14e:	d90c      	bls.n	16a <SetFilterBandwidth(int) [clone .part.0]+0x42>
			if (arm_fir_init_q15(&fir_inst, n_coeffs, (q15_t *)coeff_p,
     150:	2380      	movs	r3, #128	; 0x80
     152:	4622      	mov	r2, r4
     154:	2178      	movs	r1, #120	; 0x78
     156:	f107 0020 	add.w	r0, r7, #32
     15a:	9300      	str	r3, [sp, #0]
     15c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
     160:	f01d fdf8 	bl	1dd54 <arm_fir_init_q15>
     164:	b108      	cbz	r0, 16a <SetFilterBandwidth(int) [clone .part.0]+0x42>
				coeff_p = NULL;
     166:	f8c7 801c 	str.w	r8, [r7, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     16a:	2c01      	cmp	r4, #1
		coeff_p = cp;
     16c:	61f4      	str	r4, [r6, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     16e:	d90b      	bls.n	188 <SetFilterBandwidth(int) [clone .part.0]+0x60>
			if (arm_fir_init_q15(&fir_inst, n_coeffs, (q15_t *)coeff_p,
     170:	2280      	movs	r2, #128	; 0x80
     172:	4b28      	ldr	r3, [pc, #160]	; (214 <SetFilterBandwidth(int) [clone .part.0]+0xec>)
     174:	2178      	movs	r1, #120	; 0x78
     176:	9200      	str	r2, [sp, #0]
     178:	f1a3 000c 	sub.w	r0, r3, #12
     17c:	4a24      	ldr	r2, [pc, #144]	; (210 <SetFilterBandwidth(int) [clone .part.0]+0xe8>)
     17e:	f01d fde9 	bl	1dd54 <arm_fir_init_q15>
     182:	b108      	cbz	r0, 188 <SetFilterBandwidth(int) [clone .part.0]+0x60>
				coeff_p = NULL;
     184:	2300      	movs	r3, #0
     186:	61f3      	str	r3, [r6, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     188:	2c01      	cmp	r4, #1
		coeff_p = cp;
     18a:	61ec      	str	r4, [r5, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     18c:	d90b      	bls.n	1a6 <SetFilterBandwidth(int) [clone .part.0]+0x7e>
			if (arm_fir_init_q15(&fir_inst, n_coeffs, (q15_t *)coeff_p,
     18e:	4b22      	ldr	r3, [pc, #136]	; (218 <SetFilterBandwidth(int) [clone .part.0]+0xf0>)
     190:	2080      	movs	r0, #128	; 0x80
     192:	4a1f      	ldr	r2, [pc, #124]	; (210 <SetFilterBandwidth(int) [clone .part.0]+0xe8>)
     194:	9000      	str	r0, [sp, #0]
     196:	2178      	movs	r1, #120	; 0x78
     198:	f1a3 000c 	sub.w	r0, r3, #12
     19c:	f01d fdda 	bl	1dd54 <arm_fir_init_q15>
     1a0:	b108      	cbz	r0, 1a6 <SetFilterBandwidth(int) [clone .part.0]+0x7e>
				coeff_p = NULL;
     1a2:	2300      	movs	r3, #0
     1a4:	61eb      	str	r3, [r5, #28]
    filLPIn_0_FIR.begin(sht6KHzLPFIRCoeffRev2, 120); // Start Input LP Filter in 6000 Hz BW mode
    filLPWhiteFIR.begin(sht6KHzLPFIRCoeffRev2, 120); // White Noise LP Filter
    filLPDownMix.begin(sht6KHzLPFIRCoeffRev2, 120); // Down Mix LP Filter
  }
  return;
}//END SetFilterBandwidth ************************************************************************
     1a6:	b002      	add	sp, #8
     1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		coeff_p = cp;
     1ac:	4c1b      	ldr	r4, [pc, #108]	; (21c <SetFilterBandwidth(int) [clone .part.0]+0xf4>)
		coeff_p = NULL;
     1ae:	f8c6 801c 	str.w	r8, [r6, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     1b2:	2c01      	cmp	r4, #1
		coeff_p = NULL;
     1b4:	f8c5 801c 	str.w	r8, [r5, #28]
		coeff_p = cp;
     1b8:	61fc      	str	r4, [r7, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     1ba:	d90c      	bls.n	1d6 <SetFilterBandwidth(int) [clone .part.0]+0xae>
			if (arm_fir_init_q15(&fir_inst, n_coeffs, (q15_t *)coeff_p,
     1bc:	2380      	movs	r3, #128	; 0x80
     1be:	4622      	mov	r2, r4
     1c0:	2178      	movs	r1, #120	; 0x78
     1c2:	f107 0020 	add.w	r0, r7, #32
     1c6:	9300      	str	r3, [sp, #0]
     1c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
     1cc:	f01d fdc2 	bl	1dd54 <arm_fir_init_q15>
     1d0:	b108      	cbz	r0, 1d6 <SetFilterBandwidth(int) [clone .part.0]+0xae>
				coeff_p = NULL;
     1d2:	f8c7 801c 	str.w	r8, [r7, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     1d6:	2c01      	cmp	r4, #1
		coeff_p = cp;
     1d8:	61f4      	str	r4, [r6, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     1da:	d90b      	bls.n	1f4 <SetFilterBandwidth(int) [clone .part.0]+0xcc>
			if (arm_fir_init_q15(&fir_inst, n_coeffs, (q15_t *)coeff_p,
     1dc:	2280      	movs	r2, #128	; 0x80
     1de:	4b0d      	ldr	r3, [pc, #52]	; (214 <SetFilterBandwidth(int) [clone .part.0]+0xec>)
     1e0:	2178      	movs	r1, #120	; 0x78
     1e2:	9200      	str	r2, [sp, #0]
     1e4:	f1a3 000c 	sub.w	r0, r3, #12
     1e8:	4a0c      	ldr	r2, [pc, #48]	; (21c <SetFilterBandwidth(int) [clone .part.0]+0xf4>)
     1ea:	f01d fdb3 	bl	1dd54 <arm_fir_init_q15>
     1ee:	b108      	cbz	r0, 1f4 <SetFilterBandwidth(int) [clone .part.0]+0xcc>
				coeff_p = NULL;
     1f0:	2300      	movs	r3, #0
     1f2:	61f3      	str	r3, [r6, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     1f4:	2c01      	cmp	r4, #1
		coeff_p = cp;
     1f6:	61ec      	str	r4, [r5, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
     1f8:	d9d5      	bls.n	1a6 <SetFilterBandwidth(int) [clone .part.0]+0x7e>
			if (arm_fir_init_q15(&fir_inst, n_coeffs, (q15_t *)coeff_p,
     1fa:	4b07      	ldr	r3, [pc, #28]	; (218 <SetFilterBandwidth(int) [clone .part.0]+0xf0>)
     1fc:	2080      	movs	r0, #128	; 0x80
     1fe:	4a07      	ldr	r2, [pc, #28]	; (21c <SetFilterBandwidth(int) [clone .part.0]+0xf4>)
     200:	e7c8      	b.n	194 <SetFilterBandwidth(int) [clone .part.0]+0x6c>
     202:	bf00      	nop
     204:	20012648 	.word	0x20012648
     208:	200120d0 	.word	0x200120d0
     20c:	2001238c 	.word	0x2001238c
     210:	20009350 	.word	0x20009350
     214:	20012674 	.word	0x20012674
     218:	200120fc 	.word	0x200120fc
     21c:	20009260 	.word	0x20009260

00000220 <Encoder2::isr5()>:
	#endif
	#ifdef CORE_INT4_PIN
	static void isr4(void) { update(interruptArgs[4]); }
	#endif
	#ifdef CORE_INT5_PIN
	static void isr5(void) { update(interruptArgs[5]); }
     220:	4b1b      	ldr	r3, [pc, #108]	; (290 <Encoder2::isr5()+0x70>)
     222:	695a      	ldr	r2, [r3, #20]
     224:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     226:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     22a:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     22c:	6809      	ldr	r1, [r1, #0]
     22e:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     230:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     232:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     234:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     236:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     238:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     23a:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     23c:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     23e:	d018      	beq.n	272 <Encoder2::isr5()+0x52>
		if (p1val) arg->pstate |= 0x02;
     240:	b9a1      	cbnz	r1, 26c <Encoder2::isr5()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     242:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     246:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     24a:	4912      	ldr	r1, [pc, #72]	; (294 <Encoder2::isr5()+0x74>)
     24c:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     24e:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     250:	b149      	cbz	r1, 266 <Encoder2::isr5()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     252:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     254:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     258:	b29b      	uxth	r3, r3
     25a:	b2d9      	uxtb	r1, r3
     25c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     25e:	292b      	cmp	r1, #43	; 0x2b
     260:	d00c      	beq.n	27c <Encoder2::isr5()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     262:	2917      	cmp	r1, #23
     264:	d010      	beq.n	288 <Encoder2::isr5()+0x68>
	static void isr5(void) { update(interruptArgs[5]); }
     266:	f85d 4b04 	ldr.w	r4, [sp], #4
     26a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     26c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     270:	e7e7      	b.n	242 <Encoder2::isr5()+0x22>
		if (p1val) arg->pstate |= 0x02;
     272:	2900      	cmp	r1, #0
     274:	d0e7      	beq.n	246 <Encoder2::isr5()+0x26>
     276:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     27a:	e7e4      	b.n	246 <Encoder2::isr5()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     27c:	6953      	ldr	r3, [r2, #20]
	static void isr5(void) { update(interruptArgs[5]); }
     27e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     282:	3b01      	subs	r3, #1
     284:	6153      	str	r3, [r2, #20]
	static void isr5(void) { update(interruptArgs[5]); }
     286:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     288:	6953      	ldr	r3, [r2, #20]
     28a:	3301      	adds	r3, #1
     28c:	6153      	str	r3, [r2, #20]
	static void isr5(void) { update(interruptArgs[5]); }
     28e:	e7ea      	b.n	266 <Encoder2::isr5()+0x46>
     290:	2000af60 	.word	0x2000af60
     294:	20009448 	.word	0x20009448

00000298 <Encoder2::isr6()>:
	#endif
	#ifdef CORE_INT6_PIN
	static void isr6(void) { update(interruptArgs[6]); }
     298:	4b1b      	ldr	r3, [pc, #108]	; (308 <Encoder2::isr6()+0x70>)
     29a:	699a      	ldr	r2, [r3, #24]
     29c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     29e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     2a2:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     2a4:	6809      	ldr	r1, [r1, #0]
     2a6:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     2a8:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     2aa:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     2ac:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     2ae:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     2b0:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     2b2:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     2b4:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     2b6:	d018      	beq.n	2ea <Encoder2::isr6()+0x52>
		if (p1val) arg->pstate |= 0x02;
     2b8:	b9a1      	cbnz	r1, 2e4 <Encoder2::isr6()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     2ba:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     2be:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     2c2:	4912      	ldr	r1, [pc, #72]	; (30c <Encoder2::isr6()+0x74>)
     2c4:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     2c6:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     2c8:	b149      	cbz	r1, 2de <Encoder2::isr6()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     2ca:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     2cc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     2d0:	b29b      	uxth	r3, r3
     2d2:	b2d9      	uxtb	r1, r3
     2d4:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     2d6:	292b      	cmp	r1, #43	; 0x2b
     2d8:	d00c      	beq.n	2f4 <Encoder2::isr6()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     2da:	2917      	cmp	r1, #23
     2dc:	d010      	beq.n	300 <Encoder2::isr6()+0x68>
	static void isr6(void) { update(interruptArgs[6]); }
     2de:	f85d 4b04 	ldr.w	r4, [sp], #4
     2e2:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     2e4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     2e8:	e7e7      	b.n	2ba <Encoder2::isr6()+0x22>
		if (p1val) arg->pstate |= 0x02;
     2ea:	2900      	cmp	r1, #0
     2ec:	d0e7      	beq.n	2be <Encoder2::isr6()+0x26>
     2ee:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     2f2:	e7e4      	b.n	2be <Encoder2::isr6()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     2f4:	6953      	ldr	r3, [r2, #20]
	static void isr6(void) { update(interruptArgs[6]); }
     2f6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     2fa:	3b01      	subs	r3, #1
     2fc:	6153      	str	r3, [r2, #20]
	static void isr6(void) { update(interruptArgs[6]); }
     2fe:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     300:	6953      	ldr	r3, [r2, #20]
     302:	3301      	adds	r3, #1
     304:	6153      	str	r3, [r2, #20]
	static void isr6(void) { update(interruptArgs[6]); }
     306:	e7ea      	b.n	2de <Encoder2::isr6()+0x46>
     308:	2000af60 	.word	0x2000af60
     30c:	20009448 	.word	0x20009448

00000310 <Encoder2::isr7()>:
	#endif
	#ifdef CORE_INT7_PIN
	static void isr7(void) { update(interruptArgs[7]); }
     310:	4b1b      	ldr	r3, [pc, #108]	; (380 <Encoder2::isr7()+0x70>)
     312:	69da      	ldr	r2, [r3, #28]
     314:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     316:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     31a:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     31c:	6809      	ldr	r1, [r1, #0]
     31e:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     320:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     322:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     324:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     326:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     328:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     32a:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     32c:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     32e:	d018      	beq.n	362 <Encoder2::isr7()+0x52>
		if (p1val) arg->pstate |= 0x02;
     330:	b9a1      	cbnz	r1, 35c <Encoder2::isr7()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     332:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     336:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     33a:	4912      	ldr	r1, [pc, #72]	; (384 <Encoder2::isr7()+0x74>)
     33c:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     33e:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     340:	b149      	cbz	r1, 356 <Encoder2::isr7()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     342:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     344:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     348:	b29b      	uxth	r3, r3
     34a:	b2d9      	uxtb	r1, r3
     34c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     34e:	292b      	cmp	r1, #43	; 0x2b
     350:	d00c      	beq.n	36c <Encoder2::isr7()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     352:	2917      	cmp	r1, #23
     354:	d010      	beq.n	378 <Encoder2::isr7()+0x68>
	static void isr7(void) { update(interruptArgs[7]); }
     356:	f85d 4b04 	ldr.w	r4, [sp], #4
     35a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     35c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     360:	e7e7      	b.n	332 <Encoder2::isr7()+0x22>
		if (p1val) arg->pstate |= 0x02;
     362:	2900      	cmp	r1, #0
     364:	d0e7      	beq.n	336 <Encoder2::isr7()+0x26>
     366:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     36a:	e7e4      	b.n	336 <Encoder2::isr7()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     36c:	6953      	ldr	r3, [r2, #20]
	static void isr7(void) { update(interruptArgs[7]); }
     36e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     372:	3b01      	subs	r3, #1
     374:	6153      	str	r3, [r2, #20]
	static void isr7(void) { update(interruptArgs[7]); }
     376:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     378:	6953      	ldr	r3, [r2, #20]
     37a:	3301      	adds	r3, #1
     37c:	6153      	str	r3, [r2, #20]
	static void isr7(void) { update(interruptArgs[7]); }
     37e:	e7ea      	b.n	356 <Encoder2::isr7()+0x46>
     380:	2000af60 	.word	0x2000af60
     384:	20009448 	.word	0x20009448

00000388 <Encoder2::isr8()>:
	#endif
	#ifdef CORE_INT8_PIN
	static void isr8(void) { update(interruptArgs[8]); }
     388:	4b1b      	ldr	r3, [pc, #108]	; (3f8 <Encoder2::isr8()+0x70>)
     38a:	6a1a      	ldr	r2, [r3, #32]
     38c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     38e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     392:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     394:	6809      	ldr	r1, [r1, #0]
     396:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     398:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     39a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     39c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     39e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     3a0:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     3a2:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     3a4:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     3a6:	d018      	beq.n	3da <Encoder2::isr8()+0x52>
		if (p1val) arg->pstate |= 0x02;
     3a8:	b9a1      	cbnz	r1, 3d4 <Encoder2::isr8()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     3aa:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     3ae:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     3b2:	4912      	ldr	r1, [pc, #72]	; (3fc <Encoder2::isr8()+0x74>)
     3b4:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     3b6:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     3b8:	b149      	cbz	r1, 3ce <Encoder2::isr8()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     3ba:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     3bc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     3c0:	b29b      	uxth	r3, r3
     3c2:	b2d9      	uxtb	r1, r3
     3c4:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     3c6:	292b      	cmp	r1, #43	; 0x2b
     3c8:	d00c      	beq.n	3e4 <Encoder2::isr8()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     3ca:	2917      	cmp	r1, #23
     3cc:	d010      	beq.n	3f0 <Encoder2::isr8()+0x68>
	static void isr8(void) { update(interruptArgs[8]); }
     3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
     3d2:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     3d4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     3d8:	e7e7      	b.n	3aa <Encoder2::isr8()+0x22>
		if (p1val) arg->pstate |= 0x02;
     3da:	2900      	cmp	r1, #0
     3dc:	d0e7      	beq.n	3ae <Encoder2::isr8()+0x26>
     3de:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     3e2:	e7e4      	b.n	3ae <Encoder2::isr8()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     3e4:	6953      	ldr	r3, [r2, #20]
	static void isr8(void) { update(interruptArgs[8]); }
     3e6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     3ea:	3b01      	subs	r3, #1
     3ec:	6153      	str	r3, [r2, #20]
	static void isr8(void) { update(interruptArgs[8]); }
     3ee:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     3f0:	6953      	ldr	r3, [r2, #20]
     3f2:	3301      	adds	r3, #1
     3f4:	6153      	str	r3, [r2, #20]
	static void isr8(void) { update(interruptArgs[8]); }
     3f6:	e7ea      	b.n	3ce <Encoder2::isr8()+0x46>
     3f8:	2000af60 	.word	0x2000af60
     3fc:	20009448 	.word	0x20009448

00000400 <Encoder2::isr9()>:
	#endif
	#ifdef CORE_INT9_PIN
	static void isr9(void) { update(interruptArgs[9]); }
     400:	4b1b      	ldr	r3, [pc, #108]	; (470 <Encoder2::isr9()+0x70>)
     402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     404:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     406:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     40a:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     40c:	6809      	ldr	r1, [r1, #0]
     40e:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     410:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     412:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     414:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     416:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     418:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     41a:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     41c:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     41e:	d018      	beq.n	452 <Encoder2::isr9()+0x52>
		if (p1val) arg->pstate |= 0x02;
     420:	b9a1      	cbnz	r1, 44c <Encoder2::isr9()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     422:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     426:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     42a:	4912      	ldr	r1, [pc, #72]	; (474 <Encoder2::isr9()+0x74>)
     42c:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     42e:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     430:	b149      	cbz	r1, 446 <Encoder2::isr9()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     432:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     434:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     438:	b29b      	uxth	r3, r3
     43a:	b2d9      	uxtb	r1, r3
     43c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     43e:	292b      	cmp	r1, #43	; 0x2b
     440:	d00c      	beq.n	45c <Encoder2::isr9()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     442:	2917      	cmp	r1, #23
     444:	d010      	beq.n	468 <Encoder2::isr9()+0x68>
	static void isr9(void) { update(interruptArgs[9]); }
     446:	f85d 4b04 	ldr.w	r4, [sp], #4
     44a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     44c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     450:	e7e7      	b.n	422 <Encoder2::isr9()+0x22>
		if (p1val) arg->pstate |= 0x02;
     452:	2900      	cmp	r1, #0
     454:	d0e7      	beq.n	426 <Encoder2::isr9()+0x26>
     456:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     45a:	e7e4      	b.n	426 <Encoder2::isr9()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     45c:	6953      	ldr	r3, [r2, #20]
	static void isr9(void) { update(interruptArgs[9]); }
     45e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     462:	3b01      	subs	r3, #1
     464:	6153      	str	r3, [r2, #20]
	static void isr9(void) { update(interruptArgs[9]); }
     466:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     468:	6953      	ldr	r3, [r2, #20]
     46a:	3301      	adds	r3, #1
     46c:	6153      	str	r3, [r2, #20]
	static void isr9(void) { update(interruptArgs[9]); }
     46e:	e7ea      	b.n	446 <Encoder2::isr9()+0x46>
     470:	2000af60 	.word	0x2000af60
     474:	20009448 	.word	0x20009448

00000478 <Encoder2::isr10()>:
	#endif
	#ifdef CORE_INT10_PIN
	static void isr10(void) { update(interruptArgs[10]); }
     478:	4b1b      	ldr	r3, [pc, #108]	; (4e8 <Encoder2::isr10()+0x70>)
     47a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     47c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     47e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     482:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     484:	6809      	ldr	r1, [r1, #0]
     486:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     488:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     48a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     48c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     48e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     490:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     492:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     494:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     496:	d018      	beq.n	4ca <Encoder2::isr10()+0x52>
		if (p1val) arg->pstate |= 0x02;
     498:	b9a1      	cbnz	r1, 4c4 <Encoder2::isr10()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     49a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     49e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     4a2:	4912      	ldr	r1, [pc, #72]	; (4ec <Encoder2::isr10()+0x74>)
     4a4:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     4a6:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     4a8:	b149      	cbz	r1, 4be <Encoder2::isr10()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     4aa:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     4ac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     4b0:	b29b      	uxth	r3, r3
     4b2:	b2d9      	uxtb	r1, r3
     4b4:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     4b6:	292b      	cmp	r1, #43	; 0x2b
     4b8:	d00c      	beq.n	4d4 <Encoder2::isr10()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     4ba:	2917      	cmp	r1, #23
     4bc:	d010      	beq.n	4e0 <Encoder2::isr10()+0x68>
	static void isr10(void) { update(interruptArgs[10]); }
     4be:	f85d 4b04 	ldr.w	r4, [sp], #4
     4c2:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     4c4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     4c8:	e7e7      	b.n	49a <Encoder2::isr10()+0x22>
		if (p1val) arg->pstate |= 0x02;
     4ca:	2900      	cmp	r1, #0
     4cc:	d0e7      	beq.n	49e <Encoder2::isr10()+0x26>
     4ce:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     4d2:	e7e4      	b.n	49e <Encoder2::isr10()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     4d4:	6953      	ldr	r3, [r2, #20]
	static void isr10(void) { update(interruptArgs[10]); }
     4d6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     4da:	3b01      	subs	r3, #1
     4dc:	6153      	str	r3, [r2, #20]
	static void isr10(void) { update(interruptArgs[10]); }
     4de:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     4e0:	6953      	ldr	r3, [r2, #20]
     4e2:	3301      	adds	r3, #1
     4e4:	6153      	str	r3, [r2, #20]
	static void isr10(void) { update(interruptArgs[10]); }
     4e6:	e7ea      	b.n	4be <Encoder2::isr10()+0x46>
     4e8:	2000af60 	.word	0x2000af60
     4ec:	20009448 	.word	0x20009448

000004f0 <Encoder2::isr11()>:
	#endif
	#ifdef CORE_INT11_PIN
	static void isr11(void) { update(interruptArgs[11]); }
     4f0:	4b1b      	ldr	r3, [pc, #108]	; (560 <Encoder2::isr11()+0x70>)
     4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     4f4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     4f6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     4fa:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     4fc:	6809      	ldr	r1, [r1, #0]
     4fe:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     500:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     502:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     504:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     506:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     508:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     50a:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     50c:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     50e:	d018      	beq.n	542 <Encoder2::isr11()+0x52>
		if (p1val) arg->pstate |= 0x02;
     510:	b9a1      	cbnz	r1, 53c <Encoder2::isr11()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     512:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     516:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     51a:	4912      	ldr	r1, [pc, #72]	; (564 <Encoder2::isr11()+0x74>)
     51c:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     51e:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     520:	b149      	cbz	r1, 536 <Encoder2::isr11()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     522:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     524:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     528:	b29b      	uxth	r3, r3
     52a:	b2d9      	uxtb	r1, r3
     52c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     52e:	292b      	cmp	r1, #43	; 0x2b
     530:	d00c      	beq.n	54c <Encoder2::isr11()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     532:	2917      	cmp	r1, #23
     534:	d010      	beq.n	558 <Encoder2::isr11()+0x68>
	static void isr11(void) { update(interruptArgs[11]); }
     536:	f85d 4b04 	ldr.w	r4, [sp], #4
     53a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     53c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     540:	e7e7      	b.n	512 <Encoder2::isr11()+0x22>
		if (p1val) arg->pstate |= 0x02;
     542:	2900      	cmp	r1, #0
     544:	d0e7      	beq.n	516 <Encoder2::isr11()+0x26>
     546:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     54a:	e7e4      	b.n	516 <Encoder2::isr11()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     54c:	6953      	ldr	r3, [r2, #20]
	static void isr11(void) { update(interruptArgs[11]); }
     54e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     552:	3b01      	subs	r3, #1
     554:	6153      	str	r3, [r2, #20]
	static void isr11(void) { update(interruptArgs[11]); }
     556:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     558:	6953      	ldr	r3, [r2, #20]
     55a:	3301      	adds	r3, #1
     55c:	6153      	str	r3, [r2, #20]
	static void isr11(void) { update(interruptArgs[11]); }
     55e:	e7ea      	b.n	536 <Encoder2::isr11()+0x46>
     560:	2000af60 	.word	0x2000af60
     564:	20009448 	.word	0x20009448

00000568 <Encoder2::isr12()>:
	#endif
	#ifdef CORE_INT12_PIN
	static void isr12(void) { update(interruptArgs[12]); }
     568:	4b1b      	ldr	r3, [pc, #108]	; (5d8 <Encoder2::isr12()+0x70>)
     56a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     56c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     56e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     572:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     574:	6809      	ldr	r1, [r1, #0]
     576:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     578:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     57a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     57c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     57e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     580:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     582:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     584:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     586:	d018      	beq.n	5ba <Encoder2::isr12()+0x52>
		if (p1val) arg->pstate |= 0x02;
     588:	b9a1      	cbnz	r1, 5b4 <Encoder2::isr12()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     58a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     58e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     592:	4912      	ldr	r1, [pc, #72]	; (5dc <Encoder2::isr12()+0x74>)
     594:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     596:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     598:	b149      	cbz	r1, 5ae <Encoder2::isr12()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     59a:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     59c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     5a0:	b29b      	uxth	r3, r3
     5a2:	b2d9      	uxtb	r1, r3
     5a4:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     5a6:	292b      	cmp	r1, #43	; 0x2b
     5a8:	d00c      	beq.n	5c4 <Encoder2::isr12()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     5aa:	2917      	cmp	r1, #23
     5ac:	d010      	beq.n	5d0 <Encoder2::isr12()+0x68>
	static void isr12(void) { update(interruptArgs[12]); }
     5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
     5b2:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     5b4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     5b8:	e7e7      	b.n	58a <Encoder2::isr12()+0x22>
		if (p1val) arg->pstate |= 0x02;
     5ba:	2900      	cmp	r1, #0
     5bc:	d0e7      	beq.n	58e <Encoder2::isr12()+0x26>
     5be:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     5c2:	e7e4      	b.n	58e <Encoder2::isr12()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     5c4:	6953      	ldr	r3, [r2, #20]
	static void isr12(void) { update(interruptArgs[12]); }
     5c6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     5ca:	3b01      	subs	r3, #1
     5cc:	6153      	str	r3, [r2, #20]
	static void isr12(void) { update(interruptArgs[12]); }
     5ce:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     5d0:	6953      	ldr	r3, [r2, #20]
     5d2:	3301      	adds	r3, #1
     5d4:	6153      	str	r3, [r2, #20]
	static void isr12(void) { update(interruptArgs[12]); }
     5d6:	e7ea      	b.n	5ae <Encoder2::isr12()+0x46>
     5d8:	2000af60 	.word	0x2000af60
     5dc:	20009448 	.word	0x20009448

000005e0 <Encoder2::isr13()>:
	#endif
	#ifdef CORE_INT13_PIN
	static void isr13(void) { update(interruptArgs[13]); }
     5e0:	4b1b      	ldr	r3, [pc, #108]	; (650 <Encoder2::isr13()+0x70>)
     5e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     5e4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     5e6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     5ea:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     5ec:	6809      	ldr	r1, [r1, #0]
     5ee:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     5f0:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     5f2:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     5f4:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     5f6:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     5f8:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     5fa:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     5fc:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     5fe:	d018      	beq.n	632 <Encoder2::isr13()+0x52>
		if (p1val) arg->pstate |= 0x02;
     600:	b9a1      	cbnz	r1, 62c <Encoder2::isr13()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     602:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     606:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     60a:	4912      	ldr	r1, [pc, #72]	; (654 <Encoder2::isr13()+0x74>)
     60c:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     60e:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     610:	b149      	cbz	r1, 626 <Encoder2::isr13()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     612:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     614:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     618:	b29b      	uxth	r3, r3
     61a:	b2d9      	uxtb	r1, r3
     61c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     61e:	292b      	cmp	r1, #43	; 0x2b
     620:	d00c      	beq.n	63c <Encoder2::isr13()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     622:	2917      	cmp	r1, #23
     624:	d010      	beq.n	648 <Encoder2::isr13()+0x68>
	static void isr13(void) { update(interruptArgs[13]); }
     626:	f85d 4b04 	ldr.w	r4, [sp], #4
     62a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     62c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     630:	e7e7      	b.n	602 <Encoder2::isr13()+0x22>
		if (p1val) arg->pstate |= 0x02;
     632:	2900      	cmp	r1, #0
     634:	d0e7      	beq.n	606 <Encoder2::isr13()+0x26>
     636:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     63a:	e7e4      	b.n	606 <Encoder2::isr13()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     63c:	6953      	ldr	r3, [r2, #20]
	static void isr13(void) { update(interruptArgs[13]); }
     63e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     642:	3b01      	subs	r3, #1
     644:	6153      	str	r3, [r2, #20]
	static void isr13(void) { update(interruptArgs[13]); }
     646:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     648:	6953      	ldr	r3, [r2, #20]
     64a:	3301      	adds	r3, #1
     64c:	6153      	str	r3, [r2, #20]
	static void isr13(void) { update(interruptArgs[13]); }
     64e:	e7ea      	b.n	626 <Encoder2::isr13()+0x46>
     650:	2000af60 	.word	0x2000af60
     654:	20009448 	.word	0x20009448

00000658 <Encoder2::isr14()>:
	#endif
	#ifdef CORE_INT14_PIN
	static void isr14(void) { update(interruptArgs[14]); }
     658:	4b1b      	ldr	r3, [pc, #108]	; (6c8 <Encoder2::isr14()+0x70>)
     65a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     65c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     65e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     662:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     664:	6809      	ldr	r1, [r1, #0]
     666:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     668:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     66a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     66c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     66e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     670:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     672:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     674:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     676:	d018      	beq.n	6aa <Encoder2::isr14()+0x52>
		if (p1val) arg->pstate |= 0x02;
     678:	b9a1      	cbnz	r1, 6a4 <Encoder2::isr14()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     67a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     67e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     682:	4912      	ldr	r1, [pc, #72]	; (6cc <Encoder2::isr14()+0x74>)
     684:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     686:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     688:	b149      	cbz	r1, 69e <Encoder2::isr14()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     68a:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     68c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     690:	b29b      	uxth	r3, r3
     692:	b2d9      	uxtb	r1, r3
     694:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     696:	292b      	cmp	r1, #43	; 0x2b
     698:	d00c      	beq.n	6b4 <Encoder2::isr14()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     69a:	2917      	cmp	r1, #23
     69c:	d010      	beq.n	6c0 <Encoder2::isr14()+0x68>
	static void isr14(void) { update(interruptArgs[14]); }
     69e:	f85d 4b04 	ldr.w	r4, [sp], #4
     6a2:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     6a4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     6a8:	e7e7      	b.n	67a <Encoder2::isr14()+0x22>
		if (p1val) arg->pstate |= 0x02;
     6aa:	2900      	cmp	r1, #0
     6ac:	d0e7      	beq.n	67e <Encoder2::isr14()+0x26>
     6ae:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     6b2:	e7e4      	b.n	67e <Encoder2::isr14()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     6b4:	6953      	ldr	r3, [r2, #20]
	static void isr14(void) { update(interruptArgs[14]); }
     6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     6ba:	3b01      	subs	r3, #1
     6bc:	6153      	str	r3, [r2, #20]
	static void isr14(void) { update(interruptArgs[14]); }
     6be:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     6c0:	6953      	ldr	r3, [r2, #20]
     6c2:	3301      	adds	r3, #1
     6c4:	6153      	str	r3, [r2, #20]
	static void isr14(void) { update(interruptArgs[14]); }
     6c6:	e7ea      	b.n	69e <Encoder2::isr14()+0x46>
     6c8:	2000af60 	.word	0x2000af60
     6cc:	20009448 	.word	0x20009448

000006d0 <Encoder2::isr15()>:
	#endif
	#ifdef CORE_INT15_PIN
	static void isr15(void) { update(interruptArgs[15]); }
     6d0:	4b1b      	ldr	r3, [pc, #108]	; (740 <Encoder2::isr15()+0x70>)
     6d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
     6d4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     6d6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     6da:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     6dc:	6809      	ldr	r1, [r1, #0]
     6de:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     6e0:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     6e2:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     6e4:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     6e6:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     6e8:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     6ea:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     6ec:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     6ee:	d018      	beq.n	722 <Encoder2::isr15()+0x52>
		if (p1val) arg->pstate |= 0x02;
     6f0:	b9a1      	cbnz	r1, 71c <Encoder2::isr15()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     6f2:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     6f6:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     6fa:	4912      	ldr	r1, [pc, #72]	; (744 <Encoder2::isr15()+0x74>)
     6fc:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     6fe:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     700:	b149      	cbz	r1, 716 <Encoder2::isr15()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     702:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     704:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     708:	b29b      	uxth	r3, r3
     70a:	b2d9      	uxtb	r1, r3
     70c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     70e:	292b      	cmp	r1, #43	; 0x2b
     710:	d00c      	beq.n	72c <Encoder2::isr15()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     712:	2917      	cmp	r1, #23
     714:	d010      	beq.n	738 <Encoder2::isr15()+0x68>
	static void isr15(void) { update(interruptArgs[15]); }
     716:	f85d 4b04 	ldr.w	r4, [sp], #4
     71a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     71c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     720:	e7e7      	b.n	6f2 <Encoder2::isr15()+0x22>
		if (p1val) arg->pstate |= 0x02;
     722:	2900      	cmp	r1, #0
     724:	d0e7      	beq.n	6f6 <Encoder2::isr15()+0x26>
     726:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     72a:	e7e4      	b.n	6f6 <Encoder2::isr15()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     72c:	6953      	ldr	r3, [r2, #20]
	static void isr15(void) { update(interruptArgs[15]); }
     72e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     732:	3b01      	subs	r3, #1
     734:	6153      	str	r3, [r2, #20]
	static void isr15(void) { update(interruptArgs[15]); }
     736:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     738:	6953      	ldr	r3, [r2, #20]
     73a:	3301      	adds	r3, #1
     73c:	6153      	str	r3, [r2, #20]
	static void isr15(void) { update(interruptArgs[15]); }
     73e:	e7ea      	b.n	716 <Encoder2::isr15()+0x46>
     740:	2000af60 	.word	0x2000af60
     744:	20009448 	.word	0x20009448

00000748 <Encoder2::isr16()>:
	#endif
	#ifdef CORE_INT16_PIN
	static void isr16(void) { update(interruptArgs[16]); }
     748:	4b1b      	ldr	r3, [pc, #108]	; (7b8 <Encoder2::isr16()+0x70>)
     74a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     74c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     74e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     752:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     754:	6809      	ldr	r1, [r1, #0]
     756:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     758:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     75a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     75c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     75e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     760:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     762:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     764:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     766:	d018      	beq.n	79a <Encoder2::isr16()+0x52>
		if (p1val) arg->pstate |= 0x02;
     768:	b9a1      	cbnz	r1, 794 <Encoder2::isr16()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     76a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     76e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     772:	4912      	ldr	r1, [pc, #72]	; (7bc <Encoder2::isr16()+0x74>)
     774:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     776:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     778:	b149      	cbz	r1, 78e <Encoder2::isr16()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     77a:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     77c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     780:	b29b      	uxth	r3, r3
     782:	b2d9      	uxtb	r1, r3
     784:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     786:	292b      	cmp	r1, #43	; 0x2b
     788:	d00c      	beq.n	7a4 <Encoder2::isr16()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     78a:	2917      	cmp	r1, #23
     78c:	d010      	beq.n	7b0 <Encoder2::isr16()+0x68>
	static void isr16(void) { update(interruptArgs[16]); }
     78e:	f85d 4b04 	ldr.w	r4, [sp], #4
     792:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     794:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     798:	e7e7      	b.n	76a <Encoder2::isr16()+0x22>
		if (p1val) arg->pstate |= 0x02;
     79a:	2900      	cmp	r1, #0
     79c:	d0e7      	beq.n	76e <Encoder2::isr16()+0x26>
     79e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     7a2:	e7e4      	b.n	76e <Encoder2::isr16()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     7a4:	6953      	ldr	r3, [r2, #20]
	static void isr16(void) { update(interruptArgs[16]); }
     7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     7aa:	3b01      	subs	r3, #1
     7ac:	6153      	str	r3, [r2, #20]
	static void isr16(void) { update(interruptArgs[16]); }
     7ae:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     7b0:	6953      	ldr	r3, [r2, #20]
     7b2:	3301      	adds	r3, #1
     7b4:	6153      	str	r3, [r2, #20]
	static void isr16(void) { update(interruptArgs[16]); }
     7b6:	e7ea      	b.n	78e <Encoder2::isr16()+0x46>
     7b8:	2000af60 	.word	0x2000af60
     7bc:	20009448 	.word	0x20009448

000007c0 <Encoder2::isr17()>:
	#endif
	#ifdef CORE_INT17_PIN
	static void isr17(void) { update(interruptArgs[17]); }
     7c0:	4b1b      	ldr	r3, [pc, #108]	; (830 <Encoder2::isr17()+0x70>)
     7c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     7c4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     7c6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     7ca:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     7cc:	6809      	ldr	r1, [r1, #0]
     7ce:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     7d0:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     7d2:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     7d4:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     7d6:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     7d8:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     7da:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     7dc:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     7de:	d018      	beq.n	812 <Encoder2::isr17()+0x52>
		if (p1val) arg->pstate |= 0x02;
     7e0:	b9a1      	cbnz	r1, 80c <Encoder2::isr17()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     7e2:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     7e6:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     7ea:	4912      	ldr	r1, [pc, #72]	; (834 <Encoder2::isr17()+0x74>)
     7ec:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     7ee:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     7f0:	b149      	cbz	r1, 806 <Encoder2::isr17()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     7f2:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     7f4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     7f8:	b29b      	uxth	r3, r3
     7fa:	b2d9      	uxtb	r1, r3
     7fc:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     7fe:	292b      	cmp	r1, #43	; 0x2b
     800:	d00c      	beq.n	81c <Encoder2::isr17()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     802:	2917      	cmp	r1, #23
     804:	d010      	beq.n	828 <Encoder2::isr17()+0x68>
	static void isr17(void) { update(interruptArgs[17]); }
     806:	f85d 4b04 	ldr.w	r4, [sp], #4
     80a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     80c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     810:	e7e7      	b.n	7e2 <Encoder2::isr17()+0x22>
		if (p1val) arg->pstate |= 0x02;
     812:	2900      	cmp	r1, #0
     814:	d0e7      	beq.n	7e6 <Encoder2::isr17()+0x26>
     816:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     81a:	e7e4      	b.n	7e6 <Encoder2::isr17()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     81c:	6953      	ldr	r3, [r2, #20]
	static void isr17(void) { update(interruptArgs[17]); }
     81e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     822:	3b01      	subs	r3, #1
     824:	6153      	str	r3, [r2, #20]
	static void isr17(void) { update(interruptArgs[17]); }
     826:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     828:	6953      	ldr	r3, [r2, #20]
     82a:	3301      	adds	r3, #1
     82c:	6153      	str	r3, [r2, #20]
	static void isr17(void) { update(interruptArgs[17]); }
     82e:	e7ea      	b.n	806 <Encoder2::isr17()+0x46>
     830:	2000af60 	.word	0x2000af60
     834:	20009448 	.word	0x20009448

00000838 <Encoder2::isr18()>:
	#endif
	#ifdef CORE_INT18_PIN
	static void isr18(void) { update(interruptArgs[18]); }
     838:	4b1b      	ldr	r3, [pc, #108]	; (8a8 <Encoder2::isr18()+0x70>)
     83a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
     83c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     83e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     842:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     844:	6809      	ldr	r1, [r1, #0]
     846:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     848:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     84a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     84c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     84e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     850:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     852:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     854:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     856:	d018      	beq.n	88a <Encoder2::isr18()+0x52>
		if (p1val) arg->pstate |= 0x02;
     858:	b9a1      	cbnz	r1, 884 <Encoder2::isr18()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     85a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     85e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     862:	4912      	ldr	r1, [pc, #72]	; (8ac <Encoder2::isr18()+0x74>)
     864:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     866:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     868:	b149      	cbz	r1, 87e <Encoder2::isr18()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     86a:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     86c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     870:	b29b      	uxth	r3, r3
     872:	b2d9      	uxtb	r1, r3
     874:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     876:	292b      	cmp	r1, #43	; 0x2b
     878:	d00c      	beq.n	894 <Encoder2::isr18()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     87a:	2917      	cmp	r1, #23
     87c:	d010      	beq.n	8a0 <Encoder2::isr18()+0x68>
	static void isr18(void) { update(interruptArgs[18]); }
     87e:	f85d 4b04 	ldr.w	r4, [sp], #4
     882:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     884:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     888:	e7e7      	b.n	85a <Encoder2::isr18()+0x22>
		if (p1val) arg->pstate |= 0x02;
     88a:	2900      	cmp	r1, #0
     88c:	d0e7      	beq.n	85e <Encoder2::isr18()+0x26>
     88e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     892:	e7e4      	b.n	85e <Encoder2::isr18()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     894:	6953      	ldr	r3, [r2, #20]
	static void isr18(void) { update(interruptArgs[18]); }
     896:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     89a:	3b01      	subs	r3, #1
     89c:	6153      	str	r3, [r2, #20]
	static void isr18(void) { update(interruptArgs[18]); }
     89e:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     8a0:	6953      	ldr	r3, [r2, #20]
     8a2:	3301      	adds	r3, #1
     8a4:	6153      	str	r3, [r2, #20]
	static void isr18(void) { update(interruptArgs[18]); }
     8a6:	e7ea      	b.n	87e <Encoder2::isr18()+0x46>
     8a8:	2000af60 	.word	0x2000af60
     8ac:	20009448 	.word	0x20009448

000008b0 <Encoder2::isr19()>:
	#endif
	#ifdef CORE_INT19_PIN
	static void isr19(void) { update(interruptArgs[19]); }
     8b0:	4b1b      	ldr	r3, [pc, #108]	; (920 <Encoder2::isr19()+0x70>)
     8b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     8b4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     8b6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     8ba:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     8bc:	6809      	ldr	r1, [r1, #0]
     8be:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     8c0:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     8c2:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     8c4:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     8c6:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     8c8:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     8ca:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     8cc:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     8ce:	d018      	beq.n	902 <Encoder2::isr19()+0x52>
		if (p1val) arg->pstate |= 0x02;
     8d0:	b9a1      	cbnz	r1, 8fc <Encoder2::isr19()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     8d2:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     8d6:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     8da:	4912      	ldr	r1, [pc, #72]	; (924 <Encoder2::isr19()+0x74>)
     8dc:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     8de:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     8e0:	b149      	cbz	r1, 8f6 <Encoder2::isr19()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     8e2:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     8e4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     8e8:	b29b      	uxth	r3, r3
     8ea:	b2d9      	uxtb	r1, r3
     8ec:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     8ee:	292b      	cmp	r1, #43	; 0x2b
     8f0:	d00c      	beq.n	90c <Encoder2::isr19()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     8f2:	2917      	cmp	r1, #23
     8f4:	d010      	beq.n	918 <Encoder2::isr19()+0x68>
	static void isr19(void) { update(interruptArgs[19]); }
     8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
     8fa:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     8fc:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     900:	e7e7      	b.n	8d2 <Encoder2::isr19()+0x22>
		if (p1val) arg->pstate |= 0x02;
     902:	2900      	cmp	r1, #0
     904:	d0e7      	beq.n	8d6 <Encoder2::isr19()+0x26>
     906:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     90a:	e7e4      	b.n	8d6 <Encoder2::isr19()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     90c:	6953      	ldr	r3, [r2, #20]
	static void isr19(void) { update(interruptArgs[19]); }
     90e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     912:	3b01      	subs	r3, #1
     914:	6153      	str	r3, [r2, #20]
	static void isr19(void) { update(interruptArgs[19]); }
     916:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     918:	6953      	ldr	r3, [r2, #20]
     91a:	3301      	adds	r3, #1
     91c:	6153      	str	r3, [r2, #20]
	static void isr19(void) { update(interruptArgs[19]); }
     91e:	e7ea      	b.n	8f6 <Encoder2::isr19()+0x46>
     920:	2000af60 	.word	0x2000af60
     924:	20009448 	.word	0x20009448

00000928 <Encoder2::isr20()>:
	#endif
	#ifdef CORE_INT20_PIN
	static void isr20(void) { update(interruptArgs[20]); }
     928:	4b1b      	ldr	r3, [pc, #108]	; (998 <Encoder2::isr20()+0x70>)
     92a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
     92c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     92e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     932:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     934:	6809      	ldr	r1, [r1, #0]
     936:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     938:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     93a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     93c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     93e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     940:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     942:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     944:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     946:	d018      	beq.n	97a <Encoder2::isr20()+0x52>
		if (p1val) arg->pstate |= 0x02;
     948:	b9a1      	cbnz	r1, 974 <Encoder2::isr20()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     94a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     94e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     952:	4912      	ldr	r1, [pc, #72]	; (99c <Encoder2::isr20()+0x74>)
     954:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     956:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     958:	b149      	cbz	r1, 96e <Encoder2::isr20()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     95a:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     95c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     960:	b29b      	uxth	r3, r3
     962:	b2d9      	uxtb	r1, r3
     964:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     966:	292b      	cmp	r1, #43	; 0x2b
     968:	d00c      	beq.n	984 <Encoder2::isr20()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     96a:	2917      	cmp	r1, #23
     96c:	d010      	beq.n	990 <Encoder2::isr20()+0x68>
	static void isr20(void) { update(interruptArgs[20]); }
     96e:	f85d 4b04 	ldr.w	r4, [sp], #4
     972:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     974:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     978:	e7e7      	b.n	94a <Encoder2::isr20()+0x22>
		if (p1val) arg->pstate |= 0x02;
     97a:	2900      	cmp	r1, #0
     97c:	d0e7      	beq.n	94e <Encoder2::isr20()+0x26>
     97e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     982:	e7e4      	b.n	94e <Encoder2::isr20()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     984:	6953      	ldr	r3, [r2, #20]
	static void isr20(void) { update(interruptArgs[20]); }
     986:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     98a:	3b01      	subs	r3, #1
     98c:	6153      	str	r3, [r2, #20]
	static void isr20(void) { update(interruptArgs[20]); }
     98e:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     990:	6953      	ldr	r3, [r2, #20]
     992:	3301      	adds	r3, #1
     994:	6153      	str	r3, [r2, #20]
	static void isr20(void) { update(interruptArgs[20]); }
     996:	e7ea      	b.n	96e <Encoder2::isr20()+0x46>
     998:	2000af60 	.word	0x2000af60
     99c:	20009448 	.word	0x20009448

000009a0 <Encoder2::isr53()>:
	#endif
	#ifdef CORE_INT52_PIN
	static void isr52(void) { update(interruptArgs[52]); }
	#endif
	#ifdef CORE_INT53_PIN
	static void isr53(void) { update(interruptArgs[53]); }
     9a0:	4b1c      	ldr	r3, [pc, #112]	; (a14 <Encoder2::isr53()+0x74>)
     9a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
     9a6:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     9a8:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     9ac:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     9ae:	6809      	ldr	r1, [r1, #0]
     9b0:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     9b2:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     9b4:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     9b6:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     9b8:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     9ba:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     9bc:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     9be:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     9c0:	d018      	beq.n	9f4 <Encoder2::isr53()+0x54>
		if (p1val) arg->pstate |= 0x02;
     9c2:	b9a1      	cbnz	r1, 9ee <Encoder2::isr53()+0x4e>
		if (p2val) arg->pstate |= 0x01;
     9c4:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     9c8:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     9cc:	4912      	ldr	r1, [pc, #72]	; (a18 <Encoder2::isr53()+0x78>)
     9ce:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     9d0:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     9d2:	b149      	cbz	r1, 9e8 <Encoder2::isr53()+0x48>
		        arg->store <<= 4;               // Save last in MSB
     9d4:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     9d6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     9da:	b29b      	uxth	r3, r3
     9dc:	b2d9      	uxtb	r1, r3
     9de:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     9e0:	292b      	cmp	r1, #43	; 0x2b
     9e2:	d00c      	beq.n	9fe <Encoder2::isr53()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     9e4:	2917      	cmp	r1, #23
     9e6:	d010      	beq.n	a0a <Encoder2::isr53()+0x6a>
	static void isr53(void) { update(interruptArgs[53]); }
     9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
     9ec:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     9ee:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     9f2:	e7e7      	b.n	9c4 <Encoder2::isr53()+0x24>
		if (p1val) arg->pstate |= 0x02;
     9f4:	2900      	cmp	r1, #0
     9f6:	d0e7      	beq.n	9c8 <Encoder2::isr53()+0x28>
     9f8:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     9fc:	e7e4      	b.n	9c8 <Encoder2::isr53()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     9fe:	6953      	ldr	r3, [r2, #20]
	static void isr53(void) { update(interruptArgs[53]); }
     a00:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     a04:	3b01      	subs	r3, #1
     a06:	6153      	str	r3, [r2, #20]
	static void isr53(void) { update(interruptArgs[53]); }
     a08:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     a0a:	6953      	ldr	r3, [r2, #20]
     a0c:	3301      	adds	r3, #1
     a0e:	6153      	str	r3, [r2, #20]
	static void isr53(void) { update(interruptArgs[53]); }
     a10:	e7ea      	b.n	9e8 <Encoder2::isr53()+0x48>
     a12:	bf00      	nop
     a14:	2000af60 	.word	0x2000af60
     a18:	20009448 	.word	0x20009448

00000a1c <Encoder2::isr54()>:
	#endif
	#ifdef CORE_INT54_PIN
	static void isr54(void) { update(interruptArgs[54]); }
     a1c:	4b1c      	ldr	r3, [pc, #112]	; (a90 <Encoder2::isr54()+0x74>)
     a1e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
     a22:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     a24:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     a28:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     a2a:	6809      	ldr	r1, [r1, #0]
     a2c:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     a2e:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     a30:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     a32:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     a34:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     a36:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     a38:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     a3a:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     a3c:	d018      	beq.n	a70 <Encoder2::isr54()+0x54>
		if (p1val) arg->pstate |= 0x02;
     a3e:	b9a1      	cbnz	r1, a6a <Encoder2::isr54()+0x4e>
		if (p2val) arg->pstate |= 0x01;
     a40:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     a44:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     a48:	4912      	ldr	r1, [pc, #72]	; (a94 <Encoder2::isr54()+0x78>)
     a4a:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     a4c:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     a4e:	b149      	cbz	r1, a64 <Encoder2::isr54()+0x48>
		        arg->store <<= 4;               // Save last in MSB
     a50:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     a52:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     a56:	b29b      	uxth	r3, r3
     a58:	b2d9      	uxtb	r1, r3
     a5a:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     a5c:	292b      	cmp	r1, #43	; 0x2b
     a5e:	d00c      	beq.n	a7a <Encoder2::isr54()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     a60:	2917      	cmp	r1, #23
     a62:	d010      	beq.n	a86 <Encoder2::isr54()+0x6a>
	static void isr54(void) { update(interruptArgs[54]); }
     a64:	f85d 4b04 	ldr.w	r4, [sp], #4
     a68:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     a6a:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     a6e:	e7e7      	b.n	a40 <Encoder2::isr54()+0x24>
		if (p1val) arg->pstate |= 0x02;
     a70:	2900      	cmp	r1, #0
     a72:	d0e7      	beq.n	a44 <Encoder2::isr54()+0x28>
     a74:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     a78:	e7e4      	b.n	a44 <Encoder2::isr54()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     a7a:	6953      	ldr	r3, [r2, #20]
	static void isr54(void) { update(interruptArgs[54]); }
     a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     a80:	3b01      	subs	r3, #1
     a82:	6153      	str	r3, [r2, #20]
	static void isr54(void) { update(interruptArgs[54]); }
     a84:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     a86:	6953      	ldr	r3, [r2, #20]
     a88:	3301      	adds	r3, #1
     a8a:	6153      	str	r3, [r2, #20]
	static void isr54(void) { update(interruptArgs[54]); }
     a8c:	e7ea      	b.n	a64 <Encoder2::isr54()+0x48>
     a8e:	bf00      	nop
     a90:	2000af60 	.word	0x2000af60
     a94:	20009448 	.word	0x20009448

00000a98 <Encoder2::isr0()>:
	static void isr0(void) { update(interruptArgs[0]); }
     a98:	4b1b      	ldr	r3, [pc, #108]	; (b08 <Encoder2::isr0()+0x70>)
     a9a:	681a      	ldr	r2, [r3, #0]
     a9c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     a9e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     aa2:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     aa4:	6809      	ldr	r1, [r1, #0]
     aa6:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     aa8:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     aaa:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     aac:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     aae:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     ab0:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ab2:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     ab4:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ab6:	d018      	beq.n	aea <Encoder2::isr0()+0x52>
		if (p1val) arg->pstate |= 0x02;
     ab8:	b9a1      	cbnz	r1, ae4 <Encoder2::isr0()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     aba:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     abe:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     ac2:	4912      	ldr	r1, [pc, #72]	; (b0c <Encoder2::isr0()+0x74>)
     ac4:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     ac6:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     ac8:	b149      	cbz	r1, ade <Encoder2::isr0()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     aca:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     acc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     ad0:	b29b      	uxth	r3, r3
     ad2:	b2d9      	uxtb	r1, r3
     ad4:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     ad6:	292b      	cmp	r1, #43	; 0x2b
     ad8:	d00c      	beq.n	af4 <Encoder2::isr0()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     ada:	2917      	cmp	r1, #23
     adc:	d010      	beq.n	b00 <Encoder2::isr0()+0x68>
	static void isr0(void) { update(interruptArgs[0]); }
     ade:	f85d 4b04 	ldr.w	r4, [sp], #4
     ae2:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     ae4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     ae8:	e7e7      	b.n	aba <Encoder2::isr0()+0x22>
		if (p1val) arg->pstate |= 0x02;
     aea:	2900      	cmp	r1, #0
     aec:	d0e7      	beq.n	abe <Encoder2::isr0()+0x26>
     aee:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     af2:	e7e4      	b.n	abe <Encoder2::isr0()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     af4:	6953      	ldr	r3, [r2, #20]
	static void isr0(void) { update(interruptArgs[0]); }
     af6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     afa:	3b01      	subs	r3, #1
     afc:	6153      	str	r3, [r2, #20]
	static void isr0(void) { update(interruptArgs[0]); }
     afe:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     b00:	6953      	ldr	r3, [r2, #20]
     b02:	3301      	adds	r3, #1
     b04:	6153      	str	r3, [r2, #20]
	static void isr0(void) { update(interruptArgs[0]); }
     b06:	e7ea      	b.n	ade <Encoder2::isr0()+0x46>
     b08:	2000af60 	.word	0x2000af60
     b0c:	20009448 	.word	0x20009448

00000b10 <Encoder2::isr1()>:
	static void isr1(void) { update(interruptArgs[1]); }
     b10:	4b1b      	ldr	r3, [pc, #108]	; (b80 <Encoder2::isr1()+0x70>)
     b12:	685a      	ldr	r2, [r3, #4]
     b14:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b16:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     b1a:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     b1c:	6809      	ldr	r1, [r1, #0]
     b1e:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     b20:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b22:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     b24:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b26:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     b28:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b2a:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     b2c:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b2e:	d018      	beq.n	b62 <Encoder2::isr1()+0x52>
		if (p1val) arg->pstate |= 0x02;
     b30:	b9a1      	cbnz	r1, b5c <Encoder2::isr1()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     b32:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     b36:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     b3a:	4912      	ldr	r1, [pc, #72]	; (b84 <Encoder2::isr1()+0x74>)
     b3c:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     b3e:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     b40:	b149      	cbz	r1, b56 <Encoder2::isr1()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     b42:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     b44:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     b48:	b29b      	uxth	r3, r3
     b4a:	b2d9      	uxtb	r1, r3
     b4c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     b4e:	292b      	cmp	r1, #43	; 0x2b
     b50:	d00c      	beq.n	b6c <Encoder2::isr1()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     b52:	2917      	cmp	r1, #23
     b54:	d010      	beq.n	b78 <Encoder2::isr1()+0x68>
	static void isr1(void) { update(interruptArgs[1]); }
     b56:	f85d 4b04 	ldr.w	r4, [sp], #4
     b5a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     b5c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     b60:	e7e7      	b.n	b32 <Encoder2::isr1()+0x22>
		if (p1val) arg->pstate |= 0x02;
     b62:	2900      	cmp	r1, #0
     b64:	d0e7      	beq.n	b36 <Encoder2::isr1()+0x26>
     b66:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     b6a:	e7e4      	b.n	b36 <Encoder2::isr1()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     b6c:	6953      	ldr	r3, [r2, #20]
	static void isr1(void) { update(interruptArgs[1]); }
     b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     b72:	3b01      	subs	r3, #1
     b74:	6153      	str	r3, [r2, #20]
	static void isr1(void) { update(interruptArgs[1]); }
     b76:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     b78:	6953      	ldr	r3, [r2, #20]
     b7a:	3301      	adds	r3, #1
     b7c:	6153      	str	r3, [r2, #20]
	static void isr1(void) { update(interruptArgs[1]); }
     b7e:	e7ea      	b.n	b56 <Encoder2::isr1()+0x46>
     b80:	2000af60 	.word	0x2000af60
     b84:	20009448 	.word	0x20009448

00000b88 <Encoder2::isr2()>:
	static void isr2(void) { update(interruptArgs[2]); }
     b88:	4b1b      	ldr	r3, [pc, #108]	; (bf8 <Encoder2::isr2()+0x70>)
     b8a:	689a      	ldr	r2, [r3, #8]
     b8c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b8e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     b92:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     b94:	6809      	ldr	r1, [r1, #0]
     b96:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     b98:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b9a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     b9c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     b9e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     ba0:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ba2:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     ba4:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ba6:	d018      	beq.n	bda <Encoder2::isr2()+0x52>
		if (p1val) arg->pstate |= 0x02;
     ba8:	b9a1      	cbnz	r1, bd4 <Encoder2::isr2()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     baa:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     bae:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     bb2:	4912      	ldr	r1, [pc, #72]	; (bfc <Encoder2::isr2()+0x74>)
     bb4:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     bb6:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     bb8:	b149      	cbz	r1, bce <Encoder2::isr2()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     bba:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     bbc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     bc0:	b29b      	uxth	r3, r3
     bc2:	b2d9      	uxtb	r1, r3
     bc4:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     bc6:	292b      	cmp	r1, #43	; 0x2b
     bc8:	d00c      	beq.n	be4 <Encoder2::isr2()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     bca:	2917      	cmp	r1, #23
     bcc:	d010      	beq.n	bf0 <Encoder2::isr2()+0x68>
	static void isr2(void) { update(interruptArgs[2]); }
     bce:	f85d 4b04 	ldr.w	r4, [sp], #4
     bd2:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     bd4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     bd8:	e7e7      	b.n	baa <Encoder2::isr2()+0x22>
		if (p1val) arg->pstate |= 0x02;
     bda:	2900      	cmp	r1, #0
     bdc:	d0e7      	beq.n	bae <Encoder2::isr2()+0x26>
     bde:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     be2:	e7e4      	b.n	bae <Encoder2::isr2()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     be4:	6953      	ldr	r3, [r2, #20]
	static void isr2(void) { update(interruptArgs[2]); }
     be6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     bea:	3b01      	subs	r3, #1
     bec:	6153      	str	r3, [r2, #20]
	static void isr2(void) { update(interruptArgs[2]); }
     bee:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     bf0:	6953      	ldr	r3, [r2, #20]
     bf2:	3301      	adds	r3, #1
     bf4:	6153      	str	r3, [r2, #20]
	static void isr2(void) { update(interruptArgs[2]); }
     bf6:	e7ea      	b.n	bce <Encoder2::isr2()+0x46>
     bf8:	2000af60 	.word	0x2000af60
     bfc:	20009448 	.word	0x20009448

00000c00 <Encoder2::isr3()>:
	static void isr3(void) { update(interruptArgs[3]); }
     c00:	4b1b      	ldr	r3, [pc, #108]	; (c70 <Encoder2::isr3()+0x70>)
     c02:	68da      	ldr	r2, [r3, #12]
     c04:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c06:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     c0a:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     c0c:	6809      	ldr	r1, [r1, #0]
     c0e:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     c10:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c12:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     c14:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c16:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     c18:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c1a:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     c1c:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c1e:	d018      	beq.n	c52 <Encoder2::isr3()+0x52>
		if (p1val) arg->pstate |= 0x02;
     c20:	b9a1      	cbnz	r1, c4c <Encoder2::isr3()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     c22:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     c26:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     c2a:	4912      	ldr	r1, [pc, #72]	; (c74 <Encoder2::isr3()+0x74>)
     c2c:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     c2e:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     c30:	b149      	cbz	r1, c46 <Encoder2::isr3()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     c32:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     c34:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     c38:	b29b      	uxth	r3, r3
     c3a:	b2d9      	uxtb	r1, r3
     c3c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     c3e:	292b      	cmp	r1, #43	; 0x2b
     c40:	d00c      	beq.n	c5c <Encoder2::isr3()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     c42:	2917      	cmp	r1, #23
     c44:	d010      	beq.n	c68 <Encoder2::isr3()+0x68>
	static void isr3(void) { update(interruptArgs[3]); }
     c46:	f85d 4b04 	ldr.w	r4, [sp], #4
     c4a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     c4c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     c50:	e7e7      	b.n	c22 <Encoder2::isr3()+0x22>
		if (p1val) arg->pstate |= 0x02;
     c52:	2900      	cmp	r1, #0
     c54:	d0e7      	beq.n	c26 <Encoder2::isr3()+0x26>
     c56:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     c5a:	e7e4      	b.n	c26 <Encoder2::isr3()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     c5c:	6953      	ldr	r3, [r2, #20]
	static void isr3(void) { update(interruptArgs[3]); }
     c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     c62:	3b01      	subs	r3, #1
     c64:	6153      	str	r3, [r2, #20]
	static void isr3(void) { update(interruptArgs[3]); }
     c66:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     c68:	6953      	ldr	r3, [r2, #20]
     c6a:	3301      	adds	r3, #1
     c6c:	6153      	str	r3, [r2, #20]
	static void isr3(void) { update(interruptArgs[3]); }
     c6e:	e7ea      	b.n	c46 <Encoder2::isr3()+0x46>
     c70:	2000af60 	.word	0x2000af60
     c74:	20009448 	.word	0x20009448

00000c78 <Encoder2::isr4()>:
	static void isr4(void) { update(interruptArgs[4]); }
     c78:	4b1b      	ldr	r3, [pc, #108]	; (ce8 <Encoder2::isr4()+0x70>)
     c7a:	691a      	ldr	r2, [r3, #16]
     c7c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c7e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     c82:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     c84:	6809      	ldr	r1, [r1, #0]
     c86:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     c88:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c8a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     c8c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c8e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     c90:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c92:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     c94:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     c96:	d018      	beq.n	cca <Encoder2::isr4()+0x52>
		if (p1val) arg->pstate |= 0x02;
     c98:	b9a1      	cbnz	r1, cc4 <Encoder2::isr4()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     c9a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     c9e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     ca2:	4912      	ldr	r1, [pc, #72]	; (cec <Encoder2::isr4()+0x74>)
     ca4:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     ca6:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     ca8:	b149      	cbz	r1, cbe <Encoder2::isr4()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     caa:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     cac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     cb0:	b29b      	uxth	r3, r3
     cb2:	b2d9      	uxtb	r1, r3
     cb4:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     cb6:	292b      	cmp	r1, #43	; 0x2b
     cb8:	d00c      	beq.n	cd4 <Encoder2::isr4()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     cba:	2917      	cmp	r1, #23
     cbc:	d010      	beq.n	ce0 <Encoder2::isr4()+0x68>
	static void isr4(void) { update(interruptArgs[4]); }
     cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
     cc2:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     cc4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     cc8:	e7e7      	b.n	c9a <Encoder2::isr4()+0x22>
		if (p1val) arg->pstate |= 0x02;
     cca:	2900      	cmp	r1, #0
     ccc:	d0e7      	beq.n	c9e <Encoder2::isr4()+0x26>
     cce:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     cd2:	e7e4      	b.n	c9e <Encoder2::isr4()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     cd4:	6953      	ldr	r3, [r2, #20]
	static void isr4(void) { update(interruptArgs[4]); }
     cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     cda:	3b01      	subs	r3, #1
     cdc:	6153      	str	r3, [r2, #20]
	static void isr4(void) { update(interruptArgs[4]); }
     cde:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     ce0:	6953      	ldr	r3, [r2, #20]
     ce2:	3301      	adds	r3, #1
     ce4:	6153      	str	r3, [r2, #20]
	static void isr4(void) { update(interruptArgs[4]); }
     ce6:	e7ea      	b.n	cbe <Encoder2::isr4()+0x46>
     ce8:	2000af60 	.word	0x2000af60
     cec:	20009448 	.word	0x20009448

00000cf0 <Encoder2::isr21()>:
	static void isr21(void) { update(interruptArgs[21]); }
     cf0:	4b1b      	ldr	r3, [pc, #108]	; (d60 <Encoder2::isr21()+0x70>)
     cf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     cf4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     cf6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     cfa:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     cfc:	6809      	ldr	r1, [r1, #0]
     cfe:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     d00:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d02:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     d04:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d06:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     d08:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d0a:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     d0c:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d0e:	d018      	beq.n	d42 <Encoder2::isr21()+0x52>
		if (p1val) arg->pstate |= 0x02;
     d10:	b9a1      	cbnz	r1, d3c <Encoder2::isr21()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     d12:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     d16:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     d1a:	4912      	ldr	r1, [pc, #72]	; (d64 <Encoder2::isr21()+0x74>)
     d1c:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     d1e:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     d20:	b149      	cbz	r1, d36 <Encoder2::isr21()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     d22:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     d24:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     d28:	b29b      	uxth	r3, r3
     d2a:	b2d9      	uxtb	r1, r3
     d2c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     d2e:	292b      	cmp	r1, #43	; 0x2b
     d30:	d00c      	beq.n	d4c <Encoder2::isr21()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     d32:	2917      	cmp	r1, #23
     d34:	d010      	beq.n	d58 <Encoder2::isr21()+0x68>
	static void isr21(void) { update(interruptArgs[21]); }
     d36:	f85d 4b04 	ldr.w	r4, [sp], #4
     d3a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     d3c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     d40:	e7e7      	b.n	d12 <Encoder2::isr21()+0x22>
		if (p1val) arg->pstate |= 0x02;
     d42:	2900      	cmp	r1, #0
     d44:	d0e7      	beq.n	d16 <Encoder2::isr21()+0x26>
     d46:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     d4a:	e7e4      	b.n	d16 <Encoder2::isr21()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     d4c:	6953      	ldr	r3, [r2, #20]
	static void isr21(void) { update(interruptArgs[21]); }
     d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     d52:	3b01      	subs	r3, #1
     d54:	6153      	str	r3, [r2, #20]
	static void isr21(void) { update(interruptArgs[21]); }
     d56:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     d58:	6953      	ldr	r3, [r2, #20]
     d5a:	3301      	adds	r3, #1
     d5c:	6153      	str	r3, [r2, #20]
	static void isr21(void) { update(interruptArgs[21]); }
     d5e:	e7ea      	b.n	d36 <Encoder2::isr21()+0x46>
     d60:	2000af60 	.word	0x2000af60
     d64:	20009448 	.word	0x20009448

00000d68 <Encoder2::isr22()>:
	static void isr22(void) { update(interruptArgs[22]); }
     d68:	4b1b      	ldr	r3, [pc, #108]	; (dd8 <Encoder2::isr22()+0x70>)
     d6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
     d6c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d6e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     d72:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     d74:	6809      	ldr	r1, [r1, #0]
     d76:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     d78:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d7a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     d7c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d7e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     d80:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d82:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     d84:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     d86:	d018      	beq.n	dba <Encoder2::isr22()+0x52>
		if (p1val) arg->pstate |= 0x02;
     d88:	b9a1      	cbnz	r1, db4 <Encoder2::isr22()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     d8a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     d8e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     d92:	4912      	ldr	r1, [pc, #72]	; (ddc <Encoder2::isr22()+0x74>)
     d94:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     d96:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     d98:	b149      	cbz	r1, dae <Encoder2::isr22()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     d9a:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     d9c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     da0:	b29b      	uxth	r3, r3
     da2:	b2d9      	uxtb	r1, r3
     da4:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     da6:	292b      	cmp	r1, #43	; 0x2b
     da8:	d00c      	beq.n	dc4 <Encoder2::isr22()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     daa:	2917      	cmp	r1, #23
     dac:	d010      	beq.n	dd0 <Encoder2::isr22()+0x68>
	static void isr22(void) { update(interruptArgs[22]); }
     dae:	f85d 4b04 	ldr.w	r4, [sp], #4
     db2:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     db4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     db8:	e7e7      	b.n	d8a <Encoder2::isr22()+0x22>
		if (p1val) arg->pstate |= 0x02;
     dba:	2900      	cmp	r1, #0
     dbc:	d0e7      	beq.n	d8e <Encoder2::isr22()+0x26>
     dbe:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     dc2:	e7e4      	b.n	d8e <Encoder2::isr22()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     dc4:	6953      	ldr	r3, [r2, #20]
	static void isr22(void) { update(interruptArgs[22]); }
     dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     dca:	3b01      	subs	r3, #1
     dcc:	6153      	str	r3, [r2, #20]
	static void isr22(void) { update(interruptArgs[22]); }
     dce:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     dd0:	6953      	ldr	r3, [r2, #20]
     dd2:	3301      	adds	r3, #1
     dd4:	6153      	str	r3, [r2, #20]
	static void isr22(void) { update(interruptArgs[22]); }
     dd6:	e7ea      	b.n	dae <Encoder2::isr22()+0x46>
     dd8:	2000af60 	.word	0x2000af60
     ddc:	20009448 	.word	0x20009448

00000de0 <Encoder2::isr23()>:
	static void isr23(void) { update(interruptArgs[23]); }
     de0:	4b1b      	ldr	r3, [pc, #108]	; (e50 <Encoder2::isr23()+0x70>)
     de2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
     de4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     de6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     dea:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     dec:	6809      	ldr	r1, [r1, #0]
     dee:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     df0:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     df2:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     df4:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     df6:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     df8:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     dfa:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     dfc:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     dfe:	d018      	beq.n	e32 <Encoder2::isr23()+0x52>
		if (p1val) arg->pstate |= 0x02;
     e00:	b9a1      	cbnz	r1, e2c <Encoder2::isr23()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     e02:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     e06:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     e0a:	4912      	ldr	r1, [pc, #72]	; (e54 <Encoder2::isr23()+0x74>)
     e0c:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     e0e:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     e10:	b149      	cbz	r1, e26 <Encoder2::isr23()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     e12:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     e14:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     e18:	b29b      	uxth	r3, r3
     e1a:	b2d9      	uxtb	r1, r3
     e1c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     e1e:	292b      	cmp	r1, #43	; 0x2b
     e20:	d00c      	beq.n	e3c <Encoder2::isr23()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     e22:	2917      	cmp	r1, #23
     e24:	d010      	beq.n	e48 <Encoder2::isr23()+0x68>
	static void isr23(void) { update(interruptArgs[23]); }
     e26:	f85d 4b04 	ldr.w	r4, [sp], #4
     e2a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     e2c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     e30:	e7e7      	b.n	e02 <Encoder2::isr23()+0x22>
		if (p1val) arg->pstate |= 0x02;
     e32:	2900      	cmp	r1, #0
     e34:	d0e7      	beq.n	e06 <Encoder2::isr23()+0x26>
     e36:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     e3a:	e7e4      	b.n	e06 <Encoder2::isr23()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     e3c:	6953      	ldr	r3, [r2, #20]
	static void isr23(void) { update(interruptArgs[23]); }
     e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     e42:	3b01      	subs	r3, #1
     e44:	6153      	str	r3, [r2, #20]
	static void isr23(void) { update(interruptArgs[23]); }
     e46:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     e48:	6953      	ldr	r3, [r2, #20]
     e4a:	3301      	adds	r3, #1
     e4c:	6153      	str	r3, [r2, #20]
	static void isr23(void) { update(interruptArgs[23]); }
     e4e:	e7ea      	b.n	e26 <Encoder2::isr23()+0x46>
     e50:	2000af60 	.word	0x2000af60
     e54:	20009448 	.word	0x20009448

00000e58 <Encoder2::isr24()>:
	static void isr24(void) { update(interruptArgs[24]); }
     e58:	4b1b      	ldr	r3, [pc, #108]	; (ec8 <Encoder2::isr24()+0x70>)
     e5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
     e5c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e5e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     e62:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     e64:	6809      	ldr	r1, [r1, #0]
     e66:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     e68:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e6a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     e6c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e6e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     e70:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e72:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     e74:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     e76:	d018      	beq.n	eaa <Encoder2::isr24()+0x52>
		if (p1val) arg->pstate |= 0x02;
     e78:	b9a1      	cbnz	r1, ea4 <Encoder2::isr24()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     e7a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     e7e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     e82:	4912      	ldr	r1, [pc, #72]	; (ecc <Encoder2::isr24()+0x74>)
     e84:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     e86:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     e88:	b149      	cbz	r1, e9e <Encoder2::isr24()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     e8a:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     e8c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     e90:	b29b      	uxth	r3, r3
     e92:	b2d9      	uxtb	r1, r3
     e94:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     e96:	292b      	cmp	r1, #43	; 0x2b
     e98:	d00c      	beq.n	eb4 <Encoder2::isr24()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     e9a:	2917      	cmp	r1, #23
     e9c:	d010      	beq.n	ec0 <Encoder2::isr24()+0x68>
	static void isr24(void) { update(interruptArgs[24]); }
     e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
     ea2:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     ea4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     ea8:	e7e7      	b.n	e7a <Encoder2::isr24()+0x22>
		if (p1val) arg->pstate |= 0x02;
     eaa:	2900      	cmp	r1, #0
     eac:	d0e7      	beq.n	e7e <Encoder2::isr24()+0x26>
     eae:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     eb2:	e7e4      	b.n	e7e <Encoder2::isr24()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     eb4:	6953      	ldr	r3, [r2, #20]
	static void isr24(void) { update(interruptArgs[24]); }
     eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     eba:	3b01      	subs	r3, #1
     ebc:	6153      	str	r3, [r2, #20]
	static void isr24(void) { update(interruptArgs[24]); }
     ebe:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     ec0:	6953      	ldr	r3, [r2, #20]
     ec2:	3301      	adds	r3, #1
     ec4:	6153      	str	r3, [r2, #20]
	static void isr24(void) { update(interruptArgs[24]); }
     ec6:	e7ea      	b.n	e9e <Encoder2::isr24()+0x46>
     ec8:	2000af60 	.word	0x2000af60
     ecc:	20009448 	.word	0x20009448

00000ed0 <Encoder2::isr25()>:
	static void isr25(void) { update(interruptArgs[25]); }
     ed0:	4b1b      	ldr	r3, [pc, #108]	; (f40 <Encoder2::isr25()+0x70>)
     ed2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
     ed4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ed6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     eda:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     edc:	6809      	ldr	r1, [r1, #0]
     ede:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     ee0:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ee2:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     ee4:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     ee6:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     ee8:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     eea:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     eec:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     eee:	d018      	beq.n	f22 <Encoder2::isr25()+0x52>
		if (p1val) arg->pstate |= 0x02;
     ef0:	b9a1      	cbnz	r1, f1c <Encoder2::isr25()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     ef2:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     ef6:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     efa:	4912      	ldr	r1, [pc, #72]	; (f44 <Encoder2::isr25()+0x74>)
     efc:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     efe:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     f00:	b149      	cbz	r1, f16 <Encoder2::isr25()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     f02:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     f04:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     f08:	b29b      	uxth	r3, r3
     f0a:	b2d9      	uxtb	r1, r3
     f0c:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     f0e:	292b      	cmp	r1, #43	; 0x2b
     f10:	d00c      	beq.n	f2c <Encoder2::isr25()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     f12:	2917      	cmp	r1, #23
     f14:	d010      	beq.n	f38 <Encoder2::isr25()+0x68>
	static void isr25(void) { update(interruptArgs[25]); }
     f16:	f85d 4b04 	ldr.w	r4, [sp], #4
     f1a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     f1c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     f20:	e7e7      	b.n	ef2 <Encoder2::isr25()+0x22>
		if (p1val) arg->pstate |= 0x02;
     f22:	2900      	cmp	r1, #0
     f24:	d0e7      	beq.n	ef6 <Encoder2::isr25()+0x26>
     f26:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     f2a:	e7e4      	b.n	ef6 <Encoder2::isr25()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     f2c:	6953      	ldr	r3, [r2, #20]
	static void isr25(void) { update(interruptArgs[25]); }
     f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     f32:	3b01      	subs	r3, #1
     f34:	6153      	str	r3, [r2, #20]
	static void isr25(void) { update(interruptArgs[25]); }
     f36:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     f38:	6953      	ldr	r3, [r2, #20]
     f3a:	3301      	adds	r3, #1
     f3c:	6153      	str	r3, [r2, #20]
	static void isr25(void) { update(interruptArgs[25]); }
     f3e:	e7ea      	b.n	f16 <Encoder2::isr25()+0x46>
     f40:	2000af60 	.word	0x2000af60
     f44:	20009448 	.word	0x20009448

00000f48 <Encoder2::isr26()>:
	static void isr26(void) { update(interruptArgs[26]); }
     f48:	4b1b      	ldr	r3, [pc, #108]	; (fb8 <Encoder2::isr26()+0x70>)
     f4a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
     f4c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     f4e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     f52:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     f54:	6809      	ldr	r1, [r1, #0]
     f56:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     f58:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     f5a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     f5c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     f5e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     f60:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     f62:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     f64:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     f66:	d018      	beq.n	f9a <Encoder2::isr26()+0x52>
		if (p1val) arg->pstate |= 0x02;
     f68:	b9a1      	cbnz	r1, f94 <Encoder2::isr26()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     f6a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     f6e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     f72:	4912      	ldr	r1, [pc, #72]	; (fbc <Encoder2::isr26()+0x74>)
     f74:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     f76:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     f78:	b149      	cbz	r1, f8e <Encoder2::isr26()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     f7a:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     f7c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     f80:	b29b      	uxth	r3, r3
     f82:	b2d9      	uxtb	r1, r3
     f84:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     f86:	292b      	cmp	r1, #43	; 0x2b
     f88:	d00c      	beq.n	fa4 <Encoder2::isr26()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     f8a:	2917      	cmp	r1, #23
     f8c:	d010      	beq.n	fb0 <Encoder2::isr26()+0x68>
	static void isr26(void) { update(interruptArgs[26]); }
     f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
     f92:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
     f94:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     f98:	e7e7      	b.n	f6a <Encoder2::isr26()+0x22>
		if (p1val) arg->pstate |= 0x02;
     f9a:	2900      	cmp	r1, #0
     f9c:	d0e7      	beq.n	f6e <Encoder2::isr26()+0x26>
     f9e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
     fa2:	e7e4      	b.n	f6e <Encoder2::isr26()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     fa4:	6953      	ldr	r3, [r2, #20]
	static void isr26(void) { update(interruptArgs[26]); }
     fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     faa:	3b01      	subs	r3, #1
     fac:	6153      	str	r3, [r2, #20]
	static void isr26(void) { update(interruptArgs[26]); }
     fae:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
     fb0:	6953      	ldr	r3, [r2, #20]
     fb2:	3301      	adds	r3, #1
     fb4:	6153      	str	r3, [r2, #20]
	static void isr26(void) { update(interruptArgs[26]); }
     fb6:	e7ea      	b.n	f8e <Encoder2::isr26()+0x46>
     fb8:	2000af60 	.word	0x2000af60
     fbc:	20009448 	.word	0x20009448

00000fc0 <Encoder2::isr27()>:
	static void isr27(void) { update(interruptArgs[27]); }
     fc0:	4b1b      	ldr	r3, [pc, #108]	; (1030 <Encoder2::isr27()+0x70>)
     fc2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
     fc4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     fc6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     fca:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     fcc:	6809      	ldr	r1, [r1, #0]
     fce:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     fd0:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     fd2:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
     fd4:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     fd6:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
     fd8:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     fda:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
     fdc:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
     fde:	d018      	beq.n	1012 <Encoder2::isr27()+0x52>
		if (p1val) arg->pstate |= 0x02;
     fe0:	b9a1      	cbnz	r1, 100c <Encoder2::isr27()+0x4c>
		if (p2val) arg->pstate |= 0x01;
     fe2:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     fe6:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
     fea:	4912      	ldr	r1, [pc, #72]	; (1034 <Encoder2::isr27()+0x74>)
     fec:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
     fee:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
     ff0:	b149      	cbz	r1, 1006 <Encoder2::isr27()+0x46>
		        arg->store <<= 4;               // Save last in MSB
     ff2:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
     ff4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     ff8:	b29b      	uxth	r3, r3
     ffa:	b2d9      	uxtb	r1, r3
     ffc:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
     ffe:	292b      	cmp	r1, #43	; 0x2b
    1000:	d00c      	beq.n	101c <Encoder2::isr27()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1002:	2917      	cmp	r1, #23
    1004:	d010      	beq.n	1028 <Encoder2::isr27()+0x68>
	static void isr27(void) { update(interruptArgs[27]); }
    1006:	f85d 4b04 	ldr.w	r4, [sp], #4
    100a:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    100c:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1010:	e7e7      	b.n	fe2 <Encoder2::isr27()+0x22>
		if (p1val) arg->pstate |= 0x02;
    1012:	2900      	cmp	r1, #0
    1014:	d0e7      	beq.n	fe6 <Encoder2::isr27()+0x26>
    1016:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    101a:	e7e4      	b.n	fe6 <Encoder2::isr27()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    101c:	6953      	ldr	r3, [r2, #20]
	static void isr27(void) { update(interruptArgs[27]); }
    101e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1022:	3b01      	subs	r3, #1
    1024:	6153      	str	r3, [r2, #20]
	static void isr27(void) { update(interruptArgs[27]); }
    1026:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1028:	6953      	ldr	r3, [r2, #20]
    102a:	3301      	adds	r3, #1
    102c:	6153      	str	r3, [r2, #20]
	static void isr27(void) { update(interruptArgs[27]); }
    102e:	e7ea      	b.n	1006 <Encoder2::isr27()+0x46>
    1030:	2000af60 	.word	0x2000af60
    1034:	20009448 	.word	0x20009448

00001038 <Encoder2::isr28()>:
	static void isr28(void) { update(interruptArgs[28]); }
    1038:	4b1b      	ldr	r3, [pc, #108]	; (10a8 <Encoder2::isr28()+0x70>)
    103a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    103c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    103e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1042:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1044:	6809      	ldr	r1, [r1, #0]
    1046:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1048:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    104a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    104c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    104e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1050:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1052:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1054:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1056:	d018      	beq.n	108a <Encoder2::isr28()+0x52>
		if (p1val) arg->pstate |= 0x02;
    1058:	b9a1      	cbnz	r1, 1084 <Encoder2::isr28()+0x4c>
		if (p2val) arg->pstate |= 0x01;
    105a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    105e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1062:	4912      	ldr	r1, [pc, #72]	; (10ac <Encoder2::isr28()+0x74>)
    1064:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1066:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1068:	b149      	cbz	r1, 107e <Encoder2::isr28()+0x46>
		        arg->store <<= 4;               // Save last in MSB
    106a:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    106c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1070:	b29b      	uxth	r3, r3
    1072:	b2d9      	uxtb	r1, r3
    1074:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1076:	292b      	cmp	r1, #43	; 0x2b
    1078:	d00c      	beq.n	1094 <Encoder2::isr28()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    107a:	2917      	cmp	r1, #23
    107c:	d010      	beq.n	10a0 <Encoder2::isr28()+0x68>
	static void isr28(void) { update(interruptArgs[28]); }
    107e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1082:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1084:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1088:	e7e7      	b.n	105a <Encoder2::isr28()+0x22>
		if (p1val) arg->pstate |= 0x02;
    108a:	2900      	cmp	r1, #0
    108c:	d0e7      	beq.n	105e <Encoder2::isr28()+0x26>
    108e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1092:	e7e4      	b.n	105e <Encoder2::isr28()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1094:	6953      	ldr	r3, [r2, #20]
	static void isr28(void) { update(interruptArgs[28]); }
    1096:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    109a:	3b01      	subs	r3, #1
    109c:	6153      	str	r3, [r2, #20]
	static void isr28(void) { update(interruptArgs[28]); }
    109e:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    10a0:	6953      	ldr	r3, [r2, #20]
    10a2:	3301      	adds	r3, #1
    10a4:	6153      	str	r3, [r2, #20]
	static void isr28(void) { update(interruptArgs[28]); }
    10a6:	e7ea      	b.n	107e <Encoder2::isr28()+0x46>
    10a8:	2000af60 	.word	0x2000af60
    10ac:	20009448 	.word	0x20009448

000010b0 <Encoder2::isr29()>:
	static void isr29(void) { update(interruptArgs[29]); }
    10b0:	4b1b      	ldr	r3, [pc, #108]	; (1120 <Encoder2::isr29()+0x70>)
    10b2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    10b4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    10b6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    10ba:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    10bc:	6809      	ldr	r1, [r1, #0]
    10be:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    10c0:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    10c2:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    10c4:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    10c6:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    10c8:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    10ca:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    10cc:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    10ce:	d018      	beq.n	1102 <Encoder2::isr29()+0x52>
		if (p1val) arg->pstate |= 0x02;
    10d0:	b9a1      	cbnz	r1, 10fc <Encoder2::isr29()+0x4c>
		if (p2val) arg->pstate |= 0x01;
    10d2:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    10d6:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    10da:	4912      	ldr	r1, [pc, #72]	; (1124 <Encoder2::isr29()+0x74>)
    10dc:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    10de:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    10e0:	b149      	cbz	r1, 10f6 <Encoder2::isr29()+0x46>
		        arg->store <<= 4;               // Save last in MSB
    10e2:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    10e4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    10e8:	b29b      	uxth	r3, r3
    10ea:	b2d9      	uxtb	r1, r3
    10ec:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    10ee:	292b      	cmp	r1, #43	; 0x2b
    10f0:	d00c      	beq.n	110c <Encoder2::isr29()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    10f2:	2917      	cmp	r1, #23
    10f4:	d010      	beq.n	1118 <Encoder2::isr29()+0x68>
	static void isr29(void) { update(interruptArgs[29]); }
    10f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    10fa:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    10fc:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1100:	e7e7      	b.n	10d2 <Encoder2::isr29()+0x22>
		if (p1val) arg->pstate |= 0x02;
    1102:	2900      	cmp	r1, #0
    1104:	d0e7      	beq.n	10d6 <Encoder2::isr29()+0x26>
    1106:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    110a:	e7e4      	b.n	10d6 <Encoder2::isr29()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    110c:	6953      	ldr	r3, [r2, #20]
	static void isr29(void) { update(interruptArgs[29]); }
    110e:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1112:	3b01      	subs	r3, #1
    1114:	6153      	str	r3, [r2, #20]
	static void isr29(void) { update(interruptArgs[29]); }
    1116:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1118:	6953      	ldr	r3, [r2, #20]
    111a:	3301      	adds	r3, #1
    111c:	6153      	str	r3, [r2, #20]
	static void isr29(void) { update(interruptArgs[29]); }
    111e:	e7ea      	b.n	10f6 <Encoder2::isr29()+0x46>
    1120:	2000af60 	.word	0x2000af60
    1124:	20009448 	.word	0x20009448

00001128 <Encoder2::isr30()>:
	static void isr30(void) { update(interruptArgs[30]); }
    1128:	4b1b      	ldr	r3, [pc, #108]	; (1198 <Encoder2::isr30()+0x70>)
    112a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    112c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    112e:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1132:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1134:	6809      	ldr	r1, [r1, #0]
    1136:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1138:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    113a:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    113c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    113e:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1140:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1142:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1144:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1146:	d018      	beq.n	117a <Encoder2::isr30()+0x52>
		if (p1val) arg->pstate |= 0x02;
    1148:	b9a1      	cbnz	r1, 1174 <Encoder2::isr30()+0x4c>
		if (p2val) arg->pstate |= 0x01;
    114a:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    114e:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1152:	4912      	ldr	r1, [pc, #72]	; (119c <Encoder2::isr30()+0x74>)
    1154:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1156:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1158:	b149      	cbz	r1, 116e <Encoder2::isr30()+0x46>
		        arg->store <<= 4;               // Save last in MSB
    115a:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    115c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1160:	b29b      	uxth	r3, r3
    1162:	b2d9      	uxtb	r1, r3
    1164:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1166:	292b      	cmp	r1, #43	; 0x2b
    1168:	d00c      	beq.n	1184 <Encoder2::isr30()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    116a:	2917      	cmp	r1, #23
    116c:	d010      	beq.n	1190 <Encoder2::isr30()+0x68>
	static void isr30(void) { update(interruptArgs[30]); }
    116e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1172:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1174:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1178:	e7e7      	b.n	114a <Encoder2::isr30()+0x22>
		if (p1val) arg->pstate |= 0x02;
    117a:	2900      	cmp	r1, #0
    117c:	d0e7      	beq.n	114e <Encoder2::isr30()+0x26>
    117e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1182:	e7e4      	b.n	114e <Encoder2::isr30()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1184:	6953      	ldr	r3, [r2, #20]
	static void isr30(void) { update(interruptArgs[30]); }
    1186:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    118a:	3b01      	subs	r3, #1
    118c:	6153      	str	r3, [r2, #20]
	static void isr30(void) { update(interruptArgs[30]); }
    118e:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1190:	6953      	ldr	r3, [r2, #20]
    1192:	3301      	adds	r3, #1
    1194:	6153      	str	r3, [r2, #20]
	static void isr30(void) { update(interruptArgs[30]); }
    1196:	e7ea      	b.n	116e <Encoder2::isr30()+0x46>
    1198:	2000af60 	.word	0x2000af60
    119c:	20009448 	.word	0x20009448

000011a0 <Encoder2::isr31()>:
	static void isr31(void) { update(interruptArgs[31]); }
    11a0:	4b1b      	ldr	r3, [pc, #108]	; (1210 <Encoder2::isr31()+0x70>)
    11a2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    11a4:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    11a6:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    11aa:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    11ac:	6809      	ldr	r1, [r1, #0]
    11ae:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    11b0:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    11b2:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    11b4:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    11b6:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    11b8:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    11ba:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    11bc:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    11be:	d018      	beq.n	11f2 <Encoder2::isr31()+0x52>
		if (p1val) arg->pstate |= 0x02;
    11c0:	b9a1      	cbnz	r1, 11ec <Encoder2::isr31()+0x4c>
		if (p2val) arg->pstate |= 0x01;
    11c2:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    11c6:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    11ca:	4912      	ldr	r1, [pc, #72]	; (1214 <Encoder2::isr31()+0x74>)
    11cc:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    11ce:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    11d0:	b149      	cbz	r1, 11e6 <Encoder2::isr31()+0x46>
		        arg->store <<= 4;               // Save last in MSB
    11d2:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    11d4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    11d8:	b29b      	uxth	r3, r3
    11da:	b2d9      	uxtb	r1, r3
    11dc:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    11de:	292b      	cmp	r1, #43	; 0x2b
    11e0:	d00c      	beq.n	11fc <Encoder2::isr31()+0x5c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    11e2:	2917      	cmp	r1, #23
    11e4:	d010      	beq.n	1208 <Encoder2::isr31()+0x68>
	static void isr31(void) { update(interruptArgs[31]); }
    11e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    11ea:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    11ec:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    11f0:	e7e7      	b.n	11c2 <Encoder2::isr31()+0x22>
		if (p1val) arg->pstate |= 0x02;
    11f2:	2900      	cmp	r1, #0
    11f4:	d0e7      	beq.n	11c6 <Encoder2::isr31()+0x26>
    11f6:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    11fa:	e7e4      	b.n	11c6 <Encoder2::isr31()+0x26>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    11fc:	6953      	ldr	r3, [r2, #20]
	static void isr31(void) { update(interruptArgs[31]); }
    11fe:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1202:	3b01      	subs	r3, #1
    1204:	6153      	str	r3, [r2, #20]
	static void isr31(void) { update(interruptArgs[31]); }
    1206:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1208:	6953      	ldr	r3, [r2, #20]
    120a:	3301      	adds	r3, #1
    120c:	6153      	str	r3, [r2, #20]
	static void isr31(void) { update(interruptArgs[31]); }
    120e:	e7ea      	b.n	11e6 <Encoder2::isr31()+0x46>
    1210:	2000af60 	.word	0x2000af60
    1214:	20009448 	.word	0x20009448

00001218 <Encoder2::isr32()>:
	static void isr32(void) { update(interruptArgs[32]); }
    1218:	4b1c      	ldr	r3, [pc, #112]	; (128c <Encoder2::isr32()+0x74>)
    121a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    121e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1220:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1224:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1226:	6809      	ldr	r1, [r1, #0]
    1228:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    122a:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    122c:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    122e:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1230:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1232:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1234:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1236:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1238:	d018      	beq.n	126c <Encoder2::isr32()+0x54>
		if (p1val) arg->pstate |= 0x02;
    123a:	b9a1      	cbnz	r1, 1266 <Encoder2::isr32()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    123c:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1240:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1244:	4912      	ldr	r1, [pc, #72]	; (1290 <Encoder2::isr32()+0x78>)
    1246:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1248:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    124a:	b149      	cbz	r1, 1260 <Encoder2::isr32()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    124c:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    124e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1252:	b29b      	uxth	r3, r3
    1254:	b2d9      	uxtb	r1, r3
    1256:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1258:	292b      	cmp	r1, #43	; 0x2b
    125a:	d00c      	beq.n	1276 <Encoder2::isr32()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    125c:	2917      	cmp	r1, #23
    125e:	d010      	beq.n	1282 <Encoder2::isr32()+0x6a>
	static void isr32(void) { update(interruptArgs[32]); }
    1260:	f85d 4b04 	ldr.w	r4, [sp], #4
    1264:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1266:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    126a:	e7e7      	b.n	123c <Encoder2::isr32()+0x24>
		if (p1val) arg->pstate |= 0x02;
    126c:	2900      	cmp	r1, #0
    126e:	d0e7      	beq.n	1240 <Encoder2::isr32()+0x28>
    1270:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1274:	e7e4      	b.n	1240 <Encoder2::isr32()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1276:	6953      	ldr	r3, [r2, #20]
	static void isr32(void) { update(interruptArgs[32]); }
    1278:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    127c:	3b01      	subs	r3, #1
    127e:	6153      	str	r3, [r2, #20]
	static void isr32(void) { update(interruptArgs[32]); }
    1280:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1282:	6953      	ldr	r3, [r2, #20]
    1284:	3301      	adds	r3, #1
    1286:	6153      	str	r3, [r2, #20]
	static void isr32(void) { update(interruptArgs[32]); }
    1288:	e7ea      	b.n	1260 <Encoder2::isr32()+0x48>
    128a:	bf00      	nop
    128c:	2000af60 	.word	0x2000af60
    1290:	20009448 	.word	0x20009448

00001294 <Encoder2::isr33()>:
	static void isr33(void) { update(interruptArgs[33]); }
    1294:	4b1c      	ldr	r3, [pc, #112]	; (1308 <Encoder2::isr33()+0x74>)
    1296:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    129a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    129c:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    12a0:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    12a2:	6809      	ldr	r1, [r1, #0]
    12a4:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    12a6:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    12a8:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    12aa:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    12ac:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    12ae:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    12b0:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    12b2:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    12b4:	d018      	beq.n	12e8 <Encoder2::isr33()+0x54>
		if (p1val) arg->pstate |= 0x02;
    12b6:	b9a1      	cbnz	r1, 12e2 <Encoder2::isr33()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    12b8:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    12bc:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    12c0:	4912      	ldr	r1, [pc, #72]	; (130c <Encoder2::isr33()+0x78>)
    12c2:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    12c4:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    12c6:	b149      	cbz	r1, 12dc <Encoder2::isr33()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    12c8:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    12ca:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    12ce:	b29b      	uxth	r3, r3
    12d0:	b2d9      	uxtb	r1, r3
    12d2:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    12d4:	292b      	cmp	r1, #43	; 0x2b
    12d6:	d00c      	beq.n	12f2 <Encoder2::isr33()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    12d8:	2917      	cmp	r1, #23
    12da:	d010      	beq.n	12fe <Encoder2::isr33()+0x6a>
	static void isr33(void) { update(interruptArgs[33]); }
    12dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    12e0:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    12e2:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    12e6:	e7e7      	b.n	12b8 <Encoder2::isr33()+0x24>
		if (p1val) arg->pstate |= 0x02;
    12e8:	2900      	cmp	r1, #0
    12ea:	d0e7      	beq.n	12bc <Encoder2::isr33()+0x28>
    12ec:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    12f0:	e7e4      	b.n	12bc <Encoder2::isr33()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    12f2:	6953      	ldr	r3, [r2, #20]
	static void isr33(void) { update(interruptArgs[33]); }
    12f4:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    12f8:	3b01      	subs	r3, #1
    12fa:	6153      	str	r3, [r2, #20]
	static void isr33(void) { update(interruptArgs[33]); }
    12fc:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    12fe:	6953      	ldr	r3, [r2, #20]
    1300:	3301      	adds	r3, #1
    1302:	6153      	str	r3, [r2, #20]
	static void isr33(void) { update(interruptArgs[33]); }
    1304:	e7ea      	b.n	12dc <Encoder2::isr33()+0x48>
    1306:	bf00      	nop
    1308:	2000af60 	.word	0x2000af60
    130c:	20009448 	.word	0x20009448

00001310 <Encoder2::isr34()>:
	static void isr34(void) { update(interruptArgs[34]); }
    1310:	4b1c      	ldr	r3, [pc, #112]	; (1384 <Encoder2::isr34()+0x74>)
    1312:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1316:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1318:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    131c:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    131e:	6809      	ldr	r1, [r1, #0]
    1320:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1322:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1324:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1326:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1328:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    132a:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    132c:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    132e:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1330:	d018      	beq.n	1364 <Encoder2::isr34()+0x54>
		if (p1val) arg->pstate |= 0x02;
    1332:	b9a1      	cbnz	r1, 135e <Encoder2::isr34()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1334:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1338:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    133c:	4912      	ldr	r1, [pc, #72]	; (1388 <Encoder2::isr34()+0x78>)
    133e:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1340:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1342:	b149      	cbz	r1, 1358 <Encoder2::isr34()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1344:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    1346:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    134a:	b29b      	uxth	r3, r3
    134c:	b2d9      	uxtb	r1, r3
    134e:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1350:	292b      	cmp	r1, #43	; 0x2b
    1352:	d00c      	beq.n	136e <Encoder2::isr34()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1354:	2917      	cmp	r1, #23
    1356:	d010      	beq.n	137a <Encoder2::isr34()+0x6a>
	static void isr34(void) { update(interruptArgs[34]); }
    1358:	f85d 4b04 	ldr.w	r4, [sp], #4
    135c:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    135e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1362:	e7e7      	b.n	1334 <Encoder2::isr34()+0x24>
		if (p1val) arg->pstate |= 0x02;
    1364:	2900      	cmp	r1, #0
    1366:	d0e7      	beq.n	1338 <Encoder2::isr34()+0x28>
    1368:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    136c:	e7e4      	b.n	1338 <Encoder2::isr34()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    136e:	6953      	ldr	r3, [r2, #20]
	static void isr34(void) { update(interruptArgs[34]); }
    1370:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1374:	3b01      	subs	r3, #1
    1376:	6153      	str	r3, [r2, #20]
	static void isr34(void) { update(interruptArgs[34]); }
    1378:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    137a:	6953      	ldr	r3, [r2, #20]
    137c:	3301      	adds	r3, #1
    137e:	6153      	str	r3, [r2, #20]
	static void isr34(void) { update(interruptArgs[34]); }
    1380:	e7ea      	b.n	1358 <Encoder2::isr34()+0x48>
    1382:	bf00      	nop
    1384:	2000af60 	.word	0x2000af60
    1388:	20009448 	.word	0x20009448

0000138c <Encoder2::isr35()>:
	static void isr35(void) { update(interruptArgs[35]); }
    138c:	4b1c      	ldr	r3, [pc, #112]	; (1400 <Encoder2::isr35()+0x74>)
    138e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1392:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1394:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1398:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    139a:	6809      	ldr	r1, [r1, #0]
    139c:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    139e:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    13a0:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    13a2:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    13a4:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    13a6:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    13a8:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    13aa:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    13ac:	d018      	beq.n	13e0 <Encoder2::isr35()+0x54>
		if (p1val) arg->pstate |= 0x02;
    13ae:	b9a1      	cbnz	r1, 13da <Encoder2::isr35()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    13b0:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    13b4:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    13b8:	4912      	ldr	r1, [pc, #72]	; (1404 <Encoder2::isr35()+0x78>)
    13ba:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    13bc:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    13be:	b149      	cbz	r1, 13d4 <Encoder2::isr35()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    13c0:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    13c2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    13c6:	b29b      	uxth	r3, r3
    13c8:	b2d9      	uxtb	r1, r3
    13ca:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    13cc:	292b      	cmp	r1, #43	; 0x2b
    13ce:	d00c      	beq.n	13ea <Encoder2::isr35()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    13d0:	2917      	cmp	r1, #23
    13d2:	d010      	beq.n	13f6 <Encoder2::isr35()+0x6a>
	static void isr35(void) { update(interruptArgs[35]); }
    13d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    13d8:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    13da:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    13de:	e7e7      	b.n	13b0 <Encoder2::isr35()+0x24>
		if (p1val) arg->pstate |= 0x02;
    13e0:	2900      	cmp	r1, #0
    13e2:	d0e7      	beq.n	13b4 <Encoder2::isr35()+0x28>
    13e4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    13e8:	e7e4      	b.n	13b4 <Encoder2::isr35()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    13ea:	6953      	ldr	r3, [r2, #20]
	static void isr35(void) { update(interruptArgs[35]); }
    13ec:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    13f0:	3b01      	subs	r3, #1
    13f2:	6153      	str	r3, [r2, #20]
	static void isr35(void) { update(interruptArgs[35]); }
    13f4:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    13f6:	6953      	ldr	r3, [r2, #20]
    13f8:	3301      	adds	r3, #1
    13fa:	6153      	str	r3, [r2, #20]
	static void isr35(void) { update(interruptArgs[35]); }
    13fc:	e7ea      	b.n	13d4 <Encoder2::isr35()+0x48>
    13fe:	bf00      	nop
    1400:	2000af60 	.word	0x2000af60
    1404:	20009448 	.word	0x20009448

00001408 <Encoder2::isr36()>:
	static void isr36(void) { update(interruptArgs[36]); }
    1408:	4b1c      	ldr	r3, [pc, #112]	; (147c <Encoder2::isr36()+0x74>)
    140a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
    140e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1410:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1414:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1416:	6809      	ldr	r1, [r1, #0]
    1418:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    141a:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    141c:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    141e:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1420:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1422:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1424:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1426:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1428:	d018      	beq.n	145c <Encoder2::isr36()+0x54>
		if (p1val) arg->pstate |= 0x02;
    142a:	b9a1      	cbnz	r1, 1456 <Encoder2::isr36()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    142c:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1430:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1434:	4912      	ldr	r1, [pc, #72]	; (1480 <Encoder2::isr36()+0x78>)
    1436:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1438:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    143a:	b149      	cbz	r1, 1450 <Encoder2::isr36()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    143c:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    143e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1442:	b29b      	uxth	r3, r3
    1444:	b2d9      	uxtb	r1, r3
    1446:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1448:	292b      	cmp	r1, #43	; 0x2b
    144a:	d00c      	beq.n	1466 <Encoder2::isr36()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    144c:	2917      	cmp	r1, #23
    144e:	d010      	beq.n	1472 <Encoder2::isr36()+0x6a>
	static void isr36(void) { update(interruptArgs[36]); }
    1450:	f85d 4b04 	ldr.w	r4, [sp], #4
    1454:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1456:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    145a:	e7e7      	b.n	142c <Encoder2::isr36()+0x24>
		if (p1val) arg->pstate |= 0x02;
    145c:	2900      	cmp	r1, #0
    145e:	d0e7      	beq.n	1430 <Encoder2::isr36()+0x28>
    1460:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1464:	e7e4      	b.n	1430 <Encoder2::isr36()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1466:	6953      	ldr	r3, [r2, #20]
	static void isr36(void) { update(interruptArgs[36]); }
    1468:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    146c:	3b01      	subs	r3, #1
    146e:	6153      	str	r3, [r2, #20]
	static void isr36(void) { update(interruptArgs[36]); }
    1470:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1472:	6953      	ldr	r3, [r2, #20]
    1474:	3301      	adds	r3, #1
    1476:	6153      	str	r3, [r2, #20]
	static void isr36(void) { update(interruptArgs[36]); }
    1478:	e7ea      	b.n	1450 <Encoder2::isr36()+0x48>
    147a:	bf00      	nop
    147c:	2000af60 	.word	0x2000af60
    1480:	20009448 	.word	0x20009448

00001484 <Encoder2::isr37()>:
	static void isr37(void) { update(interruptArgs[37]); }
    1484:	4b1c      	ldr	r3, [pc, #112]	; (14f8 <Encoder2::isr37()+0x74>)
    1486:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    148a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    148c:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1490:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1492:	6809      	ldr	r1, [r1, #0]
    1494:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1496:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1498:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    149a:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    149c:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    149e:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    14a0:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    14a2:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    14a4:	d018      	beq.n	14d8 <Encoder2::isr37()+0x54>
		if (p1val) arg->pstate |= 0x02;
    14a6:	b9a1      	cbnz	r1, 14d2 <Encoder2::isr37()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    14a8:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    14ac:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    14b0:	4912      	ldr	r1, [pc, #72]	; (14fc <Encoder2::isr37()+0x78>)
    14b2:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    14b4:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    14b6:	b149      	cbz	r1, 14cc <Encoder2::isr37()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    14b8:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    14ba:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    14be:	b29b      	uxth	r3, r3
    14c0:	b2d9      	uxtb	r1, r3
    14c2:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    14c4:	292b      	cmp	r1, #43	; 0x2b
    14c6:	d00c      	beq.n	14e2 <Encoder2::isr37()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    14c8:	2917      	cmp	r1, #23
    14ca:	d010      	beq.n	14ee <Encoder2::isr37()+0x6a>
	static void isr37(void) { update(interruptArgs[37]); }
    14cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    14d0:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    14d2:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    14d6:	e7e7      	b.n	14a8 <Encoder2::isr37()+0x24>
		if (p1val) arg->pstate |= 0x02;
    14d8:	2900      	cmp	r1, #0
    14da:	d0e7      	beq.n	14ac <Encoder2::isr37()+0x28>
    14dc:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    14e0:	e7e4      	b.n	14ac <Encoder2::isr37()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    14e2:	6953      	ldr	r3, [r2, #20]
	static void isr37(void) { update(interruptArgs[37]); }
    14e4:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    14e8:	3b01      	subs	r3, #1
    14ea:	6153      	str	r3, [r2, #20]
	static void isr37(void) { update(interruptArgs[37]); }
    14ec:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    14ee:	6953      	ldr	r3, [r2, #20]
    14f0:	3301      	adds	r3, #1
    14f2:	6153      	str	r3, [r2, #20]
	static void isr37(void) { update(interruptArgs[37]); }
    14f4:	e7ea      	b.n	14cc <Encoder2::isr37()+0x48>
    14f6:	bf00      	nop
    14f8:	2000af60 	.word	0x2000af60
    14fc:	20009448 	.word	0x20009448

00001500 <Encoder2::isr38()>:
	static void isr38(void) { update(interruptArgs[38]); }
    1500:	4b1c      	ldr	r3, [pc, #112]	; (1574 <Encoder2::isr38()+0x74>)
    1502:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    1506:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1508:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    150c:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    150e:	6809      	ldr	r1, [r1, #0]
    1510:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1512:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1514:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1516:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1518:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    151a:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    151c:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    151e:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1520:	d018      	beq.n	1554 <Encoder2::isr38()+0x54>
		if (p1val) arg->pstate |= 0x02;
    1522:	b9a1      	cbnz	r1, 154e <Encoder2::isr38()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1524:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1528:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    152c:	4912      	ldr	r1, [pc, #72]	; (1578 <Encoder2::isr38()+0x78>)
    152e:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1530:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1532:	b149      	cbz	r1, 1548 <Encoder2::isr38()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1534:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    1536:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    153a:	b29b      	uxth	r3, r3
    153c:	b2d9      	uxtb	r1, r3
    153e:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1540:	292b      	cmp	r1, #43	; 0x2b
    1542:	d00c      	beq.n	155e <Encoder2::isr38()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1544:	2917      	cmp	r1, #23
    1546:	d010      	beq.n	156a <Encoder2::isr38()+0x6a>
	static void isr38(void) { update(interruptArgs[38]); }
    1548:	f85d 4b04 	ldr.w	r4, [sp], #4
    154c:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    154e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1552:	e7e7      	b.n	1524 <Encoder2::isr38()+0x24>
		if (p1val) arg->pstate |= 0x02;
    1554:	2900      	cmp	r1, #0
    1556:	d0e7      	beq.n	1528 <Encoder2::isr38()+0x28>
    1558:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    155c:	e7e4      	b.n	1528 <Encoder2::isr38()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    155e:	6953      	ldr	r3, [r2, #20]
	static void isr38(void) { update(interruptArgs[38]); }
    1560:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1564:	3b01      	subs	r3, #1
    1566:	6153      	str	r3, [r2, #20]
	static void isr38(void) { update(interruptArgs[38]); }
    1568:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    156a:	6953      	ldr	r3, [r2, #20]
    156c:	3301      	adds	r3, #1
    156e:	6153      	str	r3, [r2, #20]
	static void isr38(void) { update(interruptArgs[38]); }
    1570:	e7ea      	b.n	1548 <Encoder2::isr38()+0x48>
    1572:	bf00      	nop
    1574:	2000af60 	.word	0x2000af60
    1578:	20009448 	.word	0x20009448

0000157c <Encoder2::isr39()>:
	static void isr39(void) { update(interruptArgs[39]); }
    157c:	4b1c      	ldr	r3, [pc, #112]	; (15f0 <Encoder2::isr39()+0x74>)
    157e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    1582:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1584:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1588:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    158a:	6809      	ldr	r1, [r1, #0]
    158c:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    158e:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1590:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1592:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1594:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1596:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1598:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    159a:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    159c:	d018      	beq.n	15d0 <Encoder2::isr39()+0x54>
		if (p1val) arg->pstate |= 0x02;
    159e:	b9a1      	cbnz	r1, 15ca <Encoder2::isr39()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    15a0:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    15a4:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    15a8:	4912      	ldr	r1, [pc, #72]	; (15f4 <Encoder2::isr39()+0x78>)
    15aa:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    15ac:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    15ae:	b149      	cbz	r1, 15c4 <Encoder2::isr39()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    15b0:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    15b2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    15b6:	b29b      	uxth	r3, r3
    15b8:	b2d9      	uxtb	r1, r3
    15ba:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    15bc:	292b      	cmp	r1, #43	; 0x2b
    15be:	d00c      	beq.n	15da <Encoder2::isr39()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    15c0:	2917      	cmp	r1, #23
    15c2:	d010      	beq.n	15e6 <Encoder2::isr39()+0x6a>
	static void isr39(void) { update(interruptArgs[39]); }
    15c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    15c8:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    15ca:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    15ce:	e7e7      	b.n	15a0 <Encoder2::isr39()+0x24>
		if (p1val) arg->pstate |= 0x02;
    15d0:	2900      	cmp	r1, #0
    15d2:	d0e7      	beq.n	15a4 <Encoder2::isr39()+0x28>
    15d4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    15d8:	e7e4      	b.n	15a4 <Encoder2::isr39()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    15da:	6953      	ldr	r3, [r2, #20]
	static void isr39(void) { update(interruptArgs[39]); }
    15dc:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    15e0:	3b01      	subs	r3, #1
    15e2:	6153      	str	r3, [r2, #20]
	static void isr39(void) { update(interruptArgs[39]); }
    15e4:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    15e6:	6953      	ldr	r3, [r2, #20]
    15e8:	3301      	adds	r3, #1
    15ea:	6153      	str	r3, [r2, #20]
	static void isr39(void) { update(interruptArgs[39]); }
    15ec:	e7ea      	b.n	15c4 <Encoder2::isr39()+0x48>
    15ee:	bf00      	nop
    15f0:	2000af60 	.word	0x2000af60
    15f4:	20009448 	.word	0x20009448

000015f8 <Encoder2::isr40()>:
	static void isr40(void) { update(interruptArgs[40]); }
    15f8:	4b1c      	ldr	r3, [pc, #112]	; (166c <Encoder2::isr40()+0x74>)
    15fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    15fe:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1600:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1604:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1606:	6809      	ldr	r1, [r1, #0]
    1608:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    160a:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    160c:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    160e:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1610:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1612:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1614:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1616:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1618:	d018      	beq.n	164c <Encoder2::isr40()+0x54>
		if (p1val) arg->pstate |= 0x02;
    161a:	b9a1      	cbnz	r1, 1646 <Encoder2::isr40()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    161c:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1620:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1624:	4912      	ldr	r1, [pc, #72]	; (1670 <Encoder2::isr40()+0x78>)
    1626:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1628:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    162a:	b149      	cbz	r1, 1640 <Encoder2::isr40()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    162c:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    162e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1632:	b29b      	uxth	r3, r3
    1634:	b2d9      	uxtb	r1, r3
    1636:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1638:	292b      	cmp	r1, #43	; 0x2b
    163a:	d00c      	beq.n	1656 <Encoder2::isr40()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    163c:	2917      	cmp	r1, #23
    163e:	d010      	beq.n	1662 <Encoder2::isr40()+0x6a>
	static void isr40(void) { update(interruptArgs[40]); }
    1640:	f85d 4b04 	ldr.w	r4, [sp], #4
    1644:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1646:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    164a:	e7e7      	b.n	161c <Encoder2::isr40()+0x24>
		if (p1val) arg->pstate |= 0x02;
    164c:	2900      	cmp	r1, #0
    164e:	d0e7      	beq.n	1620 <Encoder2::isr40()+0x28>
    1650:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1654:	e7e4      	b.n	1620 <Encoder2::isr40()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1656:	6953      	ldr	r3, [r2, #20]
	static void isr40(void) { update(interruptArgs[40]); }
    1658:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    165c:	3b01      	subs	r3, #1
    165e:	6153      	str	r3, [r2, #20]
	static void isr40(void) { update(interruptArgs[40]); }
    1660:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1662:	6953      	ldr	r3, [r2, #20]
    1664:	3301      	adds	r3, #1
    1666:	6153      	str	r3, [r2, #20]
	static void isr40(void) { update(interruptArgs[40]); }
    1668:	e7ea      	b.n	1640 <Encoder2::isr40()+0x48>
    166a:	bf00      	nop
    166c:	2000af60 	.word	0x2000af60
    1670:	20009448 	.word	0x20009448

00001674 <Encoder2::isr41()>:
	static void isr41(void) { update(interruptArgs[41]); }
    1674:	4b1c      	ldr	r3, [pc, #112]	; (16e8 <Encoder2::isr41()+0x74>)
    1676:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    167a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    167c:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1680:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1682:	6809      	ldr	r1, [r1, #0]
    1684:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1686:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1688:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    168a:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    168c:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    168e:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1690:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1692:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1694:	d018      	beq.n	16c8 <Encoder2::isr41()+0x54>
		if (p1val) arg->pstate |= 0x02;
    1696:	b9a1      	cbnz	r1, 16c2 <Encoder2::isr41()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1698:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    169c:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    16a0:	4912      	ldr	r1, [pc, #72]	; (16ec <Encoder2::isr41()+0x78>)
    16a2:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    16a4:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    16a6:	b149      	cbz	r1, 16bc <Encoder2::isr41()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    16a8:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    16aa:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    16ae:	b29b      	uxth	r3, r3
    16b0:	b2d9      	uxtb	r1, r3
    16b2:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    16b4:	292b      	cmp	r1, #43	; 0x2b
    16b6:	d00c      	beq.n	16d2 <Encoder2::isr41()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    16b8:	2917      	cmp	r1, #23
    16ba:	d010      	beq.n	16de <Encoder2::isr41()+0x6a>
	static void isr41(void) { update(interruptArgs[41]); }
    16bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    16c0:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    16c2:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    16c6:	e7e7      	b.n	1698 <Encoder2::isr41()+0x24>
		if (p1val) arg->pstate |= 0x02;
    16c8:	2900      	cmp	r1, #0
    16ca:	d0e7      	beq.n	169c <Encoder2::isr41()+0x28>
    16cc:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    16d0:	e7e4      	b.n	169c <Encoder2::isr41()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    16d2:	6953      	ldr	r3, [r2, #20]
	static void isr41(void) { update(interruptArgs[41]); }
    16d4:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    16d8:	3b01      	subs	r3, #1
    16da:	6153      	str	r3, [r2, #20]
	static void isr41(void) { update(interruptArgs[41]); }
    16dc:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    16de:	6953      	ldr	r3, [r2, #20]
    16e0:	3301      	adds	r3, #1
    16e2:	6153      	str	r3, [r2, #20]
	static void isr41(void) { update(interruptArgs[41]); }
    16e4:	e7ea      	b.n	16bc <Encoder2::isr41()+0x48>
    16e6:	bf00      	nop
    16e8:	2000af60 	.word	0x2000af60
    16ec:	20009448 	.word	0x20009448

000016f0 <Encoder2::isr42()>:
	static void isr42(void) { update(interruptArgs[42]); }
    16f0:	4b1c      	ldr	r3, [pc, #112]	; (1764 <Encoder2::isr42()+0x74>)
    16f2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
    16f6:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    16f8:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    16fc:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    16fe:	6809      	ldr	r1, [r1, #0]
    1700:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1702:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1704:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1706:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1708:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    170a:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    170c:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    170e:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1710:	d018      	beq.n	1744 <Encoder2::isr42()+0x54>
		if (p1val) arg->pstate |= 0x02;
    1712:	b9a1      	cbnz	r1, 173e <Encoder2::isr42()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1714:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1718:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    171c:	4912      	ldr	r1, [pc, #72]	; (1768 <Encoder2::isr42()+0x78>)
    171e:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1720:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1722:	b149      	cbz	r1, 1738 <Encoder2::isr42()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1724:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    1726:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    172a:	b29b      	uxth	r3, r3
    172c:	b2d9      	uxtb	r1, r3
    172e:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1730:	292b      	cmp	r1, #43	; 0x2b
    1732:	d00c      	beq.n	174e <Encoder2::isr42()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1734:	2917      	cmp	r1, #23
    1736:	d010      	beq.n	175a <Encoder2::isr42()+0x6a>
	static void isr42(void) { update(interruptArgs[42]); }
    1738:	f85d 4b04 	ldr.w	r4, [sp], #4
    173c:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    173e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1742:	e7e7      	b.n	1714 <Encoder2::isr42()+0x24>
		if (p1val) arg->pstate |= 0x02;
    1744:	2900      	cmp	r1, #0
    1746:	d0e7      	beq.n	1718 <Encoder2::isr42()+0x28>
    1748:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    174c:	e7e4      	b.n	1718 <Encoder2::isr42()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    174e:	6953      	ldr	r3, [r2, #20]
	static void isr42(void) { update(interruptArgs[42]); }
    1750:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1754:	3b01      	subs	r3, #1
    1756:	6153      	str	r3, [r2, #20]
	static void isr42(void) { update(interruptArgs[42]); }
    1758:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    175a:	6953      	ldr	r3, [r2, #20]
    175c:	3301      	adds	r3, #1
    175e:	6153      	str	r3, [r2, #20]
	static void isr42(void) { update(interruptArgs[42]); }
    1760:	e7ea      	b.n	1738 <Encoder2::isr42()+0x48>
    1762:	bf00      	nop
    1764:	2000af60 	.word	0x2000af60
    1768:	20009448 	.word	0x20009448

0000176c <Encoder2::isr43()>:
	static void isr43(void) { update(interruptArgs[43]); }
    176c:	4b1c      	ldr	r3, [pc, #112]	; (17e0 <Encoder2::isr43()+0x74>)
    176e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
    1772:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1774:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1778:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    177a:	6809      	ldr	r1, [r1, #0]
    177c:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    177e:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1780:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1782:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1784:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1786:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1788:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    178a:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    178c:	d018      	beq.n	17c0 <Encoder2::isr43()+0x54>
		if (p1val) arg->pstate |= 0x02;
    178e:	b9a1      	cbnz	r1, 17ba <Encoder2::isr43()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1790:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1794:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1798:	4912      	ldr	r1, [pc, #72]	; (17e4 <Encoder2::isr43()+0x78>)
    179a:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    179c:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    179e:	b149      	cbz	r1, 17b4 <Encoder2::isr43()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    17a0:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    17a2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    17a6:	b29b      	uxth	r3, r3
    17a8:	b2d9      	uxtb	r1, r3
    17aa:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    17ac:	292b      	cmp	r1, #43	; 0x2b
    17ae:	d00c      	beq.n	17ca <Encoder2::isr43()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    17b0:	2917      	cmp	r1, #23
    17b2:	d010      	beq.n	17d6 <Encoder2::isr43()+0x6a>
	static void isr43(void) { update(interruptArgs[43]); }
    17b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    17b8:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    17ba:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    17be:	e7e7      	b.n	1790 <Encoder2::isr43()+0x24>
		if (p1val) arg->pstate |= 0x02;
    17c0:	2900      	cmp	r1, #0
    17c2:	d0e7      	beq.n	1794 <Encoder2::isr43()+0x28>
    17c4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    17c8:	e7e4      	b.n	1794 <Encoder2::isr43()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    17ca:	6953      	ldr	r3, [r2, #20]
	static void isr43(void) { update(interruptArgs[43]); }
    17cc:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    17d0:	3b01      	subs	r3, #1
    17d2:	6153      	str	r3, [r2, #20]
	static void isr43(void) { update(interruptArgs[43]); }
    17d4:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    17d6:	6953      	ldr	r3, [r2, #20]
    17d8:	3301      	adds	r3, #1
    17da:	6153      	str	r3, [r2, #20]
	static void isr43(void) { update(interruptArgs[43]); }
    17dc:	e7ea      	b.n	17b4 <Encoder2::isr43()+0x48>
    17de:	bf00      	nop
    17e0:	2000af60 	.word	0x2000af60
    17e4:	20009448 	.word	0x20009448

000017e8 <Encoder2::isr44()>:
	static void isr44(void) { update(interruptArgs[44]); }
    17e8:	4b1c      	ldr	r3, [pc, #112]	; (185c <Encoder2::isr44()+0x74>)
    17ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    17ee:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    17f0:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    17f4:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    17f6:	6809      	ldr	r1, [r1, #0]
    17f8:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    17fa:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    17fc:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    17fe:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1800:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1802:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1804:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1806:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1808:	d018      	beq.n	183c <Encoder2::isr44()+0x54>
		if (p1val) arg->pstate |= 0x02;
    180a:	b9a1      	cbnz	r1, 1836 <Encoder2::isr44()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    180c:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1810:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1814:	4912      	ldr	r1, [pc, #72]	; (1860 <Encoder2::isr44()+0x78>)
    1816:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1818:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    181a:	b149      	cbz	r1, 1830 <Encoder2::isr44()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    181c:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    181e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1822:	b29b      	uxth	r3, r3
    1824:	b2d9      	uxtb	r1, r3
    1826:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1828:	292b      	cmp	r1, #43	; 0x2b
    182a:	d00c      	beq.n	1846 <Encoder2::isr44()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    182c:	2917      	cmp	r1, #23
    182e:	d010      	beq.n	1852 <Encoder2::isr44()+0x6a>
	static void isr44(void) { update(interruptArgs[44]); }
    1830:	f85d 4b04 	ldr.w	r4, [sp], #4
    1834:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1836:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    183a:	e7e7      	b.n	180c <Encoder2::isr44()+0x24>
		if (p1val) arg->pstate |= 0x02;
    183c:	2900      	cmp	r1, #0
    183e:	d0e7      	beq.n	1810 <Encoder2::isr44()+0x28>
    1840:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1844:	e7e4      	b.n	1810 <Encoder2::isr44()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1846:	6953      	ldr	r3, [r2, #20]
	static void isr44(void) { update(interruptArgs[44]); }
    1848:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    184c:	3b01      	subs	r3, #1
    184e:	6153      	str	r3, [r2, #20]
	static void isr44(void) { update(interruptArgs[44]); }
    1850:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1852:	6953      	ldr	r3, [r2, #20]
    1854:	3301      	adds	r3, #1
    1856:	6153      	str	r3, [r2, #20]
	static void isr44(void) { update(interruptArgs[44]); }
    1858:	e7ea      	b.n	1830 <Encoder2::isr44()+0x48>
    185a:	bf00      	nop
    185c:	2000af60 	.word	0x2000af60
    1860:	20009448 	.word	0x20009448

00001864 <Encoder2::isr45()>:
	static void isr45(void) { update(interruptArgs[45]); }
    1864:	4b1c      	ldr	r3, [pc, #112]	; (18d8 <Encoder2::isr45()+0x74>)
    1866:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    186a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    186c:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1870:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1872:	6809      	ldr	r1, [r1, #0]
    1874:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1876:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1878:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    187a:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    187c:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    187e:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1880:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1882:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1884:	d018      	beq.n	18b8 <Encoder2::isr45()+0x54>
		if (p1val) arg->pstate |= 0x02;
    1886:	b9a1      	cbnz	r1, 18b2 <Encoder2::isr45()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1888:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    188c:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1890:	4912      	ldr	r1, [pc, #72]	; (18dc <Encoder2::isr45()+0x78>)
    1892:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1894:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1896:	b149      	cbz	r1, 18ac <Encoder2::isr45()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1898:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    189a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    189e:	b29b      	uxth	r3, r3
    18a0:	b2d9      	uxtb	r1, r3
    18a2:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    18a4:	292b      	cmp	r1, #43	; 0x2b
    18a6:	d00c      	beq.n	18c2 <Encoder2::isr45()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    18a8:	2917      	cmp	r1, #23
    18aa:	d010      	beq.n	18ce <Encoder2::isr45()+0x6a>
	static void isr45(void) { update(interruptArgs[45]); }
    18ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    18b0:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    18b2:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    18b6:	e7e7      	b.n	1888 <Encoder2::isr45()+0x24>
		if (p1val) arg->pstate |= 0x02;
    18b8:	2900      	cmp	r1, #0
    18ba:	d0e7      	beq.n	188c <Encoder2::isr45()+0x28>
    18bc:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    18c0:	e7e4      	b.n	188c <Encoder2::isr45()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    18c2:	6953      	ldr	r3, [r2, #20]
	static void isr45(void) { update(interruptArgs[45]); }
    18c4:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    18c8:	3b01      	subs	r3, #1
    18ca:	6153      	str	r3, [r2, #20]
	static void isr45(void) { update(interruptArgs[45]); }
    18cc:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    18ce:	6953      	ldr	r3, [r2, #20]
    18d0:	3301      	adds	r3, #1
    18d2:	6153      	str	r3, [r2, #20]
	static void isr45(void) { update(interruptArgs[45]); }
    18d4:	e7ea      	b.n	18ac <Encoder2::isr45()+0x48>
    18d6:	bf00      	nop
    18d8:	2000af60 	.word	0x2000af60
    18dc:	20009448 	.word	0x20009448

000018e0 <Encoder2::isr46()>:
	static void isr46(void) { update(interruptArgs[46]); }
    18e0:	4b1c      	ldr	r3, [pc, #112]	; (1954 <Encoder2::isr46()+0x74>)
    18e2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    18e6:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    18e8:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    18ec:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    18ee:	6809      	ldr	r1, [r1, #0]
    18f0:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    18f2:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    18f4:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    18f6:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    18f8:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    18fa:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    18fc:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    18fe:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1900:	d018      	beq.n	1934 <Encoder2::isr46()+0x54>
		if (p1val) arg->pstate |= 0x02;
    1902:	b9a1      	cbnz	r1, 192e <Encoder2::isr46()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1904:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1908:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    190c:	4912      	ldr	r1, [pc, #72]	; (1958 <Encoder2::isr46()+0x78>)
    190e:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1910:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1912:	b149      	cbz	r1, 1928 <Encoder2::isr46()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1914:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    1916:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    191a:	b29b      	uxth	r3, r3
    191c:	b2d9      	uxtb	r1, r3
    191e:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1920:	292b      	cmp	r1, #43	; 0x2b
    1922:	d00c      	beq.n	193e <Encoder2::isr46()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1924:	2917      	cmp	r1, #23
    1926:	d010      	beq.n	194a <Encoder2::isr46()+0x6a>
	static void isr46(void) { update(interruptArgs[46]); }
    1928:	f85d 4b04 	ldr.w	r4, [sp], #4
    192c:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    192e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1932:	e7e7      	b.n	1904 <Encoder2::isr46()+0x24>
		if (p1val) arg->pstate |= 0x02;
    1934:	2900      	cmp	r1, #0
    1936:	d0e7      	beq.n	1908 <Encoder2::isr46()+0x28>
    1938:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    193c:	e7e4      	b.n	1908 <Encoder2::isr46()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    193e:	6953      	ldr	r3, [r2, #20]
	static void isr46(void) { update(interruptArgs[46]); }
    1940:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1944:	3b01      	subs	r3, #1
    1946:	6153      	str	r3, [r2, #20]
	static void isr46(void) { update(interruptArgs[46]); }
    1948:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    194a:	6953      	ldr	r3, [r2, #20]
    194c:	3301      	adds	r3, #1
    194e:	6153      	str	r3, [r2, #20]
	static void isr46(void) { update(interruptArgs[46]); }
    1950:	e7ea      	b.n	1928 <Encoder2::isr46()+0x48>
    1952:	bf00      	nop
    1954:	2000af60 	.word	0x2000af60
    1958:	20009448 	.word	0x20009448

0000195c <Encoder2::isr47()>:
	static void isr47(void) { update(interruptArgs[47]); }
    195c:	4b1c      	ldr	r3, [pc, #112]	; (19d0 <Encoder2::isr47()+0x74>)
    195e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
    1962:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1964:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1968:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    196a:	6809      	ldr	r1, [r1, #0]
    196c:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    196e:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1970:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1972:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1974:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1976:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1978:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    197a:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    197c:	d018      	beq.n	19b0 <Encoder2::isr47()+0x54>
		if (p1val) arg->pstate |= 0x02;
    197e:	b9a1      	cbnz	r1, 19aa <Encoder2::isr47()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1980:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1984:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1988:	4912      	ldr	r1, [pc, #72]	; (19d4 <Encoder2::isr47()+0x78>)
    198a:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    198c:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    198e:	b149      	cbz	r1, 19a4 <Encoder2::isr47()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1990:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    1992:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1996:	b29b      	uxth	r3, r3
    1998:	b2d9      	uxtb	r1, r3
    199a:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    199c:	292b      	cmp	r1, #43	; 0x2b
    199e:	d00c      	beq.n	19ba <Encoder2::isr47()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    19a0:	2917      	cmp	r1, #23
    19a2:	d010      	beq.n	19c6 <Encoder2::isr47()+0x6a>
	static void isr47(void) { update(interruptArgs[47]); }
    19a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    19a8:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    19aa:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    19ae:	e7e7      	b.n	1980 <Encoder2::isr47()+0x24>
		if (p1val) arg->pstate |= 0x02;
    19b0:	2900      	cmp	r1, #0
    19b2:	d0e7      	beq.n	1984 <Encoder2::isr47()+0x28>
    19b4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    19b8:	e7e4      	b.n	1984 <Encoder2::isr47()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    19ba:	6953      	ldr	r3, [r2, #20]
	static void isr47(void) { update(interruptArgs[47]); }
    19bc:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    19c0:	3b01      	subs	r3, #1
    19c2:	6153      	str	r3, [r2, #20]
	static void isr47(void) { update(interruptArgs[47]); }
    19c4:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    19c6:	6953      	ldr	r3, [r2, #20]
    19c8:	3301      	adds	r3, #1
    19ca:	6153      	str	r3, [r2, #20]
	static void isr47(void) { update(interruptArgs[47]); }
    19cc:	e7ea      	b.n	19a4 <Encoder2::isr47()+0x48>
    19ce:	bf00      	nop
    19d0:	2000af60 	.word	0x2000af60
    19d4:	20009448 	.word	0x20009448

000019d8 <Encoder2::isr48()>:
	static void isr48(void) { update(interruptArgs[48]); }
    19d8:	4b1c      	ldr	r3, [pc, #112]	; (1a4c <Encoder2::isr48()+0x74>)
    19da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    19de:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    19e0:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    19e4:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    19e6:	6809      	ldr	r1, [r1, #0]
    19e8:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    19ea:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    19ec:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    19ee:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    19f0:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    19f2:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    19f4:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    19f6:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    19f8:	d018      	beq.n	1a2c <Encoder2::isr48()+0x54>
		if (p1val) arg->pstate |= 0x02;
    19fa:	b9a1      	cbnz	r1, 1a26 <Encoder2::isr48()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    19fc:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1a00:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1a04:	4912      	ldr	r1, [pc, #72]	; (1a50 <Encoder2::isr48()+0x78>)
    1a06:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1a08:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1a0a:	b149      	cbz	r1, 1a20 <Encoder2::isr48()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1a0c:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    1a0e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1a12:	b29b      	uxth	r3, r3
    1a14:	b2d9      	uxtb	r1, r3
    1a16:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1a18:	292b      	cmp	r1, #43	; 0x2b
    1a1a:	d00c      	beq.n	1a36 <Encoder2::isr48()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1a1c:	2917      	cmp	r1, #23
    1a1e:	d010      	beq.n	1a42 <Encoder2::isr48()+0x6a>
	static void isr48(void) { update(interruptArgs[48]); }
    1a20:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a24:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1a26:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1a2a:	e7e7      	b.n	19fc <Encoder2::isr48()+0x24>
		if (p1val) arg->pstate |= 0x02;
    1a2c:	2900      	cmp	r1, #0
    1a2e:	d0e7      	beq.n	1a00 <Encoder2::isr48()+0x28>
    1a30:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1a34:	e7e4      	b.n	1a00 <Encoder2::isr48()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1a36:	6953      	ldr	r3, [r2, #20]
	static void isr48(void) { update(interruptArgs[48]); }
    1a38:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1a3c:	3b01      	subs	r3, #1
    1a3e:	6153      	str	r3, [r2, #20]
	static void isr48(void) { update(interruptArgs[48]); }
    1a40:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1a42:	6953      	ldr	r3, [r2, #20]
    1a44:	3301      	adds	r3, #1
    1a46:	6153      	str	r3, [r2, #20]
	static void isr48(void) { update(interruptArgs[48]); }
    1a48:	e7ea      	b.n	1a20 <Encoder2::isr48()+0x48>
    1a4a:	bf00      	nop
    1a4c:	2000af60 	.word	0x2000af60
    1a50:	20009448 	.word	0x20009448

00001a54 <Encoder2::isr49()>:
	static void isr49(void) { update(interruptArgs[49]); }
    1a54:	4b1c      	ldr	r3, [pc, #112]	; (1ac8 <Encoder2::isr49()+0x74>)
    1a56:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    1a5a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a5c:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1a60:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1a62:	6809      	ldr	r1, [r1, #0]
    1a64:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1a66:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a68:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1a6a:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a6c:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1a6e:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a70:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1a72:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a74:	d018      	beq.n	1aa8 <Encoder2::isr49()+0x54>
		if (p1val) arg->pstate |= 0x02;
    1a76:	b9a1      	cbnz	r1, 1aa2 <Encoder2::isr49()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1a78:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1a7c:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1a80:	4912      	ldr	r1, [pc, #72]	; (1acc <Encoder2::isr49()+0x78>)
    1a82:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1a84:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1a86:	b149      	cbz	r1, 1a9c <Encoder2::isr49()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1a88:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    1a8a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1a8e:	b29b      	uxth	r3, r3
    1a90:	b2d9      	uxtb	r1, r3
    1a92:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1a94:	292b      	cmp	r1, #43	; 0x2b
    1a96:	d00c      	beq.n	1ab2 <Encoder2::isr49()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1a98:	2917      	cmp	r1, #23
    1a9a:	d010      	beq.n	1abe <Encoder2::isr49()+0x6a>
	static void isr49(void) { update(interruptArgs[49]); }
    1a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1aa0:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1aa2:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1aa6:	e7e7      	b.n	1a78 <Encoder2::isr49()+0x24>
		if (p1val) arg->pstate |= 0x02;
    1aa8:	2900      	cmp	r1, #0
    1aaa:	d0e7      	beq.n	1a7c <Encoder2::isr49()+0x28>
    1aac:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1ab0:	e7e4      	b.n	1a7c <Encoder2::isr49()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1ab2:	6953      	ldr	r3, [r2, #20]
	static void isr49(void) { update(interruptArgs[49]); }
    1ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1ab8:	3b01      	subs	r3, #1
    1aba:	6153      	str	r3, [r2, #20]
	static void isr49(void) { update(interruptArgs[49]); }
    1abc:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1abe:	6953      	ldr	r3, [r2, #20]
    1ac0:	3301      	adds	r3, #1
    1ac2:	6153      	str	r3, [r2, #20]
	static void isr49(void) { update(interruptArgs[49]); }
    1ac4:	e7ea      	b.n	1a9c <Encoder2::isr49()+0x48>
    1ac6:	bf00      	nop
    1ac8:	2000af60 	.word	0x2000af60
    1acc:	20009448 	.word	0x20009448

00001ad0 <Encoder2::isr50()>:
	static void isr50(void) { update(interruptArgs[50]); }
    1ad0:	4b1c      	ldr	r3, [pc, #112]	; (1b44 <Encoder2::isr50()+0x74>)
    1ad2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    1ad6:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1ad8:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1adc:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1ade:	6809      	ldr	r1, [r1, #0]
    1ae0:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1ae2:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1ae4:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1ae6:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1ae8:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1aea:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1aec:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1aee:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1af0:	d018      	beq.n	1b24 <Encoder2::isr50()+0x54>
		if (p1val) arg->pstate |= 0x02;
    1af2:	b9a1      	cbnz	r1, 1b1e <Encoder2::isr50()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1af4:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1af8:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1afc:	4912      	ldr	r1, [pc, #72]	; (1b48 <Encoder2::isr50()+0x78>)
    1afe:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1b00:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1b02:	b149      	cbz	r1, 1b18 <Encoder2::isr50()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1b04:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    1b06:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1b0a:	b29b      	uxth	r3, r3
    1b0c:	b2d9      	uxtb	r1, r3
    1b0e:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1b10:	292b      	cmp	r1, #43	; 0x2b
    1b12:	d00c      	beq.n	1b2e <Encoder2::isr50()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1b14:	2917      	cmp	r1, #23
    1b16:	d010      	beq.n	1b3a <Encoder2::isr50()+0x6a>
	static void isr50(void) { update(interruptArgs[50]); }
    1b18:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b1c:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1b1e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1b22:	e7e7      	b.n	1af4 <Encoder2::isr50()+0x24>
		if (p1val) arg->pstate |= 0x02;
    1b24:	2900      	cmp	r1, #0
    1b26:	d0e7      	beq.n	1af8 <Encoder2::isr50()+0x28>
    1b28:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1b2c:	e7e4      	b.n	1af8 <Encoder2::isr50()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1b2e:	6953      	ldr	r3, [r2, #20]
	static void isr50(void) { update(interruptArgs[50]); }
    1b30:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1b34:	3b01      	subs	r3, #1
    1b36:	6153      	str	r3, [r2, #20]
	static void isr50(void) { update(interruptArgs[50]); }
    1b38:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1b3a:	6953      	ldr	r3, [r2, #20]
    1b3c:	3301      	adds	r3, #1
    1b3e:	6153      	str	r3, [r2, #20]
	static void isr50(void) { update(interruptArgs[50]); }
    1b40:	e7ea      	b.n	1b18 <Encoder2::isr50()+0x48>
    1b42:	bf00      	nop
    1b44:	2000af60 	.word	0x2000af60
    1b48:	20009448 	.word	0x20009448

00001b4c <Encoder2::isr51()>:
	static void isr51(void) { update(interruptArgs[51]); }
    1b4c:	4b1c      	ldr	r3, [pc, #112]	; (1bc0 <Encoder2::isr51()+0x74>)
    1b4e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
    1b52:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1b54:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1b58:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1b5a:	6809      	ldr	r1, [r1, #0]
    1b5c:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1b5e:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1b60:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1b62:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1b64:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1b66:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1b68:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1b6a:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1b6c:	d018      	beq.n	1ba0 <Encoder2::isr51()+0x54>
		if (p1val) arg->pstate |= 0x02;
    1b6e:	b9a1      	cbnz	r1, 1b9a <Encoder2::isr51()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1b70:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1b74:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1b78:	4912      	ldr	r1, [pc, #72]	; (1bc4 <Encoder2::isr51()+0x78>)
    1b7a:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1b7c:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1b7e:	b149      	cbz	r1, 1b94 <Encoder2::isr51()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1b80:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    1b82:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1b86:	b29b      	uxth	r3, r3
    1b88:	b2d9      	uxtb	r1, r3
    1b8a:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1b8c:	292b      	cmp	r1, #43	; 0x2b
    1b8e:	d00c      	beq.n	1baa <Encoder2::isr51()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1b90:	2917      	cmp	r1, #23
    1b92:	d010      	beq.n	1bb6 <Encoder2::isr51()+0x6a>
	static void isr51(void) { update(interruptArgs[51]); }
    1b94:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b98:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1b9a:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1b9e:	e7e7      	b.n	1b70 <Encoder2::isr51()+0x24>
		if (p1val) arg->pstate |= 0x02;
    1ba0:	2900      	cmp	r1, #0
    1ba2:	d0e7      	beq.n	1b74 <Encoder2::isr51()+0x28>
    1ba4:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1ba8:	e7e4      	b.n	1b74 <Encoder2::isr51()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1baa:	6953      	ldr	r3, [r2, #20]
	static void isr51(void) { update(interruptArgs[51]); }
    1bac:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1bb0:	3b01      	subs	r3, #1
    1bb2:	6153      	str	r3, [r2, #20]
	static void isr51(void) { update(interruptArgs[51]); }
    1bb4:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1bb6:	6953      	ldr	r3, [r2, #20]
    1bb8:	3301      	adds	r3, #1
    1bba:	6153      	str	r3, [r2, #20]
	static void isr51(void) { update(interruptArgs[51]); }
    1bbc:	e7ea      	b.n	1b94 <Encoder2::isr51()+0x48>
    1bbe:	bf00      	nop
    1bc0:	2000af60 	.word	0x2000af60
    1bc4:	20009448 	.word	0x20009448

00001bc8 <Encoder2::isr52()>:
	static void isr52(void) { update(interruptArgs[52]); }
    1bc8:	4b1c      	ldr	r3, [pc, #112]	; (1c3c <Encoder2::isr52()+0x74>)
    1bca:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    1bce:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1bd0:	e9d2 1400 	ldrd	r1, r4, [r2]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1bd4:	8b13      	ldrh	r3, [r2, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1bd6:	6809      	ldr	r1, [r1, #0]
    1bd8:	6890      	ldr	r0, [r2, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1bda:	009b      	lsls	r3, r3, #2
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1bdc:	6824      	ldr	r4, [r4, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1bde:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1be0:	68d0      	ldr	r0, [r2, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1be2:	b29b      	uxth	r3, r3
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1be4:	4204      	tst	r4, r0
		arg->pstate  <<= 2;                       // save last 2 bit of state
    1be6:	8313      	strh	r3, [r2, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1be8:	d018      	beq.n	1c1c <Encoder2::isr52()+0x54>
		if (p1val) arg->pstate |= 0x02;
    1bea:	b9a1      	cbnz	r1, 1c16 <Encoder2::isr52()+0x4e>
		if (p2val) arg->pstate |= 0x01;
    1bec:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1bf0:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    1bf4:	4912      	ldr	r1, [pc, #72]	; (1c40 <Encoder2::isr52()+0x78>)
    1bf6:	56c9      	ldrsb	r1, [r1, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    1bf8:	8313      	strh	r3, [r2, #24]
		if (rot_enc_table[arg->pstate] )
    1bfa:	b149      	cbz	r1, 1c10 <Encoder2::isr52()+0x48>
		        arg->store <<= 4;               // Save last in MSB
    1bfc:	8b51      	ldrh	r1, [r2, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    1bfe:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1c02:	b29b      	uxth	r3, r3
    1c04:	b2d9      	uxtb	r1, r3
    1c06:	8353      	strh	r3, [r2, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1c08:	292b      	cmp	r1, #43	; 0x2b
    1c0a:	d00c      	beq.n	1c26 <Encoder2::isr52()+0x5e>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1c0c:	2917      	cmp	r1, #23
    1c0e:	d010      	beq.n	1c32 <Encoder2::isr52()+0x6a>
	static void isr52(void) { update(interruptArgs[52]); }
    1c10:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c14:	4770      	bx	lr
		if (p1val) arg->pstate |= 0x02;
    1c16:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1c1a:	e7e7      	b.n	1bec <Encoder2::isr52()+0x24>
		if (p1val) arg->pstate |= 0x02;
    1c1c:	2900      	cmp	r1, #0
    1c1e:	d0e7      	beq.n	1bf0 <Encoder2::isr52()+0x28>
    1c20:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    1c24:	e7e4      	b.n	1bf0 <Encoder2::isr52()+0x28>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1c26:	6953      	ldr	r3, [r2, #20]
	static void isr52(void) { update(interruptArgs[52]); }
    1c28:	f85d 4b04 	ldr.w	r4, [sp], #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    1c2c:	3b01      	subs	r3, #1
    1c2e:	6153      	str	r3, [r2, #20]
	static void isr52(void) { update(interruptArgs[52]); }
    1c30:	4770      	bx	lr
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    1c32:	6953      	ldr	r3, [r2, #20]
    1c34:	3301      	adds	r3, #1
    1c36:	6153      	str	r3, [r2, #20]
	static void isr52(void) { update(interruptArgs[52]); }
    1c38:	e7ea      	b.n	1c10 <Encoder2::isr52()+0x48>
    1c3a:	bf00      	nop
    1c3c:	2000af60 	.word	0x2000af60
    1c40:	20009448 	.word	0x20009448

00001c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>:

class AudioConnection
{
public:
	AudioConnection();
	AudioConnection(AudioStream &source, AudioStream &destination)
    1c44:	b510      	push	{r4, lr}
    1c46:	b084      	sub	sp, #16
    1c48:	4604      	mov	r4, r0
    1c4a:	9103      	str	r1, [sp, #12]
    1c4c:	9202      	str	r2, [sp, #8]
		: AudioConnection() { connect(source,destination); }
    1c4e:	f018 fca3 	bl	1a598 <AudioConnection::AudioConnection()>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
	friend class AudioStream;
	~AudioConnection(); 
	int disconnect(void);
	int connect(void);
	int connect(AudioStream &source, AudioStream &destination) {return connect(source,0,destination,0);};
    1c52:	2200      	movs	r2, #0
    1c54:	4620      	mov	r0, r4
    1c56:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    1c5a:	9200      	str	r2, [sp, #0]
    1c5c:	f018 fd10 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
		: AudioConnection() { connect(source,destination); }
    1c60:	4620      	mov	r0, r4
    1c62:	b004      	add	sp, #16
    1c64:	bd10      	pop	{r4, pc}
    1c66:	bf00      	nop

00001c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
    1c68:	b510      	push	{r4, lr}
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
    1c6a:	2300      	movs	r3, #0
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
    1c6c:	4604      	mov	r4, r0
    1c6e:	4610      	mov	r0, r2
		num_inputs(ninput), inputQueue(iqueue) {
    1c70:	4a0d      	ldr	r2, [pc, #52]	; (1ca8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x40>)
    1c72:	7261      	strb	r1, [r4, #9]
			active = false;
    1c74:	7223      	strb	r3, [r4, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    1c76:	6022      	str	r2, [r4, #0]
			destination_list = NULL;
    1c78:	e9c4 3003 	strd	r3, r0, [r4, #12]
			for (int i=0; i < num_inputs; i++) {
    1c7c:	b119      	cbz	r1, 1c86 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x1e>
				inputQueue[i] = NULL;
    1c7e:	008a      	lsls	r2, r1, #2
    1c80:	4619      	mov	r1, r3
    1c82:	f020 fb3d 	bl	22300 <memset>
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    1c86:	4a09      	ldr	r2, [pc, #36]	; (1cac <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x44>)
    1c88:	6813      	ldr	r3, [r2, #0]
    1c8a:	b153      	cbz	r3, 1ca2 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x3a>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    1c8c:	461a      	mov	r2, r3
    1c8e:	695b      	ldr	r3, [r3, #20]
    1c90:	2b00      	cmp	r3, #0
    1c92:	d1fb      	bne.n	1c8c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
				p->next_update = this;
    1c94:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
    1c96:	2300      	movs	r3, #0
			cpu_cycles = 0;
			cpu_cycles_max = 0;
			numConnections = 0;
		}
    1c98:	4620      	mov	r0, r4
			next_update = NULL;
    1c9a:	6163      	str	r3, [r4, #20]
			cpu_cycles = 0;
    1c9c:	6063      	str	r3, [r4, #4]
			numConnections = 0;
    1c9e:	72a3      	strb	r3, [r4, #10]
		}
    1ca0:	bd10      	pop	{r4, pc}
				first_update = this;
    1ca2:	6014      	str	r4, [r2, #0]
    1ca4:	e7f7      	b.n	1c96 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
    1ca6:	bf00      	nop
    1ca8:	20003c6c 	.word	0x20003c6c
    1cac:	2000adc4 	.word	0x2000adc4

00001cb0 <AudioAnalyzePeak::AudioAnalyzePeak()>:
		num_inputs(ninput), inputQueue(iqueue) {
    1cb0:	4603      	mov	r3, r0
			destination_list = NULL;
    1cb2:	2200      	movs	r2, #0
			if (first_update == NULL) {
    1cb4:	4911      	ldr	r1, [pc, #68]	; (1cfc <AudioAnalyzePeak::AudioAnalyzePeak()+0x4c>)
#include <AudioStream.h> // github.com/PaulStoffregen/cores/blob/master/teensy4/AudioStream.h

class AudioAnalyzePeak : public AudioStream
{
public:
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
    1cb6:	b410      	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
    1cb8:	4c11      	ldr	r4, [pc, #68]	; (1d00 <AudioAnalyzePeak::AudioAnalyzePeak()+0x50>)
    1cba:	f843 4b18 	str.w	r4, [r3], #24
			active = false;
    1cbe:	f44f 7480 	mov.w	r4, #256	; 0x100
				inputQueue[i] = NULL;
    1cc2:	6182      	str	r2, [r0, #24]
			active = false;
    1cc4:	8104      	strh	r4, [r0, #8]
			destination_list = NULL;
    1cc6:	e9c0 2303 	strd	r2, r3, [r0, #12]
			if (first_update == NULL) {
    1cca:	680b      	ldr	r3, [r1, #0]
    1ccc:	b19b      	cbz	r3, 1cf6 <AudioAnalyzePeak::AudioAnalyzePeak()+0x46>
				for (p=first_update; p->next_update; p = p->next_update) ;
    1cce:	461a      	mov	r2, r3
    1cd0:	695b      	ldr	r3, [r3, #20]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d1fb      	bne.n	1cce <AudioAnalyzePeak::AudioAnalyzePeak()+0x1e>
				p->next_update = this;
    1cd6:	6150      	str	r0, [r2, #20]
			next_update = NULL;
    1cd8:	2300      	movs	r3, #0
    1cda:	4c0a      	ldr	r4, [pc, #40]	; (1d04 <AudioAnalyzePeak::AudioAnalyzePeak()+0x54>)
		min_sample = 32767;
    1cdc:	f647 71ff 	movw	r1, #32767	; 0x7fff
		max_sample = -32768;
    1ce0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
    1ce4:	6004      	str	r4, [r0, #0]
	}
    1ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
    1cea:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    1cec:	6043      	str	r3, [r0, #4]
			numConnections = 0;
    1cee:	7283      	strb	r3, [r0, #10]
		min_sample = 32767;
    1cf0:	83c1      	strh	r1, [r0, #30]
		max_sample = -32768;
    1cf2:	8402      	strh	r2, [r0, #32]
	}
    1cf4:	4770      	bx	lr
				first_update = this;
    1cf6:	6008      	str	r0, [r1, #0]
    1cf8:	e7ee      	b.n	1cd8 <AudioAnalyzePeak::AudioAnalyzePeak()+0x28>
    1cfa:	bf00      	nop
    1cfc:	2000adc4 	.word	0x2000adc4
    1d00:	20003c6c 	.word	0x20003c6c
    1d04:	20003cb4 	.word	0x20003cb4

00001d08 <AudioAnalyzeRMS::AudioAnalyzeRMS()>:
		num_inputs(ninput), inputQueue(iqueue) {
    1d08:	4603      	mov	r3, r0
			destination_list = NULL;
    1d0a:	2200      	movs	r2, #0
			if (first_update == NULL) {
    1d0c:	4914      	ldr	r1, [pc, #80]	; (1d60 <AudioAnalyzeRMS::AudioAnalyzeRMS()+0x58>)
			active = false;
    1d0e:	f44f 7c80 	mov.w	ip, #256	; 0x100
	audio_block_t *inputQueueArray[1];
	int64_t accum;
	uint32_t count;

public:
	AudioAnalyzeRMS(void) : AudioStream(1, inputQueueArray) {
    1d12:	b410      	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
    1d14:	4c13      	ldr	r4, [pc, #76]	; (1d64 <AudioAnalyzeRMS::AudioAnalyzeRMS()+0x5c>)
    1d16:	f843 4b18 	str.w	r4, [r3], #24
			active = false;
    1d1a:	f8a0 c008 	strh.w	ip, [r0, #8]
				inputQueue[i] = NULL;
    1d1e:	6182      	str	r2, [r0, #24]
			destination_list = NULL;
    1d20:	e9c0 2303 	strd	r2, r3, [r0, #12]
			if (first_update == NULL) {
    1d24:	680b      	ldr	r3, [r1, #0]
    1d26:	b193      	cbz	r3, 1d4e <AudioAnalyzeRMS::AudioAnalyzeRMS()+0x46>
				for (p=first_update; p->next_update; p = p->next_update) ;
    1d28:	461a      	mov	r2, r3
    1d2a:	695b      	ldr	r3, [r3, #20]
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d1fb      	bne.n	1d28 <AudioAnalyzeRMS::AudioAnalyzeRMS()+0x20>
				p->next_update = this;
    1d30:	6150      	str	r0, [r2, #20]
			next_update = NULL;
    1d32:	2300      	movs	r3, #0
    1d34:	4a0c      	ldr	r2, [pc, #48]	; (1d68 <AudioAnalyzeRMS::AudioAnalyzeRMS()+0x60>)
		accum = 0;
		count = 0;
	}
    1d36:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d3a:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    1d3c:	6043      	str	r3, [r0, #4]
			numConnections = 0;
    1d3e:	7283      	strb	r3, [r0, #10]
	AudioAnalyzeRMS(void) : AudioStream(1, inputQueueArray) {
    1d40:	6002      	str	r2, [r0, #0]
		count = 0;
    1d42:	6283      	str	r3, [r0, #40]	; 0x28
		accum = 0;
    1d44:	ed9f 7b04 	vldr	d7, [pc, #16]	; 1d58 <AudioAnalyzeRMS::AudioAnalyzeRMS()+0x50>
    1d48:	ed80 7b08 	vstr	d7, [r0, #32]
	}
    1d4c:	4770      	bx	lr
				first_update = this;
    1d4e:	6008      	str	r0, [r1, #0]
    1d50:	e7ef      	b.n	1d32 <AudioAnalyzeRMS::AudioAnalyzeRMS()+0x2a>
    1d52:	bf00      	nop
    1d54:	f3af 8000 	nop.w
	...
    1d60:	2000adc4 	.word	0x2000adc4
    1d64:	20003c6c 	.word	0x20003c6c
    1d68:	20003ca8 	.word	0x20003ca8

00001d6c <AudioEffectDelay::AudioEffectDelay()>:
#endif

class AudioEffectDelay : public AudioStream
{
public:
	AudioEffectDelay() : AudioStream(1, inputQueueArray) {
    1d6c:	b510      	push	{r4, lr}
    1d6e:	f241 53cc 	movw	r3, #5580	; 0x15cc
    1d72:	4604      	mov	r4, r0
		num_inputs(ninput), inputQueue(iqueue) {
    1d74:	4813      	ldr	r0, [pc, #76]	; (1dc4 <AudioEffectDelay::AudioEffectDelay()+0x58>)
			destination_list = NULL;
    1d76:	2200      	movs	r2, #0
    1d78:	4423      	add	r3, r4
			if (first_update == NULL) {
    1d7a:	4913      	ldr	r1, [pc, #76]	; (1dc8 <AudioEffectDelay::AudioEffectDelay()+0x5c>)
		num_inputs(ninput), inputQueue(iqueue) {
    1d7c:	6020      	str	r0, [r4, #0]
			active = false;
    1d7e:	f44f 7080 	mov.w	r0, #256	; 0x100
		num_inputs(ninput), inputQueue(iqueue) {
    1d82:	e9c4 2303 	strd	r2, r3, [r4, #12]
			active = false;
    1d86:	8120      	strh	r0, [r4, #8]
				inputQueue[i] = NULL;
    1d88:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
			if (first_update == NULL) {
    1d8c:	680b      	ldr	r3, [r1, #0]
				inputQueue[i] = NULL;
    1d8e:	f8c0 25cc 	str.w	r2, [r0, #1484]	; 0x5cc
			if (first_update == NULL) {
    1d92:	b1ab      	cbz	r3, 1dc0 <AudioEffectDelay::AudioEffectDelay()+0x54>
				for (p=first_update; p->next_update; p = p->next_update) ;
    1d94:	461a      	mov	r2, r3
    1d96:	695b      	ldr	r3, [r3, #20]
    1d98:	2b00      	cmp	r3, #0
    1d9a:	d1fb      	bne.n	1d94 <AudioEffectDelay::AudioEffectDelay()+0x28>
				p->next_update = this;
    1d9c:	6154      	str	r4, [r2, #20]
			next_update = NULL;
    1d9e:	2100      	movs	r1, #0
    1da0:	4b0a      	ldr	r3, [pc, #40]	; (1dcc <AudioEffectDelay::AudioEffectDelay()+0x60>)
		activemask = 0;
		headindex = 0;
		tailindex = 0;
		maxblocks = 0;
		memset(queue, 0, sizeof(queue));
    1da2:	f241 528c 	movw	r2, #5516	; 0x158c
    1da6:	f104 0040 	add.w	r0, r4, #64	; 0x40
    1daa:	6161      	str	r1, [r4, #20]
			cpu_cycles = 0;
    1dac:	6061      	str	r1, [r4, #4]
			numConnections = 0;
    1dae:	72a1      	strb	r1, [r4, #10]
	AudioEffectDelay() : AudioStream(1, inputQueueArray) {
    1db0:	6023      	str	r3, [r4, #0]
		activemask = 0;
    1db2:	7621      	strb	r1, [r4, #24]
		headindex = 0;
    1db4:	8361      	strh	r1, [r4, #26]
		tailindex = 0;
    1db6:	61e1      	str	r1, [r4, #28]
		memset(queue, 0, sizeof(queue));
    1db8:	f020 faa2 	bl	22300 <memset>
	}
    1dbc:	4620      	mov	r0, r4
    1dbe:	bd10      	pop	{r4, pc}
				first_update = this;
    1dc0:	600c      	str	r4, [r1, #0]
    1dc2:	e7ec      	b.n	1d9e <AudioEffectDelay::AudioEffectDelay()+0x32>
    1dc4:	20003c6c 	.word	0x20003c6c
    1dc8:	2000adc4 	.word	0x2000adc4
    1dcc:	20003cc0 	.word	0x20003cc0

00001dd0 <AudioMixer4::AudioMixer4()>:
			destination_list = NULL;
    1dd0:	2200      	movs	r2, #0
		num_inputs(ninput), inputQueue(iqueue) {
    1dd2:	4603      	mov	r3, r0
			if (first_update == NULL) {
    1dd4:	4913      	ldr	r1, [pc, #76]	; (1e24 <AudioMixer4::AudioMixer4()+0x54>)
			active = false;
    1dd6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    1dda:	b410      	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
    1ddc:	4c12      	ldr	r4, [pc, #72]	; (1e28 <AudioMixer4::AudioMixer4()+0x58>)
    1dde:	f843 4b28 	str.w	r4, [r3], #40
			active = false;
    1de2:	f8a0 c008 	strh.w	ip, [r0, #8]
			destination_list = NULL;
    1de6:	e9c0 2303 	strd	r2, r3, [r0, #12]
			if (first_update == NULL) {
    1dea:	680b      	ldr	r3, [r1, #0]
				inputQueue[i] = NULL;
    1dec:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
    1df0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
			if (first_update == NULL) {
    1df4:	b19b      	cbz	r3, 1e1e <AudioMixer4::AudioMixer4()+0x4e>
				for (p=first_update; p->next_update; p = p->next_update) ;
    1df6:	461a      	mov	r2, r3
    1df8:	695b      	ldr	r3, [r3, #20]
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d1fb      	bne.n	1df6 <AudioMixer4::AudioMixer4()+0x26>
				p->next_update = this;
    1dfe:	6150      	str	r0, [r2, #20]
			next_update = NULL;
    1e00:	2200      	movs	r2, #0
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    1e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    1e06:	4909      	ldr	r1, [pc, #36]	; (1e2c <AudioMixer4::AudioMixer4()+0x5c>)
	}
    1e08:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e0c:	6142      	str	r2, [r0, #20]
			cpu_cycles = 0;
    1e0e:	6042      	str	r2, [r0, #4]
			numConnections = 0;
    1e10:	7282      	strb	r2, [r0, #10]
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    1e12:	6001      	str	r1, [r0, #0]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    1e14:	e9c0 3306 	strd	r3, r3, [r0, #24]
    1e18:	e9c0 3308 	strd	r3, r3, [r0, #32]
	}
    1e1c:	4770      	bx	lr
				first_update = this;
    1e1e:	6008      	str	r0, [r1, #0]
    1e20:	e7ee      	b.n	1e00 <AudioMixer4::AudioMixer4()+0x30>
    1e22:	bf00      	nop
    1e24:	2000adc4 	.word	0x2000adc4
    1e28:	20003c6c 	.word	0x20003c6c
    1e2c:	20003c60 	.word	0x20003c60

00001e30 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)>:
	static uint8_t attach_interrupt(uint8_t pin, Encoder_internal_state_t *state) {
    1e30:	460b      	mov	r3, r1
    1e32:	b510      	push	{r4, lr}
		switch (pin) {
    1e34:	2836      	cmp	r0, #54	; 0x36
    1e36:	f200 8297 	bhi.w	2368 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x538>
    1e3a:	e8df f010 	tbh	[pc, r0, lsl #1]
    1e3e:	028c      	.short	0x028c
    1e40:	02790282 	.word	0x02790282
    1e44:	02670270 	.word	0x02670270
    1e48:	0255025e 	.word	0x0255025e
    1e4c:	0243024c 	.word	0x0243024c
    1e50:	0231023a 	.word	0x0231023a
    1e54:	021f0228 	.word	0x021f0228
    1e58:	01b601bf 	.word	0x01b601bf
    1e5c:	01a401ad 	.word	0x01a401ad
    1e60:	0192019b 	.word	0x0192019b
    1e64:	01800189 	.word	0x01800189
    1e68:	016e0177 	.word	0x016e0177
    1e6c:	015c0165 	.word	0x015c0165
    1e70:	014a0153 	.word	0x014a0153
    1e74:	01380141 	.word	0x01380141
    1e78:	0126012f 	.word	0x0126012f
    1e7c:	0113011d 	.word	0x0113011d
    1e80:	00ff0109 	.word	0x00ff0109
    1e84:	00eb00f5 	.word	0x00eb00f5
    1e88:	00d700e1 	.word	0x00d700e1
    1e8c:	00c300cd 	.word	0x00c300cd
    1e90:	00af00b9 	.word	0x00af00b9
    1e94:	009b00a5 	.word	0x009b00a5
    1e98:	00870091 	.word	0x00870091
    1e9c:	0073007d 	.word	0x0073007d
    1ea0:	005f0069 	.word	0x005f0069
    1ea4:	004b0055 	.word	0x004b0055
    1ea8:	00370041 	.word	0x00370041
				interruptArgs[54] = state;
    1eac:	4cc8      	ldr	r4, [pc, #800]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(54, isr54, CHANGE);
    1eae:	2204      	movs	r2, #4
    1eb0:	49c8      	ldr	r1, [pc, #800]	; (21d4 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a4>)
    1eb2:	2036      	movs	r0, #54	; 0x36
				interruptArgs[54] = state;
    1eb4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
				attachInterrupt(54, isr54, CHANGE);
    1eb8:	f019 fe2c 	bl	1bb14 <attachInterrupt>
		return 1;
    1ebc:	2001      	movs	r0, #1
	}
    1ebe:	bd10      	pop	{r4, pc}
				interruptArgs[53] = state;
    1ec0:	4cc3      	ldr	r4, [pc, #780]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(53, isr53, CHANGE);
    1ec2:	2204      	movs	r2, #4
    1ec4:	49c4      	ldr	r1, [pc, #784]	; (21d8 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a8>)
    1ec6:	2035      	movs	r0, #53	; 0x35
				interruptArgs[53] = state;
    1ec8:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
				attachInterrupt(53, isr53, CHANGE);
    1ecc:	f019 fe22 	bl	1bb14 <attachInterrupt>
		return 1;
    1ed0:	2001      	movs	r0, #1
	}
    1ed2:	bd10      	pop	{r4, pc}
				interruptArgs[52] = state;
    1ed4:	4cbe      	ldr	r4, [pc, #760]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(52, isr52, CHANGE);
    1ed6:	2204      	movs	r2, #4
    1ed8:	49c0      	ldr	r1, [pc, #768]	; (21dc <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3ac>)
    1eda:	2034      	movs	r0, #52	; 0x34
				interruptArgs[52] = state;
    1edc:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
				attachInterrupt(52, isr52, CHANGE);
    1ee0:	f019 fe18 	bl	1bb14 <attachInterrupt>
		return 1;
    1ee4:	2001      	movs	r0, #1
	}
    1ee6:	bd10      	pop	{r4, pc}
				interruptArgs[51] = state;
    1ee8:	4cb9      	ldr	r4, [pc, #740]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(51, isr51, CHANGE);
    1eea:	2204      	movs	r2, #4
    1eec:	49bc      	ldr	r1, [pc, #752]	; (21e0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b0>)
    1eee:	2033      	movs	r0, #51	; 0x33
				interruptArgs[51] = state;
    1ef0:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
				attachInterrupt(51, isr51, CHANGE);
    1ef4:	f019 fe0e 	bl	1bb14 <attachInterrupt>
		return 1;
    1ef8:	2001      	movs	r0, #1
	}
    1efa:	bd10      	pop	{r4, pc}
				interruptArgs[50] = state;
    1efc:	4cb4      	ldr	r4, [pc, #720]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(50, isr50, CHANGE);
    1efe:	2204      	movs	r2, #4
    1f00:	49b8      	ldr	r1, [pc, #736]	; (21e4 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b4>)
    1f02:	2032      	movs	r0, #50	; 0x32
				interruptArgs[50] = state;
    1f04:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
				attachInterrupt(50, isr50, CHANGE);
    1f08:	f019 fe04 	bl	1bb14 <attachInterrupt>
		return 1;
    1f0c:	2001      	movs	r0, #1
	}
    1f0e:	bd10      	pop	{r4, pc}
				interruptArgs[49] = state;
    1f10:	4caf      	ldr	r4, [pc, #700]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(49, isr49, CHANGE);
    1f12:	2204      	movs	r2, #4
    1f14:	49b4      	ldr	r1, [pc, #720]	; (21e8 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b8>)
    1f16:	2031      	movs	r0, #49	; 0x31
				interruptArgs[49] = state;
    1f18:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
				attachInterrupt(49, isr49, CHANGE);
    1f1c:	f019 fdfa 	bl	1bb14 <attachInterrupt>
		return 1;
    1f20:	2001      	movs	r0, #1
	}
    1f22:	bd10      	pop	{r4, pc}
				interruptArgs[48] = state;
    1f24:	4caa      	ldr	r4, [pc, #680]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(48, isr48, CHANGE);
    1f26:	2204      	movs	r2, #4
    1f28:	49b0      	ldr	r1, [pc, #704]	; (21ec <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3bc>)
    1f2a:	2030      	movs	r0, #48	; 0x30
				interruptArgs[48] = state;
    1f2c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
				attachInterrupt(48, isr48, CHANGE);
    1f30:	f019 fdf0 	bl	1bb14 <attachInterrupt>
		return 1;
    1f34:	2001      	movs	r0, #1
	}
    1f36:	bd10      	pop	{r4, pc}
				interruptArgs[47] = state;
    1f38:	4ca5      	ldr	r4, [pc, #660]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(47, isr47, CHANGE);
    1f3a:	2204      	movs	r2, #4
    1f3c:	49ac      	ldr	r1, [pc, #688]	; (21f0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c0>)
    1f3e:	202f      	movs	r0, #47	; 0x2f
				interruptArgs[47] = state;
    1f40:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
				attachInterrupt(47, isr47, CHANGE);
    1f44:	f019 fde6 	bl	1bb14 <attachInterrupt>
		return 1;
    1f48:	2001      	movs	r0, #1
	}
    1f4a:	bd10      	pop	{r4, pc}
				interruptArgs[46] = state;
    1f4c:	4ca0      	ldr	r4, [pc, #640]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(46, isr46, CHANGE);
    1f4e:	2204      	movs	r2, #4
    1f50:	49a8      	ldr	r1, [pc, #672]	; (21f4 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c4>)
    1f52:	202e      	movs	r0, #46	; 0x2e
				interruptArgs[46] = state;
    1f54:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
				attachInterrupt(46, isr46, CHANGE);
    1f58:	f019 fddc 	bl	1bb14 <attachInterrupt>
		return 1;
    1f5c:	2001      	movs	r0, #1
	}
    1f5e:	bd10      	pop	{r4, pc}
				interruptArgs[45] = state;
    1f60:	4c9b      	ldr	r4, [pc, #620]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(45, isr45, CHANGE);
    1f62:	2204      	movs	r2, #4
    1f64:	49a4      	ldr	r1, [pc, #656]	; (21f8 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c8>)
    1f66:	202d      	movs	r0, #45	; 0x2d
				interruptArgs[45] = state;
    1f68:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
				attachInterrupt(45, isr45, CHANGE);
    1f6c:	f019 fdd2 	bl	1bb14 <attachInterrupt>
		return 1;
    1f70:	2001      	movs	r0, #1
	}
    1f72:	bd10      	pop	{r4, pc}
				interruptArgs[44] = state;
    1f74:	4c96      	ldr	r4, [pc, #600]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(44, isr44, CHANGE);
    1f76:	2204      	movs	r2, #4
    1f78:	49a0      	ldr	r1, [pc, #640]	; (21fc <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3cc>)
    1f7a:	202c      	movs	r0, #44	; 0x2c
				interruptArgs[44] = state;
    1f7c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
				attachInterrupt(44, isr44, CHANGE);
    1f80:	f019 fdc8 	bl	1bb14 <attachInterrupt>
		return 1;
    1f84:	2001      	movs	r0, #1
	}
    1f86:	bd10      	pop	{r4, pc}
				interruptArgs[43] = state;
    1f88:	4c91      	ldr	r4, [pc, #580]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(43, isr43, CHANGE);
    1f8a:	2204      	movs	r2, #4
    1f8c:	499c      	ldr	r1, [pc, #624]	; (2200 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d0>)
    1f8e:	202b      	movs	r0, #43	; 0x2b
				interruptArgs[43] = state;
    1f90:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
				attachInterrupt(43, isr43, CHANGE);
    1f94:	f019 fdbe 	bl	1bb14 <attachInterrupt>
		return 1;
    1f98:	2001      	movs	r0, #1
	}
    1f9a:	bd10      	pop	{r4, pc}
				interruptArgs[42] = state;
    1f9c:	4c8c      	ldr	r4, [pc, #560]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(42, isr42, CHANGE);
    1f9e:	2204      	movs	r2, #4
    1fa0:	4998      	ldr	r1, [pc, #608]	; (2204 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d4>)
    1fa2:	202a      	movs	r0, #42	; 0x2a
				interruptArgs[42] = state;
    1fa4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
				attachInterrupt(42, isr42, CHANGE);
    1fa8:	f019 fdb4 	bl	1bb14 <attachInterrupt>
		return 1;
    1fac:	2001      	movs	r0, #1
	}
    1fae:	bd10      	pop	{r4, pc}
				interruptArgs[41] = state;
    1fb0:	4c87      	ldr	r4, [pc, #540]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(41, isr41, CHANGE);
    1fb2:	2204      	movs	r2, #4
    1fb4:	4994      	ldr	r1, [pc, #592]	; (2208 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d8>)
    1fb6:	2029      	movs	r0, #41	; 0x29
				interruptArgs[41] = state;
    1fb8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
				attachInterrupt(41, isr41, CHANGE);
    1fbc:	f019 fdaa 	bl	1bb14 <attachInterrupt>
		return 1;
    1fc0:	2001      	movs	r0, #1
	}
    1fc2:	bd10      	pop	{r4, pc}
				interruptArgs[40] = state;
    1fc4:	4c82      	ldr	r4, [pc, #520]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(40, isr40, CHANGE);
    1fc6:	2204      	movs	r2, #4
    1fc8:	4990      	ldr	r1, [pc, #576]	; (220c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3dc>)
    1fca:	2028      	movs	r0, #40	; 0x28
				interruptArgs[40] = state;
    1fcc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
				attachInterrupt(40, isr40, CHANGE);
    1fd0:	f019 fda0 	bl	1bb14 <attachInterrupt>
		return 1;
    1fd4:	2001      	movs	r0, #1
	}
    1fd6:	bd10      	pop	{r4, pc}
				interruptArgs[39] = state;
    1fd8:	4c7d      	ldr	r4, [pc, #500]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(39, isr39, CHANGE);
    1fda:	2204      	movs	r2, #4
    1fdc:	498c      	ldr	r1, [pc, #560]	; (2210 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3e0>)
    1fde:	2027      	movs	r0, #39	; 0x27
				interruptArgs[39] = state;
    1fe0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
				attachInterrupt(39, isr39, CHANGE);
    1fe4:	f019 fd96 	bl	1bb14 <attachInterrupt>
		return 1;
    1fe8:	2001      	movs	r0, #1
	}
    1fea:	bd10      	pop	{r4, pc}
				interruptArgs[38] = state;
    1fec:	4c78      	ldr	r4, [pc, #480]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(38, isr38, CHANGE);
    1fee:	2204      	movs	r2, #4
    1ff0:	4988      	ldr	r1, [pc, #544]	; (2214 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3e4>)
    1ff2:	2026      	movs	r0, #38	; 0x26
				interruptArgs[38] = state;
    1ff4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
				attachInterrupt(38, isr38, CHANGE);
    1ff8:	f019 fd8c 	bl	1bb14 <attachInterrupt>
		return 1;
    1ffc:	2001      	movs	r0, #1
	}
    1ffe:	bd10      	pop	{r4, pc}
				interruptArgs[37] = state;
    2000:	4c73      	ldr	r4, [pc, #460]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(37, isr37, CHANGE);
    2002:	2204      	movs	r2, #4
    2004:	4984      	ldr	r1, [pc, #528]	; (2218 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3e8>)
    2006:	2025      	movs	r0, #37	; 0x25
				interruptArgs[37] = state;
    2008:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
				attachInterrupt(37, isr37, CHANGE);
    200c:	f019 fd82 	bl	1bb14 <attachInterrupt>
		return 1;
    2010:	2001      	movs	r0, #1
	}
    2012:	bd10      	pop	{r4, pc}
				interruptArgs[36] = state;
    2014:	4c6e      	ldr	r4, [pc, #440]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(36, isr36, CHANGE);
    2016:	2204      	movs	r2, #4
    2018:	4980      	ldr	r1, [pc, #512]	; (221c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3ec>)
    201a:	2024      	movs	r0, #36	; 0x24
				interruptArgs[36] = state;
    201c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
				attachInterrupt(36, isr36, CHANGE);
    2020:	f019 fd78 	bl	1bb14 <attachInterrupt>
		return 1;
    2024:	2001      	movs	r0, #1
	}
    2026:	bd10      	pop	{r4, pc}
				interruptArgs[35] = state;
    2028:	4c69      	ldr	r4, [pc, #420]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(35, isr35, CHANGE);
    202a:	2204      	movs	r2, #4
    202c:	497c      	ldr	r1, [pc, #496]	; (2220 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3f0>)
    202e:	2023      	movs	r0, #35	; 0x23
				interruptArgs[35] = state;
    2030:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
				attachInterrupt(35, isr35, CHANGE);
    2034:	f019 fd6e 	bl	1bb14 <attachInterrupt>
		return 1;
    2038:	2001      	movs	r0, #1
	}
    203a:	bd10      	pop	{r4, pc}
				interruptArgs[34] = state;
    203c:	4c64      	ldr	r4, [pc, #400]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(34, isr34, CHANGE);
    203e:	2204      	movs	r2, #4
    2040:	4978      	ldr	r1, [pc, #480]	; (2224 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3f4>)
    2042:	2022      	movs	r0, #34	; 0x22
				interruptArgs[34] = state;
    2044:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				attachInterrupt(34, isr34, CHANGE);
    2048:	f019 fd64 	bl	1bb14 <attachInterrupt>
		return 1;
    204c:	2001      	movs	r0, #1
	}
    204e:	bd10      	pop	{r4, pc}
				interruptArgs[33] = state;
    2050:	4c5f      	ldr	r4, [pc, #380]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(33, isr33, CHANGE);
    2052:	2204      	movs	r2, #4
    2054:	4974      	ldr	r1, [pc, #464]	; (2228 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3f8>)
    2056:	2021      	movs	r0, #33	; 0x21
				interruptArgs[33] = state;
    2058:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				attachInterrupt(33, isr33, CHANGE);
    205c:	f019 fd5a 	bl	1bb14 <attachInterrupt>
		return 1;
    2060:	2001      	movs	r0, #1
	}
    2062:	bd10      	pop	{r4, pc}
				interruptArgs[32] = state;
    2064:	4c5a      	ldr	r4, [pc, #360]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(32, isr32, CHANGE);
    2066:	2204      	movs	r2, #4
    2068:	4970      	ldr	r1, [pc, #448]	; (222c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3fc>)
    206a:	2020      	movs	r0, #32
				interruptArgs[32] = state;
    206c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				attachInterrupt(32, isr32, CHANGE);
    2070:	f019 fd50 	bl	1bb14 <attachInterrupt>
		return 1;
    2074:	2001      	movs	r0, #1
	}
    2076:	bd10      	pop	{r4, pc}
				interruptArgs[31] = state;
    2078:	4c55      	ldr	r4, [pc, #340]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(31, isr31, CHANGE);
    207a:	2204      	movs	r2, #4
    207c:	496c      	ldr	r1, [pc, #432]	; (2230 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x400>)
    207e:	201f      	movs	r0, #31
				interruptArgs[31] = state;
    2080:	67e3      	str	r3, [r4, #124]	; 0x7c
				attachInterrupt(31, isr31, CHANGE);
    2082:	f019 fd47 	bl	1bb14 <attachInterrupt>
		return 1;
    2086:	2001      	movs	r0, #1
	}
    2088:	bd10      	pop	{r4, pc}
				interruptArgs[30] = state;
    208a:	4c51      	ldr	r4, [pc, #324]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(30, isr30, CHANGE);
    208c:	2204      	movs	r2, #4
    208e:	4969      	ldr	r1, [pc, #420]	; (2234 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x404>)
    2090:	201e      	movs	r0, #30
				interruptArgs[30] = state;
    2092:	67a3      	str	r3, [r4, #120]	; 0x78
				attachInterrupt(30, isr30, CHANGE);
    2094:	f019 fd3e 	bl	1bb14 <attachInterrupt>
		return 1;
    2098:	2001      	movs	r0, #1
	}
    209a:	bd10      	pop	{r4, pc}
				interruptArgs[29] = state;
    209c:	4c4c      	ldr	r4, [pc, #304]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(29, isr29, CHANGE);
    209e:	2204      	movs	r2, #4
    20a0:	4965      	ldr	r1, [pc, #404]	; (2238 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x408>)
    20a2:	201d      	movs	r0, #29
				interruptArgs[29] = state;
    20a4:	6763      	str	r3, [r4, #116]	; 0x74
				attachInterrupt(29, isr29, CHANGE);
    20a6:	f019 fd35 	bl	1bb14 <attachInterrupt>
		return 1;
    20aa:	2001      	movs	r0, #1
	}
    20ac:	bd10      	pop	{r4, pc}
				interruptArgs[28] = state;
    20ae:	4c48      	ldr	r4, [pc, #288]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(28, isr28, CHANGE);
    20b0:	2204      	movs	r2, #4
    20b2:	4962      	ldr	r1, [pc, #392]	; (223c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x40c>)
    20b4:	201c      	movs	r0, #28
				interruptArgs[28] = state;
    20b6:	6723      	str	r3, [r4, #112]	; 0x70
				attachInterrupt(28, isr28, CHANGE);
    20b8:	f019 fd2c 	bl	1bb14 <attachInterrupt>
		return 1;
    20bc:	2001      	movs	r0, #1
	}
    20be:	bd10      	pop	{r4, pc}
				interruptArgs[27] = state;
    20c0:	4c43      	ldr	r4, [pc, #268]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(27, isr27, CHANGE);
    20c2:	2204      	movs	r2, #4
    20c4:	495e      	ldr	r1, [pc, #376]	; (2240 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x410>)
    20c6:	201b      	movs	r0, #27
				interruptArgs[27] = state;
    20c8:	66e3      	str	r3, [r4, #108]	; 0x6c
				attachInterrupt(27, isr27, CHANGE);
    20ca:	f019 fd23 	bl	1bb14 <attachInterrupt>
		return 1;
    20ce:	2001      	movs	r0, #1
	}
    20d0:	bd10      	pop	{r4, pc}
				interruptArgs[26] = state;
    20d2:	4c3f      	ldr	r4, [pc, #252]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(26, isr26, CHANGE);
    20d4:	2204      	movs	r2, #4
    20d6:	495b      	ldr	r1, [pc, #364]	; (2244 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x414>)
    20d8:	201a      	movs	r0, #26
				interruptArgs[26] = state;
    20da:	66a3      	str	r3, [r4, #104]	; 0x68
				attachInterrupt(26, isr26, CHANGE);
    20dc:	f019 fd1a 	bl	1bb14 <attachInterrupt>
		return 1;
    20e0:	2001      	movs	r0, #1
	}
    20e2:	bd10      	pop	{r4, pc}
				interruptArgs[25] = state;
    20e4:	4c3a      	ldr	r4, [pc, #232]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(25, isr25, CHANGE);
    20e6:	2204      	movs	r2, #4
    20e8:	4957      	ldr	r1, [pc, #348]	; (2248 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x418>)
    20ea:	2019      	movs	r0, #25
				interruptArgs[25] = state;
    20ec:	6663      	str	r3, [r4, #100]	; 0x64
				attachInterrupt(25, isr25, CHANGE);
    20ee:	f019 fd11 	bl	1bb14 <attachInterrupt>
		return 1;
    20f2:	2001      	movs	r0, #1
	}
    20f4:	bd10      	pop	{r4, pc}
				interruptArgs[24] = state;
    20f6:	4c36      	ldr	r4, [pc, #216]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(24, isr24, CHANGE);
    20f8:	2204      	movs	r2, #4
    20fa:	4954      	ldr	r1, [pc, #336]	; (224c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x41c>)
    20fc:	2018      	movs	r0, #24
				interruptArgs[24] = state;
    20fe:	6623      	str	r3, [r4, #96]	; 0x60
				attachInterrupt(24, isr24, CHANGE);
    2100:	f019 fd08 	bl	1bb14 <attachInterrupt>
		return 1;
    2104:	2001      	movs	r0, #1
	}
    2106:	bd10      	pop	{r4, pc}
				interruptArgs[23] = state;
    2108:	4c31      	ldr	r4, [pc, #196]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(23, isr23, CHANGE);
    210a:	2204      	movs	r2, #4
    210c:	4950      	ldr	r1, [pc, #320]	; (2250 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x420>)
    210e:	2017      	movs	r0, #23
				interruptArgs[23] = state;
    2110:	65e3      	str	r3, [r4, #92]	; 0x5c
				attachInterrupt(23, isr23, CHANGE);
    2112:	f019 fcff 	bl	1bb14 <attachInterrupt>
		return 1;
    2116:	2001      	movs	r0, #1
	}
    2118:	bd10      	pop	{r4, pc}
				interruptArgs[22] = state;
    211a:	4c2d      	ldr	r4, [pc, #180]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(22, isr22, CHANGE);
    211c:	2204      	movs	r2, #4
    211e:	494d      	ldr	r1, [pc, #308]	; (2254 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x424>)
    2120:	2016      	movs	r0, #22
				interruptArgs[22] = state;
    2122:	65a3      	str	r3, [r4, #88]	; 0x58
				attachInterrupt(22, isr22, CHANGE);
    2124:	f019 fcf6 	bl	1bb14 <attachInterrupt>
		return 1;
    2128:	2001      	movs	r0, #1
	}
    212a:	bd10      	pop	{r4, pc}
				interruptArgs[21] = state;
    212c:	4c28      	ldr	r4, [pc, #160]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(21, isr21, CHANGE);
    212e:	2204      	movs	r2, #4
    2130:	4949      	ldr	r1, [pc, #292]	; (2258 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x428>)
    2132:	2015      	movs	r0, #21
				interruptArgs[21] = state;
    2134:	6563      	str	r3, [r4, #84]	; 0x54
				attachInterrupt(21, isr21, CHANGE);
    2136:	f019 fced 	bl	1bb14 <attachInterrupt>
		return 1;
    213a:	2001      	movs	r0, #1
	}
    213c:	bd10      	pop	{r4, pc}
				interruptArgs[20] = state;
    213e:	4c24      	ldr	r4, [pc, #144]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(20, isr20, CHANGE);
    2140:	2204      	movs	r2, #4
    2142:	4946      	ldr	r1, [pc, #280]	; (225c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x42c>)
    2144:	2014      	movs	r0, #20
				interruptArgs[20] = state;
    2146:	6523      	str	r3, [r4, #80]	; 0x50
				attachInterrupt(20, isr20, CHANGE);
    2148:	f019 fce4 	bl	1bb14 <attachInterrupt>
		return 1;
    214c:	2001      	movs	r0, #1
	}
    214e:	bd10      	pop	{r4, pc}
				interruptArgs[19] = state;
    2150:	4c1f      	ldr	r4, [pc, #124]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(19, isr19, CHANGE);
    2152:	2204      	movs	r2, #4
    2154:	4942      	ldr	r1, [pc, #264]	; (2260 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x430>)
    2156:	2013      	movs	r0, #19
				interruptArgs[19] = state;
    2158:	64e3      	str	r3, [r4, #76]	; 0x4c
				attachInterrupt(19, isr19, CHANGE);
    215a:	f019 fcdb 	bl	1bb14 <attachInterrupt>
		return 1;
    215e:	2001      	movs	r0, #1
	}
    2160:	bd10      	pop	{r4, pc}
				interruptArgs[18] = state;
    2162:	4c1b      	ldr	r4, [pc, #108]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(18, isr18, CHANGE);
    2164:	2204      	movs	r2, #4
    2166:	493f      	ldr	r1, [pc, #252]	; (2264 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x434>)
    2168:	2012      	movs	r0, #18
				interruptArgs[18] = state;
    216a:	64a3      	str	r3, [r4, #72]	; 0x48
				attachInterrupt(18, isr18, CHANGE);
    216c:	f019 fcd2 	bl	1bb14 <attachInterrupt>
		return 1;
    2170:	2001      	movs	r0, #1
	}
    2172:	bd10      	pop	{r4, pc}
				interruptArgs[17] = state;
    2174:	4c16      	ldr	r4, [pc, #88]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(17, isr17, CHANGE);
    2176:	2204      	movs	r2, #4
    2178:	493b      	ldr	r1, [pc, #236]	; (2268 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x438>)
    217a:	2011      	movs	r0, #17
				interruptArgs[17] = state;
    217c:	6463      	str	r3, [r4, #68]	; 0x44
				attachInterrupt(17, isr17, CHANGE);
    217e:	f019 fcc9 	bl	1bb14 <attachInterrupt>
		return 1;
    2182:	2001      	movs	r0, #1
	}
    2184:	bd10      	pop	{r4, pc}
				interruptArgs[16] = state;
    2186:	4c12      	ldr	r4, [pc, #72]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(16, isr16, CHANGE);
    2188:	2204      	movs	r2, #4
    218a:	4938      	ldr	r1, [pc, #224]	; (226c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x43c>)
    218c:	2010      	movs	r0, #16
				interruptArgs[16] = state;
    218e:	6423      	str	r3, [r4, #64]	; 0x40
				attachInterrupt(16, isr16, CHANGE);
    2190:	f019 fcc0 	bl	1bb14 <attachInterrupt>
		return 1;
    2194:	2001      	movs	r0, #1
	}
    2196:	bd10      	pop	{r4, pc}
				interruptArgs[15] = state;
    2198:	4c0d      	ldr	r4, [pc, #52]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(15, isr15, CHANGE);
    219a:	2204      	movs	r2, #4
    219c:	4934      	ldr	r1, [pc, #208]	; (2270 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x440>)
    219e:	200f      	movs	r0, #15
				interruptArgs[15] = state;
    21a0:	63e3      	str	r3, [r4, #60]	; 0x3c
				attachInterrupt(15, isr15, CHANGE);
    21a2:	f019 fcb7 	bl	1bb14 <attachInterrupt>
		return 1;
    21a6:	2001      	movs	r0, #1
	}
    21a8:	bd10      	pop	{r4, pc}
				interruptArgs[14] = state;
    21aa:	4c09      	ldr	r4, [pc, #36]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(14, isr14, CHANGE);
    21ac:	2204      	movs	r2, #4
    21ae:	4931      	ldr	r1, [pc, #196]	; (2274 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x444>)
    21b0:	200e      	movs	r0, #14
				interruptArgs[14] = state;
    21b2:	63a3      	str	r3, [r4, #56]	; 0x38
				attachInterrupt(14, isr14, CHANGE);
    21b4:	f019 fcae 	bl	1bb14 <attachInterrupt>
		return 1;
    21b8:	2001      	movs	r0, #1
	}
    21ba:	bd10      	pop	{r4, pc}
				interruptArgs[13] = state;
    21bc:	4c04      	ldr	r4, [pc, #16]	; (21d0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(13, isr13, CHANGE);
    21be:	2204      	movs	r2, #4
    21c0:	492d      	ldr	r1, [pc, #180]	; (2278 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x448>)
    21c2:	200d      	movs	r0, #13
				interruptArgs[13] = state;
    21c4:	6363      	str	r3, [r4, #52]	; 0x34
				attachInterrupt(13, isr13, CHANGE);
    21c6:	f019 fca5 	bl	1bb14 <attachInterrupt>
		return 1;
    21ca:	2001      	movs	r0, #1
	}
    21cc:	bd10      	pop	{r4, pc}
    21ce:	bf00      	nop
    21d0:	2000af60 	.word	0x2000af60
    21d4:	00000a1d 	.word	0x00000a1d
    21d8:	000009a1 	.word	0x000009a1
    21dc:	00001bc9 	.word	0x00001bc9
    21e0:	00001b4d 	.word	0x00001b4d
    21e4:	00001ad1 	.word	0x00001ad1
    21e8:	00001a55 	.word	0x00001a55
    21ec:	000019d9 	.word	0x000019d9
    21f0:	0000195d 	.word	0x0000195d
    21f4:	000018e1 	.word	0x000018e1
    21f8:	00001865 	.word	0x00001865
    21fc:	000017e9 	.word	0x000017e9
    2200:	0000176d 	.word	0x0000176d
    2204:	000016f1 	.word	0x000016f1
    2208:	00001675 	.word	0x00001675
    220c:	000015f9 	.word	0x000015f9
    2210:	0000157d 	.word	0x0000157d
    2214:	00001501 	.word	0x00001501
    2218:	00001485 	.word	0x00001485
    221c:	00001409 	.word	0x00001409
    2220:	0000138d 	.word	0x0000138d
    2224:	00001311 	.word	0x00001311
    2228:	00001295 	.word	0x00001295
    222c:	00001219 	.word	0x00001219
    2230:	000011a1 	.word	0x000011a1
    2234:	00001129 	.word	0x00001129
    2238:	000010b1 	.word	0x000010b1
    223c:	00001039 	.word	0x00001039
    2240:	00000fc1 	.word	0x00000fc1
    2244:	00000f49 	.word	0x00000f49
    2248:	00000ed1 	.word	0x00000ed1
    224c:	00000e59 	.word	0x00000e59
    2250:	00000de1 	.word	0x00000de1
    2254:	00000d69 	.word	0x00000d69
    2258:	00000cf1 	.word	0x00000cf1
    225c:	00000929 	.word	0x00000929
    2260:	000008b1 	.word	0x000008b1
    2264:	00000839 	.word	0x00000839
    2268:	000007c1 	.word	0x000007c1
    226c:	00000749 	.word	0x00000749
    2270:	000006d1 	.word	0x000006d1
    2274:	00000659 	.word	0x00000659
    2278:	000005e1 	.word	0x000005e1
				interruptArgs[12] = state;
    227c:	4c3b      	ldr	r4, [pc, #236]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(12, isr12, CHANGE);
    227e:	2204      	movs	r2, #4
    2280:	493b      	ldr	r1, [pc, #236]	; (2370 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x540>)
    2282:	200c      	movs	r0, #12
				interruptArgs[12] = state;
    2284:	6323      	str	r3, [r4, #48]	; 0x30
				attachInterrupt(12, isr12, CHANGE);
    2286:	f019 fc45 	bl	1bb14 <attachInterrupt>
		return 1;
    228a:	2001      	movs	r0, #1
	}
    228c:	bd10      	pop	{r4, pc}
				interruptArgs[11] = state;
    228e:	4c37      	ldr	r4, [pc, #220]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(11, isr11, CHANGE);
    2290:	2204      	movs	r2, #4
    2292:	4938      	ldr	r1, [pc, #224]	; (2374 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x544>)
    2294:	200b      	movs	r0, #11
				interruptArgs[11] = state;
    2296:	62e3      	str	r3, [r4, #44]	; 0x2c
				attachInterrupt(11, isr11, CHANGE);
    2298:	f019 fc3c 	bl	1bb14 <attachInterrupt>
		return 1;
    229c:	2001      	movs	r0, #1
	}
    229e:	bd10      	pop	{r4, pc}
				interruptArgs[10] = state;
    22a0:	4c32      	ldr	r4, [pc, #200]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(10, isr10, CHANGE);
    22a2:	2204      	movs	r2, #4
    22a4:	4934      	ldr	r1, [pc, #208]	; (2378 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x548>)
    22a6:	200a      	movs	r0, #10
				interruptArgs[10] = state;
    22a8:	62a3      	str	r3, [r4, #40]	; 0x28
				attachInterrupt(10, isr10, CHANGE);
    22aa:	f019 fc33 	bl	1bb14 <attachInterrupt>
		return 1;
    22ae:	2001      	movs	r0, #1
	}
    22b0:	bd10      	pop	{r4, pc}
				interruptArgs[9] = state;
    22b2:	4c2e      	ldr	r4, [pc, #184]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(9, isr9, CHANGE);
    22b4:	2204      	movs	r2, #4
    22b6:	4931      	ldr	r1, [pc, #196]	; (237c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x54c>)
    22b8:	2009      	movs	r0, #9
				interruptArgs[9] = state;
    22ba:	6263      	str	r3, [r4, #36]	; 0x24
				attachInterrupt(9, isr9, CHANGE);
    22bc:	f019 fc2a 	bl	1bb14 <attachInterrupt>
		return 1;
    22c0:	2001      	movs	r0, #1
	}
    22c2:	bd10      	pop	{r4, pc}
				interruptArgs[8] = state;
    22c4:	4c29      	ldr	r4, [pc, #164]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(8, isr8, CHANGE);
    22c6:	2204      	movs	r2, #4
    22c8:	492d      	ldr	r1, [pc, #180]	; (2380 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x550>)
    22ca:	2008      	movs	r0, #8
				interruptArgs[8] = state;
    22cc:	6223      	str	r3, [r4, #32]
				attachInterrupt(8, isr8, CHANGE);
    22ce:	f019 fc21 	bl	1bb14 <attachInterrupt>
		return 1;
    22d2:	2001      	movs	r0, #1
	}
    22d4:	bd10      	pop	{r4, pc}
				interruptArgs[7] = state;
    22d6:	4c25      	ldr	r4, [pc, #148]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(7, isr7, CHANGE);
    22d8:	2204      	movs	r2, #4
    22da:	492a      	ldr	r1, [pc, #168]	; (2384 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x554>)
    22dc:	2007      	movs	r0, #7
				interruptArgs[7] = state;
    22de:	61e3      	str	r3, [r4, #28]
				attachInterrupt(7, isr7, CHANGE);
    22e0:	f019 fc18 	bl	1bb14 <attachInterrupt>
		return 1;
    22e4:	2001      	movs	r0, #1
	}
    22e6:	bd10      	pop	{r4, pc}
				interruptArgs[6] = state;
    22e8:	4c20      	ldr	r4, [pc, #128]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(6, isr6, CHANGE);
    22ea:	2204      	movs	r2, #4
    22ec:	4926      	ldr	r1, [pc, #152]	; (2388 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x558>)
    22ee:	2006      	movs	r0, #6
				interruptArgs[6] = state;
    22f0:	61a3      	str	r3, [r4, #24]
				attachInterrupt(6, isr6, CHANGE);
    22f2:	f019 fc0f 	bl	1bb14 <attachInterrupt>
		return 1;
    22f6:	2001      	movs	r0, #1
	}
    22f8:	bd10      	pop	{r4, pc}
				interruptArgs[5] = state;
    22fa:	4c1c      	ldr	r4, [pc, #112]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(5, isr5, CHANGE);
    22fc:	2204      	movs	r2, #4
    22fe:	4923      	ldr	r1, [pc, #140]	; (238c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x55c>)
    2300:	2005      	movs	r0, #5
				interruptArgs[5] = state;
    2302:	6163      	str	r3, [r4, #20]
				attachInterrupt(5, isr5, CHANGE);
    2304:	f019 fc06 	bl	1bb14 <attachInterrupt>
		return 1;
    2308:	2001      	movs	r0, #1
	}
    230a:	bd10      	pop	{r4, pc}
				attachInterrupt(4, isr4, CHANGE);
    230c:	2204      	movs	r2, #4
				interruptArgs[4] = state;
    230e:	4c17      	ldr	r4, [pc, #92]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(4, isr4, CHANGE);
    2310:	491f      	ldr	r1, [pc, #124]	; (2390 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x560>)
    2312:	4610      	mov	r0, r2
				interruptArgs[4] = state;
    2314:	6123      	str	r3, [r4, #16]
				attachInterrupt(4, isr4, CHANGE);
    2316:	f019 fbfd 	bl	1bb14 <attachInterrupt>
		return 1;
    231a:	2001      	movs	r0, #1
	}
    231c:	bd10      	pop	{r4, pc}
				interruptArgs[3] = state;
    231e:	4c13      	ldr	r4, [pc, #76]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(3, isr3, CHANGE);
    2320:	2204      	movs	r2, #4
    2322:	491c      	ldr	r1, [pc, #112]	; (2394 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x564>)
    2324:	2003      	movs	r0, #3
				interruptArgs[3] = state;
    2326:	60e3      	str	r3, [r4, #12]
				attachInterrupt(3, isr3, CHANGE);
    2328:	f019 fbf4 	bl	1bb14 <attachInterrupt>
		return 1;
    232c:	2001      	movs	r0, #1
	}
    232e:	bd10      	pop	{r4, pc}
				interruptArgs[2] = state;
    2330:	4c0e      	ldr	r4, [pc, #56]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(2, isr2, CHANGE);
    2332:	2204      	movs	r2, #4
    2334:	4918      	ldr	r1, [pc, #96]	; (2398 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x568>)
    2336:	2002      	movs	r0, #2
				interruptArgs[2] = state;
    2338:	60a3      	str	r3, [r4, #8]
				attachInterrupt(2, isr2, CHANGE);
    233a:	f019 fbeb 	bl	1bb14 <attachInterrupt>
		return 1;
    233e:	2001      	movs	r0, #1
	}
    2340:	bd10      	pop	{r4, pc}
    2342:	4604      	mov	r4, r0
				interruptArgs[1] = state;
    2344:	4809      	ldr	r0, [pc, #36]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(1, isr1, CHANGE);
    2346:	2204      	movs	r2, #4
    2348:	4914      	ldr	r1, [pc, #80]	; (239c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x56c>)
				interruptArgs[1] = state;
    234a:	6043      	str	r3, [r0, #4]
				attachInterrupt(1, isr1, CHANGE);
    234c:	2001      	movs	r0, #1
    234e:	f019 fbe1 	bl	1bb14 <attachInterrupt>
		return 1;
    2352:	4620      	mov	r0, r4
	}
    2354:	bd10      	pop	{r4, pc}
				interruptArgs[0] = state;
    2356:	4c05      	ldr	r4, [pc, #20]	; (236c <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(0, isr0, CHANGE);
    2358:	2204      	movs	r2, #4
    235a:	4911      	ldr	r1, [pc, #68]	; (23a0 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x570>)
    235c:	2000      	movs	r0, #0
				interruptArgs[0] = state;
    235e:	6023      	str	r3, [r4, #0]
				attachInterrupt(0, isr0, CHANGE);
    2360:	f019 fbd8 	bl	1bb14 <attachInterrupt>
		return 1;
    2364:	2001      	movs	r0, #1
	}
    2366:	bd10      	pop	{r4, pc}
		switch (pin) {
    2368:	2000      	movs	r0, #0
	}
    236a:	bd10      	pop	{r4, pc}
    236c:	2000af60 	.word	0x2000af60
    2370:	00000569 	.word	0x00000569
    2374:	000004f1 	.word	0x000004f1
    2378:	00000479 	.word	0x00000479
    237c:	00000401 	.word	0x00000401
    2380:	00000389 	.word	0x00000389
    2384:	00000311 	.word	0x00000311
    2388:	00000299 	.word	0x00000299
    238c:	00000221 	.word	0x00000221
    2390:	00000c79 	.word	0x00000c79
    2394:	00000c01 	.word	0x00000c01
    2398:	00000b89 	.word	0x00000b89
    239c:	00000b11 	.word	0x00000b11
    23a0:	00000a99 	.word	0x00000a99

000023a4 <Encoder2::Encoder2(unsigned char, unsigned char)>:
	Encoder2(uint8_t pin1, uint8_t pin2) {
    23a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23a8:	460f      	mov	r7, r1
    23aa:	4616      	mov	r6, r2
    23ac:	4604      	mov	r4, r0
		pinMode(pin1, INPUT_PULLUP);
    23ae:	2102      	movs	r1, #2
    23b0:	4638      	mov	r0, r7
    23b2:	f019 f979 	bl	1b6a8 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
    23b6:	2102      	movs	r1, #2
    23b8:	4630      	mov	r0, r6
    23ba:	f019 f975 	bl	1b6a8 <pinMode>
		encoder2.pin1_register = PIN_TO_BASEREG(pin1);
    23be:	4b22      	ldr	r3, [pc, #136]	; (2448 <Encoder2::Encoder2(unsigned char, unsigned char)+0xa4>)
    23c0:	013a      	lsls	r2, r7, #4
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    23c2:	4822      	ldr	r0, [pc, #136]	; (244c <Encoder2::Encoder2(unsigned char, unsigned char)+0xa8>)
		encoder2.pin2_register = PIN_TO_BASEREG(pin2);
    23c4:	0131      	lsls	r1, r6, #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    23c6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 2454 <Encoder2::Encoder2(unsigned char, unsigned char)+0xb0>
		encoder2.pin1_register = PIN_TO_BASEREG(pin1);
    23ca:	f853 8002 	ldr.w	r8, [r3, r2]
    23ce:	eb03 1207 	add.w	r2, r3, r7, lsl #4
    23d2:	f8c4 8000 	str.w	r8, [r4]
		encoder2.pin1_bitmask =  PIN_TO_BITMASK(pin1);
    23d6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
		encoder2.pin2_register = PIN_TO_BASEREG(pin2);
    23da:	eb03 1206 	add.w	r2, r3, r6, lsl #4
    23de:	5859      	ldr	r1, [r3, r1]
		encoder2.position = 0;
    23e0:	2300      	movs	r3, #0
		encoder2.pin1_bitmask =  PIN_TO_BITMASK(pin1);
    23e2:	f8c4 e008 	str.w	lr, [r4, #8]
		encoder2.pin2_bitmask =  PIN_TO_BITMASK(pin2);
    23e6:	68d2      	ldr	r2, [r2, #12]
		encoder2.position = 0;
    23e8:	6163      	str	r3, [r4, #20]
    23ea:	4b19      	ldr	r3, [pc, #100]	; (2450 <Encoder2::Encoder2(unsigned char, unsigned char)+0xac>)
		encoder2.pin2_bitmask =  PIN_TO_BITMASK(pin2);
    23ec:	60e2      	str	r2, [r4, #12]
	uint32_t begin = ARM_DWT_CYCCNT;
    23ee:	6845      	ldr	r5, [r0, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    23f0:	681b      	ldr	r3, [r3, #0]
		encoder2.pin2_register = PIN_TO_BASEREG(pin2);
    23f2:	6061      	str	r1, [r4, #4]
    23f4:	fbac 3c03 	umull	r3, ip, ip, r3
    23f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    23fc:	ea4f 4c9c 	mov.w	ip, ip, lsr #18
    2400:	fb03 fc0c 	mul.w	ip, r3, ip
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2404:	6843      	ldr	r3, [r0, #4]
    2406:	1b5b      	subs	r3, r3, r5
    2408:	459c      	cmp	ip, r3
    240a:	d8fb      	bhi.n	2404 <Encoder2::Encoder2(unsigned char, unsigned char)+0x60>
		if (DIRECT_PIN_READ(encoder2.pin1_register, encoder2.pin1_bitmask)) s |= 1;
    240c:	f8d8 3000 	ldr.w	r3, [r8]
		interrupts_in_use = attach_interrupt(pin1, &encoder2);
    2410:	4638      	mov	r0, r7
		if (DIRECT_PIN_READ(encoder2.pin2_register, encoder2.pin2_bitmask)) s |= 2;
    2412:	6809      	ldr	r1, [r1, #0]
		if (DIRECT_PIN_READ(encoder2.pin1_register, encoder2.pin1_bitmask)) s |= 1;
    2414:	ea1e 0f03 	tst.w	lr, r3
		uint8_t s = 0;
    2418:	bf14      	ite	ne
    241a:	2301      	movne	r3, #1
    241c:	2300      	moveq	r3, #0
		if (DIRECT_PIN_READ(encoder2.pin2_register, encoder2.pin2_bitmask)) s |= 2;
    241e:	420a      	tst	r2, r1
		interrupts_in_use = attach_interrupt(pin1, &encoder2);
    2420:	4621      	mov	r1, r4
		if (DIRECT_PIN_READ(encoder2.pin2_register, encoder2.pin2_bitmask)) s |= 2;
    2422:	bf18      	it	ne
    2424:	f043 0302 	orrne.w	r3, r3, #2
		encoder2.state = s;
    2428:	7423      	strb	r3, [r4, #16]
		interrupts_in_use = attach_interrupt(pin1, &encoder2);
    242a:	f7ff fd01 	bl	1e30 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)>
    242e:	4603      	mov	r3, r0
		interrupts_in_use += attach_interrupt(pin2, &encoder2);
    2430:	4621      	mov	r1, r4
    2432:	4630      	mov	r0, r6
		interrupts_in_use = attach_interrupt(pin1, &encoder2);
    2434:	7723      	strb	r3, [r4, #28]
		interrupts_in_use += attach_interrupt(pin2, &encoder2);
    2436:	f7ff fcfb 	bl	1e30 <Encoder2::attach_interrupt(unsigned char, Encoder_internal_state_t*)>
    243a:	7f22      	ldrb	r2, [r4, #28]
    243c:	4603      	mov	r3, r0
	}
    243e:	4620      	mov	r0, r4
		interrupts_in_use += attach_interrupt(pin2, &encoder2);
    2440:	4413      	add	r3, r2
    2442:	7723      	strb	r3, [r4, #28]
	}
    2444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2448:	20004be8 	.word	0x20004be8
    244c:	e0001000 	.word	0xe0001000
    2450:	20008aac 	.word	0x20008aac
    2454:	431bde83 	.word	0x431bde83

00002458 <AdjustS_N(int, float)>:
{
    2458:	b538      	push	{r3, r4, r5, lr}
  float fltSignalBWCorrectiondB = 10 * log10(float(intBandwidth)/float(intBandwidth +300));// Provides approx .4 or .2 dB correction for 3.3 or 6.3 KHz Filters:3KHz or 6KHz BW
    245a:	4bb3      	ldr	r3, [pc, #716]	; (2728 <AdjustS_N(int, float)+0x2d0>)
{
    245c:	4604      	mov	r4, r0
  float fltSignalBWCorrectiondB = 10 * log10(float(intBandwidth)/float(intBandwidth +300));// Provides approx .4 or .2 dB correction for 3.3 or 6.3 KHz Filters:3KHz or 6KHz BW
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	f503 7296 	add.w	r2, r3, #300	; 0x12c
    2464:	ee07 3a90 	vmov	s15, r3
{
    2468:	ed2d 8b08 	vpush	{d8-d11}
    246c:	eeb0 ba40 	vmov.f32	s22, s0
  float fltSignalBWCorrectiondB = 10 * log10(float(intBandwidth)/float(intBandwidth +300));// Provides approx .4 or .2 dB correction for 3.3 or 6.3 KHz Filters:3KHz or 6KHz BW
    2470:	ee00 2a10 	vmov	s0, r2
    2474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2478:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
  using ::log10;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  log10(float __x)
  { return __builtin_log10f(__x); }
    247c:	ee87 0a80 	vdiv.f32	s0, s15, s0
    2480:	f01c f986 	bl	1e790 <log10f>
	bool available(void) {
		return count > 0;
    2484:	48a9      	ldr	r0, [pc, #676]	; (272c <AdjustS_N(int, float)+0x2d4>)
  if (rmsDelayI0.available())// Compute and average the rms Output of Delay tap I0
    2486:	6a83      	ldr	r3, [r0, #40]	; 0x28
  float fltSignalBWCorrectiondB = 10 * log10(float(intBandwidth)/float(intBandwidth +300));// Provides approx .4 or .2 dB correction for 3.3 or 6.3 KHz Filters:3KHz or 6KHz BW
    2488:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    248c:	ee20 aa27 	vmul.f32	s20, s0, s15
  if (rmsDelayI0.available())// Compute and average the rms Output of Delay tap I0
    2490:	2b00      	cmp	r3, #0
    2492:	f040 811b 	bne.w	26cc <AdjustS_N(int, float)+0x274>
  double fltDesiredSNRatio = pow(10.000, ((float(intDesiredSN_dB) + fltS_NCorrectiondB + fltSignalBWCorrectiondB)/ 20.0));//Compute the S:N ratio based on Desired S:N dB  and bandwidth correction ( .01 to 100 for -/+ 40 dB)
    2496:	ee07 4a90 	vmov	s15, r4
    249a:	eeb3 1b04 	vmov.f64	d1, #52	; 0x41a00000  20.0
    249e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
    24a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    24a6:	eddf 7aa2 	vldr	s15, [pc, #648]	; 2730 <AdjustS_N(int, float)+0x2d8>
  float fltNoiseGain =  (1- fltSignalGain);
    24aa:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
  double fltDesiredSNRatio = pow(10.000, ((float(intDesiredSN_dB) + fltS_NCorrectiondB + fltSignalBWCorrectiondB)/ 20.0));//Compute the S:N ratio based on Desired S:N dB  and bandwidth correction ( .01 to 100 for -/+ 40 dB)
    24ae:	ee37 7a27 	vadd.f32	s14, s14, s15
    24b2:	ee37 7a0a 	vadd.f32	s14, s14, s20
    24b6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    24ba:	ee87 1b01 	vdiv.f64	d1, d7, d1
    24be:	f01b fe7b 	bl	1e1b8 <pow>
		if (gain > 32767.0f) gain = 32767.0f;
    24c2:	eddf 5a9c 	vldr	s11, [pc, #624]	; 2734 <AdjustS_N(int, float)+0x2dc>
  float fltSignalGain  =  fltDesiredSNRatio/(1.0 + fltDesiredSNRatio);
    24c6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  double fltDesiredSNRatio = pow(10.000, ((float(intDesiredSN_dB) + fltS_NCorrectiondB + fltSignalBWCorrectiondB)/ 20.0));//Compute the S:N ratio based on Desired S:N dB  and bandwidth correction ( .01 to 100 for -/+ 40 dB)
    24ca:	eeb0 9b40 	vmov.f64	d9, d0
  float fltSignalGain  =  fltDesiredSNRatio/(1.0 + fltDesiredSNRatio);
    24ce:	ee30 7b07 	vadd.f64	d7, d0, d7
    24d2:	ee80 8b07 	vdiv.f64	d8, d0, d7
    24d6:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
  float fltNoiseGain =  (1- fltSignalGain);
    24da:	ee7a aac8 	vsub.f32	s21, s21, s16
    24de:	eef4 aae5 	vcmpe.f32	s21, s11
    24e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    24e6:	dc09      	bgt.n	24fc <AdjustS_N(int, float)+0xa4>
		else if (gain < -32767.0f) gain = -32767.0f;
    24e8:	eddf 7a93 	vldr	s15, [pc, #588]	; 2738 <AdjustS_N(int, float)+0x2e0>
    24ec:	eef4 aae7 	vcmpe.f32	s21, s15
    24f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    24f4:	f140 80e3 	bpl.w	26be <AdjustS_N(int, float)+0x266>
    24f8:	4a90      	ldr	r2, [pc, #576]	; (273c <AdjustS_N(int, float)+0x2e4>)
    24fa:	e000      	b.n	24fe <AdjustS_N(int, float)+0xa6>
    24fc:	4a90      	ldr	r2, [pc, #576]	; (2740 <AdjustS_N(int, float)+0x2e8>)
		if (gain > 32767.0f) gain = 32767.0f;
    24fe:	eddf 7a8d 	vldr	s15, [pc, #564]	; 2734 <AdjustS_N(int, float)+0x2dc>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2502:	4b90      	ldr	r3, [pc, #576]	; (2744 <AdjustS_N(int, float)+0x2ec>)
		if (gain > 32767.0f) gain = 32767.0f;
    2504:	eeb4 8ae7 	vcmpe.f32	s16, s15
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2508:	619a      	str	r2, [r3, #24]
		if (gain > 32767.0f) gain = 32767.0f;
    250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    250e:	dc09      	bgt.n	2524 <AdjustS_N(int, float)+0xcc>
		else if (gain < -32767.0f) gain = -32767.0f;
    2510:	eddf 7a89 	vldr	s15, [pc, #548]	; 2738 <AdjustS_N(int, float)+0x2e0>
    2514:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    251c:	f140 80c8 	bpl.w	26b0 <AdjustS_N(int, float)+0x258>
    2520:	4986      	ldr	r1, [pc, #536]	; (273c <AdjustS_N(int, float)+0x2e4>)
    2522:	e000      	b.n	2526 <AdjustS_N(int, float)+0xce>
    2524:	4986      	ldr	r1, [pc, #536]	; (2740 <AdjustS_N(int, float)+0x2e8>)
  if (intDesiredSN_dB != intLastDesiredSN_dB)
    2526:	4d88      	ldr	r5, [pc, #544]	; (2748 <AdjustS_N(int, float)+0x2f0>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2528:	2200      	movs	r2, #0
    252a:	61d9      	str	r1, [r3, #28]
    252c:	6829      	ldr	r1, [r5, #0]
    252e:	42a1      	cmp	r1, r4
    2530:	e9c3 2208 	strd	r2, r2, [r3, #32]
    2534:	f000 80b9 	beq.w	26aa <AdjustS_N(int, float)+0x252>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2538:	2101      	movs	r1, #1
    253a:	4884      	ldr	r0, [pc, #528]	; (274c <AdjustS_N(int, float)+0x2f4>)
    253c:	f01a ffce 	bl	1d4dc <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    2540:	4883      	ldr	r0, [pc, #524]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2542:	f018 fbb7 	bl	1acb4 <Print::println()>
    2546:	210a      	movs	r1, #10
    2548:	4882      	ldr	r0, [pc, #520]	; (2754 <AdjustS_N(int, float)+0x2fc>)
    254a:	f01a ffc7 	bl	1d4dc <usb_serial_write>
    254e:	4880      	ldr	r0, [pc, #512]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2550:	f018 fbb0 	bl	1acb4 <Print::println()>
    2554:	210f      	movs	r1, #15
    2556:	4880      	ldr	r0, [pc, #512]	; (2758 <AdjustS_N(int, float)+0x300>)
    2558:	f01a ffc0 	bl	1d4dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    255c:	4621      	mov	r1, r4
    255e:	487c      	ldr	r0, [pc, #496]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2560:	f018 fb9c 	bl	1ac9c <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
    2564:	487a      	ldr	r0, [pc, #488]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2566:	f018 fba5 	bl	1acb4 <Print::println()>
    256a:	2123      	movs	r1, #35	; 0x23
    256c:	487b      	ldr	r0, [pc, #492]	; (275c <AdjustS_N(int, float)+0x304>)
    256e:	f01a ffb5 	bl	1d4dc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2572:	eeb7 0aca 	vcvt.f64.f32	d0, s20
    2576:	2102      	movs	r1, #2
    2578:	4875      	ldr	r0, [pc, #468]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    257a:	f018 fbc5 	bl	1ad08 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    257e:	4874      	ldr	r0, [pc, #464]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2580:	f018 fb98 	bl	1acb4 <Print::println()>
    2584:	2113      	movs	r1, #19
    2586:	4876      	ldr	r0, [pc, #472]	; (2760 <AdjustS_N(int, float)+0x308>)
    2588:	f01a ffa8 	bl	1d4dc <usb_serial_write>
      Serial.print(" ppLPInputMeasAvg= ");  Serial.println(fltppLPInputMeasAvg);
    258c:	eeb7 bacb 	vcvt.f64.f32	d11, s22
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2590:	2102      	movs	r1, #2
    2592:	486f      	ldr	r0, [pc, #444]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2594:	eeb0 0b4b 	vmov.f64	d0, d11
    2598:	f018 fbb6 	bl	1ad08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    259c:	486c      	ldr	r0, [pc, #432]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    259e:	f018 fb89 	bl	1acb4 <Print::println()>
    25a2:	2113      	movs	r1, #19
    25a4:	486f      	ldr	r0, [pc, #444]	; (2764 <AdjustS_N(int, float)+0x30c>)
    25a6:	f01a ff99 	bl	1d4dc <usb_serial_write>
      Serial.print(" fltrmsDelayI0Avg= ");  Serial.print(fltrmsDelayI0Avg); Serial.print("   Computed rmsMixIQOutput= ");Serial.println(fltComputedrmsMixIQOutput);
    25aa:	4b6f      	ldr	r3, [pc, #444]	; (2768 <AdjustS_N(int, float)+0x310>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    25ac:	2102      	movs	r1, #2
    25ae:	4868      	ldr	r0, [pc, #416]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    25b0:	ed93 0a00 	vldr	s0, [r3]
    25b4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    25b8:	f018 fba6 	bl	1ad08 <Print::printFloat(double, unsigned char)>
    25bc:	211c      	movs	r1, #28
    25be:	486b      	ldr	r0, [pc, #428]	; (276c <AdjustS_N(int, float)+0x314>)
    25c0:	f01a ff8c 	bl	1d4dc <usb_serial_write>
    25c4:	4b6a      	ldr	r3, [pc, #424]	; (2770 <AdjustS_N(int, float)+0x318>)
    25c6:	2102      	movs	r1, #2
    25c8:	4861      	ldr	r0, [pc, #388]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    25ca:	ed93 0a00 	vldr	s0, [r3]
    25ce:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    25d2:	f018 fb99 	bl	1ad08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    25d6:	485e      	ldr	r0, [pc, #376]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    25d8:	f018 fb6c 	bl	1acb4 <Print::println()>
    25dc:	210e      	movs	r1, #14
    25de:	4865      	ldr	r0, [pc, #404]	; (2774 <AdjustS_N(int, float)+0x31c>)
    25e0:	f01a ff7c 	bl	1d4dc <usb_serial_write>
      Serial.print(" rmsNoiseAvg= "); Serial.println(fltrmsNoiseAvg);
    25e4:	4b64      	ldr	r3, [pc, #400]	; (2778 <AdjustS_N(int, float)+0x320>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    25e6:	2102      	movs	r1, #2
    25e8:	4859      	ldr	r0, [pc, #356]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    25ea:	ed93 0a00 	vldr	s0, [r3]
    25ee:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    25f2:	f018 fb89 	bl	1ad08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    25f6:	4856      	ldr	r0, [pc, #344]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    25f8:	f018 fb5c 	bl	1acb4 <Print::println()>
    25fc:	2113      	movs	r1, #19
    25fe:	485f      	ldr	r0, [pc, #380]	; (277c <AdjustS_N(int, float)+0x324>)
    2600:	f01a ff6c 	bl	1d4dc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2604:	eeb0 0b49 	vmov.f64	d0, d9
    2608:	2102      	movs	r1, #2
    260a:	4851      	ldr	r0, [pc, #324]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    260c:	f018 fb7c 	bl	1ad08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    2610:	484f      	ldr	r0, [pc, #316]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2612:	f018 fb4f 	bl	1acb4 <Print::println()>
    2616:	210c      	movs	r1, #12
    2618:	4859      	ldr	r0, [pc, #356]	; (2780 <AdjustS_N(int, float)+0x328>)
    261a:	f01a ff5f 	bl	1d4dc <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    261e:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
    2622:	2102      	movs	r1, #2
    2624:	484a      	ldr	r0, [pc, #296]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2626:	f018 fb6f 	bl	1ad08 <Print::printFloat(double, unsigned char)>
    262a:	210e      	movs	r1, #14
    262c:	4855      	ldr	r0, [pc, #340]	; (2784 <AdjustS_N(int, float)+0x32c>)
    262e:	f01a ff55 	bl	1d4dc <usb_serial_write>
    2632:	eeb7 0aea 	vcvt.f64.f32	d0, s21
    2636:	2102      	movs	r1, #2
    2638:	4845      	ldr	r0, [pc, #276]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    263a:	f018 fb65 	bl	1ad08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    263e:	4844      	ldr	r0, [pc, #272]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2640:	f018 fb38 	bl	1acb4 <Print::println()>
    2644:	2105      	movs	r1, #5
    2646:	4850      	ldr	r0, [pc, #320]	; (2788 <AdjustS_N(int, float)+0x330>)
    2648:	f01a ff48 	bl	1d4dc <usb_serial_write>
      Serial.print(" CF= ");  Serial.println( fltppLPInputMeasAvg/(2.828 * fltrmsLPInputMeasAvg));
    264c:	4b4f      	ldr	r3, [pc, #316]	; (278c <AdjustS_N(int, float)+0x334>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    264e:	2102      	movs	r1, #2
    2650:	483f      	ldr	r0, [pc, #252]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2652:	ed93 0a00 	vldr	s0, [r3]
    2656:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 2708 <AdjustS_N(int, float)+0x2b0>
    265a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    265e:	ee20 0b07 	vmul.f64	d0, d0, d7
    2662:	ee8b 0b00 	vdiv.f64	d0, d11, d0
    2666:	f018 fb4f 	bl	1ad08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    266a:	4839      	ldr	r0, [pc, #228]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    266c:	f018 fb22 	bl	1acb4 <Print::println()>
    2670:	2111      	movs	r1, #17
    2672:	4847      	ldr	r0, [pc, #284]	; (2790 <AdjustS_N(int, float)+0x338>)
    2674:	f01a ff32 	bl	1d4dc <usb_serial_write>
      Serial.print(" intMultipaths = ");  Serial.println(intMultipaths);
    2678:	4b46      	ldr	r3, [pc, #280]	; (2794 <AdjustS_N(int, float)+0x33c>)
	size_t print(int n)				{ return print((long)n); }
    267a:	4835      	ldr	r0, [pc, #212]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    267c:	6819      	ldr	r1, [r3, #0]
    267e:	f018 fb0d 	bl	1ac9c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    2682:	4833      	ldr	r0, [pc, #204]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2684:	f018 fb16 	bl	1acb4 <Print::println()>
    2688:	2111      	movs	r1, #17
    268a:	4843      	ldr	r0, [pc, #268]	; (2798 <AdjustS_N(int, float)+0x340>)
    268c:	f01a ff26 	bl	1d4dc <usb_serial_write>
      Serial.print(" rmsMixIQ1234Out="); Serial.println(fltrmsMixIQ1234Out);
    2690:	4b42      	ldr	r3, [pc, #264]	; (279c <AdjustS_N(int, float)+0x344>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2692:	2102      	movs	r1, #2
    2694:	482e      	ldr	r0, [pc, #184]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    2696:	ed93 0a00 	vldr	s0, [r3]
    269a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    269e:	f018 fb33 	bl	1ad08 <Print::printFloat(double, unsigned char)>
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    26a2:	482b      	ldr	r0, [pc, #172]	; (2750 <AdjustS_N(int, float)+0x2f8>)
    26a4:	f018 fb06 	bl	1acb4 <Print::println()>
      intLastDesiredSN_dB = intDesiredSN_dB;
    26a8:	602c      	str	r4, [r5, #0]
 }// **End AdjustS_N******************************************************************************************
    26aa:	ecbd 8b08 	vpop	{d8-d11}
    26ae:	bd38      	pop	{r3, r4, r5, pc}
    26b0:	eef0 7a48 	vmov.f32	s15, s16
    26b4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    26b8:	ee17 1a90 	vmov	r1, s15
    26bc:	e733      	b.n	2526 <AdjustS_N(int, float)+0xce>
    26be:	eef0 7a6a 	vmov.f32	s15, s21
    26c2:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    26c6:	ee17 2a90 	vmov	r2, s15
    26ca:	e718      	b.n	24fe <AdjustS_N(int, float)+0xa6>
      fltrmsDelayI0 = 849.8 *  rmsDelayI0.read();// This is the audio input from mixPathSel output time alligned to the HilbertQ12FIR output
    26cc:	f008 faf4 	bl	acb8 <AudioAnalyzeRMS::read()>
    26d0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
      fltrmsDelayI0Avg = (.95 * fltrmsDelayI0Avg) + .05 * fltrmsDelayI0; //moderate - slow speed rolling average
    26d4:	4b24      	ldr	r3, [pc, #144]	; (2768 <AdjustS_N(int, float)+0x310>)
      fltrmsDelayI0 = 849.8 *  rmsDelayI0.read();// This is the audio input from mixPathSel output time alligned to the HilbertQ12FIR output
    26d6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 2710 <AdjustS_N(int, float)+0x2b8>
      fltrmsDelayI0Avg = (.95 * fltrmsDelayI0Avg) + .05 * fltrmsDelayI0; //moderate - slow speed rolling average
    26da:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 2718 <AdjustS_N(int, float)+0x2c0>
    26de:	ed93 6a00 	vldr	s12, [r3]
      fltrmsDelayI0 = 849.8 *  rmsDelayI0.read();// This is the audio input from mixPathSel output time alligned to the HilbertQ12FIR output
    26e2:	ee20 7b07 	vmul.f64	d7, d0, d7
      fltrmsDelayI0Avg = (.95 * fltrmsDelayI0Avg) + .05 * fltrmsDelayI0; //moderate - slow speed rolling average
    26e6:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    26ea:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 2720 <AdjustS_N(int, float)+0x2c8>
      fltrmsDelayI0 = 849.8 *  rmsDelayI0.read();// This is the audio input from mixPathSel output time alligned to the HilbertQ12FIR output
    26ee:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
      fltrmsDelayI0Avg = (.95 * fltrmsDelayI0Avg) + .05 * fltrmsDelayI0; //moderate - slow speed rolling average
    26f2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    26f6:	ee27 7b04 	vmul.f64	d7, d7, d4
    26fa:	eea6 7b05 	vfma.f64	d7, d6, d5
    26fe:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    2702:	ed83 7a00 	vstr	s14, [r3]
    2706:	e6c6      	b.n	2496 <AdjustS_N(int, float)+0x3e>
    2708:	76c8b439 	.word	0x76c8b439
    270c:	40069fbe 	.word	0x40069fbe
    2710:	66666666 	.word	0x66666666
    2714:	408a8e66 	.word	0x408a8e66
    2718:	9999999a 	.word	0x9999999a
    271c:	3fa99999 	.word	0x3fa99999
    2720:	66666666 	.word	0x66666666
    2724:	3fee6666 	.word	0x3fee6666
    2728:	20009a10 	.word	0x20009a10
    272c:	2000a788 	.word	0x2000a788
    2730:	4088f5c3 	.word	0x4088f5c3
    2734:	46fffe00 	.word	0x46fffe00
    2738:	c6fffe00 	.word	0xc6fffe00
    273c:	80010000 	.word	0x80010000
    2740:	7fff0000 	.word	0x7fff0000
    2744:	20012cd0 	.word	0x20012cd0
    2748:	20009444 	.word	0x20009444
    274c:	200035f0 	.word	0x200035f0
    2750:	20008ba0 	.word	0x20008ba0
    2754:	2000362c 	.word	0x2000362c
    2758:	20003638 	.word	0x20003638
    275c:	20003648 	.word	0x20003648
    2760:	2000366c 	.word	0x2000366c
    2764:	20003680 	.word	0x20003680
    2768:	2000c7bc 	.word	0x2000c7bc
    276c:	20003694 	.word	0x20003694
    2770:	200129ac 	.word	0x200129ac
    2774:	200036b4 	.word	0x200036b4
    2778:	20012c4c 	.word	0x20012c4c
    277c:	200036c4 	.word	0x200036c4
    2780:	200036d8 	.word	0x200036d8
    2784:	200036e8 	.word	0x200036e8
    2788:	200036f8 	.word	0x200036f8
    278c:	20012c44 	.word	0x20012c44
    2790:	20003700 	.word	0x20003700
    2794:	20009a48 	.word	0x20009a48
    2798:	20003714 	.word	0x20003714
    279c:	20012c48 	.word	0x20012c48

000027a0 <Fade(int, int, float)>:
{
    27a0:	b538      	push	{r3, r4, r5, lr}
	return systick_millis_count;
    27a2:	4b1f      	ldr	r3, [pc, #124]	; (2820 <Fade(int, int, float)+0x80>)
  intCurrentFadeSN_dB = intMaxSN_dB -  int((intFadeDepth_dB * .5 * (1 - cos(fltFadeRateHz * 2 * 3.14159 * fltRunTimeSec))));
    27a4:	ee30 0a00 	vadd.f32	s0, s0, s0
{
    27a8:	4605      	mov	r5, r0
    27aa:	460c      	mov	r4, r1
    27ac:	ed93 6a00 	vldr	s12, [r3]
  intCurrentFadeSN_dB = intMaxSN_dB -  int((intFadeDepth_dB * .5 * (1 - cos(fltFadeRateHz * 2 * 3.14159 * fltRunTimeSec))));
    27b0:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
  float fltRunTimeSec = millis()/1000.0; //rollover only will happen every 50 days!
    27b4:	eeb8 6b46 	vcvt.f64.u32	d6, s12
    27b8:	ed9f 4b15 	vldr	d4, [pc, #84]	; 2810 <Fade(int, int, float)+0x70>
  intCurrentFadeSN_dB = intMaxSN_dB -  int((intFadeDepth_dB * .5 * (1 - cos(fltFadeRateHz * 2 * 3.14159 * fltRunTimeSec))));
    27bc:	ed9f 5b16 	vldr	d5, [pc, #88]	; 2818 <Fade(int, int, float)+0x78>
  float fltRunTimeSec = millis()/1000.0; //rollover only will happen every 50 days!
    27c0:	ee86 0b04 	vdiv.f64	d0, d6, d4
  intCurrentFadeSN_dB = intMaxSN_dB -  int((intFadeDepth_dB * .5 * (1 - cos(fltFadeRateHz * 2 * 3.14159 * fltRunTimeSec))));
    27c4:	ee27 7b05 	vmul.f64	d7, d7, d5
  float fltRunTimeSec = millis()/1000.0; //rollover only will happen every 50 days!
    27c8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
  intCurrentFadeSN_dB = intMaxSN_dB -  int((intFadeDepth_dB * .5 * (1 - cos(fltFadeRateHz * 2 * 3.14159 * fltRunTimeSec))));
    27cc:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    27d0:	ee27 0b00 	vmul.f64	d0, d7, d0
    27d4:	f01c f888 	bl	1e8e8 <cos>
  AdjustS_N (intCurrentFadeSN_dB , fltppLPInputMeasAvg);
    27d8:	4b12      	ldr	r3, [pc, #72]	; (2824 <Fade(int, int, float)+0x84>)
    27da:	f06f 0027 	mvn.w	r0, #39	; 0x27
  intCurrentFadeSN_dB = intMaxSN_dB -  int((intFadeDepth_dB * .5 * (1 - cos(fltFadeRateHz * 2 * 3.14159 * fltRunTimeSec))));
    27de:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    27e2:	ee07 4a10 	vmov	s14, r4
    27e6:	eeba 7bef 	vcvt.f64.s32	d7, d7, #1
    27ea:	ee36 6b40 	vsub.f64	d6, d6, d0
  AdjustS_N (intCurrentFadeSN_dB , fltppLPInputMeasAvg);
    27ee:	ed93 0a00 	vldr	s0, [r3]
  intCurrentFadeSN_dB = intMaxSN_dB -  int((intFadeDepth_dB * .5 * (1 - cos(fltFadeRateHz * 2 * 3.14159 * fltRunTimeSec))));
    27f2:	ee27 7b06 	vmul.f64	d7, d7, d6
    27f6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    27fa:	ee17 3a10 	vmov	r3, s14
    27fe:	1aed      	subs	r5, r5, r3
  AdjustS_N (intCurrentFadeSN_dB , fltppLPInputMeasAvg);
    2800:	42a8      	cmp	r0, r5
    2802:	bfb8      	it	lt
    2804:	4628      	movlt	r0, r5
}// **End Fade****************************************************************************************************
    2806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  AdjustS_N (intCurrentFadeSN_dB , fltppLPInputMeasAvg);
    280a:	f7ff be25 	b.w	2458 <AdjustS_N(int, float)>
    280e:	bf00      	nop
    2810:	00000000 	.word	0x00000000
    2814:	408f4000 	.word	0x408f4000
    2818:	f01b866e 	.word	0xf01b866e
    281c:	400921f9 	.word	0x400921f9
    2820:	20013554 	.word	0x20013554
    2824:	20012c30 	.word	0x20012c30

00002828 <fir_float(fir_arg_float_t volatile*)>:
{
    2828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  delayx = f->delayx;
    282c:	68c1      	ldr	r1, [r0, #12]
  nh = f->nh;
    282e:	f8b0 8004 	ldrh.w	r8, [r0, #4]
  h = f->h;
    2832:	6884      	ldr	r4, [r0, #8]
  nh = f->nh;
    2834:	fa1f f888 	uxth.w	r8, r8
  v = nh-1;
    2838:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
  for(i=0; i<nh-1; i++)
    283c:	2e00      	cmp	r6, #0
  v = nh-1;
    283e:	b2b7      	uxth	r7, r6
  for(i=0; i<nh-1; i++)
    2840:	dd17      	ble.n	2872 <fir_float(fir_arg_float_t volatile*)+0x4a>
    2842:	f1a8 0502 	sub.w	r5, r8, #2
    2846:	b2ad      	uxth	r5, r5
  u = nh-2;
    2848:	462a      	mov	r2, r5
    u--;
    284a:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    delayx[v] = delayx[u];
    284e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
    2852:	1c53      	adds	r3, r2, #1
    u--;
    2854:	fa1f f28e 	uxth.w	r2, lr
    delayx[v] = delayx[u];
    2858:	f8dc e000 	ldr.w	lr, [ip]
    285c:	b29b      	uxth	r3, r3
  for(i=0; i<nh-1; i++)
    285e:	eba5 0c02 	sub.w	ip, r5, r2
    delayx[v] = delayx[u];
    2862:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for(i=0; i<nh-1; i++)
    2866:	fa1f fc8c 	uxth.w	ip, ip
    delayx[v] = delayx[u];
    286a:	f8c3 e000 	str.w	lr, [r3]
  for(i=0; i<nh-1; i++)
    286e:	45b4      	cmp	ip, r6
    2870:	dbeb      	blt.n	284a <fir_float(fir_arg_float_t volatile*)+0x22>
  delayx[0] = f->x;
    2872:	ed90 7a00 	vldr	s14, [r0]
    2876:	ed81 7a00 	vstr	s14, [r1]
  for(i=0; i<nh; i++)
    287a:	f1b8 0f00 	cmp.w	r8, #0
    287e:	d013      	beq.n	28a8 <fir_float(fir_arg_float_t volatile*)+0x80>
    2880:	1d22      	adds	r2, r4, #4
    2882:	4623      	mov	r3, r4
    2884:	3104      	adds	r1, #4
  sum = 0;
    2886:	eddf 7a0b 	vldr	s15, [pc, #44]	; 28b4 <fir_float(fir_arg_float_t volatile*)+0x8c>
    288a:	eb02 0287 	add.w	r2, r2, r7, lsl #2
    288e:	e001      	b.n	2894 <fir_float(fir_arg_float_t volatile*)+0x6c>
    sum += delayx[i] * h[i];
    2890:	ecb1 7a01 	vldmia	r1!, {s14}
    2894:	ecf3 6a01 	vldmia	r3!, {s13}
  for(i=0; i<nh; i++)
    2898:	429a      	cmp	r2, r3
    sum += delayx[i] * h[i];
    289a:	eee6 7a87 	vfma.f32	s15, s13, s14
  for(i=0; i<nh; i++)
    289e:	d1f7      	bne.n	2890 <fir_float(fir_arg_float_t volatile*)+0x68>
  f->r = sum;
    28a0:	edc0 7a04 	vstr	s15, [r0, #16]
}
    28a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sum = 0;
    28a8:	eddf 7a02 	vldr	s15, [pc, #8]	; 28b4 <fir_float(fir_arg_float_t volatile*)+0x8c>
  f->r = sum;
    28ac:	edc0 7a04 	vstr	s15, [r0, #16]
}
    28b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28b4:	00000000 	.word	0x00000000

000028b8 <QuadGauss12FIR128(int)>:
{
    28b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (intMultipaths == 2){fltSTD = 4.0;}//Corect fltSTD for 2 paths to keep constant avg output as WGN and 4 Pat
    28bc:	4a98      	ldr	r2, [pc, #608]	; (2b20 <QuadGauss12FIR128(int)+0x268>)
    28be:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
  float fltMagI[2]= {0.0, 0.0}; float fltMagQ[2]= {0.0, 0.0};  float fltComplexMagSq = 0.0 ;
    28c2:	2300      	movs	r3, #0
  if (intMultipaths == 2){fltSTD = 4.0;}//Corect fltSTD for 2 paths to keep constant avg output as WGN and 4 Pat
    28c4:	6812      	ldr	r2, [r2, #0]
{
    28c6:	ed2d 8b0a 	vpush	{d8-d12}
    28ca:	b084      	sub	sp, #16
  if (intMultipaths == 2){fltSTD = 4.0;}//Corect fltSTD for 2 paths to keep constant avg output as WGN and 4 Pat
    28cc:	eddf 8a95 	vldr	s17, [pc, #596]	; 2b24 <QuadGauss12FIR128(int)+0x26c>
    28d0:	2a02      	cmp	r2, #2
    28d2:	af02      	add	r7, sp, #8
    28d4:	466e      	mov	r6, sp
  float fltMagI[2]= {0.0, 0.0}; float fltMagQ[2]= {0.0, 0.0};  float fltComplexMagSq = 0.0 ;
    28d6:	9300      	str	r3, [sp, #0]
  if (intMultipaths == 2){fltSTD = 4.0;}//Corect fltSTD for 2 paths to keep constant avg output as WGN and 4 Pat
    28d8:	fe47 8aa8 	vseleq.f32	s17, s15, s17
    28dc:	46b8      	mov	r8, r7
  float fltMagI[2]= {0.0, 0.0}; float fltMagQ[2]= {0.0, 0.0};  float fltComplexMagSq = 0.0 ;
    28de:	9301      	str	r3, [sp, #4]
    28e0:	9302      	str	r3, [sp, #8]
    28e2:	9303      	str	r3, [sp, #12]
          fltMagI[k] = .00001 * random(-100000,100001);
    28e4:	ed9f 9b8a 	vldr	d9, [pc, #552]	; 2b10 <QuadGauss12FIR128(int)+0x258>
      while ((fltComplexMagSq >=1.0) || (fltComplexMagSq <.1))// This mechanism insures the ComplexMag random value falls inside the unit circle  ()
    28e8:	ed9f ab8b 	vldr	d10, [pc, #556]	; 2b18 <QuadGauss12FIR128(int)+0x260>
    28ec:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
          fltMagI[k] = .00001 * random(-100000,100001);
    28f0:	4d8d      	ldr	r5, [pc, #564]	; (2b28 <QuadGauss12FIR128(int)+0x270>)
    28f2:	4c8e      	ldr	r4, [pc, #568]	; (2b2c <QuadGauss12FIR128(int)+0x274>)
    28f4:	4629      	mov	r1, r5
    28f6:	4620      	mov	r0, r4
    28f8:	f018 fab8 	bl	1ae6c <random(long, long)>
    28fc:	ee07 0a10 	vmov	s14, r0
          fltMagQ[k] = .00001 * random(-100000,100001);
    2900:	4629      	mov	r1, r5
    2902:	4620      	mov	r0, r4
          fltMagI[k] = .00001 * random(-100000,100001);
    2904:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    2908:	ee27 7b09 	vmul.f64	d7, d7, d9
    290c:	eef7 bbc7 	vcvt.f32.f64	s23, d7
    2910:	edc6 ba00 	vstr	s23, [r6]
          fltMagQ[k] = .00001 * random(-100000,100001);
    2914:	f018 faaa 	bl	1ae6c <random(long, long)>
    2918:	ee07 0a90 	vmov	s15, r0
    291c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    2920:	ee27 7b09 	vmul.f64	d7, d7, d9
    2924:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
          fltComplexMagSq = (fltMagI[k] * fltMagI[k]) + (fltMagQ[k] * fltMagQ[k]);
    2928:	ee28 ca08 	vmul.f32	s24, s16, s16
          fltMagQ[k] = .00001 * random(-100000,100001);
    292c:	ed87 8a00 	vstr	s16, [r7]
          fltComplexMagSq = (fltMagI[k] * fltMagI[k]) + (fltMagQ[k] * fltMagQ[k]);
    2930:	eeab caab 	vfma.f32	s24, s23, s23
      while ((fltComplexMagSq >=1.0) || (fltComplexMagSq <.1))// This mechanism insures the ComplexMag random value falls inside the unit circle  ()
    2934:	eeb4 cacb 	vcmpe.f32	s24, s22
    2938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    293c:	dada      	bge.n	28f4 <QuadGauss12FIR128(int)+0x3c>
    293e:	eeb7 7acc 	vcvt.f64.f32	d7, s24
    2942:	eeb4 7bca 	vcmpe.f64	d7, d10
    2946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    294a:	d4d3      	bmi.n	28f4 <QuadGauss12FIR128(int)+0x3c>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
    294c:	eeb5 ca40 	vcmp.f32	s24, #0.0
    2950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2954:	f100 80d4 	bmi.w	2b00 <QuadGauss12FIR128(int)+0x248>
    2958:	eeb1 bacc 	vsqrt.f32	s22, s24
  { return __builtin_logf(__x); }
    295c:	eeb0 0a4c 	vmov.f32	s0, s24
    2960:	f01b fbc6 	bl	1e0f0 <logf>
      fltRoot = sqrt(-2.0 * log(fltComplexMagSq));
    2964:	eeb8 7b00 	vmov.f64	d7, #128	; 0xc0000000 -2.0
    2968:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    296c:	ee20 0b07 	vmul.f64	d0, d0, d7
    2970:	eeb5 0b40 	vcmp.f64	d0, #0.0
    2974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2978:	f100 80bd 	bmi.w	2af6 <QuadGauss12FIR128(int)+0x23e>
    297c:	eeb1 6bc0 	vsqrt.f64	d6, d0
    2980:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
      fltMagI[k] = (fltMagI[k] * fltRoot * fltSTD)/fltComplexMag;
    2984:	ee6b ba86 	vmul.f32	s23, s23, s12
      fltMagQ[k] = (fltMagQ[k] * fltRoot * fltSTD)/fltComplexMag;
    2988:	ee28 7a06 	vmul.f32	s14, s16, s12
      fltMagI[k] = (fltMagI[k] * fltRoot * fltSTD)/fltComplexMag;
    298c:	ee6b baa8 	vmul.f32	s23, s23, s17
      fltMagQ[k] = (fltMagQ[k] * fltRoot * fltSTD)/fltComplexMag;
    2990:	ee27 7a28 	vmul.f32	s14, s14, s17
      fltMagI[k] = (fltMagI[k] * fltRoot * fltSTD)/fltComplexMag;
    2994:	eecb 6a8b 	vdiv.f32	s13, s23, s22
      fltMagQ[k] = (fltMagQ[k] * fltRoot * fltSTD)/fltComplexMag;
    2998:	eec7 7a0b 	vdiv.f32	s15, s14, s22
      fltMagI[k] = (fltMagI[k] * fltRoot * fltSTD)/fltComplexMag;
    299c:	ece6 6a01 	vstmia	r6!, {s13}
  for (int k=0; k<2; k++)
    29a0:	45b0      	cmp	r8, r6
      fltMagQ[k] = (fltMagQ[k] * fltRoot * fltSTD)/fltComplexMag;
    29a2:	ece7 7a01 	vstmia	r7!, {s15}
  for (int k=0; k<2; k++)
    29a6:	d1a1      	bne.n	28ec <QuadGauss12FIR128(int)+0x34>
  firI1.delayx = delay_bufferI1;
    29a8:	4861      	ldr	r0, [pc, #388]	; (2b30 <QuadGauss12FIR128(int)+0x278>)
  firI1.nh = 128;
    29aa:	2580      	movs	r5, #128	; 0x80
  firI1.h = gaus_fir_coeffs;
    29ac:	4c61      	ldr	r4, [pc, #388]	; (2b34 <QuadGauss12FIR128(int)+0x27c>)
  firI1.x = fltMagI[0];
    29ae:	9b00      	ldr	r3, [sp, #0]
  firI1.delayx = delay_bufferI1;
    29b0:	4a61      	ldr	r2, [pc, #388]	; (2b38 <QuadGauss12FIR128(int)+0x280>)
  firQ1.delayx = delay_bufferQ1;
    29b2:	4e62      	ldr	r6, [pc, #392]	; (2b3c <QuadGauss12FIR128(int)+0x284>)
  firI1.delayx = delay_bufferI1;
    29b4:	60c2      	str	r2, [r0, #12]
  firI1.nh = 128;
    29b6:	8085      	strh	r5, [r0, #4]
  firI1.h = gaus_fir_coeffs;
    29b8:	6084      	str	r4, [r0, #8]
  firI1.x = fltMagI[0];
    29ba:	6003      	str	r3, [r0, #0]
  fir_float(&firI1);
    29bc:	f7ff ff34 	bl	2828 <fir_float(fir_arg_float_t volatile*)>
  firQ1.x = fltMagQ[0];
    29c0:	9b02      	ldr	r3, [sp, #8]
  firQ1.delayx = delay_bufferQ1;
    29c2:	4a5f      	ldr	r2, [pc, #380]	; (2b40 <QuadGauss12FIR128(int)+0x288>)
  fltI1 = firI1.r;
    29c4:	ed90 5a04 	vldr	s10, [r0, #16]
  fir_float(&firQ1);
    29c8:	4630      	mov	r0, r6
  firI2.delayx = delay_bufferI2;
    29ca:	4f5e      	ldr	r7, [pc, #376]	; (2b44 <QuadGauss12FIR128(int)+0x28c>)
  firQ1.delayx = delay_bufferQ1;
    29cc:	60f2      	str	r2, [r6, #12]
  firQ1.nh = 128;
    29ce:	80b5      	strh	r5, [r6, #4]
  firQ1.h = gaus_fir_coeffs;
    29d0:	60b4      	str	r4, [r6, #8]
  firQ1.x = fltMagQ[0];
    29d2:	6033      	str	r3, [r6, #0]
  fir_float(&firQ1);
    29d4:	f7ff ff28 	bl	2828 <fir_float(fir_arg_float_t volatile*)>
  firI2.x = fltMagI[1];
    29d8:	9b01      	ldr	r3, [sp, #4]
  fir_float(&firI2);
    29da:	4638      	mov	r0, r7
  firI2.delayx = delay_bufferI2;
    29dc:	4a5a      	ldr	r2, [pc, #360]	; (2b48 <QuadGauss12FIR128(int)+0x290>)
  fltQ1 = firQ1.r;
    29de:	ed96 6a04 	vldr	s12, [r6, #16]
  firQ2.delayx = delay_bufferQ2;
    29e2:	4e5a      	ldr	r6, [pc, #360]	; (2b4c <QuadGauss12FIR128(int)+0x294>)
  firI2.delayx = delay_bufferI2;
    29e4:	60fa      	str	r2, [r7, #12]
  firI2.nh = 128;
    29e6:	80bd      	strh	r5, [r7, #4]
  firI2.h = gaus_fir_coeffs;
    29e8:	60bc      	str	r4, [r7, #8]
  firI2.x = fltMagI[1];
    29ea:	603b      	str	r3, [r7, #0]
  fir_float(&firI2);
    29ec:	f7ff ff1c 	bl	2828 <fir_float(fir_arg_float_t volatile*)>
  firQ2.x = fltMagQ[1];
    29f0:	9b03      	ldr	r3, [sp, #12]
  fir_float(&firQ2);
    29f2:	4630      	mov	r0, r6
  firQ2.delayx = delay_bufferQ2;
    29f4:	4a56      	ldr	r2, [pc, #344]	; (2b50 <QuadGauss12FIR128(int)+0x298>)
  fltI2 = firI2.r;
    29f6:	edd7 5a04 	vldr	s11, [r7, #16]
  firQ2.delayx = delay_bufferQ2;
    29fa:	60f2      	str	r2, [r6, #12]
  firQ2.nh = 128;
    29fc:	80b5      	strh	r5, [r6, #4]
  firQ2.h = gaus_fir_coeffs;
    29fe:	60b4      	str	r4, [r6, #8]
  firQ2.x = fltMagQ[1];
    2a00:	6033      	str	r3, [r6, #0]
  fir_float(&firQ2);
    2a02:	f7ff ff11 	bl	2828 <fir_float(fir_arg_float_t volatile*)>
		if (gain > 32767.0f) gain = 32767.0f;
    2a06:	ed9f 7a53 	vldr	s14, [pc, #332]	; 2b54 <QuadGauss12FIR128(int)+0x29c>
  fltQ2 = firQ2.r;
    2a0a:	edd6 7a04 	vldr	s15, [r6, #16]
    2a0e:	eeb4 5ac7 	vcmpe.f32	s10, s14
    2a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a16:	dc08      	bgt.n	2a2a <QuadGauss12FIR128(int)+0x172>
		else if (gain < -32767.0f) gain = -32767.0f;
    2a18:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 2b58 <QuadGauss12FIR128(int)+0x2a0>
    2a1c:	eeb4 5ac7 	vcmpe.f32	s10, s14
    2a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a24:	d560      	bpl.n	2ae8 <QuadGauss12FIR128(int)+0x230>
    2a26:	4b4d      	ldr	r3, [pc, #308]	; (2b5c <QuadGauss12FIR128(int)+0x2a4>)
    2a28:	e000      	b.n	2a2c <QuadGauss12FIR128(int)+0x174>
    2a2a:	4b4d      	ldr	r3, [pc, #308]	; (2b60 <QuadGauss12FIR128(int)+0x2a8>)
		if (gain > 32767.0f) gain = 32767.0f;
    2a2c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 2b58 <QuadGauss12FIR128(int)+0x2a0>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2a30:	494c      	ldr	r1, [pc, #304]	; (2b64 <QuadGauss12FIR128(int)+0x2ac>)
		if (gain > 32767.0f) gain = 32767.0f;
    2a32:	eeb4 6ac7 	vcmpe.f32	s12, s14
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2a36:	61cb      	str	r3, [r1, #28]
		if (gain > 32767.0f) gain = 32767.0f;
    2a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a3c:	d408      	bmi.n	2a50 <QuadGauss12FIR128(int)+0x198>
		else if (gain < -32767.0f) gain = -32767.0f;
    2a3e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 2b54 <QuadGauss12FIR128(int)+0x29c>
    2a42:	eeb4 6ac7 	vcmpe.f32	s12, s14
    2a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a4a:	dd44      	ble.n	2ad6 <QuadGauss12FIR128(int)+0x21e>
    2a4c:	4b43      	ldr	r3, [pc, #268]	; (2b5c <QuadGauss12FIR128(int)+0x2a4>)
    2a4e:	e000      	b.n	2a52 <QuadGauss12FIR128(int)+0x19a>
    2a50:	4b43      	ldr	r3, [pc, #268]	; (2b60 <QuadGauss12FIR128(int)+0x2a8>)
		if (gain > 32767.0f) gain = 32767.0f;
    2a52:	ed9f 7a40 	vldr	s14, [pc, #256]	; 2b54 <QuadGauss12FIR128(int)+0x29c>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2a56:	618b      	str	r3, [r1, #24]
		if (gain > 32767.0f) gain = 32767.0f;
    2a58:	eef4 5ac7 	vcmpe.f32	s11, s14
    2a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a60:	dc08      	bgt.n	2a74 <QuadGauss12FIR128(int)+0x1bc>
		else if (gain < -32767.0f) gain = -32767.0f;
    2a62:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 2b58 <QuadGauss12FIR128(int)+0x2a0>
    2a66:	eef4 5ac7 	vcmpe.f32	s11, s14
    2a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a6e:	d52b      	bpl.n	2ac8 <QuadGauss12FIR128(int)+0x210>
    2a70:	4b3a      	ldr	r3, [pc, #232]	; (2b5c <QuadGauss12FIR128(int)+0x2a4>)
    2a72:	e000      	b.n	2a76 <QuadGauss12FIR128(int)+0x1be>
    2a74:	4b3a      	ldr	r3, [pc, #232]	; (2b60 <QuadGauss12FIR128(int)+0x2a8>)
		if (gain > 32767.0f) gain = 32767.0f;
    2a76:	ed9f 7a38 	vldr	s14, [pc, #224]	; 2b58 <QuadGauss12FIR128(int)+0x2a0>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2a7a:	624b      	str	r3, [r1, #36]	; 0x24
		if (gain > 32767.0f) gain = 32767.0f;
    2a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
    2a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a84:	d408      	bmi.n	2a98 <QuadGauss12FIR128(int)+0x1e0>
		else if (gain < -32767.0f) gain = -32767.0f;
    2a86:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2b54 <QuadGauss12FIR128(int)+0x29c>
    2a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
    2a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a92:	dd10      	ble.n	2ab6 <QuadGauss12FIR128(int)+0x1fe>
    2a94:	4b31      	ldr	r3, [pc, #196]	; (2b5c <QuadGauss12FIR128(int)+0x2a4>)
    2a96:	e000      	b.n	2a9a <QuadGauss12FIR128(int)+0x1e2>
    2a98:	4b31      	ldr	r3, [pc, #196]	; (2b60 <QuadGauss12FIR128(int)+0x2a8>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2a9a:	4a33      	ldr	r2, [pc, #204]	; (2b68 <QuadGauss12FIR128(int)+0x2b0>)
    2a9c:	2000      	movs	r0, #0
    2a9e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    2aa2:	620b      	str	r3, [r1, #32]
    2aa4:	6250      	str	r0, [r2, #36]	; 0x24
    2aa6:	6194      	str	r4, [r2, #24]
    2aa8:	e9c2 0007 	strd	r0, r0, [r2, #28]
}//  End *************************************** QuadGauss12FIR128 ************************************
    2aac:	b004      	add	sp, #16
    2aae:	ecbd 8b0a 	vpop	{d8-d12}
    2ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ab6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 2b6c <QuadGauss12FIR128(int)+0x2b4>
    2aba:	ee67 7ac7 	vnmul.f32	s15, s15, s14
    2abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2ac2:	ee17 3a90 	vmov	r3, s15
    2ac6:	e7e8      	b.n	2a9a <QuadGauss12FIR128(int)+0x1e2>
    2ac8:	eeb0 7a65 	vmov.f32	s14, s11
    2acc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    2ad0:	ee17 3a10 	vmov	r3, s14
    2ad4:	e7cf      	b.n	2a76 <QuadGauss12FIR128(int)+0x1be>
    2ad6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 2b6c <QuadGauss12FIR128(int)+0x2b4>
    2ada:	ee26 6a47 	vnmul.f32	s12, s12, s14
    2ade:	eebd 7ac6 	vcvt.s32.f32	s14, s12
    2ae2:	ee17 3a10 	vmov	r3, s14
    2ae6:	e7b4      	b.n	2a52 <QuadGauss12FIR128(int)+0x19a>
    2ae8:	eeb0 7a45 	vmov.f32	s14, s10
    2aec:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    2af0:	ee17 3a10 	vmov	r3, s14
    2af4:	e79a      	b.n	2a2c <QuadGauss12FIR128(int)+0x174>
      fltRoot = sqrt(-2.0 * log(fltComplexMagSq));
    2af6:	f01b fed3 	bl	1e8a0 <sqrt>
    2afa:	eeb0 6b40 	vmov.f64	d6, d0
    2afe:	e73f      	b.n	2980 <QuadGauss12FIR128(int)+0xc8>
  { return __builtin_sqrtf(__x); }
    2b00:	eeb0 0a4c 	vmov.f32	s0, s24
    2b04:	f01b fe74 	bl	1e7f0 <sqrtf>
    2b08:	eeb0 ba40 	vmov.f32	s22, s0
    2b0c:	e726      	b.n	295c <QuadGauss12FIR128(int)+0xa4>
    2b0e:	bf00      	nop
    2b10:	88e368f1 	.word	0x88e368f1
    2b14:	3ee4f8b5 	.word	0x3ee4f8b5
    2b18:	9999999a 	.word	0x9999999a
    2b1c:	3fb99999 	.word	0x3fb99999
    2b20:	20009a48 	.word	0x20009a48
    2b24:	40350511 	.word	0x40350511
    2b28:	000186a1 	.word	0x000186a1
    2b2c:	fffe7960 	.word	0xfffe7960
    2b30:	20012904 	.word	0x20012904
    2b34:	20008f70 	.word	0x20008f70
    2b38:	2000f6e0 	.word	0x2000f6e0
    2b3c:	20012954 	.word	0x20012954
    2b40:	2000fee0 	.word	0x2000fee0
    2b44:	20012918 	.word	0x20012918
    2b48:	2000f8e0 	.word	0x2000f8e0
    2b4c:	20012968 	.word	0x20012968
    2b50:	200100e0 	.word	0x200100e0
    2b54:	46fffe00 	.word	0x46fffe00
    2b58:	c6fffe00 	.word	0xc6fffe00
    2b5c:	80010000 	.word	0x80010000
    2b60:	7fff0000 	.word	0x7fff0000
    2b64:	20012d08 	.word	0x20012d08
    2b68:	20012de8 	.word	0x20012de8
    2b6c:	47800000 	.word	0x47800000

00002b70 <QuadGauss34FIR128(int)>:
{
    2b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b74:	ed2d 8b0a 	vpush	{d8-d12}
    2b78:	b084      	sub	sp, #16
  float fltMagI[2]= {0.0, 0.0}; float fltMagQ[2]= {0.0, 0.0};  float fltComplexMagSq = 0.0 ;
    2b7a:	2300      	movs	r3, #0
          fltMagI[k] = .00001 * random(-100000,100001);
    2b7c:	4d92      	ldr	r5, [pc, #584]	; (2dc8 <QuadGauss34FIR128(int)+0x258>)
    2b7e:	af02      	add	r7, sp, #8
    2b80:	466e      	mov	r6, sp
      fltMagI[k] = (fltMagI[k] * fltRoot * fltSTD)/fltComplexMag;
    2b82:	eddf 8a92 	vldr	s17, [pc, #584]	; 2dcc <QuadGauss34FIR128(int)+0x25c>
    2b86:	46b8      	mov	r8, r7
          fltMagI[k] = .00001 * random(-100000,100001);
    2b88:	4c91      	ldr	r4, [pc, #580]	; (2dd0 <QuadGauss34FIR128(int)+0x260>)
  float fltMagI[2]= {0.0, 0.0}; float fltMagQ[2]= {0.0, 0.0};  float fltComplexMagSq = 0.0 ;
    2b8a:	9300      	str	r3, [sp, #0]
    2b8c:	9301      	str	r3, [sp, #4]
    2b8e:	9302      	str	r3, [sp, #8]
    2b90:	9303      	str	r3, [sp, #12]
          fltMagI[k] = .00001 * random(-100000,100001);
    2b92:	ed9f 9b89 	vldr	d9, [pc, #548]	; 2db8 <QuadGauss34FIR128(int)+0x248>
      while ((fltComplexMagSq >=1.0) || (fltComplexMagSq <.1))// This mechanism insures the ComplexMag random value falls inside the unit circle  ()
    2b96:	ed9f ab8a 	vldr	d10, [pc, #552]	; 2dc0 <QuadGauss34FIR128(int)+0x250>
    2b9a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
          fltMagI[k] = .00001 * random(-100000,100001);
    2b9e:	4629      	mov	r1, r5
    2ba0:	4620      	mov	r0, r4
    2ba2:	f018 f963 	bl	1ae6c <random(long, long)>
    2ba6:	ee07 0a10 	vmov	s14, r0
          fltMagQ[k] = .00001 * random(-100000,100001);
    2baa:	4629      	mov	r1, r5
    2bac:	4620      	mov	r0, r4
          fltMagI[k] = .00001 * random(-100000,100001);
    2bae:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    2bb2:	ee27 7b09 	vmul.f64	d7, d7, d9
    2bb6:	eef7 bbc7 	vcvt.f32.f64	s23, d7
    2bba:	edc6 ba00 	vstr	s23, [r6]
          fltMagQ[k] = .00001 * random(-100000,100001);
    2bbe:	f018 f955 	bl	1ae6c <random(long, long)>
    2bc2:	ee07 0a90 	vmov	s15, r0
    2bc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    2bca:	ee27 7b09 	vmul.f64	d7, d7, d9
    2bce:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
          fltComplexMagSq = (fltMagI[k] * fltMagI[k]) + (fltMagQ[k] * fltMagQ[k]);
    2bd2:	ee28 ca08 	vmul.f32	s24, s16, s16
          fltMagQ[k] = .00001 * random(-100000,100001);
    2bd6:	ed87 8a00 	vstr	s16, [r7]
          fltComplexMagSq = (fltMagI[k] * fltMagI[k]) + (fltMagQ[k] * fltMagQ[k]);
    2bda:	eeab caab 	vfma.f32	s24, s23, s23
      while ((fltComplexMagSq >=1.0) || (fltComplexMagSq <.1))// This mechanism insures the ComplexMag random value falls inside the unit circle  ()
    2bde:	eeb4 cacb 	vcmpe.f32	s24, s22
    2be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2be6:	dada      	bge.n	2b9e <QuadGauss34FIR128(int)+0x2e>
    2be8:	eeb7 7acc 	vcvt.f64.f32	d7, s24
    2bec:	eeb4 7bca 	vcmpe.f64	d7, d10
    2bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bf4:	d4d3      	bmi.n	2b9e <QuadGauss34FIR128(int)+0x2e>
    2bf6:	eeb5 ca40 	vcmp.f32	s24, #0.0
    2bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bfe:	f100 80d4 	bmi.w	2daa <QuadGauss34FIR128(int)+0x23a>
    2c02:	eeb1 bacc 	vsqrt.f32	s22, s24
  { return __builtin_logf(__x); }
    2c06:	eeb0 0a4c 	vmov.f32	s0, s24
    2c0a:	f01b fa71 	bl	1e0f0 <logf>
      fltRoot = sqrt(-2.0 * log(fltComplexMagSq));
    2c0e:	eeb8 7b00 	vmov.f64	d7, #128	; 0xc0000000 -2.0
    2c12:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2c16:	ee20 0b07 	vmul.f64	d0, d0, d7
    2c1a:	eeb5 0b40 	vcmp.f64	d0, #0.0
    2c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c22:	f100 80bd 	bmi.w	2da0 <QuadGauss34FIR128(int)+0x230>
    2c26:	eeb1 6bc0 	vsqrt.f64	d6, d0
    2c2a:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
      fltMagI[k] = (fltMagI[k] * fltRoot * fltSTD)/fltComplexMag;
    2c2e:	ee6b ba86 	vmul.f32	s23, s23, s12
      fltMagQ[k] = (fltMagQ[k] * fltRoot * fltSTD)/fltComplexMag;
    2c32:	ee28 7a06 	vmul.f32	s14, s16, s12
      fltMagI[k] = (fltMagI[k] * fltRoot * fltSTD)/fltComplexMag;
    2c36:	ee6b baa8 	vmul.f32	s23, s23, s17
      fltMagQ[k] = (fltMagQ[k] * fltRoot * fltSTD)/fltComplexMag;
    2c3a:	ee27 7a28 	vmul.f32	s14, s14, s17
      fltMagI[k] = (fltMagI[k] * fltRoot * fltSTD)/fltComplexMag;
    2c3e:	eecb 6a8b 	vdiv.f32	s13, s23, s22
      fltMagQ[k] = (fltMagQ[k] * fltRoot * fltSTD)/fltComplexMag;
    2c42:	eec7 7a0b 	vdiv.f32	s15, s14, s22
      fltMagI[k] = (fltMagI[k] * fltRoot * fltSTD)/fltComplexMag;
    2c46:	ece6 6a01 	vstmia	r6!, {s13}
  for (int k=0; k<2; k++)
    2c4a:	45b0      	cmp	r8, r6
      fltMagQ[k] = (fltMagQ[k] * fltRoot * fltSTD)/fltComplexMag;
    2c4c:	ece7 7a01 	vstmia	r7!, {s15}
  for (int k=0; k<2; k++)
    2c50:	d1a3      	bne.n	2b9a <QuadGauss34FIR128(int)+0x2a>
  firI3.delayx = delay_bufferI3;
    2c52:	4860      	ldr	r0, [pc, #384]	; (2dd4 <QuadGauss34FIR128(int)+0x264>)
  firI3.nh = 128;
    2c54:	2580      	movs	r5, #128	; 0x80
  firI3.h = gaus_fir_coeffs;
    2c56:	4c60      	ldr	r4, [pc, #384]	; (2dd8 <QuadGauss34FIR128(int)+0x268>)
  firI3.x = fltMagI[0];
    2c58:	9b00      	ldr	r3, [sp, #0]
  firI3.delayx = delay_bufferI3;
    2c5a:	4a60      	ldr	r2, [pc, #384]	; (2ddc <QuadGauss34FIR128(int)+0x26c>)
  firQ3.delayx = delay_bufferQ3;
    2c5c:	4e60      	ldr	r6, [pc, #384]	; (2de0 <QuadGauss34FIR128(int)+0x270>)
  firI3.delayx = delay_bufferI3;
    2c5e:	60c2      	str	r2, [r0, #12]
  firI3.nh = 128;
    2c60:	8085      	strh	r5, [r0, #4]
  firI3.h = gaus_fir_coeffs;
    2c62:	6084      	str	r4, [r0, #8]
  firI3.x = fltMagI[0];
    2c64:	6003      	str	r3, [r0, #0]
  fir_float(&firI3);
    2c66:	f7ff fddf 	bl	2828 <fir_float(fir_arg_float_t volatile*)>
  firQ3.x = fltMagQ[0];
    2c6a:	9b02      	ldr	r3, [sp, #8]
  firQ3.delayx = delay_bufferQ3;
    2c6c:	4a5d      	ldr	r2, [pc, #372]	; (2de4 <QuadGauss34FIR128(int)+0x274>)
  fltI3 = firI3.r;
    2c6e:	ed90 5a04 	vldr	s10, [r0, #16]
  fir_float(&firQ3);
    2c72:	4630      	mov	r0, r6
  firI4.delayx = delay_bufferI4;
    2c74:	4f5c      	ldr	r7, [pc, #368]	; (2de8 <QuadGauss34FIR128(int)+0x278>)
  firQ3.delayx = delay_bufferQ3;
    2c76:	60f2      	str	r2, [r6, #12]
  firQ3.nh = 128;
    2c78:	80b5      	strh	r5, [r6, #4]
  firQ3.h = gaus_fir_coeffs;
    2c7a:	60b4      	str	r4, [r6, #8]
  firQ3.x = fltMagQ[0];
    2c7c:	6033      	str	r3, [r6, #0]
  fir_float(&firQ3);
    2c7e:	f7ff fdd3 	bl	2828 <fir_float(fir_arg_float_t volatile*)>
  firI4.x = fltMagI[1];
    2c82:	9b01      	ldr	r3, [sp, #4]
  fir_float(&firI4);
    2c84:	4638      	mov	r0, r7
  firI4.delayx = delay_bufferI4;
    2c86:	4a59      	ldr	r2, [pc, #356]	; (2dec <QuadGauss34FIR128(int)+0x27c>)
  fltQ3 = firQ3.r;
    2c88:	ed96 6a04 	vldr	s12, [r6, #16]
  firQ4.delayx = delay_bufferQ4;
    2c8c:	4e58      	ldr	r6, [pc, #352]	; (2df0 <QuadGauss34FIR128(int)+0x280>)
  firI4.delayx = delay_bufferI4;
    2c8e:	60fa      	str	r2, [r7, #12]
  firI4.nh = 128;
    2c90:	80bd      	strh	r5, [r7, #4]
  firI4.h = gaus_fir_coeffs;
    2c92:	60bc      	str	r4, [r7, #8]
  firI4.x = fltMagI[1];
    2c94:	603b      	str	r3, [r7, #0]
  fir_float(&firI4);
    2c96:	f7ff fdc7 	bl	2828 <fir_float(fir_arg_float_t volatile*)>
  firQ4.x = fltMagQ[1];
    2c9a:	9b03      	ldr	r3, [sp, #12]
  fir_float(&firQ4);
    2c9c:	4630      	mov	r0, r6
  firQ4.delayx = delay_bufferQ4;
    2c9e:	4a55      	ldr	r2, [pc, #340]	; (2df4 <QuadGauss34FIR128(int)+0x284>)
  fltI4 = firI4.r;
    2ca0:	edd7 5a04 	vldr	s11, [r7, #16]
  firQ4.delayx = delay_bufferQ4;
    2ca4:	60f2      	str	r2, [r6, #12]
  firQ4.nh = 128;
    2ca6:	80b5      	strh	r5, [r6, #4]
  firQ4.h = gaus_fir_coeffs;
    2ca8:	60b4      	str	r4, [r6, #8]
  firQ4.x = fltMagQ[1];
    2caa:	6033      	str	r3, [r6, #0]
  fir_float(&firQ4);
    2cac:	f7ff fdbc 	bl	2828 <fir_float(fir_arg_float_t volatile*)>
		if (gain > 32767.0f) gain = 32767.0f;
    2cb0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 2df8 <QuadGauss34FIR128(int)+0x288>
  fltQ4 = firQ4.r;
    2cb4:	edd6 7a04 	vldr	s15, [r6, #16]
    2cb8:	eeb4 5ac7 	vcmpe.f32	s10, s14
    2cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2cc0:	dc08      	bgt.n	2cd4 <QuadGauss34FIR128(int)+0x164>
		else if (gain < -32767.0f) gain = -32767.0f;
    2cc2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 2dfc <QuadGauss34FIR128(int)+0x28c>
    2cc6:	eeb4 5ac7 	vcmpe.f32	s10, s14
    2cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2cce:	d560      	bpl.n	2d92 <QuadGauss34FIR128(int)+0x222>
    2cd0:	4b4b      	ldr	r3, [pc, #300]	; (2e00 <QuadGauss34FIR128(int)+0x290>)
    2cd2:	e000      	b.n	2cd6 <QuadGauss34FIR128(int)+0x166>
    2cd4:	4b4b      	ldr	r3, [pc, #300]	; (2e04 <QuadGauss34FIR128(int)+0x294>)
		if (gain > 32767.0f) gain = 32767.0f;
    2cd6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 2dfc <QuadGauss34FIR128(int)+0x28c>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2cda:	494b      	ldr	r1, [pc, #300]	; (2e08 <QuadGauss34FIR128(int)+0x298>)
		if (gain > 32767.0f) gain = 32767.0f;
    2cdc:	eeb4 6ac7 	vcmpe.f32	s12, s14
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2ce0:	61cb      	str	r3, [r1, #28]
		if (gain > 32767.0f) gain = 32767.0f;
    2ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ce6:	d408      	bmi.n	2cfa <QuadGauss34FIR128(int)+0x18a>
		else if (gain < -32767.0f) gain = -32767.0f;
    2ce8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 2df8 <QuadGauss34FIR128(int)+0x288>
    2cec:	eeb4 6ac7 	vcmpe.f32	s12, s14
    2cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2cf4:	dd44      	ble.n	2d80 <QuadGauss34FIR128(int)+0x210>
    2cf6:	4b42      	ldr	r3, [pc, #264]	; (2e00 <QuadGauss34FIR128(int)+0x290>)
    2cf8:	e000      	b.n	2cfc <QuadGauss34FIR128(int)+0x18c>
    2cfa:	4b42      	ldr	r3, [pc, #264]	; (2e04 <QuadGauss34FIR128(int)+0x294>)
		if (gain > 32767.0f) gain = 32767.0f;
    2cfc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 2df8 <QuadGauss34FIR128(int)+0x288>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2d00:	618b      	str	r3, [r1, #24]
		if (gain > 32767.0f) gain = 32767.0f;
    2d02:	eef4 5ac7 	vcmpe.f32	s11, s14
    2d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d0a:	dc08      	bgt.n	2d1e <QuadGauss34FIR128(int)+0x1ae>
		else if (gain < -32767.0f) gain = -32767.0f;
    2d0c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 2dfc <QuadGauss34FIR128(int)+0x28c>
    2d10:	eef4 5ac7 	vcmpe.f32	s11, s14
    2d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d18:	d52b      	bpl.n	2d72 <QuadGauss34FIR128(int)+0x202>
    2d1a:	4b39      	ldr	r3, [pc, #228]	; (2e00 <QuadGauss34FIR128(int)+0x290>)
    2d1c:	e000      	b.n	2d20 <QuadGauss34FIR128(int)+0x1b0>
    2d1e:	4b39      	ldr	r3, [pc, #228]	; (2e04 <QuadGauss34FIR128(int)+0x294>)
		if (gain > 32767.0f) gain = 32767.0f;
    2d20:	ed9f 7a36 	vldr	s14, [pc, #216]	; 2dfc <QuadGauss34FIR128(int)+0x28c>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2d24:	624b      	str	r3, [r1, #36]	; 0x24
		if (gain > 32767.0f) gain = 32767.0f;
    2d26:	eef4 7ac7 	vcmpe.f32	s15, s14
    2d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d2e:	d408      	bmi.n	2d42 <QuadGauss34FIR128(int)+0x1d2>
		else if (gain < -32767.0f) gain = -32767.0f;
    2d30:	ed9f 7a31 	vldr	s14, [pc, #196]	; 2df8 <QuadGauss34FIR128(int)+0x288>
    2d34:	eef4 7ac7 	vcmpe.f32	s15, s14
    2d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d3c:	dd10      	ble.n	2d60 <QuadGauss34FIR128(int)+0x1f0>
    2d3e:	4b30      	ldr	r3, [pc, #192]	; (2e00 <QuadGauss34FIR128(int)+0x290>)
    2d40:	e000      	b.n	2d44 <QuadGauss34FIR128(int)+0x1d4>
    2d42:	4b30      	ldr	r3, [pc, #192]	; (2e04 <QuadGauss34FIR128(int)+0x294>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    2d44:	4a31      	ldr	r2, [pc, #196]	; (2e0c <QuadGauss34FIR128(int)+0x29c>)
    2d46:	2000      	movs	r0, #0
    2d48:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    2d4c:	620b      	str	r3, [r1, #32]
    2d4e:	6250      	str	r0, [r2, #36]	; 0x24
    2d50:	6194      	str	r4, [r2, #24]
    2d52:	e9c2 0007 	strd	r0, r0, [r2, #28]
}//  End *************************************** QuadGauss34FIR128************************************
    2d56:	b004      	add	sp, #16
    2d58:	ecbd 8b0a 	vpop	{d8-d12}
    2d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d60:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 2e10 <QuadGauss34FIR128(int)+0x2a0>
    2d64:	ee67 7ac7 	vnmul.f32	s15, s15, s14
    2d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2d6c:	ee17 3a90 	vmov	r3, s15
    2d70:	e7e8      	b.n	2d44 <QuadGauss34FIR128(int)+0x1d4>
    2d72:	eeb0 7a65 	vmov.f32	s14, s11
    2d76:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    2d7a:	ee17 3a10 	vmov	r3, s14
    2d7e:	e7cf      	b.n	2d20 <QuadGauss34FIR128(int)+0x1b0>
    2d80:	ed9f 7a23 	vldr	s14, [pc, #140]	; 2e10 <QuadGauss34FIR128(int)+0x2a0>
    2d84:	ee26 6a47 	vnmul.f32	s12, s12, s14
    2d88:	eebd 7ac6 	vcvt.s32.f32	s14, s12
    2d8c:	ee17 3a10 	vmov	r3, s14
    2d90:	e7b4      	b.n	2cfc <QuadGauss34FIR128(int)+0x18c>
    2d92:	eeb0 7a45 	vmov.f32	s14, s10
    2d96:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    2d9a:	ee17 3a10 	vmov	r3, s14
    2d9e:	e79a      	b.n	2cd6 <QuadGauss34FIR128(int)+0x166>
      fltRoot = sqrt(-2.0 * log(fltComplexMagSq));
    2da0:	f01b fd7e 	bl	1e8a0 <sqrt>
    2da4:	eeb0 6b40 	vmov.f64	d6, d0
    2da8:	e73f      	b.n	2c2a <QuadGauss34FIR128(int)+0xba>
  { return __builtin_sqrtf(__x); }
    2daa:	eeb0 0a4c 	vmov.f32	s0, s24
    2dae:	f01b fd1f 	bl	1e7f0 <sqrtf>
    2db2:	eeb0 ba40 	vmov.f32	s22, s0
    2db6:	e726      	b.n	2c06 <QuadGauss34FIR128(int)+0x96>
    2db8:	88e368f1 	.word	0x88e368f1
    2dbc:	3ee4f8b5 	.word	0x3ee4f8b5
    2dc0:	9999999a 	.word	0x9999999a
    2dc4:	3fb99999 	.word	0x3fb99999
    2dc8:	000186a1 	.word	0x000186a1
    2dcc:	40350511 	.word	0x40350511
    2dd0:	fffe7960 	.word	0xfffe7960
    2dd4:	2001292c 	.word	0x2001292c
    2dd8:	20008f70 	.word	0x20008f70
    2ddc:	2000fae0 	.word	0x2000fae0
    2de0:	2001297c 	.word	0x2001297c
    2de4:	200102e0 	.word	0x200102e0
    2de8:	20012940 	.word	0x20012940
    2dec:	2000fce0 	.word	0x2000fce0
    2df0:	20012990 	.word	0x20012990
    2df4:	200104e0 	.word	0x200104e0
    2df8:	46fffe00 	.word	0x46fffe00
    2dfc:	c6fffe00 	.word	0xc6fffe00
    2e00:	80010000 	.word	0x80010000
    2e04:	7fff0000 	.word	0x7fff0000
    2e08:	20012d78 	.word	0x20012d78
    2e0c:	20012de8 	.word	0x20012de8
    2e10:	47800000 	.word	0x47800000

00002e14 <SetIQTapDelays(int)>:
{
      //These delay guidelines for MPG-MPP Described on Rec 520-2 pages 1, 2. 
      //For 2 paths use minimum delay for for Path 1, max delay for path for Path 2
      //For 4 paths use same delay increment (.5 x delay of Path type) between paths (Peter's recommendation except for 4 path MPG) 
      
     if (intMultipaths < 4)
    2e14:	4b8f      	ldr	r3, [pc, #572]	; (3054 <SetIQTapDelays(int)+0x240>)
    2e16:	681b      	ldr	r3, [r3, #0]
    2e18:	2b03      	cmp	r3, #3
{
    2e1a:	b570      	push	{r4, r5, r6, lr}
     if (intMultipaths < 4)
    2e1c:	dc08      	bgt.n	2e30 <SetIQTapDelays(int)+0x1c>
      {
        switch (intMode)
    2e1e:	2804      	cmp	r0, #4
    2e20:	d808      	bhi.n	2e34 <SetIQTapDelays(int)+0x20>
    2e22:	e8df f010 	tbh	[pc, r0, lsl #1]
    2e26:	0048      	.short	0x0048
    2e28:	00a90075 	.word	0x00a90075
    2e2c:	001100dd 	.word	0x001100dd
            case 4:   delayI.delay(0, fltMinimumIDelayMs);delayQ.delay(0,0.0);   //MPD Path #1 
                      delayI.delay(1, fltMinimumIDelayMs + 4.0);delayQ.delay(1, 4.0); break; //MPD Path #2
         
          }
      }
    if (intMultipaths == 4)
    2e30:	2b04      	cmp	r3, #4
    2e32:	d000      	beq.n	2e36 <SetIQTapDelays(int)+0x22>
                      delayI.delay(3, fltMinimumIDelayMs + 6.0);delayQ.delay(3, 6.0); break; //MPD Path #4
        }
        
      }
    //Serial.print("Line 1014 SetIQTapDelays: intMode = ");Serial.print(intMode); Serial.print("  Paths:"); Serial.println(intMultipaths);
} // End SetIQTapDelays **************************************************************************
    2e34:	bd70      	pop	{r4, r5, r6, pc}
        switch (intMode)
    2e36:	2804      	cmp	r0, #4
    2e38:	d8fc      	bhi.n	2e34 <SetIQTapDelays(int)+0x20>
    2e3a:	e8df f010 	tbh	[pc, r0, lsl #1]
    2e3e:	02c2      	.short	0x02c2
    2e40:	01e90255 	.word	0x01e90255
    2e44:	0111017e 	.word	0x0111017e
		if (milliseconds < 0.0f) milliseconds = 0.0f;
		uint32_t n = (milliseconds*(AUDIO_SAMPLE_RATE_EXACT/1000.0f))+0.5f;
		uint32_t nmax = AUDIO_BLOCK_SAMPLES * (DELAY_QUEUE_SIZE-1);
		if (n > nmax) n = nmax;
		uint32_t blks = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
		if (!(activemask & (1<<channel))) {
    2e48:	4b83      	ldr	r3, [pc, #524]	; (3058 <SetIQTapDelays(int)+0x244>)
    2e4a:	7e18      	ldrb	r0, [r3, #24]
    2e4c:	07c2      	lsls	r2, r0, #31
    2e4e:	f140 8304 	bpl.w	345a <SetIQTapDelays(int)+0x646>
			// enabling a previously disabled channel
			position[channel] = n;
			if (blks > maxblocks) maxblocks = blks;
			activemask |= (1<<channel);
		} else {
			if (n > position[channel]) {
    2e52:	6a1a      	ldr	r2, [r3, #32]
    2e54:	2a3a      	cmp	r2, #58	; 0x3a
    2e56:	f200 8670 	bhi.w	3b3a <SetIQTapDelays(int)+0xd26>
				// new delay is greater than previous setting
				if (blks > maxblocks) maxblocks = blks;
    2e5a:	8bda      	ldrh	r2, [r3, #30]
    2e5c:	2a01      	cmp	r2, #1
    2e5e:	d801      	bhi.n	2e64 <SetIQTapDelays(int)+0x50>
    2e60:	2202      	movs	r2, #2
    2e62:	83da      	strh	r2, [r3, #30]
				position[channel] = n;
    2e64:	223b      	movs	r2, #59	; 0x3b
    2e66:	621a      	str	r2, [r3, #32]
		if (!(activemask & (1<<channel))) {
    2e68:	4a7c      	ldr	r2, [pc, #496]	; (305c <SetIQTapDelays(int)+0x248>)
    2e6a:	7e11      	ldrb	r1, [r2, #24]
    2e6c:	f011 0401 	ands.w	r4, r1, #1
    2e70:	f040 838e 	bne.w	3590 <SetIQTapDelays(int)+0x77c>
			position[channel] = n;
    2e74:	6214      	str	r4, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
    2e76:	8bd4      	ldrh	r4, [r2, #30]
    2e78:	b90c      	cbnz	r4, 2e7e <SetIQTapDelays(int)+0x6a>
    2e7a:	2401      	movs	r4, #1
    2e7c:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    2e7e:	f041 0101 	orr.w	r1, r1, #1
    2e82:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    2e84:	0785      	lsls	r5, r0, #30
    2e86:	f100 8377 	bmi.w	3578 <SetIQTapDelays(int)+0x764>
			position[channel] = n;
    2e8a:	24eb      	movs	r4, #235	; 0xeb
    2e8c:	625c      	str	r4, [r3, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    2e8e:	8bdc      	ldrh	r4, [r3, #30]
    2e90:	2c02      	cmp	r4, #2
    2e92:	d801      	bhi.n	2e98 <SetIQTapDelays(int)+0x84>
    2e94:	2403      	movs	r4, #3
    2e96:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    2e98:	f040 0002 	orr.w	r0, r0, #2
    2e9c:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    2e9e:	078c      	lsls	r4, r1, #30
    2ea0:	f100 8393 	bmi.w	35ca <SetIQTapDelays(int)+0x7b6>
			if (blks > maxblocks) maxblocks = blks;
    2ea4:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
    2ea6:	20b0      	movs	r0, #176	; 0xb0
			if (blks > maxblocks) maxblocks = blks;
    2ea8:	2b02      	cmp	r3, #2
			position[channel] = n;
    2eaa:	6250      	str	r0, [r2, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    2eac:	f200 80cd 	bhi.w	304a <SetIQTapDelays(int)+0x236>
    2eb0:	2303      	movs	r3, #3
    2eb2:	83d3      	strh	r3, [r2, #30]
    2eb4:	e0c9      	b.n	304a <SetIQTapDelays(int)+0x236>
		if (!(activemask & (1<<channel))) {
    2eb6:	4b68      	ldr	r3, [pc, #416]	; (3058 <SetIQTapDelays(int)+0x244>)
    2eb8:	7e18      	ldrb	r0, [r3, #24]
    2eba:	07c2      	lsls	r2, r0, #31
    2ebc:	f140 82d8 	bpl.w	3470 <SetIQTapDelays(int)+0x65c>
			if (n > position[channel]) {
    2ec0:	6a1a      	ldr	r2, [r3, #32]
    2ec2:	2a3a      	cmp	r2, #58	; 0x3a
    2ec4:	f200 86ba 	bhi.w	3c3c <SetIQTapDelays(int)+0xe28>
				if (blks > maxblocks) maxblocks = blks;
    2ec8:	8bda      	ldrh	r2, [r3, #30]
    2eca:	2a01      	cmp	r2, #1
    2ecc:	d801      	bhi.n	2ed2 <SetIQTapDelays(int)+0xbe>
    2ece:	2202      	movs	r2, #2
    2ed0:	83da      	strh	r2, [r3, #30]
				position[channel] = n;
    2ed2:	223b      	movs	r2, #59	; 0x3b
    2ed4:	621a      	str	r2, [r3, #32]
		if (!(activemask & (1<<channel))) {
    2ed6:	4a61      	ldr	r2, [pc, #388]	; (305c <SetIQTapDelays(int)+0x248>)
    2ed8:	7e11      	ldrb	r1, [r2, #24]
    2eda:	f011 0301 	ands.w	r3, r1, #1
    2ede:	f000 8309 	beq.w	34f4 <SetIQTapDelays(int)+0x6e0>
			} else {
				// new delay is less than previous setting
				position[channel] = n;
    2ee2:	2000      	movs	r0, #0
    2ee4:	4614      	mov	r4, r2
	}
	virtual void update(void);
private:
	void recompute_maxblocks(void) {
		uint32_t max=0;
		uint32_t channel = 0;
    2ee6:	4603      	mov	r3, r0
		uint32_t max=0;
    2ee8:	4605      	mov	r5, r0
				position[channel] = n;
    2eea:	f844 0f20 	str.w	r0, [r4, #32]!
		do {
			if (activemask & (1<<channel)) {
    2eee:	fa41 f003 	asr.w	r0, r1, r3
    2ef2:	07c0      	lsls	r0, r0, #31
    2ef4:	d507      	bpl.n	2f06 <SetIQTapDelays(int)+0xf2>
				uint32_t n = position[channel];
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    2ef6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    2efa:	307f      	adds	r0, #127	; 0x7f
    2efc:	09c0      	lsrs	r0, r0, #7
    2efe:	3001      	adds	r0, #1
    2f00:	4285      	cmp	r5, r0
    2f02:	bf38      	it	cc
    2f04:	4605      	movcc	r5, r0
				if (n > max) max = n;
			}
		} while(++channel < 8);
    2f06:	3301      	adds	r3, #1
    2f08:	2b08      	cmp	r3, #8
    2f0a:	d1f0      	bne.n	2eee <SetIQTapDelays(int)+0xda>
		maxblocks = max;
    2f0c:	83d5      	strh	r5, [r2, #30]
} // End SetIQTapDelays **************************************************************************
    2f0e:	bd70      	pop	{r4, r5, r6, pc}
		if (!(activemask & (1<<channel))) {
    2f10:	4b51      	ldr	r3, [pc, #324]	; (3058 <SetIQTapDelays(int)+0x244>)
    2f12:	7e18      	ldrb	r0, [r3, #24]
    2f14:	07c2      	lsls	r2, r0, #31
    2f16:	f140 8295 	bpl.w	3444 <SetIQTapDelays(int)+0x630>
			if (n > position[channel]) {
    2f1a:	6a1a      	ldr	r2, [r3, #32]
    2f1c:	2a3a      	cmp	r2, #58	; 0x3a
    2f1e:	f200 8675 	bhi.w	3c0c <SetIQTapDelays(int)+0xdf8>
				if (blks > maxblocks) maxblocks = blks;
    2f22:	8bda      	ldrh	r2, [r3, #30]
    2f24:	2a01      	cmp	r2, #1
    2f26:	d801      	bhi.n	2f2c <SetIQTapDelays(int)+0x118>
    2f28:	2202      	movs	r2, #2
    2f2a:	83da      	strh	r2, [r3, #30]
				position[channel] = n;
    2f2c:	223b      	movs	r2, #59	; 0x3b
    2f2e:	621a      	str	r2, [r3, #32]
		if (!(activemask & (1<<channel))) {
    2f30:	4a4a      	ldr	r2, [pc, #296]	; (305c <SetIQTapDelays(int)+0x248>)
    2f32:	7e11      	ldrb	r1, [r2, #24]
    2f34:	f011 0401 	ands.w	r4, r1, #1
    2f38:	f040 82fd 	bne.w	3536 <SetIQTapDelays(int)+0x722>
			position[channel] = n;
    2f3c:	6214      	str	r4, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
    2f3e:	8bd4      	ldrh	r4, [r2, #30]
    2f40:	b90c      	cbnz	r4, 2f46 <SetIQTapDelays(int)+0x132>
    2f42:	2401      	movs	r4, #1
    2f44:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    2f46:	f041 0101 	orr.w	r1, r1, #1
    2f4a:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    2f4c:	0785      	lsls	r5, r0, #30
    2f4e:	f100 82e6 	bmi.w	351e <SetIQTapDelays(int)+0x70a>
			position[channel] = n;
    2f52:	2451      	movs	r4, #81	; 0x51
    2f54:	625c      	str	r4, [r3, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    2f56:	8bdc      	ldrh	r4, [r3, #30]
    2f58:	2c01      	cmp	r4, #1
    2f5a:	d801      	bhi.n	2f60 <SetIQTapDelays(int)+0x14c>
    2f5c:	2402      	movs	r4, #2
    2f5e:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    2f60:	f040 0002 	orr.w	r0, r0, #2
    2f64:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    2f66:	078c      	lsls	r4, r1, #30
    2f68:	f100 82cd 	bmi.w	3506 <SetIQTapDelays(int)+0x6f2>
			if (blks > maxblocks) maxblocks = blks;
    2f6c:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
    2f6e:	2016      	movs	r0, #22
			if (blks > maxblocks) maxblocks = blks;
    2f70:	2b01      	cmp	r3, #1
			position[channel] = n;
    2f72:	6250      	str	r0, [r2, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    2f74:	d869      	bhi.n	304a <SetIQTapDelays(int)+0x236>
    2f76:	e066      	b.n	3046 <SetIQTapDelays(int)+0x232>
		if (!(activemask & (1<<channel))) {
    2f78:	4b37      	ldr	r3, [pc, #220]	; (3058 <SetIQTapDelays(int)+0x244>)
    2f7a:	7e18      	ldrb	r0, [r3, #24]
    2f7c:	07c2      	lsls	r2, r0, #31
    2f7e:	f140 8256 	bpl.w	342e <SetIQTapDelays(int)+0x61a>
			if (n > position[channel]) {
    2f82:	6a1a      	ldr	r2, [r3, #32]
    2f84:	2a3a      	cmp	r2, #58	; 0x3a
    2f86:	f200 8542 	bhi.w	3a0e <SetIQTapDelays(int)+0xbfa>
				if (blks > maxblocks) maxblocks = blks;
    2f8a:	8bda      	ldrh	r2, [r3, #30]
    2f8c:	2a01      	cmp	r2, #1
    2f8e:	d801      	bhi.n	2f94 <SetIQTapDelays(int)+0x180>
    2f90:	2202      	movs	r2, #2
    2f92:	83da      	strh	r2, [r3, #30]
				position[channel] = n;
    2f94:	223b      	movs	r2, #59	; 0x3b
    2f96:	621a      	str	r2, [r3, #32]
		if (!(activemask & (1<<channel))) {
    2f98:	4a30      	ldr	r2, [pc, #192]	; (305c <SetIQTapDelays(int)+0x248>)
    2f9a:	7e11      	ldrb	r1, [r2, #24]
    2f9c:	f011 0401 	ands.w	r4, r1, #1
    2fa0:	f040 8360 	bne.w	3664 <SetIQTapDelays(int)+0x850>
			position[channel] = n;
    2fa4:	6214      	str	r4, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
    2fa6:	8bd4      	ldrh	r4, [r2, #30]
    2fa8:	b90c      	cbnz	r4, 2fae <SetIQTapDelays(int)+0x19a>
    2faa:	2401      	movs	r4, #1
    2fac:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    2fae:	f041 0101 	orr.w	r1, r1, #1
    2fb2:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    2fb4:	0785      	lsls	r5, r0, #30
    2fb6:	f100 8349 	bmi.w	364c <SetIQTapDelays(int)+0x838>
			position[channel] = n;
    2fba:	2467      	movs	r4, #103	; 0x67
    2fbc:	625c      	str	r4, [r3, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    2fbe:	8bdc      	ldrh	r4, [r3, #30]
    2fc0:	2c01      	cmp	r4, #1
    2fc2:	d801      	bhi.n	2fc8 <SetIQTapDelays(int)+0x1b4>
    2fc4:	2402      	movs	r4, #2
    2fc6:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    2fc8:	f040 0002 	orr.w	r0, r0, #2
    2fcc:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    2fce:	078c      	lsls	r4, r1, #30
    2fd0:	f100 8365 	bmi.w	369e <SetIQTapDelays(int)+0x88a>
			if (blks > maxblocks) maxblocks = blks;
    2fd4:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
    2fd6:	202c      	movs	r0, #44	; 0x2c
			if (blks > maxblocks) maxblocks = blks;
    2fd8:	2b01      	cmp	r3, #1
			position[channel] = n;
    2fda:	6250      	str	r0, [r2, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    2fdc:	d835      	bhi.n	304a <SetIQTapDelays(int)+0x236>
    2fde:	e032      	b.n	3046 <SetIQTapDelays(int)+0x232>
		if (!(activemask & (1<<channel))) {
    2fe0:	4b1d      	ldr	r3, [pc, #116]	; (3058 <SetIQTapDelays(int)+0x244>)
    2fe2:	7e18      	ldrb	r0, [r3, #24]
    2fe4:	07c2      	lsls	r2, r0, #31
    2fe6:	f140 8217 	bpl.w	3418 <SetIQTapDelays(int)+0x604>
			if (n > position[channel]) {
    2fea:	6a1a      	ldr	r2, [r3, #32]
    2fec:	2a3a      	cmp	r2, #58	; 0x3a
    2fee:	f200 8544 	bhi.w	3a7a <SetIQTapDelays(int)+0xc66>
				if (blks > maxblocks) maxblocks = blks;
    2ff2:	8bda      	ldrh	r2, [r3, #30]
    2ff4:	2a01      	cmp	r2, #1
    2ff6:	d801      	bhi.n	2ffc <SetIQTapDelays(int)+0x1e8>
    2ff8:	2202      	movs	r2, #2
    2ffa:	83da      	strh	r2, [r3, #30]
				position[channel] = n;
    2ffc:	223b      	movs	r2, #59	; 0x3b
    2ffe:	621a      	str	r2, [r3, #32]
		if (!(activemask & (1<<channel))) {
    3000:	4a16      	ldr	r2, [pc, #88]	; (305c <SetIQTapDelays(int)+0x248>)
    3002:	7e11      	ldrb	r1, [r2, #24]
    3004:	f011 0401 	ands.w	r4, r1, #1
    3008:	f040 82f7 	bne.w	35fa <SetIQTapDelays(int)+0x7e6>
			position[channel] = n;
    300c:	6214      	str	r4, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
    300e:	8bd4      	ldrh	r4, [r2, #30]
    3010:	b90c      	cbnz	r4, 3016 <SetIQTapDelays(int)+0x202>
    3012:	2401      	movs	r4, #1
    3014:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    3016:	f041 0101 	orr.w	r1, r1, #1
    301a:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    301c:	0785      	lsls	r5, r0, #30
    301e:	f100 82e0 	bmi.w	35e2 <SetIQTapDelays(int)+0x7ce>
			position[channel] = n;
    3022:	2493      	movs	r4, #147	; 0x93
    3024:	625c      	str	r4, [r3, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    3026:	8bdc      	ldrh	r4, [r3, #30]
    3028:	2c02      	cmp	r4, #2
    302a:	d801      	bhi.n	3030 <SetIQTapDelays(int)+0x21c>
    302c:	2403      	movs	r4, #3
    302e:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    3030:	f040 0002 	orr.w	r0, r0, #2
    3034:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    3036:	078c      	lsls	r4, r1, #30
    3038:	f100 82fc 	bmi.w	3634 <SetIQTapDelays(int)+0x820>
			if (blks > maxblocks) maxblocks = blks;
    303c:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
    303e:	2058      	movs	r0, #88	; 0x58
			if (blks > maxblocks) maxblocks = blks;
    3040:	2b01      	cmp	r3, #1
			position[channel] = n;
    3042:	6250      	str	r0, [r2, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    3044:	d801      	bhi.n	304a <SetIQTapDelays(int)+0x236>
    3046:	2302      	movs	r3, #2
    3048:	83d3      	strh	r3, [r2, #30]
			activemask |= (1<<channel);
    304a:	f041 0102 	orr.w	r1, r1, #2
    304e:	7611      	strb	r1, [r2, #24]
    3050:	bd70      	pop	{r4, r5, r6, pc}
    3052:	bf00      	nop
    3054:	20009a48 	.word	0x20009a48
    3058:	2000cb40 	.word	0x2000cb40
    305c:	2000e110 	.word	0x2000e110
		if (!(activemask & (1<<channel))) {
    3060:	4b9f      	ldr	r3, [pc, #636]	; (32e0 <SetIQTapDelays(int)+0x4cc>)
    3062:	7e18      	ldrb	r0, [r3, #24]
    3064:	07c2      	lsls	r2, r0, #31
    3066:	f140 823a 	bpl.w	34de <SetIQTapDelays(int)+0x6ca>
			if (n > position[channel]) {
    306a:	6a1a      	ldr	r2, [r3, #32]
    306c:	2a3a      	cmp	r2, #58	; 0x3a
    306e:	f200 8778 	bhi.w	3f62 <SetIQTapDelays(int)+0x114e>
				if (blks > maxblocks) maxblocks = blks;
    3072:	8bda      	ldrh	r2, [r3, #30]
    3074:	2a01      	cmp	r2, #1
    3076:	d801      	bhi.n	307c <SetIQTapDelays(int)+0x268>
    3078:	2202      	movs	r2, #2
    307a:	83da      	strh	r2, [r3, #30]
				position[channel] = n;
    307c:	223b      	movs	r2, #59	; 0x3b
    307e:	621a      	str	r2, [r3, #32]
		if (!(activemask & (1<<channel))) {
    3080:	4a98      	ldr	r2, [pc, #608]	; (32e4 <SetIQTapDelays(int)+0x4d0>)
    3082:	7e11      	ldrb	r1, [r2, #24]
    3084:	f011 0401 	ands.w	r4, r1, #1
    3088:	f040 8480 	bne.w	398c <SetIQTapDelays(int)+0xb78>
			position[channel] = n;
    308c:	6214      	str	r4, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
    308e:	8bd4      	ldrh	r4, [r2, #30]
    3090:	b90c      	cbnz	r4, 3096 <SetIQTapDelays(int)+0x282>
    3092:	2401      	movs	r4, #1
    3094:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    3096:	f041 0101 	orr.w	r1, r1, #1
    309a:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    309c:	0785      	lsls	r5, r0, #30
    309e:	f100 8468 	bmi.w	3972 <SetIQTapDelays(int)+0xb5e>
			position[channel] = n;
    30a2:	2493      	movs	r4, #147	; 0x93
    30a4:	625c      	str	r4, [r3, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    30a6:	8bdc      	ldrh	r4, [r3, #30]
    30a8:	2c02      	cmp	r4, #2
    30aa:	d801      	bhi.n	30b0 <SetIQTapDelays(int)+0x29c>
    30ac:	2403      	movs	r4, #3
    30ae:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    30b0:	f040 0002 	orr.w	r0, r0, #2
    30b4:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    30b6:	078d      	lsls	r5, r1, #30
    30b8:	f100 83eb 	bmi.w	3892 <SetIQTapDelays(int)+0xa7e>
			position[channel] = n;
    30bc:	2458      	movs	r4, #88	; 0x58
    30be:	6254      	str	r4, [r2, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    30c0:	8bd4      	ldrh	r4, [r2, #30]
    30c2:	2c01      	cmp	r4, #1
    30c4:	d801      	bhi.n	30ca <SetIQTapDelays(int)+0x2b6>
    30c6:	2402      	movs	r4, #2
    30c8:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    30ca:	f041 0102 	orr.w	r1, r1, #2
    30ce:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    30d0:	0745      	lsls	r5, r0, #29
    30d2:	f100 83d2 	bmi.w	387a <SetIQTapDelays(int)+0xa66>
			position[channel] = n;
    30d6:	24eb      	movs	r4, #235	; 0xeb
    30d8:	629c      	str	r4, [r3, #40]	; 0x28
			if (blks > maxblocks) maxblocks = blks;
    30da:	8bdc      	ldrh	r4, [r3, #30]
    30dc:	2c02      	cmp	r4, #2
    30de:	d801      	bhi.n	30e4 <SetIQTapDelays(int)+0x2d0>
    30e0:	2403      	movs	r4, #3
    30e2:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    30e4:	f040 0004 	orr.w	r0, r0, #4
    30e8:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    30ea:	074d      	lsls	r5, r1, #29
    30ec:	f100 83b9 	bmi.w	3862 <SetIQTapDelays(int)+0xa4e>
			position[channel] = n;
    30f0:	24b0      	movs	r4, #176	; 0xb0
    30f2:	6294      	str	r4, [r2, #40]	; 0x28
			if (blks > maxblocks) maxblocks = blks;
    30f4:	8bd4      	ldrh	r4, [r2, #30]
    30f6:	2c02      	cmp	r4, #2
    30f8:	d801      	bhi.n	30fe <SetIQTapDelays(int)+0x2ea>
    30fa:	2403      	movs	r4, #3
    30fc:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    30fe:	f041 0104 	orr.w	r1, r1, #4
    3102:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    3104:	0705      	lsls	r5, r0, #28
    3106:	f100 839e 	bmi.w	3846 <SetIQTapDelays(int)+0xa32>
			position[channel] = n;
    310a:	f44f 74a2 	mov.w	r4, #324	; 0x144
    310e:	62dc      	str	r4, [r3, #44]	; 0x2c
			if (blks > maxblocks) maxblocks = blks;
    3110:	8bdc      	ldrh	r4, [r3, #30]
    3112:	2c03      	cmp	r4, #3
    3114:	d801      	bhi.n	311a <SetIQTapDelays(int)+0x306>
    3116:	2404      	movs	r4, #4
    3118:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    311a:	f040 0008 	orr.w	r0, r0, #8
    311e:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    3120:	070c      	lsls	r4, r1, #28
    3122:	f100 8450 	bmi.w	39c6 <SetIQTapDelays(int)+0xbb2>
			if (blks > maxblocks) maxblocks = blks;
    3126:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
    3128:	f240 1009 	movw	r0, #265	; 0x109
			if (blks > maxblocks) maxblocks = blks;
    312c:	2b03      	cmp	r3, #3
			position[channel] = n;
    312e:	62d0      	str	r0, [r2, #44]	; 0x2c
			if (blks > maxblocks) maxblocks = blks;
    3130:	f200 8143 	bhi.w	33ba <SetIQTapDelays(int)+0x5a6>
    3134:	2304      	movs	r3, #4
    3136:	83d3      	strh	r3, [r2, #30]
    3138:	e13f      	b.n	33ba <SetIQTapDelays(int)+0x5a6>
		if (!(activemask & (1<<channel))) {
    313a:	4b69      	ldr	r3, [pc, #420]	; (32e0 <SetIQTapDelays(int)+0x4cc>)
    313c:	7e18      	ldrb	r0, [r3, #24]
    313e:	07c2      	lsls	r2, r0, #31
    3140:	f140 81c2 	bpl.w	34c8 <SetIQTapDelays(int)+0x6b4>
			if (n > position[channel]) {
    3144:	6a1a      	ldr	r2, [r3, #32]
    3146:	2a3a      	cmp	r2, #58	; 0x3a
    3148:	f201 8059 	bhi.w	41fe <SetIQTapDelays(int)+0x13ea>
				if (blks > maxblocks) maxblocks = blks;
    314c:	8bda      	ldrh	r2, [r3, #30]
    314e:	2a01      	cmp	r2, #1
    3150:	d801      	bhi.n	3156 <SetIQTapDelays(int)+0x342>
    3152:	2202      	movs	r2, #2
    3154:	83da      	strh	r2, [r3, #30]
				position[channel] = n;
    3156:	223b      	movs	r2, #59	; 0x3b
    3158:	621a      	str	r2, [r3, #32]
		if (!(activemask & (1<<channel))) {
    315a:	4a62      	ldr	r2, [pc, #392]	; (32e4 <SetIQTapDelays(int)+0x4d0>)
    315c:	7e11      	ldrb	r1, [r2, #24]
    315e:	f011 0401 	ands.w	r4, r1, #1
    3162:	f040 83ea 	bne.w	393a <SetIQTapDelays(int)+0xb26>
			position[channel] = n;
    3166:	6214      	str	r4, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
    3168:	8bd4      	ldrh	r4, [r2, #30]
    316a:	b90c      	cbnz	r4, 3170 <SetIQTapDelays(int)+0x35c>
    316c:	2401      	movs	r4, #1
    316e:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    3170:	f041 0101 	orr.w	r1, r1, #1
    3174:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    3176:	0785      	lsls	r5, r0, #30
    3178:	f100 83d3 	bmi.w	3922 <SetIQTapDelays(int)+0xb0e>
			position[channel] = n;
    317c:	2467      	movs	r4, #103	; 0x67
    317e:	625c      	str	r4, [r3, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    3180:	8bdc      	ldrh	r4, [r3, #30]
    3182:	2c01      	cmp	r4, #1
    3184:	d801      	bhi.n	318a <SetIQTapDelays(int)+0x376>
    3186:	2402      	movs	r4, #2
    3188:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    318a:	f040 0002 	orr.w	r0, r0, #2
    318e:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    3190:	078d      	lsls	r5, r1, #30
    3192:	f100 83ba 	bmi.w	390a <SetIQTapDelays(int)+0xaf6>
			position[channel] = n;
    3196:	242c      	movs	r4, #44	; 0x2c
    3198:	6254      	str	r4, [r2, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    319a:	8bd4      	ldrh	r4, [r2, #30]
    319c:	2c01      	cmp	r4, #1
    319e:	d801      	bhi.n	31a4 <SetIQTapDelays(int)+0x390>
    31a0:	2402      	movs	r4, #2
    31a2:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    31a4:	f041 0102 	orr.w	r1, r1, #2
    31a8:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    31aa:	0745      	lsls	r5, r0, #29
    31ac:	f100 83a1 	bmi.w	38f2 <SetIQTapDelays(int)+0xade>
			position[channel] = n;
    31b0:	2493      	movs	r4, #147	; 0x93
    31b2:	629c      	str	r4, [r3, #40]	; 0x28
			if (blks > maxblocks) maxblocks = blks;
    31b4:	8bdc      	ldrh	r4, [r3, #30]
    31b6:	2c02      	cmp	r4, #2
    31b8:	d801      	bhi.n	31be <SetIQTapDelays(int)+0x3aa>
    31ba:	2403      	movs	r4, #3
    31bc:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    31be:	f040 0004 	orr.w	r0, r0, #4
    31c2:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    31c4:	074d      	lsls	r5, r1, #29
    31c6:	f100 837c 	bmi.w	38c2 <SetIQTapDelays(int)+0xaae>
			position[channel] = n;
    31ca:	2458      	movs	r4, #88	; 0x58
    31cc:	6294      	str	r4, [r2, #40]	; 0x28
			if (blks > maxblocks) maxblocks = blks;
    31ce:	8bd4      	ldrh	r4, [r2, #30]
    31d0:	2c01      	cmp	r4, #1
    31d2:	d801      	bhi.n	31d8 <SetIQTapDelays(int)+0x3c4>
    31d4:	2402      	movs	r4, #2
    31d6:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    31d8:	f041 0104 	orr.w	r1, r1, #4
    31dc:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    31de:	0705      	lsls	r5, r0, #28
    31e0:	f100 8363 	bmi.w	38aa <SetIQTapDelays(int)+0xa96>
			position[channel] = n;
    31e4:	24bf      	movs	r4, #191	; 0xbf
    31e6:	62dc      	str	r4, [r3, #44]	; 0x2c
			if (blks > maxblocks) maxblocks = blks;
    31e8:	8bdc      	ldrh	r4, [r3, #30]
    31ea:	2c02      	cmp	r4, #2
    31ec:	d801      	bhi.n	31f2 <SetIQTapDelays(int)+0x3de>
    31ee:	2403      	movs	r4, #3
    31f0:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    31f2:	f040 0008 	orr.w	r0, r0, #8
    31f6:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    31f8:	070c      	lsls	r4, r1, #28
    31fa:	f100 836e 	bmi.w	38da <SetIQTapDelays(int)+0xac6>
			if (blks > maxblocks) maxblocks = blks;
    31fe:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
    3200:	2084      	movs	r0, #132	; 0x84
			if (blks > maxblocks) maxblocks = blks;
    3202:	2b02      	cmp	r3, #2
			position[channel] = n;
    3204:	62d0      	str	r0, [r2, #44]	; 0x2c
			if (blks > maxblocks) maxblocks = blks;
    3206:	f200 80d8 	bhi.w	33ba <SetIQTapDelays(int)+0x5a6>
    320a:	2303      	movs	r3, #3
    320c:	83d3      	strh	r3, [r2, #30]
			activemask |= (1<<channel);
    320e:	e0d4      	b.n	33ba <SetIQTapDelays(int)+0x5a6>
		if (!(activemask & (1<<channel))) {
    3210:	4b33      	ldr	r3, [pc, #204]	; (32e0 <SetIQTapDelays(int)+0x4cc>)
    3212:	7e18      	ldrb	r0, [r3, #24]
    3214:	07c2      	lsls	r2, r0, #31
    3216:	f140 814c 	bpl.w	34b2 <SetIQTapDelays(int)+0x69e>
			if (n > position[channel]) {
    321a:	6a1a      	ldr	r2, [r3, #32]
    321c:	2a3a      	cmp	r2, #58	; 0x3a
    321e:	f200 8713 	bhi.w	4048 <SetIQTapDelays(int)+0x1234>
				if (blks > maxblocks) maxblocks = blks;
    3222:	8bda      	ldrh	r2, [r3, #30]
    3224:	2a01      	cmp	r2, #1
    3226:	d801      	bhi.n	322c <SetIQTapDelays(int)+0x418>
    3228:	2202      	movs	r2, #2
    322a:	83da      	strh	r2, [r3, #30]
				position[channel] = n;
    322c:	223b      	movs	r2, #59	; 0x3b
    322e:	621a      	str	r2, [r3, #32]
		if (!(activemask & (1<<channel))) {
    3230:	4a2c      	ldr	r2, [pc, #176]	; (32e4 <SetIQTapDelays(int)+0x4d0>)
    3232:	7e11      	ldrb	r1, [r2, #24]
    3234:	f011 0401 	ands.w	r4, r1, #1
    3238:	f040 8279 	bne.w	372e <SetIQTapDelays(int)+0x91a>
			position[channel] = n;
    323c:	6214      	str	r4, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
    323e:	8bd4      	ldrh	r4, [r2, #30]
    3240:	b90c      	cbnz	r4, 3246 <SetIQTapDelays(int)+0x432>
    3242:	2401      	movs	r4, #1
    3244:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    3246:	f041 0101 	orr.w	r1, r1, #1
    324a:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    324c:	0785      	lsls	r5, r0, #30
    324e:	f100 8262 	bmi.w	3716 <SetIQTapDelays(int)+0x902>
			position[channel] = n;
    3252:	2451      	movs	r4, #81	; 0x51
    3254:	625c      	str	r4, [r3, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    3256:	8bdc      	ldrh	r4, [r3, #30]
    3258:	2c01      	cmp	r4, #1
    325a:	d801      	bhi.n	3260 <SetIQTapDelays(int)+0x44c>
    325c:	2402      	movs	r4, #2
    325e:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    3260:	f040 0002 	orr.w	r0, r0, #2
    3264:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    3266:	078d      	lsls	r5, r1, #30
    3268:	f100 8249 	bmi.w	36fe <SetIQTapDelays(int)+0x8ea>
			position[channel] = n;
    326c:	2416      	movs	r4, #22
    326e:	6254      	str	r4, [r2, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    3270:	8bd4      	ldrh	r4, [r2, #30]
    3272:	2c01      	cmp	r4, #1
    3274:	d801      	bhi.n	327a <SetIQTapDelays(int)+0x466>
    3276:	2402      	movs	r4, #2
    3278:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    327a:	f041 0102 	orr.w	r1, r1, #2
    327e:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    3280:	0745      	lsls	r5, r0, #29
    3282:	f100 8230 	bmi.w	36e6 <SetIQTapDelays(int)+0x8d2>
			position[channel] = n;
    3286:	2467      	movs	r4, #103	; 0x67
    3288:	629c      	str	r4, [r3, #40]	; 0x28
			if (blks > maxblocks) maxblocks = blks;
    328a:	8bdc      	ldrh	r4, [r3, #30]
    328c:	2c01      	cmp	r4, #1
    328e:	d801      	bhi.n	3294 <SetIQTapDelays(int)+0x480>
    3290:	2402      	movs	r4, #2
    3292:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    3294:	f040 0004 	orr.w	r0, r0, #4
    3298:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    329a:	074d      	lsls	r5, r1, #29
    329c:	f100 8217 	bmi.w	36ce <SetIQTapDelays(int)+0x8ba>
			position[channel] = n;
    32a0:	242c      	movs	r4, #44	; 0x2c
    32a2:	6294      	str	r4, [r2, #40]	; 0x28
			if (blks > maxblocks) maxblocks = blks;
    32a4:	8bd4      	ldrh	r4, [r2, #30]
    32a6:	2c01      	cmp	r4, #1
    32a8:	d801      	bhi.n	32ae <SetIQTapDelays(int)+0x49a>
    32aa:	2402      	movs	r4, #2
    32ac:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    32ae:	f041 0104 	orr.w	r1, r1, #4
    32b2:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    32b4:	0705      	lsls	r5, r0, #28
    32b6:	f100 81fe 	bmi.w	36b6 <SetIQTapDelays(int)+0x8a2>
			position[channel] = n;
    32ba:	247d      	movs	r4, #125	; 0x7d
    32bc:	62dc      	str	r4, [r3, #44]	; 0x2c
			if (blks > maxblocks) maxblocks = blks;
    32be:	8bdc      	ldrh	r4, [r3, #30]
    32c0:	2c01      	cmp	r4, #1
    32c2:	d801      	bhi.n	32c8 <SetIQTapDelays(int)+0x4b4>
    32c4:	2402      	movs	r4, #2
    32c6:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    32c8:	f040 0008 	orr.w	r0, r0, #8
    32cc:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    32ce:	070c      	lsls	r4, r1, #28
    32d0:	f100 8249 	bmi.w	3766 <SetIQTapDelays(int)+0x952>
			if (blks > maxblocks) maxblocks = blks;
    32d4:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
    32d6:	2042      	movs	r0, #66	; 0x42
			if (blks > maxblocks) maxblocks = blks;
    32d8:	2b01      	cmp	r3, #1
			position[channel] = n;
    32da:	62d0      	str	r0, [r2, #44]	; 0x2c
			if (blks > maxblocks) maxblocks = blks;
    32dc:	d86d      	bhi.n	33ba <SetIQTapDelays(int)+0x5a6>
    32de:	e06a      	b.n	33b6 <SetIQTapDelays(int)+0x5a2>
    32e0:	2000cb40 	.word	0x2000cb40
    32e4:	2000e110 	.word	0x2000e110
		if (!(activemask & (1<<channel))) {
    32e8:	4ba1      	ldr	r3, [pc, #644]	; (3570 <SetIQTapDelays(int)+0x75c>)
    32ea:	7e18      	ldrb	r0, [r3, #24]
    32ec:	07c2      	lsls	r2, r0, #31
    32ee:	f140 80d5 	bpl.w	349c <SetIQTapDelays(int)+0x688>
			if (n > position[channel]) {
    32f2:	6a1a      	ldr	r2, [r3, #32]
    32f4:	2a3a      	cmp	r2, #58	; 0x3a
    32f6:	f200 85d4 	bhi.w	3ea2 <SetIQTapDelays(int)+0x108e>
				if (blks > maxblocks) maxblocks = blks;
    32fa:	8bda      	ldrh	r2, [r3, #30]
    32fc:	2a01      	cmp	r2, #1
    32fe:	d801      	bhi.n	3304 <SetIQTapDelays(int)+0x4f0>
    3300:	2202      	movs	r2, #2
    3302:	83da      	strh	r2, [r3, #30]
				position[channel] = n;
    3304:	223b      	movs	r2, #59	; 0x3b
    3306:	621a      	str	r2, [r3, #32]
		if (!(activemask & (1<<channel))) {
    3308:	4a9a      	ldr	r2, [pc, #616]	; (3574 <SetIQTapDelays(int)+0x760>)
    330a:	7e11      	ldrb	r1, [r2, #24]
    330c:	f011 0401 	ands.w	r4, r1, #1
    3310:	f040 827d 	bne.w	380e <SetIQTapDelays(int)+0x9fa>
			position[channel] = n;
    3314:	6214      	str	r4, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
    3316:	8bd4      	ldrh	r4, [r2, #30]
    3318:	b90c      	cbnz	r4, 331e <SetIQTapDelays(int)+0x50a>
    331a:	2401      	movs	r4, #1
    331c:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    331e:	f041 0101 	orr.w	r1, r1, #1
    3322:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    3324:	0785      	lsls	r5, r0, #30
    3326:	f100 8266 	bmi.w	37f6 <SetIQTapDelays(int)+0x9e2>
			position[channel] = n;
    332a:	2446      	movs	r4, #70	; 0x46
    332c:	625c      	str	r4, [r3, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    332e:	8bdc      	ldrh	r4, [r3, #30]
    3330:	2c01      	cmp	r4, #1
    3332:	d801      	bhi.n	3338 <SetIQTapDelays(int)+0x524>
    3334:	2402      	movs	r4, #2
    3336:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    3338:	f040 0002 	orr.w	r0, r0, #2
    333c:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    333e:	078d      	lsls	r5, r1, #30
    3340:	f100 824d 	bmi.w	37de <SetIQTapDelays(int)+0x9ca>
			position[channel] = n;
    3344:	240b      	movs	r4, #11
    3346:	6254      	str	r4, [r2, #36]	; 0x24
			if (blks > maxblocks) maxblocks = blks;
    3348:	8bd4      	ldrh	r4, [r2, #30]
    334a:	2c01      	cmp	r4, #1
    334c:	d801      	bhi.n	3352 <SetIQTapDelays(int)+0x53e>
    334e:	2402      	movs	r4, #2
    3350:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    3352:	f041 0102 	orr.w	r1, r1, #2
    3356:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    3358:	0745      	lsls	r5, r0, #29
    335a:	f100 8234 	bmi.w	37c6 <SetIQTapDelays(int)+0x9b2>
			position[channel] = n;
    335e:	2451      	movs	r4, #81	; 0x51
    3360:	629c      	str	r4, [r3, #40]	; 0x28
			if (blks > maxblocks) maxblocks = blks;
    3362:	8bdc      	ldrh	r4, [r3, #30]
    3364:	2c01      	cmp	r4, #1
    3366:	d801      	bhi.n	336c <SetIQTapDelays(int)+0x558>
    3368:	2402      	movs	r4, #2
    336a:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    336c:	f040 0004 	orr.w	r0, r0, #4
    3370:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    3372:	074d      	lsls	r5, r1, #29
    3374:	f100 820f 	bmi.w	3796 <SetIQTapDelays(int)+0x982>
			position[channel] = n;
    3378:	2416      	movs	r4, #22
    337a:	6294      	str	r4, [r2, #40]	; 0x28
			if (blks > maxblocks) maxblocks = blks;
    337c:	8bd4      	ldrh	r4, [r2, #30]
    337e:	2c01      	cmp	r4, #1
    3380:	d801      	bhi.n	3386 <SetIQTapDelays(int)+0x572>
    3382:	2402      	movs	r4, #2
    3384:	83d4      	strh	r4, [r2, #30]
			activemask |= (1<<channel);
    3386:	f041 0104 	orr.w	r1, r1, #4
    338a:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    338c:	0705      	lsls	r5, r0, #28
    338e:	f100 81f6 	bmi.w	377e <SetIQTapDelays(int)+0x96a>
			position[channel] = n;
    3392:	245c      	movs	r4, #92	; 0x5c
    3394:	62dc      	str	r4, [r3, #44]	; 0x2c
			if (blks > maxblocks) maxblocks = blks;
    3396:	8bdc      	ldrh	r4, [r3, #30]
    3398:	2c01      	cmp	r4, #1
    339a:	d801      	bhi.n	33a0 <SetIQTapDelays(int)+0x58c>
    339c:	2402      	movs	r4, #2
    339e:	83dc      	strh	r4, [r3, #30]
			activemask |= (1<<channel);
    33a0:	f040 0008 	orr.w	r0, r0, #8
    33a4:	7618      	strb	r0, [r3, #24]
		if (!(activemask & (1<<channel))) {
    33a6:	070c      	lsls	r4, r1, #28
    33a8:	f100 8201 	bmi.w	37ae <SetIQTapDelays(int)+0x99a>
			if (blks > maxblocks) maxblocks = blks;
    33ac:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
    33ae:	2021      	movs	r0, #33	; 0x21
			if (blks > maxblocks) maxblocks = blks;
    33b0:	2b01      	cmp	r3, #1
			position[channel] = n;
    33b2:	62d0      	str	r0, [r2, #44]	; 0x2c
			if (blks > maxblocks) maxblocks = blks;
    33b4:	d801      	bhi.n	33ba <SetIQTapDelays(int)+0x5a6>
    33b6:	2302      	movs	r3, #2
    33b8:	83d3      	strh	r3, [r2, #30]
			activemask |= (1<<channel);
    33ba:	f041 0108 	orr.w	r1, r1, #8
    33be:	7611      	strb	r1, [r2, #24]
    33c0:	bd70      	pop	{r4, r5, r6, pc}
		if (!(activemask & (1<<channel))) {
    33c2:	4b6b      	ldr	r3, [pc, #428]	; (3570 <SetIQTapDelays(int)+0x75c>)
    33c4:	7e18      	ldrb	r0, [r3, #24]
    33c6:	07c2      	lsls	r2, r0, #31
    33c8:	d55d      	bpl.n	3486 <SetIQTapDelays(int)+0x672>
			if (n > position[channel]) {
    33ca:	6a1a      	ldr	r2, [r3, #32]
    33cc:	2a3a      	cmp	r2, #58	; 0x3a
    33ce:	f200 844d 	bhi.w	3c6c <SetIQTapDelays(int)+0xe58>
				if (blks > maxblocks) maxblocks = blks;
    33d2:	8bda      	ldrh	r2, [r3, #30]
    33d4:	2a01      	cmp	r2, #1
    33d6:	d801      	bhi.n	33dc <SetIQTapDelays(int)+0x5c8>
    33d8:	2202      	movs	r2, #2
    33da:	83da      	strh	r2, [r3, #30]
				position[channel] = n;
    33dc:	223b      	movs	r2, #59	; 0x3b
    33de:	621a      	str	r2, [r3, #32]
		if (!(activemask & (1<<channel))) {
    33e0:	4a64      	ldr	r2, [pc, #400]	; (3574 <SetIQTapDelays(int)+0x760>)
    33e2:	7e11      	ldrb	r1, [r2, #24]
    33e4:	f011 0301 	ands.w	r3, r1, #1
    33e8:	f000 8084 	beq.w	34f4 <SetIQTapDelays(int)+0x6e0>
				position[channel] = n;
    33ec:	2000      	movs	r0, #0
    33ee:	4614      	mov	r4, r2
		uint32_t channel = 0;
    33f0:	4603      	mov	r3, r0
		uint32_t max=0;
    33f2:	4605      	mov	r5, r0
				position[channel] = n;
    33f4:	f844 0f20 	str.w	r0, [r4, #32]!
			if (activemask & (1<<channel)) {
    33f8:	fa41 f003 	asr.w	r0, r1, r3
    33fc:	07c0      	lsls	r0, r0, #31
    33fe:	d507      	bpl.n	3410 <SetIQTapDelays(int)+0x5fc>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3400:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    3404:	307f      	adds	r0, #127	; 0x7f
    3406:	09c0      	lsrs	r0, r0, #7
    3408:	3001      	adds	r0, #1
    340a:	4285      	cmp	r5, r0
    340c:	bf38      	it	cc
    340e:	4605      	movcc	r5, r0
		} while(++channel < 8);
    3410:	3301      	adds	r3, #1
    3412:	2b08      	cmp	r3, #8
    3414:	d1f0      	bne.n	33f8 <SetIQTapDelays(int)+0x5e4>
    3416:	e579      	b.n	2f0c <SetIQTapDelays(int)+0xf8>
			if (blks > maxblocks) maxblocks = blks;
    3418:	8bda      	ldrh	r2, [r3, #30]
			position[channel] = n;
    341a:	213b      	movs	r1, #59	; 0x3b
			if (blks > maxblocks) maxblocks = blks;
    341c:	2a01      	cmp	r2, #1
			position[channel] = n;
    341e:	6219      	str	r1, [r3, #32]
			if (blks > maxblocks) maxblocks = blks;
    3420:	d801      	bhi.n	3426 <SetIQTapDelays(int)+0x612>
    3422:	2202      	movs	r2, #2
    3424:	83da      	strh	r2, [r3, #30]
			activemask |= (1<<channel);
    3426:	f040 0001 	orr.w	r0, r0, #1
    342a:	7618      	strb	r0, [r3, #24]
    342c:	e5e8      	b.n	3000 <SetIQTapDelays(int)+0x1ec>
			if (blks > maxblocks) maxblocks = blks;
    342e:	8bda      	ldrh	r2, [r3, #30]
			position[channel] = n;
    3430:	213b      	movs	r1, #59	; 0x3b
			if (blks > maxblocks) maxblocks = blks;
    3432:	2a01      	cmp	r2, #1
			position[channel] = n;
    3434:	6219      	str	r1, [r3, #32]
			if (blks > maxblocks) maxblocks = blks;
    3436:	d801      	bhi.n	343c <SetIQTapDelays(int)+0x628>
    3438:	2202      	movs	r2, #2
    343a:	83da      	strh	r2, [r3, #30]
			activemask |= (1<<channel);
    343c:	f040 0001 	orr.w	r0, r0, #1
    3440:	7618      	strb	r0, [r3, #24]
    3442:	e5a9      	b.n	2f98 <SetIQTapDelays(int)+0x184>
			if (blks > maxblocks) maxblocks = blks;
    3444:	8bda      	ldrh	r2, [r3, #30]
			position[channel] = n;
    3446:	213b      	movs	r1, #59	; 0x3b
			if (blks > maxblocks) maxblocks = blks;
    3448:	2a01      	cmp	r2, #1
			position[channel] = n;
    344a:	6219      	str	r1, [r3, #32]
			if (blks > maxblocks) maxblocks = blks;
    344c:	d801      	bhi.n	3452 <SetIQTapDelays(int)+0x63e>
    344e:	2202      	movs	r2, #2
    3450:	83da      	strh	r2, [r3, #30]
			activemask |= (1<<channel);
    3452:	f040 0001 	orr.w	r0, r0, #1
    3456:	7618      	strb	r0, [r3, #24]
    3458:	e56a      	b.n	2f30 <SetIQTapDelays(int)+0x11c>
			if (blks > maxblocks) maxblocks = blks;
    345a:	8bda      	ldrh	r2, [r3, #30]
			position[channel] = n;
    345c:	213b      	movs	r1, #59	; 0x3b
			if (blks > maxblocks) maxblocks = blks;
    345e:	2a01      	cmp	r2, #1
			position[channel] = n;
    3460:	6219      	str	r1, [r3, #32]
			if (blks > maxblocks) maxblocks = blks;
    3462:	d801      	bhi.n	3468 <SetIQTapDelays(int)+0x654>
    3464:	2202      	movs	r2, #2
    3466:	83da      	strh	r2, [r3, #30]
			activemask |= (1<<channel);
    3468:	f040 0001 	orr.w	r0, r0, #1
    346c:	7618      	strb	r0, [r3, #24]
    346e:	e4fb      	b.n	2e68 <SetIQTapDelays(int)+0x54>
			if (blks > maxblocks) maxblocks = blks;
    3470:	8bda      	ldrh	r2, [r3, #30]
			position[channel] = n;
    3472:	213b      	movs	r1, #59	; 0x3b
			if (blks > maxblocks) maxblocks = blks;
    3474:	2a01      	cmp	r2, #1
			position[channel] = n;
    3476:	6219      	str	r1, [r3, #32]
			if (blks > maxblocks) maxblocks = blks;
    3478:	d801      	bhi.n	347e <SetIQTapDelays(int)+0x66a>
    347a:	2202      	movs	r2, #2
    347c:	83da      	strh	r2, [r3, #30]
			activemask |= (1<<channel);
    347e:	f040 0001 	orr.w	r0, r0, #1
    3482:	7618      	strb	r0, [r3, #24]
    3484:	e527      	b.n	2ed6 <SetIQTapDelays(int)+0xc2>
			if (blks > maxblocks) maxblocks = blks;
    3486:	8bda      	ldrh	r2, [r3, #30]
			position[channel] = n;
    3488:	213b      	movs	r1, #59	; 0x3b
			if (blks > maxblocks) maxblocks = blks;
    348a:	2a01      	cmp	r2, #1
			position[channel] = n;
    348c:	6219      	str	r1, [r3, #32]
			if (blks > maxblocks) maxblocks = blks;
    348e:	d801      	bhi.n	3494 <SetIQTapDelays(int)+0x680>
    3490:	2202      	movs	r2, #2
    3492:	83da      	strh	r2, [r3, #30]
			activemask |= (1<<channel);
    3494:	f040 0001 	orr.w	r0, r0, #1
    3498:	7618      	strb	r0, [r3, #24]
    349a:	e7a1      	b.n	33e0 <SetIQTapDelays(int)+0x5cc>
			if (blks > maxblocks) maxblocks = blks;
    349c:	8bda      	ldrh	r2, [r3, #30]
			position[channel] = n;
    349e:	213b      	movs	r1, #59	; 0x3b
			if (blks > maxblocks) maxblocks = blks;
    34a0:	2a01      	cmp	r2, #1
			position[channel] = n;
    34a2:	6219      	str	r1, [r3, #32]
			if (blks > maxblocks) maxblocks = blks;
    34a4:	d801      	bhi.n	34aa <SetIQTapDelays(int)+0x696>
    34a6:	2202      	movs	r2, #2
    34a8:	83da      	strh	r2, [r3, #30]
			activemask |= (1<<channel);
    34aa:	f040 0001 	orr.w	r0, r0, #1
    34ae:	7618      	strb	r0, [r3, #24]
    34b0:	e72a      	b.n	3308 <SetIQTapDelays(int)+0x4f4>
			if (blks > maxblocks) maxblocks = blks;
    34b2:	8bda      	ldrh	r2, [r3, #30]
			position[channel] = n;
    34b4:	213b      	movs	r1, #59	; 0x3b
			if (blks > maxblocks) maxblocks = blks;
    34b6:	2a01      	cmp	r2, #1
			position[channel] = n;
    34b8:	6219      	str	r1, [r3, #32]
			if (blks > maxblocks) maxblocks = blks;
    34ba:	d801      	bhi.n	34c0 <SetIQTapDelays(int)+0x6ac>
    34bc:	2202      	movs	r2, #2
    34be:	83da      	strh	r2, [r3, #30]
			activemask |= (1<<channel);
    34c0:	f040 0001 	orr.w	r0, r0, #1
    34c4:	7618      	strb	r0, [r3, #24]
    34c6:	e6b3      	b.n	3230 <SetIQTapDelays(int)+0x41c>
			if (blks > maxblocks) maxblocks = blks;
    34c8:	8bda      	ldrh	r2, [r3, #30]
			position[channel] = n;
    34ca:	213b      	movs	r1, #59	; 0x3b
			if (blks > maxblocks) maxblocks = blks;
    34cc:	2a01      	cmp	r2, #1
			position[channel] = n;
    34ce:	6219      	str	r1, [r3, #32]
			if (blks > maxblocks) maxblocks = blks;
    34d0:	d801      	bhi.n	34d6 <SetIQTapDelays(int)+0x6c2>
    34d2:	2202      	movs	r2, #2
    34d4:	83da      	strh	r2, [r3, #30]
			activemask |= (1<<channel);
    34d6:	f040 0001 	orr.w	r0, r0, #1
    34da:	7618      	strb	r0, [r3, #24]
    34dc:	e63d      	b.n	315a <SetIQTapDelays(int)+0x346>
			if (blks > maxblocks) maxblocks = blks;
    34de:	8bda      	ldrh	r2, [r3, #30]
			position[channel] = n;
    34e0:	213b      	movs	r1, #59	; 0x3b
			if (blks > maxblocks) maxblocks = blks;
    34e2:	2a01      	cmp	r2, #1
			position[channel] = n;
    34e4:	6219      	str	r1, [r3, #32]
			if (blks > maxblocks) maxblocks = blks;
    34e6:	d801      	bhi.n	34ec <SetIQTapDelays(int)+0x6d8>
    34e8:	2202      	movs	r2, #2
    34ea:	83da      	strh	r2, [r3, #30]
			activemask |= (1<<channel);
    34ec:	f040 0001 	orr.w	r0, r0, #1
    34f0:	7618      	strb	r0, [r3, #24]
    34f2:	e5c5      	b.n	3080 <SetIQTapDelays(int)+0x26c>
			if (blks > maxblocks) maxblocks = blks;
    34f4:	8bd0      	ldrh	r0, [r2, #30]
			position[channel] = n;
    34f6:	6213      	str	r3, [r2, #32]
			if (blks > maxblocks) maxblocks = blks;
    34f8:	b908      	cbnz	r0, 34fe <SetIQTapDelays(int)+0x6ea>
    34fa:	2301      	movs	r3, #1
    34fc:	83d3      	strh	r3, [r2, #30]
			activemask |= (1<<channel);
    34fe:	f041 0101 	orr.w	r1, r1, #1
    3502:	7611      	strb	r1, [r2, #24]
    3504:	bd70      	pop	{r4, r5, r6, pc}
			if (n > position[channel]) {
    3506:	6a53      	ldr	r3, [r2, #36]	; 0x24
    3508:	2b15      	cmp	r3, #21
    350a:	f200 836a 	bhi.w	3be2 <SetIQTapDelays(int)+0xdce>
				if (blks > maxblocks) maxblocks = blks;
    350e:	8bd3      	ldrh	r3, [r2, #30]
    3510:	2b01      	cmp	r3, #1
    3512:	d801      	bhi.n	3518 <SetIQTapDelays(int)+0x704>
    3514:	2302      	movs	r3, #2
    3516:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
    3518:	2316      	movs	r3, #22
    351a:	6253      	str	r3, [r2, #36]	; 0x24
    351c:	bd70      	pop	{r4, r5, r6, pc}
			if (n > position[channel]) {
    351e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    3520:	2c50      	cmp	r4, #80	; 0x50
    3522:	f200 8340 	bhi.w	3ba6 <SetIQTapDelays(int)+0xd92>
				if (blks > maxblocks) maxblocks = blks;
    3526:	8bd8      	ldrh	r0, [r3, #30]
    3528:	2801      	cmp	r0, #1
    352a:	d801      	bhi.n	3530 <SetIQTapDelays(int)+0x71c>
    352c:	2002      	movs	r0, #2
    352e:	83d8      	strh	r0, [r3, #30]
				position[channel] = n;
    3530:	2051      	movs	r0, #81	; 0x51
    3532:	6258      	str	r0, [r3, #36]	; 0x24
    3534:	e517      	b.n	2f66 <SetIQTapDelays(int)+0x152>
				position[channel] = n;
    3536:	f04f 0c00 	mov.w	ip, #0
    353a:	4614      	mov	r4, r2
		uint32_t max=0;
    353c:	4665      	mov	r5, ip
				position[channel] = n;
    353e:	f844 cf20 	str.w	ip, [r4, #32]!
			if (activemask & (1<<channel)) {
    3542:	fa41 fe0c 	asr.w	lr, r1, ip
    3546:	f01e 0f01 	tst.w	lr, #1
    354a:	d00a      	beq.n	3562 <SetIQTapDelays(int)+0x74e>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    354c:	f854 602c 	ldr.w	r6, [r4, ip, lsl #2]
    3550:	f106 0e7f 	add.w	lr, r6, #127	; 0x7f
    3554:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3558:	f10e 0e01 	add.w	lr, lr, #1
    355c:	4575      	cmp	r5, lr
    355e:	bf38      	it	cc
    3560:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3562:	f10c 0c01 	add.w	ip, ip, #1
    3566:	f1bc 0f08 	cmp.w	ip, #8
    356a:	d1ea      	bne.n	3542 <SetIQTapDelays(int)+0x72e>
		maxblocks = max;
    356c:	83d5      	strh	r5, [r2, #30]
	}
    356e:	e4ed      	b.n	2f4c <SetIQTapDelays(int)+0x138>
    3570:	2000cb40 	.word	0x2000cb40
    3574:	2000e110 	.word	0x2000e110
			if (n > position[channel]) {
    3578:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    357a:	2cea      	cmp	r4, #234	; 0xea
    357c:	f200 82f5 	bhi.w	3b6a <SetIQTapDelays(int)+0xd56>
				if (blks > maxblocks) maxblocks = blks;
    3580:	8bd8      	ldrh	r0, [r3, #30]
    3582:	2802      	cmp	r0, #2
    3584:	d801      	bhi.n	358a <SetIQTapDelays(int)+0x776>
    3586:	2003      	movs	r0, #3
    3588:	83d8      	strh	r0, [r3, #30]
				position[channel] = n;
    358a:	20eb      	movs	r0, #235	; 0xeb
    358c:	6258      	str	r0, [r3, #36]	; 0x24
    358e:	e486      	b.n	2e9e <SetIQTapDelays(int)+0x8a>
				position[channel] = n;
    3590:	f04f 0c00 	mov.w	ip, #0
    3594:	4614      	mov	r4, r2
		uint32_t max=0;
    3596:	4665      	mov	r5, ip
				position[channel] = n;
    3598:	f844 cf20 	str.w	ip, [r4, #32]!
			if (activemask & (1<<channel)) {
    359c:	fa41 fe0c 	asr.w	lr, r1, ip
    35a0:	f01e 0f01 	tst.w	lr, #1
    35a4:	d00a      	beq.n	35bc <SetIQTapDelays(int)+0x7a8>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    35a6:	f854 602c 	ldr.w	r6, [r4, ip, lsl #2]
    35aa:	f106 0e7f 	add.w	lr, r6, #127	; 0x7f
    35ae:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    35b2:	f10e 0e01 	add.w	lr, lr, #1
    35b6:	4575      	cmp	r5, lr
    35b8:	bf38      	it	cc
    35ba:	4675      	movcc	r5, lr
		} while(++channel < 8);
    35bc:	f10c 0c01 	add.w	ip, ip, #1
    35c0:	f1bc 0f08 	cmp.w	ip, #8
    35c4:	d1ea      	bne.n	359c <SetIQTapDelays(int)+0x788>
		maxblocks = max;
    35c6:	83d5      	strh	r5, [r2, #30]
	}
    35c8:	e45c      	b.n	2e84 <SetIQTapDelays(int)+0x70>
			if (n > position[channel]) {
    35ca:	6a53      	ldr	r3, [r2, #36]	; 0x24
    35cc:	2baf      	cmp	r3, #175	; 0xaf
    35ce:	f200 829f 	bhi.w	3b10 <SetIQTapDelays(int)+0xcfc>
				if (blks > maxblocks) maxblocks = blks;
    35d2:	8bd3      	ldrh	r3, [r2, #30]
    35d4:	2b02      	cmp	r3, #2
    35d6:	d801      	bhi.n	35dc <SetIQTapDelays(int)+0x7c8>
    35d8:	2303      	movs	r3, #3
    35da:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
    35dc:	23b0      	movs	r3, #176	; 0xb0
    35de:	6253      	str	r3, [r2, #36]	; 0x24
    35e0:	bd70      	pop	{r4, r5, r6, pc}
			if (n > position[channel]) {
    35e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    35e4:	2c92      	cmp	r4, #146	; 0x92
    35e6:	f200 822a 	bhi.w	3a3e <SetIQTapDelays(int)+0xc2a>
				if (blks > maxblocks) maxblocks = blks;
    35ea:	8bd8      	ldrh	r0, [r3, #30]
    35ec:	2802      	cmp	r0, #2
    35ee:	d801      	bhi.n	35f4 <SetIQTapDelays(int)+0x7e0>
    35f0:	2003      	movs	r0, #3
    35f2:	83d8      	strh	r0, [r3, #30]
				position[channel] = n;
    35f4:	2093      	movs	r0, #147	; 0x93
    35f6:	6258      	str	r0, [r3, #36]	; 0x24
    35f8:	e51d      	b.n	3036 <SetIQTapDelays(int)+0x222>
				position[channel] = n;
    35fa:	f04f 0c00 	mov.w	ip, #0
    35fe:	4614      	mov	r4, r2
		uint32_t max=0;
    3600:	4665      	mov	r5, ip
				position[channel] = n;
    3602:	f844 cf20 	str.w	ip, [r4, #32]!
			if (activemask & (1<<channel)) {
    3606:	fa41 fe0c 	asr.w	lr, r1, ip
    360a:	f01e 0f01 	tst.w	lr, #1
    360e:	d00a      	beq.n	3626 <SetIQTapDelays(int)+0x812>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3610:	f854 602c 	ldr.w	r6, [r4, ip, lsl #2]
    3614:	f106 0e7f 	add.w	lr, r6, #127	; 0x7f
    3618:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    361c:	f10e 0e01 	add.w	lr, lr, #1
    3620:	4575      	cmp	r5, lr
    3622:	bf38      	it	cc
    3624:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3626:	f10c 0c01 	add.w	ip, ip, #1
    362a:	f1bc 0f08 	cmp.w	ip, #8
    362e:	d1ea      	bne.n	3606 <SetIQTapDelays(int)+0x7f2>
		maxblocks = max;
    3630:	83d5      	strh	r5, [r2, #30]
	}
    3632:	e4f3      	b.n	301c <SetIQTapDelays(int)+0x208>
			if (n > position[channel]) {
    3634:	6a53      	ldr	r3, [r2, #36]	; 0x24
    3636:	2b57      	cmp	r3, #87	; 0x57
    3638:	f200 8255 	bhi.w	3ae6 <SetIQTapDelays(int)+0xcd2>
				if (blks > maxblocks) maxblocks = blks;
    363c:	8bd3      	ldrh	r3, [r2, #30]
    363e:	2b01      	cmp	r3, #1
    3640:	d801      	bhi.n	3646 <SetIQTapDelays(int)+0x832>
    3642:	2302      	movs	r3, #2
    3644:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
    3646:	2358      	movs	r3, #88	; 0x58
    3648:	6253      	str	r3, [r2, #36]	; 0x24
    364a:	bd70      	pop	{r4, r5, r6, pc}
			if (n > position[channel]) {
    364c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    364e:	2c66      	cmp	r4, #102	; 0x66
    3650:	f200 822b 	bhi.w	3aaa <SetIQTapDelays(int)+0xc96>
				if (blks > maxblocks) maxblocks = blks;
    3654:	8bd8      	ldrh	r0, [r3, #30]
    3656:	2801      	cmp	r0, #1
    3658:	d801      	bhi.n	365e <SetIQTapDelays(int)+0x84a>
    365a:	2002      	movs	r0, #2
    365c:	83d8      	strh	r0, [r3, #30]
				position[channel] = n;
    365e:	2067      	movs	r0, #103	; 0x67
    3660:	6258      	str	r0, [r3, #36]	; 0x24
    3662:	e4b4      	b.n	2fce <SetIQTapDelays(int)+0x1ba>
				position[channel] = n;
    3664:	f04f 0c00 	mov.w	ip, #0
    3668:	4614      	mov	r4, r2
		uint32_t max=0;
    366a:	4665      	mov	r5, ip
				position[channel] = n;
    366c:	f844 cf20 	str.w	ip, [r4, #32]!
			if (activemask & (1<<channel)) {
    3670:	fa41 fe0c 	asr.w	lr, r1, ip
    3674:	f01e 0f01 	tst.w	lr, #1
    3678:	d00a      	beq.n	3690 <SetIQTapDelays(int)+0x87c>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    367a:	f854 602c 	ldr.w	r6, [r4, ip, lsl #2]
    367e:	f106 0e7f 	add.w	lr, r6, #127	; 0x7f
    3682:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3686:	f10e 0e01 	add.w	lr, lr, #1
    368a:	4575      	cmp	r5, lr
    368c:	bf38      	it	cc
    368e:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3690:	f10c 0c01 	add.w	ip, ip, #1
    3694:	f1bc 0f08 	cmp.w	ip, #8
    3698:	d1ea      	bne.n	3670 <SetIQTapDelays(int)+0x85c>
		maxblocks = max;
    369a:	83d5      	strh	r5, [r2, #30]
	}
    369c:	e48a      	b.n	2fb4 <SetIQTapDelays(int)+0x1a0>
			if (n > position[channel]) {
    369e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    36a0:	2b2b      	cmp	r3, #43	; 0x2b
    36a2:	f200 819e 	bhi.w	39e2 <SetIQTapDelays(int)+0xbce>
				if (blks > maxblocks) maxblocks = blks;
    36a6:	8bd3      	ldrh	r3, [r2, #30]
    36a8:	2b01      	cmp	r3, #1
    36aa:	d801      	bhi.n	36b0 <SetIQTapDelays(int)+0x89c>
    36ac:	2302      	movs	r3, #2
    36ae:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
    36b0:	232c      	movs	r3, #44	; 0x2c
    36b2:	6253      	str	r3, [r2, #36]	; 0x24
    36b4:	bd70      	pop	{r4, r5, r6, pc}
			if (n > position[channel]) {
    36b6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    36b8:	2c7c      	cmp	r4, #124	; 0x7c
    36ba:	f200 848b 	bhi.w	3fd4 <SetIQTapDelays(int)+0x11c0>
				if (blks > maxblocks) maxblocks = blks;
    36be:	8bd8      	ldrh	r0, [r3, #30]
    36c0:	2801      	cmp	r0, #1
    36c2:	d801      	bhi.n	36c8 <SetIQTapDelays(int)+0x8b4>
    36c4:	2002      	movs	r0, #2
    36c6:	83d8      	strh	r0, [r3, #30]
				position[channel] = n;
    36c8:	207d      	movs	r0, #125	; 0x7d
    36ca:	62d8      	str	r0, [r3, #44]	; 0x2c
    36cc:	e5ff      	b.n	32ce <SetIQTapDelays(int)+0x4ba>
			if (n > position[channel]) {
    36ce:	6a94      	ldr	r4, [r2, #40]	; 0x28
    36d0:	2c2b      	cmp	r4, #43	; 0x2b
    36d2:	f200 845e 	bhi.w	3f92 <SetIQTapDelays(int)+0x117e>
				if (blks > maxblocks) maxblocks = blks;
    36d6:	8bd4      	ldrh	r4, [r2, #30]
    36d8:	2c01      	cmp	r4, #1
    36da:	d801      	bhi.n	36e0 <SetIQTapDelays(int)+0x8cc>
    36dc:	2402      	movs	r4, #2
    36de:	83d4      	strh	r4, [r2, #30]
				position[channel] = n;
    36e0:	242c      	movs	r4, #44	; 0x2c
    36e2:	6294      	str	r4, [r2, #40]	; 0x28
    36e4:	e5e6      	b.n	32b4 <SetIQTapDelays(int)+0x4a0>
			if (n > position[channel]) {
    36e6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    36e8:	2c66      	cmp	r4, #102	; 0x66
    36ea:	f200 84e2 	bhi.w	40b2 <SetIQTapDelays(int)+0x129e>
				if (blks > maxblocks) maxblocks = blks;
    36ee:	8bdc      	ldrh	r4, [r3, #30]
    36f0:	2c01      	cmp	r4, #1
    36f2:	d801      	bhi.n	36f8 <SetIQTapDelays(int)+0x8e4>
    36f4:	2402      	movs	r4, #2
    36f6:	83dc      	strh	r4, [r3, #30]
				position[channel] = n;
    36f8:	2467      	movs	r4, #103	; 0x67
    36fa:	629c      	str	r4, [r3, #40]	; 0x28
    36fc:	e5cd      	b.n	329a <SetIQTapDelays(int)+0x486>
			if (n > position[channel]) {
    36fe:	6a54      	ldr	r4, [r2, #36]	; 0x24
    3700:	2c15      	cmp	r4, #21
    3702:	f200 84b9 	bhi.w	4078 <SetIQTapDelays(int)+0x1264>
				if (blks > maxblocks) maxblocks = blks;
    3706:	8bd4      	ldrh	r4, [r2, #30]
    3708:	2c01      	cmp	r4, #1
    370a:	d801      	bhi.n	3710 <SetIQTapDelays(int)+0x8fc>
    370c:	2402      	movs	r4, #2
    370e:	83d4      	strh	r4, [r2, #30]
				position[channel] = n;
    3710:	2416      	movs	r4, #22
    3712:	6254      	str	r4, [r2, #36]	; 0x24
    3714:	e5b4      	b.n	3280 <SetIQTapDelays(int)+0x46c>
			if (n > position[channel]) {
    3716:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    3718:	2c50      	cmp	r4, #80	; 0x50
    371a:	f200 8478 	bhi.w	400e <SetIQTapDelays(int)+0x11fa>
				if (blks > maxblocks) maxblocks = blks;
    371e:	8bdc      	ldrh	r4, [r3, #30]
    3720:	2c01      	cmp	r4, #1
    3722:	d801      	bhi.n	3728 <SetIQTapDelays(int)+0x914>
    3724:	2402      	movs	r4, #2
    3726:	83dc      	strh	r4, [r3, #30]
				position[channel] = n;
    3728:	2451      	movs	r4, #81	; 0x51
    372a:	625c      	str	r4, [r3, #36]	; 0x24
    372c:	e59b      	b.n	3266 <SetIQTapDelays(int)+0x452>
				position[channel] = n;
    372e:	f04f 0c00 	mov.w	ip, #0
    3732:	4615      	mov	r5, r2
		uint32_t max=0;
    3734:	4666      	mov	r6, ip
				position[channel] = n;
    3736:	f845 cf20 	str.w	ip, [r5, #32]!
			if (activemask & (1<<channel)) {
    373a:	fa41 f40c 	asr.w	r4, r1, ip
    373e:	07e4      	lsls	r4, r4, #31
    3740:	d50a      	bpl.n	3758 <SetIQTapDelays(int)+0x944>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3742:	f855 402c 	ldr.w	r4, [r5, ip, lsl #2]
    3746:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    374a:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    374e:	f10e 0e01 	add.w	lr, lr, #1
    3752:	4576      	cmp	r6, lr
    3754:	bf38      	it	cc
    3756:	4676      	movcc	r6, lr
		} while(++channel < 8);
    3758:	f10c 0c01 	add.w	ip, ip, #1
    375c:	f1bc 0f08 	cmp.w	ip, #8
    3760:	d1eb      	bne.n	373a <SetIQTapDelays(int)+0x926>
		maxblocks = max;
    3762:	83d6      	strh	r6, [r2, #30]
	}
    3764:	e572      	b.n	324c <SetIQTapDelays(int)+0x438>
			if (n > position[channel]) {
    3766:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3768:	2b41      	cmp	r3, #65	; 0x41
    376a:	f200 83cf 	bhi.w	3f0c <SetIQTapDelays(int)+0x10f8>
				if (blks > maxblocks) maxblocks = blks;
    376e:	8bd3      	ldrh	r3, [r2, #30]
    3770:	2b01      	cmp	r3, #1
    3772:	d801      	bhi.n	3778 <SetIQTapDelays(int)+0x964>
    3774:	2302      	movs	r3, #2
    3776:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
    3778:	2342      	movs	r3, #66	; 0x42
    377a:	62d3      	str	r3, [r2, #44]	; 0x2c
    377c:	bd70      	pop	{r4, r5, r6, pc}
			if (n > position[channel]) {
    377e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3780:	2c5b      	cmp	r4, #91	; 0x5b
    3782:	f200 83a6 	bhi.w	3ed2 <SetIQTapDelays(int)+0x10be>
				if (blks > maxblocks) maxblocks = blks;
    3786:	8bd8      	ldrh	r0, [r3, #30]
    3788:	2801      	cmp	r0, #1
    378a:	d801      	bhi.n	3790 <SetIQTapDelays(int)+0x97c>
    378c:	2002      	movs	r0, #2
    378e:	83d8      	strh	r0, [r3, #30]
				position[channel] = n;
    3790:	205c      	movs	r0, #92	; 0x5c
    3792:	62d8      	str	r0, [r3, #44]	; 0x2c
    3794:	e607      	b.n	33a6 <SetIQTapDelays(int)+0x592>
			if (n > position[channel]) {
    3796:	6a94      	ldr	r4, [r2, #40]	; 0x28
    3798:	2c15      	cmp	r4, #21
    379a:	f200 8365 	bhi.w	3e68 <SetIQTapDelays(int)+0x1054>
				if (blks > maxblocks) maxblocks = blks;
    379e:	8bd4      	ldrh	r4, [r2, #30]
    37a0:	2c01      	cmp	r4, #1
    37a2:	d801      	bhi.n	37a8 <SetIQTapDelays(int)+0x994>
    37a4:	2402      	movs	r4, #2
    37a6:	83d4      	strh	r4, [r2, #30]
				position[channel] = n;
    37a8:	2416      	movs	r4, #22
    37aa:	6294      	str	r4, [r2, #40]	; 0x28
    37ac:	e5ee      	b.n	338c <SetIQTapDelays(int)+0x578>
			if (n > position[channel]) {
    37ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    37b0:	2b20      	cmp	r3, #32
    37b2:	f200 8344 	bhi.w	3e3e <SetIQTapDelays(int)+0x102a>
				if (blks > maxblocks) maxblocks = blks;
    37b6:	8bd3      	ldrh	r3, [r2, #30]
    37b8:	2b01      	cmp	r3, #1
    37ba:	d801      	bhi.n	37c0 <SetIQTapDelays(int)+0x9ac>
    37bc:	2302      	movs	r3, #2
    37be:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
    37c0:	2321      	movs	r3, #33	; 0x21
    37c2:	62d3      	str	r3, [r2, #44]	; 0x2c
    37c4:	bd70      	pop	{r4, r5, r6, pc}
			if (n > position[channel]) {
    37c6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    37c8:	2c50      	cmp	r4, #80	; 0x50
    37ca:	f200 831b 	bhi.w	3e04 <SetIQTapDelays(int)+0xff0>
				if (blks > maxblocks) maxblocks = blks;
    37ce:	8bdc      	ldrh	r4, [r3, #30]
    37d0:	2c01      	cmp	r4, #1
    37d2:	d801      	bhi.n	37d8 <SetIQTapDelays(int)+0x9c4>
    37d4:	2402      	movs	r4, #2
    37d6:	83dc      	strh	r4, [r3, #30]
				position[channel] = n;
    37d8:	2451      	movs	r4, #81	; 0x51
    37da:	629c      	str	r4, [r3, #40]	; 0x28
    37dc:	e5c9      	b.n	3372 <SetIQTapDelays(int)+0x55e>
			if (n > position[channel]) {
    37de:	6a54      	ldr	r4, [r2, #36]	; 0x24
    37e0:	2c0a      	cmp	r4, #10
    37e2:	f200 82f2 	bhi.w	3dca <SetIQTapDelays(int)+0xfb6>
				if (blks > maxblocks) maxblocks = blks;
    37e6:	8bd4      	ldrh	r4, [r2, #30]
    37e8:	2c01      	cmp	r4, #1
    37ea:	d801      	bhi.n	37f0 <SetIQTapDelays(int)+0x9dc>
    37ec:	2402      	movs	r4, #2
    37ee:	83d4      	strh	r4, [r2, #30]
				position[channel] = n;
    37f0:	240b      	movs	r4, #11
    37f2:	6254      	str	r4, [r2, #36]	; 0x24
    37f4:	e5b0      	b.n	3358 <SetIQTapDelays(int)+0x544>
			if (n > position[channel]) {
    37f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    37f8:	2c45      	cmp	r4, #69	; 0x45
    37fa:	f200 82c9 	bhi.w	3d90 <SetIQTapDelays(int)+0xf7c>
				if (blks > maxblocks) maxblocks = blks;
    37fe:	8bdc      	ldrh	r4, [r3, #30]
    3800:	2c01      	cmp	r4, #1
    3802:	d801      	bhi.n	3808 <SetIQTapDelays(int)+0x9f4>
    3804:	2402      	movs	r4, #2
    3806:	83dc      	strh	r4, [r3, #30]
				position[channel] = n;
    3808:	2446      	movs	r4, #70	; 0x46
    380a:	625c      	str	r4, [r3, #36]	; 0x24
    380c:	e597      	b.n	333e <SetIQTapDelays(int)+0x52a>
				position[channel] = n;
    380e:	f04f 0c00 	mov.w	ip, #0
    3812:	4615      	mov	r5, r2
		uint32_t max=0;
    3814:	4666      	mov	r6, ip
				position[channel] = n;
    3816:	f845 cf20 	str.w	ip, [r5, #32]!
			if (activemask & (1<<channel)) {
    381a:	fa41 f40c 	asr.w	r4, r1, ip
    381e:	07e4      	lsls	r4, r4, #31
    3820:	d50a      	bpl.n	3838 <SetIQTapDelays(int)+0xa24>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3822:	f855 402c 	ldr.w	r4, [r5, ip, lsl #2]
    3826:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    382a:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    382e:	f10e 0e01 	add.w	lr, lr, #1
    3832:	4576      	cmp	r6, lr
    3834:	bf38      	it	cc
    3836:	4676      	movcc	r6, lr
		} while(++channel < 8);
    3838:	f10c 0c01 	add.w	ip, ip, #1
    383c:	f1bc 0f08 	cmp.w	ip, #8
    3840:	d1eb      	bne.n	381a <SetIQTapDelays(int)+0xa06>
		maxblocks = max;
    3842:	83d6      	strh	r6, [r2, #30]
	}
    3844:	e56e      	b.n	3324 <SetIQTapDelays(int)+0x510>
			if (n > position[channel]) {
    3846:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3848:	f5b4 7fa2 	cmp.w	r4, #324	; 0x144
    384c:	f080 8282 	bcs.w	3d54 <SetIQTapDelays(int)+0xf40>
				if (blks > maxblocks) maxblocks = blks;
    3850:	8bd8      	ldrh	r0, [r3, #30]
    3852:	2803      	cmp	r0, #3
    3854:	d801      	bhi.n	385a <SetIQTapDelays(int)+0xa46>
    3856:	2004      	movs	r0, #4
    3858:	83d8      	strh	r0, [r3, #30]
				position[channel] = n;
    385a:	f44f 70a2 	mov.w	r0, #324	; 0x144
    385e:	62d8      	str	r0, [r3, #44]	; 0x2c
    3860:	e45e      	b.n	3120 <SetIQTapDelays(int)+0x30c>
			if (n > position[channel]) {
    3862:	6a94      	ldr	r4, [r2, #40]	; 0x28
    3864:	2caf      	cmp	r4, #175	; 0xaf
    3866:	f200 8258 	bhi.w	3d1a <SetIQTapDelays(int)+0xf06>
				if (blks > maxblocks) maxblocks = blks;
    386a:	8bd4      	ldrh	r4, [r2, #30]
    386c:	2c02      	cmp	r4, #2
    386e:	d801      	bhi.n	3874 <SetIQTapDelays(int)+0xa60>
    3870:	2403      	movs	r4, #3
    3872:	83d4      	strh	r4, [r2, #30]
				position[channel] = n;
    3874:	24b0      	movs	r4, #176	; 0xb0
    3876:	6294      	str	r4, [r2, #40]	; 0x28
    3878:	e444      	b.n	3104 <SetIQTapDelays(int)+0x2f0>
			if (n > position[channel]) {
    387a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    387c:	2cea      	cmp	r4, #234	; 0xea
    387e:	f200 822f 	bhi.w	3ce0 <SetIQTapDelays(int)+0xecc>
				if (blks > maxblocks) maxblocks = blks;
    3882:	8bdc      	ldrh	r4, [r3, #30]
    3884:	2c02      	cmp	r4, #2
    3886:	d801      	bhi.n	388c <SetIQTapDelays(int)+0xa78>
    3888:	2403      	movs	r4, #3
    388a:	83dc      	strh	r4, [r3, #30]
				position[channel] = n;
    388c:	24eb      	movs	r4, #235	; 0xeb
    388e:	629c      	str	r4, [r3, #40]	; 0x28
    3890:	e42b      	b.n	30ea <SetIQTapDelays(int)+0x2d6>
			if (n > position[channel]) {
    3892:	6a54      	ldr	r4, [r2, #36]	; 0x24
    3894:	2c57      	cmp	r4, #87	; 0x57
    3896:	f200 8201 	bhi.w	3c9c <SetIQTapDelays(int)+0xe88>
				if (blks > maxblocks) maxblocks = blks;
    389a:	8bd4      	ldrh	r4, [r2, #30]
    389c:	2c01      	cmp	r4, #1
    389e:	d801      	bhi.n	38a4 <SetIQTapDelays(int)+0xa90>
    38a0:	2402      	movs	r4, #2
    38a2:	83d4      	strh	r4, [r2, #30]
				position[channel] = n;
    38a4:	2458      	movs	r4, #88	; 0x58
    38a6:	6254      	str	r4, [r2, #36]	; 0x24
    38a8:	e412      	b.n	30d0 <SetIQTapDelays(int)+0x2bc>
			if (n > position[channel]) {
    38aa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    38ac:	2cbe      	cmp	r4, #190	; 0xbe
    38ae:	f200 84db 	bhi.w	4268 <SetIQTapDelays(int)+0x1454>
				if (blks > maxblocks) maxblocks = blks;
    38b2:	8bd8      	ldrh	r0, [r3, #30]
    38b4:	2802      	cmp	r0, #2
    38b6:	d801      	bhi.n	38bc <SetIQTapDelays(int)+0xaa8>
    38b8:	2003      	movs	r0, #3
    38ba:	83d8      	strh	r0, [r3, #30]
				position[channel] = n;
    38bc:	20bf      	movs	r0, #191	; 0xbf
    38be:	62d8      	str	r0, [r3, #44]	; 0x2c
    38c0:	e49a      	b.n	31f8 <SetIQTapDelays(int)+0x3e4>
			if (n > position[channel]) {
    38c2:	6a94      	ldr	r4, [r2, #40]	; 0x28
    38c4:	2c57      	cmp	r4, #87	; 0x57
    38c6:	f200 84b2 	bhi.w	422e <SetIQTapDelays(int)+0x141a>
				if (blks > maxblocks) maxblocks = blks;
    38ca:	8bd4      	ldrh	r4, [r2, #30]
    38cc:	2c01      	cmp	r4, #1
    38ce:	d801      	bhi.n	38d4 <SetIQTapDelays(int)+0xac0>
    38d0:	2402      	movs	r4, #2
    38d2:	83d4      	strh	r4, [r2, #30]
				position[channel] = n;
    38d4:	2458      	movs	r4, #88	; 0x58
    38d6:	6294      	str	r4, [r2, #40]	; 0x28
    38d8:	e481      	b.n	31de <SetIQTapDelays(int)+0x3ca>
			if (n > position[channel]) {
    38da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    38dc:	2b83      	cmp	r3, #131	; 0x83
    38de:	f200 8479 	bhi.w	41d4 <SetIQTapDelays(int)+0x13c0>
				if (blks > maxblocks) maxblocks = blks;
    38e2:	8bd3      	ldrh	r3, [r2, #30]
    38e4:	2b02      	cmp	r3, #2
    38e6:	d801      	bhi.n	38ec <SetIQTapDelays(int)+0xad8>
    38e8:	2303      	movs	r3, #3
    38ea:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
    38ec:	2384      	movs	r3, #132	; 0x84
    38ee:	62d3      	str	r3, [r2, #44]	; 0x2c
    38f0:	bd70      	pop	{r4, r5, r6, pc}
			if (n > position[channel]) {
    38f2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    38f4:	2c92      	cmp	r4, #146	; 0x92
    38f6:	f200 8416 	bhi.w	4126 <SetIQTapDelays(int)+0x1312>
				if (blks > maxblocks) maxblocks = blks;
    38fa:	8bdc      	ldrh	r4, [r3, #30]
    38fc:	2c02      	cmp	r4, #2
    38fe:	d801      	bhi.n	3904 <SetIQTapDelays(int)+0xaf0>
    3900:	2403      	movs	r4, #3
    3902:	83dc      	strh	r4, [r3, #30]
				position[channel] = n;
    3904:	2493      	movs	r4, #147	; 0x93
    3906:	629c      	str	r4, [r3, #40]	; 0x28
    3908:	e45c      	b.n	31c4 <SetIQTapDelays(int)+0x3b0>
			if (n > position[channel]) {
    390a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    390c:	2c2b      	cmp	r4, #43	; 0x2b
    390e:	f200 83ed 	bhi.w	40ec <SetIQTapDelays(int)+0x12d8>
				if (blks > maxblocks) maxblocks = blks;
    3912:	8bd4      	ldrh	r4, [r2, #30]
    3914:	2c01      	cmp	r4, #1
    3916:	d801      	bhi.n	391c <SetIQTapDelays(int)+0xb08>
    3918:	2402      	movs	r4, #2
    391a:	83d4      	strh	r4, [r2, #30]
				position[channel] = n;
    391c:	242c      	movs	r4, #44	; 0x2c
    391e:	6254      	str	r4, [r2, #36]	; 0x24
    3920:	e443      	b.n	31aa <SetIQTapDelays(int)+0x396>
			if (n > position[channel]) {
    3922:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    3924:	2c66      	cmp	r4, #102	; 0x66
    3926:	f200 8438 	bhi.w	419a <SetIQTapDelays(int)+0x1386>
				if (blks > maxblocks) maxblocks = blks;
    392a:	8bdc      	ldrh	r4, [r3, #30]
    392c:	2c01      	cmp	r4, #1
    392e:	d801      	bhi.n	3934 <SetIQTapDelays(int)+0xb20>
    3930:	2402      	movs	r4, #2
    3932:	83dc      	strh	r4, [r3, #30]
				position[channel] = n;
    3934:	2467      	movs	r4, #103	; 0x67
    3936:	625c      	str	r4, [r3, #36]	; 0x24
    3938:	e42a      	b.n	3190 <SetIQTapDelays(int)+0x37c>
				position[channel] = n;
    393a:	f04f 0c00 	mov.w	ip, #0
    393e:	4615      	mov	r5, r2
		uint32_t max=0;
    3940:	4666      	mov	r6, ip
				position[channel] = n;
    3942:	f845 cf20 	str.w	ip, [r5, #32]!
			if (activemask & (1<<channel)) {
    3946:	fa41 f40c 	asr.w	r4, r1, ip
    394a:	07e4      	lsls	r4, r4, #31
    394c:	d50a      	bpl.n	3964 <SetIQTapDelays(int)+0xb50>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    394e:	f855 402c 	ldr.w	r4, [r5, ip, lsl #2]
    3952:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3956:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    395a:	f10e 0e01 	add.w	lr, lr, #1
    395e:	4576      	cmp	r6, lr
    3960:	bf38      	it	cc
    3962:	4676      	movcc	r6, lr
		} while(++channel < 8);
    3964:	f10c 0c01 	add.w	ip, ip, #1
    3968:	f1bc 0f08 	cmp.w	ip, #8
    396c:	d1eb      	bne.n	3946 <SetIQTapDelays(int)+0xb32>
		maxblocks = max;
    396e:	83d6      	strh	r6, [r2, #30]
	}
    3970:	e401      	b.n	3176 <SetIQTapDelays(int)+0x362>
			if (n > position[channel]) {
    3972:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    3974:	2c92      	cmp	r4, #146	; 0x92
    3976:	f200 83f3 	bhi.w	4160 <SetIQTapDelays(int)+0x134c>
				if (blks > maxblocks) maxblocks = blks;
    397a:	8bdc      	ldrh	r4, [r3, #30]
    397c:	2c02      	cmp	r4, #2
    397e:	d801      	bhi.n	3984 <SetIQTapDelays(int)+0xb70>
    3980:	2403      	movs	r4, #3
    3982:	83dc      	strh	r4, [r3, #30]
				position[channel] = n;
    3984:	2493      	movs	r4, #147	; 0x93
    3986:	625c      	str	r4, [r3, #36]	; 0x24
    3988:	f7ff bb95 	b.w	30b6 <SetIQTapDelays(int)+0x2a2>
				position[channel] = n;
    398c:	f04f 0c00 	mov.w	ip, #0
    3990:	4615      	mov	r5, r2
		uint32_t max=0;
    3992:	4666      	mov	r6, ip
				position[channel] = n;
    3994:	f845 cf20 	str.w	ip, [r5, #32]!
			if (activemask & (1<<channel)) {
    3998:	fa41 f40c 	asr.w	r4, r1, ip
    399c:	07e4      	lsls	r4, r4, #31
    399e:	d50a      	bpl.n	39b6 <SetIQTapDelays(int)+0xba2>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    39a0:	f855 402c 	ldr.w	r4, [r5, ip, lsl #2]
    39a4:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    39a8:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    39ac:	f10e 0e01 	add.w	lr, lr, #1
    39b0:	4576      	cmp	r6, lr
    39b2:	bf38      	it	cc
    39b4:	4676      	movcc	r6, lr
		} while(++channel < 8);
    39b6:	f10c 0c01 	add.w	ip, ip, #1
    39ba:	f1bc 0f08 	cmp.w	ip, #8
    39be:	d1eb      	bne.n	3998 <SetIQTapDelays(int)+0xb84>
		maxblocks = max;
    39c0:	83d6      	strh	r6, [r2, #30]
	}
    39c2:	f7ff bb6b 	b.w	309c <SetIQTapDelays(int)+0x288>
			if (n > position[channel]) {
    39c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    39c8:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
    39cc:	f200 82b3 	bhi.w	3f36 <SetIQTapDelays(int)+0x1122>
				if (blks > maxblocks) maxblocks = blks;
    39d0:	8bd3      	ldrh	r3, [r2, #30]
    39d2:	2b03      	cmp	r3, #3
    39d4:	d801      	bhi.n	39da <SetIQTapDelays(int)+0xbc6>
    39d6:	2304      	movs	r3, #4
    39d8:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
    39da:	f240 1309 	movw	r3, #265	; 0x109
    39de:	62d3      	str	r3, [r2, #44]	; 0x2c
    39e0:	bd70      	pop	{r4, r5, r6, pc}
		uint32_t channel = 0;
    39e2:	2300      	movs	r3, #0
				position[channel] = n;
    39e4:	202c      	movs	r0, #44	; 0x2c
				uint32_t n = position[channel];
    39e6:	4dbc      	ldr	r5, [pc, #752]	; (3cd8 <SetIQTapDelays(int)+0xec4>)
		uint32_t max=0;
    39e8:	461c      	mov	r4, r3
				position[channel] = n;
    39ea:	6250      	str	r0, [r2, #36]	; 0x24
			if (activemask & (1<<channel)) {
    39ec:	fa41 f003 	asr.w	r0, r1, r3
    39f0:	07c0      	lsls	r0, r0, #31
    39f2:	d507      	bpl.n	3a04 <SetIQTapDelays(int)+0xbf0>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    39f4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    39f8:	307f      	adds	r0, #127	; 0x7f
    39fa:	09c0      	lsrs	r0, r0, #7
    39fc:	3001      	adds	r0, #1
    39fe:	4284      	cmp	r4, r0
    3a00:	bf38      	it	cc
    3a02:	4604      	movcc	r4, r0
		} while(++channel < 8);
    3a04:	3301      	adds	r3, #1
    3a06:	2b08      	cmp	r3, #8
    3a08:	d1f0      	bne.n	39ec <SetIQTapDelays(int)+0xbd8>
		maxblocks = max;
    3a0a:	83d4      	strh	r4, [r2, #30]
    3a0c:	bd70      	pop	{r4, r5, r6, pc}
		uint32_t channel = 0;
    3a0e:	2200      	movs	r2, #0
				position[channel] = n;
    3a10:	213b      	movs	r1, #59	; 0x3b
    3a12:	461d      	mov	r5, r3
		uint32_t max=0;
    3a14:	4614      	mov	r4, r2
				position[channel] = n;
    3a16:	f845 1f20 	str.w	r1, [r5, #32]!
			if (activemask & (1<<channel)) {
    3a1a:	fa40 f102 	asr.w	r1, r0, r2
    3a1e:	07ce      	lsls	r6, r1, #31
    3a20:	d507      	bpl.n	3a32 <SetIQTapDelays(int)+0xc1e>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3a22:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    3a26:	317f      	adds	r1, #127	; 0x7f
    3a28:	09c9      	lsrs	r1, r1, #7
    3a2a:	3101      	adds	r1, #1
    3a2c:	428c      	cmp	r4, r1
    3a2e:	bf38      	it	cc
    3a30:	460c      	movcc	r4, r1
		} while(++channel < 8);
    3a32:	3201      	adds	r2, #1
    3a34:	2a08      	cmp	r2, #8
    3a36:	d1f0      	bne.n	3a1a <SetIQTapDelays(int)+0xc06>
		maxblocks = max;
    3a38:	83dc      	strh	r4, [r3, #30]
	}
    3a3a:	f7ff baad 	b.w	2f98 <SetIQTapDelays(int)+0x184>
				position[channel] = n;
    3a3e:	2493      	movs	r4, #147	; 0x93
		uint32_t channel = 0;
    3a40:	f04f 0c00 	mov.w	ip, #0
				uint32_t n = position[channel];
    3a44:	4da5      	ldr	r5, [pc, #660]	; (3cdc <SetIQTapDelays(int)+0xec8>)
				position[channel] = n;
    3a46:	625c      	str	r4, [r3, #36]	; 0x24
		uint32_t max=0;
    3a48:	4664      	mov	r4, ip
			if (activemask & (1<<channel)) {
    3a4a:	fa40 fe0c 	asr.w	lr, r0, ip
    3a4e:	f01e 0f01 	tst.w	lr, #1
    3a52:	d00a      	beq.n	3a6a <SetIQTapDelays(int)+0xc56>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3a54:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
    3a58:	f106 0e7f 	add.w	lr, r6, #127	; 0x7f
    3a5c:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3a60:	f10e 0e01 	add.w	lr, lr, #1
    3a64:	4574      	cmp	r4, lr
    3a66:	bf38      	it	cc
    3a68:	4674      	movcc	r4, lr
		} while(++channel < 8);
    3a6a:	f10c 0c01 	add.w	ip, ip, #1
    3a6e:	f1bc 0f08 	cmp.w	ip, #8
    3a72:	d1ea      	bne.n	3a4a <SetIQTapDelays(int)+0xc36>
		maxblocks = max;
    3a74:	83dc      	strh	r4, [r3, #30]
	}
    3a76:	f7ff bade 	b.w	3036 <SetIQTapDelays(int)+0x222>
		uint32_t channel = 0;
    3a7a:	2200      	movs	r2, #0
				position[channel] = n;
    3a7c:	213b      	movs	r1, #59	; 0x3b
    3a7e:	461d      	mov	r5, r3
		uint32_t max=0;
    3a80:	4614      	mov	r4, r2
				position[channel] = n;
    3a82:	f845 1f20 	str.w	r1, [r5, #32]!
			if (activemask & (1<<channel)) {
    3a86:	fa40 f102 	asr.w	r1, r0, r2
    3a8a:	07ce      	lsls	r6, r1, #31
    3a8c:	d507      	bpl.n	3a9e <SetIQTapDelays(int)+0xc8a>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3a8e:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    3a92:	317f      	adds	r1, #127	; 0x7f
    3a94:	09c9      	lsrs	r1, r1, #7
    3a96:	3101      	adds	r1, #1
    3a98:	428c      	cmp	r4, r1
    3a9a:	bf38      	it	cc
    3a9c:	460c      	movcc	r4, r1
		} while(++channel < 8);
    3a9e:	3201      	adds	r2, #1
    3aa0:	2a08      	cmp	r2, #8
    3aa2:	d1f0      	bne.n	3a86 <SetIQTapDelays(int)+0xc72>
		maxblocks = max;
    3aa4:	83dc      	strh	r4, [r3, #30]
	}
    3aa6:	f7ff baab 	b.w	3000 <SetIQTapDelays(int)+0x1ec>
				position[channel] = n;
    3aaa:	2467      	movs	r4, #103	; 0x67
		uint32_t channel = 0;
    3aac:	f04f 0c00 	mov.w	ip, #0
				uint32_t n = position[channel];
    3ab0:	4d8a      	ldr	r5, [pc, #552]	; (3cdc <SetIQTapDelays(int)+0xec8>)
				position[channel] = n;
    3ab2:	625c      	str	r4, [r3, #36]	; 0x24
		uint32_t max=0;
    3ab4:	4664      	mov	r4, ip
			if (activemask & (1<<channel)) {
    3ab6:	fa40 fe0c 	asr.w	lr, r0, ip
    3aba:	f01e 0f01 	tst.w	lr, #1
    3abe:	d00a      	beq.n	3ad6 <SetIQTapDelays(int)+0xcc2>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3ac0:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
    3ac4:	f106 0e7f 	add.w	lr, r6, #127	; 0x7f
    3ac8:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3acc:	f10e 0e01 	add.w	lr, lr, #1
    3ad0:	4574      	cmp	r4, lr
    3ad2:	bf38      	it	cc
    3ad4:	4674      	movcc	r4, lr
		} while(++channel < 8);
    3ad6:	f10c 0c01 	add.w	ip, ip, #1
    3ada:	f1bc 0f08 	cmp.w	ip, #8
    3ade:	d1ea      	bne.n	3ab6 <SetIQTapDelays(int)+0xca2>
		maxblocks = max;
    3ae0:	83dc      	strh	r4, [r3, #30]
	}
    3ae2:	f7ff ba74 	b.w	2fce <SetIQTapDelays(int)+0x1ba>
		uint32_t channel = 0;
    3ae6:	2300      	movs	r3, #0
				position[channel] = n;
    3ae8:	2058      	movs	r0, #88	; 0x58
				uint32_t n = position[channel];
    3aea:	4d7b      	ldr	r5, [pc, #492]	; (3cd8 <SetIQTapDelays(int)+0xec4>)
		uint32_t max=0;
    3aec:	461c      	mov	r4, r3
				position[channel] = n;
    3aee:	6250      	str	r0, [r2, #36]	; 0x24
			if (activemask & (1<<channel)) {
    3af0:	fa41 f003 	asr.w	r0, r1, r3
    3af4:	07c0      	lsls	r0, r0, #31
    3af6:	d507      	bpl.n	3b08 <SetIQTapDelays(int)+0xcf4>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3af8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    3afc:	307f      	adds	r0, #127	; 0x7f
    3afe:	09c0      	lsrs	r0, r0, #7
    3b00:	3001      	adds	r0, #1
    3b02:	4284      	cmp	r4, r0
    3b04:	bf38      	it	cc
    3b06:	4604      	movcc	r4, r0
		} while(++channel < 8);
    3b08:	3301      	adds	r3, #1
    3b0a:	2b08      	cmp	r3, #8
    3b0c:	d1f0      	bne.n	3af0 <SetIQTapDelays(int)+0xcdc>
    3b0e:	e77c      	b.n	3a0a <SetIQTapDelays(int)+0xbf6>
		uint32_t channel = 0;
    3b10:	2300      	movs	r3, #0
				position[channel] = n;
    3b12:	20b0      	movs	r0, #176	; 0xb0
				uint32_t n = position[channel];
    3b14:	4d70      	ldr	r5, [pc, #448]	; (3cd8 <SetIQTapDelays(int)+0xec4>)
		uint32_t max=0;
    3b16:	461c      	mov	r4, r3
				position[channel] = n;
    3b18:	6250      	str	r0, [r2, #36]	; 0x24
			if (activemask & (1<<channel)) {
    3b1a:	fa41 f003 	asr.w	r0, r1, r3
    3b1e:	07c0      	lsls	r0, r0, #31
    3b20:	d507      	bpl.n	3b32 <SetIQTapDelays(int)+0xd1e>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3b22:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    3b26:	307f      	adds	r0, #127	; 0x7f
    3b28:	09c0      	lsrs	r0, r0, #7
    3b2a:	3001      	adds	r0, #1
    3b2c:	4284      	cmp	r4, r0
    3b2e:	bf38      	it	cc
    3b30:	4604      	movcc	r4, r0
		} while(++channel < 8);
    3b32:	3301      	adds	r3, #1
    3b34:	2b08      	cmp	r3, #8
    3b36:	d1f0      	bne.n	3b1a <SetIQTapDelays(int)+0xd06>
    3b38:	e767      	b.n	3a0a <SetIQTapDelays(int)+0xbf6>
		uint32_t channel = 0;
    3b3a:	2200      	movs	r2, #0
				position[channel] = n;
    3b3c:	213b      	movs	r1, #59	; 0x3b
    3b3e:	461d      	mov	r5, r3
		uint32_t max=0;
    3b40:	4614      	mov	r4, r2
				position[channel] = n;
    3b42:	f845 1f20 	str.w	r1, [r5, #32]!
			if (activemask & (1<<channel)) {
    3b46:	fa40 f102 	asr.w	r1, r0, r2
    3b4a:	07ce      	lsls	r6, r1, #31
    3b4c:	d507      	bpl.n	3b5e <SetIQTapDelays(int)+0xd4a>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3b4e:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    3b52:	317f      	adds	r1, #127	; 0x7f
    3b54:	09c9      	lsrs	r1, r1, #7
    3b56:	3101      	adds	r1, #1
    3b58:	428c      	cmp	r4, r1
    3b5a:	bf38      	it	cc
    3b5c:	460c      	movcc	r4, r1
		} while(++channel < 8);
    3b5e:	3201      	adds	r2, #1
    3b60:	2a08      	cmp	r2, #8
    3b62:	d1f0      	bne.n	3b46 <SetIQTapDelays(int)+0xd32>
		maxblocks = max;
    3b64:	83dc      	strh	r4, [r3, #30]
	}
    3b66:	f7ff b97f 	b.w	2e68 <SetIQTapDelays(int)+0x54>
				position[channel] = n;
    3b6a:	24eb      	movs	r4, #235	; 0xeb
		uint32_t channel = 0;
    3b6c:	f04f 0c00 	mov.w	ip, #0
				uint32_t n = position[channel];
    3b70:	4d5a      	ldr	r5, [pc, #360]	; (3cdc <SetIQTapDelays(int)+0xec8>)
				position[channel] = n;
    3b72:	625c      	str	r4, [r3, #36]	; 0x24
		uint32_t max=0;
    3b74:	4664      	mov	r4, ip
			if (activemask & (1<<channel)) {
    3b76:	fa40 fe0c 	asr.w	lr, r0, ip
    3b7a:	f01e 0f01 	tst.w	lr, #1
    3b7e:	d00a      	beq.n	3b96 <SetIQTapDelays(int)+0xd82>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3b80:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
    3b84:	f106 0e7f 	add.w	lr, r6, #127	; 0x7f
    3b88:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3b8c:	f10e 0e01 	add.w	lr, lr, #1
    3b90:	4574      	cmp	r4, lr
    3b92:	bf38      	it	cc
    3b94:	4674      	movcc	r4, lr
		} while(++channel < 8);
    3b96:	f10c 0c01 	add.w	ip, ip, #1
    3b9a:	f1bc 0f08 	cmp.w	ip, #8
    3b9e:	d1ea      	bne.n	3b76 <SetIQTapDelays(int)+0xd62>
		maxblocks = max;
    3ba0:	83dc      	strh	r4, [r3, #30]
	}
    3ba2:	f7ff b97c 	b.w	2e9e <SetIQTapDelays(int)+0x8a>
				position[channel] = n;
    3ba6:	2451      	movs	r4, #81	; 0x51
		uint32_t channel = 0;
    3ba8:	f04f 0c00 	mov.w	ip, #0
				uint32_t n = position[channel];
    3bac:	4d4b      	ldr	r5, [pc, #300]	; (3cdc <SetIQTapDelays(int)+0xec8>)
				position[channel] = n;
    3bae:	625c      	str	r4, [r3, #36]	; 0x24
		uint32_t max=0;
    3bb0:	4664      	mov	r4, ip
			if (activemask & (1<<channel)) {
    3bb2:	fa40 fe0c 	asr.w	lr, r0, ip
    3bb6:	f01e 0f01 	tst.w	lr, #1
    3bba:	d00a      	beq.n	3bd2 <SetIQTapDelays(int)+0xdbe>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3bbc:	f855 602c 	ldr.w	r6, [r5, ip, lsl #2]
    3bc0:	f106 0e7f 	add.w	lr, r6, #127	; 0x7f
    3bc4:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3bc8:	f10e 0e01 	add.w	lr, lr, #1
    3bcc:	4574      	cmp	r4, lr
    3bce:	bf38      	it	cc
    3bd0:	4674      	movcc	r4, lr
		} while(++channel < 8);
    3bd2:	f10c 0c01 	add.w	ip, ip, #1
    3bd6:	f1bc 0f08 	cmp.w	ip, #8
    3bda:	d1ea      	bne.n	3bb2 <SetIQTapDelays(int)+0xd9e>
		maxblocks = max;
    3bdc:	83dc      	strh	r4, [r3, #30]
	}
    3bde:	f7ff b9c2 	b.w	2f66 <SetIQTapDelays(int)+0x152>
		uint32_t channel = 0;
    3be2:	2300      	movs	r3, #0
				position[channel] = n;
    3be4:	2016      	movs	r0, #22
				uint32_t n = position[channel];
    3be6:	4d3c      	ldr	r5, [pc, #240]	; (3cd8 <SetIQTapDelays(int)+0xec4>)
		uint32_t max=0;
    3be8:	461c      	mov	r4, r3
				position[channel] = n;
    3bea:	6250      	str	r0, [r2, #36]	; 0x24
			if (activemask & (1<<channel)) {
    3bec:	fa41 f003 	asr.w	r0, r1, r3
    3bf0:	07c0      	lsls	r0, r0, #31
    3bf2:	d507      	bpl.n	3c04 <SetIQTapDelays(int)+0xdf0>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3bf4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    3bf8:	307f      	adds	r0, #127	; 0x7f
    3bfa:	09c0      	lsrs	r0, r0, #7
    3bfc:	3001      	adds	r0, #1
    3bfe:	4284      	cmp	r4, r0
    3c00:	bf38      	it	cc
    3c02:	4604      	movcc	r4, r0
		} while(++channel < 8);
    3c04:	3301      	adds	r3, #1
    3c06:	2b08      	cmp	r3, #8
    3c08:	d1f0      	bne.n	3bec <SetIQTapDelays(int)+0xdd8>
    3c0a:	e6fe      	b.n	3a0a <SetIQTapDelays(int)+0xbf6>
		uint32_t channel = 0;
    3c0c:	2200      	movs	r2, #0
				position[channel] = n;
    3c0e:	213b      	movs	r1, #59	; 0x3b
    3c10:	461d      	mov	r5, r3
		uint32_t max=0;
    3c12:	4614      	mov	r4, r2
				position[channel] = n;
    3c14:	f845 1f20 	str.w	r1, [r5, #32]!
			if (activemask & (1<<channel)) {
    3c18:	fa40 f102 	asr.w	r1, r0, r2
    3c1c:	07ce      	lsls	r6, r1, #31
    3c1e:	d507      	bpl.n	3c30 <SetIQTapDelays(int)+0xe1c>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3c20:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    3c24:	317f      	adds	r1, #127	; 0x7f
    3c26:	09c9      	lsrs	r1, r1, #7
    3c28:	3101      	adds	r1, #1
    3c2a:	428c      	cmp	r4, r1
    3c2c:	bf38      	it	cc
    3c2e:	460c      	movcc	r4, r1
		} while(++channel < 8);
    3c30:	3201      	adds	r2, #1
    3c32:	2a08      	cmp	r2, #8
    3c34:	d1f0      	bne.n	3c18 <SetIQTapDelays(int)+0xe04>
		maxblocks = max;
    3c36:	83dc      	strh	r4, [r3, #30]
	}
    3c38:	f7ff b97a 	b.w	2f30 <SetIQTapDelays(int)+0x11c>
		uint32_t channel = 0;
    3c3c:	2200      	movs	r2, #0
				position[channel] = n;
    3c3e:	213b      	movs	r1, #59	; 0x3b
    3c40:	461d      	mov	r5, r3
		uint32_t max=0;
    3c42:	4614      	mov	r4, r2
				position[channel] = n;
    3c44:	f845 1f20 	str.w	r1, [r5, #32]!
			if (activemask & (1<<channel)) {
    3c48:	fa40 f102 	asr.w	r1, r0, r2
    3c4c:	07ce      	lsls	r6, r1, #31
    3c4e:	d507      	bpl.n	3c60 <SetIQTapDelays(int)+0xe4c>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3c50:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    3c54:	317f      	adds	r1, #127	; 0x7f
    3c56:	09c9      	lsrs	r1, r1, #7
    3c58:	3101      	adds	r1, #1
    3c5a:	428c      	cmp	r4, r1
    3c5c:	bf38      	it	cc
    3c5e:	460c      	movcc	r4, r1
		} while(++channel < 8);
    3c60:	3201      	adds	r2, #1
    3c62:	2a08      	cmp	r2, #8
    3c64:	d1f0      	bne.n	3c48 <SetIQTapDelays(int)+0xe34>
		maxblocks = max;
    3c66:	83dc      	strh	r4, [r3, #30]
	}
    3c68:	f7ff b935 	b.w	2ed6 <SetIQTapDelays(int)+0xc2>
		uint32_t channel = 0;
    3c6c:	2200      	movs	r2, #0
				position[channel] = n;
    3c6e:	213b      	movs	r1, #59	; 0x3b
    3c70:	461d      	mov	r5, r3
		uint32_t max=0;
    3c72:	4614      	mov	r4, r2
				position[channel] = n;
    3c74:	f845 1f20 	str.w	r1, [r5, #32]!
			if (activemask & (1<<channel)) {
    3c78:	fa40 f102 	asr.w	r1, r0, r2
    3c7c:	07ce      	lsls	r6, r1, #31
    3c7e:	d507      	bpl.n	3c90 <SetIQTapDelays(int)+0xe7c>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3c80:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    3c84:	317f      	adds	r1, #127	; 0x7f
    3c86:	09c9      	lsrs	r1, r1, #7
    3c88:	3101      	adds	r1, #1
    3c8a:	428c      	cmp	r4, r1
    3c8c:	bf38      	it	cc
    3c8e:	460c      	movcc	r4, r1
		} while(++channel < 8);
    3c90:	3201      	adds	r2, #1
    3c92:	2a08      	cmp	r2, #8
    3c94:	d1f0      	bne.n	3c78 <SetIQTapDelays(int)+0xe64>
		maxblocks = max;
    3c96:	83dc      	strh	r4, [r3, #30]
	}
    3c98:	f7ff bba2 	b.w	33e0 <SetIQTapDelays(int)+0x5cc>
		uint32_t channel = 0;
    3c9c:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3ca0:	2458      	movs	r4, #88	; 0x58
				uint32_t n = position[channel];
    3ca2:	4e0d      	ldr	r6, [pc, #52]	; (3cd8 <SetIQTapDelays(int)+0xec4>)
		uint32_t max=0;
    3ca4:	4665      	mov	r5, ip
				position[channel] = n;
    3ca6:	6254      	str	r4, [r2, #36]	; 0x24
			if (activemask & (1<<channel)) {
    3ca8:	fa41 f40c 	asr.w	r4, r1, ip
    3cac:	07e4      	lsls	r4, r4, #31
    3cae:	d50a      	bpl.n	3cc6 <SetIQTapDelays(int)+0xeb2>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3cb0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3cb4:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3cb8:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3cbc:	f10e 0e01 	add.w	lr, lr, #1
    3cc0:	4575      	cmp	r5, lr
    3cc2:	bf38      	it	cc
    3cc4:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3cc6:	f10c 0c01 	add.w	ip, ip, #1
    3cca:	f1bc 0f08 	cmp.w	ip, #8
    3cce:	d1eb      	bne.n	3ca8 <SetIQTapDelays(int)+0xe94>
		maxblocks = max;
    3cd0:	83d5      	strh	r5, [r2, #30]
	}
    3cd2:	f7ff b9fd 	b.w	30d0 <SetIQTapDelays(int)+0x2bc>
    3cd6:	bf00      	nop
    3cd8:	2000e130 	.word	0x2000e130
    3cdc:	2000cb60 	.word	0x2000cb60
		uint32_t channel = 0;
    3ce0:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3ce4:	24eb      	movs	r4, #235	; 0xeb
				uint32_t n = position[channel];
    3ce6:	4eb9      	ldr	r6, [pc, #740]	; (3fcc <SetIQTapDelays(int)+0x11b8>)
		uint32_t max=0;
    3ce8:	4665      	mov	r5, ip
				position[channel] = n;
    3cea:	629c      	str	r4, [r3, #40]	; 0x28
			if (activemask & (1<<channel)) {
    3cec:	fa40 f40c 	asr.w	r4, r0, ip
    3cf0:	07e4      	lsls	r4, r4, #31
    3cf2:	d50a      	bpl.n	3d0a <SetIQTapDelays(int)+0xef6>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3cf4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3cf8:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3cfc:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3d00:	f10e 0e01 	add.w	lr, lr, #1
    3d04:	4575      	cmp	r5, lr
    3d06:	bf38      	it	cc
    3d08:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3d0a:	f10c 0c01 	add.w	ip, ip, #1
    3d0e:	f1bc 0f08 	cmp.w	ip, #8
    3d12:	d1eb      	bne.n	3cec <SetIQTapDelays(int)+0xed8>
		maxblocks = max;
    3d14:	83dd      	strh	r5, [r3, #30]
	}
    3d16:	f7ff b9e8 	b.w	30ea <SetIQTapDelays(int)+0x2d6>
		uint32_t channel = 0;
    3d1a:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3d1e:	24b0      	movs	r4, #176	; 0xb0
				uint32_t n = position[channel];
    3d20:	4eab      	ldr	r6, [pc, #684]	; (3fd0 <SetIQTapDelays(int)+0x11bc>)
		uint32_t max=0;
    3d22:	4665      	mov	r5, ip
				position[channel] = n;
    3d24:	6294      	str	r4, [r2, #40]	; 0x28
			if (activemask & (1<<channel)) {
    3d26:	fa41 f40c 	asr.w	r4, r1, ip
    3d2a:	07e4      	lsls	r4, r4, #31
    3d2c:	d50a      	bpl.n	3d44 <SetIQTapDelays(int)+0xf30>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3d2e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3d32:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3d36:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3d3a:	f10e 0e01 	add.w	lr, lr, #1
    3d3e:	4575      	cmp	r5, lr
    3d40:	bf38      	it	cc
    3d42:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3d44:	f10c 0c01 	add.w	ip, ip, #1
    3d48:	f1bc 0f08 	cmp.w	ip, #8
    3d4c:	d1eb      	bne.n	3d26 <SetIQTapDelays(int)+0xf12>
		maxblocks = max;
    3d4e:	83d5      	strh	r5, [r2, #30]
	}
    3d50:	f7ff b9d8 	b.w	3104 <SetIQTapDelays(int)+0x2f0>
		uint32_t channel = 0;
    3d54:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3d58:	f44f 74a2 	mov.w	r4, #324	; 0x144
				uint32_t n = position[channel];
    3d5c:	4e9b      	ldr	r6, [pc, #620]	; (3fcc <SetIQTapDelays(int)+0x11b8>)
		uint32_t max=0;
    3d5e:	4665      	mov	r5, ip
				position[channel] = n;
    3d60:	62dc      	str	r4, [r3, #44]	; 0x2c
			if (activemask & (1<<channel)) {
    3d62:	fa40 f40c 	asr.w	r4, r0, ip
    3d66:	07e4      	lsls	r4, r4, #31
    3d68:	d50a      	bpl.n	3d80 <SetIQTapDelays(int)+0xf6c>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3d6a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3d6e:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3d72:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3d76:	f10e 0e01 	add.w	lr, lr, #1
    3d7a:	4575      	cmp	r5, lr
    3d7c:	bf38      	it	cc
    3d7e:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3d80:	f10c 0c01 	add.w	ip, ip, #1
    3d84:	f1bc 0f08 	cmp.w	ip, #8
    3d88:	d1eb      	bne.n	3d62 <SetIQTapDelays(int)+0xf4e>
		maxblocks = max;
    3d8a:	83dd      	strh	r5, [r3, #30]
	}
    3d8c:	f7ff b9c8 	b.w	3120 <SetIQTapDelays(int)+0x30c>
		uint32_t channel = 0;
    3d90:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3d94:	2446      	movs	r4, #70	; 0x46
				uint32_t n = position[channel];
    3d96:	4e8d      	ldr	r6, [pc, #564]	; (3fcc <SetIQTapDelays(int)+0x11b8>)
		uint32_t max=0;
    3d98:	4665      	mov	r5, ip
				position[channel] = n;
    3d9a:	625c      	str	r4, [r3, #36]	; 0x24
			if (activemask & (1<<channel)) {
    3d9c:	fa40 f40c 	asr.w	r4, r0, ip
    3da0:	07e4      	lsls	r4, r4, #31
    3da2:	d50a      	bpl.n	3dba <SetIQTapDelays(int)+0xfa6>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3da4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3da8:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3dac:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3db0:	f10e 0e01 	add.w	lr, lr, #1
    3db4:	4575      	cmp	r5, lr
    3db6:	bf38      	it	cc
    3db8:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3dba:	f10c 0c01 	add.w	ip, ip, #1
    3dbe:	f1bc 0f08 	cmp.w	ip, #8
    3dc2:	d1eb      	bne.n	3d9c <SetIQTapDelays(int)+0xf88>
		maxblocks = max;
    3dc4:	83dd      	strh	r5, [r3, #30]
	}
    3dc6:	f7ff baba 	b.w	333e <SetIQTapDelays(int)+0x52a>
		uint32_t channel = 0;
    3dca:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3dce:	240b      	movs	r4, #11
				uint32_t n = position[channel];
    3dd0:	4e7f      	ldr	r6, [pc, #508]	; (3fd0 <SetIQTapDelays(int)+0x11bc>)
		uint32_t max=0;
    3dd2:	4665      	mov	r5, ip
				position[channel] = n;
    3dd4:	6254      	str	r4, [r2, #36]	; 0x24
			if (activemask & (1<<channel)) {
    3dd6:	fa41 f40c 	asr.w	r4, r1, ip
    3dda:	07e4      	lsls	r4, r4, #31
    3ddc:	d50a      	bpl.n	3df4 <SetIQTapDelays(int)+0xfe0>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3dde:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3de2:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3de6:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3dea:	f10e 0e01 	add.w	lr, lr, #1
    3dee:	4575      	cmp	r5, lr
    3df0:	bf38      	it	cc
    3df2:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3df4:	f10c 0c01 	add.w	ip, ip, #1
    3df8:	f1bc 0f08 	cmp.w	ip, #8
    3dfc:	d1eb      	bne.n	3dd6 <SetIQTapDelays(int)+0xfc2>
		maxblocks = max;
    3dfe:	83d5      	strh	r5, [r2, #30]
	}
    3e00:	f7ff baaa 	b.w	3358 <SetIQTapDelays(int)+0x544>
		uint32_t channel = 0;
    3e04:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3e08:	2451      	movs	r4, #81	; 0x51
				uint32_t n = position[channel];
    3e0a:	4e70      	ldr	r6, [pc, #448]	; (3fcc <SetIQTapDelays(int)+0x11b8>)
		uint32_t max=0;
    3e0c:	4665      	mov	r5, ip
				position[channel] = n;
    3e0e:	629c      	str	r4, [r3, #40]	; 0x28
			if (activemask & (1<<channel)) {
    3e10:	fa40 f40c 	asr.w	r4, r0, ip
    3e14:	07e4      	lsls	r4, r4, #31
    3e16:	d50a      	bpl.n	3e2e <SetIQTapDelays(int)+0x101a>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3e18:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3e1c:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3e20:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3e24:	f10e 0e01 	add.w	lr, lr, #1
    3e28:	4575      	cmp	r5, lr
    3e2a:	bf38      	it	cc
    3e2c:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3e2e:	f10c 0c01 	add.w	ip, ip, #1
    3e32:	f1bc 0f08 	cmp.w	ip, #8
    3e36:	d1eb      	bne.n	3e10 <SetIQTapDelays(int)+0xffc>
		maxblocks = max;
    3e38:	83dd      	strh	r5, [r3, #30]
	}
    3e3a:	f7ff ba9a 	b.w	3372 <SetIQTapDelays(int)+0x55e>
		uint32_t channel = 0;
    3e3e:	2300      	movs	r3, #0
				position[channel] = n;
    3e40:	2021      	movs	r0, #33	; 0x21
				uint32_t n = position[channel];
    3e42:	4d63      	ldr	r5, [pc, #396]	; (3fd0 <SetIQTapDelays(int)+0x11bc>)
		uint32_t max=0;
    3e44:	461c      	mov	r4, r3
				position[channel] = n;
    3e46:	62d0      	str	r0, [r2, #44]	; 0x2c
			if (activemask & (1<<channel)) {
    3e48:	fa41 f003 	asr.w	r0, r1, r3
    3e4c:	07c0      	lsls	r0, r0, #31
    3e4e:	d507      	bpl.n	3e60 <SetIQTapDelays(int)+0x104c>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3e50:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    3e54:	307f      	adds	r0, #127	; 0x7f
    3e56:	09c0      	lsrs	r0, r0, #7
    3e58:	3001      	adds	r0, #1
    3e5a:	4284      	cmp	r4, r0
    3e5c:	bf38      	it	cc
    3e5e:	4604      	movcc	r4, r0
		} while(++channel < 8);
    3e60:	3301      	adds	r3, #1
    3e62:	2b08      	cmp	r3, #8
    3e64:	d1f0      	bne.n	3e48 <SetIQTapDelays(int)+0x1034>
    3e66:	e5d0      	b.n	3a0a <SetIQTapDelays(int)+0xbf6>
		uint32_t channel = 0;
    3e68:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3e6c:	2416      	movs	r4, #22
				uint32_t n = position[channel];
    3e6e:	4e58      	ldr	r6, [pc, #352]	; (3fd0 <SetIQTapDelays(int)+0x11bc>)
		uint32_t max=0;
    3e70:	4665      	mov	r5, ip
				position[channel] = n;
    3e72:	6294      	str	r4, [r2, #40]	; 0x28
			if (activemask & (1<<channel)) {
    3e74:	fa41 f40c 	asr.w	r4, r1, ip
    3e78:	07e4      	lsls	r4, r4, #31
    3e7a:	d50a      	bpl.n	3e92 <SetIQTapDelays(int)+0x107e>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3e7c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3e80:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3e84:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3e88:	f10e 0e01 	add.w	lr, lr, #1
    3e8c:	4575      	cmp	r5, lr
    3e8e:	bf38      	it	cc
    3e90:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3e92:	f10c 0c01 	add.w	ip, ip, #1
    3e96:	f1bc 0f08 	cmp.w	ip, #8
    3e9a:	d1eb      	bne.n	3e74 <SetIQTapDelays(int)+0x1060>
		maxblocks = max;
    3e9c:	83d5      	strh	r5, [r2, #30]
	}
    3e9e:	f7ff ba75 	b.w	338c <SetIQTapDelays(int)+0x578>
		uint32_t channel = 0;
    3ea2:	2200      	movs	r2, #0
				position[channel] = n;
    3ea4:	213b      	movs	r1, #59	; 0x3b
    3ea6:	461d      	mov	r5, r3
		uint32_t max=0;
    3ea8:	4614      	mov	r4, r2
				position[channel] = n;
    3eaa:	f845 1f20 	str.w	r1, [r5, #32]!
			if (activemask & (1<<channel)) {
    3eae:	fa40 f102 	asr.w	r1, r0, r2
    3eb2:	07ce      	lsls	r6, r1, #31
    3eb4:	d507      	bpl.n	3ec6 <SetIQTapDelays(int)+0x10b2>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3eb6:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    3eba:	317f      	adds	r1, #127	; 0x7f
    3ebc:	09c9      	lsrs	r1, r1, #7
    3ebe:	3101      	adds	r1, #1
    3ec0:	428c      	cmp	r4, r1
    3ec2:	bf38      	it	cc
    3ec4:	460c      	movcc	r4, r1
		} while(++channel < 8);
    3ec6:	3201      	adds	r2, #1
    3ec8:	2a08      	cmp	r2, #8
    3eca:	d1f0      	bne.n	3eae <SetIQTapDelays(int)+0x109a>
		maxblocks = max;
    3ecc:	83dc      	strh	r4, [r3, #30]
	}
    3ece:	f7ff ba1b 	b.w	3308 <SetIQTapDelays(int)+0x4f4>
		uint32_t channel = 0;
    3ed2:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3ed6:	245c      	movs	r4, #92	; 0x5c
				uint32_t n = position[channel];
    3ed8:	4e3c      	ldr	r6, [pc, #240]	; (3fcc <SetIQTapDelays(int)+0x11b8>)
		uint32_t max=0;
    3eda:	4665      	mov	r5, ip
				position[channel] = n;
    3edc:	62dc      	str	r4, [r3, #44]	; 0x2c
			if (activemask & (1<<channel)) {
    3ede:	fa40 f40c 	asr.w	r4, r0, ip
    3ee2:	07e4      	lsls	r4, r4, #31
    3ee4:	d50a      	bpl.n	3efc <SetIQTapDelays(int)+0x10e8>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3ee6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3eea:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3eee:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3ef2:	f10e 0e01 	add.w	lr, lr, #1
    3ef6:	4575      	cmp	r5, lr
    3ef8:	bf38      	it	cc
    3efa:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3efc:	f10c 0c01 	add.w	ip, ip, #1
    3f00:	f1bc 0f08 	cmp.w	ip, #8
    3f04:	d1eb      	bne.n	3ede <SetIQTapDelays(int)+0x10ca>
		maxblocks = max;
    3f06:	83dd      	strh	r5, [r3, #30]
	}
    3f08:	f7ff ba4d 	b.w	33a6 <SetIQTapDelays(int)+0x592>
		uint32_t channel = 0;
    3f0c:	2300      	movs	r3, #0
				position[channel] = n;
    3f0e:	2042      	movs	r0, #66	; 0x42
				uint32_t n = position[channel];
    3f10:	4d2f      	ldr	r5, [pc, #188]	; (3fd0 <SetIQTapDelays(int)+0x11bc>)
		uint32_t max=0;
    3f12:	461c      	mov	r4, r3
				position[channel] = n;
    3f14:	62d0      	str	r0, [r2, #44]	; 0x2c
			if (activemask & (1<<channel)) {
    3f16:	fa41 f003 	asr.w	r0, r1, r3
    3f1a:	07c0      	lsls	r0, r0, #31
    3f1c:	d507      	bpl.n	3f2e <SetIQTapDelays(int)+0x111a>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3f1e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    3f22:	307f      	adds	r0, #127	; 0x7f
    3f24:	09c0      	lsrs	r0, r0, #7
    3f26:	3001      	adds	r0, #1
    3f28:	4284      	cmp	r4, r0
    3f2a:	bf38      	it	cc
    3f2c:	4604      	movcc	r4, r0
		} while(++channel < 8);
    3f2e:	3301      	adds	r3, #1
    3f30:	2b08      	cmp	r3, #8
    3f32:	d1f0      	bne.n	3f16 <SetIQTapDelays(int)+0x1102>
    3f34:	e569      	b.n	3a0a <SetIQTapDelays(int)+0xbf6>
		uint32_t channel = 0;
    3f36:	2300      	movs	r3, #0
				position[channel] = n;
    3f38:	f240 1009 	movw	r0, #265	; 0x109
				uint32_t n = position[channel];
    3f3c:	4d24      	ldr	r5, [pc, #144]	; (3fd0 <SetIQTapDelays(int)+0x11bc>)
		uint32_t max=0;
    3f3e:	461c      	mov	r4, r3
				position[channel] = n;
    3f40:	62d0      	str	r0, [r2, #44]	; 0x2c
			if (activemask & (1<<channel)) {
    3f42:	fa41 f003 	asr.w	r0, r1, r3
    3f46:	07c0      	lsls	r0, r0, #31
    3f48:	d507      	bpl.n	3f5a <SetIQTapDelays(int)+0x1146>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3f4a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    3f4e:	307f      	adds	r0, #127	; 0x7f
    3f50:	09c0      	lsrs	r0, r0, #7
    3f52:	3001      	adds	r0, #1
    3f54:	4284      	cmp	r4, r0
    3f56:	bf38      	it	cc
    3f58:	4604      	movcc	r4, r0
		} while(++channel < 8);
    3f5a:	3301      	adds	r3, #1
    3f5c:	2b08      	cmp	r3, #8
    3f5e:	d1f0      	bne.n	3f42 <SetIQTapDelays(int)+0x112e>
    3f60:	e553      	b.n	3a0a <SetIQTapDelays(int)+0xbf6>
		uint32_t channel = 0;
    3f62:	2200      	movs	r2, #0
				position[channel] = n;
    3f64:	213b      	movs	r1, #59	; 0x3b
    3f66:	461d      	mov	r5, r3
		uint32_t max=0;
    3f68:	4614      	mov	r4, r2
				position[channel] = n;
    3f6a:	f845 1f20 	str.w	r1, [r5, #32]!
			if (activemask & (1<<channel)) {
    3f6e:	fa40 f102 	asr.w	r1, r0, r2
    3f72:	07ce      	lsls	r6, r1, #31
    3f74:	d507      	bpl.n	3f86 <SetIQTapDelays(int)+0x1172>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3f76:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    3f7a:	317f      	adds	r1, #127	; 0x7f
    3f7c:	09c9      	lsrs	r1, r1, #7
    3f7e:	3101      	adds	r1, #1
    3f80:	428c      	cmp	r4, r1
    3f82:	bf38      	it	cc
    3f84:	460c      	movcc	r4, r1
		} while(++channel < 8);
    3f86:	3201      	adds	r2, #1
    3f88:	2a08      	cmp	r2, #8
    3f8a:	d1f0      	bne.n	3f6e <SetIQTapDelays(int)+0x115a>
		maxblocks = max;
    3f8c:	83dc      	strh	r4, [r3, #30]
	}
    3f8e:	f7ff b877 	b.w	3080 <SetIQTapDelays(int)+0x26c>
		uint32_t channel = 0;
    3f92:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3f96:	242c      	movs	r4, #44	; 0x2c
				uint32_t n = position[channel];
    3f98:	4e0d      	ldr	r6, [pc, #52]	; (3fd0 <SetIQTapDelays(int)+0x11bc>)
		uint32_t max=0;
    3f9a:	4665      	mov	r5, ip
				position[channel] = n;
    3f9c:	6294      	str	r4, [r2, #40]	; 0x28
			if (activemask & (1<<channel)) {
    3f9e:	fa41 f40c 	asr.w	r4, r1, ip
    3fa2:	07e4      	lsls	r4, r4, #31
    3fa4:	d50a      	bpl.n	3fbc <SetIQTapDelays(int)+0x11a8>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3fa6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3faa:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3fae:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3fb2:	f10e 0e01 	add.w	lr, lr, #1
    3fb6:	4575      	cmp	r5, lr
    3fb8:	bf38      	it	cc
    3fba:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3fbc:	f10c 0c01 	add.w	ip, ip, #1
    3fc0:	f1bc 0f08 	cmp.w	ip, #8
    3fc4:	d1eb      	bne.n	3f9e <SetIQTapDelays(int)+0x118a>
		maxblocks = max;
    3fc6:	83d5      	strh	r5, [r2, #30]
	}
    3fc8:	f7ff b974 	b.w	32b4 <SetIQTapDelays(int)+0x4a0>
    3fcc:	2000cb60 	.word	0x2000cb60
    3fd0:	2000e130 	.word	0x2000e130
		uint32_t channel = 0;
    3fd4:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    3fd8:	247d      	movs	r4, #125	; 0x7d
				uint32_t n = position[channel];
    3fda:	4eb2      	ldr	r6, [pc, #712]	; (42a4 <SetIQTapDelays(int)+0x1490>)
		uint32_t max=0;
    3fdc:	4665      	mov	r5, ip
				position[channel] = n;
    3fde:	62dc      	str	r4, [r3, #44]	; 0x2c
			if (activemask & (1<<channel)) {
    3fe0:	fa40 f40c 	asr.w	r4, r0, ip
    3fe4:	07e4      	lsls	r4, r4, #31
    3fe6:	d50a      	bpl.n	3ffe <SetIQTapDelays(int)+0x11ea>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    3fe8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    3fec:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    3ff0:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    3ff4:	f10e 0e01 	add.w	lr, lr, #1
    3ff8:	4575      	cmp	r5, lr
    3ffa:	bf38      	it	cc
    3ffc:	4675      	movcc	r5, lr
		} while(++channel < 8);
    3ffe:	f10c 0c01 	add.w	ip, ip, #1
    4002:	f1bc 0f08 	cmp.w	ip, #8
    4006:	d1eb      	bne.n	3fe0 <SetIQTapDelays(int)+0x11cc>
		maxblocks = max;
    4008:	83dd      	strh	r5, [r3, #30]
	}
    400a:	f7ff b960 	b.w	32ce <SetIQTapDelays(int)+0x4ba>
		uint32_t channel = 0;
    400e:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    4012:	2451      	movs	r4, #81	; 0x51
				uint32_t n = position[channel];
    4014:	4ea3      	ldr	r6, [pc, #652]	; (42a4 <SetIQTapDelays(int)+0x1490>)
		uint32_t max=0;
    4016:	4665      	mov	r5, ip
				position[channel] = n;
    4018:	625c      	str	r4, [r3, #36]	; 0x24
			if (activemask & (1<<channel)) {
    401a:	fa40 f40c 	asr.w	r4, r0, ip
    401e:	07e4      	lsls	r4, r4, #31
    4020:	d50a      	bpl.n	4038 <SetIQTapDelays(int)+0x1224>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    4022:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    4026:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    402a:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    402e:	f10e 0e01 	add.w	lr, lr, #1
    4032:	4575      	cmp	r5, lr
    4034:	bf38      	it	cc
    4036:	4675      	movcc	r5, lr
		} while(++channel < 8);
    4038:	f10c 0c01 	add.w	ip, ip, #1
    403c:	f1bc 0f08 	cmp.w	ip, #8
    4040:	d1eb      	bne.n	401a <SetIQTapDelays(int)+0x1206>
		maxblocks = max;
    4042:	83dd      	strh	r5, [r3, #30]
	}
    4044:	f7ff b90f 	b.w	3266 <SetIQTapDelays(int)+0x452>
		uint32_t channel = 0;
    4048:	2200      	movs	r2, #0
				position[channel] = n;
    404a:	213b      	movs	r1, #59	; 0x3b
    404c:	461d      	mov	r5, r3
		uint32_t max=0;
    404e:	4614      	mov	r4, r2
				position[channel] = n;
    4050:	f845 1f20 	str.w	r1, [r5, #32]!
			if (activemask & (1<<channel)) {
    4054:	fa40 f102 	asr.w	r1, r0, r2
    4058:	07ce      	lsls	r6, r1, #31
    405a:	d507      	bpl.n	406c <SetIQTapDelays(int)+0x1258>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    405c:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    4060:	317f      	adds	r1, #127	; 0x7f
    4062:	09c9      	lsrs	r1, r1, #7
    4064:	3101      	adds	r1, #1
    4066:	428c      	cmp	r4, r1
    4068:	bf38      	it	cc
    406a:	460c      	movcc	r4, r1
		} while(++channel < 8);
    406c:	3201      	adds	r2, #1
    406e:	2a08      	cmp	r2, #8
    4070:	d1f0      	bne.n	4054 <SetIQTapDelays(int)+0x1240>
		maxblocks = max;
    4072:	83dc      	strh	r4, [r3, #30]
	}
    4074:	f7ff b8dc 	b.w	3230 <SetIQTapDelays(int)+0x41c>
		uint32_t channel = 0;
    4078:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    407c:	2416      	movs	r4, #22
				uint32_t n = position[channel];
    407e:	4e8a      	ldr	r6, [pc, #552]	; (42a8 <SetIQTapDelays(int)+0x1494>)
		uint32_t max=0;
    4080:	4665      	mov	r5, ip
				position[channel] = n;
    4082:	6254      	str	r4, [r2, #36]	; 0x24
			if (activemask & (1<<channel)) {
    4084:	fa41 f40c 	asr.w	r4, r1, ip
    4088:	07e4      	lsls	r4, r4, #31
    408a:	d50a      	bpl.n	40a2 <SetIQTapDelays(int)+0x128e>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    408c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    4090:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    4094:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    4098:	f10e 0e01 	add.w	lr, lr, #1
    409c:	4575      	cmp	r5, lr
    409e:	bf38      	it	cc
    40a0:	4675      	movcc	r5, lr
		} while(++channel < 8);
    40a2:	f10c 0c01 	add.w	ip, ip, #1
    40a6:	f1bc 0f08 	cmp.w	ip, #8
    40aa:	d1eb      	bne.n	4084 <SetIQTapDelays(int)+0x1270>
		maxblocks = max;
    40ac:	83d5      	strh	r5, [r2, #30]
	}
    40ae:	f7ff b8e7 	b.w	3280 <SetIQTapDelays(int)+0x46c>
		uint32_t channel = 0;
    40b2:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    40b6:	2467      	movs	r4, #103	; 0x67
				uint32_t n = position[channel];
    40b8:	4e7a      	ldr	r6, [pc, #488]	; (42a4 <SetIQTapDelays(int)+0x1490>)
		uint32_t max=0;
    40ba:	4665      	mov	r5, ip
				position[channel] = n;
    40bc:	629c      	str	r4, [r3, #40]	; 0x28
			if (activemask & (1<<channel)) {
    40be:	fa40 f40c 	asr.w	r4, r0, ip
    40c2:	07e4      	lsls	r4, r4, #31
    40c4:	d50a      	bpl.n	40dc <SetIQTapDelays(int)+0x12c8>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    40c6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    40ca:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    40ce:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    40d2:	f10e 0e01 	add.w	lr, lr, #1
    40d6:	4575      	cmp	r5, lr
    40d8:	bf38      	it	cc
    40da:	4675      	movcc	r5, lr
		} while(++channel < 8);
    40dc:	f10c 0c01 	add.w	ip, ip, #1
    40e0:	f1bc 0f08 	cmp.w	ip, #8
    40e4:	d1eb      	bne.n	40be <SetIQTapDelays(int)+0x12aa>
		maxblocks = max;
    40e6:	83dd      	strh	r5, [r3, #30]
	}
    40e8:	f7ff b8d7 	b.w	329a <SetIQTapDelays(int)+0x486>
		uint32_t channel = 0;
    40ec:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    40f0:	242c      	movs	r4, #44	; 0x2c
				uint32_t n = position[channel];
    40f2:	4e6d      	ldr	r6, [pc, #436]	; (42a8 <SetIQTapDelays(int)+0x1494>)
		uint32_t max=0;
    40f4:	4665      	mov	r5, ip
				position[channel] = n;
    40f6:	6254      	str	r4, [r2, #36]	; 0x24
			if (activemask & (1<<channel)) {
    40f8:	fa41 f40c 	asr.w	r4, r1, ip
    40fc:	07e4      	lsls	r4, r4, #31
    40fe:	d50a      	bpl.n	4116 <SetIQTapDelays(int)+0x1302>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    4100:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    4104:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    4108:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    410c:	f10e 0e01 	add.w	lr, lr, #1
    4110:	4575      	cmp	r5, lr
    4112:	bf38      	it	cc
    4114:	4675      	movcc	r5, lr
		} while(++channel < 8);
    4116:	f10c 0c01 	add.w	ip, ip, #1
    411a:	f1bc 0f08 	cmp.w	ip, #8
    411e:	d1eb      	bne.n	40f8 <SetIQTapDelays(int)+0x12e4>
		maxblocks = max;
    4120:	83d5      	strh	r5, [r2, #30]
	}
    4122:	f7ff b842 	b.w	31aa <SetIQTapDelays(int)+0x396>
		uint32_t channel = 0;
    4126:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    412a:	2493      	movs	r4, #147	; 0x93
				uint32_t n = position[channel];
    412c:	4e5d      	ldr	r6, [pc, #372]	; (42a4 <SetIQTapDelays(int)+0x1490>)
		uint32_t max=0;
    412e:	4665      	mov	r5, ip
				position[channel] = n;
    4130:	629c      	str	r4, [r3, #40]	; 0x28
			if (activemask & (1<<channel)) {
    4132:	fa40 f40c 	asr.w	r4, r0, ip
    4136:	07e4      	lsls	r4, r4, #31
    4138:	d50a      	bpl.n	4150 <SetIQTapDelays(int)+0x133c>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    413a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    413e:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    4142:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    4146:	f10e 0e01 	add.w	lr, lr, #1
    414a:	4575      	cmp	r5, lr
    414c:	bf38      	it	cc
    414e:	4675      	movcc	r5, lr
		} while(++channel < 8);
    4150:	f10c 0c01 	add.w	ip, ip, #1
    4154:	f1bc 0f08 	cmp.w	ip, #8
    4158:	d1eb      	bne.n	4132 <SetIQTapDelays(int)+0x131e>
		maxblocks = max;
    415a:	83dd      	strh	r5, [r3, #30]
	}
    415c:	f7ff b832 	b.w	31c4 <SetIQTapDelays(int)+0x3b0>
		uint32_t channel = 0;
    4160:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    4164:	2493      	movs	r4, #147	; 0x93
				uint32_t n = position[channel];
    4166:	4e4f      	ldr	r6, [pc, #316]	; (42a4 <SetIQTapDelays(int)+0x1490>)
		uint32_t max=0;
    4168:	4665      	mov	r5, ip
				position[channel] = n;
    416a:	625c      	str	r4, [r3, #36]	; 0x24
			if (activemask & (1<<channel)) {
    416c:	fa40 f40c 	asr.w	r4, r0, ip
    4170:	07e4      	lsls	r4, r4, #31
    4172:	d50a      	bpl.n	418a <SetIQTapDelays(int)+0x1376>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    4174:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    4178:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    417c:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    4180:	f10e 0e01 	add.w	lr, lr, #1
    4184:	4575      	cmp	r5, lr
    4186:	bf38      	it	cc
    4188:	4675      	movcc	r5, lr
		} while(++channel < 8);
    418a:	f10c 0c01 	add.w	ip, ip, #1
    418e:	f1bc 0f08 	cmp.w	ip, #8
    4192:	d1eb      	bne.n	416c <SetIQTapDelays(int)+0x1358>
		maxblocks = max;
    4194:	83dd      	strh	r5, [r3, #30]
	}
    4196:	f7fe bf8e 	b.w	30b6 <SetIQTapDelays(int)+0x2a2>
		uint32_t channel = 0;
    419a:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    419e:	2467      	movs	r4, #103	; 0x67
				uint32_t n = position[channel];
    41a0:	4e40      	ldr	r6, [pc, #256]	; (42a4 <SetIQTapDelays(int)+0x1490>)
		uint32_t max=0;
    41a2:	4665      	mov	r5, ip
				position[channel] = n;
    41a4:	625c      	str	r4, [r3, #36]	; 0x24
			if (activemask & (1<<channel)) {
    41a6:	fa40 f40c 	asr.w	r4, r0, ip
    41aa:	07e4      	lsls	r4, r4, #31
    41ac:	d50a      	bpl.n	41c4 <SetIQTapDelays(int)+0x13b0>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    41ae:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    41b2:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    41b6:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    41ba:	f10e 0e01 	add.w	lr, lr, #1
    41be:	4575      	cmp	r5, lr
    41c0:	bf38      	it	cc
    41c2:	4675      	movcc	r5, lr
		} while(++channel < 8);
    41c4:	f10c 0c01 	add.w	ip, ip, #1
    41c8:	f1bc 0f08 	cmp.w	ip, #8
    41cc:	d1eb      	bne.n	41a6 <SetIQTapDelays(int)+0x1392>
		maxblocks = max;
    41ce:	83dd      	strh	r5, [r3, #30]
	}
    41d0:	f7fe bfde 	b.w	3190 <SetIQTapDelays(int)+0x37c>
		uint32_t channel = 0;
    41d4:	2300      	movs	r3, #0
				position[channel] = n;
    41d6:	2084      	movs	r0, #132	; 0x84
				uint32_t n = position[channel];
    41d8:	4d33      	ldr	r5, [pc, #204]	; (42a8 <SetIQTapDelays(int)+0x1494>)
		uint32_t max=0;
    41da:	461c      	mov	r4, r3
				position[channel] = n;
    41dc:	62d0      	str	r0, [r2, #44]	; 0x2c
			if (activemask & (1<<channel)) {
    41de:	fa41 f003 	asr.w	r0, r1, r3
    41e2:	07c0      	lsls	r0, r0, #31
    41e4:	d507      	bpl.n	41f6 <SetIQTapDelays(int)+0x13e2>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    41e6:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    41ea:	307f      	adds	r0, #127	; 0x7f
    41ec:	09c0      	lsrs	r0, r0, #7
    41ee:	3001      	adds	r0, #1
    41f0:	4284      	cmp	r4, r0
    41f2:	bf38      	it	cc
    41f4:	4604      	movcc	r4, r0
		} while(++channel < 8);
    41f6:	3301      	adds	r3, #1
    41f8:	2b08      	cmp	r3, #8
    41fa:	d1f0      	bne.n	41de <SetIQTapDelays(int)+0x13ca>
    41fc:	e405      	b.n	3a0a <SetIQTapDelays(int)+0xbf6>
		uint32_t channel = 0;
    41fe:	2200      	movs	r2, #0
				position[channel] = n;
    4200:	213b      	movs	r1, #59	; 0x3b
    4202:	461d      	mov	r5, r3
		uint32_t max=0;
    4204:	4614      	mov	r4, r2
				position[channel] = n;
    4206:	f845 1f20 	str.w	r1, [r5, #32]!
			if (activemask & (1<<channel)) {
    420a:	fa40 f102 	asr.w	r1, r0, r2
    420e:	07ce      	lsls	r6, r1, #31
    4210:	d507      	bpl.n	4222 <SetIQTapDelays(int)+0x140e>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    4212:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
    4216:	317f      	adds	r1, #127	; 0x7f
    4218:	09c9      	lsrs	r1, r1, #7
    421a:	3101      	adds	r1, #1
    421c:	428c      	cmp	r4, r1
    421e:	bf38      	it	cc
    4220:	460c      	movcc	r4, r1
		} while(++channel < 8);
    4222:	3201      	adds	r2, #1
    4224:	2a08      	cmp	r2, #8
    4226:	d1f0      	bne.n	420a <SetIQTapDelays(int)+0x13f6>
		maxblocks = max;
    4228:	83dc      	strh	r4, [r3, #30]
	}
    422a:	f7fe bf96 	b.w	315a <SetIQTapDelays(int)+0x346>
		uint32_t channel = 0;
    422e:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    4232:	2458      	movs	r4, #88	; 0x58
				uint32_t n = position[channel];
    4234:	4e1c      	ldr	r6, [pc, #112]	; (42a8 <SetIQTapDelays(int)+0x1494>)
		uint32_t max=0;
    4236:	4665      	mov	r5, ip
				position[channel] = n;
    4238:	6294      	str	r4, [r2, #40]	; 0x28
			if (activemask & (1<<channel)) {
    423a:	fa41 f40c 	asr.w	r4, r1, ip
    423e:	07e4      	lsls	r4, r4, #31
    4240:	d50a      	bpl.n	4258 <SetIQTapDelays(int)+0x1444>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    4242:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    4246:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    424a:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    424e:	f10e 0e01 	add.w	lr, lr, #1
    4252:	4575      	cmp	r5, lr
    4254:	bf38      	it	cc
    4256:	4675      	movcc	r5, lr
		} while(++channel < 8);
    4258:	f10c 0c01 	add.w	ip, ip, #1
    425c:	f1bc 0f08 	cmp.w	ip, #8
    4260:	d1eb      	bne.n	423a <SetIQTapDelays(int)+0x1426>
		maxblocks = max;
    4262:	83d5      	strh	r5, [r2, #30]
	}
    4264:	f7fe bfbb 	b.w	31de <SetIQTapDelays(int)+0x3ca>
		uint32_t channel = 0;
    4268:	f04f 0c00 	mov.w	ip, #0
				position[channel] = n;
    426c:	24bf      	movs	r4, #191	; 0xbf
				uint32_t n = position[channel];
    426e:	4e0d      	ldr	r6, [pc, #52]	; (42a4 <SetIQTapDelays(int)+0x1490>)
		uint32_t max=0;
    4270:	4665      	mov	r5, ip
				position[channel] = n;
    4272:	62dc      	str	r4, [r3, #44]	; 0x2c
			if (activemask & (1<<channel)) {
    4274:	fa40 f40c 	asr.w	r4, r0, ip
    4278:	07e4      	lsls	r4, r4, #31
    427a:	d50a      	bpl.n	4292 <SetIQTapDelays(int)+0x147e>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    427c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
    4280:	f104 0e7f 	add.w	lr, r4, #127	; 0x7f
    4284:	ea4f 1ede 	mov.w	lr, lr, lsr #7
    4288:	f10e 0e01 	add.w	lr, lr, #1
    428c:	4575      	cmp	r5, lr
    428e:	bf38      	it	cc
    4290:	4675      	movcc	r5, lr
		} while(++channel < 8);
    4292:	f10c 0c01 	add.w	ip, ip, #1
    4296:	f1bc 0f08 	cmp.w	ip, #8
    429a:	d1eb      	bne.n	4274 <SetIQTapDelays(int)+0x1460>
		maxblocks = max;
    429c:	83dd      	strh	r5, [r3, #30]
	}
    429e:	f7fe bfab 	b.w	31f8 <SetIQTapDelays(int)+0x3e4>
    42a2:	bf00      	nop
    42a4:	2000cb60 	.word	0x2000cb60
    42a8:	2000e130 	.word	0x2000e130

000042ac <ParseSimMode(String)>:


//******Function to Parse Simulator Mode received via Serial Port *********************************
int ParseSimMode (String strMode)
{
    42ac:	b570      	push	{r4, r5, r6, lr}
    42ae:	491a      	ldr	r1, [pc, #104]	; (4318 <ParseSimMode(String)+0x6c>)
    42b0:	b086      	sub	sp, #24
    42b2:	4d1a      	ldr	r5, [pc, #104]	; (431c <ParseSimMode(String)+0x70>)
  // Returns mode index (0-15) if strMode is legitimate, -1 other wise (case insensitive)
  for (int i=0; i < (intNumModes-3); i++) //Search through the available Modes and Parameters TEST3K, TEST6K not used. 
    42b4:	2400      	movs	r4, #0
{
    42b6:	4606      	mov	r6, r0
    42b8:	e001      	b.n	42be <ParseSimMode(String)+0x12>
  {
    String strTemp = chrModes[i];
    42ba:	f855 1f04 	ldr.w	r1, [r5, #4]!
    42be:	4668      	mov	r0, sp
    42c0:	f016 fe08 	bl	1aed4 <String::String(char const*)>
    if  (strTemp.startsWith(strMode.toUpperCase()))
    42c4:	4630      	mov	r0, r6
    42c6:	f016 ff9d 	bl	1b204 <String::toUpperCase()>
    42ca:	4601      	mov	r1, r0
    42cc:	4668      	mov	r0, sp
    42ce:	f016 ff69 	bl	1b1a4 <String::startsWith(String const&) const>
    42d2:	4603      	mov	r3, r0
          {
            blnSim = false; //blnInitialized = false;  blnEnableTestTone = false;
          }
      return i;
    }
  }
    42d4:	4668      	mov	r0, sp
    if  (strTemp.startsWith(strMode.toUpperCase()))
    42d6:	b94b      	cbnz	r3, 42ec <ParseSimMode(String)+0x40>
  for (int i=0; i < (intNumModes-3); i++) //Search through the available Modes and Parameters TEST3K, TEST6K not used. 
    42d8:	3401      	adds	r4, #1
  }
    42da:	f016 fe35 	bl	1af48 <String::~String()>
  for (int i=0; i < (intNumModes-3); i++) //Search through the available Modes and Parameters TEST3K, TEST6K not used. 
    42de:	2c10      	cmp	r4, #16
    42e0:	d1eb      	bne.n	42ba <ParseSimMode(String)+0xe>
  return -1;
    42e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}// End of ParseSimMode ************************************************************************
    42e6:	4620      	mov	r0, r4
    42e8:	b006      	add	sp, #24
    42ea:	bd70      	pop	{r4, r5, r6, pc}
        if (strTemp.startsWith("BUSY:"))
    42ec:	490c      	ldr	r1, [pc, #48]	; (4320 <ParseSimMode(String)+0x74>)
    42ee:	a803      	add	r0, sp, #12
    42f0:	f016 fdf0 	bl	1aed4 <String::String(char const*)>
    42f4:	a903      	add	r1, sp, #12
    42f6:	4668      	mov	r0, sp
    42f8:	f016 ff54 	bl	1b1a4 <String::startsWith(String const&) const>
    42fc:	4605      	mov	r5, r0
    42fe:	a803      	add	r0, sp, #12
    4300:	f016 fe22 	bl	1af48 <String::~String()>
    4304:	b115      	cbz	r5, 430c <ParseSimMode(String)+0x60>
            blnSim = false; //blnInitialized = false;  blnEnableTestTone = false;
    4306:	4b07      	ldr	r3, [pc, #28]	; (4324 <ParseSimMode(String)+0x78>)
    4308:	2200      	movs	r2, #0
    430a:	701a      	strb	r2, [r3, #0]
  }
    430c:	4668      	mov	r0, sp
    430e:	f016 fe1b 	bl	1af48 <String::~String()>
}// End of ParseSimMode ************************************************************************
    4312:	4620      	mov	r0, r4
    4314:	b006      	add	sp, #24
    4316:	bd70      	pop	{r4, r5, r6, pc}
    4318:	2000342c 	.word	0x2000342c
    431c:	200038c0 	.word	0x200038c0
    4320:	20003440 	.word	0x20003440
    4324:	20009cba 	.word	0x20009cba

00004328 <ParseSetSimParameter(String, int)>:

//*******Function to Parse and Set Simulation Parameter received via Serial Port **********************
boolean ParseSetSimParameter(String strParameter, int intMode)
// Determins if strParameter is compatible with intMode. if not returns false
// If compatible sets the parameter and Mode, Updates display showing mode and parameter and returns true
{
    4328:	b570      	push	{r4, r5, r6, lr}
    432a:	ed2d 8b02 	vpush	{d8}
    432e:	b08a      	sub	sp, #40	; 0x28
    4330:	460d      	mov	r5, r1
    4332:	4606      	mov	r6, r0
  int intParam = strParameter.toInt(); String str1; String str2; String str3; float fltParam = strParameter.toFloat();
    4334:	f016 ff76 	bl	1b224 <String::toInt() const>
    4338:	2100      	movs	r1, #0
    433a:	4604      	mov	r4, r0
    433c:	a801      	add	r0, sp, #4
    433e:	f016 fdc9 	bl	1aed4 <String::String(char const*)>
    4342:	2100      	movs	r1, #0
    4344:	a804      	add	r0, sp, #16
    4346:	f016 fdc5 	bl	1aed4 <String::String(char const*)>
    434a:	2100      	movs	r1, #0
    434c:	a807      	add	r0, sp, #28
    434e:	f016 fdc1 	bl	1aed4 <String::String(char const*)>
    4352:	4630      	mov	r0, r6
    4354:	f016 ff6c 	bl	1b230 <String::toFloat() const>
  //Serial.print("Line# 915: ParseSetSimParameter: intParam = ");Serial.print(intParam);Serial.print("  fltParam= ");Serial.println(fltParam);
  if (intMode < 5)//WGN thru MPD
    4358:	2d04      	cmp	r5, #4
  int intParam = strParameter.toInt(); String str1; String str2; String str3; float fltParam = strParameter.toFloat();
    435a:	eeb0 8a40 	vmov.f32	s16, s0
  if (intMode < 5)//WGN thru MPD
    435e:	dd09      	ble.n	4374 <ParseSetSimParameter(String, int)+0x4c>
          intTargetSN = intParam;
          
          return true;
        }
     }
  if (intMode == 5) //INTMULTIPATHS
    4360:	2d05      	cmp	r5, #5
    4362:	d078      	beq.n	4456 <ParseSetSimParameter(String, int)+0x12e>
      intParam = strParameter.toInt();
      if ((intParam == 2) || (intParam == 4))
        { intMultipaths = intParam; return true; }
      else {return false;}
    }
  if (intMode == 6)//FADE DEPTH
    4364:	2d06      	cmp	r5, #6
    4366:	d12d      	bne.n	43c4 <ParseSetSimParameter(String, int)+0x9c>
  {
    if ((intParam >= 0) && (intParam <= 40))
    4368:	2c28      	cmp	r4, #40	; 0x28
    436a:	d852      	bhi.n	4412 <ParseSetSimParameter(String, int)+0xea>
    {
      intFadeDepth_dB = intParam;
    436c:	4ba8      	ldr	r3, [pc, #672]	; (4610 <ParseSetSimParameter(String, int)+0x2e8>)
    436e:	601c      	str	r4, [r3, #0]
      return true;
    4370:	2401      	movs	r4, #1
    4372:	e07c      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
      intParam = strParameter.toInt();
    4374:	4630      	mov	r0, r6
    4376:	f016 ff55 	bl	1b224 <String::toInt() const>
      if ((-40 <= intParam) && (intParam <= 40))
    437a:	f100 0328 	add.w	r3, r0, #40	; 0x28
    437e:	2b50      	cmp	r3, #80	; 0x50
    4380:	f240 80c2 	bls.w	4508 <ParseSetSimParameter(String, int)+0x1e0>
            if (fltLogs[intFMDevPtr] <.01){sine_VLF_Dnmix_Mod.amplitude(0.0);}  
            else {sine_VLF_Dnmix_Mod.amplitude(fltLogs[intFMDevPtr] * .0129870129870 );} //sets max deviation in Hz e.g. .000129870129870 * 7700  yields +/- 1 Hz peak deviation
            return true;
          }
    }
  if (intMode == 10)//FM RATE 
    4384:	2d0a      	cmp	r5, #10
    4386:	d144      	bne.n	4412 <ParseSetSimParameter(String, int)+0xea>
    {
      for (int j = 0; j < 9; j ++)
        if ((abs(10 * fltLogs[j] - fltParam)) < .001)
    4388:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
    438c:	4aa1      	ldr	r2, [pc, #644]	; (4614 <ParseSetSimParameter(String, int)+0x2ec>)
  if (intMode == 10)//FM RATE 
    438e:	eddf 6aa2 	vldr	s13, [pc, #648]	; 4618 <ParseSetSimParameter(String, int)+0x2f0>
      for (int j = 0; j < 9; j ++)
    4392:	2300      	movs	r3, #0
        if ((abs(10 * fltLogs[j] - fltParam)) < .001)
    4394:	ed9f 5b98 	vldr	d5, [pc, #608]	; 45f8 <ParseSetSimParameter(String, int)+0x2d0>
    4398:	e001      	b.n	439e <ParseSetSimParameter(String, int)+0x76>
    439a:	ecf2 6a01 	vldmia	r2!, {s13}
    439e:	ee66 6a86 	vmul.f32	s13, s13, s12
    43a2:	ee36 7ac8 	vsub.f32	s14, s13, s16
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
    43a6:	eeb0 7ac7 	vabs.f32	s14, s14
    43aa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    43ae:	eeb4 7bc5 	vcmpe.f64	d7, d5
    43b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    43b6:	f100 814d 	bmi.w	4654 <ParseSetSimParameter(String, int)+0x32c>
      for (int j = 0; j < 9; j ++)
    43ba:	3301      	adds	r3, #1
    43bc:	2b09      	cmp	r3, #9
    43be:	d1ec      	bne.n	439a <ParseSetSimParameter(String, int)+0x72>
      else {return false;}
    43c0:	2400      	movs	r4, #0
    43c2:	e054      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
  if (intMode == 7)//FADE FREQ  fltFadeRates
    43c4:	2d07      	cmp	r5, #7
    43c6:	d11c      	bne.n	4402 <ParseSetSimParameter(String, int)+0xda>
        if  ((abs(10 *fltLogs[j] - fltParam)) < .001)
    43c8:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
  if (intMode == 7)//FADE FREQ  fltFadeRates
    43cc:	eddf 6a92 	vldr	s13, [pc, #584]	; 4618 <ParseSetSimParameter(String, int)+0x2f0>
    43d0:	4a90      	ldr	r2, [pc, #576]	; (4614 <ParseSetSimParameter(String, int)+0x2ec>)
      for (int j = 0; j < 9; j ++)
    43d2:	2300      	movs	r3, #0
        if  ((abs(10 *fltLogs[j] - fltParam)) < .001)
    43d4:	ed9f 5b88 	vldr	d5, [pc, #544]	; 45f8 <ParseSetSimParameter(String, int)+0x2d0>
    43d8:	e001      	b.n	43de <ParseSetSimParameter(String, int)+0xb6>
    43da:	ecf2 6a01 	vldmia	r2!, {s13}
    43de:	ee66 6a86 	vmul.f32	s13, s13, s12
    43e2:	ee36 7ac8 	vsub.f32	s14, s13, s16
    43e6:	eeb0 7ac7 	vabs.f32	s14, s14
    43ea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    43ee:	eeb4 7bc5 	vcmpe.f64	d7, d5
    43f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    43f6:	f100 808b 	bmi.w	4510 <ParseSetSimParameter(String, int)+0x1e8>
      for (int j = 0; j < 9; j ++)
    43fa:	3301      	adds	r3, #1
    43fc:	2b09      	cmp	r3, #9
    43fe:	d1ec      	bne.n	43da <ParseSetSimParameter(String, int)+0xb2>
    4400:	e007      	b.n	4412 <ParseSetSimParameter(String, int)+0xea>
  if (intMode == 8)//OFFSET
    4402:	2d08      	cmp	r5, #8
    4404:	d141      	bne.n	448a <ParseSetSimParameter(String, int)+0x162>
      if ((intParam >= -200) && (intParam <= 200))
    4406:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    440a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
    440e:	f240 8086 	bls.w	451e <ParseSetSimParameter(String, int)+0x1f6>
                sine_VLF_Dnmix_Mod.frequency(10 * fltLogs[intFMRatePtr]);// Rate is .1 to 20 Hz
              }
            return true;
          }
      }
  if ((intMode >= 11) && (intMode <= 12)) //IN GAINS
    4412:	f1a5 010b 	sub.w	r1, r5, #11
    4416:	2901      	cmp	r1, #1
    4418:	d859      	bhi.n	44ce <ParseSetSimParameter(String, int)+0x1a6>
    441a:	eddf 6a7f 	vldr	s13, [pc, #508]	; 4618 <ParseSetSimParameter(String, int)+0x2f0>
    {
      for (int j = 0; j < 9; j ++)
    441e:	2300      	movs	r3, #0
        {
          if  ((abs(100 * fltLogs[j] - fltParam)) < .001)
    4420:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 461c <ParseSetSimParameter(String, int)+0x2f4>
    4424:	4a7b      	ldr	r2, [pc, #492]	; (4614 <ParseSetSimParameter(String, int)+0x2ec>)
    4426:	ed9f 5b74 	vldr	d5, [pc, #464]	; 45f8 <ParseSetSimParameter(String, int)+0x2d0>
    442a:	e001      	b.n	4430 <ParseSetSimParameter(String, int)+0x108>
    442c:	ecf2 6a01 	vldmia	r2!, {s13}
    4430:	ee66 6a86 	vmul.f32	s13, s13, s12
    4434:	ee36 7ac8 	vsub.f32	s14, s13, s16
    4438:	eeb0 7ac7 	vabs.f32	s14, s14
    443c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4440:	eeb4 7bc5 	vcmpe.f64	d7, d5
    4444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4448:	f100 80b4 	bmi.w	45b4 <ParseSetSimParameter(String, int)+0x28c>
      for (int j = 0; j < 9; j ++)
    444c:	3301      	adds	r3, #1
    444e:	2b09      	cmp	r3, #9
    4450:	d1ec      	bne.n	442c <ParseSetSimParameter(String, int)+0x104>
      else {return false;}
    4452:	2400      	movs	r4, #0
    4454:	e00b      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
      intParam = strParameter.toInt();
    4456:	4630      	mov	r0, r6
    4458:	f016 fee4 	bl	1b224 <String::toInt() const>
      if ((intParam == 2) || (intParam == 4))
    445c:	2804      	cmp	r0, #4
    445e:	bf18      	it	ne
    4460:	2802      	cmpne	r0, #2
    4462:	bf0c      	ite	eq
    4464:	2401      	moveq	r4, #1
    4466:	2400      	movne	r4, #0
    4468:	d1aa      	bne.n	43c0 <ParseSetSimParameter(String, int)+0x98>
        { intMultipaths = intParam; return true; }
    446a:	4b6d      	ldr	r3, [pc, #436]	; (4620 <ParseSetSimParameter(String, int)+0x2f8>)
    446c:	6018      	str	r0, [r3, #0]
          return true;
        }
      else {return false;}
    }  // Serial baud rate selection not implemented via serial port.
  return false;
}// End ParseSetSimParameter *********************************************************************
    446e:	a807      	add	r0, sp, #28
    4470:	f016 fd6a 	bl	1af48 <String::~String()>
    4474:	a804      	add	r0, sp, #16
    4476:	f016 fd67 	bl	1af48 <String::~String()>
    447a:	a801      	add	r0, sp, #4
    447c:	f016 fd64 	bl	1af48 <String::~String()>
    4480:	4620      	mov	r0, r4
    4482:	b00a      	add	sp, #40	; 0x28
    4484:	ecbd 8b02 	vpop	{d8}
    4488:	bd70      	pop	{r4, r5, r6, pc}
  if (intMode == 9)// FM DEVIATION  
    448a:	2d09      	cmp	r5, #9
    448c:	f47f af7a 	bne.w	4384 <ParseSetSimParameter(String, int)+0x5c>
    4490:	eeb1 8a40 	vneg.f32	s16, s0
    4494:	4a5f      	ldr	r2, [pc, #380]	; (4614 <ParseSetSimParameter(String, int)+0x2ec>)
    4496:	eddf 6a60 	vldr	s13, [pc, #384]	; 4618 <ParseSetSimParameter(String, int)+0x2f0>
      for (int j = 0; j < 9; j ++)
    449a:	2300      	movs	r3, #0
        if  ((abs(100 * fltLogs[j] - fltParam)) < .001)
    449c:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 461c <ParseSetSimParameter(String, int)+0x2f4>
    44a0:	ed9f 5b55 	vldr	d5, [pc, #340]	; 45f8 <ParseSetSimParameter(String, int)+0x2d0>
    44a4:	e001      	b.n	44aa <ParseSetSimParameter(String, int)+0x182>
    44a6:	ecf2 6a01 	vldmia	r2!, {s13}
    44aa:	eeb0 7a48 	vmov.f32	s14, s16
    44ae:	eea6 7a86 	vfma.f32	s14, s13, s12
    44b2:	eeb0 7ac7 	vabs.f32	s14, s14
    44b6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    44ba:	eeb4 7bc5 	vcmpe.f64	d7, d5
    44be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44c2:	d44d      	bmi.n	4560 <ParseSetSimParameter(String, int)+0x238>
      for (int j = 0; j < 9; j ++)
    44c4:	3301      	adds	r3, #1
    44c6:	2b09      	cmp	r3, #9
    44c8:	d1ed      	bne.n	44a6 <ParseSetSimParameter(String, int)+0x17e>
      else {return false;}
    44ca:	2400      	movs	r4, #0
    44cc:	e7cf      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
  if ((intMode >= 13) && (intMode <= 14)) //OUT levels
    44ce:	f1a5 030d 	sub.w	r3, r5, #13
    44d2:	2b01      	cmp	r3, #1
    44d4:	d827      	bhi.n	4526 <ParseSetSimParameter(String, int)+0x1fe>
    44d6:	eddf 6a50 	vldr	s13, [pc, #320]	; 4618 <ParseSetSimParameter(String, int)+0x2f0>
      for (int j = 0; j < 9; j ++)
    44da:	2300      	movs	r3, #0
    44dc:	4a4d      	ldr	r2, [pc, #308]	; (4614 <ParseSetSimParameter(String, int)+0x2ec>)
          if  (abs(fltLogs[j] - fltParam) < .001)
    44de:	ed9f 5b46 	vldr	d5, [pc, #280]	; 45f8 <ParseSetSimParameter(String, int)+0x2d0>
    44e2:	e001      	b.n	44e8 <ParseSetSimParameter(String, int)+0x1c0>
    44e4:	ecf2 6a01 	vldmia	r2!, {s13}
    44e8:	ee36 7ac8 	vsub.f32	s14, s13, s16
    44ec:	eeb0 7ac7 	vabs.f32	s14, s14
    44f0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    44f4:	eeb4 7bc5 	vcmpe.f64	d7, d5
    44f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44fc:	f100 80e4 	bmi.w	46c8 <ParseSetSimParameter(String, int)+0x3a0>
      for (int j = 0; j < 9; j ++)
    4500:	3301      	adds	r3, #1
    4502:	2b09      	cmp	r3, #9
    4504:	d1ee      	bne.n	44e4 <ParseSetSimParameter(String, int)+0x1bc>
    4506:	e75b      	b.n	43c0 <ParseSetSimParameter(String, int)+0x98>
          intTargetSN = intParam;
    4508:	4b46      	ldr	r3, [pc, #280]	; (4624 <ParseSetSimParameter(String, int)+0x2fc>)
          return true;
    450a:	2401      	movs	r4, #1
          intTargetSN = intParam;
    450c:	6018      	str	r0, [r3, #0]
          return true;
    450e:	e7ae      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
            intFadeRatePtr  = j;
    4510:	4a45      	ldr	r2, [pc, #276]	; (4628 <ParseSetSimParameter(String, int)+0x300>)
            return true;
    4512:	2401      	movs	r4, #1
            intFadeRatePtr  = j;
    4514:	6013      	str	r3, [r2, #0]
            fltFadeRate = 10 * fltLogs[intFadeRatePtr];
    4516:	4b45      	ldr	r3, [pc, #276]	; (462c <ParseSetSimParameter(String, int)+0x304>)
    4518:	edc3 6a00 	vstr	s13, [r3]
            return true;
    451c:	e7a7      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
          intTuneOffset = intParam;
    451e:	4b44      	ldr	r3, [pc, #272]	; (4630 <ParseSetSimParameter(String, int)+0x308>)
    4520:	601c      	str	r4, [r3, #0]
          return true;
    4522:	2401      	movs	r4, #1
    4524:	e7a3      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
  if (intMode == 15)//Bandwidth
    4526:	2d0f      	cmp	r5, #15
    4528:	f47f af4a 	bne.w	43c0 <ParseSetSimParameter(String, int)+0x98>
      intParam = strParameter.toInt();
    452c:	4630      	mov	r0, r6
    452e:	f016 fe79 	bl	1b224 <String::toInt() const>
      if ((intParam == 3000) || (intParam == 6000))
    4532:	f640 33b8 	movw	r3, #3000	; 0xbb8
    4536:	f241 7270 	movw	r2, #6000	; 0x1770
      intParam = strParameter.toInt();
    453a:	4605      	mov	r5, r0
      if ((intParam == 3000) || (intParam == 6000))
    453c:	4290      	cmp	r0, r2
    453e:	bf18      	it	ne
    4540:	4298      	cmpne	r0, r3
    4542:	bf0c      	ite	eq
    4544:	2401      	moveq	r4, #1
    4546:	2400      	movne	r4, #0
    4548:	f47f af3a 	bne.w	43c0 <ParseSetSimParameter(String, int)+0x98>
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
    454c:	4298      	cmp	r0, r3
    454e:	d001      	beq.n	4554 <ParseSetSimParameter(String, int)+0x22c>
    4550:	4290      	cmp	r0, r2
    4552:	d102      	bne.n	455a <ParseSetSimParameter(String, int)+0x232>
    4554:	4628      	mov	r0, r5
    4556:	f7fb fde7 	bl	128 <SetFilterBandwidth(int) [clone .part.0]>
          intBandwidth = intParam;
    455a:	4b36      	ldr	r3, [pc, #216]	; (4634 <ParseSetSimParameter(String, int)+0x30c>)
    455c:	601d      	str	r5, [r3, #0]
          return true;
    455e:	e786      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
            if (fltLogs[intFMDevPtr] <.01){sine_VLF_Dnmix_Mod.amplitude(0.0);}  
    4560:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
            intFMDevPtr = j;
    4564:	4a34      	ldr	r2, [pc, #208]	; (4638 <ParseSetSimParameter(String, int)+0x310>)
            if (fltLogs[intFMDevPtr] <.01){sine_VLF_Dnmix_Mod.amplitude(0.0);}  
    4566:	ed9f 6b26 	vldr	d6, [pc, #152]	; 4600 <ParseSetSimParameter(String, int)+0x2d8>
            intFMDevPtr = j;
    456a:	6013      	str	r3, [r2, #0]
            if (fltLogs[intFMDevPtr] <.01){sine_VLF_Dnmix_Mod.amplitude(0.0);}  
    456c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4574:	d419      	bmi.n	45aa <ParseSetSimParameter(String, int)+0x282>
            else {sine_VLF_Dnmix_Mod.amplitude(fltLogs[intFMDevPtr] * .0129870129870 );} //sets max deviation in Hz e.g. .000129870129870 * 7700  yields +/- 1 Hz peak deviation
    4576:	ed9f 6b24 	vldr	d6, [pc, #144]	; 4608 <ParseSetSimParameter(String, int)+0x2e0>
    457a:	ee27 7b06 	vmul.f64	d7, d7, d6
    457e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (angle >= 360.0f) return;
		}
		phase_accumulator = angle * (float)(4294967296.0 / 360.0);
	}
	void amplitude(float n) {
		if (n < 0.0f) n = 0;
    4582:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    4586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    458a:	f100 80d8 	bmi.w	473e <ParseSetSimParameter(String, int)+0x416>
		else if (n > 1.0f) n = 1.0f;
    458e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4592:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    459a:	f340 80dd 	ble.w	4758 <ParseSetSimParameter(String, int)+0x430>
    459e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
		magnitude = n * 65536.0f;
    45a2:	4a26      	ldr	r2, [pc, #152]	; (463c <ParseSetSimParameter(String, int)+0x314>)
            return true;
    45a4:	2401      	movs	r4, #1
    45a6:	6213      	str	r3, [r2, #32]
	}
    45a8:	e761      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
		magnitude = n * 65536.0f;
    45aa:	4b24      	ldr	r3, [pc, #144]	; (463c <ParseSetSimParameter(String, int)+0x314>)
    45ac:	2200      	movs	r2, #0
    45ae:	2401      	movs	r4, #1
    45b0:	621a      	str	r2, [r3, #32]
	}
    45b2:	e75c      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
		if (gain > 32767.0f) gain = 32767.0f;
    45b4:	eddf 7a22 	vldr	s15, [pc, #136]	; 4640 <ParseSetSimParameter(String, int)+0x318>
              mixInpSel.gain(intMode -9, 100 * fltLogs[j]);
    45b8:	3d09      	subs	r5, #9
              intGainLevel[intMode - 11] = j;
    45ba:	4a22      	ldr	r2, [pc, #136]	; (4644 <ParseSetSimParameter(String, int)+0x31c>)
    45bc:	eef4 6ae7 	vcmpe.f32	s13, s15
    45c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    45c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45c8:	dc13      	bgt.n	45f2 <ParseSetSimParameter(String, int)+0x2ca>
		else if (gain < -32767.0f) gain = -32767.0f;
    45ca:	eddf 7a1f 	vldr	s15, [pc, #124]	; 4648 <ParseSetSimParameter(String, int)+0x320>
    45ce:	eef4 6ae7 	vcmpe.f32	s13, s15
    45d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45d6:	f100 80b0 	bmi.w	473a <ParseSetSimParameter(String, int)+0x412>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    45da:	eef0 7a66 	vmov.f32	s15, s13
    45de:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    45e2:	ee17 3a90 	vmov	r3, s15
    45e6:	3506      	adds	r5, #6
    45e8:	4a18      	ldr	r2, [pc, #96]	; (464c <ParseSetSimParameter(String, int)+0x324>)
              return true;
    45ea:	2401      	movs	r4, #1
    45ec:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    45f0:	e73d      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
    45f2:	4b17      	ldr	r3, [pc, #92]	; (4650 <ParseSetSimParameter(String, int)+0x328>)
    45f4:	e7f7      	b.n	45e6 <ParseSetSimParameter(String, int)+0x2be>
    45f6:	bf00      	nop
    45f8:	d2f1a9fc 	.word	0xd2f1a9fc
    45fc:	3f50624d 	.word	0x3f50624d
    4600:	47ae147b 	.word	0x47ae147b
    4604:	3f847ae1 	.word	0x3f847ae1
    4608:	606a467f 	.word	0x606a467f
    460c:	3f8a98ef 	.word	0x3f8a98ef
    4610:	20012cac 	.word	0x20012cac
    4614:	200038a0 	.word	0x200038a0
    4618:	00000000 	.word	0x00000000
    461c:	42c80000 	.word	0x42c80000
    4620:	20009a48 	.word	0x20009a48
    4624:	20009a58 	.word	0x20009a58
    4628:	20009a2c 	.word	0x20009a2c
    462c:	20012c0c 	.word	0x20012c0c
    4630:	20012cbc 	.word	0x20012cbc
    4634:	20009a10 	.word	0x20009a10
    4638:	20009a24 	.word	0x20009a24
    463c:	200134f0 	.word	0x200134f0
    4640:	46fffe00 	.word	0x46fffe00
    4644:	20009a30 	.word	0x20009a30
    4648:	c6fffe00 	.word	0xc6fffe00
    464c:	20012db0 	.word	0x20012db0
    4650:	7fff0000 	.word	0x7fff0000
            intFMRatePtr = j;
    4654:	4a4c      	ldr	r2, [pc, #304]	; (4788 <ParseSetSimParameter(String, int)+0x460>)
    4656:	6013      	str	r3, [r2, #0]
            if (intFMRatePtr == 0){sine_VLF_Dnmix_Mod.amplitude(0);}
    4658:	2b00      	cmp	r3, #0
    465a:	d0a6      	beq.n	45aa <ParseSetSimParameter(String, int)+0x282>
                sine_VLF_Dnmix_Mod.amplitude(fltLogs[intFMDevPtr] * .0129870129870 ); //sets max deviation in Hz e.g. .0129870129870 * 7700  yields +/- 1 Hz peak deviation
    465c:	4a4b      	ldr	r2, [pc, #300]	; (478c <ParseSetSimParameter(String, int)+0x464>)
    465e:	4b4c      	ldr	r3, [pc, #304]	; (4790 <ParseSetSimParameter(String, int)+0x468>)
    4660:	6812      	ldr	r2, [r2, #0]
    4662:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4666:	ed93 7a00 	vldr	s14, [r3]
    466a:	ed9f 5b45 	vldr	d5, [pc, #276]	; 4780 <ParseSetSimParameter(String, int)+0x458>
    466e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4672:	ee27 7b05 	vmul.f64	d7, d7, d5
    4676:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		if (n < 0.0f) n = 0;
    467a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4682:	d460      	bmi.n	4746 <ParseSetSimParameter(String, int)+0x41e>
		else if (n > 1.0f) n = 1.0f;
    4684:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4688:	eeb4 7ae7 	vcmpe.f32	s14, s15
    468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4690:	dd69      	ble.n	4766 <ParseSetSimParameter(String, int)+0x43e>
    4692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
		if (freq < 0.0f) freq = 0.0;
    4696:	eef5 6ac0 	vcmpe.f32	s13, #0.0
		magnitude = n * 65536.0f;
    469a:	4a3e      	ldr	r2, [pc, #248]	; (4794 <ParseSetSimParameter(String, int)+0x46c>)
    469c:	6213      	str	r3, [r2, #32]
		if (freq < 0.0f) freq = 0.0;
    469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46a2:	d44e      	bmi.n	4742 <ParseSetSimParameter(String, int)+0x41a>
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.0f) freq = AUDIO_SAMPLE_RATE_EXACT/2.0f;
    46a4:	eddf 7a3c 	vldr	s15, [pc, #240]	; 4798 <ParseSetSimParameter(String, int)+0x470>
    46a8:	eef4 6ae7 	vcmpe.f32	s13, s15
    46ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46b0:	dc4f      	bgt.n	4752 <ParseSetSimParameter(String, int)+0x42a>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    46b2:	eddf 7a3a 	vldr	s15, [pc, #232]	; 479c <ParseSetSimParameter(String, int)+0x474>
    46b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
    46ba:	eefc 7ae6 	vcvt.u32.f32	s15, s13
    46be:	ee17 3a90 	vmov	r3, s15
            return true;
    46c2:	2401      	movs	r4, #1
    46c4:	61d3      	str	r3, [r2, #28]
	}
    46c6:	e6d2      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
              intGainLevel[intMode - 11] = j;
    46c8:	4a35      	ldr	r2, [pc, #212]	; (47a0 <ParseSetSimParameter(String, int)+0x478>)
              if (intMode == 13){ampLeftOut.gain(fltLogs[ intGainLevel[intMode - 11]]); }//sets ampLeftOut gain (0-2) (log))
    46ca:	2d0d      	cmp	r5, #13
              intGainLevel[intMode - 11] = j;
    46cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
              if (intMode == 13){ampLeftOut.gain(fltLogs[ intGainLevel[intMode - 11]]); }//sets ampLeftOut gain (0-2) (log))
    46d0:	d019      	beq.n	4706 <ParseSetSimParameter(String, int)+0x3de>
              if (intMode == 14){ampRightOut.gain(fltLogs[ intGainLevel[intMode - 11]]); }//sets ampRightOut gain (0-2) (log))
    46d2:	2d0e      	cmp	r5, #14
    46d4:	d12f      	bne.n	4736 <ParseSetSimParameter(String, int)+0x40e>
public:
	AudioAmplifier(void) : AudioStream(1, inputQueueArray), multiplier(65536) {
	}
	virtual void update(void);
	void gain(float n) {
		if (n > 32767.0f) n = 32767.0f;
    46d6:	eddf 7a33 	vldr	s15, [pc, #204]	; 47a4 <ParseSetSimParameter(String, int)+0x47c>
    46da:	eef4 6ae7 	vcmpe.f32	s13, s15
    46de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46e2:	dc32      	bgt.n	474a <ParseSetSimParameter(String, int)+0x422>
		else if (n < -32767.0f) n = -32767.0f;
    46e4:	eddf 7a30 	vldr	s15, [pc, #192]	; 47a8 <ParseSetSimParameter(String, int)+0x480>
    46e8:	eef4 6ae7 	vcmpe.f32	s13, s15
    46ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46f0:	d442      	bmi.n	4778 <ParseSetSimParameter(String, int)+0x450>
		multiplier = n * 65536.0f;
    46f2:	eef0 7a66 	vmov.f32	s15, s13
    46f6:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    46fa:	ee17 3a90 	vmov	r3, s15
    46fe:	4a2b      	ldr	r2, [pc, #172]	; (47ac <ParseSetSimParameter(String, int)+0x484>)
              return true;
    4700:	2401      	movs	r4, #1
    4702:	6193      	str	r3, [r2, #24]
	}
    4704:	e6b3      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
		if (n > 32767.0f) n = 32767.0f;
    4706:	eddf 7a27 	vldr	s15, [pc, #156]	; 47a4 <ParseSetSimParameter(String, int)+0x47c>
    470a:	eef4 6ae7 	vcmpe.f32	s13, s15
    470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4712:	dc1c      	bgt.n	474e <ParseSetSimParameter(String, int)+0x426>
		else if (n < -32767.0f) n = -32767.0f;
    4714:	eddf 7a24 	vldr	s15, [pc, #144]	; 47a8 <ParseSetSimParameter(String, int)+0x480>
    4718:	eef4 6ae7 	vcmpe.f32	s13, s15
    471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4720:	d428      	bmi.n	4774 <ParseSetSimParameter(String, int)+0x44c>
		multiplier = n * 65536.0f;
    4722:	eef0 7a66 	vmov.f32	s15, s13
    4726:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    472a:	ee17 3a90 	vmov	r3, s15
    472e:	4a20      	ldr	r2, [pc, #128]	; (47b0 <ParseSetSimParameter(String, int)+0x488>)
    4730:	2401      	movs	r4, #1
    4732:	6193      	str	r3, [r2, #24]
              if (intMode == 14){ampRightOut.gain(fltLogs[ intGainLevel[intMode - 11]]); }//sets ampRightOut gain (0-2) (log))
    4734:	e69b      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
              return true;
    4736:	2401      	movs	r4, #1
    4738:	e699      	b.n	446e <ParseSetSimParameter(String, int)+0x146>
    473a:	4b1e      	ldr	r3, [pc, #120]	; (47b4 <ParseSetSimParameter(String, int)+0x48c>)
    473c:	e753      	b.n	45e6 <ParseSetSimParameter(String, int)+0x2be>
    473e:	2300      	movs	r3, #0
    4740:	e72f      	b.n	45a2 <ParseSetSimParameter(String, int)+0x27a>
    4742:	2300      	movs	r3, #0
    4744:	e7bd      	b.n	46c2 <ParseSetSimParameter(String, int)+0x39a>
    4746:	2300      	movs	r3, #0
    4748:	e7a5      	b.n	4696 <ParseSetSimParameter(String, int)+0x36e>
    474a:	4b1b      	ldr	r3, [pc, #108]	; (47b8 <ParseSetSimParameter(String, int)+0x490>)
    474c:	e7d7      	b.n	46fe <ParseSetSimParameter(String, int)+0x3d6>
    474e:	4b1a      	ldr	r3, [pc, #104]	; (47b8 <ParseSetSimParameter(String, int)+0x490>)
    4750:	e7ed      	b.n	472e <ParseSetSimParameter(String, int)+0x406>
    4752:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    4756:	e7b4      	b.n	46c2 <ParseSetSimParameter(String, int)+0x39a>
		magnitude = n * 65536.0f;
    4758:	eef0 7a47 	vmov.f32	s15, s14
    475c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    4760:	ee17 3a90 	vmov	r3, s15
    4764:	e71d      	b.n	45a2 <ParseSetSimParameter(String, int)+0x27a>
    4766:	eef0 7a47 	vmov.f32	s15, s14
    476a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    476e:	ee17 3a90 	vmov	r3, s15
    4772:	e790      	b.n	4696 <ParseSetSimParameter(String, int)+0x36e>
    4774:	4b0f      	ldr	r3, [pc, #60]	; (47b4 <ParseSetSimParameter(String, int)+0x48c>)
    4776:	e7da      	b.n	472e <ParseSetSimParameter(String, int)+0x406>
    4778:	4b0e      	ldr	r3, [pc, #56]	; (47b4 <ParseSetSimParameter(String, int)+0x48c>)
    477a:	e7c0      	b.n	46fe <ParseSetSimParameter(String, int)+0x3d6>
    477c:	f3af 8000 	nop.w
    4780:	606a467f 	.word	0x606a467f
    4784:	3f8a98ef 	.word	0x3f8a98ef
    4788:	20009a28 	.word	0x20009a28
    478c:	20009a24 	.word	0x20009a24
    4790:	2000389c 	.word	0x2000389c
    4794:	200134f0 	.word	0x200134f0
    4798:	46ac4400 	.word	0x46ac4400
    479c:	47be37c6 	.word	0x47be37c6
    47a0:	20009a30 	.word	0x20009a30
    47a4:	46fffe00 	.word	0x46fffe00
    47a8:	c6fffe00 	.word	0xc6fffe00
    47ac:	2000caf0 	.word	0x2000caf0
    47b0:	2000cad0 	.word	0x2000cad0
    47b4:	80010000 	.word	0x80010000
    47b8:	7fff0000 	.word	0x7fff0000

000047bc <UpdateTFTModeParameter(String, String, String)>:
}// End ParseSetBusyParameter *******************************************************************


//**** Subroutine UpdateTFTModeParameter**********************************************************
void UpdateTFTModeParameter(String s1, String s2, String s3)
{
    47bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  // tft.begin();
  // tft.setRotation(3);
  tft.setCursor(1,80);
    47be:	4c1f      	ldr	r4, [pc, #124]	; (483c <UpdateTFTModeParameter(String, String, String)+0x80>)
{
    47c0:	b085      	sub	sp, #20
  tft.setCursor(1,80);
    47c2:	2300      	movs	r3, #0
{
    47c4:	4607      	mov	r7, r0
    47c6:	460e      	mov	r6, r1
    47c8:	4615      	mov	r5, r2
  tft.setCursor(1,80);
    47ca:	4620      	mov	r0, r4
    47cc:	2250      	movs	r2, #80	; 0x50
    47ce:	2101      	movs	r1, #1
    47d0:	f012 fe24 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
  tft.fillScreen(ST7735_BLACK);
    47d4:	4620      	mov	r0, r4
    47d6:	2100      	movs	r1, #0
    47d8:	f012 f80c 	bl	167f4 <ST7735_t3::fillScreen(unsigned short)>
  tft.setTextColor(ST7735_CYAN);  tft.setTextSize(3);  tft.println(s1);
    47dc:	4620      	mov	r0, r4
    47de:	f240 71ff 	movw	r1, #2047	; 0x7ff
    47e2:	f012 fe7d 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
	void setCursor(int16_t x, int16_t y, bool autoCenter=false);
    void getCursor(int16_t *x, int16_t *y);
	void setTextColor(uint16_t c);
	void setTextColor(uint16_t c, uint16_t bg);
    void setTextSize(uint8_t sx, uint8_t sy);
	void inline setTextSize(uint8_t s) { setTextSize(s,s); }
    47e6:	2203      	movs	r2, #3
    47e8:	4620      	mov	r0, r4
    47ea:	4611      	mov	r1, r2
    47ec:	f012 fe6c 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
    47f0:	4639      	mov	r1, r7
    47f2:	4620      	mov	r0, r4
    47f4:	f016 fa2c 	bl	1ac50 <Print::print(String const&)>
    47f8:	4620      	mov	r0, r4
    47fa:	f016 fa5b 	bl	1acb4 <Print::println()>
  tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(s2 + s3);
    47fe:	4620      	mov	r0, r4
    4800:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    4804:	f012 fe6c 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    4808:	2203      	movs	r2, #3
    480a:	4620      	mov	r0, r4
    480c:	4611      	mov	r1, r2
    480e:	f012 fe5b 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    4812:	4631      	mov	r1, r6
    4814:	a801      	add	r0, sp, #4
    4816:	f016 fb7b 	bl	1af10 <String::String(String const&)>
    481a:	4629      	mov	r1, r5
    481c:	a801      	add	r0, sp, #4
    481e:	f016 fc81 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4822:	4601      	mov	r1, r0
    4824:	4620      	mov	r0, r4
    4826:	f016 fa13 	bl	1ac50 <Print::print(String const&)>
    482a:	4620      	mov	r0, r4
    482c:	f016 fa42 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    4830:	a801      	add	r0, sp, #4
    4832:	f016 fb89 	bl	1af48 <String::~String()>
}// End UpdateTFTModeParameter *******************************************************************
    4836:	b005      	add	sp, #20
    4838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    483a:	bf00      	nop
    483c:	2001355c 	.word	0x2001355c

00004840 <ParseSetParameter(String, int)>:
{
    4840:	b5f0      	push	{r4, r5, r6, r7, lr}
    4842:	ed2d 8b02 	vpush	{d8}
    4846:	b093      	sub	sp, #76	; 0x4c
    4848:	460c      	mov	r4, r1
    484a:	4607      	mov	r7, r0
  int intParam = strParameter.toInt(); String str1; String str2; String str3; float fltParam = strParameter.toFloat();
    484c:	f016 fcea 	bl	1b224 <String::toInt() const>
    4850:	2100      	movs	r1, #0
    4852:	4605      	mov	r5, r0
    4854:	4668      	mov	r0, sp
    4856:	f016 fb3d 	bl	1aed4 <String::String(char const*)>
    485a:	2100      	movs	r1, #0
    485c:	a803      	add	r0, sp, #12
    485e:	f016 fb39 	bl	1aed4 <String::String(char const*)>
    4862:	2100      	movs	r1, #0
    4864:	a806      	add	r0, sp, #24
    4866:	f016 fb35 	bl	1aed4 <String::String(char const*)>
    486a:	4638      	mov	r0, r7
    486c:	f016 fce0 	bl	1b230 <String::toFloat() const>
  if (intMode < 5)  //WGN thru MPD
    4870:	2c04      	cmp	r4, #4
  int intParam = strParameter.toInt(); String str1; String str2; String str3; float fltParam = strParameter.toFloat();
    4872:	eeb0 8a40 	vmov.f32	s16, s0
  if (intMode < 5)  //WGN thru MPD
    4876:	dd2b      	ble.n	48d0 <ParseSetParameter(String, int)+0x90>
  if (intMode == 5) //MULTIPATHS
    4878:	2c05      	cmp	r4, #5
    487a:	d01f      	beq.n	48bc <ParseSetParameter(String, int)+0x7c>
  if (intMode == 6) //FADE DEPTH
    487c:	2c06      	cmp	r4, #6
    487e:	d14b      	bne.n	4918 <ParseSetParameter(String, int)+0xd8>
    if ((intParam >= 0) && (intParam <= 40))
    4880:	2d28      	cmp	r5, #40	; 0x28
    4882:	f240 8173 	bls.w	4b6c <ParseSetParameter(String, int)+0x32c>
  if ((intMode >= 11) && (intMode <= 14)) //IN and OUT levels
    4886:	f1a4 060b 	sub.w	r6, r4, #11
    488a:	2e03      	cmp	r6, #3
    488c:	f200 80c4 	bhi.w	4a18 <ParseSetParameter(String, int)+0x1d8>
    intParam = strParameter.toInt();
    4890:	4638      	mov	r0, r7
    4892:	f016 fcc7 	bl	1b224 <String::toInt() const>
    if ((intParam >= 0) && (intParam <= 20))
    4896:	2814      	cmp	r0, #20
    intParam = strParameter.toInt();
    4898:	4605      	mov	r5, r0
    if ((intParam >= 0) && (intParam <= 20))
    489a:	f240 81a9 	bls.w	4bf0 <ParseSetParameter(String, int)+0x3b0>
    return false;
    489e:	2600      	movs	r6, #0
}// End ParseSetParameter **************************************************************
    48a0:	a806      	add	r0, sp, #24
    48a2:	f016 fb51 	bl	1af48 <String::~String()>
    48a6:	a803      	add	r0, sp, #12
    48a8:	f016 fb4e 	bl	1af48 <String::~String()>
    48ac:	4668      	mov	r0, sp
    48ae:	f016 fb4b 	bl	1af48 <String::~String()>
    48b2:	4630      	mov	r0, r6
    48b4:	b013      	add	sp, #76	; 0x4c
    48b6:	ecbd 8b02 	vpop	{d8}
    48ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((intParam == 2) || (intParam == 4)) 
    48bc:	2d04      	cmp	r5, #4
    48be:	bf18      	it	ne
    48c0:	2d02      	cmpne	r5, #2
    48c2:	bf0c      	ite	eq
    48c4:	2601      	moveq	r6, #1
    48c6:	2600      	movne	r6, #0
    48c8:	d1dd      	bne.n	4886 <ParseSetParameter(String, int)+0x46>
        intMultipaths = intParam; return true;
    48ca:	4bb3      	ldr	r3, [pc, #716]	; (4b98 <ParseSetParameter(String, int)+0x358>)
    48cc:	601d      	str	r5, [r3, #0]
    48ce:	e7e7      	b.n	48a0 <ParseSetParameter(String, int)+0x60>
    intParam = strParameter.toInt();
    48d0:	4638      	mov	r0, r7
    48d2:	f016 fca7 	bl	1b224 <String::toInt() const>
    if ((-40 <= intParam) && (intParam <= 40))
    48d6:	f100 0328 	add.w	r3, r0, #40	; 0x28
    48da:	2b50      	cmp	r3, #80	; 0x50
    48dc:	f240 8112 	bls.w	4b04 <ParseSetParameter(String, int)+0x2c4>
  if (intMode == 9) // FM DEVIATION  
    48e0:	2c09      	cmp	r4, #9
    48e2:	f040 80e7 	bne.w	4ab4 <ParseSetParameter(String, int)+0x274>
    48e6:	4aad      	ldr	r2, [pc, #692]	; (4b9c <ParseSetParameter(String, int)+0x35c>)
      for (int j = 0; j < 9; j ++)
    48e8:	2300      	movs	r3, #0
  if (intMode == 9) // FM DEVIATION  
    48ea:	eddf 8aad 	vldr	s17, [pc, #692]	; 4ba0 <ParseSetParameter(String, int)+0x360>
        if  ((abs(fltLogs[j] - fltParam)) < .001)
    48ee:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 4b88 <ParseSetParameter(String, int)+0x348>
    48f2:	e001      	b.n	48f8 <ParseSetParameter(String, int)+0xb8>
    48f4:	ecf2 8a01 	vldmia	r2!, {s17}
    48f8:	ee38 7ac8 	vsub.f32	s14, s17, s16
    48fc:	eeb0 7ac7 	vabs.f32	s14, s14
    4900:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4904:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    490c:	f100 80ed 	bmi.w	4aea <ParseSetParameter(String, int)+0x2aa>
      for (int j = 0; j < 9; j ++)
    4910:	3301      	adds	r3, #1
    4912:	2b09      	cmp	r3, #9
    4914:	d1ee      	bne.n	48f4 <ParseSetParameter(String, int)+0xb4>
    4916:	e7c2      	b.n	489e <ParseSetParameter(String, int)+0x5e>
  if (intMode == 7) //FADE FREQ  fltFadeRates
    4918:	2c07      	cmp	r4, #7
    491a:	d156      	bne.n	49ca <ParseSetParameter(String, int)+0x18a>
    491c:	eddf 8aa0 	vldr	s17, [pc, #640]	; 4ba0 <ParseSetParameter(String, int)+0x360>
    for (int j = 0; j < 9; j += 1)
    4920:	2300      	movs	r3, #0
    4922:	4a9e      	ldr	r2, [pc, #632]	; (4b9c <ParseSetParameter(String, int)+0x35c>)
      if  ((abs(fltLogs[j] - fltParam)) < .01)
    4924:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 4b90 <ParseSetParameter(String, int)+0x350>
    4928:	e004      	b.n	4934 <ParseSetParameter(String, int)+0xf4>
    for (int j = 0; j < 9; j += 1)
    492a:	3301      	adds	r3, #1
    492c:	2b09      	cmp	r3, #9
    492e:	d0aa      	beq.n	4886 <ParseSetParameter(String, int)+0x46>
      if  ((abs(fltLogs[j] - fltParam)) < .01)
    4930:	ecf2 8a01 	vldmia	r2!, {s17}
    4934:	ee38 7ac8 	vsub.f32	s14, s17, s16
    4938:	eeb0 7ac7 	vabs.f32	s14, s14
    493c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4940:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4948:	d5ef      	bpl.n	492a <ParseSetParameter(String, int)+0xea>
        intFMDevPtr = j;
    494a:	4a96      	ldr	r2, [pc, #600]	; (4ba4 <ParseSetParameter(String, int)+0x364>)
        str1 = chrModes[intMode]; str2 = "      " + String(10 * fltLogs[j]) ; str3 =  " Hz";
    494c:	4668      	mov	r0, sp
    494e:	4996      	ldr	r1, [pc, #600]	; (4ba8 <ParseSetParameter(String, int)+0x368>)
        intFMDevPtr = j;
    4950:	6013      	str	r3, [r2, #0]
        str1 = chrModes[intMode]; str2 = "      " + String(10 * fltLogs[j]) ; str3 =  " Hz";
    4952:	f016 fb85 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    4956:	4995      	ldr	r1, [pc, #596]	; (4bac <ParseSetParameter(String, int)+0x36c>)
    4958:	a80f      	add	r0, sp, #60	; 0x3c
    495a:	f016 fabb 	bl	1aed4 <String::String(char const*)>
    495e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
        str1 = chrModes[intMode]; str2 = "      " + String(100 * fltLogs[j]) ; str3 =  " Hz";
    4962:	ee28 0a80 	vmul.f32	s0, s17, s0
    4966:	2102      	movs	r1, #2
    4968:	a80c      	add	r0, sp, #48	; 0x30
    496a:	f016 fb3f 	bl	1afec <String::String(float, unsigned char)>
    496e:	a90c      	add	r1, sp, #48	; 0x30
    4970:	a80f      	add	r0, sp, #60	; 0x3c
    4972:	f016 fbd7 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4976:	4601      	mov	r1, r0
    4978:	a803      	add	r0, sp, #12
    497a:	f016 fb53 	bl	1b024 <String::operator=(String const&)>
    497e:	a80c      	add	r0, sp, #48	; 0x30
    4980:	f016 fae2 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    4984:	a80f      	add	r0, sp, #60	; 0x3c
    4986:	f016 fadf 	bl	1af48 <String::~String()>
    498a:	4989      	ldr	r1, [pc, #548]	; (4bb0 <ParseSetParameter(String, int)+0x370>)
    498c:	a806      	add	r0, sp, #24
    498e:	f016 fb67 	bl	1b060 <String::operator=(char const*)>
        UpdateTFTModeParameter(str1, str2, "");
    4992:	4669      	mov	r1, sp
    4994:	a809      	add	r0, sp, #36	; 0x24
    4996:	f016 fabb 	bl	1af10 <String::String(String const&)>
    499a:	a903      	add	r1, sp, #12
    499c:	a80c      	add	r0, sp, #48	; 0x30
    499e:	f016 fab7 	bl	1af10 <String::String(String const&)>
    49a2:	4984      	ldr	r1, [pc, #528]	; (4bb4 <ParseSetParameter(String, int)+0x374>)
    49a4:	a80f      	add	r0, sp, #60	; 0x3c
    49a6:	f016 fa95 	bl	1aed4 <String::String(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    49aa:	aa0f      	add	r2, sp, #60	; 0x3c
    49ac:	a90c      	add	r1, sp, #48	; 0x30
    49ae:	a809      	add	r0, sp, #36	; 0x24
      return true;
    49b0:	2601      	movs	r6, #1
      UpdateTFTModeParameter(str1, str2, str3);
    49b2:	f7ff ff03 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    49b6:	a80f      	add	r0, sp, #60	; 0x3c
    49b8:	f016 fac6 	bl	1af48 <String::~String()>
    49bc:	a80c      	add	r0, sp, #48	; 0x30
    49be:	f016 fac3 	bl	1af48 <String::~String()>
    49c2:	a809      	add	r0, sp, #36	; 0x24
    49c4:	f016 fac0 	bl	1af48 <String::~String()>
      return true;
    49c8:	e76a      	b.n	48a0 <ParseSetParameter(String, int)+0x60>
  if (intMode == 8) //OFFSET
    49ca:	2c08      	cmp	r4, #8
    49cc:	d188      	bne.n	48e0 <ParseSetParameter(String, int)+0xa0>
      if ((intParam >= -200) && (intParam <= 200))
    49ce:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
    49d2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
    49d6:	f63f af62 	bhi.w	489e <ParseSetParameter(String, int)+0x5e>
          intTuneOffset = intParam;
    49da:	4b77      	ldr	r3, [pc, #476]	; (4bb8 <ParseSetParameter(String, int)+0x378>)
          str1 = chrModes[intMode]; str2 = "      " + String(intParam) ; str3 =  " Hz";
    49dc:	4668      	mov	r0, sp
    49de:	4977      	ldr	r1, [pc, #476]	; (4bbc <ParseSetParameter(String, int)+0x37c>)
          intTuneOffset = intParam;
    49e0:	601d      	str	r5, [r3, #0]
          str1 = chrModes[intMode]; str2 = "      " + String(intParam) ; str3 =  " Hz";
    49e2:	f016 fb3d 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    49e6:	4971      	ldr	r1, [pc, #452]	; (4bac <ParseSetParameter(String, int)+0x36c>)
    49e8:	a80f      	add	r0, sp, #60	; 0x3c
    49ea:	f016 fa73 	bl	1aed4 <String::String(char const*)>
    49ee:	220a      	movs	r2, #10
    49f0:	4629      	mov	r1, r5
    49f2:	a80c      	add	r0, sp, #48	; 0x30
    49f4:	f016 fae4 	bl	1afc0 <String::String(int, unsigned char)>
    49f8:	a90c      	add	r1, sp, #48	; 0x30
    49fa:	a80f      	add	r0, sp, #60	; 0x3c
    49fc:	f016 fb92 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4a00:	4601      	mov	r1, r0
    4a02:	a803      	add	r0, sp, #12
    4a04:	f016 fb0e 	bl	1b024 <String::operator=(String const&)>
    4a08:	a80c      	add	r0, sp, #48	; 0x30
    4a0a:	f016 fa9d 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    4a0e:	a80f      	add	r0, sp, #60	; 0x3c
    4a10:	f016 fa9a 	bl	1af48 <String::~String()>
    4a14:	4966      	ldr	r1, [pc, #408]	; (4bb0 <ParseSetParameter(String, int)+0x370>)
    4a16:	e095      	b.n	4b44 <ParseSetParameter(String, int)+0x304>
  if (intMode == 15)  //Bandwidth
    4a18:	2c0f      	cmp	r4, #15
    4a1a:	f47f af40 	bne.w	489e <ParseSetParameter(String, int)+0x5e>
    intParam = strParameter.toInt();
    4a1e:	4638      	mov	r0, r7
    if ((intParam == 3000) || (intParam == 6000))
    4a20:	f640 36b8 	movw	r6, #3000	; 0xbb8
    intParam = strParameter.toInt();
    4a24:	f016 fbfe 	bl	1b224 <String::toInt() const>
    if ((intParam == 3000) || (intParam == 6000))
    4a28:	f241 7370 	movw	r3, #6000	; 0x1770
    4a2c:	4298      	cmp	r0, r3
    4a2e:	bf18      	it	ne
    4a30:	42b0      	cmpne	r0, r6
    4a32:	bf0c      	ite	eq
    4a34:	2601      	moveq	r6, #1
    4a36:	2600      	movne	r6, #0
    4a38:	f47f af31 	bne.w	489e <ParseSetParameter(String, int)+0x5e>
      intBandwidth = intParam;
    4a3c:	4c60      	ldr	r4, [pc, #384]	; (4bc0 <ParseSetParameter(String, int)+0x380>)
      str1 = chrModes[intMode]; str2 = "      " + String(intBandwidth) ; str3 =  " Hz";
    4a3e:	4961      	ldr	r1, [pc, #388]	; (4bc4 <ParseSetParameter(String, int)+0x384>)
      intBandwidth = intParam;
    4a40:	6020      	str	r0, [r4, #0]
      str1 = chrModes[intMode]; str2 = "      " + String(intBandwidth) ; str3 =  " Hz";
    4a42:	4668      	mov	r0, sp
    4a44:	f016 fb0c 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    4a48:	4958      	ldr	r1, [pc, #352]	; (4bac <ParseSetParameter(String, int)+0x36c>)
    4a4a:	a80f      	add	r0, sp, #60	; 0x3c
    4a4c:	f016 fa42 	bl	1aed4 <String::String(char const*)>
    4a50:	220a      	movs	r2, #10
    4a52:	6821      	ldr	r1, [r4, #0]
    4a54:	a80c      	add	r0, sp, #48	; 0x30
    4a56:	f016 fab3 	bl	1afc0 <String::String(int, unsigned char)>
    4a5a:	a90c      	add	r1, sp, #48	; 0x30
    4a5c:	a80f      	add	r0, sp, #60	; 0x3c
    4a5e:	f016 fb61 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4a62:	4601      	mov	r1, r0
    4a64:	a803      	add	r0, sp, #12
    4a66:	f016 fadd 	bl	1b024 <String::operator=(String const&)>
    4a6a:	a80c      	add	r0, sp, #48	; 0x30
    4a6c:	f016 fa6c 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    4a70:	a80f      	add	r0, sp, #60	; 0x3c
    4a72:	f016 fa69 	bl	1af48 <String::~String()>
    4a76:	494e      	ldr	r1, [pc, #312]	; (4bb0 <ParseSetParameter(String, int)+0x370>)
    4a78:	a806      	add	r0, sp, #24
    4a7a:	f016 faf1 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    4a7e:	4669      	mov	r1, sp
    4a80:	a809      	add	r0, sp, #36	; 0x24
    4a82:	f016 fa45 	bl	1af10 <String::String(String const&)>
    4a86:	a903      	add	r1, sp, #12
    4a88:	a80c      	add	r0, sp, #48	; 0x30
    4a8a:	f016 fa41 	bl	1af10 <String::String(String const&)>
    4a8e:	a906      	add	r1, sp, #24
    4a90:	a80f      	add	r0, sp, #60	; 0x3c
    4a92:	f016 fa3d 	bl	1af10 <String::String(String const&)>
    4a96:	aa0f      	add	r2, sp, #60	; 0x3c
    4a98:	a90c      	add	r1, sp, #48	; 0x30
    4a9a:	a809      	add	r0, sp, #36	; 0x24
    4a9c:	f7ff fe8e 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    4aa0:	a80f      	add	r0, sp, #60	; 0x3c
    4aa2:	f016 fa51 	bl	1af48 <String::~String()>
    4aa6:	a80c      	add	r0, sp, #48	; 0x30
    4aa8:	f016 fa4e 	bl	1af48 <String::~String()>
    4aac:	a809      	add	r0, sp, #36	; 0x24
    4aae:	f016 fa4b 	bl	1af48 <String::~String()>
      return true;
    4ab2:	e6f5      	b.n	48a0 <ParseSetParameter(String, int)+0x60>
  if (intMode == 10)  //FM RATE 
    4ab4:	2c0a      	cmp	r4, #10
    4ab6:	f47f aee6 	bne.w	4886 <ParseSetParameter(String, int)+0x46>
    4aba:	4a38      	ldr	r2, [pc, #224]	; (4b9c <ParseSetParameter(String, int)+0x35c>)
    for (int j = 0; j < 9; j += 1)
    4abc:	2300      	movs	r3, #0
  if (intMode == 10)  //FM RATE 
    4abe:	eddf 8a38 	vldr	s17, [pc, #224]	; 4ba0 <ParseSetParameter(String, int)+0x360>
      if ((abs(fltLogs[j] - fltParam)) < .001)
    4ac2:	ed9f 6b31 	vldr	d6, [pc, #196]	; 4b88 <ParseSetParameter(String, int)+0x348>
    4ac6:	e001      	b.n	4acc <ParseSetParameter(String, int)+0x28c>
    4ac8:	ecf2 8a01 	vldmia	r2!, {s17}
    4acc:	ee38 7ac8 	vsub.f32	s14, s17, s16
    4ad0:	eeb0 7ac7 	vabs.f32	s14, s14
    4ad4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4ad8:	eeb4 7bc6 	vcmpe.f64	d7, d6
    4adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ae0:	d440      	bmi.n	4b64 <ParseSetParameter(String, int)+0x324>
    for (int j = 0; j < 9; j += 1)
    4ae2:	3301      	adds	r3, #1
    4ae4:	2b09      	cmp	r3, #9
    4ae6:	d1ef      	bne.n	4ac8 <ParseSetParameter(String, int)+0x288>
    4ae8:	e6d9      	b.n	489e <ParseSetParameter(String, int)+0x5e>
            intFMDevPtr = j;
    4aea:	4a2e      	ldr	r2, [pc, #184]	; (4ba4 <ParseSetParameter(String, int)+0x364>)
            str1 = chrModes[intMode]; str2 = "      " + String(100 * fltLogs[j]) ; str3 =  " Hz";
    4aec:	4936      	ldr	r1, [pc, #216]	; (4bc8 <ParseSetParameter(String, int)+0x388>)
            intFMDevPtr = j;
    4aee:	6013      	str	r3, [r2, #0]
        str1 = chrModes[intMode]; str2 = "      " + String(100 * fltLogs[j]) ; str3 =  " Hz";
    4af0:	4668      	mov	r0, sp
    4af2:	f016 fab5 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    4af6:	492d      	ldr	r1, [pc, #180]	; (4bac <ParseSetParameter(String, int)+0x36c>)
    4af8:	a80f      	add	r0, sp, #60	; 0x3c
    4afa:	f016 f9eb 	bl	1aed4 <String::String(char const*)>
    4afe:	ed9f 0a33 	vldr	s0, [pc, #204]	; 4bcc <ParseSetParameter(String, int)+0x38c>
    4b02:	e72e      	b.n	4962 <ParseSetParameter(String, int)+0x122>
      str1 = chrModes[intMode];  str2 = "    S:N= " + String(intTargetSN); str3 = " dB";
    4b04:	4b32      	ldr	r3, [pc, #200]	; (4bd0 <ParseSetParameter(String, int)+0x390>)
    4b06:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
      intTargetSN = intParam;
    4b0a:	4c32      	ldr	r4, [pc, #200]	; (4bd4 <ParseSetParameter(String, int)+0x394>)
    4b0c:	6020      	str	r0, [r4, #0]
      str1 = chrModes[intMode];  str2 = "    S:N= " + String(intTargetSN); str3 = " dB";
    4b0e:	4668      	mov	r0, sp
    4b10:	f016 faa6 	bl	1b060 <String::operator=(char const*)>
    4b14:	4930      	ldr	r1, [pc, #192]	; (4bd8 <ParseSetParameter(String, int)+0x398>)
    4b16:	a80f      	add	r0, sp, #60	; 0x3c
    4b18:	f016 f9dc 	bl	1aed4 <String::String(char const*)>
    4b1c:	6821      	ldr	r1, [r4, #0]
      str1 = chrModes[intMode]; str2 = "      " + String(intParam) ; str3 =  " dB";
    4b1e:	220a      	movs	r2, #10
    4b20:	a80c      	add	r0, sp, #48	; 0x30
    4b22:	f016 fa4d 	bl	1afc0 <String::String(int, unsigned char)>
    4b26:	a90c      	add	r1, sp, #48	; 0x30
    4b28:	a80f      	add	r0, sp, #60	; 0x3c
    4b2a:	f016 fafb 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4b2e:	4601      	mov	r1, r0
    4b30:	a803      	add	r0, sp, #12
    4b32:	f016 fa77 	bl	1b024 <String::operator=(String const&)>
    4b36:	a80c      	add	r0, sp, #48	; 0x30
    4b38:	f016 fa06 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    4b3c:	a80f      	add	r0, sp, #60	; 0x3c
    4b3e:	f016 fa03 	bl	1af48 <String::~String()>
    4b42:	4926      	ldr	r1, [pc, #152]	; (4bdc <ParseSetParameter(String, int)+0x39c>)
      str1 = chrModes[intMode]; str2 = "      " + String(intParam) ; str3 =  "";
    4b44:	a806      	add	r0, sp, #24
    4b46:	f016 fa8b 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    4b4a:	4669      	mov	r1, sp
    4b4c:	a809      	add	r0, sp, #36	; 0x24
    4b4e:	f016 f9df 	bl	1af10 <String::String(String const&)>
    4b52:	a903      	add	r1, sp, #12
    4b54:	a80c      	add	r0, sp, #48	; 0x30
    4b56:	f016 f9db 	bl	1af10 <String::String(String const&)>
    4b5a:	a906      	add	r1, sp, #24
    4b5c:	a80f      	add	r0, sp, #60	; 0x3c
    4b5e:	f016 f9d7 	bl	1af10 <String::String(String const&)>
    4b62:	e722      	b.n	49aa <ParseSetParameter(String, int)+0x16a>
        intFMRatePtr = j;
    4b64:	4a1e      	ldr	r2, [pc, #120]	; (4be0 <ParseSetParameter(String, int)+0x3a0>)
        str1 = chrModes[intMode]; str2 = "      " + String(100 * fltLogs[j]) ; str3 =  " Hz";
    4b66:	491f      	ldr	r1, [pc, #124]	; (4be4 <ParseSetParameter(String, int)+0x3a4>)
        intFMRatePtr = j;
    4b68:	6013      	str	r3, [r2, #0]
        str1 = chrModes[intMode]; str2 = "      " + String(100 * fltLogs[j]) ; str3 =  " Hz";
    4b6a:	e7c1      	b.n	4af0 <ParseSetParameter(String, int)+0x2b0>
      intFadeDepth_dB = intParam;
    4b6c:	4b1e      	ldr	r3, [pc, #120]	; (4be8 <ParseSetParameter(String, int)+0x3a8>)
      str1 = chrModes[intMode]; str2 = "      " + String(intParam) ; str3 =  " dB";
    4b6e:	4668      	mov	r0, sp
    4b70:	491e      	ldr	r1, [pc, #120]	; (4bec <ParseSetParameter(String, int)+0x3ac>)
      intFadeDepth_dB = intParam;
    4b72:	601d      	str	r5, [r3, #0]
      str1 = chrModes[intMode]; str2 = "      " + String(intParam) ; str3 =  " dB";
    4b74:	f016 fa74 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    4b78:	490c      	ldr	r1, [pc, #48]	; (4bac <ParseSetParameter(String, int)+0x36c>)
    4b7a:	a80f      	add	r0, sp, #60	; 0x3c
    4b7c:	f016 f9aa 	bl	1aed4 <String::String(char const*)>
    4b80:	4629      	mov	r1, r5
    4b82:	e7cc      	b.n	4b1e <ParseSetParameter(String, int)+0x2de>
    4b84:	f3af 8000 	nop.w
    4b88:	d2f1a9fc 	.word	0xd2f1a9fc
    4b8c:	3f50624d 	.word	0x3f50624d
    4b90:	47ae147b 	.word	0x47ae147b
    4b94:	3f847ae1 	.word	0x3f847ae1
    4b98:	20009a48 	.word	0x20009a48
    4b9c:	200038a0 	.word	0x200038a0
    4ba0:	00000000 	.word	0x00000000
    4ba4:	20009a24 	.word	0x20009a24
    4ba8:	200034d8 	.word	0x200034d8
    4bac:	200034d0 	.word	0x200034d0
    4bb0:	200034ec 	.word	0x200034ec
    4bb4:	200039f8 	.word	0x200039f8
    4bb8:	20012cbc 	.word	0x20012cbc
    4bbc:	200034f0 	.word	0x200034f0
    4bc0:	20009a10 	.word	0x20009a10
    4bc4:	2000352c 	.word	0x2000352c
    4bc8:	20003504 	.word	0x20003504
    4bcc:	42c80000 	.word	0x42c80000
    4bd0:	200038c0 	.word	0x200038c0
    4bd4:	20009a58 	.word	0x20009a58
    4bd8:	200034ac 	.word	0x200034ac
    4bdc:	200034b8 	.word	0x200034b8
    4be0:	20009a28 	.word	0x20009a28
    4be4:	20003518 	.word	0x20003518
    4be8:	20012cac 	.word	0x20012cac
    4bec:	200034bc 	.word	0x200034bc
      str1 = chrModes[intMode]; str2 = "      " + String(intParam) ; str3 =  "";
    4bf0:	4b10      	ldr	r3, [pc, #64]	; (4c34 <ParseSetParameter(String, int)+0x3f4>)
    4bf2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
      intGainLevel[intMode - 11] = intParam;//Serial.print("Line 795: intParam= ");Serial.println(intParam);
    4bf6:	4b10      	ldr	r3, [pc, #64]	; (4c38 <ParseSetParameter(String, int)+0x3f8>)
    4bf8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
      str1 = chrModes[intMode]; str2 = "      " + String(intParam) ; str3 =  "";
    4bfc:	4668      	mov	r0, sp
    4bfe:	f016 fa2f 	bl	1b060 <String::operator=(char const*)>
    4c02:	490e      	ldr	r1, [pc, #56]	; (4c3c <ParseSetParameter(String, int)+0x3fc>)
    4c04:	a80f      	add	r0, sp, #60	; 0x3c
    4c06:	f016 f965 	bl	1aed4 <String::String(char const*)>
    4c0a:	220a      	movs	r2, #10
    4c0c:	4629      	mov	r1, r5
    4c0e:	a80c      	add	r0, sp, #48	; 0x30
    4c10:	f016 f9d6 	bl	1afc0 <String::String(int, unsigned char)>
    4c14:	a90c      	add	r1, sp, #48	; 0x30
    4c16:	a80f      	add	r0, sp, #60	; 0x3c
    4c18:	f016 fa84 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4c1c:	4601      	mov	r1, r0
    4c1e:	a803      	add	r0, sp, #12
    4c20:	f016 fa00 	bl	1b024 <String::operator=(String const&)>
    4c24:	a80c      	add	r0, sp, #48	; 0x30
    4c26:	f016 f98f 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    4c2a:	a80f      	add	r0, sp, #60	; 0x3c
    4c2c:	f016 f98c 	bl	1af48 <String::~String()>
    4c30:	4903      	ldr	r1, [pc, #12]	; (4c40 <ParseSetParameter(String, int)+0x400>)
    4c32:	e787      	b.n	4b44 <ParseSetParameter(String, int)+0x304>
    4c34:	200038c0 	.word	0x200038c0
    4c38:	20009a30 	.word	0x20009a30
    4c3c:	200034d0 	.word	0x200034d0
    4c40:	200039f8 	.word	0x200039f8

00004c44 <ParseSetBusyParameter(String, int)>:
{
    4c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c46:	ed2d 8b02 	vpush	{d8}
    4c4a:	b093      	sub	sp, #76	; 0x4c
    4c4c:	460c      	mov	r4, r1
    4c4e:	4605      	mov	r5, r0
  int intParam = strParameter.toInt(); String str1; String str2; String str3; 
    4c50:	f016 fae8 	bl	1b224 <String::toInt() const>
    4c54:	2100      	movs	r1, #0
    4c56:	4606      	mov	r6, r0
    4c58:	4668      	mov	r0, sp
    4c5a:	f016 f93b 	bl	1aed4 <String::String(char const*)>
    4c5e:	2100      	movs	r1, #0
    4c60:	a803      	add	r0, sp, #12
    4c62:	f016 f937 	bl	1aed4 <String::String(char const*)>
    4c66:	2100      	movs	r1, #0
    4c68:	a806      	add	r0, sp, #24
    4c6a:	f016 f933 	bl	1aed4 <String::String(char const*)>
  if (intMode == 0)//ENB BUSY
    4c6e:	b1ec      	cbz	r4, 4cac <ParseSetBusyParameter(String, int)+0x68>
  if (intMode == 1)//DIS BUSY
    4c70:	2c01      	cmp	r4, #1
    4c72:	d060      	beq.n	4d36 <ParseSetBusyParameter(String, int)+0xf2>
  if (intMode == 2)//LOW FREQ
    4c74:	2c02      	cmp	r4, #2
    4c76:	f000 80d1 	beq.w	4e1c <ParseSetBusyParameter(String, int)+0x1d8>
  if (intMode == 3)//HIGH FREQ
    4c7a:	2c03      	cmp	r4, #3
    4c7c:	f040 811e 	bne.w	4ebc <ParseSetBusyParameter(String, int)+0x278>
    if (( intParam >= 500) && (intParam <= 6000) && (intParam > (intSpecLow + 259)))
    4c80:	f5a6 72fa 	sub.w	r2, r6, #500	; 0x1f4
    4c84:	f241 537c 	movw	r3, #5500	; 0x157c
    4c88:	429a      	cmp	r2, r3
    4c8a:	f240 8083 	bls.w	4d94 <ParseSetBusyParameter(String, int)+0x150>
  return false;
    4c8e:	2400      	movs	r4, #0
}// End ParseSetBusyParameter *******************************************************************
    4c90:	a806      	add	r0, sp, #24
    4c92:	f016 f959 	bl	1af48 <String::~String()>
    4c96:	a803      	add	r0, sp, #12
    4c98:	f016 f956 	bl	1af48 <String::~String()>
    4c9c:	4668      	mov	r0, sp
    4c9e:	f016 f953 	bl	1af48 <String::~String()>
    4ca2:	4620      	mov	r0, r4
    4ca4:	b013      	add	sp, #76	; 0x4c
    4ca6:	ecbd 8b02 	vpop	{d8}
    4caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    intParam = strParameter.toInt();
    4cac:	4628      	mov	r0, r5
    4cae:	f016 fab9 	bl	1b224 <String::toInt() const>
    if ((1 <= intParam) && (intParam <= 50))
    4cb2:	1e43      	subs	r3, r0, #1
    4cb4:	2b31      	cmp	r3, #49	; 0x31
    4cb6:	d8ea      	bhi.n	4c8e <ParseSetBusyParameter(String, int)+0x4a>
      intAvg = intParam;
    4cb8:	4ca4      	ldr	r4, [pc, #656]	; (4f4c <ParseSetBusyParameter(String, int)+0x308>)
      str1 = chrBusyModes[intMode];  str2 = "    AVG= " + String(intAvg); str3 = "";
    4cba:	49a5      	ldr	r1, [pc, #660]	; (4f50 <ParseSetBusyParameter(String, int)+0x30c>)
      intAvg = intParam;
    4cbc:	6020      	str	r0, [r4, #0]
      str1 = chrBusyModes[intMode];  str2 = "    AVG= " + String(intAvg); str3 = "";
    4cbe:	4668      	mov	r0, sp
    4cc0:	f016 f9ce 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    4cc4:	49a3      	ldr	r1, [pc, #652]	; (4f54 <ParseSetBusyParameter(String, int)+0x310>)
    4cc6:	a80f      	add	r0, sp, #60	; 0x3c
    4cc8:	f016 f904 	bl	1aed4 <String::String(char const*)>
    4ccc:	220a      	movs	r2, #10
    4cce:	6821      	ldr	r1, [r4, #0]
    4cd0:	a80c      	add	r0, sp, #48	; 0x30
    4cd2:	f016 f975 	bl	1afc0 <String::String(int, unsigned char)>
    4cd6:	a90c      	add	r1, sp, #48	; 0x30
    4cd8:	a80f      	add	r0, sp, #60	; 0x3c
      blnEnbBusyDetect = true;
    4cda:	2401      	movs	r4, #1
      str1 = chrBusyModes[intMode];  str2 = "    AVG= " + String(intAvg); str3 = "";
    4cdc:	f016 fa22 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4ce0:	4601      	mov	r1, r0
    4ce2:	a803      	add	r0, sp, #12
    4ce4:	f016 f99e 	bl	1b024 <String::operator=(String const&)>
    4ce8:	a80c      	add	r0, sp, #48	; 0x30
    4cea:	f016 f92d 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    4cee:	a80f      	add	r0, sp, #60	; 0x3c
    4cf0:	f016 f92a 	bl	1af48 <String::~String()>
    4cf4:	4998      	ldr	r1, [pc, #608]	; (4f58 <ParseSetBusyParameter(String, int)+0x314>)
    4cf6:	a806      	add	r0, sp, #24
    4cf8:	f016 f9b2 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    4cfc:	4669      	mov	r1, sp
    4cfe:	a809      	add	r0, sp, #36	; 0x24
    4d00:	f016 f906 	bl	1af10 <String::String(String const&)>
    4d04:	a903      	add	r1, sp, #12
    4d06:	a80c      	add	r0, sp, #48	; 0x30
    4d08:	f016 f902 	bl	1af10 <String::String(String const&)>
    4d0c:	a906      	add	r1, sp, #24
    4d0e:	a80f      	add	r0, sp, #60	; 0x3c
    4d10:	f016 f8fe 	bl	1af10 <String::String(String const&)>
    4d14:	aa0f      	add	r2, sp, #60	; 0x3c
    4d16:	a90c      	add	r1, sp, #48	; 0x30
    4d18:	a809      	add	r0, sp, #36	; 0x24
    4d1a:	f7ff fd4f 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    4d1e:	a80f      	add	r0, sp, #60	; 0x3c
    4d20:	f016 f912 	bl	1af48 <String::~String()>
    4d24:	a80c      	add	r0, sp, #48	; 0x30
    4d26:	f016 f90f 	bl	1af48 <String::~String()>
    4d2a:	a809      	add	r0, sp, #36	; 0x24
    4d2c:	f016 f90c 	bl	1af48 <String::~String()>
      blnEnbBusyDetect = true;
    4d30:	4b8a      	ldr	r3, [pc, #552]	; (4f5c <ParseSetBusyParameter(String, int)+0x318>)
    4d32:	701c      	strb	r4, [r3, #0]
      return true;
    4d34:	e7ac      	b.n	4c90 <ParseSetBusyParameter(String, int)+0x4c>
    intParam = strParameter.toInt();
    4d36:	4628      	mov	r0, r5
    4d38:	f016 fa74 	bl	1b224 <String::toInt() const>
    if ( intParam == 0)
    4d3c:	4605      	mov	r5, r0
    4d3e:	2800      	cmp	r0, #0
    4d40:	d1a5      	bne.n	4c8e <ParseSetBusyParameter(String, int)+0x4a>
      str1 = chrBusyModes[intMode];  str2 = ""; str3 = "";
    4d42:	4987      	ldr	r1, [pc, #540]	; (4f60 <ParseSetBusyParameter(String, int)+0x31c>)
    4d44:	4668      	mov	r0, sp
    4d46:	f016 f98b 	bl	1b060 <String::operator=(char const*)>
    4d4a:	4983      	ldr	r1, [pc, #524]	; (4f58 <ParseSetBusyParameter(String, int)+0x314>)
    4d4c:	a803      	add	r0, sp, #12
    4d4e:	f016 f987 	bl	1b060 <String::operator=(char const*)>
    4d52:	4981      	ldr	r1, [pc, #516]	; (4f58 <ParseSetBusyParameter(String, int)+0x314>)
    4d54:	a806      	add	r0, sp, #24
    4d56:	f016 f983 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    4d5a:	4669      	mov	r1, sp
    4d5c:	a809      	add	r0, sp, #36	; 0x24
    4d5e:	f016 f8d7 	bl	1af10 <String::String(String const&)>
    4d62:	a903      	add	r1, sp, #12
    4d64:	a80c      	add	r0, sp, #48	; 0x30
    4d66:	f016 f8d3 	bl	1af10 <String::String(String const&)>
    4d6a:	a906      	add	r1, sp, #24
    4d6c:	a80f      	add	r0, sp, #60	; 0x3c
    4d6e:	f016 f8cf 	bl	1af10 <String::String(String const&)>
    4d72:	aa0f      	add	r2, sp, #60	; 0x3c
    4d74:	a90c      	add	r1, sp, #48	; 0x30
    4d76:	a809      	add	r0, sp, #36	; 0x24
    4d78:	f7ff fd20 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    4d7c:	a80f      	add	r0, sp, #60	; 0x3c
    4d7e:	f016 f8e3 	bl	1af48 <String::~String()>
    4d82:	a80c      	add	r0, sp, #48	; 0x30
    4d84:	f016 f8e0 	bl	1af48 <String::~String()>
    4d88:	a809      	add	r0, sp, #36	; 0x24
    4d8a:	f016 f8dd 	bl	1af48 <String::~String()>
      blnEnbBusyDetect = false;
    4d8e:	4b73      	ldr	r3, [pc, #460]	; (4f5c <ParseSetBusyParameter(String, int)+0x318>)
    4d90:	701d      	strb	r5, [r3, #0]
      return true;
    4d92:	e77d      	b.n	4c90 <ParseSetBusyParameter(String, int)+0x4c>
    if (( intParam >= 500) && (intParam <= 6000) && (intParam > (intSpecLow + 259)))
    4d94:	4b73      	ldr	r3, [pc, #460]	; (4f64 <ParseSetBusyParameter(String, int)+0x320>)
    4d96:	681b      	ldr	r3, [r3, #0]
    4d98:	f203 1303 	addw	r3, r3, #259	; 0x103
    4d9c:	42b3      	cmp	r3, r6
    4d9e:	f6bf af76 	bge.w	4c8e <ParseSetBusyParameter(String, int)+0x4a>
      str1 = chrBusyModes[intMode];  str2 = "    " + String(intParam); str3 = " Hz";
    4da2:	4971      	ldr	r1, [pc, #452]	; (4f68 <ParseSetBusyParameter(String, int)+0x324>)
    4da4:	4668      	mov	r0, sp
    4da6:	f016 f95b 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    4daa:	4970      	ldr	r1, [pc, #448]	; (4f6c <ParseSetBusyParameter(String, int)+0x328>)
    4dac:	a80f      	add	r0, sp, #60	; 0x3c
      intBusyBWHiHz = intParam; ; return true;
    4dae:	2401      	movs	r4, #1
    4db0:	f016 f890 	bl	1aed4 <String::String(char const*)>
      str1 = chrBusyModes[intMode];  str2 = "    " + String(intParam); str3 = " Hz";
    4db4:	220a      	movs	r2, #10
    4db6:	4631      	mov	r1, r6
    4db8:	a80c      	add	r0, sp, #48	; 0x30
    4dba:	f016 f901 	bl	1afc0 <String::String(int, unsigned char)>
    4dbe:	a90c      	add	r1, sp, #48	; 0x30
    4dc0:	a80f      	add	r0, sp, #60	; 0x3c
    4dc2:	f016 f9af 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4dc6:	4601      	mov	r1, r0
    4dc8:	a803      	add	r0, sp, #12
    4dca:	f016 f92b 	bl	1b024 <String::operator=(String const&)>
    4dce:	a80c      	add	r0, sp, #48	; 0x30
    4dd0:	f016 f8ba 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    4dd4:	a80f      	add	r0, sp, #60	; 0x3c
    4dd6:	f016 f8b7 	bl	1af48 <String::~String()>
    4dda:	4965      	ldr	r1, [pc, #404]	; (4f70 <ParseSetBusyParameter(String, int)+0x32c>)
    4ddc:	a806      	add	r0, sp, #24
    4dde:	f016 f93f 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    4de2:	4669      	mov	r1, sp
    4de4:	a809      	add	r0, sp, #36	; 0x24
    4de6:	f016 f893 	bl	1af10 <String::String(String const&)>
    4dea:	a903      	add	r1, sp, #12
    4dec:	a80c      	add	r0, sp, #48	; 0x30
    4dee:	f016 f88f 	bl	1af10 <String::String(String const&)>
    4df2:	a906      	add	r1, sp, #24
    4df4:	a80f      	add	r0, sp, #60	; 0x3c
    4df6:	f016 f88b 	bl	1af10 <String::String(String const&)>
    4dfa:	aa0f      	add	r2, sp, #60	; 0x3c
    4dfc:	a90c      	add	r1, sp, #48	; 0x30
    4dfe:	a809      	add	r0, sp, #36	; 0x24
    4e00:	f7ff fcdc 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    4e04:	a80f      	add	r0, sp, #60	; 0x3c
    4e06:	f016 f89f 	bl	1af48 <String::~String()>
    4e0a:	a80c      	add	r0, sp, #48	; 0x30
    4e0c:	f016 f89c 	bl	1af48 <String::~String()>
    4e10:	a809      	add	r0, sp, #36	; 0x24
    4e12:	f016 f899 	bl	1af48 <String::~String()>
      intBusyBWHiHz = intParam; ; return true;
    4e16:	4b57      	ldr	r3, [pc, #348]	; (4f74 <ParseSetBusyParameter(String, int)+0x330>)
    4e18:	601e      	str	r6, [r3, #0]
    4e1a:	e739      	b.n	4c90 <ParseSetBusyParameter(String, int)+0x4c>
    intParam = strParameter.toInt();
    4e1c:	4628      	mov	r0, r5
    4e1e:	f016 fa01 	bl	1b224 <String::toInt() const>
    if (( intParam >= 43) && (intParam <= 5000) && (intParam < (intSpecHigh - 259)))
    4e22:	f241 335d 	movw	r3, #4957	; 0x135d
    4e26:	f1a0 022b 	sub.w	r2, r0, #43	; 0x2b
    intParam = strParameter.toInt();
    4e2a:	4604      	mov	r4, r0
    if (( intParam >= 43) && (intParam <= 5000) && (intParam < (intSpecHigh - 259)))
    4e2c:	429a      	cmp	r2, r3
    4e2e:	f63f af2e 	bhi.w	4c8e <ParseSetBusyParameter(String, int)+0x4a>
    4e32:	4b51      	ldr	r3, [pc, #324]	; (4f78 <ParseSetBusyParameter(String, int)+0x334>)
    4e34:	f46f 7081 	mvn.w	r0, #258	; 0x102
    4e38:	681b      	ldr	r3, [r3, #0]
    4e3a:	4403      	add	r3, r0
    4e3c:	42a3      	cmp	r3, r4
    4e3e:	f77f af26 	ble.w	4c8e <ParseSetBusyParameter(String, int)+0x4a>
      str1 = chrBusyModes[intMode];  str2 = "    " + String(intParam); str3 = " Hz";
    4e42:	494e      	ldr	r1, [pc, #312]	; (4f7c <ParseSetBusyParameter(String, int)+0x338>)
    4e44:	4668      	mov	r0, sp
    4e46:	f016 f90b 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    4e4a:	4948      	ldr	r1, [pc, #288]	; (4f6c <ParseSetBusyParameter(String, int)+0x328>)
    4e4c:	a80f      	add	r0, sp, #60	; 0x3c
    4e4e:	f016 f841 	bl	1aed4 <String::String(char const*)>
    4e52:	220a      	movs	r2, #10
    4e54:	4621      	mov	r1, r4
    4e56:	a80c      	add	r0, sp, #48	; 0x30
    4e58:	f016 f8b2 	bl	1afc0 <String::String(int, unsigned char)>
    4e5c:	a90c      	add	r1, sp, #48	; 0x30
    4e5e:	a80f      	add	r0, sp, #60	; 0x3c
    4e60:	f016 f960 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4e64:	4601      	mov	r1, r0
    4e66:	a803      	add	r0, sp, #12
    4e68:	f016 f8dc 	bl	1b024 <String::operator=(String const&)>
    4e6c:	a80c      	add	r0, sp, #48	; 0x30
    4e6e:	f016 f86b 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    4e72:	a80f      	add	r0, sp, #60	; 0x3c
    4e74:	f016 f868 	bl	1af48 <String::~String()>
    4e78:	493d      	ldr	r1, [pc, #244]	; (4f70 <ParseSetBusyParameter(String, int)+0x32c>)
    4e7a:	a806      	add	r0, sp, #24
    4e7c:	f016 f8f0 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    4e80:	4669      	mov	r1, sp
    4e82:	a809      	add	r0, sp, #36	; 0x24
    4e84:	f016 f844 	bl	1af10 <String::String(String const&)>
    4e88:	a903      	add	r1, sp, #12
    4e8a:	a80c      	add	r0, sp, #48	; 0x30
    4e8c:	f016 f840 	bl	1af10 <String::String(String const&)>
    4e90:	a906      	add	r1, sp, #24
    4e92:	a80f      	add	r0, sp, #60	; 0x3c
    4e94:	f016 f83c 	bl	1af10 <String::String(String const&)>
    4e98:	aa0f      	add	r2, sp, #60	; 0x3c
    4e9a:	a90c      	add	r1, sp, #48	; 0x30
    4e9c:	a809      	add	r0, sp, #36	; 0x24
    4e9e:	f7ff fc8d 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    4ea2:	a80f      	add	r0, sp, #60	; 0x3c
    4ea4:	f016 f850 	bl	1af48 <String::~String()>
    4ea8:	a80c      	add	r0, sp, #48	; 0x30
    4eaa:	f016 f84d 	bl	1af48 <String::~String()>
    4eae:	a809      	add	r0, sp, #36	; 0x24
    4eb0:	f016 f84a 	bl	1af48 <String::~String()>
      intBusyBWLoHz = intParam; ; return true;
    4eb4:	4b32      	ldr	r3, [pc, #200]	; (4f80 <ParseSetBusyParameter(String, int)+0x33c>)
    4eb6:	601c      	str	r4, [r3, #0]
    4eb8:	2401      	movs	r4, #1
    4eba:	e6e9      	b.n	4c90 <ParseSetBusyParameter(String, int)+0x4c>
  if (intMode == 4)//THRES (dB)
    4ebc:	2c04      	cmp	r4, #4
    4ebe:	d167      	bne.n	4f90 <ParseSetBusyParameter(String, int)+0x34c>
    intParam = strParameter.toInt();
    4ec0:	4628      	mov	r0, r5
    4ec2:	f016 f9af 	bl	1b224 <String::toInt() const>
    if (( intParam >= 3) && (intParam <= 40))
    4ec6:	1ec3      	subs	r3, r0, #3
    intParam = strParameter.toInt();
    4ec8:	4604      	mov	r4, r0
    if (( intParam >= 3) && (intParam <= 40))
    4eca:	2b25      	cmp	r3, #37	; 0x25
    4ecc:	f63f aedf 	bhi.w	4c8e <ParseSetBusyParameter(String, int)+0x4a>
      str1 = chrBusyModes[intMode];  str2 = "    " + String(intParam); str3 = " dB";
    4ed0:	492c      	ldr	r1, [pc, #176]	; (4f84 <ParseSetBusyParameter(String, int)+0x340>)
    4ed2:	4668      	mov	r0, sp
    4ed4:	f016 f8c4 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    4ed8:	4924      	ldr	r1, [pc, #144]	; (4f6c <ParseSetBusyParameter(String, int)+0x328>)
    4eda:	a80f      	add	r0, sp, #60	; 0x3c
    4edc:	f015 fffa 	bl	1aed4 <String::String(char const*)>
    4ee0:	220a      	movs	r2, #10
    4ee2:	4621      	mov	r1, r4
    4ee4:	a80c      	add	r0, sp, #48	; 0x30
    4ee6:	f016 f86b 	bl	1afc0 <String::String(int, unsigned char)>
    4eea:	a90c      	add	r1, sp, #48	; 0x30
    4eec:	a80f      	add	r0, sp, #60	; 0x3c
    4eee:	f016 f919 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4ef2:	4601      	mov	r1, r0
    4ef4:	a803      	add	r0, sp, #12
    4ef6:	f016 f895 	bl	1b024 <String::operator=(String const&)>
    4efa:	a80c      	add	r0, sp, #48	; 0x30
    4efc:	f016 f824 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    4f00:	a80f      	add	r0, sp, #60	; 0x3c
    4f02:	f016 f821 	bl	1af48 <String::~String()>
    4f06:	4920      	ldr	r1, [pc, #128]	; (4f88 <ParseSetBusyParameter(String, int)+0x344>)
    4f08:	a806      	add	r0, sp, #24
    4f0a:	f016 f8a9 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    4f0e:	4669      	mov	r1, sp
    4f10:	a809      	add	r0, sp, #36	; 0x24
    4f12:	f015 fffd 	bl	1af10 <String::String(String const&)>
    4f16:	a903      	add	r1, sp, #12
    4f18:	a80c      	add	r0, sp, #48	; 0x30
    4f1a:	f015 fff9 	bl	1af10 <String::String(String const&)>
    4f1e:	a906      	add	r1, sp, #24
    4f20:	a80f      	add	r0, sp, #60	; 0x3c
    4f22:	f015 fff5 	bl	1af10 <String::String(String const&)>
    4f26:	aa0f      	add	r2, sp, #60	; 0x3c
    4f28:	a90c      	add	r1, sp, #48	; 0x30
    4f2a:	a809      	add	r0, sp, #36	; 0x24
    4f2c:	f7ff fc46 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    4f30:	a80f      	add	r0, sp, #60	; 0x3c
    4f32:	f016 f809 	bl	1af48 <String::~String()>
    4f36:	a80c      	add	r0, sp, #48	; 0x30
    4f38:	f016 f806 	bl	1af48 <String::~String()>
    4f3c:	a809      	add	r0, sp, #36	; 0x24
    4f3e:	f016 f803 	bl	1af48 <String::~String()>
      intThresh = intParam;
    4f42:	4b12      	ldr	r3, [pc, #72]	; (4f8c <ParseSetBusyParameter(String, int)+0x348>)
    4f44:	601c      	str	r4, [r3, #0]
      return true;
    4f46:	2401      	movs	r4, #1
    4f48:	e6a2      	b.n	4c90 <ParseSetBusyParameter(String, int)+0x4c>
    4f4a:	bf00      	nop
    4f4c:	20009a0c 	.word	0x20009a0c
    4f50:	20003540 	.word	0x20003540
    4f54:	20003554 	.word	0x20003554
    4f58:	200039f8 	.word	0x200039f8
    4f5c:	200136e6 	.word	0x200136e6
    4f60:	20003560 	.word	0x20003560
    4f64:	20012cb8 	.word	0x20012cb8
    4f68:	20003588 	.word	0x20003588
    4f6c:	20005700 	.word	0x20005700
    4f70:	200034ec 	.word	0x200034ec
    4f74:	20009a18 	.word	0x20009a18
    4f78:	20009a54 	.word	0x20009a54
    4f7c:	20003574 	.word	0x20003574
    4f80:	20012c90 	.word	0x20012c90
    4f84:	2000359c 	.word	0x2000359c
    4f88:	200034b8 	.word	0x200034b8
    4f8c:	20009a60 	.word	0x20009a60
  if (intMode == 5)//TONE ON (Hz)
    4f90:	2c05      	cmp	r4, #5
    4f92:	d16c      	bne.n	506e <ParseSetBusyParameter(String, int)+0x42a>
    intParam = strParameter.toInt();
    4f94:	4628      	mov	r0, r5
    4f96:	f016 f945 	bl	1b224 <String::toInt() const>
    if (( intParam >= 43) && (intParam <= 6300))
    4f9a:	f641 0371 	movw	r3, #6257	; 0x1871
    4f9e:	f1a0 022b 	sub.w	r2, r0, #43	; 0x2b
    intParam = strParameter.toInt();
    4fa2:	4604      	mov	r4, r0
    if (( intParam >= 43) && (intParam <= 6300))
    4fa4:	429a      	cmp	r2, r3
    4fa6:	f63f ae72 	bhi.w	4c8e <ParseSetBusyParameter(String, int)+0x4a>
      str1 = chrBusyModes[intMode];  str2 = "    " + String(intParam); str3 = " Hz";
    4faa:	49a5      	ldr	r1, [pc, #660]	; (5240 <ParseSetBusyParameter(String, int)+0x5fc>)
    4fac:	4668      	mov	r0, sp
    4fae:	f016 f857 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    4fb2:	49a4      	ldr	r1, [pc, #656]	; (5244 <ParseSetBusyParameter(String, int)+0x600>)
    4fb4:	a80f      	add	r0, sp, #60	; 0x3c
    4fb6:	f015 ff8d 	bl	1aed4 <String::String(char const*)>
    4fba:	220a      	movs	r2, #10
    4fbc:	4621      	mov	r1, r4
    4fbe:	a80c      	add	r0, sp, #48	; 0x30
    4fc0:	f015 fffe 	bl	1afc0 <String::String(int, unsigned char)>
    4fc4:	a90c      	add	r1, sp, #48	; 0x30
    4fc6:	a80f      	add	r0, sp, #60	; 0x3c
    4fc8:	f016 f8ac 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    4fcc:	4601      	mov	r1, r0
    4fce:	a803      	add	r0, sp, #12
    4fd0:	f016 f828 	bl	1b024 <String::operator=(String const&)>
    4fd4:	a80c      	add	r0, sp, #48	; 0x30
    4fd6:	f015 ffb7 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    4fda:	a80f      	add	r0, sp, #60	; 0x3c
    4fdc:	f015 ffb4 	bl	1af48 <String::~String()>
    4fe0:	4999      	ldr	r1, [pc, #612]	; (5248 <ParseSetBusyParameter(String, int)+0x604>)
    4fe2:	a806      	add	r0, sp, #24
    4fe4:	f016 f83c 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    4fe8:	4669      	mov	r1, sp
    4fea:	a809      	add	r0, sp, #36	; 0x24
    4fec:	f015 ff90 	bl	1af10 <String::String(String const&)>
    4ff0:	a903      	add	r1, sp, #12
    4ff2:	a80c      	add	r0, sp, #48	; 0x30
    4ff4:	f015 ff8c 	bl	1af10 <String::String(String const&)>
    4ff8:	a906      	add	r1, sp, #24
    4ffa:	a80f      	add	r0, sp, #60	; 0x3c
    4ffc:	f015 ff88 	bl	1af10 <String::String(String const&)>
    5000:	aa0f      	add	r2, sp, #60	; 0x3c
    5002:	a90c      	add	r1, sp, #48	; 0x30
    5004:	a809      	add	r0, sp, #36	; 0x24
    5006:	f7ff fbd9 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    500a:	a80f      	add	r0, sp, #60	; 0x3c
    500c:	f015 ff9c 	bl	1af48 <String::~String()>
    5010:	a80c      	add	r0, sp, #48	; 0x30
    5012:	f015 ff99 	bl	1af48 <String::~String()>
    5016:	a809      	add	r0, sp, #36	; 0x24
    5018:	f015 ff96 	bl	1af48 <String::~String()>
      InputTestWaveform.frequency (intParam); InputTestWaveform.amplitude(.251880522);
    501c:	ee07 4a90 	vmov	s15, r4
    5020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if (freq < 0.0f) freq = 0.0;
    5024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    502c:	f100 81bf 	bmi.w	53ae <ParseSetBusyParameter(String, int)+0x76a>
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.0f) freq = AUDIO_SAMPLE_RATE_EXACT/2.0f;
    5030:	ed9f 7a86 	vldr	s14, [pc, #536]	; 524c <ParseSetBusyParameter(String, int)+0x608>
    5034:	eef4 7ac7 	vcmpe.f32	s15, s14
    5038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    503c:	f300 81b9 	bgt.w	53b2 <ParseSetBusyParameter(String, int)+0x76e>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    5040:	ed9f 7a83 	vldr	s14, [pc, #524]	; 5250 <ParseSetBusyParameter(String, int)+0x60c>
    5044:	ee67 7a87 	vmul.f32	s15, s15, s14
    5048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    504c:	ee17 3a90 	vmov	r3, s15
    5050:	4a80      	ldr	r2, [pc, #512]	; (5254 <ParseSetBusyParameter(String, int)+0x610>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    5052:	f44f 3100 	mov.w	r1, #131072	; 0x20000
      return true;
    5056:	2401      	movs	r4, #1
    5058:	61d3      	str	r3, [r2, #28]
		magnitude = n * 65536.0f;
    505a:	f244 037b 	movw	r3, #16507	; 0x407b
    505e:	6213      	str	r3, [r2, #32]
    5060:	2200      	movs	r2, #0
    5062:	4b7d      	ldr	r3, [pc, #500]	; (5258 <ParseSetBusyParameter(String, int)+0x614>)
    5064:	e9c3 1206 	strd	r1, r2, [r3, #24]
    5068:	e9c3 2208 	strd	r2, r2, [r3, #32]
    506c:	e610      	b.n	4c90 <ParseSetBusyParameter(String, int)+0x4c>
  if (intMode == 6)//TONE OFF (Hz)
    506e:	2c06      	cmp	r4, #6
    5070:	d151      	bne.n	5116 <ParseSetBusyParameter(String, int)+0x4d2>
    intParam = strParameter.toInt();
    5072:	4628      	mov	r0, r5
    5074:	f016 f8d6 	bl	1b224 <String::toInt() const>
    if ( intParam == 0)
    5078:	4604      	mov	r4, r0
    507a:	2800      	cmp	r0, #0
    507c:	f47f ae07 	bne.w	4c8e <ParseSetBusyParameter(String, int)+0x4a>
      str1 = chrBusyModes[intMode];  str2 = ""; str3 = "";
    5080:	4976      	ldr	r1, [pc, #472]	; (525c <ParseSetBusyParameter(String, int)+0x618>)
    5082:	4668      	mov	r0, sp
    5084:	f015 ffec 	bl	1b060 <String::operator=(char const*)>
    5088:	4975      	ldr	r1, [pc, #468]	; (5260 <ParseSetBusyParameter(String, int)+0x61c>)
    508a:	a803      	add	r0, sp, #12
    508c:	f015 ffe8 	bl	1b060 <String::operator=(char const*)>
    5090:	4973      	ldr	r1, [pc, #460]	; (5260 <ParseSetBusyParameter(String, int)+0x61c>)
    5092:	a806      	add	r0, sp, #24
    5094:	f015 ffe4 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    5098:	4669      	mov	r1, sp
    509a:	a809      	add	r0, sp, #36	; 0x24
    509c:	f015 ff38 	bl	1af10 <String::String(String const&)>
    50a0:	a903      	add	r1, sp, #12
    50a2:	a80c      	add	r0, sp, #48	; 0x30
    50a4:	f015 ff34 	bl	1af10 <String::String(String const&)>
    50a8:	a906      	add	r1, sp, #24
    50aa:	a80f      	add	r0, sp, #60	; 0x3c
    50ac:	f015 ff30 	bl	1af10 <String::String(String const&)>
    50b0:	aa0f      	add	r2, sp, #60	; 0x3c
    50b2:	a90c      	add	r1, sp, #48	; 0x30
    50b4:	a809      	add	r0, sp, #36	; 0x24
    50b6:	f7ff fb81 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    50ba:	a80f      	add	r0, sp, #60	; 0x3c
    50bc:	f015 ff44 	bl	1af48 <String::~String()>
    50c0:	a80c      	add	r0, sp, #48	; 0x30
    50c2:	f015 ff41 	bl	1af48 <String::~String()>
    50c6:	a809      	add	r0, sp, #36	; 0x24
    50c8:	f015 ff3e 	bl	1af48 <String::~String()>
      mixInpSel.gain(0, 0); mixInpSel.gain(1, 0); mixInpSel.gain(2, fltLogs[intGainLevel[0]]); mixInpSel.gain(3, 0);
    50cc:	4965      	ldr	r1, [pc, #404]	; (5264 <ParseSetBusyParameter(String, int)+0x620>)
    50ce:	4a66      	ldr	r2, [pc, #408]	; (5268 <ParseSetBusyParameter(String, int)+0x624>)
    50d0:	6809      	ldr	r1, [r1, #0]
		if (gain > 32767.0f) gain = 32767.0f;
    50d2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 526c <ParseSetBusyParameter(String, int)+0x628>
    50d6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    50da:	4b5f      	ldr	r3, [pc, #380]	; (5258 <ParseSetBusyParameter(String, int)+0x614>)
    50dc:	edd2 7a00 	vldr	s15, [r2]
		if (gain > 32767.0f) gain = 32767.0f;
    50e0:	eef4 7ac7 	vcmpe.f32	s15, s14
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    50e4:	e9c3 4406 	strd	r4, r4, [r3, #24]
		if (gain > 32767.0f) gain = 32767.0f;
    50e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50ec:	f300 815b 	bgt.w	53a6 <ParseSetBusyParameter(String, int)+0x762>
		else if (gain < -32767.0f) gain = -32767.0f;
    50f0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 5270 <ParseSetBusyParameter(String, int)+0x62c>
    50f4:	eef4 7ac7 	vcmpe.f32	s15, s14
    50f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50fc:	f100 8155 	bmi.w	53aa <ParseSetBusyParameter(String, int)+0x766>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    5100:	eeb0 7a67 	vmov.f32	s14, s15
    5104:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    5108:	ee17 2a10 	vmov	r2, s14
    510c:	621a      	str	r2, [r3, #32]
    510e:	2200      	movs	r2, #0
      return true;
    5110:	2401      	movs	r4, #1
    5112:	625a      	str	r2, [r3, #36]	; 0x24
    5114:	e5bc      	b.n	4c90 <ParseSetBusyParameter(String, int)+0x4c>
  if (intMode == 7)//CH1 IN
    5116:	2c07      	cmp	r4, #7
    5118:	f000 80b8 	beq.w	528c <ParseSetBusyParameter(String, int)+0x648>
  if (intMode == 8)//BANDWIDTH: 3000/6000
    511c:	2c08      	cmp	r4, #8
    511e:	d155      	bne.n	51cc <ParseSetBusyParameter(String, int)+0x588>
    if ( (intParam == 3000) || (intParam == 6000) )
    5120:	f640 36b8 	movw	r6, #3000	; 0xbb8
    5124:	f241 7770 	movw	r7, #6000	; 0x1770
    intParam = strParameter.toInt();
    5128:	4628      	mov	r0, r5
    512a:	f016 f87b 	bl	1b224 <String::toInt() const>
    if ( (intParam == 3000) || (intParam == 6000) )
    512e:	42b8      	cmp	r0, r7
    5130:	bf18      	it	ne
    5132:	42b0      	cmpne	r0, r6
    intParam = strParameter.toInt();
    5134:	4605      	mov	r5, r0
    if ( (intParam == 3000) || (intParam == 6000) )
    5136:	bf0c      	ite	eq
    5138:	2401      	moveq	r4, #1
    513a:	2400      	movne	r4, #0
    513c:	f47f ada7 	bne.w	4c8e <ParseSetBusyParameter(String, int)+0x4a>
      str1 = chrBusyModes[intMode];  str2 = "    " + String(intParam); str3 = " Hz";
    5140:	494c      	ldr	r1, [pc, #304]	; (5274 <ParseSetBusyParameter(String, int)+0x630>)
    5142:	4668      	mov	r0, sp
    5144:	f015 ff8c 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    5148:	493e      	ldr	r1, [pc, #248]	; (5244 <ParseSetBusyParameter(String, int)+0x600>)
    514a:	a80f      	add	r0, sp, #60	; 0x3c
    514c:	f015 fec2 	bl	1aed4 <String::String(char const*)>
    5150:	220a      	movs	r2, #10
    5152:	4629      	mov	r1, r5
    5154:	a80c      	add	r0, sp, #48	; 0x30
    5156:	f015 ff33 	bl	1afc0 <String::String(int, unsigned char)>
    515a:	a90c      	add	r1, sp, #48	; 0x30
    515c:	a80f      	add	r0, sp, #60	; 0x3c
    515e:	f015 ffe1 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    5162:	4601      	mov	r1, r0
    5164:	a803      	add	r0, sp, #12
    5166:	f015 ff5d 	bl	1b024 <String::operator=(String const&)>
    516a:	a80c      	add	r0, sp, #48	; 0x30
    516c:	f015 feec 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    5170:	a80f      	add	r0, sp, #60	; 0x3c
    5172:	f015 fee9 	bl	1af48 <String::~String()>
    5176:	4934      	ldr	r1, [pc, #208]	; (5248 <ParseSetBusyParameter(String, int)+0x604>)
    5178:	a806      	add	r0, sp, #24
    517a:	f015 ff71 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    517e:	4669      	mov	r1, sp
    5180:	a809      	add	r0, sp, #36	; 0x24
    5182:	f015 fec5 	bl	1af10 <String::String(String const&)>
    5186:	a903      	add	r1, sp, #12
    5188:	a80c      	add	r0, sp, #48	; 0x30
    518a:	f015 fec1 	bl	1af10 <String::String(String const&)>
    518e:	a906      	add	r1, sp, #24
    5190:	a80f      	add	r0, sp, #60	; 0x3c
    5192:	f015 febd 	bl	1af10 <String::String(String const&)>
    5196:	aa0f      	add	r2, sp, #60	; 0x3c
    5198:	a90c      	add	r1, sp, #48	; 0x30
    519a:	a809      	add	r0, sp, #36	; 0x24
    519c:	f7ff fb0e 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    51a0:	a80f      	add	r0, sp, #60	; 0x3c
    51a2:	f015 fed1 	bl	1af48 <String::~String()>
    51a6:	a80c      	add	r0, sp, #48	; 0x30
    51a8:	f015 fece 	bl	1af48 <String::~String()>
    51ac:	a809      	add	r0, sp, #36	; 0x24
    51ae:	f015 fecb 	bl	1af48 <String::~String()>
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
    51b2:	42b5      	cmp	r5, r6
    51b4:	d001      	beq.n	51ba <ParseSetBusyParameter(String, int)+0x576>
    51b6:	42bd      	cmp	r5, r7
    51b8:	d102      	bne.n	51c0 <ParseSetBusyParameter(String, int)+0x57c>
    51ba:	4628      	mov	r0, r5
    51bc:	f7fa ffb4 	bl	128 <SetFilterBandwidth(int) [clone .part.0]>
      intBandwidth = intParam;
    51c0:	4b2d      	ldr	r3, [pc, #180]	; (5278 <ParseSetBusyParameter(String, int)+0x634>)
      blnInitSpectrum = true;
    51c2:	2201      	movs	r2, #1
      intBandwidth = intParam;
    51c4:	601d      	str	r5, [r3, #0]
      blnInitSpectrum = true;
    51c6:	4b2d      	ldr	r3, [pc, #180]	; (527c <ParseSetBusyParameter(String, int)+0x638>)
    51c8:	701a      	strb	r2, [r3, #0]
      return true;
    51ca:	e561      	b.n	4c90 <ParseSetBusyParameter(String, int)+0x4c>
  if (intMode == 9)//SPECTRUM:1/0
    51cc:	2c09      	cmp	r4, #9
    51ce:	f47f ad5e 	bne.w	4c8e <ParseSetBusyParameter(String, int)+0x4a>
    intParam = strParameter.toInt();
    51d2:	4628      	mov	r0, r5
    51d4:	f016 f826 	bl	1b224 <String::toInt() const>
    if (!((intParam == 0) || (intParam == 1))) {
    51d8:	2801      	cmp	r0, #1
    intParam = strParameter.toInt();
    51da:	4604      	mov	r4, r0
    if (!((intParam == 0) || (intParam == 1))) {
    51dc:	f63f ad57 	bhi.w	4c8e <ParseSetBusyParameter(String, int)+0x4a>
    if (intParam == 0) {
    51e0:	2800      	cmp	r0, #0
    51e2:	f000 80b4 	beq.w	534e <ParseSetBusyParameter(String, int)+0x70a>
      str3 = "    ON";
    51e6:	4926      	ldr	r1, [pc, #152]	; (5280 <ParseSetBusyParameter(String, int)+0x63c>)
    51e8:	a806      	add	r0, sp, #24
    51ea:	f015 ff39 	bl	1b060 <String::operator=(char const*)>
    str1 = chrBusyModes[intMode];  str2 = "";
    51ee:	4925      	ldr	r1, [pc, #148]	; (5284 <ParseSetBusyParameter(String, int)+0x640>)
    51f0:	4668      	mov	r0, sp
      blnPlotSpectrum = true;
    51f2:	2401      	movs	r4, #1
    str1 = chrBusyModes[intMode];  str2 = "";
    51f4:	f015 ff34 	bl	1b060 <String::operator=(char const*)>
    51f8:	4919      	ldr	r1, [pc, #100]	; (5260 <ParseSetBusyParameter(String, int)+0x61c>)
    51fa:	a803      	add	r0, sp, #12
    51fc:	f015 ff30 	bl	1b060 <String::operator=(char const*)>
    UpdateTFTModeParameter(str1, str2, str3);
    5200:	4669      	mov	r1, sp
    5202:	a809      	add	r0, sp, #36	; 0x24
    5204:	f015 fe84 	bl	1af10 <String::String(String const&)>
    5208:	a903      	add	r1, sp, #12
    520a:	a80c      	add	r0, sp, #48	; 0x30
    520c:	f015 fe80 	bl	1af10 <String::String(String const&)>
    5210:	a906      	add	r1, sp, #24
    5212:	a80f      	add	r0, sp, #60	; 0x3c
    5214:	f015 fe7c 	bl	1af10 <String::String(String const&)>
    5218:	aa0f      	add	r2, sp, #60	; 0x3c
    521a:	a90c      	add	r1, sp, #48	; 0x30
    521c:	a809      	add	r0, sp, #36	; 0x24
    521e:	f7ff facd 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    5222:	a80f      	add	r0, sp, #60	; 0x3c
    5224:	f015 fe90 	bl	1af48 <String::~String()>
    5228:	a80c      	add	r0, sp, #48	; 0x30
    522a:	f015 fe8d 	bl	1af48 <String::~String()>
    522e:	a809      	add	r0, sp, #36	; 0x24
    5230:	f015 fe8a 	bl	1af48 <String::~String()>
      blnPlotSpectrum = true;
    5234:	4b14      	ldr	r3, [pc, #80]	; (5288 <ParseSetBusyParameter(String, int)+0x644>)
    5236:	701c      	strb	r4, [r3, #0]
      blnInitSpectrum = true;
    5238:	4b10      	ldr	r3, [pc, #64]	; (527c <ParseSetBusyParameter(String, int)+0x638>)
    523a:	701c      	strb	r4, [r3, #0]
      return true;
    523c:	e528      	b.n	4c90 <ParseSetBusyParameter(String, int)+0x4c>
    523e:	bf00      	nop
    5240:	200035b0 	.word	0x200035b0
    5244:	20005700 	.word	0x20005700
    5248:	200034ec 	.word	0x200034ec
    524c:	46ac4400 	.word	0x46ac4400
    5250:	47be37c6 	.word	0x47be37c6
    5254:	2000a888 	.word	0x2000a888
    5258:	20012db0 	.word	0x20012db0
    525c:	200035c4 	.word	0x200035c4
    5260:	200039f8 	.word	0x200039f8
    5264:	20009a30 	.word	0x20009a30
    5268:	2000389c 	.word	0x2000389c
    526c:	46fffe00 	.word	0x46fffe00
    5270:	c6fffe00 	.word	0xc6fffe00
    5274:	200035f4 	.word	0x200035f4
    5278:	20009a10 	.word	0x20009a10
    527c:	200136e7 	.word	0x200136e7
    5280:	20003624 	.word	0x20003624
    5284:	20003610 	.word	0x20003610
    5288:	200136eb 	.word	0x200136eb
    intParam = strParameter.toInt();
    528c:	4628      	mov	r0, r5
    528e:	f015 ffc9 	bl	1b224 <String::toInt() const>
    if (( intParam >= 0) && (intParam <= 10))
    5292:	280a      	cmp	r0, #10
    intParam = strParameter.toInt();
    5294:	4604      	mov	r4, r0
    if (( intParam >= 0) && (intParam <= 10))
    5296:	f63f acfa 	bhi.w	4c8e <ParseSetBusyParameter(String, int)+0x4a>
      str1 = chrBusyModes[intMode];  str2 = "     " + String(fltLogs[intParam]); str3 = "";
    529a:	4947      	ldr	r1, [pc, #284]	; (53b8 <ParseSetBusyParameter(String, int)+0x774>)
    529c:	4668      	mov	r0, sp
    529e:	f015 fedf 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const char *p) : String(p) {}
    52a2:	4946      	ldr	r1, [pc, #280]	; (53bc <ParseSetBusyParameter(String, int)+0x778>)
    52a4:	a80f      	add	r0, sp, #60	; 0x3c
    52a6:	f015 fe15 	bl	1aed4 <String::String(char const*)>
    52aa:	4b45      	ldr	r3, [pc, #276]	; (53c0 <ParseSetBusyParameter(String, int)+0x77c>)
    52ac:	2102      	movs	r1, #2
    52ae:	a80c      	add	r0, sp, #48	; 0x30
    52b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    52b4:	ed93 8a00 	vldr	s16, [r3]
    52b8:	eeb0 0a48 	vmov.f32	s0, s16
    52bc:	f015 fe96 	bl	1afec <String::String(float, unsigned char)>
    52c0:	a90c      	add	r1, sp, #48	; 0x30
    52c2:	a80f      	add	r0, sp, #60	; 0x3c
    52c4:	f015 ff2e 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    52c8:	4601      	mov	r1, r0
    52ca:	a803      	add	r0, sp, #12
    52cc:	f015 feaa 	bl	1b024 <String::operator=(String const&)>
    52d0:	a80c      	add	r0, sp, #48	; 0x30
    52d2:	f015 fe39 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    52d6:	a80f      	add	r0, sp, #60	; 0x3c
    52d8:	f015 fe36 	bl	1af48 <String::~String()>
    52dc:	4939      	ldr	r1, [pc, #228]	; (53c4 <ParseSetBusyParameter(String, int)+0x780>)
    52de:	a806      	add	r0, sp, #24
    52e0:	f015 febe 	bl	1b060 <String::operator=(char const*)>
      UpdateTFTModeParameter(str1, str2, str3);
    52e4:	4669      	mov	r1, sp
    52e6:	a809      	add	r0, sp, #36	; 0x24
    52e8:	f015 fe12 	bl	1af10 <String::String(String const&)>
    52ec:	a903      	add	r1, sp, #12
    52ee:	a80c      	add	r0, sp, #48	; 0x30
    52f0:	f015 fe0e 	bl	1af10 <String::String(String const&)>
    52f4:	a906      	add	r1, sp, #24
    52f6:	a80f      	add	r0, sp, #60	; 0x3c
    52f8:	f015 fe0a 	bl	1af10 <String::String(String const&)>
    52fc:	aa0f      	add	r2, sp, #60	; 0x3c
    52fe:	a90c      	add	r1, sp, #48	; 0x30
    5300:	a809      	add	r0, sp, #36	; 0x24
    5302:	f7ff fa5b 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    5306:	a80f      	add	r0, sp, #60	; 0x3c
    5308:	f015 fe1e 	bl	1af48 <String::~String()>
    530c:	a80c      	add	r0, sp, #48	; 0x30
    530e:	f015 fe1b 	bl	1af48 <String::~String()>
    5312:	a809      	add	r0, sp, #36	; 0x24
    5314:	f015 fe18 	bl	1af48 <String::~String()>
		if (gain > 32767.0f) gain = 32767.0f;
    5318:	eddf 7a2b 	vldr	s15, [pc, #172]	; 53c8 <ParseSetBusyParameter(String, int)+0x784>
      intGainLevel[0] = intParam;
    531c:	4b2b      	ldr	r3, [pc, #172]	; (53cc <ParseSetBusyParameter(String, int)+0x788>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    531e:	2200      	movs	r2, #0
		if (gain > 32767.0f) gain = 32767.0f;
    5320:	eeb4 8ae7 	vcmpe.f32	s16, s15
    5324:	601c      	str	r4, [r3, #0]
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    5326:	4b2a      	ldr	r3, [pc, #168]	; (53d0 <ParseSetBusyParameter(String, int)+0x78c>)
		if (gain > 32767.0f) gain = 32767.0f;
    5328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    532c:	e9c3 2206 	strd	r2, r2, [r3, #24]
		if (gain > 32767.0f) gain = 32767.0f;
    5330:	dc39      	bgt.n	53a6 <ParseSetBusyParameter(String, int)+0x762>
		else if (gain < -32767.0f) gain = -32767.0f;
    5332:	eddf 7a28 	vldr	s15, [pc, #160]	; 53d4 <ParseSetBusyParameter(String, int)+0x790>
    5336:	eeb4 8ae7 	vcmpe.f32	s16, s15
    533a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    533e:	d434      	bmi.n	53aa <ParseSetBusyParameter(String, int)+0x766>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    5340:	eef0 7a48 	vmov.f32	s15, s16
    5344:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    5348:	ee17 2a90 	vmov	r2, s15
    534c:	e6de      	b.n	510c <ParseSetBusyParameter(String, int)+0x4c8>
      str3 = "    OFF";
    534e:	4922      	ldr	r1, [pc, #136]	; (53d8 <ParseSetBusyParameter(String, int)+0x794>)
    5350:	a806      	add	r0, sp, #24
    5352:	f015 fe85 	bl	1b060 <String::operator=(char const*)>
    str1 = chrBusyModes[intMode];  str2 = "";
    5356:	4921      	ldr	r1, [pc, #132]	; (53dc <ParseSetBusyParameter(String, int)+0x798>)
    5358:	4668      	mov	r0, sp
    535a:	f015 fe81 	bl	1b060 <String::operator=(char const*)>
    535e:	4919      	ldr	r1, [pc, #100]	; (53c4 <ParseSetBusyParameter(String, int)+0x780>)
    5360:	a803      	add	r0, sp, #12
    5362:	f015 fe7d 	bl	1b060 <String::operator=(char const*)>
    UpdateTFTModeParameter(str1, str2, str3);
    5366:	4669      	mov	r1, sp
    5368:	a809      	add	r0, sp, #36	; 0x24
    536a:	f015 fdd1 	bl	1af10 <String::String(String const&)>
    536e:	a903      	add	r1, sp, #12
    5370:	a80c      	add	r0, sp, #48	; 0x30
    5372:	f015 fdcd 	bl	1af10 <String::String(String const&)>
    5376:	a906      	add	r1, sp, #24
    5378:	a80f      	add	r0, sp, #60	; 0x3c
    537a:	f015 fdc9 	bl	1af10 <String::String(String const&)>
    537e:	aa0f      	add	r2, sp, #60	; 0x3c
    5380:	a90c      	add	r1, sp, #48	; 0x30
    5382:	a809      	add	r0, sp, #36	; 0x24
    5384:	f7ff fa1a 	bl	47bc <UpdateTFTModeParameter(String, String, String)>
    5388:	a80f      	add	r0, sp, #60	; 0x3c
    538a:	f015 fddd 	bl	1af48 <String::~String()>
    538e:	a80c      	add	r0, sp, #48	; 0x30
    5390:	f015 fdda 	bl	1af48 <String::~String()>
    5394:	a809      	add	r0, sp, #36	; 0x24
    5396:	f015 fdd7 	bl	1af48 <String::~String()>
      blnPlotSpectrum = false;
    539a:	4b11      	ldr	r3, [pc, #68]	; (53e0 <ParseSetBusyParameter(String, int)+0x79c>)
    539c:	701c      	strb	r4, [r3, #0]
      blnInitSpectrum = false;
    539e:	4b11      	ldr	r3, [pc, #68]	; (53e4 <ParseSetBusyParameter(String, int)+0x7a0>)
    53a0:	701c      	strb	r4, [r3, #0]
      return true;
    53a2:	2401      	movs	r4, #1
    53a4:	e474      	b.n	4c90 <ParseSetBusyParameter(String, int)+0x4c>
    53a6:	4a10      	ldr	r2, [pc, #64]	; (53e8 <ParseSetBusyParameter(String, int)+0x7a4>)
    53a8:	e6b0      	b.n	510c <ParseSetBusyParameter(String, int)+0x4c8>
    53aa:	4a10      	ldr	r2, [pc, #64]	; (53ec <ParseSetBusyParameter(String, int)+0x7a8>)
    53ac:	e6ae      	b.n	510c <ParseSetBusyParameter(String, int)+0x4c8>
    53ae:	2300      	movs	r3, #0
    53b0:	e64e      	b.n	5050 <ParseSetBusyParameter(String, int)+0x40c>
    53b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    53b6:	e64b      	b.n	5050 <ParseSetBusyParameter(String, int)+0x40c>
    53b8:	200035d8 	.word	0x200035d8
    53bc:	200035ec 	.word	0x200035ec
    53c0:	2000389c 	.word	0x2000389c
    53c4:	200039f8 	.word	0x200039f8
    53c8:	46fffe00 	.word	0x46fffe00
    53cc:	20009a30 	.word	0x20009a30
    53d0:	20012db0 	.word	0x20012db0
    53d4:	c6fffe00 	.word	0xc6fffe00
    53d8:	20003608 	.word	0x20003608
    53dc:	20003610 	.word	0x20003610
    53e0:	200136eb 	.word	0x200136eb
    53e4:	200136e7 	.word	0x200136e7
    53e8:	7fff0000 	.word	0x7fff0000
    53ec:	80010000 	.word	0x80010000

000053f0 <AvgFFTBins(bool, float, int, int)>:
// **** Subroutine to  AvgerageFFTBins *********************************************************
void AvgFFTBins(boolean blnInit, float fltKavg, int intLoFHz, int intHiFHz)
// 3/25/2020 Good results for fltKavg = .1, averaging every 20 bins (~220ms)
// 3/26/2020 Improved with using 2x fltKavag on attack or .5x fltKavg on release
{
  float fltTemp = 0; int intHiBin = intHiFHz / 43.0664; int intLoBin = intLoFHz / 43.0664;
    53f0:	ee07 2a90 	vmov	s15, r2
    53f4:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 5530 <AvgFFTBins(bool, float, int, int)+0x140>
    53f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    53fc:	ee07 1a90 	vmov	s15, r1
    5400:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    5404:	ee86 7b04 	vdiv.f64	d7, d6, d4
    5408:	ee85 6b04 	vdiv.f64	d6, d5, d4
{
    540c:	b500      	push	{lr}
  float fltTemp = 0; int intHiBin = intHiFHz / 43.0664; int intLoBin = intLoFHz / 43.0664;
    540e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    5412:	ee17 ca90 	vmov	ip, s15
    5416:	eefd 7bc6 	vcvt.s32.f64	s15, d6
    541a:	ee17 ea90 	vmov	lr, s15
  float fltAvgBinSum = 0.0;

  if (blnInit)//Initialize the average bins
    541e:	b360      	cbz	r0, 547a <AvgFFTBins(bool, float, int, int)+0x8a>
    5420:	4947      	ldr	r1, [pc, #284]	; (5540 <AvgFFTBins(bool, float, int, int)+0x150>)
  {

    for (int i = 1; i < 151; i++) //Skip bin 0 (DC component)
    5422:	2301      	movs	r3, #1
    5424:	4a47      	ldr	r2, [pc, #284]	; (5544 <AvgFFTBins(bool, float, int, int)+0x154>)
  float fltAvgBinSum = 0.0;
    5426:	ed9f 7a48 	vldr	s14, [pc, #288]	; 5548 <AvgFFTBins(bool, float, int, int)+0x158>
		}
		return false;
	}
	float read(unsigned int binNumber) {
		if (binNumber > 511) return 0.0;
		return (float)(output[binNumber]) * (1.0f / 16384.0f);
    542a:	ed9f 6a48 	vldr	s12, [pc, #288]	; 554c <AvgFFTBins(bool, float, int, int)+0x15c>
    542e:	eddf 6a48 	vldr	s13, [pc, #288]	; 5550 <AvgFFTBins(bool, float, int, int)+0x160>
    5432:	f831 0f02 	ldrh.w	r0, [r1, #2]!
    {
      fltFFT[i] = 4000.0 * fft1024.read(i);
      if ((i >= intLoBin) && (i <= intHiBin)) {
    5436:	459e      	cmp	lr, r3
    5438:	ee07 0a90 	vmov	s15, r0
    543c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5440:	ee67 7a86 	vmul.f32	s15, s15, s12
    5444:	ee67 7aa6 	vmul.f32	s15, s15, s13
      fltFFT[i] = 4000.0 * fft1024.read(i);
    5448:	ece2 7a01 	vstmia	r2!, {s15}
      if ((i >= intLoBin) && (i <= intHiBin)) {
    544c:	dc03      	bgt.n	5456 <AvgFFTBins(bool, float, int, int)+0x66>
    544e:	459c      	cmp	ip, r3
        fltAvgBinSum += fltFFT[i];
    5450:	bfa8      	it	ge
    5452:	ee37 7a27 	vaddge.f32	s14, s14, s15
    for (int i = 1; i < 151; i++) //Skip bin 0 (DC component)
    5456:	3301      	adds	r3, #1
    5458:	2b97      	cmp	r3, #151	; 0x97
    545a:	d1ea      	bne.n	5432 <AvgFFTBins(bool, float, int, int)+0x42>
      }
    }
    fltAvgBinsOfInt = fltAvgBinSum / (1 + intHiBin - intLoBin); //Initialize fltAvgBinsOfInt on first call with blnInit = true
    545c:	f10c 0c01 	add.w	ip, ip, #1
    5460:	4b3c      	ldr	r3, [pc, #240]	; (5554 <AvgFFTBins(bool, float, int, int)+0x164>)
    5462:	ebac 0c0e 	sub.w	ip, ip, lr
    5466:	ee07 ca90 	vmov	s15, ip
    546a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    546e:	eec7 6a27 	vdiv.f32	s13, s14, s15
    5472:	edc3 6a00 	vstr	s13, [r3]
        fltFFT[i] = ((1.0 - (.2 * fltKavg)) * fltFFT[i]) + (.2 * fltKavg * fltTemp);
      }
    }
    return;
  }
}/// End Sub AvgFFTBins ******************************************************************************
    5476:	f85d fb04 	ldr.w	pc, [sp], #4
        fltFFT[i] = ((1.0 - ( fltKavg)) * fltFFT[i]) + ( fltKavg *  fltTemp);
    547a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    547e:	4930      	ldr	r1, [pc, #192]	; (5540 <AvgFFTBins(bool, float, int, int)+0x150>)
    5480:	4a30      	ldr	r2, [pc, #192]	; (5544 <AvgFFTBins(bool, float, int, int)+0x154>)
    for (int i = 1; i < 151; i++)// Modified 3/26/2020 to use fast attack slow release  Rolling Avg Filter
    5482:	2301      	movs	r3, #1
    5484:	ed9f 3a31 	vldr	s6, [pc, #196]	; 554c <AvgFFTBins(bool, float, int, int)+0x15c>
    5488:	eddf 3a31 	vldr	s7, [pc, #196]	; 5550 <AvgFFTBins(bool, float, int, int)+0x160>
        fltFFT[i] = ((1.0 - (.2 * fltKavg)) * fltFFT[i]) + (.2 * fltKavg * fltTemp);
    548c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 5538 <AvgFFTBins(bool, float, int, int)+0x148>
    5490:	e01b      	b.n	54ca <AvgFFTBins(bool, float, int, int)+0xda>
      else if (fltTemp > fltFFT[i])//Faster attack using 2x fltKavg
    5492:	ed92 4a00 	vldr	s8, [r2]
    5496:	eeb4 4ac7 	vcmpe.f32	s8, s14
    549a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    549e:	d533      	bpl.n	5508 <AvgFFTBins(bool, float, int, int)+0x118>
        fltFFT[i] = ((1.0 - (2 * fltKavg)) * fltFFT[i]) + (2 * fltKavg * fltTemp);
    54a0:	ee70 7a00 	vadd.f32	s15, s0, s0
    54a4:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    54a8:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
    54ac:	ee27 7a87 	vmul.f32	s14, s15, s14
    54b0:	ee36 2b42 	vsub.f64	d2, d6, d2
    54b4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    54b8:	eea2 7b04 	vfma.f64	d7, d2, d4
    54bc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    for (int i = 1; i < 151; i++)// Modified 3/26/2020 to use fast attack slow release  Rolling Avg Filter
    54c0:	3301      	adds	r3, #1
        fltFFT[i] = ((1.0 - ( fltKavg)) * fltFFT[i]) + ( fltKavg *  fltTemp);
    54c2:	eca2 7a01 	vstmia	r2!, {s14}
    for (int i = 1; i < 151; i++)// Modified 3/26/2020 to use fast attack slow release  Rolling Avg Filter
    54c6:	2b97      	cmp	r3, #151	; 0x97
    54c8:	d0d5      	beq.n	5476 <AvgFFTBins(bool, float, int, int)+0x86>
    54ca:	f831 0f02 	ldrh.w	r0, [r1, #2]!
      if ((i > intHiBin) || (i < intLoBin))
    54ce:	459c      	cmp	ip, r3
    54d0:	ee07 0a10 	vmov	s14, r0
    54d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    54d8:	ee27 7a03 	vmul.f32	s14, s14, s6
    54dc:	ee27 7a23 	vmul.f32	s14, s14, s7
    54e0:	db01      	blt.n	54e6 <AvgFFTBins(bool, float, int, int)+0xf6>
    54e2:	459e      	cmp	lr, r3
    54e4:	ddd5      	ble.n	5492 <AvgFFTBins(bool, float, int, int)+0xa2>
        fltFFT[i] = ((1.0 - ( fltKavg)) * fltFFT[i]) + ( fltKavg *  fltTemp);
    54e6:	eeb7 2ac0 	vcvt.f64.f32	d2, s0
    54ea:	ed92 4a00 	vldr	s8, [r2]
    54ee:	ee27 7a00 	vmul.f32	s14, s14, s0
    54f2:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    54f6:	ee36 2b42 	vsub.f64	d2, d6, d2
    54fa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    54fe:	eea2 7b04 	vfma.f64	d7, d2, d4
    5502:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    5506:	e7db      	b.n	54c0 <AvgFFTBins(bool, float, int, int)+0xd0>
        fltFFT[i] = ((1.0 - (.2 * fltKavg)) * fltFFT[i]) + (.2 * fltKavg * fltTemp);
    5508:	eeb7 2ac0 	vcvt.f64.f32	d2, s0
    550c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    5510:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    5514:	ee22 2b05 	vmul.f64	d2, d2, d5
    5518:	ee27 7b02 	vmul.f64	d7, d7, d2
    551c:	ee36 2b42 	vsub.f64	d2, d6, d2
    5520:	eea2 7b04 	vfma.f64	d7, d2, d4
    5524:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    5528:	e7ca      	b.n	54c0 <AvgFFTBins(bool, float, int, int)+0xd0>
    552a:	bf00      	nop
    552c:	f3af 8000 	nop.w
    5530:	cb923a2a 	.word	0xcb923a2a
    5534:	4045887f 	.word	0x4045887f
    5538:	9999999a 	.word	0x9999999a
    553c:	3fc99999 	.word	0x3fc99999
    5540:	2001071c 	.word	0x2001071c
    5544:	200129b4 	.word	0x200129b4
    5548:	00000000 	.word	0x00000000
    554c:	38800000 	.word	0x38800000
    5550:	457a0000 	.word	0x457a0000
    5554:	200129a8 	.word	0x200129a8

00005558 <SearchRatioDetect(int, int, int, int)>:

//******** Sub SearchRatioDetect*************Used in Busy detector ************************************
//Status: Works well for both narrow and wide  band signal detection...Still optimizing********
int SearchRatioDetect(int intLowFHz, int intHiFHz, int intSearchWidthHz, int intThreshdB)
{
  int intLowBin = round(intLowFHz / 43.0664); int intHiBin = round(intHiFHz / 43.0664);int intIatMax;int intIatMin;
    5558:	ee07 0a90 	vmov	s15, r0
    555c:	ee06 1a90 	vmov	s13, r1
  int intSearchWidthBins = round(intSearchWidthHz / 43.0664); int intMaxS_NdB; int intMinS_NdB;
    5560:	ee05 2a90 	vmov	s11, r2
  int intLowBin = round(intLowFHz / 43.0664); int intHiBin = round(intHiFHz / 43.0664);int intIatMax;int intIatMin;
    5564:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    5568:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  int intSearchWidthBins = round(intSearchWidthHz / 43.0664); int intMaxS_NdB; int intMinS_NdB;
    556c:	eeb8 3be5 	vcvt.f64.s32	d3, s11
  int intLowBin = round(intLowFHz / 43.0664); int intHiBin = round(intHiFHz / 43.0664);int intIatMax;int intIatMin;
    5570:	ed9f 4b5b 	vldr	d4, [pc, #364]	; 56e0 <SearchRatioDetect(int, int, int, int)+0x188>
{
    5574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int intLowBin = round(intLowFHz / 43.0664); int intHiBin = round(intHiFHz / 43.0664);int intIatMax;int intIatMin;
    5576:	ee87 5b04 	vdiv.f64	d5, d7, d4
{
    557a:	461c      	mov	r4, r3
  int intLowBin = round(intLowFHz / 43.0664); int intHiBin = round(intHiFHz / 43.0664);int intIatMax;int intIatMin;
    557c:	ee86 7b04 	vdiv.f64	d7, d6, d4
  int intSearchWidthBins = round(intSearchWidthHz / 43.0664); int intMaxS_NdB; int intMinS_NdB;
    5580:	ee83 6b04 	vdiv.f64	d6, d3, d4
{
    5584:	ed2d 8b06 	vpush	{d8-d10}
  int intLowBin = round(intLowFHz / 43.0664); int intHiBin = round(intHiFHz / 43.0664);int intIatMax;int intIatMin;
    5588:	feb8 5b45 	vrinta.f64	d5, d5
    558c:	eefd 5bc5 	vcvt.s32.f64	s11, d5
    5590:	ee15 5a90 	vmov	r5, s11
    5594:	feb8 7b47 	vrinta.f64	d7, d7
    5598:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    559c:	ee17 ea90 	vmov	lr, s15
  int intSearchWidthBins = round(intSearchWidthHz / 43.0664); int intMaxS_NdB; int intMinS_NdB;
    55a0:	feb8 6b46 	vrinta.f64	d6, d6
    55a4:	eefd 7bc6 	vcvt.s32.f64	s15, d6
  float fltSearchSum = 0.0; float fltSearchSumMax = 0.0; float fltSearchSumMin = 1000000;
  float fltHi_LowSum = 0.0; float fltDenom = 0.0; float fltNum = 0.0; 

  // Search for largest AND smallest  "intSearchWidthHz" signal (between intLowBin and intHighBin inclusive)
  for (int i = intLowBin; i <= (intHiBin); i++)
    55a8:	4575      	cmp	r5, lr
  int intSearchWidthBins = round(intSearchWidthHz / 43.0664); int intMaxS_NdB; int intMinS_NdB;
    55aa:	ee17 3a90 	vmov	r3, s15
  for (int i = intLowBin; i <= (intHiBin); i++)
    55ae:	f300 808c 	bgt.w	56ca <SearchRatioDetect(int, int, int, int)+0x172>
    55b2:	4a4d      	ldr	r2, [pc, #308]	; (56e8 <SearchRatioDetect(int, int, int, int)+0x190>)
    55b4:	1959      	adds	r1, r3, r5
  float fltHi_LowSum = 0.0; float fltDenom = 0.0; float fltNum = 0.0; 
    55b6:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 56ec <SearchRatioDetect(int, int, int, int)+0x194>
  {
    fltHi_LowSum = fltHi_LowSum + fltFFT[i];//Sums all the bins between intLowBin and intHighBin inclusive
    if (i <= (intHiBin - intSearchWidthBins)) //This bounds the search to the region of interest
    55ba:	ebae 0703 	sub.w	r7, lr, r3
  float fltSearchSum = 0.0; float fltSearchSumMax = 0.0; float fltSearchSumMin = 1000000;
    55be:	ed9f 9a4c 	vldr	s18, [pc, #304]	; 56f0 <SearchRatioDetect(int, int, int, int)+0x198>
    55c2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    55c6:	eef0 6a48 	vmov.f32	s13, s16
    55ca:	eb02 0c85 	add.w	ip, r2, r5, lsl #2
    55ce:	f10e 0601 	add.w	r6, lr, #1
    if (i <= (intHiBin - intSearchWidthBins)) //This bounds the search to the region of interest
    55d2:	ee15 0a90 	vmov	r0, s11
    55d6:	e003      	b.n	55e0 <SearchRatioDetect(int, int, int, int)+0x88>
  for (int i = intLowBin; i <= (intHiBin); i++)
    55d8:	3001      	adds	r0, #1
    55da:	3104      	adds	r1, #4
    55dc:	42b0      	cmp	r0, r6
    55de:	d022      	beq.n	5626 <SearchRatioDetect(int, int, int, int)+0xce>
    fltHi_LowSum = fltHi_LowSum + fltFFT[i];//Sums all the bins between intLowBin and intHighBin inclusive
    55e0:	ecfc 7a01 	vldmia	ip!, {s15}
    if (i <= (intHiBin - intSearchWidthBins)) //This bounds the search to the region of interest
    55e4:	42b8      	cmp	r0, r7
    fltHi_LowSum = fltHi_LowSum + fltFFT[i];//Sums all the bins between intLowBin and intHighBin inclusive
    55e6:	ee38 8a27 	vadd.f32	s16, s16, s15
    if (i <= (intHiBin - intSearchWidthBins)) //This bounds the search to the region of interest
    55ea:	dcf5      	bgt.n	55d8 <SearchRatioDetect(int, int, int, int)+0x80>
    {
      fltSearchSum = 0;// Search for the max and min contiguous bins of width intSearchWidthBins
      for (int j = 0; j < intSearchWidthBins; j++)
    55ec:	2b00      	cmp	r3, #0
      fltSearchSum = 0;// Search for the max and min contiguous bins of width intSearchWidthBins
    55ee:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 56ec <SearchRatioDetect(int, int, int, int)+0x194>
      for (int j = 0; j < intSearchWidthBins; j++)
    55f2:	dd07      	ble.n	5604 <SearchRatioDetect(int, int, int, int)+0xac>
    55f4:	4662      	mov	r2, ip
    55f6:	e001      	b.n	55fc <SearchRatioDetect(int, int, int, int)+0xa4>
      {
        fltSearchSum += fltFFT[i + j];// Sum all the bins within intSearchWidthBins
    55f8:	ecf2 7a01 	vldmia	r2!, {s15}
      for (int j = 0; j < intSearchWidthBins; j++)
    55fc:	428a      	cmp	r2, r1
        fltSearchSum += fltFFT[i + j];// Sum all the bins within intSearchWidthBins
    55fe:	ee37 7a27 	vadd.f32	s14, s14, s15
      for (int j = 0; j < intSearchWidthBins; j++)
    5602:	d1f9      	bne.n	55f8 <SearchRatioDetect(int, int, int, int)+0xa0>
      }
      if (fltSearchSum > fltSearchSumMax)
    5604:	eef4 6a47 	vcmp.f32	s13, s14
  for (int i = intLowBin; i <= (intHiBin); i++)
    5608:	3001      	adds	r0, #1
    560a:	3104      	adds	r1, #4
      if (fltSearchSum > fltSearchSumMax)
    560c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
          fltSearchSumMax = fltSearchSum;//The max sum found in a range of intSearchWidth
          intIatMax = i;
        }
      if (fltSearchSum < fltSearchSumMin)
    5610:	eeb4 9a47 	vcmp.f32	s18, s14
      if (fltSearchSum > fltSearchSumMax)
    5614:	bf48      	it	mi
    5616:	eef0 6a47 	vmovmi.f32	s13, s14
      if (fltSearchSum < fltSearchSumMin)
    561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    561e:	fe37 9a09 	vselgt.f32	s18, s14, s18
  for (int i = intLowBin; i <= (intHiBin); i++)
    5622:	42b0      	cmp	r0, r6
    5624:	d1dc      	bne.n	55e0 <SearchRatioDetect(int, int, int, int)+0x88>
          intIatMin = i;
        }
    }
  }
  // Generate Numerator and Denominator normalized to per bin for the Highest S:N
  fltDenom = (fltHi_LowSum - fltSearchSumMax) / ((intHiBin - intLowBin) - intSearchWidthBins); //Avg energy/bin  outside region of max
    5626:	ee78 7a66 	vsub.f32	s15, s16, s13
    562a:	ebae 0e05 	sub.w	lr, lr, r5
  fltNum = fltSearchSumMax / intSearchWidthBins; //Maximum Energy per bin over intSearchWidthHz between intLowBin and intHighBin
    562e:	ee07 3a10 	vmov	s14, r3
  intMaxS_NdB = round(20 * log10(fltNum / fltDenom));
    5632:	eef3 9a04 	vmov.f32	s19, #52	; 0x41a00000  20.0
  fltDenom = (fltHi_LowSum - fltSearchSumMax) / ((intHiBin - intLowBin) - intSearchWidthBins); //Avg energy/bin  outside region of max
    5636:	ebae 0e03 	sub.w	lr, lr, r3
  fltNum = fltSearchSumMax / intSearchWidthBins; //Maximum Energy per bin over intSearchWidthHz between intLowBin and intHighBin
    563a:	eeb8 aac7 	vcvt.f32.s32	s20, s14
  fltDenom = (fltHi_LowSum - fltSearchSumMax) / ((intHiBin - intLowBin) - intSearchWidthBins); //Avg energy/bin  outside region of max
    563e:	ee07 ea10 	vmov	s14, lr
  fltNum = fltSearchSumMax / intSearchWidthBins; //Maximum Energy per bin over intSearchWidthHz between intLowBin and intHighBin
    5642:	ee86 0a8a 	vdiv.f32	s0, s13, s20
  fltDenom = (fltHi_LowSum - fltSearchSumMax) / ((intHiBin - intLowBin) - intSearchWidthBins); //Avg energy/bin  outside region of max
    5646:	eef8 8ac7 	vcvt.f32.s32	s17, s14
    564a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  { return __builtin_log10f(__x); }
    564e:	ee80 0a07 	vdiv.f32	s0, s0, s14
    5652:	f019 f89d 	bl	1e790 <log10f>
  intMaxS_NdB = round(20 * log10(fltNum / fltDenom));
    5656:	ee20 0a29 	vmul.f32	s0, s0, s19
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
    565a:	fef8 7a40 	vrinta.f32	s15, s0
    565e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5662:	ee17 5a90 	vmov	r5, s15
  if (intMaxS_NdB >= intThreshdB)//This trips detector when a narrow band peak is found
    5666:	42a5      	cmp	r5, r4
    5668:	db06      	blt.n	5678 <SearchRatioDetect(int, int, int, int)+0x120>
  {
    blnPlotBusyRed = true;
    566a:	4b22      	ldr	r3, [pc, #136]	; (56f4 <SearchRatioDetect(int, int, int, int)+0x19c>)
    566c:	2201      	movs	r2, #1
    566e:	701a      	strb	r2, [r3, #0]
  {
    blnPlotBusyRed = false;
    return 0;
  }
  else return intMaxS_NdB;
} // End************* SearchRatioDetect *********************************************************
    5670:	4628      	mov	r0, r5
    5672:	ecbd 8b06 	vpop	{d8-d10}
    5676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  fltDenom = (fltHi_LowSum - fltSearchSumMin) / ((intHiBin - intLowBin) - intSearchWidthBins); //Avg energy/bin  outside region of max
    5678:	ee38 8a49 	vsub.f32	s16, s16, s18
  fltNum = fltSearchSumMin / intSearchWidthBins; //Minimum Energy per bin over intSearchWidthHz between intLowBin and intHighBin
    567c:	ee89 0a0a 	vdiv.f32	s0, s18, s20
  fltDenom = (fltHi_LowSum - fltSearchSumMin) / ((intHiBin - intLowBin) - intSearchWidthBins); //Avg energy/bin  outside region of max
    5680:	eec8 7a28 	vdiv.f32	s15, s16, s17
  { return __builtin_log10f(__x); }
    5684:	ee80 0a27 	vdiv.f32	s0, s0, s15
    5688:	f019 f882 	bl	1e790 <log10f>
  intMinS_NdB = round(20 * log10(fltNum / fltDenom)); //Typically -3 to -10
    568c:	ee20 0a29 	vmul.f32	s0, s0, s19
  { return __builtin_roundf(__x); }
    5690:	fef8 7a40 	vrinta.f32	s15, s0
    5694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5698:	ee17 3a90 	vmov	r3, s15
  if ((intMaxS_NdB - intMinS_NdB) >= (2 * intThreshdB))//This trips the detector when a narrow band minimum is found
    569c:	1aea      	subs	r2, r5, r3
    569e:	ebb2 0f44 	cmp.w	r2, r4, lsl #1
    56a2:	da0a      	bge.n	56ba <SearchRatioDetect(int, int, int, int)+0x162>
  else if (intMinS_NdB <= (intThreshdB - 2)) //Only clear the busy condition when intMinS_NdB is 2 dB or more BELOW threshold
    56a4:	3c01      	subs	r4, #1
    56a6:	429c      	cmp	r4, r3
    56a8:	dde2      	ble.n	5670 <SearchRatioDetect(int, int, int, int)+0x118>
    blnPlotBusyRed = false;
    56aa:	2300      	movs	r3, #0
    56ac:	4a11      	ldr	r2, [pc, #68]	; (56f4 <SearchRatioDetect(int, int, int, int)+0x19c>)
    return 0;
    56ae:	461d      	mov	r5, r3
    blnPlotBusyRed = false;
    56b0:	7013      	strb	r3, [r2, #0]
} // End************* SearchRatioDetect *********************************************************
    56b2:	ecbd 8b06 	vpop	{d8-d10}
    56b6:	4628      	mov	r0, r5
    56b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    blnPlotBusyRed = true;
    56ba:	4b0e      	ldr	r3, [pc, #56]	; (56f4 <SearchRatioDetect(int, int, int, int)+0x19c>)
    56bc:	2101      	movs	r1, #1
    return (intMaxS_NdB - intMinS_NdB);
    56be:	4615      	mov	r5, r2
    blnPlotBusyRed = true;
    56c0:	7019      	strb	r1, [r3, #0]
} // End************* SearchRatioDetect *********************************************************
    56c2:	4628      	mov	r0, r5
    56c4:	ecbd 8b06 	vpop	{d8-d10}
    56c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (int i = intLowBin; i <= (intHiBin); i++)
    56ca:	eddf 7a08 	vldr	s15, [pc, #32]	; 56ec <SearchRatioDetect(int, int, int, int)+0x194>
  float fltSearchSum = 0.0; float fltSearchSumMax = 0.0; float fltSearchSumMin = 1000000;
    56ce:	ed9f 9a08 	vldr	s18, [pc, #32]	; 56f0 <SearchRatioDetect(int, int, int, int)+0x198>
  float fltHi_LowSum = 0.0; float fltDenom = 0.0; float fltNum = 0.0; 
    56d2:	eeb0 8a67 	vmov.f32	s16, s15
  float fltSearchSum = 0.0; float fltSearchSumMax = 0.0; float fltSearchSumMin = 1000000;
    56d6:	eef0 6a67 	vmov.f32	s13, s15
    56da:	e7a6      	b.n	562a <SearchRatioDetect(int, int, int, int)+0xd2>
    56dc:	f3af 8000 	nop.w
    56e0:	cb923a2a 	.word	0xcb923a2a
    56e4:	4045887f 	.word	0x4045887f
    56e8:	200129b0 	.word	0x200129b0
    56ec:	00000000 	.word	0x00000000
    56f0:	49742400 	.word	0x49742400
    56f4:	200136ea 	.word	0x200136ea

000056f8 <SaveParametersToEEPROM()>:


// Subroutine to Save ParametersToEEProm *******************************************************************
void SaveParametersToEEPROM()
{ // Only called from manual Right Encoder Push While displaying modes 5-16
    56f8:	b538      	push	{r3, r4, r5, lr}
  int intAdd = intMode - 4;
    56fa:	4c37      	ldr	r4, [pc, #220]	; (57d8 <SaveParametersToEEPROM()+0xe0>)
    56fc:	6823      	ldr	r3, [r4, #0]
  //Serial.print("EEPROM SAVE: mode =");Serial.print(intMode);Serial.print(" val= ");
  //Modes 0-4 (WGN-MPD) not saved as Right Encoder Push toggles 1500 Hz tone on/off.  So S:N values not saved/restored.
  // These confirmed based on Serial.print (remove print statements after debug).
  if (intMode == 5) {
    56fe:	2b05      	cmp	r3, #5
  int intAdd = intMode - 4;
    5700:	f1a3 0504 	sub.w	r5, r3, #4
  if (intMode == 5) {
    5704:	d061      	beq.n	57ca <SaveParametersToEEPROM()+0xd2>
    EEPROM.write(intAdd, byte(intMultipaths));  //  intMultipaths
    //Serial.println(byte(intMultipaths));
  }
  if (intMode == 6) {
    5706:	2b06      	cmp	r3, #6
    5708:	d058      	beq.n	57bc <SaveParametersToEEPROM()+0xc4>
    EEPROM.write(intAdd, byte(intFadeDepth_dB));  //Fade Depth 0 to 40 dB
    //Serial.println(intFadeDepth_dB);
  }
  if (intMode == 7) {
    570a:	2b07      	cmp	r3, #7
    570c:	d04f      	beq.n	57ae <SaveParametersToEEPROM()+0xb6>
    EEPROM.write(intAdd, byte(intFadeRatePtr));  //Fade Rate
    //Serial.println(intFadeRatePtr);
  }
  if (intMode == 8) {
    570e:	2b08      	cmp	r3, #8
    5710:	d03e      	beq.n	5790 <SaveParametersToEEPROM()+0x98>
    EEPROM.write(intAdd, byte(20 + intTuneOffset / 10));  //intTuneOffset
    //Serial.println(20 + intTuneOffset / 10);
  }

  if (intMode == 9) {
    5712:	2b09      	cmp	r3, #9
    5714:	d035      	beq.n	5782 <SaveParametersToEEPROM()+0x8a>
    EEPROM.write(intAdd, byte(intFMDevPtr));  //FMDeviation Pointer
   //Serial.println(intFMDevPtr);
  }
  if (intMode == 10) {
    5716:	2b0a      	cmp	r3, #10
    5718:	d02c      	beq.n	5774 <SaveParametersToEEPROM()+0x7c>
    EEPROM.write(intAdd, byte(intFMRatePtr));  //FM Rate Pointer
    //Serial.println(intFMRatePtr);
  }
  if ((intMode > 10) && (intMode < 15)) {
    571a:	f1a3 020b 	sub.w	r2, r3, #11
    571e:	2a03      	cmp	r2, #3
    5720:	d907      	bls.n	5732 <SaveParametersToEEPROM()+0x3a>
    EEPROM.write(intAdd, byte(intGainLevel[intMode - 11]));  // intGainIndex
    //Serial.println(intGainLevel[intMode - 11]);
  }
  if (intMode == 15) {
    5722:	2b0f      	cmp	r3, #15
    5724:	d00e      	beq.n	5744 <SaveParametersToEEPROM()+0x4c>
    EEPROM.write(intAdd, byte(intBandwidth / 100));  //  Bandwidth 3000 or 6000 / 100
    //Serial.println(byte(intBandwidth / 100));
  }
  if (intMode == 16) {
    5726:	2b10      	cmp	r3, #16
    5728:	d01b      	beq.n	5762 <SaveParametersToEEPROM()+0x6a>
    EEPROM.write(intAdd, byte(intBaudPtr));  //intBaudPtr
    //Serial.println(intBaudRate[intBaudPtr]);
  }  
  blnInitializedFromEEPROM = true; return;
    572a:	4b2c      	ldr	r3, [pc, #176]	; (57dc <SaveParametersToEEPROM()+0xe4>)
    572c:	2201      	movs	r2, #1
    572e:	701a      	strb	r2, [r3, #0]
}  //  End SaveParametersToEEPROM ***********************************************************************
    5730:	bd38      	pop	{r3, r4, r5, pc}
    EEPROM.write(intAdd, byte(intGainLevel[intMode - 11]));  // intGainIndex
    5732:	4b2b      	ldr	r3, [pc, #172]	; (57e0 <SaveParametersToEEPROM()+0xe8>)
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    5734:	4628      	mov	r0, r5
    5736:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    573a:	f016 f94f 	bl	1b9dc <eeprom_write_byte>
  if (intMode == 15) {
    573e:	6823      	ldr	r3, [r4, #0]
    5740:	2b0f      	cmp	r3, #15
    5742:	d1f0      	bne.n	5726 <SaveParametersToEEPROM()+0x2e>
    EEPROM.write(intAdd, byte(intBandwidth / 100));  //  Bandwidth 3000 or 6000 / 100
    5744:	4a27      	ldr	r2, [pc, #156]	; (57e4 <SaveParametersToEEPROM()+0xec>)
    5746:	4628      	mov	r0, r5
    5748:	4b27      	ldr	r3, [pc, #156]	; (57e8 <SaveParametersToEEPROM()+0xf0>)
    574a:	6811      	ldr	r1, [r2, #0]
    574c:	fb83 2301 	smull	r2, r3, r3, r1
    5750:	17c9      	asrs	r1, r1, #31
    5752:	ebc1 1163 	rsb	r1, r1, r3, asr #5
    5756:	b2c9      	uxtb	r1, r1
    5758:	f016 f940 	bl	1b9dc <eeprom_write_byte>
  if (intMode == 16) {
    575c:	6823      	ldr	r3, [r4, #0]
    575e:	2b10      	cmp	r3, #16
    5760:	d1e3      	bne.n	572a <SaveParametersToEEPROM()+0x32>
    EEPROM.write(intAdd, byte(intBaudPtr));  //intBaudPtr
    5762:	4b22      	ldr	r3, [pc, #136]	; (57ec <SaveParametersToEEPROM()+0xf4>)
    5764:	4628      	mov	r0, r5
    5766:	7819      	ldrb	r1, [r3, #0]
    5768:	f016 f938 	bl	1b9dc <eeprom_write_byte>
  blnInitializedFromEEPROM = true; return;
    576c:	4b1b      	ldr	r3, [pc, #108]	; (57dc <SaveParametersToEEPROM()+0xe4>)
    576e:	2201      	movs	r2, #1
    5770:	701a      	strb	r2, [r3, #0]
}  //  End SaveParametersToEEPROM ***********************************************************************
    5772:	bd38      	pop	{r3, r4, r5, pc}
    EEPROM.write(intAdd, byte(intFMRatePtr));  //FM Rate Pointer
    5774:	4b1e      	ldr	r3, [pc, #120]	; (57f0 <SaveParametersToEEPROM()+0xf8>)
    5776:	4628      	mov	r0, r5
    5778:	7819      	ldrb	r1, [r3, #0]
    577a:	f016 f92f 	bl	1b9dc <eeprom_write_byte>
  if ((intMode > 10) && (intMode < 15)) {
    577e:	6823      	ldr	r3, [r4, #0]
#endif

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    5780:	e7cb      	b.n	571a <SaveParametersToEEPROM()+0x22>
    EEPROM.write(intAdd, byte(intFMDevPtr));  //FMDeviation Pointer
    5782:	4b1c      	ldr	r3, [pc, #112]	; (57f4 <SaveParametersToEEPROM()+0xfc>)
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    5784:	4628      	mov	r0, r5
    5786:	7819      	ldrb	r1, [r3, #0]
    5788:	f016 f928 	bl	1b9dc <eeprom_write_byte>
  if (intMode == 10) {
    578c:	6823      	ldr	r3, [r4, #0]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    578e:	e7c2      	b.n	5716 <SaveParametersToEEPROM()+0x1e>
    EEPROM.write(intAdd, byte(20 + intTuneOffset / 10));  //intTuneOffset
    5790:	4b19      	ldr	r3, [pc, #100]	; (57f8 <SaveParametersToEEPROM()+0x100>)
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    5792:	4628      	mov	r0, r5
    5794:	4a19      	ldr	r2, [pc, #100]	; (57fc <SaveParametersToEEPROM()+0x104>)
    5796:	681b      	ldr	r3, [r3, #0]
    5798:	fb82 1203 	smull	r1, r2, r2, r3
    579c:	17d9      	asrs	r1, r3, #31
    579e:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
    57a2:	3114      	adds	r1, #20
    57a4:	b2c9      	uxtb	r1, r1
    57a6:	f016 f919 	bl	1b9dc <eeprom_write_byte>
  if (intMode == 9) {
    57aa:	6823      	ldr	r3, [r4, #0]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    57ac:	e7b1      	b.n	5712 <SaveParametersToEEPROM()+0x1a>
    EEPROM.write(intAdd, byte(intFadeRatePtr));  //Fade Rate
    57ae:	4b14      	ldr	r3, [pc, #80]	; (5800 <SaveParametersToEEPROM()+0x108>)
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    57b0:	4628      	mov	r0, r5
    57b2:	7819      	ldrb	r1, [r3, #0]
    57b4:	f016 f912 	bl	1b9dc <eeprom_write_byte>
  if (intMode == 8) {
    57b8:	6823      	ldr	r3, [r4, #0]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    57ba:	e7a8      	b.n	570e <SaveParametersToEEPROM()+0x16>
    EEPROM.write(intAdd, byte(intFadeDepth_dB));  //Fade Depth 0 to 40 dB
    57bc:	4b11      	ldr	r3, [pc, #68]	; (5804 <SaveParametersToEEPROM()+0x10c>)
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    57be:	4628      	mov	r0, r5
    57c0:	7819      	ldrb	r1, [r3, #0]
    57c2:	f016 f90b 	bl	1b9dc <eeprom_write_byte>
  if (intMode == 7) {
    57c6:	6823      	ldr	r3, [r4, #0]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    57c8:	e79f      	b.n	570a <SaveParametersToEEPROM()+0x12>
    EEPROM.write(intAdd, byte(intMultipaths));  //  intMultipaths
    57ca:	4b0f      	ldr	r3, [pc, #60]	; (5808 <SaveParametersToEEPROM()+0x110>)
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    57cc:	2001      	movs	r0, #1
    57ce:	7819      	ldrb	r1, [r3, #0]
    57d0:	f016 f904 	bl	1b9dc <eeprom_write_byte>
  if (intMode == 6) {
    57d4:	6823      	ldr	r3, [r4, #0]
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    57d6:	e796      	b.n	5706 <SaveParametersToEEPROM()+0xe>
    57d8:	20012cb0 	.word	0x20012cb0
    57dc:	200136e9 	.word	0x200136e9
    57e0:	20009a30 	.word	0x20009a30
    57e4:	20009a10 	.word	0x20009a10
    57e8:	51eb851f 	.word	0x51eb851f
    57ec:	20009a14 	.word	0x20009a14
    57f0:	20009a28 	.word	0x20009a28
    57f4:	20009a24 	.word	0x20009a24
    57f8:	20012cbc 	.word	0x20012cbc
    57fc:	66666667 	.word	0x66666667
    5800:	20009a2c 	.word	0x20009a2c
    5804:	20012cac 	.word	0x20012cac
    5808:	20009a48 	.word	0x20009a48

0000580c <InitializeParametersFromEEPROM()>:


// ******* Subroutine to InitializeParametersFromEEProm **************************************************
void InitializeParametersFromEEPROM()
{ // Only called from Setup upon initial power on or Reset
    580c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  byte bytParameter;
  if (!blnSim) {
    5810:	4b3f      	ldr	r3, [pc, #252]	; (5910 <InitializeParametersFromEEPROM()+0x104>)
    5812:	781b      	ldrb	r3, [r3, #0]
    5814:	2b00      	cmp	r3, #0
    5816:	d042      	beq.n	589e <InitializeParametersFromEEPROM()+0x92>
    return;
  }
  if (blnInitializedFromEEPROM) { return;} //Exit if already initialized
    5818:	4e3e      	ldr	r6, [pc, #248]	; (5914 <InitializeParametersFromEEPROM()+0x108>)
    581a:	7833      	ldrb	r3, [r6, #0]
    581c:	2b00      	cmp	r3, #0
    581e:	d13e      	bne.n	589e <InitializeParametersFromEEPROM()+0x92>
    5820:	2402      	movs	r4, #2
    5822:	f04f 0b01 	mov.w	fp, #1
    //Serial.print("Init From EEPROM(");Serial.print(i);Serial.print(") = ");Serial.println(bytParameter);//For debug
    if ((i == 1) && ((bytParameter ==2) || (bytParameter ==4))) {intMultipaths = int(bytParameter) ;}
    else if ((i == 2) && (bytParameter < 41)) { intFadeDepth_dB = int(bytParameter) ;}
    else if ((i == 3) && (bytParameter < 9)) {intFadeRatePtr = int(bytParameter);}
    else if ((i == 4) && (bytParameter < 41)) {intTuneOffset = 10 * (int(bytParameter) - 20);}
    else if ((i == 5) && (bytParameter < 9)) {intFMDevPtr = int(bytParameter);}
    5826:	f8df a108 	ldr.w	sl, [pc, #264]	; 5930 <InitializeParametersFromEEPROM()+0x124>
    else if ((i == 4) && (bytParameter < 41)) {intTuneOffset = 10 * (int(bytParameter) - 20);}
    582a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 5934 <InitializeParametersFromEEPROM()+0x128>
    else if ((i == 3) && (bytParameter < 9)) {intFadeRatePtr = int(bytParameter);}
    582e:	4f3a      	ldr	r7, [pc, #232]	; (5918 <InitializeParametersFromEEPROM()+0x10c>)
    else if ((i == 2) && (bytParameter < 41)) { intFadeDepth_dB = int(bytParameter) ;}
    5830:	4d3a      	ldr	r5, [pc, #232]	; (591c <InitializeParametersFromEEPROM()+0x110>)
    if ((i == 1) && ((bytParameter ==2) || (bytParameter ==4))) {intMultipaths = int(bytParameter) ;}
    5832:	f8df 8104 	ldr.w	r8, [pc, #260]	; 5938 <InitializeParametersFromEEPROM()+0x12c>
    5836:	e00b      	b.n	5850 <InitializeParametersFromEEPROM()+0x44>
    else if ((i == 2) && (bytParameter < 41)) { intFadeDepth_dB = int(bytParameter) ;}
    5838:	2828      	cmp	r0, #40	; 0x28
    583a:	bf8c      	ite	hi
    583c:	2200      	movhi	r2, #0
    583e:	2201      	movls	r2, #1
    5840:	f1bb 0f02 	cmp.w	fp, #2
    5844:	d12d      	bne.n	58a2 <InitializeParametersFromEEPROM()+0x96>
    5846:	b362      	cbz	r2, 58a2 <InitializeParametersFromEEPROM()+0x96>
    5848:	6028      	str	r0, [r5, #0]
    584a:	f10b 0b01 	add.w	fp, fp, #1
    584e:	3401      	adds	r4, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    5850:	4658      	mov	r0, fp
    5852:	f015 ffb3 	bl	1b7bc <eeprom_read_byte>
    if ((i == 1) && ((bytParameter ==2) || (bytParameter ==4))) {intMultipaths = int(bytParameter) ;}
    5856:	f1bb 0f01 	cmp.w	fp, #1
    585a:	d1ed      	bne.n	5838 <InitializeParametersFromEEPROM()+0x2c>
    585c:	2802      	cmp	r0, #2
    585e:	d02a      	beq.n	58b6 <InitializeParametersFromEEPROM()+0xaa>
    5860:	2804      	cmp	r0, #4
    5862:	d028      	beq.n	58b6 <InitializeParametersFromEEPROM()+0xaa>
    else if ((i == 3) && (bytParameter < 9)) {intFadeRatePtr = int(bytParameter);}
    5864:	2808      	cmp	r0, #8
    5866:	bf8c      	ite	hi
    5868:	2100      	movhi	r1, #0
    586a:	2101      	movls	r1, #1
    else if ((i == 6) && (bytParameter < 9)) {intFMRatePtr = int(bytParameter);}
    586c:	f1bb 0f06 	cmp.w	fp, #6
    5870:	d103      	bne.n	587a <InitializeParametersFromEEPROM()+0x6e>
    5872:	b111      	cbz	r1, 587a <InitializeParametersFromEEPROM()+0x6e>
    5874:	4b2a      	ldr	r3, [pc, #168]	; (5920 <InitializeParametersFromEEPROM()+0x114>)
    5876:	6018      	str	r0, [r3, #0]
    5878:	e7e7      	b.n	584a <InitializeParametersFromEEPROM()+0x3e>
    else if (((i > 6) && (i < 11)) && (bytParameter < 9)) {intGainLevel[i - 7] = int(bytParameter);}
    587a:	f1ab 0207 	sub.w	r2, fp, #7
    587e:	2a03      	cmp	r2, #3
    5880:	d801      	bhi.n	5886 <InitializeParametersFromEEPROM()+0x7a>
    5882:	2900      	cmp	r1, #0
    5884:	d13d      	bne.n	5902 <InitializeParametersFromEEPROM()+0xf6>
    else if ((i == 11) && ((bytParameter == 30) || (bytParameter == 60))) {intBandwidth = 100 * int(bytParameter);} 
    5886:	f1bb 0f0b 	cmp.w	fp, #11
    588a:	d02d      	beq.n	58e8 <InitializeParametersFromEEPROM()+0xdc>
    else if ((i == 12) && (bytParameter <7))  {intBaudPtr =  int(bytParameter);}
    588c:	f1bb 0f0c 	cmp.w	fp, #12
    5890:	d127      	bne.n	58e2 <InitializeParametersFromEEPROM()+0xd6>
    5892:	2806      	cmp	r0, #6
    5894:	d825      	bhi.n	58e2 <InitializeParametersFromEEPROM()+0xd6>
    5896:	4b23      	ldr	r3, [pc, #140]	; (5924 <InitializeParametersFromEEPROM()+0x118>)
    5898:	6018      	str	r0, [r3, #0]
   }
  //Serial.println("Init from EEPROM Complete");
  blnInitializedFromEEPROM = true; 
    589a:	2301      	movs	r3, #1
    589c:	7033      	strb	r3, [r6, #0]
  return;
}  //  End InitializeParametersFromEEPROM ****************************************************************
    589e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if ((i == 3) && (bytParameter < 9)) {intFadeRatePtr = int(bytParameter);}
    58a2:	2808      	cmp	r0, #8
    58a4:	bf8c      	ite	hi
    58a6:	2100      	movhi	r1, #0
    58a8:	2101      	movls	r1, #1
    58aa:	f1bb 0f03 	cmp.w	fp, #3
    58ae:	d105      	bne.n	58bc <InitializeParametersFromEEPROM()+0xb0>
    58b0:	b121      	cbz	r1, 58bc <InitializeParametersFromEEPROM()+0xb0>
    58b2:	6038      	str	r0, [r7, #0]
    58b4:	e7c9      	b.n	584a <InitializeParametersFromEEPROM()+0x3e>
    if ((i == 1) && ((bytParameter ==2) || (bytParameter ==4))) {intMultipaths = int(bytParameter) ;}
    58b6:	f8c8 0000 	str.w	r0, [r8]
    58ba:	e7c6      	b.n	584a <InitializeParametersFromEEPROM()+0x3e>
    else if ((i == 4) && (bytParameter < 41)) {intTuneOffset = 10 * (int(bytParameter) - 20);}
    58bc:	f1bb 0f04 	cmp.w	fp, #4
    58c0:	d107      	bne.n	58d2 <InitializeParametersFromEEPROM()+0xc6>
    58c2:	b132      	cbz	r2, 58d2 <InitializeParametersFromEEPROM()+0xc6>
    58c4:	3814      	subs	r0, #20
    58c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    58ca:	0040      	lsls	r0, r0, #1
    58cc:	f8c9 0000 	str.w	r0, [r9]
    58d0:	e7bb      	b.n	584a <InitializeParametersFromEEPROM()+0x3e>
    else if ((i == 5) && (bytParameter < 9)) {intFMDevPtr = int(bytParameter);}
    58d2:	f1bb 0f05 	cmp.w	fp, #5
    58d6:	d1c9      	bne.n	586c <InitializeParametersFromEEPROM()+0x60>
    58d8:	2900      	cmp	r1, #0
    58da:	d0c7      	beq.n	586c <InitializeParametersFromEEPROM()+0x60>
    58dc:	f8ca 0000 	str.w	r0, [sl]
    58e0:	e7b3      	b.n	584a <InitializeParametersFromEEPROM()+0x3e>
  for (int i = 1; i <= 12; i++) //Read 12 initialization values and verify in range
    58e2:	2c0d      	cmp	r4, #13
    58e4:	d0d9      	beq.n	589a <InitializeParametersFromEEPROM()+0x8e>
    58e6:	e7b0      	b.n	584a <InitializeParametersFromEEPROM()+0x3e>
    else if ((i == 11) && ((bytParameter == 30) || (bytParameter == 60))) {intBandwidth = 100 * int(bytParameter);} 
    58e8:	281e      	cmp	r0, #30
    58ea:	d001      	beq.n	58f0 <InitializeParametersFromEEPROM()+0xe4>
    58ec:	283c      	cmp	r0, #60	; 0x3c
    58ee:	d1ac      	bne.n	584a <InitializeParametersFromEEPROM()+0x3e>
    58f0:	b200      	sxth	r0, r0
    58f2:	4b0d      	ldr	r3, [pc, #52]	; (5928 <InitializeParametersFromEEPROM()+0x11c>)
    58f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    58f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    58fc:	0080      	lsls	r0, r0, #2
    58fe:	6018      	str	r0, [r3, #0]
    5900:	e7a3      	b.n	584a <InitializeParametersFromEEPROM()+0x3e>
    else if (((i > 6) && (i < 11)) && (bytParameter < 9)) {intGainLevel[i - 7] = int(bytParameter);}
    5902:	4b0a      	ldr	r3, [pc, #40]	; (592c <InitializeParametersFromEEPROM()+0x120>)
    5904:	eb03 028b 	add.w	r2, r3, fp, lsl #2
    5908:	f842 0c1c 	str.w	r0, [r2, #-28]
    590c:	e79d      	b.n	584a <InitializeParametersFromEEPROM()+0x3e>
    590e:	bf00      	nop
    5910:	20009cba 	.word	0x20009cba
    5914:	200136e9 	.word	0x200136e9
    5918:	20009a2c 	.word	0x20009a2c
    591c:	20012cac 	.word	0x20012cac
    5920:	20009a28 	.word	0x20009a28
    5924:	20009a14 	.word	0x20009a14
    5928:	20009a10 	.word	0x20009a10
    592c:	20009a30 	.word	0x20009a30
    5930:	20009a24 	.word	0x20009a24
    5934:	20012cbc 	.word	0x20012cbc
    5938:	20009a48 	.word	0x20009a48

0000593c <_GLOBAL__sub_I_tft>:
    else if (blnColon == true) {strParameter += inChar;}//Accumulate the parameter
    else {strMode += inChar;} //Accumulate the mode
  }//End while Serial.available
  intSerialCmdMode = -1; intSerialCmdParam = -1;

}// End Main Loop *******************************************************************************
    593c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5940:	b083      	sub	sp, #12
			if (first_update == NULL) {
    5942:	4dc7      	ldr	r5, [pc, #796]	; (5c60 <_GLOBAL__sub_I_tft+0x324>)
    EEPROMClass()                        { eeprom_initialize(); }
    5944:	f015 ff16 	bl	1b774 <eeprom_initialize>
ST7796_t3 tft = ST7796_t3(TFT_CS, TFT_DC);
    5948:	23ff      	movs	r3, #255	; 0xff
    594a:	2209      	movs	r2, #9
    594c:	210a      	movs	r1, #10
    594e:	48c5      	ldr	r0, [pc, #788]	; (5c64 <_GLOBAL__sub_I_tft+0x328>)
    5950:	f014 fb42 	bl	19fd8 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)>
Encoder2 ENC1(ENC1A_Pin, ENC1B_Pin); // (right) modes
    5954:	221b      	movs	r2, #27
    5956:	2126      	movs	r1, #38	; 0x26
    5958:	48c3      	ldr	r0, [pc, #780]	; (5c68 <_GLOBAL__sub_I_tft+0x32c>)
    595a:	f7fc fd23 	bl	23a4 <Encoder2::Encoder2(unsigned char, unsigned char)>
Encoder2 ENC2(ENC2A_Pin, ENC2B_Pin); // (left) parameters
    595e:	2228      	movs	r2, #40	; 0x28
    5960:	2129      	movs	r1, #41	; 0x29
    5962:	48c2      	ldr	r0, [pc, #776]	; (5c6c <_GLOBAL__sub_I_tft+0x330>)
    5964:	f7fc fd1e 	bl	23a4 <Encoder2::Encoder2(unsigned char, unsigned char)>
Bounce debouncer1 = Bounce();
    5968:	48c1      	ldr	r0, [pc, #772]	; (5c70 <_GLOBAL__sub_I_tft+0x334>)
    596a:	f00f fa1f 	bl	14dac <Bounce::Bounce()>
Bounce debouncer2 = Bounce();
    596e:	48c1      	ldr	r0, [pc, #772]	; (5c74 <_GLOBAL__sub_I_tft+0x338>)
    5970:	f00f fa1c 	bl	14dac <Bounce::Bounce()>
		num_inputs(ninput), inputQueue(iqueue) {
    5974:	4ac0      	ldr	r2, [pc, #768]	; (5c78 <_GLOBAL__sub_I_tft+0x33c>)
    5976:	2300      	movs	r3, #0
#define AUDIO_HEADPHONE_LINEIN 1

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
    5978:	49c0      	ldr	r1, [pc, #768]	; (5c7c <_GLOBAL__sub_I_tft+0x340>)
    597a:	48c1      	ldr	r0, [pc, #772]	; (5c80 <_GLOBAL__sub_I_tft+0x344>)
    597c:	4ec1      	ldr	r6, [pc, #772]	; (5c84 <_GLOBAL__sub_I_tft+0x348>)
    597e:	6113      	str	r3, [r2, #16]
			active = false;
    5980:	8113      	strh	r3, [r2, #8]
			destination_list = NULL;
    5982:	60d3      	str	r3, [r2, #12]
    5984:	6008      	str	r0, [r1, #0]
    5986:	200a      	movs	r0, #10
			if (first_update == NULL) {
    5988:	682b      	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    598a:	6016      	str	r6, [r2, #0]
    598c:	7208      	strb	r0, [r1, #8]
			if (first_update == NULL) {
    598e:	2b00      	cmp	r3, #0
    5990:	f000 84ab 	beq.w	62ea <_GLOBAL__sub_I_tft+0x9ae>
				for (p=first_update; p->next_update; p = p->next_update) ;
    5994:	4619      	mov	r1, r3
    5996:	695b      	ldr	r3, [r3, #20]
    5998:	2b00      	cmp	r3, #0
    599a:	d1fb      	bne.n	5994 <_GLOBAL__sub_I_tft+0x58>
				p->next_update = this;
    599c:	614a      	str	r2, [r1, #20]
			next_update = NULL;
    599e:	2400      	movs	r4, #0
#include <DMAChannel.h>  // github.com/PaulStoffregen/cores/blob/master/teensy4/DMAChannel.h

class AudioInputI2S : public AudioStream
{
public:
	AudioInputI2S(void) : AudioStream(0, NULL) { begin(); }
    59a0:	4bb9      	ldr	r3, [pc, #740]	; (5c88 <_GLOBAL__sub_I_tft+0x34c>)
    59a2:	48b5      	ldr	r0, [pc, #724]	; (5c78 <_GLOBAL__sub_I_tft+0x33c>)
    59a4:	6013      	str	r3, [r2, #0]
    59a6:	6154      	str	r4, [r2, #20]
			cpu_cycles = 0;
    59a8:	6054      	str	r4, [r2, #4]
			numConnections = 0;
    59aa:	7294      	strb	r4, [r2, #10]
    59ac:	f005 fe58 	bl	b660 <AudioInputI2S::begin()>
		num_inputs(ninput), inputQueue(iqueue) {
    59b0:	4ab6      	ldr	r2, [pc, #728]	; (5c8c <_GLOBAL__sub_I_tft+0x350>)
			if (first_update == NULL) {
    59b2:	682b      	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    59b4:	4611      	mov	r1, r2
			destination_list = NULL;
    59b6:	60d4      	str	r4, [r2, #12]
		num_inputs(ninput), inputQueue(iqueue) {
    59b8:	f841 6b18 	str.w	r6, [r1], #24
    59bc:	6111      	str	r1, [r2, #16]
			active = false;
    59be:	f44f 7100 	mov.w	r1, #512	; 0x200
				inputQueue[i] = NULL;
    59c2:	e9c2 4406 	strd	r4, r4, [r2, #24]
			active = false;
    59c6:	8111      	strh	r1, [r2, #8]
			if (first_update == NULL) {
    59c8:	2b00      	cmp	r3, #0
    59ca:	f000 8496 	beq.w	62fa <_GLOBAL__sub_I_tft+0x9be>
				for (p=first_update; p->next_update; p = p->next_update) ;
    59ce:	4619      	mov	r1, r3
    59d0:	695b      	ldr	r3, [r3, #20]
    59d2:	2b00      	cmp	r3, #0
    59d4:	d1fb      	bne.n	59ce <_GLOBAL__sub_I_tft+0x92>
				p->next_update = this;
    59d6:	614a      	str	r2, [r1, #20]
			next_update = NULL;
    59d8:	2400      	movs	r4, #0
#if !defined(KINETISL)

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
    59da:	4bad      	ldr	r3, [pc, #692]	; (5c90 <_GLOBAL__sub_I_tft+0x354>)
	AudioFilterFIR(void): AudioStream(1,inputQueueArray), coeff_p(NULL) {
    59dc:	f8df 9338 	ldr.w	r9, [pc, #824]	; 5d18 <_GLOBAL__sub_I_tft+0x3dc>
	AudioSynthWaveformSine() : AudioStream(0, NULL), magnitude(16384) {}
    59e0:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
    59e4:	6013      	str	r3, [r2, #0]
    59e6:	4fab      	ldr	r7, [pc, #684]	; (5c94 <_GLOBAL__sub_I_tft+0x358>)
    59e8:	f8df 8330 	ldr.w	r8, [pc, #816]	; 5d1c <_GLOBAL__sub_I_tft+0x3e0>
    59ec:	48a7      	ldr	r0, [pc, #668]	; (5c8c <_GLOBAL__sub_I_tft+0x350>)
    59ee:	6154      	str	r4, [r2, #20]
			cpu_cycles = 0;
    59f0:	6054      	str	r4, [r2, #4]
			numConnections = 0;
    59f2:	7294      	strb	r4, [r2, #10]
    59f4:	f8df a328 	ldr.w	sl, [pc, #808]	; 5d20 <_GLOBAL__sub_I_tft+0x3e4>
    59f8:	f006 f9a0 	bl	bd3c <AudioOutputI2S::begin()>
    59fc:	f109 0218 	add.w	r2, r9, #24
    5a00:	2101      	movs	r1, #1
    5a02:	4648      	mov	r0, r9
    5a04:	f7fc f930 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5a08:	f108 0218 	add.w	r2, r8, #24
    5a0c:	f8c9 7000 	str.w	r7, [r9]
    5a10:	2101      	movs	r1, #1
    5a12:	4640      	mov	r0, r8
    5a14:	f8c9 401c 	str.w	r4, [r9, #28]
    5a18:	f8df 9308 	ldr.w	r9, [pc, #776]	; 5d24 <_GLOBAL__sub_I_tft+0x3e8>
    5a1c:	f7fc f924 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5a20:	f10a 0218 	add.w	r2, sl, #24
    5a24:	f8c8 7000 	str.w	r7, [r8]
    5a28:	2101      	movs	r1, #1
    5a2a:	4650      	mov	r0, sl
    5a2c:	f8c8 401c 	str.w	r4, [r8, #28]
    5a30:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 5d28 <_GLOBAL__sub_I_tft+0x3ec>
    5a34:	f7fc f918 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5a38:	f109 0218 	add.w	r2, r9, #24
    5a3c:	f8ca 7000 	str.w	r7, [sl]
    5a40:	2101      	movs	r1, #1
    5a42:	4648      	mov	r0, r9
    5a44:	f8ca 401c 	str.w	r4, [sl, #28]
    5a48:	f7fc f90e 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5a4c:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 5d0c <_GLOBAL__sub_I_tft+0x3d0>
    5a50:	f108 0218 	add.w	r2, r8, #24
    5a54:	f8c9 7000 	str.w	r7, [r9]
    5a58:	2101      	movs	r1, #1
    5a5a:	4640      	mov	r0, r8
    5a5c:	f8c9 401c 	str.w	r4, [r9, #28]
    5a60:	f7fc f902 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5a64:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 5d2c <_GLOBAL__sub_I_tft+0x3f0>
    5a68:	f8c8 7000 	str.w	r7, [r8]
    5a6c:	4622      	mov	r2, r4
    5a6e:	4f8a      	ldr	r7, [pc, #552]	; (5c98 <_GLOBAL__sub_I_tft+0x35c>)
    5a70:	4621      	mov	r1, r4
    5a72:	f8c8 401c 	str.w	r4, [r8, #28]
    5a76:	4650      	mov	r0, sl


class AudioSynthWaveformSineModulated : public AudioStream
{
public:
	AudioSynthWaveformSineModulated() : AudioStream(1, inputQueueArray), magnitude(16384) {}
    5a78:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 5d30 <_GLOBAL__sub_I_tft+0x3f4>
	AudioSynthWaveformSine() : AudioStream(0, NULL), magnitude(16384) {}
    5a7c:	f7fc f8f4 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5a80:	4622      	mov	r2, r4
    5a82:	4621      	mov	r1, r4
    5a84:	4648      	mov	r0, r9
    5a86:	f8ca 7000 	str.w	r7, [sl]
    5a8a:	f8ca b020 	str.w	fp, [sl, #32]
    5a8e:	f7fc f8eb 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
	AudioSynthWaveformSineModulated() : AudioStream(1, inputQueueArray), magnitude(16384) {}
    5a92:	f108 0220 	add.w	r2, r8, #32
    5a96:	2101      	movs	r1, #1
    5a98:	4640      	mov	r0, r8
	AudioSynthWaveformSine() : AudioStream(0, NULL), magnitude(16384) {}
    5a9a:	f8c9 7000 	str.w	r7, [r9]
    5a9e:	f8c9 b020 	str.w	fp, [r9, #32]
	AudioSynthWaveformSineModulated() : AudioStream(1, inputQueueArray), magnitude(16384) {}
    5aa2:	f7fc f8e1 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5aa6:	4b7d      	ldr	r3, [pc, #500]	; (5c9c <_GLOBAL__sub_I_tft+0x360>)
		num_inputs(ninput), inputQueue(iqueue) {
    5aa8:	4a7d      	ldr	r2, [pc, #500]	; (5ca0 <_GLOBAL__sub_I_tft+0x364>)
    5aaa:	f8c8 3000 	str.w	r3, [r8]
			if (first_update == NULL) {
    5aae:	682b      	ldr	r3, [r5, #0]
    5ab0:	f8c8 b024 	str.w	fp, [r8, #36]	; 0x24
		num_inputs(ninput), inputQueue(iqueue) {
    5ab4:	6016      	str	r6, [r2, #0]
    5ab6:	6114      	str	r4, [r2, #16]
			active = false;
    5ab8:	8114      	strh	r4, [r2, #8]
			destination_list = NULL;
    5aba:	60d4      	str	r4, [r2, #12]
			if (first_update == NULL) {
    5abc:	2b00      	cmp	r3, #0
    5abe:	f000 8419 	beq.w	62f4 <_GLOBAL__sub_I_tft+0x9b8>
				for (p=first_update; p->next_update; p = p->next_update) ;
    5ac2:	4619      	mov	r1, r3
    5ac4:	695b      	ldr	r3, [r3, #20]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d1fb      	bne.n	5ac2 <_GLOBAL__sub_I_tft+0x186>
				p->next_update = this;
    5aca:	614a      	str	r2, [r1, #20]
class AudioSynthNoiseWhite : public AudioStream
{
public:
	AudioSynthNoiseWhite() : AudioStream(0, NULL) {
		level = 0;
		seed = 1 + instance_count++;
    5acc:	4975      	ldr	r1, [pc, #468]	; (5ca4 <_GLOBAL__sub_I_tft+0x368>)
			next_update = NULL;
    5ace:	2400      	movs	r4, #0
	AudioSynthNoiseWhite() : AudioStream(0, NULL) {
    5ad0:	4b75      	ldr	r3, [pc, #468]	; (5ca8 <_GLOBAL__sub_I_tft+0x36c>)
	AudioSynthWaveformSine() : AudioStream(0, NULL), magnitude(16384) {}
    5ad2:	f8df 8260 	ldr.w	r8, [pc, #608]	; 5d34 <_GLOBAL__sub_I_tft+0x3f8>
    5ad6:	6013      	str	r3, [r2, #0]
		seed = 1 + instance_count++;
    5ad8:	880b      	ldrh	r3, [r1, #0]
    5ada:	4640      	mov	r0, r8
    5adc:	6154      	str	r4, [r2, #20]
    5ade:	3301      	adds	r3, #1
			cpu_cycles = 0;
    5ae0:	6054      	str	r4, [r2, #4]
			numConnections = 0;
    5ae2:	7294      	strb	r4, [r2, #10]
    5ae4:	800b      	strh	r3, [r1, #0]
    5ae6:	4621      	mov	r1, r4
    5ae8:	61d3      	str	r3, [r2, #28]
		level = 0;
    5aea:	6194      	str	r4, [r2, #24]
    5aec:	4622      	mov	r2, r4
    5aee:	f7fc f8bb 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5af2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    5af6:	f8c8 7000 	str.w	r7, [r8]
    5afa:	f8c8 3020 	str.w	r3, [r8, #32]
AudioEffectDelay                delayI; // Delay for audio I paths 1, 2,(multi tap)
    5afe:	486b      	ldr	r0, [pc, #428]	; (5cac <_GLOBAL__sub_I_tft+0x370>)
#include "utility/dspinst.h"

class AudioEffectMultiply : public AudioStream
{
public:
	AudioEffectMultiply() : AudioStream(2, inputQueueArray) { }
    5b00:	f8df 8234 	ldr.w	r8, [pc, #564]	; 5d38 <_GLOBAL__sub_I_tft+0x3fc>
    5b04:	f7fc f932 	bl	1d6c <AudioEffectDelay::AudioEffectDelay()>
    5b08:	4f69      	ldr	r7, [pc, #420]	; (5cb0 <_GLOBAL__sub_I_tft+0x374>)
    5b0a:	f8df a230 	ldr.w	sl, [pc, #560]	; 5d3c <_GLOBAL__sub_I_tft+0x400>
AudioEffectDelay                delayQ; // Delay for audio Q paths 1, 2,(multi tap)
    5b0e:	4869      	ldr	r0, [pc, #420]	; (5cb4 <_GLOBAL__sub_I_tft+0x378>)
    5b10:	f7fc f92c 	bl	1d6c <AudioEffectDelay::AudioEffectDelay()>
    5b14:	f8df 9228 	ldr.w	r9, [pc, #552]	; 5d40 <_GLOBAL__sub_I_tft+0x404>
    5b18:	f108 0218 	add.w	r2, r8, #24
    5b1c:	2102      	movs	r1, #2
    5b1e:	4640      	mov	r0, r8
    5b20:	f7fc f8a2 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5b24:	f10a 0218 	add.w	r2, sl, #24
    5b28:	f8c8 7000 	str.w	r7, [r8]
    5b2c:	2102      	movs	r1, #2
    5b2e:	f8df 8214 	ldr.w	r8, [pc, #532]	; 5d44 <_GLOBAL__sub_I_tft+0x408>
    5b32:	4650      	mov	r0, sl
    5b34:	f7fc f898 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5b38:	f109 0218 	add.w	r2, r9, #24
    5b3c:	f8ca 7000 	str.w	r7, [sl]
    5b40:	2102      	movs	r1, #2
    5b42:	4648      	mov	r0, r9
	AudioAmplifier(void) : AudioStream(1, inputQueueArray), multiplier(65536) {
    5b44:	f8df a200 	ldr.w	sl, [pc, #512]	; 5d48 <_GLOBAL__sub_I_tft+0x40c>
    5b48:	f7fc f88e 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5b4c:	f108 0218 	add.w	r2, r8, #24
    5b50:	2102      	movs	r1, #2
    5b52:	f8c9 7000 	str.w	r7, [r9]
    5b56:	4640      	mov	r0, r8
    5b58:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    5b5c:	f7fc f884 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5b60:	f8c8 7000 	str.w	r7, [r8]
AudioMixer4                     mixIQ12;// Mixer to combine  Delays for paths 1 and 2
    5b64:	4854      	ldr	r0, [pc, #336]	; (5cb8 <_GLOBAL__sub_I_tft+0x37c>)
    5b66:	f7fc f933 	bl	1dd0 <AudioMixer4::AudioMixer4()>
AudioMixer4                     mixIQ34;// Mixer to combine  Delays for paths 3 and 4
    5b6a:	4854      	ldr	r0, [pc, #336]	; (5cbc <_GLOBAL__sub_I_tft+0x380>)
    5b6c:	f7fc f930 	bl	1dd0 <AudioMixer4::AudioMixer4()>
AudioMixer4                     mixIQ1234;// Mixer to combine mixIQ12 and mixIQ34
    5b70:	4853      	ldr	r0, [pc, #332]	; (5cc0 <_GLOBAL__sub_I_tft+0x384>)
    5b72:	f7fc f92d 	bl	1dd0 <AudioMixer4::AudioMixer4()>
AudioMixer4                     mixChannels;// Mixer to combine ch 1,2,3,4  and White Noise
    5b76:	4853      	ldr	r0, [pc, #332]	; (5cc4 <_GLOBAL__sub_I_tft+0x388>)
    5b78:	f7fc f92a 	bl	1dd0 <AudioMixer4::AudioMixer4()>
    5b7c:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 5d4c <_GLOBAL__sub_I_tft+0x410>
AudioMixer4                     mixInpSel;// Mixer to select InputTestWaveform, or external inputs 1(L) or 2 (R) 
    5b80:	4851      	ldr	r0, [pc, #324]	; (5cc8 <_GLOBAL__sub_I_tft+0x38c>)
    5b82:	f7fc f925 	bl	1dd0 <AudioMixer4::AudioMixer4()>
    5b86:	4f51      	ldr	r7, [pc, #324]	; (5ccc <_GLOBAL__sub_I_tft+0x390>)
AudioMixer4                     mixPathSel;// Mixer to select direct path or Up/Down mixer path
    5b88:	4851      	ldr	r0, [pc, #324]	; (5cd0 <_GLOBAL__sub_I_tft+0x394>)
    5b8a:	f7fc f921 	bl	1dd0 <AudioMixer4::AudioMixer4()>
    5b8e:	f108 021c 	add.w	r2, r8, #28
    5b92:	2101      	movs	r1, #1
    5b94:	4640      	mov	r0, r8
    5b96:	f7fc f867 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    5b9a:	f107 021c 	add.w	r2, r7, #28
    5b9e:	2101      	movs	r1, #1
    5ba0:	4638      	mov	r0, r7
    5ba2:	f8c8 a000 	str.w	sl, [r8]
    5ba6:	f8c8 9018 	str.w	r9, [r8, #24]
    5baa:	f7fc f85d 	bl	1c68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
AudioAnalyzePeak                ppLPInput; //p-p value of the filLPIn_0_FIR output
    5bae:	4849      	ldr	r0, [pc, #292]	; (5cd4 <_GLOBAL__sub_I_tft+0x398>)
    5bb0:	f8c7 a000 	str.w	sl, [r7]
    5bb4:	f8c7 9018 	str.w	r9, [r7, #24]
    5bb8:	f7fc f87a 	bl	1cb0 <AudioAnalyzePeak::AudioAnalyzePeak()>
AudioAnalyzePeak                ppi2s0In;//  Probe to measure input i2s0 p-p value (Used in auto test and Auto level)
    5bbc:	4846      	ldr	r0, [pc, #280]	; (5cd8 <_GLOBAL__sub_I_tft+0x39c>)
    5bbe:	f7fc f877 	bl	1cb0 <AudioAnalyzePeak::AudioAnalyzePeak()>
AudioAnalyzePeak                ppi2s1In;//  Probe to measure input i2s1 p-p value (Used in auto test and Auto level)
    5bc2:	4846      	ldr	r0, [pc, #280]	; (5cdc <_GLOBAL__sub_I_tft+0x3a0>)
    5bc4:	f7fc f874 	bl	1cb0 <AudioAnalyzePeak::AudioAnalyzePeak()>
AudioAnalyzePeak                ppAmpRightOut;// Probe to measure AmpRightOut p-p value (Used in auto test)
    5bc8:	4845      	ldr	r0, [pc, #276]	; (5ce0 <_GLOBAL__sub_I_tft+0x3a4>)
    5bca:	f7fc f871 	bl	1cb0 <AudioAnalyzePeak::AudioAnalyzePeak()>
AudioAnalyzePeak                ppAmpLeftOut;// Probe to measure AmpRightOut p-p value (Used in auto test)
    5bce:	4845      	ldr	r0, [pc, #276]	; (5ce4 <_GLOBAL__sub_I_tft+0x3a8>)
    5bd0:	f7fc f86e 	bl	1cb0 <AudioAnalyzePeak::AudioAnalyzePeak()>
AudioAnalyzeRMS                 rmsLPInput;//  rms probe to compute rms value of filLPIn_0_FIR output
    5bd4:	4844      	ldr	r0, [pc, #272]	; (5ce8 <_GLOBAL__sub_I_tft+0x3ac>)
    5bd6:	f7fc f897 	bl	1d08 <AudioAnalyzeRMS::AudioAnalyzeRMS()>
		num_inputs(ninput), inputQueue(iqueue) {
    5bda:	4a44      	ldr	r2, [pc, #272]	; (5cec <_GLOBAL__sub_I_tft+0x3b0>)
			active = false;
    5bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
		num_inputs(ninput), inputQueue(iqueue) {
    5be0:	f502 53a2 	add.w	r3, r2, #5184	; 0x1440
				inputQueue[i] = NULL;
    5be4:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
			active = false;
    5be8:	8111      	strh	r1, [r2, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    5bea:	6113      	str	r3, [r2, #16]
			if (first_update == NULL) {
    5bec:	682b      	ldr	r3, [r5, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    5bee:	6016      	str	r6, [r2, #0]
			destination_list = NULL;
    5bf0:	60d4      	str	r4, [r2, #12]
				inputQueue[i] = NULL;
    5bf2:	f8c0 4440 	str.w	r4, [r0, #1088]	; 0x440
			if (first_update == NULL) {
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	f000 837a 	beq.w	62f0 <_GLOBAL__sub_I_tft+0x9b4>
				for (p=first_update; p->next_update; p = p->next_update) ;
    5bfc:	4619      	mov	r1, r3
    5bfe:	695b      	ldr	r3, [r3, #20]
    5c00:	2b00      	cmp	r3, #0
    5c02:	d1fb      	bne.n	5bfc <_GLOBAL__sub_I_tft+0x2c0>
				p->next_update = this;
    5c04:	614a      	str	r2, [r1, #20]
			next_update = NULL;
    5c06:	2400      	movs	r4, #0
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
    5c08:	4939      	ldr	r1, [pc, #228]	; (5cf0 <_GLOBAL__sub_I_tft+0x3b4>)
    5c0a:	4b3a      	ldr	r3, [pc, #232]	; (5cf4 <_GLOBAL__sub_I_tft+0x3b8>)
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
    5c0c:	2702      	movs	r7, #2
			next_update = NULL;
    5c0e:	6154      	str	r4, [r2, #20]
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
    5c10:	2603      	movs	r6, #3
			cpu_cycles = 0;
    5c12:	6054      	str	r4, [r2, #4]
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
    5c14:	2501      	movs	r5, #1
			numConnections = 0;
    5c16:	7294      	strb	r4, [r2, #10]
    5c18:	6011      	str	r1, [r2, #0]
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
    5c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
    5c1e:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
    5c22:	4622      	mov	r2, r4
    5c24:	2301      	movs	r3, #1
	  window(AudioWindowHanning1024), state(0), outputflag(false) {
    5c26:	f880 443c 	strb.w	r4, [r0, #1084]	; 0x43c
    5c2a:	f880 443d 	strb.w	r4, [r0, #1085]	; 0x43d
		arm_cfft_radix4_init_q15(&fft_inst, 1024, 0, 1);
    5c2e:	4832      	ldr	r0, [pc, #200]	; (5cf8 <_GLOBAL__sub_I_tft+0x3bc>)
    5c30:	f018 f83c 	bl	1dcac <arm_cfft_radix4_init_q15>
AudioAnalyzeRMS                 rmsMixIQ1234Out; // RMS measure of mixIQOut34 for Average computation
    5c34:	4831      	ldr	r0, [pc, #196]	; (5cfc <_GLOBAL__sub_I_tft+0x3c0>)
    5c36:	f7fc f867 	bl	1d08 <AudioAnalyzeRMS::AudioAnalyzeRMS()>
AudioAnalyzeRMS                 rmsNoise; // Probe to compute rms of BW filtered WGN 
    5c3a:	4831      	ldr	r0, [pc, #196]	; (5d00 <_GLOBAL__sub_I_tft+0x3c4>)
    5c3c:	f7fc f864 	bl	1d08 <AudioAnalyzeRMS::AudioAnalyzeRMS()>
AudioAnalyzeRMS                 rmsDelayI0;  //Probe to compute rmsValue of output of Delay I0 tap.
    5c40:	4830      	ldr	r0, [pc, #192]	; (5d04 <_GLOBAL__sub_I_tft+0x3c8>)
    5c42:	f7fc f861 	bl	1d08 <AudioAnalyzeRMS::AudioAnalyzeRMS()>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
    5c46:	4830      	ldr	r0, [pc, #192]	; (5d08 <_GLOBAL__sub_I_tft+0x3cc>)
    5c48:	f014 fca6 	bl	1a598 <AudioConnection::AudioConnection()>
    5c4c:	4b1e      	ldr	r3, [pc, #120]	; (5cc8 <_GLOBAL__sub_I_tft+0x38c>)
    5c4e:	4622      	mov	r2, r4
    5c50:	492e      	ldr	r1, [pc, #184]	; (5d0c <_GLOBAL__sub_I_tft+0x3d0>)
    5c52:	9400      	str	r4, [sp, #0]
    5c54:	482c      	ldr	r0, [pc, #176]	; (5d08 <_GLOBAL__sub_I_tft+0x3cc>)
    5c56:	f014 fd13 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pcInp_1(InputTestWaveform, 0, mixInpSel, 0);//Test sine wave to input 0 of input mixer
    5c5a:	4a2d      	ldr	r2, [pc, #180]	; (5d10 <_GLOBAL__sub_I_tft+0x3d4>)
    5c5c:	492d      	ldr	r1, [pc, #180]	; (5d14 <_GLOBAL__sub_I_tft+0x3d8>)
    5c5e:	e077      	b.n	5d50 <_GLOBAL__sub_I_tft+0x414>
    5c60:	2000adc4 	.word	0x2000adc4
    5c64:	2001355c 	.word	0x2001355c
    5c68:	2000a848 	.word	0x2000a848
    5c6c:	2000a868 	.word	0x2000a868
    5c70:	2000cb10 	.word	0x2000cb10
    5c74:	2000cb28 	.word	0x2000cb28
    5c78:	20012c50 	.word	0x20012c50
    5c7c:	200133a8 	.word	0x200133a8
    5c80:	20003d7c 	.word	0x20003d7c
    5c84:	20003c6c 	.word	0x20003c6c
    5c88:	20003c78 	.word	0x20003c78
    5c8c:	20012c68 	.word	0x20012c68
    5c90:	20003c9c 	.word	0x20003c9c
    5c94:	20003c90 	.word	0x20003c90
    5c98:	20003da4 	.word	0x20003da4
    5c9c:	20003db0 	.word	0x20003db0
    5ca0:	2001369c 	.word	0x2001369c
    5ca4:	200136cc 	.word	0x200136cc
    5ca8:	20003d98 	.word	0x20003d98
    5cac:	2000cb40 	.word	0x2000cb40
    5cb0:	20003d70 	.word	0x20003d70
    5cb4:	2000e110 	.word	0x2000e110
    5cb8:	20012d08 	.word	0x20012d08
    5cbc:	20012d78 	.word	0x20012d78
    5cc0:	20012d40 	.word	0x20012d40
    5cc4:	20012cd0 	.word	0x20012cd0
    5cc8:	20012db0 	.word	0x20012db0
    5ccc:	2000caf0 	.word	0x2000caf0
    5cd0:	20012de8 	.word	0x20012de8
    5cd4:	20013270 	.word	0x20013270
    5cd8:	20013294 	.word	0x20013294
    5cdc:	200132b8 	.word	0x200132b8
    5ce0:	2001324c 	.word	0x2001324c
    5ce4:	20013228 	.word	0x20013228
    5ce8:	2000a7b8 	.word	0x2000a7b8
    5cec:	20010704 	.word	0x20010704
    5cf0:	20003d64 	.word	0x20003d64
    5cf4:	20002c04 	.word	0x20002c04
    5cf8:	20011b48 	.word	0x20011b48
    5cfc:	2000a7e8 	.word	0x2000a7e8
    5d00:	2000a818 	.word	0x2000a818
    5d04:	2000a788 	.word	0x2000a788
    5d08:	200131c4 	.word	0x200131c4
    5d0c:	2000a888 	.word	0x2000a888
    5d10:	20009460 	.word	0x20009460
    5d14:	0001a735 	.word	0x0001a735
    5d18:	2001238c 	.word	0x2001238c
    5d1c:	20012648 	.word	0x20012648
    5d20:	20011b58 	.word	0x20011b58
    5d24:	200120d0 	.word	0x200120d0
    5d28:	20011e14 	.word	0x20011e14
    5d2c:	200134cc 	.word	0x200134cc
    5d30:	200134a4 	.word	0x200134a4
    5d34:	200134f0 	.word	0x200134f0
    5d38:	20012e80 	.word	0x20012e80
    5d3c:	20012e20 	.word	0x20012e20
    5d40:	20012e40 	.word	0x20012e40
    5d44:	20012e60 	.word	0x20012e60
    5d48:	20003c84 	.word	0x20003c84
    5d4c:	2000cad0 	.word	0x2000cad0
    5d50:	48a4      	ldr	r0, [pc, #656]	; (5fe4 <_GLOBAL__sub_I_tft+0x6a8>)
    5d52:	f019 ff19 	bl	1fb88 <__aeabi_atexit>
    5d56:	48a4      	ldr	r0, [pc, #656]	; (5fe8 <_GLOBAL__sub_I_tft+0x6ac>)
    5d58:	f014 fc1e 	bl	1a598 <AudioConnection::AudioConnection()>
    5d5c:	4ba3      	ldr	r3, [pc, #652]	; (5fec <_GLOBAL__sub_I_tft+0x6b0>)
    5d5e:	4622      	mov	r2, r4
    5d60:	49a3      	ldr	r1, [pc, #652]	; (5ff0 <_GLOBAL__sub_I_tft+0x6b4>)
    5d62:	9700      	str	r7, [sp, #0]
    5d64:	48a0      	ldr	r0, [pc, #640]	; (5fe8 <_GLOBAL__sub_I_tft+0x6ac>)
    5d66:	f014 fc8b 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pcInp_2(i2s0, 0, mixInpSel, 2);// Input pin 0 of  i2s0 to input 2 of input mixer (Left)
    5d6a:	4aa2      	ldr	r2, [pc, #648]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5d6c:	49a2      	ldr	r1, [pc, #648]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5d6e:	489e      	ldr	r0, [pc, #632]	; (5fe8 <_GLOBAL__sub_I_tft+0x6ac>)
    5d70:	f019 ff0a 	bl	1fb88 <__aeabi_atexit>
    5d74:	48a1      	ldr	r0, [pc, #644]	; (5ffc <_GLOBAL__sub_I_tft+0x6c0>)
    5d76:	f014 fc0f 	bl	1a598 <AudioConnection::AudioConnection()>
    5d7a:	4b9c      	ldr	r3, [pc, #624]	; (5fec <_GLOBAL__sub_I_tft+0x6b0>)
    5d7c:	2201      	movs	r2, #1
    5d7e:	499c      	ldr	r1, [pc, #624]	; (5ff0 <_GLOBAL__sub_I_tft+0x6b4>)
    5d80:	9600      	str	r6, [sp, #0]
    5d82:	489e      	ldr	r0, [pc, #632]	; (5ffc <_GLOBAL__sub_I_tft+0x6c0>)
    5d84:	f014 fc7c 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pcInp_3 (i2s0, 1, mixInpSel, 3);// Input pin 1 of  i2s0 to input 3 of input mixer (Right)
    5d88:	4a9a      	ldr	r2, [pc, #616]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5d8a:	499b      	ldr	r1, [pc, #620]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5d8c:	489b      	ldr	r0, [pc, #620]	; (5ffc <_GLOBAL__sub_I_tft+0x6c0>)
    5d8e:	f019 fefb 	bl	1fb88 <__aeabi_atexit>
    5d92:	489b      	ldr	r0, [pc, #620]	; (6000 <_GLOBAL__sub_I_tft+0x6c4>)
    5d94:	f014 fc00 	bl	1a598 <AudioConnection::AudioConnection()>
    5d98:	4b9a      	ldr	r3, [pc, #616]	; (6004 <_GLOBAL__sub_I_tft+0x6c8>)
    5d9a:	4622      	mov	r2, r4
    5d9c:	4994      	ldr	r1, [pc, #592]	; (5ff0 <_GLOBAL__sub_I_tft+0x6b4>)
    5d9e:	9400      	str	r4, [sp, #0]
    5da0:	4897      	ldr	r0, [pc, #604]	; (6000 <_GLOBAL__sub_I_tft+0x6c4>)
    5da2:	f014 fc6d 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pcInp_4(i2s0, 0, ppi2s0In, 0); // p-p measurement of input i2s0 pin 0
    5da6:	4a93      	ldr	r2, [pc, #588]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5da8:	4993      	ldr	r1, [pc, #588]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5daa:	4895      	ldr	r0, [pc, #596]	; (6000 <_GLOBAL__sub_I_tft+0x6c4>)
    5dac:	f019 feec 	bl	1fb88 <__aeabi_atexit>
    5db0:	4895      	ldr	r0, [pc, #596]	; (6008 <_GLOBAL__sub_I_tft+0x6cc>)
    5db2:	f014 fbf1 	bl	1a598 <AudioConnection::AudioConnection()>
    5db6:	4b95      	ldr	r3, [pc, #596]	; (600c <_GLOBAL__sub_I_tft+0x6d0>)
    5db8:	2201      	movs	r2, #1
    5dba:	498d      	ldr	r1, [pc, #564]	; (5ff0 <_GLOBAL__sub_I_tft+0x6b4>)
    5dbc:	9400      	str	r4, [sp, #0]
    5dbe:	4892      	ldr	r0, [pc, #584]	; (6008 <_GLOBAL__sub_I_tft+0x6cc>)
    5dc0:	f014 fc5e 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pcInp_5(i2s0, 1, ppi2s1In, 0); // p-p measurement of input i2s0 pin 1
    5dc4:	4a8b      	ldr	r2, [pc, #556]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5dc6:	498c      	ldr	r1, [pc, #560]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5dc8:	488f      	ldr	r0, [pc, #572]	; (6008 <_GLOBAL__sub_I_tft+0x6cc>)
    5dca:	f019 fedd 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc0_1(mixInpSel, filLPIn_0_FIR); //Input mixer to filLPIn_FIR;  
    5dce:	4a90      	ldr	r2, [pc, #576]	; (6010 <_GLOBAL__sub_I_tft+0x6d4>)
    5dd0:	4986      	ldr	r1, [pc, #536]	; (5fec <_GLOBAL__sub_I_tft+0x6b0>)
    5dd2:	4890      	ldr	r0, [pc, #576]	; (6014 <_GLOBAL__sub_I_tft+0x6d8>)
    5dd4:	f7fb ff36 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    5dd8:	4a86      	ldr	r2, [pc, #536]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5dda:	4987      	ldr	r1, [pc, #540]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5ddc:	488d      	ldr	r0, [pc, #564]	; (6014 <_GLOBAL__sub_I_tft+0x6d8>)
    5dde:	f019 fed3 	bl	1fb88 <__aeabi_atexit>
    5de2:	488d      	ldr	r0, [pc, #564]	; (6018 <_GLOBAL__sub_I_tft+0x6dc>)
    5de4:	f014 fbd8 	bl	1a598 <AudioConnection::AudioConnection()>
    5de8:	4b8c      	ldr	r3, [pc, #560]	; (601c <_GLOBAL__sub_I_tft+0x6e0>)
    5dea:	4622      	mov	r2, r4
    5dec:	4988      	ldr	r1, [pc, #544]	; (6010 <_GLOBAL__sub_I_tft+0x6d4>)
    5dee:	9400      	str	r4, [sp, #0]
    5df0:	4889      	ldr	r0, [pc, #548]	; (6018 <_GLOBAL__sub_I_tft+0x6dc>)
    5df2:	f014 fc45 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc0_2(filLPIn_0_FIR, 0, multUpmix, 0);// filLPIn to Upmixer
    5df6:	4a7f      	ldr	r2, [pc, #508]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5df8:	497f      	ldr	r1, [pc, #508]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5dfa:	4887      	ldr	r0, [pc, #540]	; (6018 <_GLOBAL__sub_I_tft+0x6dc>)
    5dfc:	f019 fec4 	bl	1fb88 <__aeabi_atexit>
    5e00:	4887      	ldr	r0, [pc, #540]	; (6020 <_GLOBAL__sub_I_tft+0x6e4>)
    5e02:	f014 fbc9 	bl	1a598 <AudioConnection::AudioConnection()>
    5e06:	4b87      	ldr	r3, [pc, #540]	; (6024 <_GLOBAL__sub_I_tft+0x6e8>)
    5e08:	4622      	mov	r2, r4
    5e0a:	4981      	ldr	r1, [pc, #516]	; (6010 <_GLOBAL__sub_I_tft+0x6d4>)
    5e0c:	9400      	str	r4, [sp, #0]
    5e0e:	4884      	ldr	r0, [pc, #528]	; (6020 <_GLOBAL__sub_I_tft+0x6e4>)
    5e10:	f014 fc36 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc0_3(filLPIn_0_FIR, 0, mixPathSel, 0);//filLPIn to mixPathSel
    5e14:	4a77      	ldr	r2, [pc, #476]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5e16:	4978      	ldr	r1, [pc, #480]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5e18:	4881      	ldr	r0, [pc, #516]	; (6020 <_GLOBAL__sub_I_tft+0x6e4>)
    5e1a:	f019 feb5 	bl	1fb88 <__aeabi_atexit>
    5e1e:	4882      	ldr	r0, [pc, #520]	; (6028 <_GLOBAL__sub_I_tft+0x6ec>)
    5e20:	f014 fbba 	bl	1a598 <AudioConnection::AudioConnection()>
    5e24:	4b7d      	ldr	r3, [pc, #500]	; (601c <_GLOBAL__sub_I_tft+0x6e0>)
    5e26:	4622      	mov	r2, r4
    5e28:	4980      	ldr	r1, [pc, #512]	; (602c <_GLOBAL__sub_I_tft+0x6f0>)
    5e2a:	9500      	str	r5, [sp, #0]
    5e2c:	487e      	ldr	r0, [pc, #504]	; (6028 <_GLOBAL__sub_I_tft+0x6ec>)
    5e2e:	f014 fc27 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc0_4(sine_Upmix, 0, multUpmix, 1);// Upmix L.O. injection 7.7 KHz
    5e32:	4a70      	ldr	r2, [pc, #448]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5e34:	4970      	ldr	r1, [pc, #448]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5e36:	487c      	ldr	r0, [pc, #496]	; (6028 <_GLOBAL__sub_I_tft+0x6ec>)
    5e38:	f019 fea6 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc0_5(multUpmix, filHP7500FIR);// Upmix to HPFilter.
    5e3c:	4a7c      	ldr	r2, [pc, #496]	; (6030 <_GLOBAL__sub_I_tft+0x6f4>)
    5e3e:	4977      	ldr	r1, [pc, #476]	; (601c <_GLOBAL__sub_I_tft+0x6e0>)
    5e40:	487c      	ldr	r0, [pc, #496]	; (6034 <_GLOBAL__sub_I_tft+0x6f8>)
    5e42:	f7fb feff 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    5e46:	4a6b      	ldr	r2, [pc, #428]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5e48:	496b      	ldr	r1, [pc, #428]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5e4a:	487a      	ldr	r0, [pc, #488]	; (6034 <_GLOBAL__sub_I_tft+0x6f8>)
    5e4c:	f019 fe9c 	bl	1fb88 <__aeabi_atexit>
    5e50:	4879      	ldr	r0, [pc, #484]	; (6038 <_GLOBAL__sub_I_tft+0x6fc>)
    5e52:	f014 fba1 	bl	1a598 <AudioConnection::AudioConnection()>
    5e56:	4b79      	ldr	r3, [pc, #484]	; (603c <_GLOBAL__sub_I_tft+0x700>)
    5e58:	4622      	mov	r2, r4
    5e5a:	4979      	ldr	r1, [pc, #484]	; (6040 <_GLOBAL__sub_I_tft+0x704>)
    5e5c:	9400      	str	r4, [sp, #0]
    5e5e:	4876      	ldr	r0, [pc, #472]	; (6038 <_GLOBAL__sub_I_tft+0x6fc>)
    5e60:	f014 fc0e 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc0_6(sine_VLF_Dnmix_Mod, 0, sine_Dnmix, 0); // Modulation input to sineDnmix
    5e64:	4a63      	ldr	r2, [pc, #396]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5e66:	4964      	ldr	r1, [pc, #400]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5e68:	4873      	ldr	r0, [pc, #460]	; (6038 <_GLOBAL__sub_I_tft+0x6fc>)
    5e6a:	f019 fe8d 	bl	1fb88 <__aeabi_atexit>
    5e6e:	4875      	ldr	r0, [pc, #468]	; (6044 <_GLOBAL__sub_I_tft+0x708>)
    5e70:	f014 fb92 	bl	1a598 <AudioConnection::AudioConnection()>
    5e74:	4b74      	ldr	r3, [pc, #464]	; (6048 <_GLOBAL__sub_I_tft+0x70c>)
    5e76:	4622      	mov	r2, r4
    5e78:	4970      	ldr	r1, [pc, #448]	; (603c <_GLOBAL__sub_I_tft+0x700>)
    5e7a:	9500      	str	r5, [sp, #0]
    5e7c:	4871      	ldr	r0, [pc, #452]	; (6044 <_GLOBAL__sub_I_tft+0x708>)
    5e7e:	f014 fbff 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc0_7(sine_Dnmix, 0, multDnmix, 1);// Dnmix L.). injection ~ 7.7 KHz
    5e82:	4a5c      	ldr	r2, [pc, #368]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5e84:	495c      	ldr	r1, [pc, #368]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5e86:	486f      	ldr	r0, [pc, #444]	; (6044 <_GLOBAL__sub_I_tft+0x708>)
    5e88:	f019 fe7e 	bl	1fb88 <__aeabi_atexit>
    5e8c:	486f      	ldr	r0, [pc, #444]	; (604c <_GLOBAL__sub_I_tft+0x710>)
    5e8e:	f014 fb83 	bl	1a598 <AudioConnection::AudioConnection()>
    5e92:	4b6d      	ldr	r3, [pc, #436]	; (6048 <_GLOBAL__sub_I_tft+0x70c>)
    5e94:	4622      	mov	r2, r4
    5e96:	4966      	ldr	r1, [pc, #408]	; (6030 <_GLOBAL__sub_I_tft+0x6f4>)
    5e98:	9400      	str	r4, [sp, #0]
    5e9a:	486c      	ldr	r0, [pc, #432]	; (604c <_GLOBAL__sub_I_tft+0x710>)
    5e9c:	f014 fbf0 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc0_8(filHP7500FIR, 0, multDnmix, 0);// HP7500FIR to DownMix mult
    5ea0:	4a54      	ldr	r2, [pc, #336]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5ea2:	4955      	ldr	r1, [pc, #340]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5ea4:	4869      	ldr	r0, [pc, #420]	; (604c <_GLOBAL__sub_I_tft+0x710>)
    5ea6:	f019 fe6f 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc0_9 (multDnmix, filLPDownMix);// Down Mix to filLPDnMix
    5eaa:	4a69      	ldr	r2, [pc, #420]	; (6050 <_GLOBAL__sub_I_tft+0x714>)
    5eac:	4966      	ldr	r1, [pc, #408]	; (6048 <_GLOBAL__sub_I_tft+0x70c>)
    5eae:	4869      	ldr	r0, [pc, #420]	; (6054 <_GLOBAL__sub_I_tft+0x718>)
    5eb0:	f7fb fec8 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    5eb4:	4a4f      	ldr	r2, [pc, #316]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5eb6:	4950      	ldr	r1, [pc, #320]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5eb8:	4866      	ldr	r0, [pc, #408]	; (6054 <_GLOBAL__sub_I_tft+0x718>)
    5eba:	f019 fe65 	bl	1fb88 <__aeabi_atexit>
    5ebe:	4866      	ldr	r0, [pc, #408]	; (6058 <_GLOBAL__sub_I_tft+0x71c>)
    5ec0:	f014 fb6a 	bl	1a598 <AudioConnection::AudioConnection()>
    5ec4:	4b57      	ldr	r3, [pc, #348]	; (6024 <_GLOBAL__sub_I_tft+0x6e8>)
    5ec6:	4622      	mov	r2, r4
    5ec8:	4961      	ldr	r1, [pc, #388]	; (6050 <_GLOBAL__sub_I_tft+0x714>)
    5eca:	9500      	str	r5, [sp, #0]
    5ecc:	4862      	ldr	r0, [pc, #392]	; (6058 <_GLOBAL__sub_I_tft+0x71c>)
    5ece:	f014 fbd7 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc0_10 (filLPDownMix,0, mixPathSel,1);//filLPDownMix to mixPathSel
    5ed2:	4a48      	ldr	r2, [pc, #288]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5ed4:	4948      	ldr	r1, [pc, #288]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5ed6:	4860      	ldr	r0, [pc, #384]	; (6058 <_GLOBAL__sub_I_tft+0x71c>)
    5ed8:	f019 fe56 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc1_1(mixPathSel, delayI);// mixPathSel   to delay I (no boxcar filter ) 
    5edc:	4a5f      	ldr	r2, [pc, #380]	; (605c <_GLOBAL__sub_I_tft+0x720>)
    5ede:	4951      	ldr	r1, [pc, #324]	; (6024 <_GLOBAL__sub_I_tft+0x6e8>)
    5ee0:	485f      	ldr	r0, [pc, #380]	; (6060 <_GLOBAL__sub_I_tft+0x724>)
    5ee2:	f7fb feaf 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    5ee6:	4a43      	ldr	r2, [pc, #268]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5ee8:	4943      	ldr	r1, [pc, #268]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5eea:	485d      	ldr	r0, [pc, #372]	; (6060 <_GLOBAL__sub_I_tft+0x724>)
    5eec:	f019 fe4c 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc1_2(mixPathSel, filHilQ_1234);//filLPDownMix to filHilQ_1234
    5ef0:	4a5c      	ldr	r2, [pc, #368]	; (6064 <_GLOBAL__sub_I_tft+0x728>)
    5ef2:	494c      	ldr	r1, [pc, #304]	; (6024 <_GLOBAL__sub_I_tft+0x6e8>)
    5ef4:	485c      	ldr	r0, [pc, #368]	; (6068 <_GLOBAL__sub_I_tft+0x72c>)
    5ef6:	f7fb fea5 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    5efa:	4a3e      	ldr	r2, [pc, #248]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5efc:	493e      	ldr	r1, [pc, #248]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5efe:	485a      	ldr	r0, [pc, #360]	; (6068 <_GLOBAL__sub_I_tft+0x72c>)
    5f00:	f019 fe42 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc1_3(filHilQ_1234,delayQ);// filHilQ_1234 to delay Q
    5f04:	4a59      	ldr	r2, [pc, #356]	; (606c <_GLOBAL__sub_I_tft+0x730>)
    5f06:	4957      	ldr	r1, [pc, #348]	; (6064 <_GLOBAL__sub_I_tft+0x728>)
    5f08:	4859      	ldr	r0, [pc, #356]	; (6070 <_GLOBAL__sub_I_tft+0x734>)
    5f0a:	f7fb fe9b 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    5f0e:	4a39      	ldr	r2, [pc, #228]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5f10:	4939      	ldr	r1, [pc, #228]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5f12:	4857      	ldr	r0, [pc, #348]	; (6070 <_GLOBAL__sub_I_tft+0x734>)
    5f14:	f019 fe38 	bl	1fb88 <__aeabi_atexit>
    5f18:	4856      	ldr	r0, [pc, #344]	; (6074 <_GLOBAL__sub_I_tft+0x738>)
    5f1a:	f014 fb3d 	bl	1a598 <AudioConnection::AudioConnection()>
    5f1e:	4b56      	ldr	r3, [pc, #344]	; (6078 <_GLOBAL__sub_I_tft+0x73c>)
    5f20:	4622      	mov	r2, r4
    5f22:	494e      	ldr	r1, [pc, #312]	; (605c <_GLOBAL__sub_I_tft+0x720>)
    5f24:	9500      	str	r5, [sp, #0]
    5f26:	4853      	ldr	r0, [pc, #332]	; (6074 <_GLOBAL__sub_I_tft+0x738>)
    5f28:	f014 fbaa 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc1_4(delayI, 0, mixIQ12, 1);// delayI tap #0 to mixIQ12 input 1
    5f2c:	4a31      	ldr	r2, [pc, #196]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5f2e:	4932      	ldr	r1, [pc, #200]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5f30:	4850      	ldr	r0, [pc, #320]	; (6074 <_GLOBAL__sub_I_tft+0x738>)
    5f32:	f019 fe29 	bl	1fb88 <__aeabi_atexit>
    5f36:	4851      	ldr	r0, [pc, #324]	; (607c <_GLOBAL__sub_I_tft+0x740>)
    5f38:	f014 fb2e 	bl	1a598 <AudioConnection::AudioConnection()>
    5f3c:	4b4e      	ldr	r3, [pc, #312]	; (6078 <_GLOBAL__sub_I_tft+0x73c>)
    5f3e:	462a      	mov	r2, r5
    5f40:	4946      	ldr	r1, [pc, #280]	; (605c <_GLOBAL__sub_I_tft+0x720>)
    5f42:	9600      	str	r6, [sp, #0]
    5f44:	484d      	ldr	r0, [pc, #308]	; (607c <_GLOBAL__sub_I_tft+0x740>)
    5f46:	f014 fb9b 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc1_5(delayI, 1, mixIQ12, 3);// delay1 tap #1 to mixIQ12 input 3
    5f4a:	4a2a      	ldr	r2, [pc, #168]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5f4c:	492a      	ldr	r1, [pc, #168]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5f4e:	484b      	ldr	r0, [pc, #300]	; (607c <_GLOBAL__sub_I_tft+0x740>)
    5f50:	f019 fe1a 	bl	1fb88 <__aeabi_atexit>
    5f54:	484a      	ldr	r0, [pc, #296]	; (6080 <_GLOBAL__sub_I_tft+0x744>)
    5f56:	f014 fb1f 	bl	1a598 <AudioConnection::AudioConnection()>
    5f5a:	4b47      	ldr	r3, [pc, #284]	; (6078 <_GLOBAL__sub_I_tft+0x73c>)
    5f5c:	4622      	mov	r2, r4
    5f5e:	4943      	ldr	r1, [pc, #268]	; (606c <_GLOBAL__sub_I_tft+0x730>)
    5f60:	9400      	str	r4, [sp, #0]
    5f62:	4847      	ldr	r0, [pc, #284]	; (6080 <_GLOBAL__sub_I_tft+0x744>)
    5f64:	f014 fb8c 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc1_6(delayQ, 0, mixIQ12, 0);// delayQ tap #0 to mixIQ12 input 0
    5f68:	4a22      	ldr	r2, [pc, #136]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5f6a:	4923      	ldr	r1, [pc, #140]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5f6c:	4844      	ldr	r0, [pc, #272]	; (6080 <_GLOBAL__sub_I_tft+0x744>)
    5f6e:	f019 fe0b 	bl	1fb88 <__aeabi_atexit>
    5f72:	4844      	ldr	r0, [pc, #272]	; (6084 <_GLOBAL__sub_I_tft+0x748>)
    5f74:	f014 fb10 	bl	1a598 <AudioConnection::AudioConnection()>
    5f78:	4b3f      	ldr	r3, [pc, #252]	; (6078 <_GLOBAL__sub_I_tft+0x73c>)
    5f7a:	462a      	mov	r2, r5
    5f7c:	493b      	ldr	r1, [pc, #236]	; (606c <_GLOBAL__sub_I_tft+0x730>)
    5f7e:	9700      	str	r7, [sp, #0]
    5f80:	4840      	ldr	r0, [pc, #256]	; (6084 <_GLOBAL__sub_I_tft+0x748>)
    5f82:	f014 fb7d 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc1_7(delayQ, 1, mixIQ12, 2);// delayQ tap #1 to mixIQ12 input 2
    5f86:	4a1b      	ldr	r2, [pc, #108]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5f88:	491b      	ldr	r1, [pc, #108]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5f8a:	483e      	ldr	r0, [pc, #248]	; (6084 <_GLOBAL__sub_I_tft+0x748>)
    5f8c:	f019 fdfc 	bl	1fb88 <__aeabi_atexit>
    5f90:	483d      	ldr	r0, [pc, #244]	; (6088 <_GLOBAL__sub_I_tft+0x74c>)
    5f92:	f014 fb01 	bl	1a598 <AudioConnection::AudioConnection()>
    5f96:	4b3d      	ldr	r3, [pc, #244]	; (608c <_GLOBAL__sub_I_tft+0x750>)
    5f98:	4622      	mov	r2, r4
    5f9a:	4937      	ldr	r1, [pc, #220]	; (6078 <_GLOBAL__sub_I_tft+0x73c>)
    5f9c:	9400      	str	r4, [sp, #0]
    5f9e:	483a      	ldr	r0, [pc, #232]	; (6088 <_GLOBAL__sub_I_tft+0x74c>)
    5fa0:	f014 fb6e 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc1_8 (mixIQ12, 0, mixIQ1234,0); 
    5fa4:	4a13      	ldr	r2, [pc, #76]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5fa6:	4914      	ldr	r1, [pc, #80]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5fa8:	4837      	ldr	r0, [pc, #220]	; (6088 <_GLOBAL__sub_I_tft+0x74c>)
    5faa:	f019 fded 	bl	1fb88 <__aeabi_atexit>
    5fae:	4838      	ldr	r0, [pc, #224]	; (6090 <_GLOBAL__sub_I_tft+0x754>)
    5fb0:	f014 faf2 	bl	1a598 <AudioConnection::AudioConnection()>
    5fb4:	4b37      	ldr	r3, [pc, #220]	; (6094 <_GLOBAL__sub_I_tft+0x758>)
    5fb6:	463a      	mov	r2, r7
    5fb8:	4928      	ldr	r1, [pc, #160]	; (605c <_GLOBAL__sub_I_tft+0x720>)
    5fba:	9500      	str	r5, [sp, #0]
    5fbc:	4834      	ldr	r0, [pc, #208]	; (6090 <_GLOBAL__sub_I_tft+0x754>)
    5fbe:	f014 fb5f 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc3_1(delayI, 2, mixIQ34, 1);// delayI tap #2 to mixIQ input 1
    5fc2:	4a0c      	ldr	r2, [pc, #48]	; (5ff4 <_GLOBAL__sub_I_tft+0x6b8>)
    5fc4:	490c      	ldr	r1, [pc, #48]	; (5ff8 <_GLOBAL__sub_I_tft+0x6bc>)
    5fc6:	4832      	ldr	r0, [pc, #200]	; (6090 <_GLOBAL__sub_I_tft+0x754>)
    5fc8:	f019 fdde 	bl	1fb88 <__aeabi_atexit>
    5fcc:	4832      	ldr	r0, [pc, #200]	; (6098 <_GLOBAL__sub_I_tft+0x75c>)
    5fce:	f014 fae3 	bl	1a598 <AudioConnection::AudioConnection()>
    5fd2:	4b30      	ldr	r3, [pc, #192]	; (6094 <_GLOBAL__sub_I_tft+0x758>)
    5fd4:	4632      	mov	r2, r6
    5fd6:	4921      	ldr	r1, [pc, #132]	; (605c <_GLOBAL__sub_I_tft+0x720>)
    5fd8:	9600      	str	r6, [sp, #0]
    5fda:	482f      	ldr	r0, [pc, #188]	; (6098 <_GLOBAL__sub_I_tft+0x75c>)
    5fdc:	f014 fb50 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
    5fe0:	e05c      	b.n	609c <_GLOBAL__sub_I_tft+0x760>
    5fe2:	bf00      	nop
    5fe4:	200131c4 	.word	0x200131c4
    5fe8:	200131d8 	.word	0x200131d8
    5fec:	20012db0 	.word	0x20012db0
    5ff0:	20012c50 	.word	0x20012c50
    5ff4:	20009460 	.word	0x20009460
    5ff8:	0001a735 	.word	0x0001a735
    5ffc:	200131ec 	.word	0x200131ec
    6000:	20013200 	.word	0x20013200
    6004:	20013294 	.word	0x20013294
    6008:	20013214 	.word	0x20013214
    600c:	200132b8 	.word	0x200132b8
    6010:	2001238c 	.word	0x2001238c
    6014:	20012eb8 	.word	0x20012eb8
    6018:	20012ee0 	.word	0x20012ee0
    601c:	20012e80 	.word	0x20012e80
    6020:	20012ef4 	.word	0x20012ef4
    6024:	20012de8 	.word	0x20012de8
    6028:	20012f08 	.word	0x20012f08
    602c:	200134cc 	.word	0x200134cc
    6030:	20011b58 	.word	0x20011b58
    6034:	20012f1c 	.word	0x20012f1c
    6038:	20012f30 	.word	0x20012f30
    603c:	200134a4 	.word	0x200134a4
    6040:	200134f0 	.word	0x200134f0
    6044:	20012f44 	.word	0x20012f44
    6048:	20012e20 	.word	0x20012e20
    604c:	20012f58 	.word	0x20012f58
    6050:	200120d0 	.word	0x200120d0
    6054:	20012f6c 	.word	0x20012f6c
    6058:	20012ecc 	.word	0x20012ecc
    605c:	2000cb40 	.word	0x2000cb40
    6060:	20012f80 	.word	0x20012f80
    6064:	20011e14 	.word	0x20011e14
    6068:	20012f94 	.word	0x20012f94
    606c:	2000e110 	.word	0x2000e110
    6070:	20012fa8 	.word	0x20012fa8
    6074:	20012fbc 	.word	0x20012fbc
    6078:	20012d08 	.word	0x20012d08
    607c:	20012fd0 	.word	0x20012fd0
    6080:	20012fe4 	.word	0x20012fe4
    6084:	20012ff8 	.word	0x20012ff8
    6088:	2001300c 	.word	0x2001300c
    608c:	20012d40 	.word	0x20012d40
    6090:	20013138 	.word	0x20013138
    6094:	20012d78 	.word	0x20012d78
    6098:	2001314c 	.word	0x2001314c
AudioConnection           pc3_2(delayI, 3, mixIQ34, 3);// delayI tap #3 to mixIQ34 input 3
    609c:	4a98      	ldr	r2, [pc, #608]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    609e:	4999      	ldr	r1, [pc, #612]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    60a0:	4899      	ldr	r0, [pc, #612]	; (6308 <_GLOBAL__sub_I_tft+0x9cc>)
    60a2:	f019 fd71 	bl	1fb88 <__aeabi_atexit>
    60a6:	4899      	ldr	r0, [pc, #612]	; (630c <_GLOBAL__sub_I_tft+0x9d0>)
    60a8:	f014 fa76 	bl	1a598 <AudioConnection::AudioConnection()>
    60ac:	4b98      	ldr	r3, [pc, #608]	; (6310 <_GLOBAL__sub_I_tft+0x9d4>)
    60ae:	463a      	mov	r2, r7
    60b0:	4998      	ldr	r1, [pc, #608]	; (6314 <_GLOBAL__sub_I_tft+0x9d8>)
    60b2:	9400      	str	r4, [sp, #0]
    60b4:	4895      	ldr	r0, [pc, #596]	; (630c <_GLOBAL__sub_I_tft+0x9d0>)
    60b6:	f014 fae3 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc3_3(delayQ, 2, mixIQ34, 0);// delayQ tap #2 to mixIQ34 input 0
    60ba:	4a91      	ldr	r2, [pc, #580]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    60bc:	4991      	ldr	r1, [pc, #580]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    60be:	4893      	ldr	r0, [pc, #588]	; (630c <_GLOBAL__sub_I_tft+0x9d0>)
    60c0:	f019 fd62 	bl	1fb88 <__aeabi_atexit>
    60c4:	4894      	ldr	r0, [pc, #592]	; (6318 <_GLOBAL__sub_I_tft+0x9dc>)
    60c6:	f014 fa67 	bl	1a598 <AudioConnection::AudioConnection()>
    60ca:	4b91      	ldr	r3, [pc, #580]	; (6310 <_GLOBAL__sub_I_tft+0x9d4>)
    60cc:	4632      	mov	r2, r6
    60ce:	4991      	ldr	r1, [pc, #580]	; (6314 <_GLOBAL__sub_I_tft+0x9d8>)
    60d0:	9700      	str	r7, [sp, #0]
    60d2:	4891      	ldr	r0, [pc, #580]	; (6318 <_GLOBAL__sub_I_tft+0x9dc>)
    60d4:	f014 fad4 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc3_4(delayQ, 3, mixIQ34, 2);// delayQ tap #3 to mixIQ34 input 2
    60d8:	4a89      	ldr	r2, [pc, #548]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    60da:	498a      	ldr	r1, [pc, #552]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    60dc:	488e      	ldr	r0, [pc, #568]	; (6318 <_GLOBAL__sub_I_tft+0x9dc>)
    60de:	f019 fd53 	bl	1fb88 <__aeabi_atexit>
    60e2:	488e      	ldr	r0, [pc, #568]	; (631c <_GLOBAL__sub_I_tft+0x9e0>)
    60e4:	f014 fa58 	bl	1a598 <AudioConnection::AudioConnection()>
    60e8:	4b8d      	ldr	r3, [pc, #564]	; (6320 <_GLOBAL__sub_I_tft+0x9e4>)
    60ea:	4622      	mov	r2, r4
    60ec:	498d      	ldr	r1, [pc, #564]	; (6324 <_GLOBAL__sub_I_tft+0x9e8>)
    60ee:	9400      	str	r4, [sp, #0]
    60f0:	488a      	ldr	r0, [pc, #552]	; (631c <_GLOBAL__sub_I_tft+0x9e0>)
    60f2:	f014 fac5 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc3_5 (delayI,0, rmsDelayI0, 0); // Multiplier to compute I^2 for rms calculation
    60f6:	4a82      	ldr	r2, [pc, #520]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    60f8:	4982      	ldr	r1, [pc, #520]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    60fa:	4888      	ldr	r0, [pc, #544]	; (631c <_GLOBAL__sub_I_tft+0x9e0>)
    60fc:	f019 fd44 	bl	1fb88 <__aeabi_atexit>
    6100:	4889      	ldr	r0, [pc, #548]	; (6328 <_GLOBAL__sub_I_tft+0x9ec>)
    6102:	f014 fa49 	bl	1a598 <AudioConnection::AudioConnection()>
    6106:	4b89      	ldr	r3, [pc, #548]	; (632c <_GLOBAL__sub_I_tft+0x9f0>)
    6108:	4622      	mov	r2, r4
    610a:	4981      	ldr	r1, [pc, #516]	; (6310 <_GLOBAL__sub_I_tft+0x9d4>)
    610c:	9500      	str	r5, [sp, #0]
    610e:	4886      	ldr	r0, [pc, #536]	; (6328 <_GLOBAL__sub_I_tft+0x9ec>)
    6110:	f014 fab6 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc3_6 (mixIQ34, 0, mixIQ1234, 1); // MixIQ34 output to mixIQ1234 Input 1 
    6114:	4a7a      	ldr	r2, [pc, #488]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    6116:	497b      	ldr	r1, [pc, #492]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    6118:	4883      	ldr	r0, [pc, #524]	; (6328 <_GLOBAL__sub_I_tft+0x9ec>)
    611a:	f019 fd35 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc3_7 (mixIQ1234, rmsMixIQ1234Out); //rms measurement of mixIQ1234
    611e:	4a84      	ldr	r2, [pc, #528]	; (6330 <_GLOBAL__sub_I_tft+0x9f4>)
    6120:	4982      	ldr	r1, [pc, #520]	; (632c <_GLOBAL__sub_I_tft+0x9f0>)
    6122:	4884      	ldr	r0, [pc, #528]	; (6334 <_GLOBAL__sub_I_tft+0x9f8>)
    6124:	f7fb fd8e 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    6128:	4a75      	ldr	r2, [pc, #468]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    612a:	4976      	ldr	r1, [pc, #472]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    612c:	4881      	ldr	r0, [pc, #516]	; (6334 <_GLOBAL__sub_I_tft+0x9f8>)
    612e:	f019 fd2b 	bl	1fb88 <__aeabi_atexit>
    6132:	4881      	ldr	r0, [pc, #516]	; (6338 <_GLOBAL__sub_I_tft+0x9fc>)
    6134:	f014 fa30 	bl	1a598 <AudioConnection::AudioConnection()>
    6138:	4b80      	ldr	r3, [pc, #512]	; (633c <_GLOBAL__sub_I_tft+0xa00>)
    613a:	4622      	mov	r2, r4
    613c:	497b      	ldr	r1, [pc, #492]	; (632c <_GLOBAL__sub_I_tft+0x9f0>)
    613e:	9500      	str	r5, [sp, #0]
    6140:	487d      	ldr	r0, [pc, #500]	; (6338 <_GLOBAL__sub_I_tft+0x9fc>)
    6142:	f014 fa9d 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc2_1(mixIQ1234, 0, mixChannels, 1); //mixIQ1234 output to mixChannels Input 1
    6146:	4a6e      	ldr	r2, [pc, #440]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    6148:	496e      	ldr	r1, [pc, #440]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    614a:	487b      	ldr	r0, [pc, #492]	; (6338 <_GLOBAL__sub_I_tft+0x9fc>)
    614c:	f019 fd1c 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc2_2(whiteOut, filLPWhiteFIR); //whiteOut to to filLPWhiteFIR
    6150:	4a7b      	ldr	r2, [pc, #492]	; (6340 <_GLOBAL__sub_I_tft+0xa04>)
    6152:	497c      	ldr	r1, [pc, #496]	; (6344 <_GLOBAL__sub_I_tft+0xa08>)
    6154:	487c      	ldr	r0, [pc, #496]	; (6348 <_GLOBAL__sub_I_tft+0xa0c>)
    6156:	f7fb fd75 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    615a:	4a69      	ldr	r2, [pc, #420]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    615c:	4969      	ldr	r1, [pc, #420]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    615e:	487a      	ldr	r0, [pc, #488]	; (6348 <_GLOBAL__sub_I_tft+0xa0c>)
    6160:	f019 fd12 	bl	1fb88 <__aeabi_atexit>
    6164:	4879      	ldr	r0, [pc, #484]	; (634c <_GLOBAL__sub_I_tft+0xa10>)
    6166:	f014 fa17 	bl	1a598 <AudioConnection::AudioConnection()>
    616a:	4b74      	ldr	r3, [pc, #464]	; (633c <_GLOBAL__sub_I_tft+0xa00>)
    616c:	4622      	mov	r2, r4
    616e:	4974      	ldr	r1, [pc, #464]	; (6340 <_GLOBAL__sub_I_tft+0xa04>)
    6170:	9400      	str	r4, [sp, #0]
    6172:	4876      	ldr	r0, [pc, #472]	; (634c <_GLOBAL__sub_I_tft+0xa10>)
    6174:	f014 fa84 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc2_3(filLPWhiteFIR, 0, mixChannels, 0); //Low pass filtered whiteOut to to mixChannels input 0 (mixChannels inputs  2,3 not used)
    6178:	4a61      	ldr	r2, [pc, #388]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    617a:	4962      	ldr	r1, [pc, #392]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    617c:	4873      	ldr	r0, [pc, #460]	; (634c <_GLOBAL__sub_I_tft+0xa10>)
    617e:	f019 fd03 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc2_4(filLPIn_0_FIR, ppLPInput); // filLPIn_0_FIR out t ppLPInput (note: p-p measurement)
    6182:	4a73      	ldr	r2, [pc, #460]	; (6350 <_GLOBAL__sub_I_tft+0xa14>)
    6184:	4973      	ldr	r1, [pc, #460]	; (6354 <_GLOBAL__sub_I_tft+0xa18>)
    6186:	4874      	ldr	r0, [pc, #464]	; (6358 <_GLOBAL__sub_I_tft+0xa1c>)
    6188:	f7fb fd5c 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    618c:	4a5c      	ldr	r2, [pc, #368]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    618e:	495d      	ldr	r1, [pc, #372]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    6190:	4871      	ldr	r0, [pc, #452]	; (6358 <_GLOBAL__sub_I_tft+0xa1c>)
    6192:	f019 fcf9 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc2_5(mixChannels, ampLeftOut); // mixChannels to LeftOutAmp for gain adjust
    6196:	4a71      	ldr	r2, [pc, #452]	; (635c <_GLOBAL__sub_I_tft+0xa20>)
    6198:	4968      	ldr	r1, [pc, #416]	; (633c <_GLOBAL__sub_I_tft+0xa00>)
    619a:	4871      	ldr	r0, [pc, #452]	; (6360 <_GLOBAL__sub_I_tft+0xa24>)
    619c:	f7fb fd52 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    61a0:	4a57      	ldr	r2, [pc, #348]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    61a2:	4958      	ldr	r1, [pc, #352]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    61a4:	486e      	ldr	r0, [pc, #440]	; (6360 <_GLOBAL__sub_I_tft+0xa24>)
    61a6:	f019 fcef 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc2_6(mixChannels, ampRightOut); // mixChannels to RightOutAmp for gain adjust
    61aa:	4a6e      	ldr	r2, [pc, #440]	; (6364 <_GLOBAL__sub_I_tft+0xa28>)
    61ac:	4963      	ldr	r1, [pc, #396]	; (633c <_GLOBAL__sub_I_tft+0xa00>)
    61ae:	486e      	ldr	r0, [pc, #440]	; (6368 <_GLOBAL__sub_I_tft+0xa2c>)
    61b0:	f7fb fd48 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    61b4:	4a52      	ldr	r2, [pc, #328]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    61b6:	4953      	ldr	r1, [pc, #332]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    61b8:	486b      	ldr	r0, [pc, #428]	; (6368 <_GLOBAL__sub_I_tft+0xa2c>)
    61ba:	f019 fce5 	bl	1fb88 <__aeabi_atexit>
    61be:	486b      	ldr	r0, [pc, #428]	; (636c <_GLOBAL__sub_I_tft+0xa30>)
    61c0:	f014 f9ea 	bl	1a598 <AudioConnection::AudioConnection()>
    61c4:	4b6a      	ldr	r3, [pc, #424]	; (6370 <_GLOBAL__sub_I_tft+0xa34>)
    61c6:	4622      	mov	r2, r4
    61c8:	4964      	ldr	r1, [pc, #400]	; (635c <_GLOBAL__sub_I_tft+0xa20>)
    61ca:	9400      	str	r4, [sp, #0]
    61cc:	4867      	ldr	r0, [pc, #412]	; (636c <_GLOBAL__sub_I_tft+0xa30>)
    61ce:	f014 fa57 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc2_7(ampLeftOut, 0, i2s1, 0);// AmpLeftOut to headphones left ch
    61d2:	4a4b      	ldr	r2, [pc, #300]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    61d4:	494b      	ldr	r1, [pc, #300]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    61d6:	4865      	ldr	r0, [pc, #404]	; (636c <_GLOBAL__sub_I_tft+0xa30>)
    61d8:	f019 fcd6 	bl	1fb88 <__aeabi_atexit>
    61dc:	4865      	ldr	r0, [pc, #404]	; (6374 <_GLOBAL__sub_I_tft+0xa38>)
    61de:	f014 f9db 	bl	1a598 <AudioConnection::AudioConnection()>
    61e2:	4b63      	ldr	r3, [pc, #396]	; (6370 <_GLOBAL__sub_I_tft+0xa34>)
    61e4:	4622      	mov	r2, r4
    61e6:	495f      	ldr	r1, [pc, #380]	; (6364 <_GLOBAL__sub_I_tft+0xa28>)
    61e8:	9500      	str	r5, [sp, #0]
    61ea:	4862      	ldr	r0, [pc, #392]	; (6374 <_GLOBAL__sub_I_tft+0xa38>)
    61ec:	f014 fa48 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc2_8(ampRightOut, 0, i2s1, 1);// AmpRightOut to headphones right ch
    61f0:	4a43      	ldr	r2, [pc, #268]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    61f2:	4944      	ldr	r1, [pc, #272]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    61f4:	485f      	ldr	r0, [pc, #380]	; (6374 <_GLOBAL__sub_I_tft+0xa38>)
    61f6:	f019 fcc7 	bl	1fb88 <__aeabi_atexit>
    61fa:	485f      	ldr	r0, [pc, #380]	; (6378 <_GLOBAL__sub_I_tft+0xa3c>)
    61fc:	f014 f9cc 	bl	1a598 <AudioConnection::AudioConnection()>
    6200:	4b4e      	ldr	r3, [pc, #312]	; (633c <_GLOBAL__sub_I_tft+0xa00>)
    6202:	4622      	mov	r2, r4
    6204:	4953      	ldr	r1, [pc, #332]	; (6354 <_GLOBAL__sub_I_tft+0xa18>)
    6206:	9600      	str	r6, [sp, #0]
    6208:	485b      	ldr	r0, [pc, #364]	; (6378 <_GLOBAL__sub_I_tft+0xa3c>)
    620a:	f014 fa39 	bl	1a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection           pc2_9(filLPIn_0_FIR, 0 , mixChannels, 3); //filLPIn_0_FIR to mixChannels for Busy detect
    620e:	4a3c      	ldr	r2, [pc, #240]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    6210:	493c      	ldr	r1, [pc, #240]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    6212:	4859      	ldr	r0, [pc, #356]	; (6378 <_GLOBAL__sub_I_tft+0xa3c>)
    6214:	f019 fcb8 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc2_10(mixChannels, fft1024);// mixChannels to FFT analysis
    6218:	4a58      	ldr	r2, [pc, #352]	; (637c <_GLOBAL__sub_I_tft+0xa40>)
    621a:	4948      	ldr	r1, [pc, #288]	; (633c <_GLOBAL__sub_I_tft+0xa00>)
    621c:	4858      	ldr	r0, [pc, #352]	; (6380 <_GLOBAL__sub_I_tft+0xa44>)
    621e:	f7fb fd11 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    6222:	4a37      	ldr	r2, [pc, #220]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    6224:	4937      	ldr	r1, [pc, #220]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    6226:	4856      	ldr	r0, [pc, #344]	; (6380 <_GLOBAL__sub_I_tft+0xa44>)
    6228:	f019 fcae 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc2_11(ampRightOut, ppAmpRightOut); // p-p monitor for ampRightOut
    622c:	4a55      	ldr	r2, [pc, #340]	; (6384 <_GLOBAL__sub_I_tft+0xa48>)
    622e:	494d      	ldr	r1, [pc, #308]	; (6364 <_GLOBAL__sub_I_tft+0xa28>)
    6230:	4855      	ldr	r0, [pc, #340]	; (6388 <_GLOBAL__sub_I_tft+0xa4c>)
    6232:	f7fb fd07 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    6236:	4a32      	ldr	r2, [pc, #200]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    6238:	4932      	ldr	r1, [pc, #200]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    623a:	4853      	ldr	r0, [pc, #332]	; (6388 <_GLOBAL__sub_I_tft+0xa4c>)
    623c:	f019 fca4 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc2_12(ampLeftOut, ppAmpLeftOut);// p-p monitor for ampLeftOut
    6240:	4a52      	ldr	r2, [pc, #328]	; (638c <_GLOBAL__sub_I_tft+0xa50>)
    6242:	4946      	ldr	r1, [pc, #280]	; (635c <_GLOBAL__sub_I_tft+0xa20>)
    6244:	4852      	ldr	r0, [pc, #328]	; (6390 <_GLOBAL__sub_I_tft+0xa54>)
    6246:	f7fb fcfd 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    624a:	4a2d      	ldr	r2, [pc, #180]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    624c:	492d      	ldr	r1, [pc, #180]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    624e:	4850      	ldr	r0, [pc, #320]	; (6390 <_GLOBAL__sub_I_tft+0xa54>)
    6250:	f019 fc9a 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc2_13(filLPIn_0_FIR, rmsLPInput);// LPDownmix output to rms measurement to allow PAPR computation.
    6254:	4a4f      	ldr	r2, [pc, #316]	; (6394 <_GLOBAL__sub_I_tft+0xa58>)
    6256:	493f      	ldr	r1, [pc, #252]	; (6354 <_GLOBAL__sub_I_tft+0xa18>)
    6258:	484f      	ldr	r0, [pc, #316]	; (6398 <_GLOBAL__sub_I_tft+0xa5c>)
    625a:	f7fb fcf3 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    625e:	4a28      	ldr	r2, [pc, #160]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    6260:	4928      	ldr	r1, [pc, #160]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    6262:	484d      	ldr	r0, [pc, #308]	; (6398 <_GLOBAL__sub_I_tft+0xa5c>)
    6264:	f019 fc90 	bl	1fb88 <__aeabi_atexit>
AudioConnection           pc2_14 (filLPWhiteFIR,rmsNoise); //rms measurement of BW filtered WGN
    6268:	4a4c      	ldr	r2, [pc, #304]	; (639c <_GLOBAL__sub_I_tft+0xa60>)
    626a:	4935      	ldr	r1, [pc, #212]	; (6340 <_GLOBAL__sub_I_tft+0xa04>)
    626c:	484c      	ldr	r0, [pc, #304]	; (63a0 <_GLOBAL__sub_I_tft+0xa64>)
    626e:	f7fb fce9 	bl	1c44 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    6272:	4a23      	ldr	r2, [pc, #140]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    6274:	4923      	ldr	r1, [pc, #140]	; (6304 <_GLOBAL__sub_I_tft+0x9c8>)
    6276:	484a      	ldr	r0, [pc, #296]	; (63a0 <_GLOBAL__sub_I_tft+0xa64>)
    6278:	f019 fc86 	bl	1fb88 <__aeabi_atexit>
String strMode = ""; String strParameter = ""; String strRevision = "    Rev 2.03-Proto";
    627c:	4949      	ldr	r1, [pc, #292]	; (63a4 <_GLOBAL__sub_I_tft+0xa68>)
    627e:	484a      	ldr	r0, [pc, #296]	; (63a8 <_GLOBAL__sub_I_tft+0xa6c>)
    6280:	f014 fe28 	bl	1aed4 <String::String(char const*)>
    6284:	4a1e      	ldr	r2, [pc, #120]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    6286:	4949      	ldr	r1, [pc, #292]	; (63ac <_GLOBAL__sub_I_tft+0xa70>)
    6288:	4847      	ldr	r0, [pc, #284]	; (63a8 <_GLOBAL__sub_I_tft+0xa6c>)
    628a:	f019 fc7d 	bl	1fb88 <__aeabi_atexit>
    628e:	4945      	ldr	r1, [pc, #276]	; (63a4 <_GLOBAL__sub_I_tft+0xa68>)
    6290:	4847      	ldr	r0, [pc, #284]	; (63b0 <_GLOBAL__sub_I_tft+0xa74>)
    6292:	f014 fe1f 	bl	1aed4 <String::String(char const*)>
    6296:	4a1a      	ldr	r2, [pc, #104]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    6298:	4944      	ldr	r1, [pc, #272]	; (63ac <_GLOBAL__sub_I_tft+0xa70>)
    629a:	4845      	ldr	r0, [pc, #276]	; (63b0 <_GLOBAL__sub_I_tft+0xa74>)
    629c:	f019 fc74 	bl	1fb88 <__aeabi_atexit>
    62a0:	4944      	ldr	r1, [pc, #272]	; (63b4 <_GLOBAL__sub_I_tft+0xa78>)
    62a2:	4845      	ldr	r0, [pc, #276]	; (63b8 <_GLOBAL__sub_I_tft+0xa7c>)
    62a4:	f014 fe16 	bl	1aed4 <String::String(char const*)>
    62a8:	4a15      	ldr	r2, [pc, #84]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    62aa:	4940      	ldr	r1, [pc, #256]	; (63ac <_GLOBAL__sub_I_tft+0xa70>)
    62ac:	4842      	ldr	r0, [pc, #264]	; (63b8 <_GLOBAL__sub_I_tft+0xa7c>)
    62ae:	f019 fc6b 	bl	1fb88 <__aeabi_atexit>
String strLastCF = ""; String strLastLevel = "";
    62b2:	493c      	ldr	r1, [pc, #240]	; (63a4 <_GLOBAL__sub_I_tft+0xa68>)
    62b4:	4841      	ldr	r0, [pc, #260]	; (63bc <_GLOBAL__sub_I_tft+0xa80>)
    62b6:	f014 fe0d 	bl	1aed4 <String::String(char const*)>
    62ba:	4a11      	ldr	r2, [pc, #68]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    62bc:	493b      	ldr	r1, [pc, #236]	; (63ac <_GLOBAL__sub_I_tft+0xa70>)
    62be:	483f      	ldr	r0, [pc, #252]	; (63bc <_GLOBAL__sub_I_tft+0xa80>)
    62c0:	f019 fc62 	bl	1fb88 <__aeabi_atexit>
    62c4:	4937      	ldr	r1, [pc, #220]	; (63a4 <_GLOBAL__sub_I_tft+0xa68>)
    62c6:	483e      	ldr	r0, [pc, #248]	; (63c0 <_GLOBAL__sub_I_tft+0xa84>)
    62c8:	f014 fe04 	bl	1aed4 <String::String(char const*)>
    62cc:	4a0c      	ldr	r2, [pc, #48]	; (6300 <_GLOBAL__sub_I_tft+0x9c4>)
    62ce:	4937      	ldr	r1, [pc, #220]	; (63ac <_GLOBAL__sub_I_tft+0xa70>)
    62d0:	483b      	ldr	r0, [pc, #236]	; (63c0 <_GLOBAL__sub_I_tft+0xa84>)
    62d2:	f019 fc59 	bl	1fb88 <__aeabi_atexit>
    62d6:	4b3b      	ldr	r3, [pc, #236]	; (63c4 <_GLOBAL__sub_I_tft+0xa88>)
unsigned long ulngLastSpectrumUpdateMs = millis(); unsigned long ulngLastLevelDisplayMs = millis();
    62d8:	493b      	ldr	r1, [pc, #236]	; (63c8 <_GLOBAL__sub_I_tft+0xa8c>)
    62da:	6818      	ldr	r0, [r3, #0]
    62dc:	4a3b      	ldr	r2, [pc, #236]	; (63cc <_GLOBAL__sub_I_tft+0xa90>)
    62de:	681b      	ldr	r3, [r3, #0]
    62e0:	6008      	str	r0, [r1, #0]
    62e2:	6013      	str	r3, [r2, #0]
}// End Main Loop *******************************************************************************
    62e4:	b003      	add	sp, #12
    62e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				first_update = this;
    62ea:	602a      	str	r2, [r5, #0]
    62ec:	f7ff bb57 	b.w	599e <_GLOBAL__sub_I_tft+0x62>
    62f0:	602a      	str	r2, [r5, #0]
    62f2:	e488      	b.n	5c06 <_GLOBAL__sub_I_tft+0x2ca>
    62f4:	602a      	str	r2, [r5, #0]
    62f6:	f7ff bbe9 	b.w	5acc <_GLOBAL__sub_I_tft+0x190>
    62fa:	602a      	str	r2, [r5, #0]
    62fc:	f7ff bb6c 	b.w	59d8 <_GLOBAL__sub_I_tft+0x9c>
    6300:	20009460 	.word	0x20009460
    6304:	0001a735 	.word	0x0001a735
    6308:	2001314c 	.word	0x2001314c
    630c:	20013160 	.word	0x20013160
    6310:	20012d78 	.word	0x20012d78
    6314:	2000e110 	.word	0x2000e110
    6318:	20013174 	.word	0x20013174
    631c:	20013188 	.word	0x20013188
    6320:	2000a788 	.word	0x2000a788
    6324:	2000cb40 	.word	0x2000cb40
    6328:	2001319c 	.word	0x2001319c
    632c:	20012d40 	.word	0x20012d40
    6330:	2000a7e8 	.word	0x2000a7e8
    6334:	200131b0 	.word	0x200131b0
    6338:	20013020 	.word	0x20013020
    633c:	20012cd0 	.word	0x20012cd0
    6340:	20012648 	.word	0x20012648
    6344:	2001369c 	.word	0x2001369c
    6348:	20013098 	.word	0x20013098
    634c:	200130ac 	.word	0x200130ac
    6350:	20013270 	.word	0x20013270
    6354:	2001238c 	.word	0x2001238c
    6358:	200130c0 	.word	0x200130c0
    635c:	2000cad0 	.word	0x2000cad0
    6360:	200130d4 	.word	0x200130d4
    6364:	2000caf0 	.word	0x2000caf0
    6368:	200130e8 	.word	0x200130e8
    636c:	200130fc 	.word	0x200130fc
    6370:	20012c68 	.word	0x20012c68
    6374:	20013110 	.word	0x20013110
    6378:	20013124 	.word	0x20013124
    637c:	20010704 	.word	0x20010704
    6380:	20013034 	.word	0x20013034
    6384:	2001324c 	.word	0x2001324c
    6388:	20013048 	.word	0x20013048
    638c:	20013228 	.word	0x20013228
    6390:	2001305c 	.word	0x2001305c
    6394:	2000a7b8 	.word	0x2000a7b8
    6398:	20013070 	.word	0x20013070
    639c:	2000a818 	.word	0x2000a818
    63a0:	20013084 	.word	0x20013084
    63a4:	200039f8 	.word	0x200039f8
    63a8:	2001352c 	.word	0x2001352c
    63ac:	0001af49 	.word	0x0001af49
    63b0:	20013538 	.word	0x20013538
    63b4:	20003418 	.word	0x20003418
    63b8:	20013544 	.word	0x20013544
    63bc:	20013514 	.word	0x20013514
    63c0:	20013520 	.word	0x20013520
    63c4:	20013554 	.word	0x20013554
    63c8:	20013684 	.word	0x20013684
    63cc:	20013678 	.word	0x20013678

000063d0 <InitializeBusy()>:
{
    63d0:	b530      	push	{r4, r5, lr}
  tft.fillScreen(ST7735_BLACK);
    63d2:	2100      	movs	r1, #0
{
    63d4:	b083      	sub	sp, #12
  tft.fillScreen(ST7735_BLACK);
    63d6:	4849      	ldr	r0, [pc, #292]	; (64fc <InitializeBusy()+0x12c>)
    63d8:	f010 fa0c 	bl	167f4 <ST7735_t3::fillScreen(unsigned short)>
  tft.setCursor(1,80);
    63dc:	2300      	movs	r3, #0
    63de:	2250      	movs	r2, #80	; 0x50
    63e0:	2101      	movs	r1, #1
    63e2:	4846      	ldr	r0, [pc, #280]	; (64fc <InitializeBusy()+0x12c>)
    63e4:	f011 f81a 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
  tft.setTextColor(ST7735_WHITE);  tft.setTextSize(4);  tft.println("BUSY DETECT  ");
    63e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    63ec:	4843      	ldr	r0, [pc, #268]	; (64fc <InitializeBusy()+0x12c>)
    63ee:	f011 f877 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    63f2:	2204      	movs	r2, #4
    63f4:	4841      	ldr	r0, [pc, #260]	; (64fc <InitializeBusy()+0x12c>)
    63f6:	4611      	mov	r1, r2
    63f8:	f011 f866 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    63fc:	220d      	movs	r2, #13
    63fe:	4940      	ldr	r1, [pc, #256]	; (6500 <InitializeBusy()+0x130>)
    6400:	483e      	ldr	r0, [pc, #248]	; (64fc <InitializeBusy()+0x12c>)
    6402:	f013 fb69 	bl	19ad8 <ST7735_t3::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    6406:	483d      	ldr	r0, [pc, #244]	; (64fc <InitializeBusy()+0x12c>)
    6408:	f014 fc54 	bl	1acb4 <Print::println()>
  tft.setTextColor(ST7735_CYAN);  tft.setTextSize(3);  tft.println(strRevision);
    640c:	f240 71ff 	movw	r1, #2047	; 0x7ff
    6410:	483a      	ldr	r0, [pc, #232]	; (64fc <InitializeBusy()+0x12c>)
    6412:	f011 f865 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    6416:	2203      	movs	r2, #3
    6418:	4838      	ldr	r0, [pc, #224]	; (64fc <InitializeBusy()+0x12c>)
    641a:	4611      	mov	r1, r2
    641c:	f011 f854 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
    6420:	4938      	ldr	r1, [pc, #224]	; (6504 <InitializeBusy()+0x134>)
    6422:	4836      	ldr	r0, [pc, #216]	; (64fc <InitializeBusy()+0x12c>)
    6424:	f014 fc14 	bl	1ac50 <Print::print(String const&)>
    6428:	4834      	ldr	r0, [pc, #208]	; (64fc <InitializeBusy()+0x12c>)
    642a:	f014 fc43 	bl	1acb4 <Print::println()>
  ampRightOut.gain(fltLogs[intGainLevel[3]]); 
    642e:	4a36      	ldr	r2, [pc, #216]	; (6508 <InitializeBusy()+0x138>)
    6430:	4b36      	ldr	r3, [pc, #216]	; (650c <InitializeBusy()+0x13c>)
    6432:	68d2      	ldr	r2, [r2, #12]
		if (n > 32767.0f) n = 32767.0f;
    6434:	ed9f 7a36 	vldr	s14, [pc, #216]	; 6510 <InitializeBusy()+0x140>
    6438:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    643c:	edd3 7a00 	vldr	s15, [r3]
    6440:	eef4 7ac7 	vcmpe.f32	s15, s14
    6444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6448:	dc08      	bgt.n	645c <InitializeBusy()+0x8c>
		else if (n < -32767.0f) n = -32767.0f;
    644a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 6514 <InitializeBusy()+0x144>
    644e:	eef4 7ac7 	vcmpe.f32	s15, s14
    6452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6456:	d549      	bpl.n	64ec <InitializeBusy()+0x11c>
    6458:	4b2f      	ldr	r3, [pc, #188]	; (6518 <InitializeBusy()+0x148>)
    645a:	e000      	b.n	645e <InitializeBusy()+0x8e>
    645c:	4b2f      	ldr	r3, [pc, #188]	; (651c <InitializeBusy()+0x14c>)
		multiplier = n * 65536.0f;
    645e:	4a30      	ldr	r2, [pc, #192]	; (6520 <InitializeBusy()+0x150>)
  delay(1000);
    6460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    6464:	2400      	movs	r4, #0
		coeff_p = cp;
    6466:	4d2f      	ldr	r5, [pc, #188]	; (6524 <InitializeBusy()+0x154>)
		multiplier = n * 65536.0f;
    6468:	6193      	str	r3, [r2, #24]
    646a:	f015 f863 	bl	1b534 <delay>
  fltCurrentDelayI1Ms = fltMinimumIDelayMs; 
    646e:	492e      	ldr	r1, [pc, #184]	; (6528 <InitializeBusy()+0x158>)
    6470:	482e      	ldr	r0, [pc, #184]	; (652c <InitializeBusy()+0x15c>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    6472:	4a2f      	ldr	r2, [pc, #188]	; (6530 <InitializeBusy()+0x160>)
    6474:	6008      	str	r0, [r1, #0]
    6476:	f64d 118c 	movw	r1, #55692	; 0xd98c
    647a:	6194      	str	r4, [r2, #24]
    647c:	61d1      	str	r1, [r2, #28]
    647e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    6482:	4b2c      	ldr	r3, [pc, #176]	; (6534 <InitializeBusy()+0x164>)
    6484:	e9c2 4408 	strd	r4, r4, [r2, #32]
    6488:	4a2b      	ldr	r2, [pc, #172]	; (6538 <InitializeBusy()+0x168>)
    648a:	625c      	str	r4, [r3, #36]	; 0x24
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
    648c:	2a01      	cmp	r2, #1
    648e:	6199      	str	r1, [r3, #24]
		coeff_p = cp;
    6490:	61ea      	str	r2, [r5, #28]
    6492:	e9c3 4407 	strd	r4, r4, [r3, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
    6496:	d909      	bls.n	64ac <InitializeBusy()+0xdc>
			if (arm_fir_init_q15(&fir_inst, n_coeffs, (q15_t *)coeff_p,
    6498:	2180      	movs	r1, #128	; 0x80
    649a:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    649e:	f105 0020 	add.w	r0, r5, #32
    64a2:	9100      	str	r1, [sp, #0]
    64a4:	2178      	movs	r1, #120	; 0x78
    64a6:	f017 fc55 	bl	1dd54 <arm_fir_init_q15>
    64aa:	b9e8      	cbnz	r0, 64e8 <InitializeBusy()+0x118>
  intFMRatePtr = 1;
    64ac:	4a23      	ldr	r2, [pc, #140]	; (653c <InitializeBusy()+0x16c>)
    64ae:	2401      	movs	r4, #1
  fltFadeRate = 1;
    64b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  SetFilterBandwidth(intBandwidth);
    64b4:	4822      	ldr	r0, [pc, #136]	; (6540 <InitializeBusy()+0x170>)
  intFMRatePtr = 1;
    64b6:	6014      	str	r4, [r2, #0]
  fltFadeRate = 1;
    64b8:	4a22      	ldr	r2, [pc, #136]	; (6544 <InitializeBusy()+0x174>)
  SetFilterBandwidth(intBandwidth);
    64ba:	6800      	ldr	r0, [r0, #0]
  fltFadeRate = 1;
    64bc:	6011      	str	r1, [r2, #0]
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
    64be:	f640 32b8 	movw	r2, #3000	; 0xbb8
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    64c2:	4b21      	ldr	r3, [pc, #132]	; (6548 <InitializeBusy()+0x178>)
		magnitude = n * 65536.0f;
    64c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    64c8:	4c20      	ldr	r4, [pc, #128]	; (654c <InitializeBusy()+0x17c>)
    64ca:	4290      	cmp	r0, r2
		magnitude = n * 65536.0f;
    64cc:	e9c3 4107 	strd	r4, r1, [r3, #28]
    64d0:	d005      	beq.n	64de <InitializeBusy()+0x10e>
    64d2:	f241 7370 	movw	r3, #6000	; 0x1770
    64d6:	4298      	cmp	r0, r3
    64d8:	d001      	beq.n	64de <InitializeBusy()+0x10e>
} //End InitializeBusy ****************************************************************************************
    64da:	b003      	add	sp, #12
    64dc:	bd30      	pop	{r4, r5, pc}
    64de:	b003      	add	sp, #12
    64e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    64e4:	f7f9 be20 	b.w	128 <SetFilterBandwidth(int) [clone .part.0]>
				coeff_p = NULL;
    64e8:	61ec      	str	r4, [r5, #28]
    64ea:	e7df      	b.n	64ac <InitializeBusy()+0xdc>
		multiplier = n * 65536.0f;
    64ec:	eeb0 7a67 	vmov.f32	s14, s15
    64f0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    64f4:	ee17 3a10 	vmov	r3, s14
    64f8:	e7b1      	b.n	645e <InitializeBusy()+0x8e>
    64fa:	bf00      	nop
    64fc:	2001355c 	.word	0x2001355c
    6500:	2000349c 	.word	0x2000349c
    6504:	20013544 	.word	0x20013544
    6508:	20009a30 	.word	0x20009a30
    650c:	2000389c 	.word	0x2000389c
    6510:	46fffe00 	.word	0x46fffe00
    6514:	c6fffe00 	.word	0xc6fffe00
    6518:	80010000 	.word	0x80010000
    651c:	7fff0000 	.word	0x7fff0000
    6520:	2000caf0 	.word	0x2000caf0
    6524:	20012648 	.word	0x20012648
    6528:	20009a04 	.word	0x20009a04
    652c:	3fab3f46 	.word	0x3fab3f46
    6530:	20012d08 	.word	0x20012d08
    6534:	20012de8 	.word	0x20012de8
    6538:	20009260 	.word	0x20009260
    653c:	20009a28 	.word	0x20009a28
    6540:	20009a10 	.word	0x20009a10
    6544:	20012c0c 	.word	0x20012c0c
    6548:	2000a888 	.word	0x2000a888
    654c:	08b51da0 	.word	0x08b51da0

00006550 <setup>:
{
    6550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(ENC1Button, INPUT_PULLUP);    //#define ENC1Button 1
    6554:	2102      	movs	r1, #2
{
    6556:	b082      	sub	sp, #8
  pinMode(ENC1Button, INPUT_PULLUP);    //#define ENC1Button 1
    6558:	201a      	movs	r0, #26
		uint32_t millis_begin = systick_millis_count;
    655a:	4db4      	ldr	r5, [pc, #720]	; (682c <setup+0x2dc>)
    655c:	f015 f8a4 	bl	1b6a8 <pinMode>
  debouncer1.attach(ENC1Button);        //Right Encoder button
    6560:	211a      	movs	r1, #26
    6562:	48b3      	ldr	r0, [pc, #716]	; (6830 <setup+0x2e0>)
				if (elapsed > 750) break;
    6564:	f240 28ee 	movw	r8, #750	; 0x2ee
    6568:	f00e fc2e 	bl	14dc8 <Bounce::attach(int)>
  debouncer1.interval(10);
    656c:	210a      	movs	r1, #10
    656e:	48b0      	ldr	r0, [pc, #704]	; (6830 <setup+0x2e0>)
    6570:	f00e fbce 	bl	14d10 <Debouncer::interval(unsigned short)>
  pinMode(ENC2Button, INPUT_PULLUP);    //#define ENC1Button 2
    6574:	2102      	movs	r1, #2
    6576:	2027      	movs	r0, #39	; 0x27
    6578:	4cae      	ldr	r4, [pc, #696]	; (6834 <setup+0x2e4>)
    657a:	f015 f895 	bl	1b6a8 <pinMode>
  debouncer2.attach(ENC2Button);        // Left Encoder Button1
    657e:	2127      	movs	r1, #39	; 0x27
    6580:	48ad      	ldr	r0, [pc, #692]	; (6838 <setup+0x2e8>)
    6582:	f00e fc21 	bl	14dc8 <Bounce::attach(int)>
  debouncer2.interval(10);
    6586:	210a      	movs	r1, #10
    6588:	48ab      	ldr	r0, [pc, #684]	; (6838 <setup+0x2e8>)
    658a:	f00e fbc1 	bl	14d10 <Debouncer::interval(unsigned short)>
  pinMode(ENC1A_Pin, INPUT_PULLUP); //RENC1a
    658e:	2102      	movs	r1, #2
    6590:	2026      	movs	r0, #38	; 0x26
    6592:	4faa      	ldr	r7, [pc, #680]	; (683c <setup+0x2ec>)
    6594:	f015 f888 	bl	1b6a8 <pinMode>
  pinMode(ENC1B_Pin, INPUT_PULLUP); //RENC1b
    6598:	2102      	movs	r1, #2
    659a:	201b      	movs	r0, #27
    659c:	f8df 9390 	ldr.w	r9, [pc, #912]	; 6930 <setup+0x3e0>
    65a0:	f015 f882 	bl	1b6a8 <pinMode>
  pinMode(ENC2A_Pin, INPUT_PULLUP); //RENC2a
    65a4:	2102      	movs	r1, #2
    65a6:	2029      	movs	r0, #41	; 0x29
    65a8:	f015 f87e 	bl	1b6a8 <pinMode>
  pinMode(ENC2B_Pin, INPUT_PULLUP); //RENC2b
    65ac:	2102      	movs	r1, #2
    65ae:	2028      	movs	r0, #40	; 0x28
    65b0:	f015 f87a 	bl	1b6a8 <pinMode>
		uint32_t millis_begin = systick_millis_count;
    65b4:	682e      	ldr	r6, [r5, #0]
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
    65b6:	f017 f80f 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    65ba:	7823      	ldrb	r3, [r4, #0]
    65bc:	2b00      	cmp	r3, #0
    65be:	f000 828d 	beq.w	6adc <setup+0x58c>
    65c2:	783b      	ldrb	r3, [r7, #0]
    65c4:	07db      	lsls	r3, r3, #31
    65c6:	f140 8289 	bpl.w	6adc <setup+0x58c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    65ca:	682b      	ldr	r3, [r5, #0]
    65cc:	f8d9 2000 	ldr.w	r2, [r9]
    65d0:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    65d2:	2b0e      	cmp	r3, #14
    65d4:	f240 8282 	bls.w	6adc <setup+0x58c>
		yield();
    65d8:	f016 fffe 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    65dc:	7823      	ldrb	r3, [r4, #0]
    65de:	2b00      	cmp	r3, #0
    65e0:	d0fa      	beq.n	65d8 <setup+0x88>
    65e2:	783b      	ldrb	r3, [r7, #0]
    65e4:	07de      	lsls	r6, r3, #31
    65e6:	d5f7      	bpl.n	65d8 <setup+0x88>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    65e8:	682b      	ldr	r3, [r5, #0]
    65ea:	f8d9 2000 	ldr.w	r2, [r9]
    65ee:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    65f0:	2b0e      	cmp	r3, #14
    65f2:	d9f1      	bls.n	65d8 <setup+0x88>
  sgtl5000_1.enable(); sgtl5000_1.volume(.2); // keep volume low for headphones
    65f4:	4892      	ldr	r0, [pc, #584]	; (6840 <setup+0x2f0>)
    65f6:	f004 fcd5 	bl	afa4 <AudioControlSGTL5000::enable()>
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    65fa:	211a      	movs	r1, #26
    65fc:	4890      	ldr	r0, [pc, #576]	; (6840 <setup+0x2f0>)
    65fe:	f004 fd17 	bl	b030 <AudioControlSGTL5000::volumeInteger(unsigned int)>
  AudioMemory(50);
    6602:	2132      	movs	r1, #50	; 0x32
    6604:	488f      	ldr	r0, [pc, #572]	; (6844 <setup+0x2f4>)
    6606:	f022 f88f 	bl	28728 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
		if (!(activemask & (1<<channel))) {
    660a:	4a8f      	ldr	r2, [pc, #572]	; (6848 <setup+0x2f8>)
    660c:	7e11      	ldrb	r1, [r2, #24]
    660e:	09cb      	lsrs	r3, r1, #7
    6610:	f040 8280 	bne.w	6b14 <setup+0x5c4>
			if (blks > maxblocks) maxblocks = blks;
    6614:	8bd3      	ldrh	r3, [r2, #30]
			position[channel] = n;
    6616:	f240 10f5 	movw	r0, #501	; 0x1f5
			if (blks > maxblocks) maxblocks = blks;
    661a:	2b04      	cmp	r3, #4
			position[channel] = n;
    661c:	63d0      	str	r0, [r2, #60]	; 0x3c
			if (blks > maxblocks) maxblocks = blks;
    661e:	f240 8365 	bls.w	6cec <setup+0x79c>
			activemask |= (1<<channel);
    6622:	f061 017f 	orn	r1, r1, #127	; 0x7f
    6626:	7611      	strb	r1, [r2, #24]
		if (!(activemask & (1<<channel))) {
    6628:	4a88      	ldr	r2, [pc, #544]	; (684c <setup+0x2fc>)
    662a:	7e14      	ldrb	r4, [r2, #24]
    662c:	09e1      	lsrs	r1, r4, #7
    662e:	f040 8263 	bne.w	6af8 <setup+0x5a8>
			if (blks > maxblocks) maxblocks = blks;
    6632:	8bd1      	ldrh	r1, [r2, #30]
			position[channel] = n;
    6634:	f240 108d 	movw	r0, #397	; 0x18d
			if (blks > maxblocks) maxblocks = blks;
    6638:	2904      	cmp	r1, #4
			position[channel] = n;
    663a:	63d0      	str	r0, [r2, #60]	; 0x3c
			if (blks > maxblocks) maxblocks = blks;
    663c:	f240 834f 	bls.w	6cde <setup+0x78e>
			activemask |= (1<<channel);
    6640:	f064 037f 	orn	r3, r4, #127	; 0x7f
    6644:	7613      	strb	r3, [r2, #24]
	}
	void amplitude(float n) {
		if (n < 0.0f) n = 0.0;
		else if (n > 1.0f) n = 1.0f;
		level = (int32_t)(n * 65536.0f);
    6646:	f24a 512b 	movw	r1, #42283	; 0xa52b
	}
	void averageTogether(uint8_t n) {
		// not implemented yet (may never be, 86 Hz output rate is ok)
	}
	void windowFunction(const int16_t *w) {
		window = w;
    664a:	4b81      	ldr	r3, [pc, #516]	; (6850 <setup+0x300>)
    664c:	4a81      	ldr	r2, [pc, #516]	; (6854 <setup+0x304>)
  intTuneOffset = 0; intGainLevel[0] = 1; intGainLevel[1] = 1; intGainLevel[2]= 7; intGainLevel[3]= 7;  
    664e:	f04f 0a07 	mov.w	sl, #7
    6652:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 6934 <setup+0x3e4>
  intA3history = 0;  intTargetSN = 40; intBandwidth = 3000; intMode = 0; intFadeRatePtr = 0; intFMRatePtr = 0; intFMDevPtr = 0;intFadeDepth_dB = 0;
    6656:	f640 39b8 	movw	r9, #3000	; 0xbb8
    665a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  tft.init(320, 480);
    665e:	2300      	movs	r3, #0
    6660:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    6664:	487c      	ldr	r0, [pc, #496]	; (6858 <setup+0x308>)
    6666:	f8c8 1018 	str.w	r1, [r8, #24]
    666a:	f44f 71a0 	mov.w	r1, #320	; 0x140
    666e:	f013 fd7d 	bl	1a16c <ST7796_t3::init(unsigned short, unsigned short, unsigned char)>
  tft.invertDisplay(true);                // This LCD requires colors to be inverted
    6672:	2101      	movs	r1, #1
    6674:	4878      	ldr	r0, [pc, #480]	; (6858 <setup+0x308>)
    6676:	f010 f8cb 	bl	16810 <ST7735_t3::invertDisplay(bool)>
  tft.setRotation(TFT_Screen_Rotate);     // Rotates screen to match the baseboard orientation (-->3)
    667a:	2103      	movs	r1, #3
    667c:	4876      	ldr	r0, [pc, #472]	; (6858 <setup+0x308>)
    667e:	f013 fb59 	bl	19d34 <ST7796_t3::setRotation(unsigned char)>
  tft.setCursor(1, 120);          // Set initial cursor position
    6682:	2300      	movs	r3, #0
    6684:	2278      	movs	r2, #120	; 0x78
    6686:	2101      	movs	r1, #1
    6688:	4873      	ldr	r0, [pc, #460]	; (6858 <setup+0x308>)
    668a:	f010 fec7 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
  tft.fillScreen(ST7735_BLACK);
    668e:	2100      	movs	r1, #0
    6690:	4871      	ldr	r0, [pc, #452]	; (6858 <setup+0x308>)
    6692:	f010 f8af 	bl	167f4 <ST7735_t3::fillScreen(unsigned short)>
  tft.setTextColor(ST7735_WHITE);  tft.setTextSize(4);  tft.println("IONOS SIM      ");
    6696:	f64f 71ff 	movw	r1, #65535	; 0xffff
    669a:	486f      	ldr	r0, [pc, #444]	; (6858 <setup+0x308>)
    669c:	f010 ff20 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    66a0:	2204      	movs	r2, #4
    66a2:	486d      	ldr	r0, [pc, #436]	; (6858 <setup+0x308>)
    66a4:	4611      	mov	r1, r2
  tft.setTextColor(ST7735_MAGENTA);tft.setCursor(0,180);tft.print(" Serial: "); tft.printf("%08X",OCOTP_CFG0);
    66a6:	4c6d      	ldr	r4, [pc, #436]	; (685c <setup+0x30c>)
    66a8:	f010 ff0e 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    66ac:	220f      	movs	r2, #15
    66ae:	496c      	ldr	r1, [pc, #432]	; (6860 <setup+0x310>)
    66b0:	4869      	ldr	r0, [pc, #420]	; (6858 <setup+0x308>)
    66b2:	f013 fa11 	bl	19ad8 <ST7735_t3::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    66b6:	4868      	ldr	r0, [pc, #416]	; (6858 <setup+0x308>)
    66b8:	f014 fafc 	bl	1acb4 <Print::println()>
  tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(strRevision);
    66bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
    66c0:	4865      	ldr	r0, [pc, #404]	; (6858 <setup+0x308>)
    66c2:	f010 ff0d 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    66c6:	2203      	movs	r2, #3
    66c8:	4863      	ldr	r0, [pc, #396]	; (6858 <setup+0x308>)
    66ca:	4611      	mov	r1, r2
  blnSim = true;  blnInitialized = false; blnEnableTestTone = false; blnPlotSpectrum = false; blnInitSpectrum = false; 
    66cc:	4f65      	ldr	r7, [pc, #404]	; (6864 <setup+0x314>)
    66ce:	f010 fefb 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
    66d2:	4965      	ldr	r1, [pc, #404]	; (6868 <setup+0x318>)
    66d4:	4860      	ldr	r0, [pc, #384]	; (6858 <setup+0x308>)
    66d6:	f014 fabb 	bl	1ac50 <Print::print(String const&)>
    66da:	485f      	ldr	r0, [pc, #380]	; (6858 <setup+0x308>)
    66dc:	f014 faea 	bl	1acb4 <Print::println()>
  tft.setTextColor(ST7735_MAGENTA);tft.setCursor(0,180);tft.print(" Serial: "); tft.printf("%08X",OCOTP_CFG0);
    66e0:	f64f 011f 	movw	r1, #63519	; 0xf81f
    66e4:	485c      	ldr	r0, [pc, #368]	; (6858 <setup+0x308>)
    66e6:	f010 fefb 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    66ea:	2300      	movs	r3, #0
    66ec:	22b4      	movs	r2, #180	; 0xb4
    66ee:	485a      	ldr	r0, [pc, #360]	; (6858 <setup+0x308>)
    66f0:	4619      	mov	r1, r3
    66f2:	f010 fe93 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
							  return write((const uint8_t *)str, strlen(str)); }
    66f6:	2209      	movs	r2, #9
    66f8:	495c      	ldr	r1, [pc, #368]	; (686c <setup+0x31c>)
    66fa:	4857      	ldr	r0, [pc, #348]	; (6858 <setup+0x308>)
    66fc:	f013 f9ec 	bl	19ad8 <ST7735_t3::write(unsigned char const*, unsigned int)>
    6700:	f8d4 2410 	ldr.w	r2, [r4, #1040]	; 0x410
    6704:	495a      	ldr	r1, [pc, #360]	; (6870 <setup+0x320>)
    6706:	4854      	ldr	r0, [pc, #336]	; (6858 <setup+0x308>)
    6708:	f014 faf0 	bl	1acec <Print::printf(char const*, ...)>
  delay(4000);
    670c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    6710:	f014 ff10 	bl	1b534 <delay>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6714:	210a      	movs	r1, #10
    6716:	4857      	ldr	r0, [pc, #348]	; (6874 <setup+0x324>)
    6718:	f016 fee0 	bl	1d4dc <usb_serial_write>
  Serial.print("IONOS SIM ");Serial.print(strRevision); Serial.print(" Serial: ");Serial.printf("%08X",OCOTP_CFG0);Serial.println("");
    671c:	4952      	ldr	r1, [pc, #328]	; (6868 <setup+0x318>)
    671e:	4856      	ldr	r0, [pc, #344]	; (6878 <setup+0x328>)
    6720:	f014 fa96 	bl	1ac50 <Print::print(String const&)>
    6724:	2109      	movs	r1, #9
    6726:	4851      	ldr	r0, [pc, #324]	; (686c <setup+0x31c>)
    6728:	f016 fed8 	bl	1d4dc <usb_serial_write>
    672c:	f8d4 2410 	ldr.w	r2, [r4, #1040]	; 0x410
    6730:	494f      	ldr	r1, [pc, #316]	; (6870 <setup+0x320>)
    6732:	4851      	ldr	r0, [pc, #324]	; (6878 <setup+0x328>)
    6734:	f014 fada 	bl	1acec <Print::printf(char const*, ...)>
    6738:	2100      	movs	r1, #0
    673a:	4850      	ldr	r0, [pc, #320]	; (687c <setup+0x32c>)
    673c:	f016 fece 	bl	1d4dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6740:	484d      	ldr	r0, [pc, #308]	; (6878 <setup+0x328>)
    6742:	f014 fab7 	bl	1acb4 <Print::println()>
  strMode = ""; strParameter= "";
    6746:	494d      	ldr	r1, [pc, #308]	; (687c <setup+0x32c>)
    6748:	484d      	ldr	r0, [pc, #308]	; (6880 <setup+0x330>)
    674a:	f014 fc89 	bl	1b060 <String::operator=(char const*)>
    674e:	494b      	ldr	r1, [pc, #300]	; (687c <setup+0x32c>)
    6750:	484c      	ldr	r0, [pc, #304]	; (6884 <setup+0x334>)
    6752:	f014 fc85 	bl	1b060 <String::operator=(char const*)>
  blnSim = true;  blnInitialized = false; blnEnableTestTone = false; blnPlotSpectrum = false; blnInitSpectrum = false; 
    6756:	2300      	movs	r3, #0
    6758:	2101      	movs	r1, #1
    675a:	4a4b      	ldr	r2, [pc, #300]	; (6888 <setup+0x338>)
    675c:	703b      	strb	r3, [r7, #0]
  intBusyFreqStep = 100; intBusyBWLoHz = 0; intBusyBWHiHz = 6500;  intBusyGain = 10; intLastIQPlaneMode = -1; intDetectSN = 0; intSerialCmdMode = -1; 
    675e:	f641 1e64 	movw	lr, #6500	; 0x1964
  blnSim = true;  blnInitialized = false; blnEnableTestTone = false; blnPlotSpectrum = false; blnInitSpectrum = false; 
    6762:	4f4a      	ldr	r7, [pc, #296]	; (688c <setup+0x33c>)
  intBusyFreqStep = 100; intBusyBWLoHz = 0; intBusyBWHiHz = 6500;  intBusyGain = 10; intLastIQPlaneMode = -1; intDetectSN = 0; intSerialCmdMode = -1; 
    6764:	200a      	movs	r0, #10
  intTuneOffset = 0; intGainLevel[0] = 1; intGainLevel[1] = 1; intGainLevel[2]= 7; intGainLevel[3]= 7;  
    6766:	4c4a      	ldr	r4, [pc, #296]	; (6890 <setup+0x340>)
  intBusyFreqStep = 100; intBusyBWLoHz = 0; intBusyBWHiHz = 6500;  intBusyGain = 10; intLastIQPlaneMode = -1; intDetectSN = 0; intSerialCmdMode = -1; 
    6768:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  blnSim = true;  blnInitialized = false; blnEnableTestTone = false; blnPlotSpectrum = false; blnInitSpectrum = false; 
    676c:	703b      	strb	r3, [r7, #0]
    676e:	4f49      	ldr	r7, [pc, #292]	; (6894 <setup+0x344>)
    6770:	7011      	strb	r1, [r2, #0]
  fltVLF_UpFreq = 100; fltVLF_Amp = 0; fltFadeRate = 0;  
    6772:	2200      	movs	r2, #0
  blnSim = true;  blnInitialized = false; blnEnableTestTone = false; blnPlotSpectrum = false; blnInitSpectrum = false; 
    6774:	703b      	strb	r3, [r7, #0]
    6776:	4f48      	ldr	r7, [pc, #288]	; (6898 <setup+0x348>)
    6778:	682e      	ldr	r6, [r5, #0]
    677a:	703b      	strb	r3, [r7, #0]
  blnModes = true; blnInitModes = true; blnColon = false;  blnChanBusySent = false;  blnChanClearSent = false; blnPlotBusyRed = false;  blnEnbBusyDetect = false;
    677c:	4f47      	ldr	r7, [pc, #284]	; (689c <setup+0x34c>)
  intA3history = 0;  intTargetSN = 40; intBandwidth = 3000; intMode = 0; intFadeRatePtr = 0; intFMRatePtr = 0; intFMDevPtr = 0;intFadeDepth_dB = 0;
    677e:	4d48      	ldr	r5, [pc, #288]	; (68a0 <setup+0x350>)
  blnModes = true; blnInitModes = true; blnColon = false;  blnChanBusySent = false;  blnChanClearSent = false; blnPlotBusyRed = false;  blnEnbBusyDetect = false;
    6780:	7039      	strb	r1, [r7, #0]
    6782:	4f48      	ldr	r7, [pc, #288]	; (68a4 <setup+0x354>)
  intA3history = 0;  intTargetSN = 40; intBandwidth = 3000; intMode = 0; intFadeRatePtr = 0; intFMRatePtr = 0; intFMDevPtr = 0;intFadeDepth_dB = 0;
    6784:	f8c5 9000 	str.w	r9, [r5]
  blnModes = true; blnInitModes = true; blnColon = false;  blnChanBusySent = false;  blnChanClearSent = false; blnPlotBusyRed = false;  blnEnbBusyDetect = false;
    6788:	7039      	strb	r1, [r7, #0]
  intTuneOffset = 0; intGainLevel[0] = 1; intGainLevel[1] = 1; intGainLevel[2]= 7; intGainLevel[3]= 7;  
    678a:	4f47      	ldr	r7, [pc, #284]	; (68a8 <setup+0x358>)
    678c:	e9c4 1100 	strd	r1, r1, [r4]
  blnModes = true; blnInitModes = true; blnColon = false;  blnChanBusySent = false;  blnChanClearSent = false; blnPlotBusyRed = false;  blnEnbBusyDetect = false;
    6790:	4946      	ldr	r1, [pc, #280]	; (68ac <setup+0x35c>)
  intTuneOffset = 0; intGainLevel[0] = 1; intGainLevel[1] = 1; intGainLevel[2]= 7; intGainLevel[3]= 7;  
    6792:	603b      	str	r3, [r7, #0]
  blnModes = true; blnInitModes = true; blnColon = false;  blnChanBusySent = false;  blnChanClearSent = false; blnPlotBusyRed = false;  blnEnbBusyDetect = false;
    6794:	700b      	strb	r3, [r1, #0]
    6796:	4946      	ldr	r1, [pc, #280]	; (68b0 <setup+0x360>)
    6798:	700b      	strb	r3, [r1, #0]
    679a:	4946      	ldr	r1, [pc, #280]	; (68b4 <setup+0x364>)
    679c:	700b      	strb	r3, [r1, #0]
    679e:	4946      	ldr	r1, [pc, #280]	; (68b8 <setup+0x368>)
    67a0:	700b      	strb	r3, [r1, #0]
    67a2:	4946      	ldr	r1, [pc, #280]	; (68bc <setup+0x36c>)
    67a4:	700b      	strb	r3, [r1, #0]
  blnTestMode3K = false; blnTestMode6K = false; blnInitializedFromEEPROM = false;
    67a6:	4946      	ldr	r1, [pc, #280]	; (68c0 <setup+0x370>)
    67a8:	700b      	strb	r3, [r1, #0]
    67aa:	4946      	ldr	r1, [pc, #280]	; (68c4 <setup+0x374>)
    67ac:	700b      	strb	r3, [r1, #0]
    67ae:	4946      	ldr	r1, [pc, #280]	; (68c8 <setup+0x378>)
    67b0:	700b      	strb	r3, [r1, #0]
  ulngLastSpectrumUpdateMs = millis(); 
    67b2:	4946      	ldr	r1, [pc, #280]	; (68cc <setup+0x37c>)
    67b4:	600e      	str	r6, [r1, #0]
  intA3history = 0;  intTargetSN = 40; intBandwidth = 3000; intMode = 0; intFadeRatePtr = 0; intFMRatePtr = 0; intFMDevPtr = 0;intFadeDepth_dB = 0;
    67b6:	2628      	movs	r6, #40	; 0x28
  lngENC1Old = 0; lngENC2Old = 0; lngENC1New = 0; lngENC2New = 0; 
    67b8:	4945      	ldr	r1, [pc, #276]	; (68d0 <setup+0x380>)
    67ba:	600b      	str	r3, [r1, #0]
    67bc:	4945      	ldr	r1, [pc, #276]	; (68d4 <setup+0x384>)
    67be:	600b      	str	r3, [r1, #0]
    67c0:	4945      	ldr	r1, [pc, #276]	; (68d8 <setup+0x388>)
    67c2:	600b      	str	r3, [r1, #0]
    67c4:	4945      	ldr	r1, [pc, #276]	; (68dc <setup+0x38c>)
    67c6:	600b      	str	r3, [r1, #0]
  intA3history = 0;  intTargetSN = 40; intBandwidth = 3000; intMode = 0; intFadeRatePtr = 0; intFMRatePtr = 0; intFMDevPtr = 0;intFadeDepth_dB = 0;
    67c8:	4945      	ldr	r1, [pc, #276]	; (68e0 <setup+0x390>)
    67ca:	600b      	str	r3, [r1, #0]
    67cc:	4945      	ldr	r1, [pc, #276]	; (68e4 <setup+0x394>)
    67ce:	600e      	str	r6, [r1, #0]
    67d0:	4945      	ldr	r1, [pc, #276]	; (68e8 <setup+0x398>)
    67d2:	4e46      	ldr	r6, [pc, #280]	; (68ec <setup+0x39c>)
    67d4:	600b      	str	r3, [r1, #0]
    67d6:	4946      	ldr	r1, [pc, #280]	; (68f0 <setup+0x3a0>)
    67d8:	6033      	str	r3, [r6, #0]
    67da:	600b      	str	r3, [r1, #0]
    67dc:	4945      	ldr	r1, [pc, #276]	; (68f4 <setup+0x3a4>)
    67de:	600b      	str	r3, [r1, #0]
    67e0:	4945      	ldr	r1, [pc, #276]	; (68f8 <setup+0x3a8>)
    67e2:	600b      	str	r3, [r1, #0]
  intDelayToUpdate = 0; intFFTCnt = 0; intBusyMode = 0; intBinsAveraged = 0; intNumofBinsToPlot = 0;
    67e4:	4945      	ldr	r1, [pc, #276]	; (68fc <setup+0x3ac>)
  intTuneOffset = 0; intGainLevel[0] = 1; intGainLevel[1] = 1; intGainLevel[2]= 7; intGainLevel[3]= 7;  
    67e6:	e9c4 aa02 	strd	sl, sl, [r4, #8]
  intDelayToUpdate = 0; intFFTCnt = 0; intBusyMode = 0; intBinsAveraged = 0; intNumofBinsToPlot = 0;
    67ea:	600b      	str	r3, [r1, #0]
  intBusyFreqStep = 100; intBusyBWLoHz = 0; intBusyBWHiHz = 6500;  intBusyGain = 10; intLastIQPlaneMode = -1; intDetectSN = 0; intSerialCmdMode = -1; 
    67ec:	f04f 0a64 	mov.w	sl, #100	; 0x64
  intDelayToUpdate = 0; intFFTCnt = 0; intBusyMode = 0; intBinsAveraged = 0; intNumofBinsToPlot = 0;
    67f0:	4943      	ldr	r1, [pc, #268]	; (6900 <setup+0x3b0>)
    67f2:	600b      	str	r3, [r1, #0]
    67f4:	4943      	ldr	r1, [pc, #268]	; (6904 <setup+0x3b4>)
    67f6:	600b      	str	r3, [r1, #0]
    67f8:	4943      	ldr	r1, [pc, #268]	; (6908 <setup+0x3b8>)
    67fa:	600b      	str	r3, [r1, #0]
    67fc:	4943      	ldr	r1, [pc, #268]	; (690c <setup+0x3bc>)
    67fe:	600b      	str	r3, [r1, #0]
  intBusyFreqStep = 100; intBusyBWLoHz = 0; intBusyBWHiHz = 6500;  intBusyGain = 10; intLastIQPlaneMode = -1; intDetectSN = 0; intSerialCmdMode = -1; 
    6800:	4943      	ldr	r1, [pc, #268]	; (6910 <setup+0x3c0>)
    6802:	f8c1 a000 	str.w	sl, [r1]
    6806:	4943      	ldr	r1, [pc, #268]	; (6914 <setup+0x3c4>)
    6808:	600b      	str	r3, [r1, #0]
    680a:	4943      	ldr	r1, [pc, #268]	; (6918 <setup+0x3c8>)
    680c:	f8c1 e000 	str.w	lr, [r1]
    6810:	4942      	ldr	r1, [pc, #264]	; (691c <setup+0x3cc>)
    6812:	6008      	str	r0, [r1, #0]
    6814:	4942      	ldr	r1, [pc, #264]	; (6920 <setup+0x3d0>)
    6816:	f8c1 c000 	str.w	ip, [r1]
    681a:	4942      	ldr	r1, [pc, #264]	; (6924 <setup+0x3d4>)
    681c:	600b      	str	r3, [r1, #0]
    681e:	4942      	ldr	r1, [pc, #264]	; (6928 <setup+0x3d8>)
    6820:	f8c1 c000 	str.w	ip, [r1]
  intSerialCmdParam = -1; intAvg = 10; intSpecLow = 0; intSpecHigh = 6500; intThresh = 10; intTestFreqHz = 1500; intDelayCount = 0; intMultipaths = 2;
    6824:	4941      	ldr	r1, [pc, #260]	; (692c <setup+0x3dc>)
    6826:	f8c1 c000 	str.w	ip, [r1]
    682a:	e085      	b.n	6938 <setup+0x3e8>
    682c:	20013554 	.word	0x20013554
    6830:	2000cb10 	.word	0x2000cb10
    6834:	200136f9 	.word	0x200136f9
    6838:	2000cb28 	.word	0x2000cb28
    683c:	200136f8 	.word	0x200136f8
    6840:	200133a8 	.word	0x200133a8
    6844:	20200000 	.word	0x20200000
    6848:	2000cb40 	.word	0x2000cb40
    684c:	2000e110 	.word	0x2000e110
    6850:	20010704 	.word	0x20010704
    6854:	20002c04 	.word	0x20002c04
    6858:	2001355c 	.word	0x2001355c
    685c:	401f4000 	.word	0x401f4000
    6860:	20005630 	.word	0x20005630
    6864:	200136e8 	.word	0x200136e8
    6868:	20013544 	.word	0x20013544
    686c:	20005640 	.word	0x20005640
    6870:	2000564c 	.word	0x2000564c
    6874:	20005654 	.word	0x20005654
    6878:	20008ba0 	.word	0x20008ba0
    687c:	200039f8 	.word	0x200039f8
    6880:	2001352c 	.word	0x2001352c
    6884:	20013538 	.word	0x20013538
    6888:	20009cba 	.word	0x20009cba
    688c:	200136e5 	.word	0x200136e5
    6890:	20009a30 	.word	0x20009a30
    6894:	200136eb 	.word	0x200136eb
    6898:	200136e7 	.word	0x200136e7
    689c:	20009cb9 	.word	0x20009cb9
    68a0:	20009a10 	.word	0x20009a10
    68a4:	20009cb8 	.word	0x20009cb8
    68a8:	20012cbc 	.word	0x20012cbc
    68ac:	200136e4 	.word	0x200136e4
    68b0:	200136e2 	.word	0x200136e2
    68b4:	200136e3 	.word	0x200136e3
    68b8:	200136ea 	.word	0x200136ea
    68bc:	200136e6 	.word	0x200136e6
    68c0:	200136ed 	.word	0x200136ed
    68c4:	200136ee 	.word	0x200136ee
    68c8:	200136e9 	.word	0x200136e9
    68cc:	20013684 	.word	0x20013684
    68d0:	20012cc4 	.word	0x20012cc4
    68d4:	20012ccc 	.word	0x20012ccc
    68d8:	20012cc0 	.word	0x20012cc0
    68dc:	20012cc8 	.word	0x20012cc8
    68e0:	20012c88 	.word	0x20012c88
    68e4:	20009a58 	.word	0x20009a58
    68e8:	20009a2c 	.word	0x20009a2c
    68ec:	20012cb0 	.word	0x20012cb0
    68f0:	20009a28 	.word	0x20009a28
    68f4:	20009a24 	.word	0x20009a24
    68f8:	20012cac 	.word	0x20012cac
    68fc:	20012ca0 	.word	0x20012ca0
    6900:	20012ca8 	.word	0x20012ca8
    6904:	20012c94 	.word	0x20012c94
    6908:	20012c8c 	.word	0x20012c8c
    690c:	20012cb4 	.word	0x20012cb4
    6910:	20009a1c 	.word	0x20009a1c
    6914:	20012c90 	.word	0x20012c90
    6918:	20009a18 	.word	0x20009a18
    691c:	20009a20 	.word	0x20009a20
    6920:	20009a44 	.word	0x20009a44
    6924:	20012ca4 	.word	0x20012ca4
    6928:	20009a4c 	.word	0x20009a4c
    692c:	20009a50 	.word	0x20009a50
    6930:	20013690 	.word	0x20013690
    6934:	2001369c 	.word	0x2001369c
    6938:	49b1      	ldr	r1, [pc, #708]	; (6c00 <setup+0x6b0>)
    693a:	6008      	str	r0, [r1, #0]
    693c:	49b1      	ldr	r1, [pc, #708]	; (6c04 <setup+0x6b4>)
    693e:	600b      	str	r3, [r1, #0]
    6940:	49b1      	ldr	r1, [pc, #708]	; (6c08 <setup+0x6b8>)
    6942:	f8c1 e000 	str.w	lr, [r1]
    6946:	49b1      	ldr	r1, [pc, #708]	; (6c0c <setup+0x6bc>)
    6948:	6008      	str	r0, [r1, #0]
    694a:	f240 50dc 	movw	r0, #1500	; 0x5dc
    694e:	49b0      	ldr	r1, [pc, #704]	; (6c10 <setup+0x6c0>)
    6950:	6008      	str	r0, [r1, #0]
    6952:	49b0      	ldr	r1, [pc, #704]	; (6c14 <setup+0x6c4>)
    6954:	600b      	str	r3, [r1, #0]
    6956:	2102      	movs	r1, #2
    6958:	4baf      	ldr	r3, [pc, #700]	; (6c18 <setup+0x6c8>)
    695a:	6019      	str	r1, [r3, #0]
  fltVLF_UpFreq = 100; fltVLF_Amp = 0; fltFadeRate = 0;  
    695c:	49af      	ldr	r1, [pc, #700]	; (6c1c <setup+0x6cc>)
    695e:	4bb0      	ldr	r3, [pc, #704]	; (6c20 <setup+0x6d0>)
    6960:	6019      	str	r1, [r3, #0]
    6962:	4bb0      	ldr	r3, [pc, #704]	; (6c24 <setup+0x6d4>)
    6964:	601a      	str	r2, [r3, #0]
    6966:	4bb0      	ldr	r3, [pc, #704]	; (6c28 <setup+0x6d8>)
    6968:	601a      	str	r2, [r3, #0]
    fltPeakSum = 0; fltNoiseSum = 0; fltMax = 0; fltAvg = 0; fltAvgBinsOfInt = 0.0;
    696a:	4bb0      	ldr	r3, [pc, #704]	; (6c2c <setup+0x6dc>)
    696c:	601a      	str	r2, [r3, #0]
    696e:	4bb0      	ldr	r3, [pc, #704]	; (6c30 <setup+0x6e0>)
    6970:	601a      	str	r2, [r3, #0]
    6972:	4bb0      	ldr	r3, [pc, #704]	; (6c34 <setup+0x6e4>)
    6974:	601a      	str	r2, [r3, #0]
    6976:	4bb0      	ldr	r3, [pc, #704]	; (6c38 <setup+0x6e8>)
    6978:	601a      	str	r2, [r3, #0]
    697a:	4bb0      	ldr	r3, [pc, #704]	; (6c3c <setup+0x6ec>)
    697c:	601a      	str	r2, [r3, #0]
  fltppi2s0InAvg = 0.0; fltppi2s1InAvg = 0.0; fltppAmpRightOutAvg = 0.0; fltppAmpLeftOutAvg = 0.0;
    697e:	4bb0      	ldr	r3, [pc, #704]	; (6c40 <setup+0x6f0>)
    6980:	601a      	str	r2, [r3, #0]
    6982:	4bb0      	ldr	r3, [pc, #704]	; (6c44 <setup+0x6f4>)
    6984:	601a      	str	r2, [r3, #0]
    6986:	4bb0      	ldr	r3, [pc, #704]	; (6c48 <setup+0x6f8>)
    6988:	601a      	str	r2, [r3, #0]
    698a:	4bb0      	ldr	r3, [pc, #704]	; (6c4c <setup+0x6fc>)
    698c:	601a      	str	r2, [r3, #0]
 InitializeParametersFromEEPROM();delay(1000);
    698e:	f7fe ff3d 	bl	580c <InitializeParametersFromEEPROM()>
    6992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6996:	f014 fdcd 	bl	1b534 <delay>
 SetFilterBandwidth(intBandwidth);
    699a:	6828      	ldr	r0, [r5, #0]
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
    699c:	4548      	cmp	r0, r9
    699e:	f000 8097 	beq.w	6ad0 <setup+0x580>
    69a2:	f241 7370 	movw	r3, #6000	; 0x1770
    69a6:	4298      	cmp	r0, r3
    69a8:	f000 8092 	beq.w	6ad0 <setup+0x580>
    69ac:	f24a 532b 	movw	r3, #42283	; 0xa52b
    69b0:	49a7      	ldr	r1, [pc, #668]	; (6c50 <setup+0x700>)
    69b2:	4aa8      	ldr	r2, [pc, #672]	; (6c54 <setup+0x704>)
    69b4:	f8c8 3018 	str.w	r3, [r8, #24]
  for (int i = 0; i < 120; i ++) // for 120 taps including forced 0 end tap to make number of taps even 
    69b8:	f101 03f0 	add.w	r3, r1, #240	; 0xf0
    69bc:	ed9f 7b8a 	vldr	d7, [pc, #552]	; 6be8 <setup+0x698>
       shtHilbertFIR_120TapCoeff[119-i] = dblHilbertFIR_IowaHills_119TapsCoeff[i] * 33702; //scale by 33702 To set same level into delayQ as delayI
    69c0:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 6bf0 <setup+0x6a0>
    69c4:	e001      	b.n	69ca <setup+0x47a>
    69c6:	ecb2 7b02 	vldmia	r2!, {d7}
    69ca:	ee27 7b06 	vmul.f64	d7, d7, d6
    69ce:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    69d2:	ee17 0a10 	vmov	r0, s14
    69d6:	f823 0d02 	strh.w	r0, [r3, #-2]!
  for (int i = 0; i < 120; i ++) // for 120 taps including forced 0 end tap to make number of taps even 
    69da:	4299      	cmp	r1, r3
    69dc:	d1f3      	bne.n	69c6 <setup+0x476>
		coeff_p = cp;
    69de:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 6c90 <setup+0x740>
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
    69e2:	2901      	cmp	r1, #1
		coeff_p = cp;
    69e4:	f8c8 101c 	str.w	r1, [r8, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
    69e8:	d90c      	bls.n	6a04 <setup+0x4b4>
			if (arm_fir_init_q15(&fir_inst, n_coeffs, (q15_t *)coeff_p,
    69ea:	2380      	movs	r3, #128	; 0x80
    69ec:	4a98      	ldr	r2, [pc, #608]	; (6c50 <setup+0x700>)
    69ee:	2178      	movs	r1, #120	; 0x78
    69f0:	f108 0020 	add.w	r0, r8, #32
    69f4:	9300      	str	r3, [sp, #0]
    69f6:	f108 032c 	add.w	r3, r8, #44	; 0x2c
    69fa:	f017 f9ab 	bl	1dd54 <arm_fir_init_q15>
    69fe:	2800      	cmp	r0, #0
    6a00:	f040 8169 	bne.w	6cd6 <setup+0x786>
  SetFilterBandwidth(intBandwidth);
    6a04:	6828      	ldr	r0, [r5, #0]
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
    6a06:	f640 33b8 	movw	r3, #3000	; 0xbb8
    6a0a:	4298      	cmp	r0, r3
    6a0c:	d063      	beq.n	6ad6 <setup+0x586>
    6a0e:	f241 7370 	movw	r3, #6000	; 0x1770
    6a12:	4298      	cmp	r0, r3
    6a14:	d05f      	beq.n	6ad6 <setup+0x586>
	// input = +1.0 doubles carrier
	// input = -1.0 DC output
	void frequency(float freq) {
		if (freq < 0.0f) freq = 0.0f;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/4.0f) freq = AUDIO_SAMPLE_RATE_EXACT/4.0f;
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    6a16:	4a90      	ldr	r2, [pc, #576]	; (6c58 <setup+0x708>)
		phase_accumulator = angle * (float)(4294967296.0 / 360.0);
	}
	void amplitude(float n) {
		if (n < 0.0f) n = 0;
		else if (n > 1.0f) n = 1.0f;
		magnitude = n * 65536.0f;
    6a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    6a1c:	f8df 8274 	ldr.w	r8, [pc, #628]	; 6c94 <setup+0x744>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    6a20:	4d8e      	ldr	r5, [pc, #568]	; (6c5c <setup+0x70c>)
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    6a22:	f8c8 201c 	str.w	r2, [r8, #28]
		coeff_p = cp;
    6a26:	f8df 9270 	ldr.w	r9, [pc, #624]	; 6c98 <setup+0x748>
		magnitude = n * 65536.0f;
    6a2a:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
		magnitude = n * 65536.0f;
    6a2e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    6a32:	4a8b      	ldr	r2, [pc, #556]	; (6c60 <setup+0x710>)
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
    6a34:	2a01      	cmp	r2, #1
		coeff_p = cp;
    6a36:	f8c9 201c 	str.w	r2, [r9, #28]
		if (coeff_p && (coeff_p != FIR_PASSTHRU) && n_coeffs <= FIR_MAX_COEFFS) {
    6a3a:	d90b      	bls.n	6a54 <setup+0x504>
			if (arm_fir_init_q15(&fir_inst, n_coeffs, (q15_t *)coeff_p,
    6a3c:	2380      	movs	r3, #128	; 0x80
    6a3e:	2178      	movs	r1, #120	; 0x78
    6a40:	f109 0020 	add.w	r0, r9, #32
    6a44:	9300      	str	r3, [sp, #0]
    6a46:	f109 032c 	add.w	r3, r9, #44	; 0x2c
    6a4a:	f017 f983 	bl	1dd54 <arm_fir_init_q15>
    6a4e:	2800      	cmp	r0, #0
    6a50:	f040 8148 	bne.w	6ce4 <setup+0x794>
  sine_Dnmix.frequency(7700.0- intTuneOffset);sine_Dnmix.amplitude(1.0);
    6a54:	ed97 6a00 	vldr	s12, [r7]
    6a58:	2300      	movs	r3, #0
    6a5a:	4a82      	ldr	r2, [pc, #520]	; (6c64 <setup+0x714>)
    6a5c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    6a60:	497d      	ldr	r1, [pc, #500]	; (6c58 <setup+0x708>)
    6a62:	6213      	str	r3, [r2, #32]
    6a64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6a68:	ed9f 7b63 	vldr	d7, [pc, #396]	; 6bf8 <setup+0x6a8>
    6a6c:	e9c5 1207 	strd	r1, r2, [r5, #28]
    6a70:	ee37 7b46 	vsub.f64	d7, d7, d6
    6a74:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		if (freq < 0.0f) freq = 0.0f;
    6a78:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    6a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6a80:	d409      	bmi.n	6a96 <setup+0x546>
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/4.0f) freq = AUDIO_SAMPLE_RATE_EXACT/4.0f;
    6a82:	eddf 7a79 	vldr	s15, [pc, #484]	; 6c68 <setup+0x718>
    6a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6a8e:	f340 8112 	ble.w	6cb6 <setup+0x766>
    6a92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ampRightOut.gain(fltLogs[intGainLevel[3]]); ampLeftOut.gain(fltLogs[intGainLevel[2]]);// default gain (half scale)[range = 0 to 2]
    6a96:	4d75      	ldr	r5, [pc, #468]	; (6c6c <setup+0x71c>)
		magnitude = n * 65536.0f;
    6a98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    6a9c:	f8c8 301c 	str.w	r3, [r8, #28]
    6aa0:	68e3      	ldr	r3, [r4, #12]
		if (n > 32767.0f) n = 32767.0f;
    6aa2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 6c70 <setup+0x720>
    6aa6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		magnitude = n * 65536.0f;
    6aaa:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
    6aae:	edd3 7a00 	vldr	s15, [r3]
    6ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
    6ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6aba:	dc39      	bgt.n	6b30 <setup+0x5e0>
		else if (n < -32767.0f) n = -32767.0f;
    6abc:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 6c74 <setup+0x724>
    6ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
    6ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ac8:	f140 80fe 	bpl.w	6cc8 <setup+0x778>
    6acc:	4b6a      	ldr	r3, [pc, #424]	; (6c78 <setup+0x728>)
    6ace:	e030      	b.n	6b32 <setup+0x5e2>
    6ad0:	f7f9 fb2a 	bl	128 <SetFilterBandwidth(int) [clone .part.0]>
    6ad4:	e76a      	b.n	69ac <setup+0x45c>
    6ad6:	f7f9 fb27 	bl	128 <SetFilterBandwidth(int) [clone .part.0]>
    6ada:	e79c      	b.n	6a16 <setup+0x4c6>
			uint32_t elapsed = systick_millis_count - millis_begin;
    6adc:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    6ade:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    6ae0:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    6ae2:	b132      	cbz	r2, 6af2 <setup+0x5a2>
				if (elapsed > 2000) break;
    6ae4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    6ae8:	f63f ad76 	bhi.w	65d8 <setup+0x88>
			yield();
    6aec:	f016 fd74 	bl	1d5d8 <yield>
    6af0:	e561      	b.n	65b6 <setup+0x66>
				if (elapsed > 750) break;
    6af2:	4543      	cmp	r3, r8
    6af4:	d9fa      	bls.n	6aec <setup+0x59c>
    6af6:	e56f      	b.n	65d8 <setup+0x88>
			if (n > position[channel]) {
    6af8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    6afa:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
    6afe:	f200 810d 	bhi.w	6d1c <setup+0x7cc>
				if (blks > maxblocks) maxblocks = blks;
    6b02:	8bd3      	ldrh	r3, [r2, #30]
    6b04:	2b04      	cmp	r3, #4
    6b06:	d801      	bhi.n	6b0c <setup+0x5bc>
    6b08:	2305      	movs	r3, #5
    6b0a:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
    6b0c:	f240 138d 	movw	r3, #397	; 0x18d
    6b10:	63d3      	str	r3, [r2, #60]	; 0x3c
    6b12:	e598      	b.n	6646 <setup+0xf6>
			if (n > position[channel]) {
    6b14:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    6b16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    6b1a:	f200 8117 	bhi.w	6d4c <setup+0x7fc>
				if (blks > maxblocks) maxblocks = blks;
    6b1e:	8bd3      	ldrh	r3, [r2, #30]
    6b20:	2b04      	cmp	r3, #4
    6b22:	d801      	bhi.n	6b28 <setup+0x5d8>
    6b24:	2305      	movs	r3, #5
    6b26:	83d3      	strh	r3, [r2, #30]
				position[channel] = n;
    6b28:	f240 13f5 	movw	r3, #501	; 0x1f5
    6b2c:	63d3      	str	r3, [r2, #60]	; 0x3c
    6b2e:	e57b      	b.n	6628 <setup+0xd8>
    6b30:	4b52      	ldr	r3, [pc, #328]	; (6c7c <setup+0x72c>)
		multiplier = n * 65536.0f;
    6b32:	4a53      	ldr	r2, [pc, #332]	; (6c80 <setup+0x730>)
		if (n > 32767.0f) n = 32767.0f;
    6b34:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 6c70 <setup+0x720>
		multiplier = n * 65536.0f;
    6b38:	6193      	str	r3, [r2, #24]
    6b3a:	68a3      	ldr	r3, [r4, #8]
    6b3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    6b40:	edd3 7a00 	vldr	s15, [r3]
		if (n > 32767.0f) n = 32767.0f;
    6b44:	eef4 7ac7 	vcmpe.f32	s15, s14
    6b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b4c:	dc09      	bgt.n	6b62 <setup+0x612>
		else if (n < -32767.0f) n = -32767.0f;
    6b4e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 6c74 <setup+0x724>
    6b52:	eef4 7ac7 	vcmpe.f32	s15, s14
    6b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b5a:	f140 80d8 	bpl.w	6d0e <setup+0x7be>
    6b5e:	4b46      	ldr	r3, [pc, #280]	; (6c78 <setup+0x728>)
    6b60:	e000      	b.n	6b64 <setup+0x614>
    6b62:	4b46      	ldr	r3, [pc, #280]	; (6c7c <setup+0x72c>)
		multiplier = n * 65536.0f;
    6b64:	4a47      	ldr	r2, [pc, #284]	; (6c84 <setup+0x734>)
  SetIQTapDelays(intMode);
    6b66:	6830      	ldr	r0, [r6, #0]
    6b68:	6193      	str	r3, [r2, #24]
    6b6a:	f7fc f953 	bl	2e14 <SetIQTapDelays(int)>
  mixInpSel.gain(0, 0); mixInpSel.gain(1, 0); mixInpSel.gain(2, 100 * fltLogs[intGainLevel[0]]); mixInpSel.gain(3, 100 * fltLogs[intGainLevel[1]]);
    6b6e:	6823      	ldr	r3, [r4, #0]
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    6b70:	2100      	movs	r1, #0
    6b72:	eddf 6a45 	vldr	s13, [pc, #276]	; 6c88 <setup+0x738>
    6b76:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		if (gain > 32767.0f) gain = 32767.0f;
    6b7a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 6c70 <setup+0x720>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    6b7e:	4a43      	ldr	r2, [pc, #268]	; (6c8c <setup+0x73c>)
    6b80:	edd3 7a00 	vldr	s15, [r3]
    6b84:	ee67 7aa6 	vmul.f32	s15, s15, s13
    6b88:	e9c2 1106 	strd	r1, r1, [r2, #24]
		if (gain > 32767.0f) gain = 32767.0f;
    6b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
    6b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b94:	dc09      	bgt.n	6baa <setup+0x65a>
		else if (gain < -32767.0f) gain = -32767.0f;
    6b96:	ed9f 7a37 	vldr	s14, [pc, #220]	; 6c74 <setup+0x724>
    6b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
    6b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ba2:	f140 80ad 	bpl.w	6d00 <setup+0x7b0>
    6ba6:	4b34      	ldr	r3, [pc, #208]	; (6c78 <setup+0x728>)
    6ba8:	e000      	b.n	6bac <setup+0x65c>
    6baa:	4b34      	ldr	r3, [pc, #208]	; (6c7c <setup+0x72c>)
    6bac:	6861      	ldr	r1, [r4, #4]
    6bae:	eddf 6a36 	vldr	s13, [pc, #216]	; 6c88 <setup+0x738>
    6bb2:	eb05 0581 	add.w	r5, r5, r1, lsl #2
		if (gain > 32767.0f) gain = 32767.0f;
    6bb6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 6c70 <setup+0x720>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    6bba:	6213      	str	r3, [r2, #32]
    6bbc:	edd5 7a00 	vldr	s15, [r5]
    6bc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if (gain > 32767.0f) gain = 32767.0f;
    6bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
    6bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6bcc:	dc66      	bgt.n	6c9c <setup+0x74c>
		else if (gain < -32767.0f) gain = -32767.0f;
    6bce:	ed9f 7a29 	vldr	s14, [pc, #164]	; 6c74 <setup+0x724>
    6bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
    6bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6bda:	f140 808a 	bpl.w	6cf2 <setup+0x7a2>
    6bde:	4b26      	ldr	r3, [pc, #152]	; (6c78 <setup+0x728>)
    6be0:	e05d      	b.n	6c9e <setup+0x74e>
    6be2:	bf00      	nop
    6be4:	f3af 8000 	nop.w
    6be8:	98d828e6 	.word	0x98d828e6
    6bec:	3f519e23 	.word	0x3f519e23
    6bf0:	00000000 	.word	0x00000000
    6bf4:	40e074c0 	.word	0x40e074c0
    6bf8:	00000000 	.word	0x00000000
    6bfc:	40be1400 	.word	0x40be1400
    6c00:	20009a0c 	.word	0x20009a0c
    6c04:	20012cb8 	.word	0x20012cb8
    6c08:	20009a54 	.word	0x20009a54
    6c0c:	20009a60 	.word	0x20009a60
    6c10:	20009a5c 	.word	0x20009a5c
    6c14:	20012c9c 	.word	0x20012c9c
    6c18:	20009a48 	.word	0x20009a48
    6c1c:	42c80000 	.word	0x42c80000
    6c20:	20009a08 	.word	0x20009a08
    6c24:	20012c20 	.word	0x20012c20
    6c28:	20012c0c 	.word	0x20012c0c
    6c2c:	20012c1c 	.word	0x20012c1c
    6c30:	20012c18 	.word	0x20012c18
    6c34:	20012c14 	.word	0x20012c14
    6c38:	200129a4 	.word	0x200129a4
    6c3c:	200129a8 	.word	0x200129a8
    6c40:	20012c3c 	.word	0x20012c3c
    6c44:	20012c40 	.word	0x20012c40
    6c48:	20012c28 	.word	0x20012c28
    6c4c:	20012c24 	.word	0x20012c24
    6c50:	200133b4 	.word	0x200133b4
    6c54:	200002c8 	.word	0x200002c8
    6c58:	2cb2cb00 	.word	0x2cb2cb00
    6c5c:	200134cc 	.word	0x200134cc
    6c60:	20009170 	.word	0x20009170
    6c64:	200134f0 	.word	0x200134f0
    6c68:	462c4400 	.word	0x462c4400
    6c6c:	2000389c 	.word	0x2000389c
    6c70:	46fffe00 	.word	0x46fffe00
    6c74:	c6fffe00 	.word	0xc6fffe00
    6c78:	80010000 	.word	0x80010000
    6c7c:	7fff0000 	.word	0x7fff0000
    6c80:	2000caf0 	.word	0x2000caf0
    6c84:	2000cad0 	.word	0x2000cad0
    6c88:	42c80000 	.word	0x42c80000
    6c8c:	20012db0 	.word	0x20012db0
    6c90:	20011e14 	.word	0x20011e14
    6c94:	200134a4 	.word	0x200134a4
    6c98:	20011b58 	.word	0x20011b58
    6c9c:	4b37      	ldr	r3, [pc, #220]	; (6d7c <setup+0x82c>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    6c9e:	6253      	str	r3, [r2, #36]	; 0x24
  ulngCurrentElapsedTimeUs = micros(); ulngLastDelayUpdateUs = ulngCurrentElapsedTimeUs; ulngLastPPAvgTimeUs = ulngCurrentElapsedTimeUs;
    6ca0:	f014 fc9c 	bl	1b5dc <micros>
    6ca4:	4936      	ldr	r1, [pc, #216]	; (6d80 <setup+0x830>)
    6ca6:	4a37      	ldr	r2, [pc, #220]	; (6d84 <setup+0x834>)
    6ca8:	4b37      	ldr	r3, [pc, #220]	; (6d88 <setup+0x838>)
    6caa:	6008      	str	r0, [r1, #0]
    6cac:	6010      	str	r0, [r2, #0]
    6cae:	6018      	str	r0, [r3, #0]
  } // End Subroutine Setup ***********************************************************************************
    6cb0:	b002      	add	sp, #8
    6cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    6cb6:	eddf 7a35 	vldr	s15, [pc, #212]	; 6d8c <setup+0x83c>
    6cba:	ee27 7a27 	vmul.f32	s14, s14, s15
    6cbe:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    6cc2:	ee17 3a90 	vmov	r3, s15
    6cc6:	e6e6      	b.n	6a96 <setup+0x546>
		multiplier = n * 65536.0f;
    6cc8:	eeb0 7a67 	vmov.f32	s14, s15
    6ccc:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    6cd0:	ee17 3a10 	vmov	r3, s14
    6cd4:	e72d      	b.n	6b32 <setup+0x5e2>
				coeff_p = NULL;
    6cd6:	2300      	movs	r3, #0
    6cd8:	f8c8 301c 	str.w	r3, [r8, #28]
    6cdc:	e692      	b.n	6a04 <setup+0x4b4>
			if (blks > maxblocks) maxblocks = blks;
    6cde:	2305      	movs	r3, #5
    6ce0:	83d3      	strh	r3, [r2, #30]
    6ce2:	e4ad      	b.n	6640 <setup+0xf0>
    6ce4:	2300      	movs	r3, #0
    6ce6:	f8c9 301c 	str.w	r3, [r9, #28]
    6cea:	e6b3      	b.n	6a54 <setup+0x504>
    6cec:	2305      	movs	r3, #5
    6cee:	83d3      	strh	r3, [r2, #30]
    6cf0:	e497      	b.n	6622 <setup+0xd2>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    6cf2:	eeb0 7a67 	vmov.f32	s14, s15
    6cf6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    6cfa:	ee17 3a10 	vmov	r3, s14
    6cfe:	e7ce      	b.n	6c9e <setup+0x74e>
    6d00:	eeb0 7a67 	vmov.f32	s14, s15
    6d04:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    6d08:	ee17 3a10 	vmov	r3, s14
    6d0c:	e74e      	b.n	6bac <setup+0x65c>
		multiplier = n * 65536.0f;
    6d0e:	eeb0 7a67 	vmov.f32	s14, s15
    6d12:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    6d16:	ee17 3a10 	vmov	r3, s14
    6d1a:	e723      	b.n	6b64 <setup+0x614>
		uint32_t channel = 0;
    6d1c:	2300      	movs	r3, #0
				position[channel] = n;
    6d1e:	f240 118d 	movw	r1, #397	; 0x18d
				uint32_t n = position[channel];
    6d22:	f102 0620 	add.w	r6, r2, #32
		uint32_t max=0;
    6d26:	4618      	mov	r0, r3
				position[channel] = n;
    6d28:	63d1      	str	r1, [r2, #60]	; 0x3c
			if (activemask & (1<<channel)) {
    6d2a:	fa44 f103 	asr.w	r1, r4, r3
    6d2e:	07cf      	lsls	r7, r1, #31
    6d30:	d507      	bpl.n	6d42 <setup+0x7f2>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    6d32:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    6d36:	317f      	adds	r1, #127	; 0x7f
    6d38:	09c9      	lsrs	r1, r1, #7
    6d3a:	3101      	adds	r1, #1
    6d3c:	4288      	cmp	r0, r1
    6d3e:	bf38      	it	cc
    6d40:	4608      	movcc	r0, r1
		} while(++channel < 8);
    6d42:	3301      	adds	r3, #1
    6d44:	2b08      	cmp	r3, #8
    6d46:	d1f0      	bne.n	6d2a <setup+0x7da>
		maxblocks = max;
    6d48:	83d0      	strh	r0, [r2, #30]
	}
    6d4a:	e47c      	b.n	6646 <setup+0xf6>
		uint32_t channel = 0;
    6d4c:	2300      	movs	r3, #0
				position[channel] = n;
    6d4e:	f240 10f5 	movw	r0, #501	; 0x1f5
				uint32_t n = position[channel];
    6d52:	f102 0620 	add.w	r6, r2, #32
		uint32_t max=0;
    6d56:	461c      	mov	r4, r3
				position[channel] = n;
    6d58:	63d0      	str	r0, [r2, #60]	; 0x3c
			if (activemask & (1<<channel)) {
    6d5a:	fa41 f003 	asr.w	r0, r1, r3
    6d5e:	07c0      	lsls	r0, r0, #31
    6d60:	d507      	bpl.n	6d72 <setup+0x822>
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
    6d62:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    6d66:	307f      	adds	r0, #127	; 0x7f
    6d68:	09c0      	lsrs	r0, r0, #7
    6d6a:	3001      	adds	r0, #1
    6d6c:	4284      	cmp	r4, r0
    6d6e:	bf38      	it	cc
    6d70:	4604      	movcc	r4, r0
		} while(++channel < 8);
    6d72:	3301      	adds	r3, #1
    6d74:	2b08      	cmp	r3, #8
    6d76:	d1f0      	bne.n	6d5a <setup+0x80a>
		maxblocks = max;
    6d78:	83d4      	strh	r4, [r2, #30]
	}
    6d7a:	e455      	b.n	6628 <setup+0xd8>
    6d7c:	7fff0000 	.word	0x7fff0000
    6d80:	20013670 	.word	0x20013670
    6d84:	20013674 	.word	0x20013674
    6d88:	2001367c 	.word	0x2001367c
    6d8c:	47be37c6 	.word	0x47be37c6

00006d90 <ParseBusyMode(String)>:
{
    6d90:	b570      	push	{r4, r5, r6, lr}
    6d92:	4925      	ldr	r1, [pc, #148]	; (6e28 <ParseBusyMode(String)+0x98>)
    6d94:	b086      	sub	sp, #24
    6d96:	4d25      	ldr	r5, [pc, #148]	; (6e2c <ParseBusyMode(String)+0x9c>)
  for (int i = 0; i < intNumBusyModes; i++) //Search through the available Busy Modes and Parameters
    6d98:	2400      	movs	r4, #0
{
    6d9a:	4606      	mov	r6, r0
    6d9c:	e001      	b.n	6da2 <ParseBusyMode(String)+0x12>
    String strTemp = chrBusyModes[i];
    6d9e:	f855 1f04 	ldr.w	r1, [r5, #4]!
    6da2:	4668      	mov	r0, sp
    6da4:	f014 f896 	bl	1aed4 <String::String(char const*)>
    if  (strTemp.startsWith(strMode.toUpperCase()))
    6da8:	4630      	mov	r0, r6
    6daa:	f014 fa2b 	bl	1b204 <String::toUpperCase()>
    6dae:	4601      	mov	r1, r0
    6db0:	4668      	mov	r0, sp
    6db2:	f014 f9f7 	bl	1b1a4 <String::startsWith(String const&) const>
    6db6:	4603      	mov	r3, r0
  }
    6db8:	4668      	mov	r0, sp
    if  (strTemp.startsWith(strMode.toUpperCase()))
    6dba:	b94b      	cbnz	r3, 6dd0 <ParseBusyMode(String)+0x40>
  for (int i = 0; i < intNumBusyModes; i++) //Search through the available Busy Modes and Parameters
    6dbc:	3401      	adds	r4, #1
  }
    6dbe:	f014 f8c3 	bl	1af48 <String::~String()>
  for (int i = 0; i < intNumBusyModes; i++) //Search through the available Busy Modes and Parameters
    6dc2:	2c0b      	cmp	r4, #11
    6dc4:	d1eb      	bne.n	6d9e <ParseBusyMode(String)+0xe>
  return -1;
    6dc6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}// End of ParseBusyMode ****************************************************************************
    6dca:	4620      	mov	r0, r4
    6dcc:	b006      	add	sp, #24
    6dce:	bd70      	pop	{r4, r5, r6, pc}
      if (strTemp.startsWith("SIM:"))
    6dd0:	4917      	ldr	r1, [pc, #92]	; (6e30 <ParseBusyMode(String)+0xa0>)
    6dd2:	a803      	add	r0, sp, #12
    6dd4:	f014 f87e 	bl	1aed4 <String::String(char const*)>
    6dd8:	a903      	add	r1, sp, #12
    6dda:	4668      	mov	r0, sp
    6ddc:	f014 f9e2 	bl	1b1a4 <String::startsWith(String const&) const>
    6de0:	4605      	mov	r5, r0
    6de2:	a803      	add	r0, sp, #12
    6de4:	f014 f8b0 	bl	1af48 <String::~String()>
    6de8:	b92d      	cbnz	r5, 6df6 <ParseBusyMode(String)+0x66>
  }
    6dea:	4668      	mov	r0, sp
    6dec:	f014 f8ac 	bl	1af48 <String::~String()>
}// End of ParseBusyMode ****************************************************************************
    6df0:	4620      	mov	r0, r4
    6df2:	b006      	add	sp, #24
    6df4:	bd70      	pop	{r4, r5, r6, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6df6:	2102      	movs	r1, #2
    6df8:	480e      	ldr	r0, [pc, #56]	; (6e34 <ParseBusyMode(String)+0xa4>)
    6dfa:	f016 fb6f 	bl	1d4dc <usb_serial_write>
    6dfe:	480e      	ldr	r0, [pc, #56]	; (6e38 <ParseBusyMode(String)+0xa8>)
    6e00:	f013 ff58 	bl	1acb4 <Print::println()>
        blnSim = true;  blnInitialized = false;  blnEnableTestTone = false; blnInitializedFromEEPROM = false;
    6e04:	4a0d      	ldr	r2, [pc, #52]	; (6e3c <ParseBusyMode(String)+0xac>)
    6e06:	2101      	movs	r1, #1
    6e08:	2300      	movs	r3, #0
    6e0a:	7011      	strb	r1, [r2, #0]
    6e0c:	4a0c      	ldr	r2, [pc, #48]	; (6e40 <ParseBusyMode(String)+0xb0>)
    6e0e:	490d      	ldr	r1, [pc, #52]	; (6e44 <ParseBusyMode(String)+0xb4>)
    6e10:	7013      	strb	r3, [r2, #0]
        blnPlotSpectrum = false; blnInitSpectrum = false; 
    6e12:	4a0d      	ldr	r2, [pc, #52]	; (6e48 <ParseBusyMode(String)+0xb8>)
        blnSim = true;  blnInitialized = false;  blnEnableTestTone = false; blnInitializedFromEEPROM = false;
    6e14:	700b      	strb	r3, [r1, #0]
        blnPlotSpectrum = false; blnInitSpectrum = false; 
    6e16:	7013      	strb	r3, [r2, #0]
        blnSim = true;  blnInitialized = false;  blnEnableTestTone = false; blnInitializedFromEEPROM = false;
    6e18:	490c      	ldr	r1, [pc, #48]	; (6e4c <ParseBusyMode(String)+0xbc>)
        blnPlotSpectrum = false; blnInitSpectrum = false; 
    6e1a:	4a0d      	ldr	r2, [pc, #52]	; (6e50 <ParseBusyMode(String)+0xc0>)
        blnSim = true;  blnInitialized = false;  blnEnableTestTone = false; blnInitializedFromEEPROM = false;
    6e1c:	700b      	strb	r3, [r1, #0]
        blnPlotSpectrum = false; blnInitSpectrum = false; 
    6e1e:	7013      	strb	r3, [r2, #0]
        setup();        // <-------------------------------------------------  why this here?? TRL
    6e20:	f7ff fb96 	bl	6550 <setup>
    6e24:	e7e1      	b.n	6dea <ParseBusyMode(String)+0x5a>
    6e26:	bf00      	nop
    6e28:	20003540 	.word	0x20003540
    6e2c:	20003870 	.word	0x20003870
    6e30:	20003490 	.word	0x20003490
    6e34:	20003498 	.word	0x20003498
    6e38:	20008ba0 	.word	0x20008ba0
    6e3c:	20009cba 	.word	0x20009cba
    6e40:	200136e5 	.word	0x200136e5
    6e44:	200136e8 	.word	0x200136e8
    6e48:	200136eb 	.word	0x200136eb
    6e4c:	200136e9 	.word	0x200136e9
    6e50:	200136e7 	.word	0x200136e7
    6e54:	00000000 	.word	0x00000000

00006e58 <PlotSpectrum(float*, int, int, bool, int)>:
  int intLowBin = round(intLowHz / 43.0664); int intHighBin = round(intHighHz / 43.0664);
    6e58:	ee06 2a90 	vmov	s13, r2
    6e5c:	ee07 1a90 	vmov	s15, r1
    6e60:	ed9f 4bcf 	vldr	d4, [pc, #828]	; 71a0 <PlotSpectrum(float*, int, int, bool, int)+0x348>
    6e64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    6e68:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    6e6c:	ee87 6b04 	vdiv.f64	d6, d7, d4
    6e70:	ee85 7b04 	vdiv.f64	d7, d5, d4
{
    6e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e78:	ed2d 8b02 	vpush	{d8}
    6e7c:	b085      	sub	sp, #20
    6e7e:	4680      	mov	r8, r0
    6e80:	9c10      	ldr	r4, [sp, #64]	; 0x40
  int intLowBin = round(intLowHz / 43.0664); int intHighBin = round(intHighHz / 43.0664);
    6e82:	feb8 6b46 	vrinta.f64	d6, d6
    6e86:	eefd 6bc6 	vcvt.s32.f64	s13, d6
    6e8a:	ee16 5a90 	vmov	r5, s13
    6e8e:	feb8 7b47 	vrinta.f64	d7, d7
    6e92:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    6e96:	ee17 9a90 	vmov	r9, s15
  if (blnInitSpectrum)//initialize tft, set rotation, clear screen, initialize text (will cause flicker)
    6e9a:	b96b      	cbnz	r3, 6eb8 <PlotSpectrum(float*, int, int, bool, int)+0x60>
  if (intBW == 3000)
    6e9c:	f640 33b8 	movw	r3, #3000	; 0xbb8
    6ea0:	429c      	cmp	r4, r3
    6ea2:	f000 808c 	beq.w	6fbe <PlotSpectrum(float*, int, int, bool, int)+0x166>
  else if (intBW == 6000)
    6ea6:	f241 7370 	movw	r3, #6000	; 0x1770
    6eaa:	429c      	cmp	r4, r3
    6eac:	d03a      	beq.n	6f24 <PlotSpectrum(float*, int, int, bool, int)+0xcc>
 }// End PlotSpectrum *****************************************************************************************
    6eae:	b005      	add	sp, #20
    6eb0:	ecbd 8b02 	vpop	{d8}
    6eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tft.setCursor(0,0);
    6eb8:	2300      	movs	r3, #0
    6eba:	48bb      	ldr	r0, [pc, #748]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6ebc:	461a      	mov	r2, r3
    6ebe:	4619      	mov	r1, r3
    6ec0:	f010 faac 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
      tft.fillScreen(ST7735_BLACK);
    6ec4:	2100      	movs	r1, #0
    6ec6:	48b8      	ldr	r0, [pc, #736]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6ec8:	f00f fc94 	bl	167f4 <ST7735_t3::fillScreen(unsigned short)>
      tft.setTextColor(ST7735_CYAN);  tft.setTextSize(3);  tft.println("    SPECTRUM");
    6ecc:	f240 71ff 	movw	r1, #2047	; 0x7ff
    6ed0:	48b5      	ldr	r0, [pc, #724]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6ed2:	f010 fb05 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    6ed6:	2203      	movs	r2, #3
    6ed8:	48b3      	ldr	r0, [pc, #716]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6eda:	4611      	mov	r1, r2
    6edc:	f010 faf4 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    6ee0:	220c      	movs	r2, #12
    6ee2:	49b2      	ldr	r1, [pc, #712]	; (71ac <PlotSpectrum(float*, int, int, bool, int)+0x354>)
    6ee4:	48b0      	ldr	r0, [pc, #704]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6ee6:	f012 fdf7 	bl	19ad8 <ST7735_t3::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    6eea:	48af      	ldr	r0, [pc, #700]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6eec:	f013 fee2 	bl	1acb4 <Print::println()>
      tft.setTextColor(ST7735_WHITE);
    6ef0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6ef4:	48ac      	ldr	r0, [pc, #688]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6ef6:	f010 faf3 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
      if (intBW == 3000){tft.setTextSize(2);tft.println(" 0 Hz               3.5KHz");}
    6efa:	f640 33b8 	movw	r3, #3000	; 0xbb8
    6efe:	2202      	movs	r2, #2
    6f00:	429c      	cmp	r4, r3
    6f02:	d050      	beq.n	6fa6 <PlotSpectrum(float*, int, int, bool, int)+0x14e>
    6f04:	4611      	mov	r1, r2
    6f06:	48a8      	ldr	r0, [pc, #672]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6f08:	f010 fade 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    6f0c:	221a      	movs	r2, #26
    6f0e:	49a8      	ldr	r1, [pc, #672]	; (71b0 <PlotSpectrum(float*, int, int, bool, int)+0x358>)
    6f10:	48a5      	ldr	r0, [pc, #660]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6f12:	f012 fde1 	bl	19ad8 <ST7735_t3::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    6f16:	48a4      	ldr	r0, [pc, #656]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6f18:	f013 fecc 	bl	1acb4 <Print::println()>
  else if (intBW == 6000)
    6f1c:	f241 7370 	movw	r3, #6000	; 0x1770
    6f20:	429c      	cmp	r4, r3
    6f22:	d1c4      	bne.n	6eae <PlotSpectrum(float*, int, int, bool, int)+0x56>
      for (int i = 2; i < 301; i += 2)
    6f24:	2402      	movs	r4, #2
              tft.drawLine (10 + i, 238, 10 + i, 48, ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    6f26:	4ea0      	ldr	r6, [pc, #640]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
              tft.drawLine (10 + i, 238, 10 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 2])))), ST7735_YELLOW); //value 25 sets display vertical scaling
    6f28:	eddf 8aa2 	vldr	s17, [pc, #648]	; 71b4 <PlotSpectrum(float*, int, int, bool, int)+0x35c>
    6f2c:	ed9f 8aa2 	vldr	s16, [pc, #648]	; 71b8 <PlotSpectrum(float*, int, int, bool, int)+0x360>
    6f30:	e015      	b.n	6f5e <PlotSpectrum(float*, int, int, bool, int)+0x106>
    6f32:	eef0 7a48 	vmov.f32	s15, s16
    6f36:	eee0 7a68 	vfms.f32	s15, s0, s17
    6f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    6f3e:	ee17 2a90 	vmov	r2, s15
    6f42:	b217      	sxth	r7, r2
    6f44:	f64f 7ce0 	movw	ip, #65504	; 0xffe0
    6f48:	22ee      	movs	r2, #238	; 0xee
    6f4a:	4619      	mov	r1, r3
    6f4c:	4630      	mov	r0, r6
    6f4e:	e9cd 7c00 	strd	r7, ip, [sp]
    6f52:	f00f fe5d 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
      for (int i = 2; i < 301; i += 2)
    6f56:	3402      	adds	r4, #2
    6f58:	f5b4 7f97 	cmp.w	r4, #302	; 0x12e
    6f5c:	d0a7      	beq.n	6eae <PlotSpectrum(float*, int, int, bool, int)+0x56>
          if (( i / 2 >= intLowBin) && (i / 2 <= intHighBin))
    6f5e:	ebb9 0f64 	cmp.w	r9, r4, asr #1
    6f62:	f104 030a 	add.w	r3, r4, #10
    6f66:	ea4f 0764 	mov.w	r7, r4, asr #1
    6f6a:	db02      	blt.n	6f72 <PlotSpectrum(float*, int, int, bool, int)+0x11a>
    6f6c:	42af      	cmp	r7, r5
    6f6e:	f280 812d 	bge.w	71cc <PlotSpectrum(float*, int, int, bool, int)+0x374>
              tft.drawLine (10 + i, 238, 10 + i, 48, ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    6f72:	b21b      	sxth	r3, r3
    6f74:	f04f 0c00 	mov.w	ip, #0
    6f78:	2130      	movs	r1, #48	; 0x30
    6f7a:	22ee      	movs	r2, #238	; 0xee
    6f7c:	4630      	mov	r0, r6
    6f7e:	9303      	str	r3, [sp, #12]
    6f80:	e9cd 1c00 	strd	r1, ip, [sp]
    6f84:	4619      	mov	r1, r3
    6f86:	f00f fe43 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
              tft.drawLine (10 + i, 238, 10 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 2])))), ST7735_YELLOW); //value 25 sets display vertical scaling
    6f8a:	eb08 0287 	add.w	r2, r8, r7, lsl #2
  { return __builtin_log10f(__x); }
    6f8e:	ed92 0a00 	vldr	s0, [r2]
    6f92:	f017 fbfd 	bl	1e790 <log10f>
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
// Returns the maximum of 2 input numbers.
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    6f96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    6f9a:	9b03      	ldr	r3, [sp, #12]
    6f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6fa0:	d8c7      	bhi.n	6f32 <PlotSpectrum(float*, int, int, bool, int)+0xda>
    6fa2:	27ee      	movs	r7, #238	; 0xee
    6fa4:	e7ce      	b.n	6f44 <PlotSpectrum(float*, int, int, bool, int)+0xec>
    6fa6:	4611      	mov	r1, r2
    6fa8:	487f      	ldr	r0, [pc, #508]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6faa:	f010 fa8d 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    6fae:	221a      	movs	r2, #26
    6fb0:	4982      	ldr	r1, [pc, #520]	; (71bc <PlotSpectrum(float*, int, int, bool, int)+0x364>)
    6fb2:	487d      	ldr	r0, [pc, #500]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6fb4:	f012 fd90 	bl	19ad8 <ST7735_t3::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    6fb8:	487b      	ldr	r0, [pc, #492]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6fba:	f013 fe7b 	bl	1acb4 <Print::println()>
{
    6fbe:	2603      	movs	r6, #3
            tft.drawLine (41 + i, 238, 41 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_YELLOW);
    6fc0:	eddf 8a7c 	vldr	s17, [pc, #496]	; 71b4 <PlotSpectrum(float*, int, int, bool, int)+0x35c>
    6fc4:	ed9f 8a7c 	vldr	s16, [pc, #496]	; 71b8 <PlotSpectrum(float*, int, int, bool, int)+0x360>
    6fc8:	46ab      	mov	fp, r5
    6fca:	f8cd 900c 	str.w	r9, [sp, #12]
    6fce:	e056      	b.n	707e <PlotSpectrum(float*, int, int, bool, int)+0x226>
            tft.drawLine (40 + i, 238, 40 + i, 48, ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    6fd0:	3529      	adds	r5, #41	; 0x29
    6fd2:	b23f      	sxth	r7, r7
    6fd4:	4874      	ldr	r0, [pc, #464]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
                tft.drawLine (40 + i, 238, 40 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_RED); //
    6fd6:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    6fda:	b22d      	sxth	r5, r5
            tft.drawLine (40 + i, 238, 40 + i, 48, ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    6fdc:	463b      	mov	r3, r7
    6fde:	4639      	mov	r1, r7
    6fe0:	e9cd 9a00 	strd	r9, sl, [sp]
    6fe4:	f00f fe14 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
            tft.drawLine (41 + i, 238, 41 + i, 48, ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    6fe8:	462b      	mov	r3, r5
    6fea:	22ee      	movs	r2, #238	; 0xee
    6fec:	486e      	ldr	r0, [pc, #440]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    6fee:	4629      	mov	r1, r5
    6ff0:	e9cd 9a00 	strd	r9, sl, [sp]
    6ff4:	f00f fe0c 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
            if (blnPlotBusyRed)// Plot region of interest in Red if channel determined busy by SearchRatioDetect
    6ff8:	4b71      	ldr	r3, [pc, #452]	; (71c0 <PlotSpectrum(float*, int, int, bool, int)+0x368>)
    6ffa:	ed94 0a00 	vldr	s0, [r4]
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	2b00      	cmp	r3, #0
    7002:	f000 8094 	beq.w	712e <PlotSpectrum(float*, int, int, bool, int)+0x2d6>
    7006:	f017 fbc3 	bl	1e790 <log10f>
    700a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    700e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7012:	f240 80bf 	bls.w	7194 <PlotSpectrum(float*, int, int, bool, int)+0x33c>
                tft.drawLine (40 + i, 238, 40 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_RED); //
    7016:	eef0 7a48 	vmov.f32	s15, s16
    701a:	eee0 7a68 	vfms.f32	s15, s0, s17
    701e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    7022:	ee17 3a90 	vmov	r3, s15
    7026:	b218      	sxth	r0, r3
    7028:	f44f 4c78 	mov.w	ip, #63488	; 0xf800
    702c:	463b      	mov	r3, r7
    702e:	22ee      	movs	r2, #238	; 0xee
    7030:	4639      	mov	r1, r7
    7032:	e9cd 0c00 	strd	r0, ip, [sp]
    7036:	485c      	ldr	r0, [pc, #368]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    7038:	f00f fdea 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
    703c:	ed94 0a00 	vldr	s0, [r4]
    7040:	f017 fba6 	bl	1e790 <log10f>
    7044:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    7048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    704c:	f240 80a4 	bls.w	7198 <PlotSpectrum(float*, int, int, bool, int)+0x340>
                tft.drawLine (41 + i, 238, 41 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_RED);
    7050:	eef0 7a48 	vmov.f32	s15, s16
    7054:	eee0 7a68 	vfms.f32	s15, s0, s17
    7058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    705c:	ee17 3a90 	vmov	r3, s15
    7060:	b21c      	sxth	r4, r3
    7062:	f44f 4778 	mov.w	r7, #63488	; 0xf800
      for (int i = 3; i < 244; i += 3)
    7066:	3603      	adds	r6, #3
            tft.drawLine (41 + i, 238, 41 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_YELLOW);
    7068:	462b      	mov	r3, r5
    706a:	22ee      	movs	r2, #238	; 0xee
    706c:	4629      	mov	r1, r5
    706e:	484e      	ldr	r0, [pc, #312]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    7070:	e9cd 4700 	strd	r4, r7, [sp]
    7074:	f00f fdcc 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
      for (int i = 3; i < 244; i += 3)
    7078:	2ef6      	cmp	r6, #246	; 0xf6
    707a:	f43f af18 	beq.w	6eae <PlotSpectrum(float*, int, int, bool, int)+0x56>
        if ((( i / 3) >= intLowBin) & ((i / 3) <= intHighBin))
    707e:	4b51      	ldr	r3, [pc, #324]	; (71c4 <PlotSpectrum(float*, int, int, bool, int)+0x36c>)
    7080:	b2b5      	uxth	r5, r6
            tft.drawLine (40 + i, 238, 40 + i, 48, ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    7082:	f04f 0a00 	mov.w	sl, #0
    7086:	f04f 0930 	mov.w	r9, #48	; 0x30
        if ((( i / 3) >= intLowBin) & ((i / 3) <= intHighBin))
    708a:	fba3 2306 	umull	r2, r3, r3, r6
    708e:	f105 0728 	add.w	r7, r5, #40	; 0x28
            tft.drawLine (40 + i, 238, 40 + i, 48, ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    7092:	22ee      	movs	r2, #238	; 0xee
        if ((( i / 3) >= intLowBin) & ((i / 3) <= intHighBin))
    7094:	ebbb 0f53 	cmp.w	fp, r3, lsr #1
    7098:	ea4f 0453 	mov.w	r4, r3, lsr #1
    709c:	dc02      	bgt.n	70a4 <PlotSpectrum(float*, int, int, bool, int)+0x24c>
    709e:	9b03      	ldr	r3, [sp, #12]
    70a0:	429c      	cmp	r4, r3
    70a2:	dd95      	ble.n	6fd0 <PlotSpectrum(float*, int, int, bool, int)+0x178>
            tft.drawLine (40 + i, 238, 40 + i, 48, ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    70a4:	3529      	adds	r5, #41	; 0x29
    70a6:	b23f      	sxth	r7, r7
    70a8:	483f      	ldr	r0, [pc, #252]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
            tft.drawLine (40 + i, 238, 40 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_YELLOW); //
    70aa:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    70ae:	b22d      	sxth	r5, r5
            tft.drawLine (40 + i, 238, 40 + i, 48, ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    70b0:	463b      	mov	r3, r7
    70b2:	4639      	mov	r1, r7
    70b4:	e9cd 9a00 	strd	r9, sl, [sp]
    70b8:	f00f fdaa 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
            tft.drawLine (41 + i, 238, 41 + i, 48 , ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    70bc:	22ee      	movs	r2, #238	; 0xee
    70be:	483a      	ldr	r0, [pc, #232]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    70c0:	462b      	mov	r3, r5
    70c2:	4629      	mov	r1, r5
    70c4:	e9cd 9a00 	strd	r9, sl, [sp]
    70c8:	f00f fda2 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
    70cc:	ed94 0a00 	vldr	s0, [r4]
    70d0:	f017 fb5e 	bl	1e790 <log10f>
    70d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    70d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70dc:	d958      	bls.n	7190 <PlotSpectrum(float*, int, int, bool, int)+0x338>
                tft.drawLine (40 + i, 238, 40 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_RED); //
    70de:	eef0 7a48 	vmov.f32	s15, s16
    70e2:	eee0 7a68 	vfms.f32	s15, s0, s17
    70e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    70ea:	ee17 3a90 	vmov	r3, s15
    70ee:	b218      	sxth	r0, r3
            tft.drawLine (40 + i, 238, 40 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_YELLOW); //
    70f0:	f64f 7ce0 	movw	ip, #65504	; 0xffe0
    70f4:	463b      	mov	r3, r7
    70f6:	22ee      	movs	r2, #238	; 0xee
    70f8:	4639      	mov	r1, r7
    70fa:	e9cd 0c00 	strd	r0, ip, [sp]
    70fe:	482a      	ldr	r0, [pc, #168]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    7100:	f00f fd86 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
    7104:	ed94 0a00 	vldr	s0, [r4]
    7108:	f017 fb42 	bl	1e790 <log10f>
    710c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    7110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7114:	d93a      	bls.n	718c <PlotSpectrum(float*, int, int, bool, int)+0x334>
            tft.drawLine (41 + i, 238, 41 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_YELLOW);
    7116:	eef0 7a48 	vmov.f32	s15, s16
    711a:	eee0 7a68 	vfms.f32	s15, s0, s17
    711e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    7122:	ee17 3a90 	vmov	r3, s15
    7126:	b21c      	sxth	r4, r3
    7128:	f64f 77e0 	movw	r7, #65504	; 0xffe0
    712c:	e79b      	b.n	7066 <PlotSpectrum(float*, int, int, bool, int)+0x20e>
    712e:	f017 fb2f 	bl	1e790 <log10f>
    7132:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    7136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    713a:	d945      	bls.n	71c8 <PlotSpectrum(float*, int, int, bool, int)+0x370>
                tft.drawLine (40 + i, 238, 40 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_RED); //
    713c:	eef0 7a48 	vmov.f32	s15, s16
    7140:	eee0 7a68 	vfms.f32	s15, s0, s17
    7144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    7148:	ee17 3a90 	vmov	r3, s15
    714c:	b218      	sxth	r0, r3
                tft.drawLine (40 + i, 238, 40 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_GREEN); //
    714e:	f44f 6cfc 	mov.w	ip, #2016	; 0x7e0
    7152:	463b      	mov	r3, r7
    7154:	22ee      	movs	r2, #238	; 0xee
    7156:	4639      	mov	r1, r7
    7158:	e9cd 0c00 	strd	r0, ip, [sp]
    715c:	4812      	ldr	r0, [pc, #72]	; (71a8 <PlotSpectrum(float*, int, int, bool, int)+0x350>)
    715e:	f00f fd57 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
    7162:	ed94 0a00 	vldr	s0, [r4]
    7166:	f017 fb13 	bl	1e790 <log10f>
    716a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    716e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7172:	d913      	bls.n	719c <PlotSpectrum(float*, int, int, bool, int)+0x344>
                tft.drawLine (41 + i, 238, 41 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 3])))), ST7735_GREEN);
    7174:	eef0 7a48 	vmov.f32	s15, s16
    7178:	eee0 7a68 	vfms.f32	s15, s0, s17
    717c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    7180:	ee17 3a90 	vmov	r3, s15
    7184:	b21c      	sxth	r4, r3
    7186:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
    718a:	e76c      	b.n	7066 <PlotSpectrum(float*, int, int, bool, int)+0x20e>
    718c:	24ee      	movs	r4, #238	; 0xee
    718e:	e7cb      	b.n	7128 <PlotSpectrum(float*, int, int, bool, int)+0x2d0>
    7190:	20ee      	movs	r0, #238	; 0xee
    7192:	e7ad      	b.n	70f0 <PlotSpectrum(float*, int, int, bool, int)+0x298>
    7194:	20ee      	movs	r0, #238	; 0xee
    7196:	e747      	b.n	7028 <PlotSpectrum(float*, int, int, bool, int)+0x1d0>
    7198:	24ee      	movs	r4, #238	; 0xee
    719a:	e762      	b.n	7062 <PlotSpectrum(float*, int, int, bool, int)+0x20a>
    719c:	24ee      	movs	r4, #238	; 0xee
    719e:	e7f2      	b.n	7186 <PlotSpectrum(float*, int, int, bool, int)+0x32e>
    71a0:	cb923a2a 	.word	0xcb923a2a
    71a4:	4045887f 	.word	0x4045887f
    71a8:	2001355c 	.word	0x2001355c
    71ac:	20003448 	.word	0x20003448
    71b0:	20003474 	.word	0x20003474
    71b4:	42480000 	.word	0x42480000
    71b8:	436e0000 	.word	0x436e0000
    71bc:	20003458 	.word	0x20003458
    71c0:	200136ea 	.word	0x200136ea
    71c4:	aaaaaaab 	.word	0xaaaaaaab
    71c8:	20ee      	movs	r0, #238	; 0xee
    71ca:	e7c0      	b.n	714e <PlotSpectrum(float*, int, int, bool, int)+0x2f6>
              tft.drawLine (10 + i, 238, 10 + i, 48, ST7735_BLACK); //paint "BLACK" over old plot to eliminate flicker
    71cc:	b21b      	sxth	r3, r3
    71ce:	2000      	movs	r0, #0
    71d0:	2130      	movs	r1, #48	; 0x30
    71d2:	22ee      	movs	r2, #238	; 0xee
    71d4:	9303      	str	r3, [sp, #12]
    71d6:	e9cd 1000 	strd	r1, r0, [sp]
    71da:	4619      	mov	r1, r3
    71dc:	4630      	mov	r0, r6
    71de:	f00f fd17 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
              tft.drawLine (10 + i, 238, 10 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 2])))), ST7735_GREEN); //value 25 sets display vertical scaling
    71e2:	eb08 0287 	add.w	r2, r8, r7, lsl #2
    71e6:	ed92 0a00 	vldr	s0, [r2]
    71ea:	f017 fad1 	bl	1e790 <log10f>
    71ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    71f2:	9b03      	ldr	r3, [sp, #12]
    71f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71f8:	d912      	bls.n	7220 <PlotSpectrum(float*, int, int, bool, int)+0x3c8>
              tft.drawLine (10 + i, 238, 10 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 2])))), ST7735_YELLOW); //value 25 sets display vertical scaling
    71fa:	eef0 7a48 	vmov.f32	s15, s16
    71fe:	eee0 7a68 	vfms.f32	s15, s0, s17
    7202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    7206:	ee17 2a90 	vmov	r2, s15
    720a:	b210      	sxth	r0, r2
              tft.drawLine (10 + i, 238, 10 + i, (238 - (50 * max(0, log10(fltFFTBins[i / 2])))), ST7735_GREEN); //value 25 sets display vertical scaling
    720c:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
    7210:	22ee      	movs	r2, #238	; 0xee
    7212:	4619      	mov	r1, r3
    7214:	e9cd 0700 	strd	r0, r7, [sp]
    7218:	4630      	mov	r0, r6
    721a:	f00f fcf9 	bl	16c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>
    721e:	e69a      	b.n	6f56 <PlotSpectrum(float*, int, int, bool, int)+0xfe>
    7220:	20ee      	movs	r0, #238	; 0xee
    7222:	e7f3      	b.n	720c <PlotSpectrum(float*, int, int, bool, int)+0x3b4>
    7224:	0000      	movs	r0, r0
	...

00007228 <loop>:
{
    7228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    722c:	ed2d 8b02 	vpush	{d8}
    7230:	b099      	sub	sp, #100	; 0x64
   String str1, str2, str3;
    7232:	2100      	movs	r1, #0
    7234:	a809      	add	r0, sp, #36	; 0x24
    7236:	f013 fe4d 	bl	1aed4 <String::String(char const*)>
    723a:	2100      	movs	r1, #0
    723c:	a80c      	add	r0, sp, #48	; 0x30
    723e:	f013 fe49 	bl	1aed4 <String::String(char const*)>
    7242:	2100      	movs	r1, #0
    7244:	a80f      	add	r0, sp, #60	; 0x3c
    7246:	f013 fe45 	bl	1aed4 <String::String(char const*)>
		if (interrupts_in_use < 2) {
    724a:	4b9d      	ldr	r3, [pc, #628]	; (74c0 <loop+0x298>)
    724c:	7f1a      	ldrb	r2, [r3, #28]
    724e:	2a01      	cmp	r2, #1
    7250:	f241 830b 	bls.w	886a <loop+0x1642>
			noInterrupts();
    7254:	b672      	cpsid	i
		int32_t ret = encoder2.position;
    7256:	695a      	ldr	r2, [r3, #20]
		interrupts();
    7258:	b662      	cpsie	i
  if ((lngENC2Old != lngENC2New) || (! blnInitialized))
    725a:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 751c <loop+0x2f4>
  lngENC2New = ENC2.read();   //Encoder 2 controls Modes (Left hand knob)
    725e:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 7520 <loop+0x2f8>
  if ((lngENC2Old != lngENC2New) || (! blnInitialized))
    7262:	f8d8 3000 	ldr.w	r3, [r8]
    7266:	4997      	ldr	r1, [pc, #604]	; (74c4 <loop+0x29c>)
    7268:	4293      	cmp	r3, r2
  lngENC2New = ENC2.read();   //Encoder 2 controls Modes (Left hand knob)
    726a:	f8c9 2000 	str.w	r2, [r9]
  if ((lngENC2Old != lngENC2New) || (! blnInitialized))
    726e:	9104      	str	r1, [sp, #16]
    7270:	f000 80ec 	beq.w	744c <loop+0x224>
      if (blnSim)
    7274:	4994      	ldr	r1, [pc, #592]	; (74c8 <loop+0x2a0>)
    7276:	9103      	str	r1, [sp, #12]
    7278:	7809      	ldrb	r1, [r1, #0]
    727a:	2900      	cmp	r1, #0
    727c:	f040 80dc 	bne.w	7438 <loop+0x210>
    7280:	4c92      	ldr	r4, [pc, #584]	; (74cc <loop+0x2a4>)
      tft.setCursor(1,80);
    7282:	2300      	movs	r3, #0
    7284:	2250      	movs	r2, #80	; 0x50
    7286:	2101      	movs	r1, #1
    7288:	4891      	ldr	r0, [pc, #580]	; (74d0 <loop+0x2a8>)
    728a:	f010 f8c7 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
      tft.fillScreen(ST7735_BLACK);
    728e:	2100      	movs	r1, #0
    7290:	488f      	ldr	r0, [pc, #572]	; (74d0 <loop+0x2a8>)
    7292:	f00f faaf 	bl	167f4 <ST7735_t3::fillScreen(unsigned short)>
      if ((intMode == 0) || (! blnInitialized)) //WGN
    7296:	6825      	ldr	r5, [r4, #0]
    7298:	b11d      	cbz	r5, 72a2 <loop+0x7a>
    729a:	9b04      	ldr	r3, [sp, #16]
    729c:	781b      	ldrb	r3, [r3, #0]
    729e:	2b00      	cmp	r3, #0
    72a0:	d153      	bne.n	734a <loop+0x122>
          intCountrmsMixIQ1234Out = 0;
    72a2:	2600      	movs	r6, #0
    72a4:	4b8b      	ldr	r3, [pc, #556]	; (74d4 <loop+0x2ac>)
          SetIQTapDelays(intMode);
    72a6:	4628      	mov	r0, r5
          intCountrmsMixIQ1234Out = 0;
    72a8:	601e      	str	r6, [r3, #0]
          SetIQTapDelays(intMode);
    72aa:	f7fb fdb3 	bl	2e14 <SetIQTapDelays(int)>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    72ae:	4a8a      	ldr	r2, [pc, #552]	; (74d8 <loop+0x2b0>)
    72b0:	f64d 108c 	movw	r0, #55692	; 0xd98c
          str1 = chrModes[intMode];  str2 = "    S:N= "; str3 = " dB";
    72b4:	4b89      	ldr	r3, [pc, #548]	; (74dc <loop+0x2b4>)
    72b6:	61d0      	str	r0, [r2, #28]
    72b8:	a809      	add	r0, sp, #36	; 0x24
    72ba:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    72be:	6196      	str	r6, [r2, #24]
    72c0:	4b87      	ldr	r3, [pc, #540]	; (74e0 <loop+0x2b8>)
    72c2:	e9c2 6608 	strd	r6, r6, [r2, #32]
    72c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    72ca:	625e      	str	r6, [r3, #36]	; 0x24
    72cc:	619a      	str	r2, [r3, #24]
    72ce:	e9c3 6607 	strd	r6, r6, [r3, #28]
    72d2:	f013 fec5 	bl	1b060 <String::operator=(char const*)>
    72d6:	4983      	ldr	r1, [pc, #524]	; (74e4 <loop+0x2bc>)
    72d8:	a80c      	add	r0, sp, #48	; 0x30
    72da:	f013 fec1 	bl	1b060 <String::operator=(char const*)>
    72de:	4982      	ldr	r1, [pc, #520]	; (74e8 <loop+0x2c0>)
    72e0:	a80f      	add	r0, sp, #60	; 0x3c
    72e2:	f013 febd 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);  tft.setTextSize(3);  tft.println(str1);
    72e6:	f240 71ff 	movw	r1, #2047	; 0x7ff
    72ea:	4879      	ldr	r0, [pc, #484]	; (74d0 <loop+0x2a8>)
    72ec:	f010 f8f8 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    72f0:	2203      	movs	r2, #3
    72f2:	4877      	ldr	r0, [pc, #476]	; (74d0 <loop+0x2a8>)
    72f4:	4611      	mov	r1, r2
    72f6:	f010 f8e7 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
    72fa:	a909      	add	r1, sp, #36	; 0x24
    72fc:	4874      	ldr	r0, [pc, #464]	; (74d0 <loop+0x2a8>)
    72fe:	f013 fca7 	bl	1ac50 <Print::print(String const&)>
    7302:	4873      	ldr	r0, [pc, #460]	; (74d0 <loop+0x2a8>)
    7304:	f013 fcd6 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intTargetSN + str3);
    7308:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    730c:	4870      	ldr	r0, [pc, #448]	; (74d0 <loop+0x2a8>)
    730e:	f010 f8e7 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    7312:	2203      	movs	r2, #3
    7314:	486e      	ldr	r0, [pc, #440]	; (74d0 <loop+0x2a8>)
    7316:	4611      	mov	r1, r2
    7318:	f010 f8d6 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    731c:	a90c      	add	r1, sp, #48	; 0x30
    731e:	a815      	add	r0, sp, #84	; 0x54
    7320:	f013 fdf6 	bl	1af10 <String::String(String const&)>
    7324:	4b71      	ldr	r3, [pc, #452]	; (74ec <loop+0x2c4>)
    7326:	a815      	add	r0, sp, #84	; 0x54
    7328:	6819      	ldr	r1, [r3, #0]
    732a:	f013 ff11 	bl	1b150 <operator+(StringSumHelper const&, int)>
    732e:	a90f      	add	r1, sp, #60	; 0x3c
    7330:	f013 fef8 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    7334:	4601      	mov	r1, r0
    7336:	4866      	ldr	r0, [pc, #408]	; (74d0 <loop+0x2a8>)
    7338:	f013 fc8a 	bl	1ac50 <Print::print(String const&)>
    733c:	4864      	ldr	r0, [pc, #400]	; (74d0 <loop+0x2a8>)
    733e:	f013 fcb9 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    7342:	a815      	add	r0, sp, #84	; 0x54
    7344:	f013 fe00 	bl	1af48 <String::~String()>
      if ((intMode > 0) && (intMode <= 4))//MPG,MPM,MPP,MPD
    7348:	6825      	ldr	r5, [r4, #0]
    734a:	1e6b      	subs	r3, r5, #1
    734c:	2b03      	cmp	r3, #3
    734e:	f241 8033 	bls.w	83b8 <loop+0x1190>
      if (intMode == 5)//MULTIPATHS
    7352:	2d05      	cmp	r5, #5
    7354:	f001 80a5 	beq.w	84a2 <loop+0x127a>
      if (intMode == 6) //FADE Depth
    7358:	2d06      	cmp	r5, #6
    735a:	f001 80e0 	beq.w	851e <loop+0x12f6>
    735e:	4b64      	ldr	r3, [pc, #400]	; (74f0 <loop+0x2c8>)
      if (intMode == 7) // FADE Freq
    7360:	2d07      	cmp	r5, #7
    7362:	9305      	str	r3, [sp, #20]
    7364:	f001 811d 	beq.w	85a2 <loop+0x137a>
      if (intMode == 8) //Offset
    7368:	2d08      	cmp	r5, #8
    736a:	f001 816c 	beq.w	8646 <loop+0x141e>
      if (intMode == 9) //FM Deviation
    736e:	2d09      	cmp	r5, #9
    7370:	f001 81d8 	beq.w	8724 <loop+0x14fc>
      if (intMode == 10) //FM Rate
    7374:	2d0a      	cmp	r5, #10
    7376:	f001 8227 	beq.w	87c8 <loop+0x15a0>
      if ((intMode >= 11) && (intMode < 15)) //Ch1, Ch2, IN;Out
    737a:	f1a5 030b 	sub.w	r3, r5, #11
    737e:	2b03      	cmp	r3, #3
    7380:	f240 8668 	bls.w	8054 <loop+0xe2c>
      if (intMode == 15)//BANDWIDTH
    7384:	2d0f      	cmp	r5, #15
    7386:	f000 86b5 	beq.w	80f4 <loop+0xecc>
      if (intMode == 16)//Baud Rate
    738a:	2d10      	cmp	r5, #16
    738c:	f000 86f3 	beq.w	8176 <loop+0xf4e>
      if (intMode == 17)//TEST3K
    7390:	2d11      	cmp	r5, #17
    7392:	f8df b190 	ldr.w	fp, [pc, #400]	; 7524 <loop+0x2fc>
    7396:	f000 874c 	beq.w	8232 <loop+0x100a>
      if (intMode == 18)//TEST6K
    739a:	2d12      	cmp	r5, #18
    739c:	f000 878e 	beq.w	82bc <loop+0x1094>
      blnInitialized = true;
    73a0:	2301      	movs	r3, #1
    73a2:	9a04      	ldr	r2, [sp, #16]
		if (interrupts_in_use < 2) {
    73a4:	4953      	ldr	r1, [pc, #332]	; (74f4 <loop+0x2cc>)
    73a6:	7013      	strb	r3, [r2, #0]
      blnInitSpectrum = true;
    73a8:	4a53      	ldr	r2, [pc, #332]	; (74f8 <loop+0x2d0>)
    73aa:	7013      	strb	r3, [r2, #0]
      lngENC2Old = lngENC2New;
    73ac:	f8d9 3000 	ldr.w	r3, [r9]
    73b0:	f8c8 3000 	str.w	r3, [r8]
    73b4:	7f0b      	ldrb	r3, [r1, #28]
    73b6:	2b01      	cmp	r3, #1
    73b8:	d957      	bls.n	746a <loop+0x242>
			noInterrupts();
    73ba:	b672      	cpsid	i
		int32_t ret = encoder2.position;
    73bc:	694a      	ldr	r2, [r1, #20]
		interrupts();
    73be:	b662      	cpsie	i
  if ((lngENC1Old != lngENC1New) || blnInitModes)
    73c0:	4e4e      	ldr	r6, [pc, #312]	; (74fc <loop+0x2d4>)
  lngENC1New = ENC1.read();
    73c2:	4f4f      	ldr	r7, [pc, #316]	; (7500 <loop+0x2d8>)
  if ((lngENC1Old != lngENC1New) || blnInitModes)
    73c4:	6830      	ldr	r0, [r6, #0]
    73c6:	4b4f      	ldr	r3, [pc, #316]	; (7504 <loop+0x2dc>)
    73c8:	4290      	cmp	r0, r2
  lngENC1New = ENC1.read();
    73ca:	603a      	str	r2, [r7, #0]
  if ((lngENC1Old != lngENC1New) || blnInitModes)
    73cc:	9306      	str	r3, [sp, #24]
    73ce:	f000 80ab 	beq.w	7528 <loop+0x300>
      blnInitModes = false; blnInitSpectrum  = true;
    73d2:	9b06      	ldr	r3, [sp, #24]
    73d4:	2500      	movs	r5, #0
    73d6:	2101      	movs	r1, #1
    73d8:	701d      	strb	r5, [r3, #0]
    73da:	4b47      	ldr	r3, [pc, #284]	; (74f8 <loop+0x2d0>)
    73dc:	7019      	strb	r1, [r3, #0]
      if (blnSim)// code for SIM
    73de:	9b03      	ldr	r3, [sp, #12]
    73e0:	781b      	ldrb	r3, [r3, #0]
    73e2:	2b00      	cmp	r3, #0
    73e4:	f040 856f 	bne.w	7ec6 <loop+0xc9e>
        if (intBusyMode == 0)
    73e8:	4947      	ldr	r1, [pc, #284]	; (7508 <loop+0x2e0>)
    73ea:	6809      	ldr	r1, [r1, #0]
    73ec:	2900      	cmp	r1, #0
    73ee:	f040 8537 	bne.w	7e60 <loop+0xc38>
            intTargetSN = intTargetSN + (lngENC1New - lngENC1Old);
    73f2:	4b3e      	ldr	r3, [pc, #248]	; (74ec <loop+0x2c4>)
    73f4:	1a10      	subs	r0, r2, r0
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    73f6:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
            intTargetSN = intTargetSN + (lngENC1New - lngENC1Old);
    73fa:	681a      	ldr	r2, [r3, #0]
    73fc:	4410      	add	r0, r2
            if (intTargetSN > intMaxSN){intTargetSN = intMinSN;} //Circular wrap around
    73fe:	2828      	cmp	r0, #40	; 0x28
            intTargetSN = intTargetSN + (lngENC1New - lngENC1Old);
    7400:	6018      	str	r0, [r3, #0]
            if (intTargetSN > intMaxSN){intTargetSN = intMinSN;} //Circular wrap around
    7402:	f301 83d9 	bgt.w	8bb8 <loop+0x1990>
            if (intTargetSN < intMinSN) {intTargetSN = intMaxSN;}
    7406:	3028      	adds	r0, #40	; 0x28
    7408:	f282 8374 	bge.w	9af4 <loop+0x28cc>
            intBusyGain = intBusyGain + (lngENC1New - lngENC1Old);
    740c:	4a3f      	ldr	r2, [pc, #252]	; (750c <loop+0x2e4>)
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    740e:	ed92 6a00 	vldr	s12, [r2]
            if (intTargetSN < intMinSN) {intTargetSN = intMaxSN;}
    7412:	2228      	movs	r2, #40	; 0x28
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    7414:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
            if (intTargetSN < intMinSN) {intTargetSN = intMaxSN;}
    7418:	601a      	str	r2, [r3, #0]
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    741a:	ee86 7b05 	vdiv.f64	d7, d6, d5
    741e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		if (gain > 32767.0f) gain = 32767.0f;
    7422:	eddf 7a3b 	vldr	s15, [pc, #236]	; 7510 <loop+0x2e8>
    7426:	eeb4 7ae7 	vcmpe.f32	s14, s15
    742a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    742e:	f341 83d7 	ble.w	8be0 <loop+0x19b8>
    7432:	4b38      	ldr	r3, [pc, #224]	; (7514 <loop+0x2ec>)
    7434:	f000 bd28 	b.w	7e88 <loop+0xc60>
          intMode = intMode + (lngENC2New - lngENC2Old);
    7438:	4c24      	ldr	r4, [pc, #144]	; (74cc <loop+0x2a4>)
    743a:	1ad2      	subs	r2, r2, r3
    743c:	6823      	ldr	r3, [r4, #0]
    743e:	18d6      	adds	r6, r2, r3
          if (intMode > 18) {intMode = 18;} //Hold at limit
    7440:	2e12      	cmp	r6, #18
    7442:	f341 8381 	ble.w	8b48 <loop+0x1920>
    7446:	2312      	movs	r3, #18
    7448:	6023      	str	r3, [r4, #0]
          if ((intMode >= 1) && (intMode <= 4))
    744a:	e71a      	b.n	7282 <loop+0x5a>
  if ((lngENC2Old != lngENC2New) || (! blnInitialized))
    744c:	7809      	ldrb	r1, [r1, #0]
    744e:	2900      	cmp	r1, #0
    7450:	f43f af10 	beq.w	7274 <loop+0x4c>
    7454:	4b1c      	ldr	r3, [pc, #112]	; (74c8 <loop+0x2a0>)
		if (interrupts_in_use < 2) {
    7456:	4927      	ldr	r1, [pc, #156]	; (74f4 <loop+0x2cc>)
    7458:	9303      	str	r3, [sp, #12]
    745a:	4b25      	ldr	r3, [pc, #148]	; (74f0 <loop+0x2c8>)
    745c:	4c1b      	ldr	r4, [pc, #108]	; (74cc <loop+0x2a4>)
    745e:	9305      	str	r3, [sp, #20]
    7460:	7f0b      	ldrb	r3, [r1, #28]
    7462:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 7524 <loop+0x2fc>
    7466:	2b01      	cmp	r3, #1
    7468:	d8a7      	bhi.n	73ba <loop+0x192>
			noInterrupts();
    746a:	b672      	cpsid	i
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    746c:	6848      	ldr	r0, [r1, #4]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    746e:	680a      	ldr	r2, [r1, #0]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    7470:	8b0b      	ldrh	r3, [r1, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    7472:	6812      	ldr	r2, [r2, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    7474:	6805      	ldr	r5, [r0, #0]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    7476:	009b      	lsls	r3, r3, #2
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    7478:	6888      	ldr	r0, [r1, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    747a:	b29b      	uxth	r3, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    747c:	4002      	ands	r2, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    747e:	68c8      	ldr	r0, [r1, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    7480:	830b      	strh	r3, [r1, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    7482:	4205      	tst	r5, r0
    7484:	f001 83c8 	beq.w	8c18 <loop+0x19f0>
		if (p1val) arg->pstate |= 0x02;
    7488:	b10a      	cbz	r2, 748e <loop+0x266>
    748a:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    748e:	f043 0301 	orr.w	r3, r3, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    7492:	f003 030f 	and.w	r3, r3, #15
		if (rot_enc_table[arg->pstate] )
    7496:	4a20      	ldr	r2, [pc, #128]	; (7518 <loop+0x2f0>)
    7498:	56d2      	ldrsb	r2, [r2, r3]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    749a:	830b      	strh	r3, [r1, #24]
		if (rot_enc_table[arg->pstate] )
    749c:	2a00      	cmp	r2, #0
    749e:	d08d      	beq.n	73bc <loop+0x194>
		        arg->store <<= 4;               // Save last in MSB
    74a0:	8b4a      	ldrh	r2, [r1, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    74a2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    74a6:	694a      	ldr	r2, [r1, #20]
		        arg->store |= arg->pstate;      // Save current in LSB      
    74a8:	b29b      	uxth	r3, r3
    74aa:	834b      	strh	r3, [r1, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    74ac:	b2db      	uxtb	r3, r3
    74ae:	2b2b      	cmp	r3, #43	; 0x2b
    74b0:	f003 81c4 	beq.w	a83c <loop+0x3614>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    74b4:	2b17      	cmp	r3, #23
    74b6:	bf04      	itt	eq
    74b8:	3201      	addeq	r2, #1
    74ba:	614a      	streq	r2, [r1, #20]
    74bc:	e77f      	b.n	73be <loop+0x196>
    74be:	bf00      	nop
    74c0:	2000a868 	.word	0x2000a868
    74c4:	200136e8 	.word	0x200136e8
    74c8:	20009cba 	.word	0x20009cba
    74cc:	20012cb0 	.word	0x20012cb0
    74d0:	2001355c 	.word	0x2001355c
    74d4:	20012c98 	.word	0x20012c98
    74d8:	20012d08 	.word	0x20012d08
    74dc:	200038c0 	.word	0x200038c0
    74e0:	20012d40 	.word	0x20012d40
    74e4:	200034ac 	.word	0x200034ac
    74e8:	200034b8 	.word	0x200034b8
    74ec:	20009a58 	.word	0x20009a58
    74f0:	20012cac 	.word	0x20012cac
    74f4:	2000a848 	.word	0x2000a848
    74f8:	200136e7 	.word	0x200136e7
    74fc:	20012cc4 	.word	0x20012cc4
    7500:	20012cc0 	.word	0x20012cc0
    7504:	20009cb8 	.word	0x20009cb8
    7508:	20012c94 	.word	0x20012c94
    750c:	20009a20 	.word	0x20009a20
    7510:	46fffe00 	.word	0x46fffe00
    7514:	7fff0000 	.word	0x7fff0000
    7518:	20009448 	.word	0x20009448
    751c:	20012ccc 	.word	0x20012ccc
    7520:	20012cc8 	.word	0x20012cc8
    7524:	20013554 	.word	0x20013554
  if ((lngENC1Old != lngENC1New) || blnInitModes)
    7528:	781b      	ldrb	r3, [r3, #0]
    752a:	2b00      	cmp	r3, #0
    752c:	f47f af51 	bne.w	73d2 <loop+0x1aa>
  if (ulngLastPPAvgTimeUs > ulngCurrentElapsedTimeUs){ulngLastPPAvgTimeUs = ulngCurrentElapsedTimeUs;}// Handles micros() rollover
    7530:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 7810 <loop+0x5e8>
  ulngCurrentElapsedTimeUs = micros();
    7534:	f014 f852 	bl	1b5dc <micros>
    7538:	4d9f      	ldr	r5, [pc, #636]	; (77b8 <loop+0x590>)
  if (ulngLastPPAvgTimeUs > ulngCurrentElapsedTimeUs){ulngLastPPAvgTimeUs = ulngCurrentElapsedTimeUs;}// Handles micros() rollover
    753a:	f8da 3000 	ldr.w	r3, [sl]
  ulngCurrentElapsedTimeUs = micros();
    753e:	6028      	str	r0, [r5, #0]
  if (ulngLastPPAvgTimeUs > ulngCurrentElapsedTimeUs){ulngLastPPAvgTimeUs = ulngCurrentElapsedTimeUs;}// Handles micros() rollover
    7540:	4298      	cmp	r0, r3
    7542:	f0c0 81a3 	bcc.w	788c <loop+0x664>
  if ((ulngCurrentElapsedTimeUs - ulngLastPPAvgTimeUs) > 2000)//now using p-p measurement every 2 ms  
    7546:	1ac3      	subs	r3, r0, r3
    7548:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    754c:	f240 81a0 	bls.w	7890 <loop+0x668>
	bool available(void) {
		__disable_irq();
    7550:	b672      	cpsid	i
		bool flag = new_output;
    7552:	4a9a      	ldr	r2, [pc, #616]	; (77bc <loop+0x594>)
    7554:	7f13      	ldrb	r3, [r2, #28]
		if (flag) new_output = false;
    7556:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    755a:	b10b      	cbz	r3, 7560 <loop+0x338>
    755c:	2300      	movs	r3, #0
    755e:	7713      	strb	r3, [r2, #28]
		__enable_irq();
    7560:	b662      	cpsie	i
      if (ppLPInput.available() == true)//Update fltppLPInputMeasAvg  
    7562:	f1b8 0f00 	cmp.w	r8, #0
    7566:	f041 81c7 	bne.w	88f8 <loop+0x16d0>
    756a:	4f95      	ldr	r7, [pc, #596]	; (77c0 <loop+0x598>)
    756c:	4895      	ldr	r0, [pc, #596]	; (77c4 <loop+0x59c>)
      if (rmsNoise.available())
    756e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    7570:	2b00      	cmp	r3, #0
    7572:	f042 831c 	bne.w	9bae <loop+0x2986>
    7576:	4894      	ldr	r0, [pc, #592]	; (77c8 <loop+0x5a0>)
      if (rmsLPInput.available() == true)//Update fltrmsLPInputAvg  average every 2 ms if rmsLPInput available
    7578:	6a83      	ldr	r3, [r0, #40]	; 0x28
    757a:	2b00      	cmp	r3, #0
    757c:	f000 80c4 	beq.w	7708 <loop+0x4e0>
          if (fltrmsLPInputMeasAvg < 50){fltrmsLPInputMeasAvg =  1000 * rmsLPInput.read();}
    7580:	4e92      	ldr	r6, [pc, #584]	; (77cc <loop+0x5a4>)
    7582:	eddf 7a93 	vldr	s15, [pc, #588]	; 77d0 <loop+0x5a8>
    7586:	ed96 8a00 	vldr	s16, [r6]
    758a:	eeb4 8ae7 	vcmpe.f32	s16, s15
    758e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7592:	f101 875e 	bmi.w	9452 <loop+0x222a>
          else { fltrmsLPInputMeasAvg =  (.9 * fltrmsLPInputMeasAvg )+ 100* rmsLPInput.read();}//Rolling avg
    7596:	f003 fb8f 	bl	acb8 <AudioAnalyzeRMS::read()>
    759a:	eddf 7a8e 	vldr	s15, [pc, #568]	; 77d4 <loop+0x5ac>
    759e:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
    75a2:	ee20 7a27 	vmul.f32	s14, s0, s15
    75a6:	ed9f 5b7e 	vldr	d5, [pc, #504]	; 77a0 <loop+0x578>
    75aa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    75ae:	eea8 7b05 	vfma.f64	d7, d8, d5
    75b2:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
          if ((intMode <5)&&(!blnPlotSpectrum) && blnDisplayLvl)
    75b6:	6823      	ldr	r3, [r4, #0]
          if (fltrmsLPInputMeasAvg < 50){fltrmsLPInputMeasAvg =  1000 * rmsLPInput.read();}
    75b8:	ed86 0a00 	vstr	s0, [r6]
          if ((intMode <5)&&(!blnPlotSpectrum) && blnDisplayLvl)
    75bc:	2b04      	cmp	r3, #4
    75be:	f300 80a3 	bgt.w	7708 <loop+0x4e0>
    75c2:	4b85      	ldr	r3, [pc, #532]	; (77d8 <loop+0x5b0>)
    75c4:	781e      	ldrb	r6, [r3, #0]
    75c6:	2e00      	cmp	r6, #0
    75c8:	f040 809e 	bne.w	7708 <loop+0x4e0>
    75cc:	783b      	ldrb	r3, [r7, #0]
    75ce:	2b00      	cmp	r3, #0
    75d0:	f000 80a2 	beq.w	7718 <loop+0x4f0>
              if ((fltrmsLPInputMeasAvg > 50))// Only display CF if fltrmsLPInputMeas > 50 mv rms
    75d4:	eddf 7a7e 	vldr	s15, [pc, #504]	; 77d0 <loop+0x5a8>
    75d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
    75dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    75e0:	f340 8094 	ble.w	770c <loop+0x4e4>
                  fltInput_pp_to_rmsRatio = (fltppLPInputMeasAvg)/fltrmsLPInputMeasAvg;// Pure sine wave would have a ratio of 2.828 : 1
    75e4:	4b7d      	ldr	r3, [pc, #500]	; (77dc <loop+0x5b4>)
    75e6:	f8df 822c 	ldr.w	r8, [pc, #556]	; 7814 <loop+0x5ec>
    75ea:	ed93 7a00 	vldr	s14, [r3]
    75ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
                  if (fltInput_pp_to_rmsRatio >=2.82)// Only display CF if > 1.0 
    75f2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 77a8 <loop+0x580>
    75f6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
                  fltInput_pp_to_rmsRatio = (fltppLPInputMeasAvg)/fltrmsLPInputMeasAvg;// Pure sine wave would have a ratio of 2.828 : 1
    75fa:	edc8 7a00 	vstr	s15, [r8]
                  if (fltInput_pp_to_rmsRatio >=2.82)// Only display CF if > 1.0 
    75fe:	eeb4 5bc6 	vcmpe.f64	d5, d6
    7602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7606:	f2c0 8081 	blt.w	770c <loop+0x4e4>
                      str1 = "CF=";  str2 =  String(abs(fltInput_pp_to_rmsRatio/2.828));str2 = str2 + " [" + (abs(20* log10(fltInput_pp_to_rmsRatio/2.828))) +"dB]";
    760a:	4975      	ldr	r1, [pc, #468]	; (77e0 <loop+0x5b8>)
    760c:	a809      	add	r0, sp, #36	; 0x24
    760e:	f013 fd27 	bl	1b060 <String::operator=(char const*)>
    7612:	ed98 7a00 	vldr	s14, [r8]
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
    7616:	2102      	movs	r1, #2
    7618:	a815      	add	r0, sp, #84	; 0x54
    761a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    761e:	ed9f 8b64 	vldr	d8, [pc, #400]	; 77b0 <loop+0x588>
    7622:	ee87 0b08 	vdiv.f64	d0, d7, d8
  { return __builtin_fabs(__x); }
    7626:	eeb0 0bc0 	vabs.f64	d0, d0
    762a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    762e:	f013 fcdd 	bl	1afec <String::String(float, unsigned char)>
    7632:	a915      	add	r1, sp, #84	; 0x54
    7634:	a80c      	add	r0, sp, #48	; 0x30
    7636:	f013 fcfd 	bl	1b034 <String::operator=(String&&)>
    763a:	a815      	add	r0, sp, #84	; 0x54
    763c:	f013 fc84 	bl	1af48 <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    7640:	a90c      	add	r1, sp, #48	; 0x30
    7642:	a815      	add	r0, sp, #84	; 0x54
    7644:	f013 fc64 	bl	1af10 <String::String(String const&)>
    7648:	4966      	ldr	r1, [pc, #408]	; (77e4 <loop+0x5bc>)
    764a:	a815      	add	r0, sp, #84	; 0x54
    764c:	f013 fd72 	bl	1b134 <operator+(StringSumHelper const&, char const*)>
    7650:	ed98 0a00 	vldr	s0, [r8]
    7654:	9007      	str	r0, [sp, #28]
    7656:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    765a:	ee80 0b08 	vdiv.f64	d0, d0, d8
    765e:	f017 f8eb 	bl	1e838 <log10>
    7662:	9807      	ldr	r0, [sp, #28]
    7664:	eeb3 7b04 	vmov.f64	d7, #52	; 0x41a00000  20.0
    7668:	ee20 0b07 	vmul.f64	d0, d0, d7
    766c:	eeb0 0bc0 	vabs.f64	d0, d0
    7670:	f013 fd82 	bl	1b178 <operator+(StringSumHelper const&, double)>
    7674:	495c      	ldr	r1, [pc, #368]	; (77e8 <loop+0x5c0>)
    7676:	f013 fd5d 	bl	1b134 <operator+(StringSumHelper const&, char const*)>
    767a:	4601      	mov	r1, r0
    767c:	a80c      	add	r0, sp, #48	; 0x30
    767e:	f013 fcd1 	bl	1b024 <String::operator=(String const&)>
class StringSumHelper : public String
    7682:	a815      	add	r0, sp, #84	; 0x54
    7684:	f013 fc60 	bl	1af48 <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    7688:	a90c      	add	r1, sp, #48	; 0x30
    768a:	a815      	add	r0, sp, #84	; 0x54
    768c:	f013 fc40 	bl	1af10 <String::String(String const&)>
                      str2 = str2 + "(PEP/Pavg)"; // RF Power metrology for SSB
    7690:	4956      	ldr	r1, [pc, #344]	; (77ec <loop+0x5c4>)
    7692:	a815      	add	r0, sp, #84	; 0x54
    7694:	f013 fd4e 	bl	1b134 <operator+(StringSumHelper const&, char const*)>
    7698:	4601      	mov	r1, r0
    769a:	a80c      	add	r0, sp, #48	; 0x30
    769c:	f013 fcc2 	bl	1b024 <String::operator=(String const&)>
class StringSumHelper : public String
    76a0:	a815      	add	r0, sp, #84	; 0x54
    76a2:	f013 fc51 	bl	1af48 <String::~String()>
                      tft.setCursor(0,180); tft.setTextColor(ST7735_YELLOW);  tft.setTextSize(2);  tft.println(str1 + str2); strLastCF = str1 + str2;
    76a6:	4633      	mov	r3, r6
    76a8:	22b4      	movs	r2, #180	; 0xb4
    76aa:	4631      	mov	r1, r6
    76ac:	4850      	ldr	r0, [pc, #320]	; (77f0 <loop+0x5c8>)
    76ae:	f00f feb5 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
    76b2:	f64f 71e0 	movw	r1, #65504	; 0xffe0
    76b6:	484e      	ldr	r0, [pc, #312]	; (77f0 <loop+0x5c8>)
    76b8:	f00f ff12 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    76bc:	2202      	movs	r2, #2
    76be:	484c      	ldr	r0, [pc, #304]	; (77f0 <loop+0x5c8>)
    76c0:	4611      	mov	r1, r2
    76c2:	f00f ff01 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    76c6:	a909      	add	r1, sp, #36	; 0x24
    76c8:	a815      	add	r0, sp, #84	; 0x54
    76ca:	f013 fc21 	bl	1af10 <String::String(String const&)>
    76ce:	a90c      	add	r1, sp, #48	; 0x30
    76d0:	a815      	add	r0, sp, #84	; 0x54
    76d2:	f013 fd27 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    76d6:	4601      	mov	r1, r0
    76d8:	4845      	ldr	r0, [pc, #276]	; (77f0 <loop+0x5c8>)
    76da:	f013 fab9 	bl	1ac50 <Print::print(String const&)>
    76de:	4844      	ldr	r0, [pc, #272]	; (77f0 <loop+0x5c8>)
    76e0:	f013 fae8 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    76e4:	a815      	add	r0, sp, #84	; 0x54
    76e6:	f013 fc2f 	bl	1af48 <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    76ea:	a909      	add	r1, sp, #36	; 0x24
    76ec:	a815      	add	r0, sp, #84	; 0x54
    76ee:	f013 fc0f 	bl	1af10 <String::String(String const&)>
    76f2:	a90c      	add	r1, sp, #48	; 0x30
    76f4:	a815      	add	r0, sp, #84	; 0x54
    76f6:	f013 fd15 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    76fa:	4601      	mov	r1, r0
    76fc:	483d      	ldr	r0, [pc, #244]	; (77f4 <loop+0x5cc>)
    76fe:	f013 fc91 	bl	1b024 <String::operator=(String const&)>
class StringSumHelper : public String
    7702:	a815      	add	r0, sp, #84	; 0x54
    7704:	f013 fc20 	bl	1af48 <String::~String()>
       if (blnDisplayLvl) {blnDisplayLvl = false; ulngLastLevelDisplayMs = millis();}
    7708:	783b      	ldrb	r3, [r7, #0]
    770a:	b12b      	cbz	r3, 7718 <loop+0x4f0>
    770c:	2300      	movs	r3, #0
    770e:	f8db 2000 	ldr.w	r2, [fp]
    7712:	703b      	strb	r3, [r7, #0]
    7714:	4b38      	ldr	r3, [pc, #224]	; (77f8 <loop+0x5d0>)
    7716:	601a      	str	r2, [r3, #0]
      if ((blnTestMode3K || blnTestMode6K) && (!blnPlotSpectrum))
    7718:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7818 <loop+0x5f0>
    771c:	f898 3000 	ldrb.w	r3, [r8]
    7720:	2b00      	cmp	r3, #0
    7722:	d17d      	bne.n	7820 <loop+0x5f8>
    7724:	4b35      	ldr	r3, [pc, #212]	; (77fc <loop+0x5d4>)
    7726:	9307      	str	r3, [sp, #28]
    7728:	781b      	ldrb	r3, [r3, #0]
    772a:	2b00      	cmp	r3, #0
    772c:	f041 868a 	bne.w	9444 <loop+0x221c>
    7730:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 781c <loop+0x5f4>
    7734:	4e32      	ldr	r6, [pc, #200]	; (7800 <loop+0x5d8>)
		__disable_irq();
    7736:	b672      	cpsid	i
		bool flag = new_output;
    7738:	f899 301c 	ldrb.w	r3, [r9, #28]
		if (flag) new_output = false;
    773c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    7740:	b113      	cbz	r3, 7748 <loop+0x520>
    7742:	2300      	movs	r3, #0
    7744:	f889 301c 	strb.w	r3, [r9, #28]
		__enable_irq();
    7748:	b662      	cpsie	i
      if (ppi2s0In.available() == true)//Update ppi2s0In average if available
    774a:	2a00      	cmp	r2, #0
    774c:	d06e      	beq.n	782c <loop+0x604>
        if (fltppi2s0InAvg < 100) { fltppi2s0InAvg = 1000 * ppi2s0In.readPeakToPeak();}
    774e:	4b2d      	ldr	r3, [pc, #180]	; (7804 <loop+0x5dc>)
    7750:	eddf 7a20 	vldr	s15, [pc, #128]	; 77d4 <loop+0x5ac>
    7754:	ed93 6a00 	vldr	s12, [r3]
    7758:	eeb4 6ae7 	vcmpe.f32	s12, s15
    775c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7760:	f142 874b 	bpl.w	a5fa <loop+0x33d2>
		max = abs(max);
		if (min > max) max = min;
		return (float)max / 32767.0f;
	}
	float readPeakToPeak(void) {
		__disable_irq();
    7764:	b672      	cpsid	i
		int min = min_sample;
		int max = max_sample;
		min_sample = 32767;
    7766:	f647 72ff 	movw	r2, #32767	; 0x7fff
		max_sample = -32768;
    776a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		int min = min_sample;
    776e:	f9b9 101e 	ldrsh.w	r1, [r9, #30]
		min_sample = 32767;
    7772:	f8a9 201e 	strh.w	r2, [r9, #30]
		int max = max_sample;
    7776:	f9b9 2020 	ldrsh.w	r2, [r9, #32]
		max_sample = -32768;
    777a:	f8a9 0020 	strh.w	r0, [r9, #32]
		__enable_irq();
    777e:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    7780:	1a52      	subs	r2, r2, r1
    7782:	ed9f 6a21 	vldr	s12, [pc, #132]	; 7808 <loop+0x5e0>
    7786:	eddf 6a21 	vldr	s13, [pc, #132]	; 780c <loop+0x5e4>
    778a:	ee07 2a90 	vmov	s15, r2
    778e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7792:	ee87 7a86 	vdiv.f32	s14, s15, s12
    7796:	ee67 7a26 	vmul.f32	s15, s14, s13
    779a:	edc3 7a00 	vstr	s15, [r3]
    779e:	e045      	b.n	782c <loop+0x604>
    77a0:	cccccccd 	.word	0xcccccccd
    77a4:	3feccccc 	.word	0x3feccccc
    77a8:	28f5c28f 	.word	0x28f5c28f
    77ac:	40068f5c 	.word	0x40068f5c
    77b0:	76c8b439 	.word	0x76c8b439
    77b4:	40069fbe 	.word	0x40069fbe
    77b8:	20013670 	.word	0x20013670
    77bc:	20013270 	.word	0x20013270
    77c0:	20009cb7 	.word	0x20009cb7
    77c4:	2000a818 	.word	0x2000a818
    77c8:	2000a7b8 	.word	0x2000a7b8
    77cc:	20012c44 	.word	0x20012c44
    77d0:	42480000 	.word	0x42480000
    77d4:	42c80000 	.word	0x42c80000
    77d8:	200136eb 	.word	0x200136eb
    77dc:	20012c30 	.word	0x20012c30
    77e0:	20005520 	.word	0x20005520
    77e4:	20005524 	.word	0x20005524
    77e8:	20005528 	.word	0x20005528
    77ec:	2000552c 	.word	0x2000552c
    77f0:	2001355c 	.word	0x2001355c
    77f4:	20013514 	.word	0x20013514
    77f8:	20013678 	.word	0x20013678
    77fc:	200136ee 	.word	0x200136ee
    7800:	200132b8 	.word	0x200132b8
    7804:	20012c3c 	.word	0x20012c3c
    7808:	46fffe00 	.word	0x46fffe00
    780c:	447a0000 	.word	0x447a0000
    7810:	2001367c 	.word	0x2001367c
    7814:	20012c10 	.word	0x20012c10
    7818:	200136ed 	.word	0x200136ed
    781c:	20013294 	.word	0x20013294
      if ((blnTestMode3K || blnTestMode6K) && (!blnPlotSpectrum))
    7820:	4b9d      	ldr	r3, [pc, #628]	; (7a98 <loop+0x870>)
    7822:	781b      	ldrb	r3, [r3, #0]
    7824:	2b00      	cmp	r3, #0
    7826:	f001 8251 	beq.w	8ccc <loop+0x1aa4>
    782a:	4e9c      	ldr	r6, [pc, #624]	; (7a9c <loop+0x874>)
		__disable_irq();
    782c:	b672      	cpsid	i
		bool flag = new_output;
    782e:	7f33      	ldrb	r3, [r6, #28]
		if (flag) new_output = false;
    7830:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    7834:	b10b      	cbz	r3, 783a <loop+0x612>
    7836:	2300      	movs	r3, #0
    7838:	7733      	strb	r3, [r6, #28]
		__enable_irq();
    783a:	b662      	cpsie	i
      if (ppi2s1In.available() == true)//Update In average if available
    783c:	b32a      	cbz	r2, 788a <loop+0x662>
        if  (fltppi2s1InAvg < 100) {fltppi2s1InAvg = 1000 * ppi2s1In.readPeakToPeak();}
    783e:	4b98      	ldr	r3, [pc, #608]	; (7aa0 <loop+0x878>)
    7840:	eddf 7a98 	vldr	s15, [pc, #608]	; 7aa4 <loop+0x87c>
    7844:	ed93 6a00 	vldr	s12, [r3]
    7848:	eeb4 6ae7 	vcmpe.f32	s12, s15
    784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7850:	f142 8226 	bpl.w	9ca0 <loop+0x2a78>
		__disable_irq();
    7854:	b672      	cpsid	i
		min_sample = 32767;
    7856:	f647 72ff 	movw	r2, #32767	; 0x7fff
		max_sample = -32768;
    785a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		int min = min_sample;
    785e:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
		min_sample = 32767;
    7862:	83f2      	strh	r2, [r6, #30]
		int max = max_sample;
    7864:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
		max_sample = -32768;
    7868:	8430      	strh	r0, [r6, #32]
		__enable_irq();
    786a:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    786c:	1a52      	subs	r2, r2, r1
    786e:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 7aa8 <loop+0x880>
    7872:	eddf 6a8e 	vldr	s13, [pc, #568]	; 7aac <loop+0x884>
    7876:	ee07 2a90 	vmov	s15, r2
    787a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    787e:	ee87 7a86 	vdiv.f32	s14, s15, s12
    7882:	ee67 7a26 	vmul.f32	s15, s14, s13
    7886:	edc3 7a00 	vstr	s15, [r3]
    ulngLastPPAvgTimeUs  = ulngCurrentElapsedTimeUs;
    788a:	6828      	ldr	r0, [r5, #0]
    788c:	f8ca 0000 	str.w	r0, [sl]
  if (((intMode == 4) && ((ulngCurrentElapsedTimeUs - ulngLastDelayUpdateUs) >= (7812))) //Every 7.812 ms for MPD  
    7890:	6822      	ldr	r2, [r4, #0]
    7892:	4e87      	ldr	r6, [pc, #540]	; (7ab0 <loop+0x888>)
    7894:	2a04      	cmp	r2, #4
    7896:	d07e      	beq.n	7996 <loop+0x76e>
      || ((intMode == 3) && ((ulngCurrentElapsedTimeUs - ulngLastDelayUpdateUs) >= (15625))) //Every 15.625ms MPP
    7898:	2a03      	cmp	r2, #3
    789a:	f000 826c 	beq.w	7d76 <loop+0xb4e>
      || ((intMode == 2) && ((ulngCurrentElapsedTimeUs - ulngLastDelayUpdateUs) >= (31250))) //Every 31.250ms MPM
    789e:	2a02      	cmp	r2, #2
    78a0:	f042 8169 	bne.w	9b76 <loop+0x294e>
    78a4:	6833      	ldr	r3, [r6, #0]
    78a6:	f647 2111 	movw	r1, #31249	; 0x7a11
    78aa:	1ac7      	subs	r7, r0, r3
    78ac:	428f      	cmp	r7, r1
    78ae:	d978      	bls.n	79a2 <loop+0x77a>
        if (intMultipaths == 2) 
    78b0:	4f80      	ldr	r7, [pc, #512]	; (7ab4 <loop+0x88c>)
    78b2:	683b      	ldr	r3, [r7, #0]
    78b4:	2b02      	cmp	r3, #2
    78b6:	f000 826a 	beq.w	7d8e <loop+0xb66>
        if (intMultipaths == 4) 
    78ba:	2b04      	cmp	r3, #4
    78bc:	f000 826e 	beq.w	7d9c <loop+0xb74>
        ulngLastDelayUpdateUs = ulngCurrentElapsedTimeUs;
    78c0:	682b      	ldr	r3, [r5, #0]
    78c2:	6033      	str	r3, [r6, #0]
    78c4:	4e7c      	ldr	r6, [pc, #496]	; (7ab8 <loop+0x890>)
  if (int(ulngCurrentElapsedTimeUs - ulngLastSNUpdateUs) > random(2000, 5000)); // Only adjust S:N every 2-5ms
    78c6:	f241 3188 	movw	r1, #5000	; 0x1388
    78ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    78ce:	f013 facd 	bl	1ae6c <random(long, long)>
      if (blnSim) { AdjustS_N ( intTargetSN, fltppLPInputMeasAvg);}
    78d2:	9b03      	ldr	r3, [sp, #12]
    78d4:	781b      	ldrb	r3, [r3, #0]
    78d6:	2b00      	cmp	r3, #0
    78d8:	d168      	bne.n	79ac <loop+0x784>
      ulngLastSNUpdateUs = ulngCurrentElapsedTimeUs;
    78da:	682a      	ldr	r2, [r5, #0]
    78dc:	6032      	str	r2, [r6, #0]
      if ((intFadeDepth_dB > 0) && (fltFadeRate > .01) && blnSim)
    78de:	9a05      	ldr	r2, [sp, #20]
    78e0:	6811      	ldr	r1, [r2, #0]
    78e2:	2900      	cmp	r1, #0
    78e4:	f340 8202 	ble.w	7cec <loop+0xac4>
    78e8:	4a74      	ldr	r2, [pc, #464]	; (7abc <loop+0x894>)
    78ea:	ed92 0a00 	vldr	s0, [r2]
    78ee:	ed9f 7b68 	vldr	d7, [pc, #416]	; 7a90 <loop+0x868>
    78f2:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
    78f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    78fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78fe:	dd64      	ble.n	79ca <loop+0x7a2>
    7900:	2b00      	cmp	r3, #0
    7902:	f041 8634 	bne.w	956e <loop+0x2346>
  if (millis() < ulngLastSpectrumUpdateMs){ulngLastSpectrumUpdateMs = millis();}//handles possible millis() rollover
    7906:	4d6e      	ldr	r5, [pc, #440]	; (7ac0 <loop+0x898>)
    7908:	f8db 2000 	ldr.w	r2, [fp]
    790c:	682b      	ldr	r3, [r5, #0]
    790e:	429a      	cmp	r2, r3
    7910:	f0c0 81f3 	bcc.w	7cfa <loop+0xad2>
    7914:	4e6b      	ldr	r6, [pc, #428]	; (7ac4 <loop+0x89c>)
		if (outputflag == true) {
    7916:	f896 343d 	ldrb.w	r3, [r6, #1085]	; 0x43d
    791a:	2b00      	cmp	r3, #0
    791c:	f040 81f6 	bne.w	7d0c <loop+0xae4>
  debouncer1.update();          //right Encoder
    7920:	4869      	ldr	r0, [pc, #420]	; (7ac8 <loop+0x8a0>)
    7922:	f00d f9f7 	bl	14d14 <Debouncer::update()>
  debouncer2.update();          //left Encoder
    7926:	4869      	ldr	r0, [pc, #420]	; (7acc <loop+0x8a4>)
    7928:	f00d f9f4 	bl	14d14 <Debouncer::update()>
  if (debouncer1.fell())        //Right Encoder "push"
    792c:	4866      	ldr	r0, [pc, #408]	; (7ac8 <loop+0x8a0>)
    792e:	f00d fa35 	bl	14d9c <Debouncer::fell()>
    7932:	2800      	cmp	r0, #0
    7934:	f000 810e 	beq.w	7b54 <loop+0x92c>
      blnEnableTestTone = !blnEnableTestTone; //Toggle Test tone
    7938:	4965      	ldr	r1, [pc, #404]	; (7ad0 <loop+0x8a8>)
      if (intMode < 5)
    793a:	6822      	ldr	r2, [r4, #0]
      blnEnableTestTone = !blnEnableTestTone; //Toggle Test tone
    793c:	780b      	ldrb	r3, [r1, #0]
      if (intMode < 5)
    793e:	2a04      	cmp	r2, #4
      blnEnableTestTone = !blnEnableTestTone; //Toggle Test tone
    7940:	f083 0301 	eor.w	r3, r3, #1
    7944:	700b      	strb	r3, [r1, #0]
      if (intMode < 5)
    7946:	f300 80e5 	bgt.w	7b14 <loop+0x8ec>
          if (blnEnableTestTone)
    794a:	2b00      	cmp	r3, #0
    794c:	f041 8560 	bne.w	9410 <loop+0x21e8>
              mixInpSel.gain(0, 0); mixInpSel.gain(1, 0); mixInpSel.gain(2, 100 * fltLogs[intGainLevel[0]]); mixInpSel.gain(3, 100 * fltLogs[intGainLevel[1]]);
    7950:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 7b10 <loop+0x8e8>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    7954:	4a5f      	ldr	r2, [pc, #380]	; (7ad4 <loop+0x8ac>)
    7956:	4d60      	ldr	r5, [pc, #384]	; (7ad8 <loop+0x8b0>)
    7958:	eddf 6a52 	vldr	s13, [pc, #328]	; 7aa4 <loop+0x87c>
		if (gain > 32767.0f) gain = 32767.0f;
    795c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 7aa8 <loop+0x880>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    7960:	e9c2 3306 	strd	r3, r3, [r2, #24]
    7964:	f8da 3000 	ldr.w	r3, [sl]
    7968:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    796c:	edd3 7a00 	vldr	s15, [r3]
    7970:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if (gain > 32767.0f) gain = 32767.0f;
    7974:	eef4 7ac7 	vcmpe.f32	s15, s14
    7978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    797c:	f302 83e9 	bgt.w	a152 <loop+0x2f2a>
		else if (gain < -32767.0f) gain = -32767.0f;
    7980:	ed9f 7a56 	vldr	s14, [pc, #344]	; 7adc <loop+0x8b4>
    7984:	eef4 7ac7 	vcmpe.f32	s15, s14
    7988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    798c:	f142 862e 	bpl.w	a5ec <loop+0x33c4>
    7990:	4b53      	ldr	r3, [pc, #332]	; (7ae0 <loop+0x8b8>)
    7992:	f002 bbdf 	b.w	a154 <loop+0x2f2c>
  if (((intMode == 4) && ((ulngCurrentElapsedTimeUs - ulngLastDelayUpdateUs) >= (7812))) //Every 7.812 ms for MPD  
    7996:	6833      	ldr	r3, [r6, #0]
    7998:	f641 6183 	movw	r1, #7811	; 0x1e83
    799c:	1ac7      	subs	r7, r0, r3
    799e:	428f      	cmp	r7, r1
    79a0:	d886      	bhi.n	78b0 <loop+0x688>
    else if( ulngCurrentElapsedTimeUs < ulngLastDelayUpdateUs)// handles micros() rollover [about once ever 70 minutes]
    79a2:	4298      	cmp	r0, r3
    79a4:	f0c1 80cb 	bcc.w	8b3e <loop+0x1916>
    79a8:	4e43      	ldr	r6, [pc, #268]	; (7ab8 <loop+0x890>)
    79aa:	e78c      	b.n	78c6 <loop+0x69e>
      if (blnSim) { AdjustS_N ( intTargetSN, fltppLPInputMeasAvg);}
    79ac:	4b4d      	ldr	r3, [pc, #308]	; (7ae4 <loop+0x8bc>)
    79ae:	ed93 0a00 	vldr	s0, [r3]
    79b2:	4b4d      	ldr	r3, [pc, #308]	; (7ae8 <loop+0x8c0>)
    79b4:	6818      	ldr	r0, [r3, #0]
    79b6:	f7fa fd4f 	bl	2458 <AdjustS_N(int, float)>
      ulngLastSNUpdateUs = ulngCurrentElapsedTimeUs;
    79ba:	682b      	ldr	r3, [r5, #0]
    79bc:	6033      	str	r3, [r6, #0]
      if ((intFadeDepth_dB > 0) && (fltFadeRate > .01) && blnSim)
    79be:	9b05      	ldr	r3, [sp, #20]
    79c0:	6819      	ldr	r1, [r3, #0]
    79c2:	9b03      	ldr	r3, [sp, #12]
    79c4:	2900      	cmp	r1, #0
    79c6:	781b      	ldrb	r3, [r3, #0]
    79c8:	dc8e      	bgt.n	78e8 <loop+0x6c0>
      else if (blnSim) 
    79ca:	2b00      	cmp	r3, #0
    79cc:	f000 818e 	beq.w	7cec <loop+0xac4>
          AdjustS_N ( intTargetSN, fltppLPInputMeasAvg);
    79d0:	4b44      	ldr	r3, [pc, #272]	; (7ae4 <loop+0x8bc>)
    79d2:	ed93 0a00 	vldr	s0, [r3]
    79d6:	4b44      	ldr	r3, [pc, #272]	; (7ae8 <loop+0x8c0>)
    79d8:	6818      	ldr	r0, [r3, #0]
    79da:	f7fa fd3d 	bl	2458 <AdjustS_N(int, float)>
  if ((blnSim) && ( (millis() - ulngLastSpectrumUpdateMs) > 100) && blnPlotSpectrum) //Plot only every 100 ms in Sim mode (no averaging)
    79de:	9b03      	ldr	r3, [sp, #12]
    79e0:	7819      	ldrb	r1, [r3, #0]
  if (millis() < ulngLastSpectrumUpdateMs){ulngLastSpectrumUpdateMs = millis();}//handles possible millis() rollover
    79e2:	4d37      	ldr	r5, [pc, #220]	; (7ac0 <loop+0x898>)
    79e4:	f8db 3000 	ldr.w	r3, [fp]
    79e8:	682a      	ldr	r2, [r5, #0]
    79ea:	429a      	cmp	r2, r3
    79ec:	f201 80df 	bhi.w	8bae <loop+0x1986>
  if ((blnSim) && ( (millis() - ulngLastSpectrumUpdateMs) > 100) && blnPlotSpectrum) //Plot only every 100 ms in Sim mode (no averaging)
    79f0:	2900      	cmp	r1, #0
    79f2:	d08f      	beq.n	7914 <loop+0x6ec>
    79f4:	f8db 3000 	ldr.w	r3, [fp]
    79f8:	682a      	ldr	r2, [r5, #0]
    79fa:	1a9b      	subs	r3, r3, r2
    79fc:	2b64      	cmp	r3, #100	; 0x64
    79fe:	d98f      	bls.n	7920 <loop+0x6f8>
    7a00:	4b25      	ldr	r3, [pc, #148]	; (7a98 <loop+0x870>)
    7a02:	781b      	ldrb	r3, [r3, #0]
    7a04:	2b00      	cmp	r3, #0
    7a06:	d08b      	beq.n	7920 <loop+0x6f8>
    7a08:	4e2e      	ldr	r6, [pc, #184]	; (7ac4 <loop+0x89c>)
    7a0a:	f896 343d 	ldrb.w	r3, [r6, #1085]	; 0x43d
    7a0e:	2b00      	cmp	r3, #0
    7a10:	d086      	beq.n	7920 <loop+0x6f8>
          if (intBandwidth == 6000) {intNumofBinsToPlot = 150;} //6503 Hz
    7a12:	4b36      	ldr	r3, [pc, #216]	; (7aec <loop+0x8c4>)
    7a14:	681f      	ldr	r7, [r3, #0]
			outputflag = false;
    7a16:	2300      	movs	r3, #0
    7a18:	f886 343d 	strb.w	r3, [r6, #1085]	; 0x43d
    7a1c:	f241 7370 	movw	r3, #6000	; 0x1770
    7a20:	429f      	cmp	r7, r3
    7a22:	f002 872e 	beq.w	a882 <loop+0x365a>
          if (intBandwidth == 3000) {intNumofBinsToPlot = 82;} //3531 Hz
    7a26:	f640 33b8 	movw	r3, #3000	; 0xbb8
    7a2a:	429f      	cmp	r7, r3
    7a2c:	f042 872c 	bne.w	a888 <loop+0x3660>
    7a30:	2052      	movs	r0, #82	; 0x52
          if (intBandwidth == 6000) {intNumofBinsToPlot = 150;} //6503 Hz
    7a32:	4b2f      	ldr	r3, [pc, #188]	; (7af0 <loop+0x8c8>)
    7a34:	6018      	str	r0, [r3, #0]
		return (float)(output[binNumber]) * (1.0f / 16384.0f);
    7a36:	eddf 6a2f 	vldr	s13, [pc, #188]	; 7af4 <loop+0x8cc>
              else {fltrmsNoiseAvg = 313;}//   6KHz bandwidth
    7a3a:	2300      	movs	r3, #0
          for (int i = 0; i <= intNumofBinsToPlot; i++) { fltFFT[i] = 4000.0 * fft1024.read(i);}
    7a3c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 7af8 <loop+0x8d0>
    7a40:	492e      	ldr	r1, [pc, #184]	; (7afc <loop+0x8d4>)
    7a42:	4a2f      	ldr	r2, [pc, #188]	; (7b00 <loop+0x8d8>)
    7a44:	f831 cf02 	ldrh.w	ip, [r1, #2]!
    7a48:	3301      	adds	r3, #1
    7a4a:	ee07 ca90 	vmov	s15, ip
    7a4e:	4283      	cmp	r3, r0
    7a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
    7a54:	ee67 7aa6 	vmul.f32	s15, s15, s13
    7a58:	ee67 7a87 	vmul.f32	s15, s15, s14
    7a5c:	ece2 7a01 	vstmia	r2!, {s15}
    7a60:	ddf0      	ble.n	7a44 <loop+0x81c>
          PlotSpectrum(fltFFT, intSpecLow, intSpecHigh, blnInitSpectrum, intBandwidth);
    7a62:	4b28      	ldr	r3, [pc, #160]	; (7b04 <loop+0x8dc>)
    7a64:	9700      	str	r7, [sp, #0]
    7a66:	4f28      	ldr	r7, [pc, #160]	; (7b08 <loop+0x8e0>)
    7a68:	681a      	ldr	r2, [r3, #0]
    7a6a:	4b28      	ldr	r3, [pc, #160]	; (7b0c <loop+0x8e4>)
    7a6c:	4824      	ldr	r0, [pc, #144]	; (7b00 <loop+0x8d8>)
    7a6e:	6819      	ldr	r1, [r3, #0]
    7a70:	783b      	ldrb	r3, [r7, #0]
    7a72:	f7ff f9f1 	bl	6e58 <PlotSpectrum(float*, int, int, bool, int)>
          blnInitSpectrum = false;// only init on first call to print headers.
    7a76:	2300      	movs	r3, #0
    7a78:	703b      	strb	r3, [r7, #0]
    7a7a:	f8db 3000 	ldr.w	r3, [fp]
          ulngLastSpectrumUpdateMs = millis();
    7a7e:	602b      	str	r3, [r5, #0]
  if (!blnSim)
    7a80:	9b03      	ldr	r3, [sp, #12]
    7a82:	781b      	ldrb	r3, [r3, #0]
    7a84:	2b00      	cmp	r3, #0
    7a86:	f47f af4b 	bne.w	7920 <loop+0x6f8>
    7a8a:	e13a      	b.n	7d02 <loop+0xada>
    7a8c:	f3af 8000 	nop.w
    7a90:	47ae147b 	.word	0x47ae147b
    7a94:	3f847ae1 	.word	0x3f847ae1
    7a98:	200136eb 	.word	0x200136eb
    7a9c:	200132b8 	.word	0x200132b8
    7aa0:	20012c40 	.word	0x20012c40
    7aa4:	42c80000 	.word	0x42c80000
    7aa8:	46fffe00 	.word	0x46fffe00
    7aac:	447a0000 	.word	0x447a0000
    7ab0:	20013674 	.word	0x20013674
    7ab4:	20009a48 	.word	0x20009a48
    7ab8:	20013680 	.word	0x20013680
    7abc:	20012c0c 	.word	0x20012c0c
    7ac0:	20013684 	.word	0x20013684
    7ac4:	20011704 	.word	0x20011704
    7ac8:	2000cb10 	.word	0x2000cb10
    7acc:	2000cb28 	.word	0x2000cb28
    7ad0:	200136e5 	.word	0x200136e5
    7ad4:	20012db0 	.word	0x20012db0
    7ad8:	2000389c 	.word	0x2000389c
    7adc:	c6fffe00 	.word	0xc6fffe00
    7ae0:	80010000 	.word	0x80010000
    7ae4:	20012c30 	.word	0x20012c30
    7ae8:	20009a58 	.word	0x20009a58
    7aec:	20009a10 	.word	0x20009a10
    7af0:	20012cb4 	.word	0x20012cb4
    7af4:	38800000 	.word	0x38800000
    7af8:	457a0000 	.word	0x457a0000
    7afc:	2001071a 	.word	0x2001071a
    7b00:	200129b0 	.word	0x200129b0
    7b04:	20009a54 	.word	0x20009a54
    7b08:	200136e7 	.word	0x200136e7
    7b0c:	20012cb8 	.word	0x20012cb8
    7b10:	20009a30 	.word	0x20009a30
      if ((intMode >= 5) && (intMode <= 16)) //Gain and output level settings)setting to  EEPROM
    7b14:	3a05      	subs	r2, #5
    7b16:	2a0b      	cmp	r2, #11
    7b18:	d819      	bhi.n	7b4e <loop+0x926>
          SaveParametersToEEPROM();
    7b1a:	f7fd fded 	bl	56f8 <SaveParametersToEEPROM()>
           tft.setCursor(0,70);tft.setTextColor(ST7735_WHITE);  tft.setTextSize(3); tft.println(" SAVED TO EEPROM");
    7b1e:	2300      	movs	r3, #0
    7b20:	2246      	movs	r2, #70	; 0x46
    7b22:	48b4      	ldr	r0, [pc, #720]	; (7df4 <loop+0xbcc>)
    7b24:	4619      	mov	r1, r3
    7b26:	f00f fc79 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
    7b2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7b2e:	48b1      	ldr	r0, [pc, #708]	; (7df4 <loop+0xbcc>)
    7b30:	f00f fcd6 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    7b34:	2203      	movs	r2, #3
    7b36:	48af      	ldr	r0, [pc, #700]	; (7df4 <loop+0xbcc>)
    7b38:	4611      	mov	r1, r2
    7b3a:	f00f fcc5 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    7b3e:	2210      	movs	r2, #16
    7b40:	49ad      	ldr	r1, [pc, #692]	; (7df8 <loop+0xbd0>)
    7b42:	48ac      	ldr	r0, [pc, #688]	; (7df4 <loop+0xbcc>)
    7b44:	f011 ffc8 	bl	19ad8 <ST7735_t3::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    7b48:	48aa      	ldr	r0, [pc, #680]	; (7df4 <loop+0xbcc>)
    7b4a:	f013 f8b3 	bl	1acb4 <Print::println()>
      delay(100);  
    7b4e:	2064      	movs	r0, #100	; 0x64
    7b50:	f013 fcf0 	bl	1b534 <delay>
  if (debouncer2.fell())        //Left Encoder Push
    7b54:	48a9      	ldr	r0, [pc, #676]	; (7dfc <loop+0xbd4>)
    7b56:	f00d f921 	bl	14d9c <Debouncer::fell()>
    7b5a:	b1a8      	cbz	r0, 7b88 <loop+0x960>
      if (blnTestMode3K || blnTestMode6K)
    7b5c:	4ba8      	ldr	r3, [pc, #672]	; (7e00 <loop+0xbd8>)
    7b5e:	781b      	ldrb	r3, [r3, #0]
    7b60:	2b00      	cmp	r3, #0
    7b62:	d13f      	bne.n	7be4 <loop+0x9bc>
    7b64:	4ba7      	ldr	r3, [pc, #668]	; (7e04 <loop+0xbdc>)
    7b66:	781b      	ldrb	r3, [r3, #0]
    7b68:	2b00      	cmp	r3, #0
    7b6a:	d13b      	bne.n	7be4 <loop+0x9bc>
      else if (blnModes)
    7b6c:	4aa6      	ldr	r2, [pc, #664]	; (7e08 <loop+0xbe0>)
    7b6e:	7811      	ldrb	r1, [r2, #0]
    7b70:	2900      	cmp	r1, #0
    7b72:	f002 82e2 	beq.w	a13a <loop+0x2f12>
          blnModes = false; blnPlotSpectrum = true; blnInitSpectrum = true;
    7b76:	7013      	strb	r3, [r2, #0]
    7b78:	2301      	movs	r3, #1
    7b7a:	4aa4      	ldr	r2, [pc, #656]	; (7e0c <loop+0xbe4>)
    7b7c:	7013      	strb	r3, [r2, #0]
    7b7e:	4aa4      	ldr	r2, [pc, #656]	; (7e10 <loop+0xbe8>)
    7b80:	7013      	strb	r3, [r2, #0]
      delay(100);
    7b82:	2064      	movs	r0, #100	; 0x64
    7b84:	f013 fcd6 	bl	1b534 <delay>
    7b88:	4ca2      	ldr	r4, [pc, #648]	; (7e14 <loop+0xbec>)
    7b8a:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 7e58 <loop+0xc30>
    else if (blnColon == true) {strParameter += inChar;}//Accumulate the parameter
    7b8e:	4da2      	ldr	r5, [pc, #648]	; (7e18 <loop+0xbf0>)
	String & operator += (char c)			{return append(c);}
    7b90:	4ea2      	ldr	r6, [pc, #648]	; (7e1c <loop+0xbf4>)
    7b92:	4fa3      	ldr	r7, [pc, #652]	; (7e20 <loop+0xbf8>)
        virtual int available() { return usb_serial_available(); }
    7b94:	f015 fc38 	bl	1d408 <usb_serial_available>
  while  (Serial.available() > 0)//While there are any unprocessed characters received via the serial port
    7b98:	2800      	cmp	r0, #0
    7b9a:	dd10      	ble.n	7bbe <loop+0x996>
        virtual int read() { return usb_serial_getchar(); }
    7b9c:	f015 fc78 	bl	1d490 <usb_serial_getchar>
      char inChar = Serial.read();//Read one char
    7ba0:	b2c1      	uxtb	r1, r0
      if (inChar == '\n') //if it is a New Line (Cr)
    7ba2:	290a      	cmp	r1, #10
    7ba4:	d02c      	beq.n	7c00 <loop+0x9d8>
    else if (inChar == ':') { blnColon = true; }//Set the blnColon flag separating Mode from Parameter
    7ba6:	293a      	cmp	r1, #58	; 0x3a
    7ba8:	d06b      	beq.n	7c82 <loop+0xa5a>
    else if (blnColon == true) {strParameter += inChar;}//Accumulate the parameter
    7baa:	782b      	ldrb	r3, [r5, #0]
    7bac:	2b00      	cmp	r3, #0
    7bae:	d06b      	beq.n	7c88 <loop+0xa60>
    7bb0:	4638      	mov	r0, r7
    7bb2:	f013 faa7 	bl	1b104 <String::append(char)>
        virtual int available() { return usb_serial_available(); }
    7bb6:	f015 fc27 	bl	1d408 <usb_serial_available>
  while  (Serial.available() > 0)//While there are any unprocessed characters received via the serial port
    7bba:	2800      	cmp	r0, #0
    7bbc:	dcee      	bgt.n	7b9c <loop+0x974>
  intSerialCmdMode = -1; intSerialCmdParam = -1;
    7bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}// End Main Loop *******************************************************************************
    7bc2:	a80f      	add	r0, sp, #60	; 0x3c
  intSerialCmdMode = -1; intSerialCmdParam = -1;
    7bc4:	6023      	str	r3, [r4, #0]
    7bc6:	f8c8 3000 	str.w	r3, [r8]
}// End Main Loop *******************************************************************************
    7bca:	f013 f9bd 	bl	1af48 <String::~String()>
    7bce:	a80c      	add	r0, sp, #48	; 0x30
    7bd0:	f013 f9ba 	bl	1af48 <String::~String()>
    7bd4:	a809      	add	r0, sp, #36	; 0x24
    7bd6:	f013 f9b7 	bl	1af48 <String::~String()>
    7bda:	b019      	add	sp, #100	; 0x64
    7bdc:	ecbd 8b02 	vpop	{d8}
    7be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          blnPlotSpectrum = ! blnPlotSpectrum;
    7be4:	4a89      	ldr	r2, [pc, #548]	; (7e0c <loop+0xbe4>)
    7be6:	7813      	ldrb	r3, [r2, #0]
    7be8:	f083 0301 	eor.w	r3, r3, #1
    7bec:	7013      	strb	r3, [r2, #0]
          if (blnPlotSpectrum) { blnInitSpectrum = true; blnModes = false;}
    7bee:	2b00      	cmp	r3, #0
    7bf0:	d0c7      	beq.n	7b82 <loop+0x95a>
    7bf2:	4b87      	ldr	r3, [pc, #540]	; (7e10 <loop+0xbe8>)
    7bf4:	2201      	movs	r2, #1
    7bf6:	701a      	strb	r2, [r3, #0]
    7bf8:	2200      	movs	r2, #0
    7bfa:	4b83      	ldr	r3, [pc, #524]	; (7e08 <loop+0xbe0>)
    7bfc:	701a      	strb	r2, [r3, #0]
    7bfe:	e7c0      	b.n	7b82 <loop+0x95a>
          intSerialCmdMode = -1; intSerialCmdParam = -1;
    7c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
              intSerialCmdMode = ParseSimMode(strMode);
    7c04:	4631      	mov	r1, r6
    7c06:	a815      	add	r0, sp, #84	; 0x54
          intSerialCmdMode = -1; intSerialCmdParam = -1;
    7c08:	6023      	str	r3, [r4, #0]
    7c0a:	f8c8 3000 	str.w	r3, [r8]
          if (blnSim)
    7c0e:	9b03      	ldr	r3, [sp, #12]
    7c10:	f893 9000 	ldrb.w	r9, [r3]
    7c14:	f1b9 0f00 	cmp.w	r9, #0
    7c18:	d042      	beq.n	7ca0 <loop+0xa78>
              intSerialCmdMode = ParseSimMode(strMode);
    7c1a:	f013 f979 	bl	1af10 <String::String(String const&)>
    7c1e:	a815      	add	r0, sp, #84	; 0x54
    7c20:	f7fc fb44 	bl	42ac <ParseSimMode(String)>
    7c24:	6020      	str	r0, [r4, #0]
    7c26:	a815      	add	r0, sp, #84	; 0x54
    7c28:	f013 f98e 	bl	1af48 <String::~String()>
              if (intSerialCmdMode == 18)//  Moved to 18 to accomodate TEST3K, TEST6K
    7c2c:	6823      	ldr	r3, [r4, #0]
    7c2e:	2b12      	cmp	r3, #18
    7c30:	f000 80bb 	beq.w	7daa <loop+0xb82>
              else if (intSerialCmdMode > -1)
    7c34:	2b00      	cmp	r3, #0
    7c36:	db2b      	blt.n	7c90 <loop+0xa68>
                  if (ParseSetSimParameter(strParameter, intSerialCmdMode))
    7c38:	4639      	mov	r1, r7
    7c3a:	a815      	add	r0, sp, #84	; 0x54
    7c3c:	f013 f968 	bl	1af10 <String::String(String const&)>
    7c40:	6821      	ldr	r1, [r4, #0]
    7c42:	a815      	add	r0, sp, #84	; 0x54
    7c44:	f7fc fb70 	bl	4328 <ParseSetSimParameter(String, int)>
    7c48:	4681      	mov	r9, r0
    7c4a:	a815      	add	r0, sp, #84	; 0x54
    7c4c:	f013 f97c 	bl	1af48 <String::~String()>
    7c50:	f1b9 0f00 	cmp.w	r9, #0
    7c54:	d01c      	beq.n	7c90 <loop+0xa68>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7c56:	2102      	movs	r1, #2
    7c58:	4872      	ldr	r0, [pc, #456]	; (7e24 <loop+0xbfc>)
    7c5a:	f015 fc3f 	bl	1d4dc <usb_serial_write>
    7c5e:	4872      	ldr	r0, [pc, #456]	; (7e28 <loop+0xc00>)
    7c60:	f013 f828 	bl	1acb4 <Print::println()>
                      if (intSerialCmdMode < 5){ ParseSetParameter(strParameter, intSerialCmdMode);}
    7c64:	6823      	ldr	r3, [r4, #0]
    7c66:	2b04      	cmp	r3, #4
    7c68:	f342 8041 	ble.w	9cee <loop+0x2ac6>
          strMode = ""; strParameter = ""; blnColon = false; //Initialize
    7c6c:	496f      	ldr	r1, [pc, #444]	; (7e2c <loop+0xc04>)
    7c6e:	4630      	mov	r0, r6
    7c70:	f013 f9f6 	bl	1b060 <String::operator=(char const*)>
    7c74:	496d      	ldr	r1, [pc, #436]	; (7e2c <loop+0xc04>)
    7c76:	4638      	mov	r0, r7
    7c78:	f013 f9f2 	bl	1b060 <String::operator=(char const*)>
    7c7c:	2300      	movs	r3, #0
    7c7e:	702b      	strb	r3, [r5, #0]
    7c80:	e788      	b.n	7b94 <loop+0x96c>
    else if (inChar == ':') { blnColon = true; }//Set the blnColon flag separating Mode from Parameter
    7c82:	2301      	movs	r3, #1
    7c84:	702b      	strb	r3, [r5, #0]
    7c86:	e785      	b.n	7b94 <loop+0x96c>
    7c88:	4630      	mov	r0, r6
    7c8a:	f013 fa3b 	bl	1b104 <String::append(char)>
    7c8e:	e781      	b.n	7b94 <loop+0x96c>
    7c90:	2101      	movs	r1, #1
    7c92:	4867      	ldr	r0, [pc, #412]	; (7e30 <loop+0xc08>)
    7c94:	f015 fc22 	bl	1d4dc <usb_serial_write>
    7c98:	4863      	ldr	r0, [pc, #396]	; (7e28 <loop+0xc00>)
    7c9a:	f013 f80b 	bl	1acb4 <Print::println()>
    7c9e:	e7e5      	b.n	7c6c <loop+0xa44>
              intSerialCmdMode = ParseBusyMode(strMode);
    7ca0:	f013 f936 	bl	1af10 <String::String(String const&)>
    7ca4:	a815      	add	r0, sp, #84	; 0x54
    7ca6:	f7ff f873 	bl	6d90 <ParseBusyMode(String)>
    7caa:	6020      	str	r0, [r4, #0]
    7cac:	a815      	add	r0, sp, #84	; 0x54
    7cae:	f013 f94b 	bl	1af48 <String::~String()>
              if (intSerialCmdMode == (intNumBusyModes - 1))
    7cb2:	6823      	ldr	r3, [r4, #0]
    7cb4:	2b0a      	cmp	r3, #10
    7cb6:	f000 8089 	beq.w	7dcc <loop+0xba4>
              else if (intSerialCmdMode > -1)
    7cba:	2b00      	cmp	r3, #0
    7cbc:	dbe8      	blt.n	7c90 <loop+0xa68>
                  if (ParseSetBusyParameter(strParameter, intSerialCmdMode)){ Serial.println("OK");} //Serial Command is OK
    7cbe:	4639      	mov	r1, r7
    7cc0:	a815      	add	r0, sp, #84	; 0x54
    7cc2:	f013 f925 	bl	1af10 <String::String(String const&)>
    7cc6:	6821      	ldr	r1, [r4, #0]
    7cc8:	a815      	add	r0, sp, #84	; 0x54
    7cca:	f7fc ffbb 	bl	4c44 <ParseSetBusyParameter(String, int)>
    7cce:	4681      	mov	r9, r0
    7cd0:	a815      	add	r0, sp, #84	; 0x54
    7cd2:	f013 f939 	bl	1af48 <String::~String()>
    7cd6:	f1b9 0f00 	cmp.w	r9, #0
    7cda:	d0d9      	beq.n	7c90 <loop+0xa68>
    7cdc:	2102      	movs	r1, #2
    7cde:	4851      	ldr	r0, [pc, #324]	; (7e24 <loop+0xbfc>)
    7ce0:	f015 fbfc 	bl	1d4dc <usb_serial_write>
    7ce4:	4850      	ldr	r0, [pc, #320]	; (7e28 <loop+0xc00>)
    7ce6:	f012 ffe5 	bl	1acb4 <Print::println()>
    7cea:	e7bf      	b.n	7c6c <loop+0xa44>
  if (millis() < ulngLastSpectrumUpdateMs){ulngLastSpectrumUpdateMs = millis();}//handles possible millis() rollover
    7cec:	4d51      	ldr	r5, [pc, #324]	; (7e34 <loop+0xc0c>)
    7cee:	f8db 3000 	ldr.w	r3, [fp]
    7cf2:	682a      	ldr	r2, [r5, #0]
    7cf4:	429a      	cmp	r2, r3
    7cf6:	f67f ae0d 	bls.w	7914 <loop+0x6ec>
    7cfa:	f8db 3000 	ldr.w	r3, [fp]
    7cfe:	4e4e      	ldr	r6, [pc, #312]	; (7e38 <loop+0xc10>)
    7d00:	602b      	str	r3, [r5, #0]
		if (outputflag == true) {
    7d02:	f896 343d 	ldrb.w	r3, [r6, #1085]	; 0x43d
    7d06:	2b00      	cmp	r3, #0
    7d08:	f43f ae0a 	beq.w	7920 <loop+0x6f8>
      AvgFFTBins((intBinsAveraged == 0), .2 , intBusyBWLoHz, intBusyBWHiHz); //Average the fltFFT[] bins, initialize if intBinsAveraged == 0
    7d0c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 7e5c <loop+0xc34>
			outputflag = false;
    7d10:	2300      	movs	r3, #0
    7d12:	4f4a      	ldr	r7, [pc, #296]	; (7e3c <loop+0xc14>)
    7d14:	f8da 1000 	ldr.w	r1, [sl]
    7d18:	f886 343d 	strb.w	r3, [r6, #1085]	; 0x43d
    7d1c:	4b48      	ldr	r3, [pc, #288]	; (7e40 <loop+0xc18>)
    7d1e:	fab1 f081 	clz	r0, r1
    7d22:	683a      	ldr	r2, [r7, #0]
      intBinsAveraged += 1;
    7d24:	f101 0801 	add.w	r8, r1, #1
      AvgFFTBins((intBinsAveraged == 0), .2 , intBusyBWLoHz, intBusyBWHiHz); //Average the fltFFT[] bins, initialize if intBinsAveraged == 0
    7d28:	681b      	ldr	r3, [r3, #0]
    7d2a:	0940      	lsrs	r0, r0, #5
      if (intBinsAveraged > intAvg)//If enough averages completed
    7d2c:	4e45      	ldr	r6, [pc, #276]	; (7e44 <loop+0xc1c>)
      AvgFFTBins((intBinsAveraged == 0), .2 , intBusyBWLoHz, intBusyBWHiHz); //Average the fltFFT[] bins, initialize if intBinsAveraged == 0
    7d2e:	4619      	mov	r1, r3
    7d30:	ed9f 0a45 	vldr	s0, [pc, #276]	; 7e48 <loop+0xc20>
    7d34:	9207      	str	r2, [sp, #28]
    7d36:	9305      	str	r3, [sp, #20]
    7d38:	f7fd fb5a 	bl	53f0 <AvgFFTBins(bool, float, int, int)>
      if (intBinsAveraged > intAvg)//If enough averages completed
    7d3c:	f8d6 9000 	ldr.w	r9, [r6]
    7d40:	9b05      	ldr	r3, [sp, #20]
    7d42:	45c8      	cmp	r8, r9
    7d44:	9a07      	ldr	r2, [sp, #28]
      intBinsAveraged += 1;
    7d46:	f8ca 8000 	str.w	r8, [sl]
      if (intBinsAveraged > intAvg)//If enough averages completed
    7d4a:	f302 8242 	bgt.w	a1d2 <loop+0x2faa>
      if (0 == (intBinsAveraged % intAvg))// Only plot every intAvg averages (about 11ms /average)
    7d4e:	fb98 f6f9 	sdiv	r6, r8, r9
    7d52:	fb09 8616 	mls	r6, r9, r6, r8
    7d56:	2e00      	cmp	r6, #0
    7d58:	f47f ade2 	bne.w	7920 <loop+0x6f8>
        if (blnPlotSpectrum)
    7d5c:	4b2b      	ldr	r3, [pc, #172]	; (7e0c <loop+0xbe4>)
    7d5e:	781b      	ldrb	r3, [r3, #0]
    7d60:	2b00      	cmp	r3, #0
    7d62:	f042 8558 	bne.w	a816 <loop+0x35ee>
        if (intBinsAveraged > 100000) {
    7d66:	4b39      	ldr	r3, [pc, #228]	; (7e4c <loop+0xc24>)
    7d68:	4598      	cmp	r8, r3
    7d6a:	f77f add9 	ble.w	7920 <loop+0x6f8>
          intBinsAveraged = 0; //To prevent overflow of intBinsAveraged
    7d6e:	2300      	movs	r3, #0
    7d70:	f8ca 3000 	str.w	r3, [sl]
    7d74:	e5d4      	b.n	7920 <loop+0x6f8>
      || ((intMode == 3) && ((ulngCurrentElapsedTimeUs - ulngLastDelayUpdateUs) >= (15625))) //Every 15.625ms MPP
    7d76:	6833      	ldr	r3, [r6, #0]
    7d78:	f643 5108 	movw	r1, #15624	; 0x3d08
    7d7c:	1ac7      	subs	r7, r0, r3
    7d7e:	428f      	cmp	r7, r1
    7d80:	f67f ae0f 	bls.w	79a2 <loop+0x77a>
        if (intMultipaths == 2) 
    7d84:	4f32      	ldr	r7, [pc, #200]	; (7e50 <loop+0xc28>)
    7d86:	683b      	ldr	r3, [r7, #0]
    7d88:	2b02      	cmp	r3, #2
    7d8a:	f47f ad96 	bne.w	78ba <loop+0x692>
            QuadGauss12FIR128( intMode);// Updates WGN and FIR filters for I1, Q1, I2, Q2 Paths (FIR Filter bandwidth proportional to Update Rate) 
    7d8e:	4610      	mov	r0, r2
    7d90:	f7fa fd92 	bl	28b8 <QuadGauss12FIR128(int)>
        if (intMultipaths == 4) 
    7d94:	683b      	ldr	r3, [r7, #0]
    7d96:	2b04      	cmp	r3, #4
    7d98:	f47f ad92 	bne.w	78c0 <loop+0x698>
            QuadGauss12FIR128( intMode);// Updates WGN and FIR filters for I1, Q1, I2, Q2 Paths (FIR Filter bandwidth proportional to Update Rate) 
    7d9c:	6820      	ldr	r0, [r4, #0]
    7d9e:	f7fa fd8b 	bl	28b8 <QuadGauss12FIR128(int)>
            QuadGauss34FIR128( intMode);// Updates WGN and FIR filters for I3, Q3, I4, Q4 Paths (FIR Filter bandwidth proportional to Update Rate) 
    7da2:	6820      	ldr	r0, [r4, #0]
    7da4:	f7fa fee4 	bl	2b70 <QuadGauss34FIR128(int)>
    7da8:	e58a      	b.n	78c0 <loop+0x698>
    7daa:	2102      	movs	r1, #2
    7dac:	481d      	ldr	r0, [pc, #116]	; (7e24 <loop+0xbfc>)
    7dae:	f015 fb95 	bl	1d4dc <usb_serial_write>
    7db2:	481d      	ldr	r0, [pc, #116]	; (7e28 <loop+0xc00>)
    7db4:	f012 ff7e 	bl	1acb4 <Print::println()>
                  blnSim = false;  blnInitialized = false;  blnEnableTestTone = false;
    7db8:	2300      	movs	r3, #0
    7dba:	9a03      	ldr	r2, [sp, #12]
    7dbc:	7013      	strb	r3, [r2, #0]
    7dbe:	9a04      	ldr	r2, [sp, #16]
    7dc0:	7013      	strb	r3, [r2, #0]
    7dc2:	4a24      	ldr	r2, [pc, #144]	; (7e54 <loop+0xc2c>)
    7dc4:	7013      	strb	r3, [r2, #0]
                  InitializeBusy();
    7dc6:	f7fe fb03 	bl	63d0 <InitializeBusy()>
    7dca:	e74f      	b.n	7c6c <loop+0xa44>
    7dcc:	2102      	movs	r1, #2
    7dce:	4815      	ldr	r0, [pc, #84]	; (7e24 <loop+0xbfc>)
    7dd0:	f015 fb84 	bl	1d4dc <usb_serial_write>
    7dd4:	4814      	ldr	r0, [pc, #80]	; (7e28 <loop+0xc00>)
    7dd6:	f012 ff6d 	bl	1acb4 <Print::println()>
                  strMode = ""; strParameter = ""; blnColon = false; //Initialize
    7dda:	4914      	ldr	r1, [pc, #80]	; (7e2c <loop+0xc04>)
    7ddc:	4630      	mov	r0, r6
    7dde:	f013 f93f 	bl	1b060 <String::operator=(char const*)>
    7de2:	4912      	ldr	r1, [pc, #72]	; (7e2c <loop+0xc04>)
    7de4:	4638      	mov	r0, r7
    7de6:	f013 f93b 	bl	1b060 <String::operator=(char const*)>
    7dea:	f885 9000 	strb.w	r9, [r5]
                  setup();        // <------------------------------------------------- why this here?? TRL
    7dee:	f7fe fbaf 	bl	6550 <setup>
    7df2:	e73b      	b.n	7c6c <loop+0xa44>
    7df4:	2001355c 	.word	0x2001355c
    7df8:	2000558c 	.word	0x2000558c
    7dfc:	2000cb28 	.word	0x2000cb28
    7e00:	200136ed 	.word	0x200136ed
    7e04:	200136ee 	.word	0x200136ee
    7e08:	20009cb9 	.word	0x20009cb9
    7e0c:	200136eb 	.word	0x200136eb
    7e10:	200136e7 	.word	0x200136e7
    7e14:	20009a4c 	.word	0x20009a4c
    7e18:	200136e4 	.word	0x200136e4
    7e1c:	2001352c 	.word	0x2001352c
    7e20:	20013538 	.word	0x20013538
    7e24:	20003498 	.word	0x20003498
    7e28:	20008ba0 	.word	0x20008ba0
    7e2c:	200039f8 	.word	0x200039f8
    7e30:	200055a0 	.word	0x200055a0
    7e34:	20013684 	.word	0x20013684
    7e38:	20011704 	.word	0x20011704
    7e3c:	20009a18 	.word	0x20009a18
    7e40:	20012c90 	.word	0x20012c90
    7e44:	20009a0c 	.word	0x20009a0c
    7e48:	3e4ccccd 	.word	0x3e4ccccd
    7e4c:	000186a0 	.word	0x000186a0
    7e50:	20009a48 	.word	0x20009a48
    7e54:	200136e5 	.word	0x200136e5
    7e58:	20009a50 	.word	0x20009a50
    7e5c:	20012c8c 	.word	0x20012c8c
        if (intBusyMode == 1)
    7e60:	2901      	cmp	r1, #1
    7e62:	f041 8645 	bne.w	9af0 <loop+0x28c8>
            intBusyGain = intBusyGain + (lngENC1New - lngENC1Old);
    7e66:	4d6d      	ldr	r5, [pc, #436]	; (801c <loop+0xdf4>)
    7e68:	1a12      	subs	r2, r2, r0
    7e6a:	6828      	ldr	r0, [r5, #0]
    7e6c:	4402      	add	r2, r0
            if (intBusyGain > 8) {intBusyGain = 8;} //Stop at limits
    7e6e:	2a08      	cmp	r2, #8
    7e70:	f341 874a 	ble.w	9d08 <loop+0x2ae0>
    7e74:	2308      	movs	r3, #8
    7e76:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8020 <loop+0xdf8>
    7e7a:	602b      	str	r3, [r5, #0]
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    7e7c:	eef0 7a47 	vmov.f32	s15, s14
    7e80:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    7e84:	ee17 3a90 	vmov	r3, s15
    7e88:	4a66      	ldr	r2, [pc, #408]	; (8024 <loop+0xdfc>)
    if (intBusyMode == 2)
    7e8a:	2902      	cmp	r1, #2
    7e8c:	6213      	str	r3, [r2, #32]
    7e8e:	f000 80ad 	beq.w	7fec <loop+0xdc4>
    if (intBusyMode == 3)
    7e92:	2903      	cmp	r1, #3
    7e94:	f001 8653 	beq.w	9b3e <loop+0x2916>
    if (intBusyMode == 4)
    7e98:	2904      	cmp	r1, #4
    7e9a:	f040 80bc 	bne.w	8016 <loop+0xdee>
        intAvg = intAvg + (lngENC1New - lngENC1Old);
    7e9e:	6832      	ldr	r2, [r6, #0]
    7ea0:	683b      	ldr	r3, [r7, #0]
    7ea2:	4e61      	ldr	r6, [pc, #388]	; (8028 <loop+0xe00>)
    7ea4:	1a9b      	subs	r3, r3, r2
    7ea6:	6832      	ldr	r2, [r6, #0]
    7ea8:	4413      	add	r3, r2
        if (intAvg > 50) { intAvg = 1;} //Circular wrap around
    7eaa:	2b32      	cmp	r3, #50	; 0x32
    7eac:	f301 86a8 	bgt.w	9c00 <loop+0x29d8>
        intAvg = intAvg + (lngENC1New - lngENC1Old);
    7eb0:	6033      	str	r3, [r6, #0]
    if (intAvg < 1) 
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	dc01      	bgt.n	7eba <loop+0xc92>
          intAvg = 50;
    7eb6:	2332      	movs	r3, #50	; 0x32
    7eb8:	6033      	str	r3, [r6, #0]
      lngENC2Old = lngENC2New;
    7eba:	f8d9 3000 	ldr.w	r3, [r9]
    7ebe:	f8c8 3000 	str.w	r3, [r8]
    7ec2:	f7ff bb35 	b.w	7530 <loop+0x308>
          tft.setCursor(1,80);
    7ec6:	462b      	mov	r3, r5
    7ec8:	2250      	movs	r2, #80	; 0x50
    7eca:	4858      	ldr	r0, [pc, #352]	; (802c <loop+0xe04>)
    7ecc:	f00f faa6 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
          tft.fillScreen(ST7735_BLACK);
    7ed0:	4856      	ldr	r0, [pc, #344]	; (802c <loop+0xe04>)
    7ed2:	4629      	mov	r1, r5
    7ed4:	f00e fc8e 	bl	167f4 <ST7735_t3::fillScreen(unsigned short)>
          if ((intMode >= 0) && (intMode <= 4))
    7ed8:	6820      	ldr	r0, [r4, #0]
    7eda:	2804      	cmp	r0, #4
    7edc:	d857      	bhi.n	7f8e <loop+0xd66>
              if (intMode == 0) //(WGN)
    7ede:	2800      	cmp	r0, #0
    7ee0:	f041 87e2 	bne.w	9ea8 <loop+0x2c80>
    7ee4:	4b52      	ldr	r3, [pc, #328]	; (8030 <loop+0xe08>)
    7ee6:	f64d 128c 	movw	r2, #55692	; 0xd98c
                  mixIQ12.gain(0,0.0);mixIQ12.gain(1,.8498);mixIQ12.gain(2,0.0);mixIQ12.gain(3,0.0);SetIQTapDelays(intMode);
    7eea:	9007      	str	r0, [sp, #28]
    7eec:	6198      	str	r0, [r3, #24]
    7eee:	61da      	str	r2, [r3, #28]
    7ef0:	e9c3 0008 	strd	r0, r0, [r3, #32]
    7ef4:	f7fa ff8e 	bl	2e14 <SetIQTapDelays(int)>
    7ef8:	9807      	ldr	r0, [sp, #28]
              intTargetSN = intTargetSN + (lngENC1New - lngENC1Old);
    7efa:	6832      	ldr	r2, [r6, #0]
    7efc:	683b      	ldr	r3, [r7, #0]
    7efe:	4d4d      	ldr	r5, [pc, #308]	; (8034 <loop+0xe0c>)
    7f00:	1a9b      	subs	r3, r3, r2
    7f02:	682a      	ldr	r2, [r5, #0]
    7f04:	4413      	add	r3, r2
              if (intTargetSN > intMaxSN) 
    7f06:	2b28      	cmp	r3, #40	; 0x28
    7f08:	f341 87c6 	ble.w	9e98 <loop+0x2c70>
                  intTargetSN = intMaxSN; //Hold at stops
    7f0c:	2328      	movs	r3, #40	; 0x28
    7f0e:	602b      	str	r3, [r5, #0]
              str1 = chrModes[intMode];  str2 = "    S:N= "; str3 = " dB";
    7f10:	4b49      	ldr	r3, [pc, #292]	; (8038 <loop+0xe10>)
    7f12:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    7f16:	a809      	add	r0, sp, #36	; 0x24
    7f18:	f013 f8a2 	bl	1b060 <String::operator=(char const*)>
    7f1c:	4947      	ldr	r1, [pc, #284]	; (803c <loop+0xe14>)
    7f1e:	a80c      	add	r0, sp, #48	; 0x30
    7f20:	f013 f89e 	bl	1b060 <String::operator=(char const*)>
    7f24:	4946      	ldr	r1, [pc, #280]	; (8040 <loop+0xe18>)
    7f26:	a80f      	add	r0, sp, #60	; 0x3c
    7f28:	f013 f89a 	bl	1b060 <String::operator=(char const*)>
              tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    7f2c:	f240 71ff 	movw	r1, #2047	; 0x7ff
    7f30:	483e      	ldr	r0, [pc, #248]	; (802c <loop+0xe04>)
    7f32:	f00f fad5 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    7f36:	2203      	movs	r2, #3
    7f38:	483c      	ldr	r0, [pc, #240]	; (802c <loop+0xe04>)
    7f3a:	4611      	mov	r1, r2
    7f3c:	f00f fac4 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
    7f40:	a909      	add	r1, sp, #36	; 0x24
    7f42:	483a      	ldr	r0, [pc, #232]	; (802c <loop+0xe04>)
    7f44:	f012 fe84 	bl	1ac50 <Print::print(String const&)>
    7f48:	4838      	ldr	r0, [pc, #224]	; (802c <loop+0xe04>)
    7f4a:	f012 feb3 	bl	1acb4 <Print::println()>
              tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intTargetSN + str3);
    7f4e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    7f52:	4836      	ldr	r0, [pc, #216]	; (802c <loop+0xe04>)
    7f54:	f00f fac4 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    7f58:	2203      	movs	r2, #3
    7f5a:	4834      	ldr	r0, [pc, #208]	; (802c <loop+0xe04>)
    7f5c:	4611      	mov	r1, r2
    7f5e:	f00f fab3 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    7f62:	a90c      	add	r1, sp, #48	; 0x30
    7f64:	a815      	add	r0, sp, #84	; 0x54
    7f66:	f012 ffd3 	bl	1af10 <String::String(String const&)>
    7f6a:	6829      	ldr	r1, [r5, #0]
    7f6c:	a815      	add	r0, sp, #84	; 0x54
    7f6e:	f013 f8ef 	bl	1b150 <operator+(StringSumHelper const&, int)>
    7f72:	a90f      	add	r1, sp, #60	; 0x3c
    7f74:	f013 f8d6 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    7f78:	4601      	mov	r1, r0
    7f7a:	482c      	ldr	r0, [pc, #176]	; (802c <loop+0xe04>)
    7f7c:	f012 fe68 	bl	1ac50 <Print::print(String const&)>
    7f80:	482a      	ldr	r0, [pc, #168]	; (802c <loop+0xe04>)
    7f82:	f012 fe97 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    7f86:	a815      	add	r0, sp, #84	; 0x54
    7f88:	f012 ffde 	bl	1af48 <String::~String()>
          if (intMode == 5)//MULTIPATHS
    7f8c:	6820      	ldr	r0, [r4, #0]
    7f8e:	2805      	cmp	r0, #5
    7f90:	f001 8368 	beq.w	9664 <loop+0x243c>
          if (intMode == 6)//FADE DEPTH
    7f94:	2806      	cmp	r0, #6
    7f96:	f001 82f2 	beq.w	957e <loop+0x2356>
          if (intMode == 7)//FADE FREQ
    7f9a:	2807      	cmp	r0, #7
    7f9c:	f001 854c 	beq.w	9a38 <loop+0x2810>
          if (intMode == 8)//OFFSET
    7fa0:	2808      	cmp	r0, #8
    7fa2:	f001 84e1 	beq.w	9968 <loop+0x2740>
          if (intMode == 9) //FM DEVIATION
    7fa6:	2809      	cmp	r0, #9
    7fa8:	f001 844d 	beq.w	9846 <loop+0x261e>
        if (intMode == 10)//FM RATE
    7fac:	280a      	cmp	r0, #10
    7fae:	f001 83b7 	beq.w	9720 <loop+0x24f8>
        if ((intMode > 10) && (intMode < 13)) //Input GAINS: (0,1,2,5,10,20,50,100,200)[Nominal input range for 1000 mv p-p internal: 5 mv p-p to 1000 mv p-p]
    7fb2:	f1a0 010b 	sub.w	r1, r0, #11
    7fb6:	2901      	cmp	r1, #1
    7fb8:	f241 8253 	bls.w	9462 <loop+0x223a>
        else if  ((intMode > 12) && (intMode < 15)) //Output GAINS (0,.01,.02,.05,.1,.2,.5,1,2)Out mv p-p @ 1000 mv p-p internal: 10 mv p-p to 2000 mv p-p
    7fbc:	f1a0 030d 	sub.w	r3, r0, #13
    7fc0:	2b01      	cmp	r3, #1
    7fc2:	f242 8040 	bls.w	a046 <loop+0x2e1e>
        if (intMode == 15)//BANDWIDTH
    7fc6:	280f      	cmp	r0, #15
    7fc8:	f001 8711 	beq.w	9dee <loop+0x2bc6>
        if (intMode == 16)//SERIAL
    7fcc:	2810      	cmp	r0, #16
    7fce:	f001 86a1 	beq.w	9d14 <loop+0x2aec>
        if (intMode == 17)//TEST3K (Sine)
    7fd2:	2811      	cmp	r0, #17
    7fd4:	f002 814c 	beq.w	a270 <loop+0x3048>
        if (intMode == 18)//TEST6K (Sine)
    7fd8:	2812      	cmp	r0, #18
    7fda:	f002 81c3 	beq.w	a364 <loop+0x313c>
        lngENC1Old = lngENC1New;
    7fde:	683b      	ldr	r3, [r7, #0]
    7fe0:	6033      	str	r3, [r6, #0]
    if (intBusyMode == 2)
    7fe2:	4b18      	ldr	r3, [pc, #96]	; (8044 <loop+0xe1c>)
    7fe4:	6819      	ldr	r1, [r3, #0]
    7fe6:	2902      	cmp	r1, #2
    7fe8:	f47f af53 	bne.w	7e92 <loop+0xc6a>
        intBusyBWLoHz = intBusyBWLoHz + intBusyFreqStep * (lngENC1New - lngENC1Old);
    7fec:	6833      	ldr	r3, [r6, #0]
    7fee:	6839      	ldr	r1, [r7, #0]
    7ff0:	4a15      	ldr	r2, [pc, #84]	; (8048 <loop+0xe20>)
    7ff2:	1ac9      	subs	r1, r1, r3
    7ff4:	4b15      	ldr	r3, [pc, #84]	; (804c <loop+0xe24>)
    7ff6:	681d      	ldr	r5, [r3, #0]
        if (intBusyBWLoHz > (intBusyBWHiHz - 300)) {intBusyBWLoHz = 300;} //Circular wrap around
    7ff8:	4b15      	ldr	r3, [pc, #84]	; (8050 <loop+0xe28>)
    7ffa:	6818      	ldr	r0, [r3, #0]
        intBusyBWLoHz = intBusyBWLoHz + intBusyFreqStep * (lngENC1New - lngENC1Old);
    7ffc:	6813      	ldr	r3, [r2, #0]
    7ffe:	fb05 3301 	mla	r3, r5, r1, r3
        if (intBusyBWLoHz > (intBusyBWHiHz - 300)) {intBusyBWLoHz = 300;} //Circular wrap around
    8002:	f46f 7195 	mvn.w	r1, #298	; 0x12a
    8006:	1841      	adds	r1, r0, r1
        intBusyBWLoHz = intBusyBWLoHz + intBusyFreqStep * (lngENC1New - lngENC1Old);
    8008:	6013      	str	r3, [r2, #0]
        if (intBusyBWLoHz > (intBusyBWHiHz - 300)) {intBusyBWLoHz = 300;} //Circular wrap around
    800a:	428b      	cmp	r3, r1
    800c:	f2c1 85e7 	blt.w	9bde <loop+0x29b6>
    8010:	f44f 7396 	mov.w	r3, #300	; 0x12c
    8014:	6013      	str	r3, [r2, #0]
        intAvg = intAvg + (lngENC1New - lngENC1Old);
    8016:	4e04      	ldr	r6, [pc, #16]	; (8028 <loop+0xe00>)
    8018:	6833      	ldr	r3, [r6, #0]
    801a:	e74a      	b.n	7eb2 <loop+0xc8a>
    801c:	20009a20 	.word	0x20009a20
    8020:	3f4ccccd 	.word	0x3f4ccccd
    8024:	20012db0 	.word	0x20012db0
    8028:	20009a0c 	.word	0x20009a0c
    802c:	2001355c 	.word	0x2001355c
    8030:	20012d08 	.word	0x20012d08
    8034:	20009a58 	.word	0x20009a58
    8038:	200038c0 	.word	0x200038c0
    803c:	200034ac 	.word	0x200034ac
    8040:	200034b8 	.word	0x200034b8
    8044:	20012c94 	.word	0x20012c94
    8048:	20012c90 	.word	0x20012c90
    804c:	20009a1c 	.word	0x20009a1c
    8050:	20009a18 	.word	0x20009a18
          str1 = chrModes[intMode];  str2 = "    ";
    8054:	4bb8      	ldr	r3, [pc, #736]	; (8338 <loop+0x1110>)
    8056:	a809      	add	r0, sp, #36	; 0x24
    8058:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    805c:	f013 f800 	bl	1b060 <String::operator=(char const*)>
    8060:	49b6      	ldr	r1, [pc, #728]	; (833c <loop+0x1114>)
    8062:	a80c      	add	r0, sp, #48	; 0x30
          if (intMode < 13) {tft.println(str2 +String(100 * fltLogs[intGainLevel[ intMode - 11]]));}  // Scale up input fltLogs by 100}
    8064:	4db6      	ldr	r5, [pc, #728]	; (8340 <loop+0x1118>)
          str1 = chrModes[intMode];  str2 = "    ";
    8066:	f012 fffb 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    806a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    806e:	48b5      	ldr	r0, [pc, #724]	; (8344 <loop+0x111c>)
    8070:	f00f fa36 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8074:	2203      	movs	r2, #3
    8076:	48b3      	ldr	r0, [pc, #716]	; (8344 <loop+0x111c>)
    8078:	4611      	mov	r1, r2
    807a:	f00f fa25 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    807e:	a909      	add	r1, sp, #36	; 0x24
    8080:	48b0      	ldr	r0, [pc, #704]	; (8344 <loop+0x111c>)
    8082:	f012 fde5 	bl	1ac50 <Print::print(String const&)>
    8086:	48af      	ldr	r0, [pc, #700]	; (8344 <loop+0x111c>)
    8088:	f012 fe14 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3); 
    808c:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    8090:	48ac      	ldr	r0, [pc, #688]	; (8344 <loop+0x111c>)
    8092:	f00f fa25 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8096:	2203      	movs	r2, #3
    8098:	48aa      	ldr	r0, [pc, #680]	; (8344 <loop+0x111c>)
    809a:	4611      	mov	r1, r2
    809c:	f00f fa14 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
          if (intMode < 13) {tft.println(str2 +String(100 * fltLogs[intGainLevel[ intMode - 11]]));}  // Scale up input fltLogs by 100}
    80a0:	6823      	ldr	r3, [r4, #0]
	StringSumHelper(const String &s) : String(s) {}
    80a2:	a90c      	add	r1, sp, #48	; 0x30
    80a4:	a815      	add	r0, sp, #84	; 0x54
    80a6:	2b0c      	cmp	r3, #12
    80a8:	f340 85a5 	ble.w	8bf6 <loop+0x19ce>
    80ac:	f012 ff30 	bl	1af10 <String::String(String const&)>
          else {tft.println(str2 +String( fltLogs[intGainLevel[ intMode - 11]]));}                    // Scale output fltLogs by 1
    80b0:	6823      	ldr	r3, [r4, #0]
    80b2:	4aa5      	ldr	r2, [pc, #660]	; (8348 <loop+0x1120>)
    80b4:	3b0b      	subs	r3, #11
    80b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    80be:	ed93 0a00 	vldr	s0, [r3]
    80c2:	2102      	movs	r1, #2
    80c4:	a812      	add	r0, sp, #72	; 0x48
    80c6:	f012 ff91 	bl	1afec <String::String(float, unsigned char)>
    80ca:	a912      	add	r1, sp, #72	; 0x48
    80cc:	a815      	add	r0, sp, #84	; 0x54
    80ce:	f013 f829 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    80d2:	4601      	mov	r1, r0
    80d4:	489b      	ldr	r0, [pc, #620]	; (8344 <loop+0x111c>)
    80d6:	f012 fdbb 	bl	1ac50 <Print::print(String const&)>
    80da:	489a      	ldr	r0, [pc, #616]	; (8344 <loop+0x111c>)
    80dc:	f012 fdea 	bl	1acb4 <Print::println()>
    80e0:	a812      	add	r0, sp, #72	; 0x48
    80e2:	f012 ff31 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    80e6:	a815      	add	r0, sp, #84	; 0x54
    80e8:	f012 ff2e 	bl	1af48 <String::~String()>
      if (intMode == 15)//BANDWIDTH
    80ec:	6825      	ldr	r5, [r4, #0]
    80ee:	2d0f      	cmp	r5, #15
    80f0:	f47f a94b 	bne.w	738a <loop+0x162>
          str1 = chrModes[intMode];  str2 = "    "; str3 = " Hz";
    80f4:	4995      	ldr	r1, [pc, #596]	; (834c <loop+0x1124>)
    80f6:	a809      	add	r0, sp, #36	; 0x24
    80f8:	f012 ffb2 	bl	1b060 <String::operator=(char const*)>
    80fc:	498f      	ldr	r1, [pc, #572]	; (833c <loop+0x1114>)
    80fe:	a80c      	add	r0, sp, #48	; 0x30
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intBandwidth + str3);
    8100:	4d93      	ldr	r5, [pc, #588]	; (8350 <loop+0x1128>)
          str1 = chrModes[intMode];  str2 = "    "; str3 = " Hz";
    8102:	f012 ffad 	bl	1b060 <String::operator=(char const*)>
    8106:	4993      	ldr	r1, [pc, #588]	; (8354 <loop+0x112c>)
    8108:	a80f      	add	r0, sp, #60	; 0x3c
    810a:	f012 ffa9 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    810e:	f240 71ff 	movw	r1, #2047	; 0x7ff
    8112:	488c      	ldr	r0, [pc, #560]	; (8344 <loop+0x111c>)
    8114:	f00f f9e4 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8118:	2203      	movs	r2, #3
    811a:	488a      	ldr	r0, [pc, #552]	; (8344 <loop+0x111c>)
    811c:	4611      	mov	r1, r2
    811e:	f00f f9d3 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    8122:	a909      	add	r1, sp, #36	; 0x24
    8124:	4887      	ldr	r0, [pc, #540]	; (8344 <loop+0x111c>)
    8126:	f012 fd93 	bl	1ac50 <Print::print(String const&)>
    812a:	4886      	ldr	r0, [pc, #536]	; (8344 <loop+0x111c>)
    812c:	f012 fdc2 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intBandwidth + str3);
    8130:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    8134:	4883      	ldr	r0, [pc, #524]	; (8344 <loop+0x111c>)
    8136:	f00f f9d3 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    813a:	2203      	movs	r2, #3
    813c:	4881      	ldr	r0, [pc, #516]	; (8344 <loop+0x111c>)
    813e:	4611      	mov	r1, r2
    8140:	f00f f9c2 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    8144:	a90c      	add	r1, sp, #48	; 0x30
    8146:	a815      	add	r0, sp, #84	; 0x54
    8148:	f012 fee2 	bl	1af10 <String::String(String const&)>
    814c:	6829      	ldr	r1, [r5, #0]
    814e:	a815      	add	r0, sp, #84	; 0x54
    8150:	f012 fffe 	bl	1b150 <operator+(StringSumHelper const&, int)>
    8154:	a90f      	add	r1, sp, #60	; 0x3c
    8156:	f012 ffe5 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    815a:	4601      	mov	r1, r0
    815c:	4879      	ldr	r0, [pc, #484]	; (8344 <loop+0x111c>)
    815e:	f012 fd77 	bl	1ac50 <Print::print(String const&)>
    8162:	4878      	ldr	r0, [pc, #480]	; (8344 <loop+0x111c>)
    8164:	f012 fda6 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    8168:	a815      	add	r0, sp, #84	; 0x54
    816a:	f012 feed 	bl	1af48 <String::~String()>
      if (intMode == 16)//Baud Rate
    816e:	6825      	ldr	r5, [r4, #0]
    8170:	2d10      	cmp	r5, #16
    8172:	f47f a90d 	bne.w	7390 <loop+0x168>
          str1 = chrModes[intMode];  str2 = "    "; str3 = " Baud";
    8176:	4978      	ldr	r1, [pc, #480]	; (8358 <loop+0x1130>)
    8178:	a809      	add	r0, sp, #36	; 0x24
    817a:	f012 ff71 	bl	1b060 <String::operator=(char const*)>
    817e:	496f      	ldr	r1, [pc, #444]	; (833c <loop+0x1114>)
    8180:	a80c      	add	r0, sp, #48	; 0x30
		uint32_t millis_begin = systick_millis_count;
    8182:	f8df b21c 	ldr.w	fp, [pc, #540]	; 83a0 <loop+0x1178>
    8186:	f012 ff6b 	bl	1b060 <String::operator=(char const*)>
    818a:	4974      	ldr	r1, [pc, #464]	; (835c <loop+0x1134>)
    818c:	a80f      	add	r0, sp, #60	; 0x3c
    818e:	4d74      	ldr	r5, [pc, #464]	; (8360 <loop+0x1138>)
    8190:	f012 ff66 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    8194:	f240 71ff 	movw	r1, #2047	; 0x7ff
    8198:	486a      	ldr	r0, [pc, #424]	; (8344 <loop+0x111c>)
				if (elapsed > 750) break;
    819a:	f240 2aee 	movw	sl, #750	; 0x2ee
    819e:	f00f f99f 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    81a2:	2203      	movs	r2, #3
    81a4:	4867      	ldr	r0, [pc, #412]	; (8344 <loop+0x111c>)
    81a6:	4611      	mov	r1, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    81a8:	4f6e      	ldr	r7, [pc, #440]	; (8364 <loop+0x113c>)
    81aa:	f00f f98d 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    81ae:	a909      	add	r1, sp, #36	; 0x24
    81b0:	4864      	ldr	r0, [pc, #400]	; (8344 <loop+0x111c>)
    81b2:	f012 fd4d 	bl	1ac50 <Print::print(String const&)>
    81b6:	4863      	ldr	r0, [pc, #396]	; (8344 <loop+0x111c>)
    81b8:	f012 fd7c 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intBaudRate[intBaudPtr] + str3);  
    81bc:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    81c0:	4860      	ldr	r0, [pc, #384]	; (8344 <loop+0x111c>)
    81c2:	f00f f98d 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    81c6:	2203      	movs	r2, #3
    81c8:	485e      	ldr	r0, [pc, #376]	; (8344 <loop+0x111c>)
    81ca:	4611      	mov	r1, r2
    81cc:	f00f f97c 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    81d0:	a90c      	add	r1, sp, #48	; 0x30
    81d2:	a815      	add	r0, sp, #84	; 0x54
    81d4:	f012 fe9c 	bl	1af10 <String::String(String const&)>
    81d8:	4b63      	ldr	r3, [pc, #396]	; (8368 <loop+0x1140>)
    81da:	a815      	add	r0, sp, #84	; 0x54
    81dc:	681a      	ldr	r2, [r3, #0]
    81de:	4b63      	ldr	r3, [pc, #396]	; (836c <loop+0x1144>)
    81e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    81e4:	f012 ffb4 	bl	1b150 <operator+(StringSumHelper const&, int)>
    81e8:	a90f      	add	r1, sp, #60	; 0x3c
    81ea:	f012 ff9b 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    81ee:	4601      	mov	r1, r0
    81f0:	4854      	ldr	r0, [pc, #336]	; (8344 <loop+0x111c>)
    81f2:	f012 fd2d 	bl	1ac50 <Print::print(String const&)>
    81f6:	4853      	ldr	r0, [pc, #332]	; (8344 <loop+0x111c>)
    81f8:	f012 fd5c 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    81fc:	a815      	add	r0, sp, #84	; 0x54
    81fe:	f012 fea3 	bl	1af48 <String::~String()>
		uint32_t millis_begin = systick_millis_count;
    8202:	f8db 6000 	ldr.w	r6, [fp]
		yield();
    8206:	f015 f9e7 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    820a:	782b      	ldrb	r3, [r5, #0]
    820c:	2b00      	cmp	r3, #0
    820e:	f001 84bd 	beq.w	9b8c <loop+0x2964>
    8212:	783b      	ldrb	r3, [r7, #0]
    8214:	07db      	lsls	r3, r3, #31
    8216:	f141 84b9 	bpl.w	9b8c <loop+0x2964>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    821a:	4a55      	ldr	r2, [pc, #340]	; (8370 <loop+0x1148>)
    821c:	f8db 3000 	ldr.w	r3, [fp]
    8220:	6812      	ldr	r2, [r2, #0]
    8222:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    8224:	2b0e      	cmp	r3, #14
    8226:	f241 84b1 	bls.w	9b8c <loop+0x2964>
      if (intMode == 17)//TEST3K
    822a:	6825      	ldr	r5, [r4, #0]
    822c:	2d11      	cmp	r5, #17
    822e:	f47f a8b4 	bne.w	739a <loop+0x172>
          blnTestMode3K = true; blnTestMode6K = false; intTestFreqHz = 1500; intTargetSN = 40;
    8232:	2600      	movs	r6, #0
    8234:	4a4f      	ldr	r2, [pc, #316]	; (8374 <loop+0x114c>)
		multiplier = n * 65536.0f;
    8236:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    823a:	2501      	movs	r5, #1
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    823c:	6256      	str	r6, [r2, #36]	; 0x24
          if (!(intBandwidth == 3000)); intBandwidth = 3000; SetFilterBandwidth(intBandwidth);
    823e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    8242:	6191      	str	r1, [r2, #24]
          blnTestMode3K = true; blnTestMode6K = false; intTestFreqHz = 1500; intTargetSN = 40;
    8244:	4f4c      	ldr	r7, [pc, #304]	; (8378 <loop+0x1150>)
    8246:	4b4d      	ldr	r3, [pc, #308]	; (837c <loop+0x1154>)
    8248:	e9c2 6607 	strd	r6, r6, [r2, #28]
    824c:	4a4c      	ldr	r2, [pc, #304]	; (8380 <loop+0x1158>)
    824e:	619e      	str	r6, [r3, #24]
    8250:	7015      	strb	r5, [r2, #0]
    8252:	2528      	movs	r5, #40	; 0x28
    8254:	4a4b      	ldr	r2, [pc, #300]	; (8384 <loop+0x115c>)
    8256:	7016      	strb	r6, [r2, #0]
    8258:	f240 52dc 	movw	r2, #1500	; 0x5dc
    825c:	603a      	str	r2, [r7, #0]
    825e:	4a4a      	ldr	r2, [pc, #296]	; (8388 <loop+0x1160>)
    8260:	6015      	str	r5, [r2, #0]
		multiplier = n * 65536.0f;
    8262:	4a4a      	ldr	r2, [pc, #296]	; (838c <loop+0x1164>)
          if (!(intBandwidth == 3000)); intBandwidth = 3000; SetFilterBandwidth(intBandwidth);
    8264:	4d3a      	ldr	r5, [pc, #232]	; (8350 <loop+0x1128>)
    8266:	6191      	str	r1, [r2, #24]
    8268:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    826c:	4a48      	ldr	r2, [pc, #288]	; (8390 <loop+0x1168>)
    826e:	6028      	str	r0, [r5, #0]
    8270:	6191      	str	r1, [r2, #24]
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    8272:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8276:	e9c3 6608 	strd	r6, r6, [r3, #32]
    827a:	61da      	str	r2, [r3, #28]
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
    827c:	f7f7 ff54 	bl	128 <SetFilterBandwidth(int) [clone .part.0]>
          InputTestWaveform.frequency (intTestFreqHz); InputTestWaveform.amplitude(fltCalTestLevel);
    8280:	edd7 7a00 	vldr	s15, [r7]
		magnitude = n * 65536.0f;
    8284:	4b43      	ldr	r3, [pc, #268]	; (8394 <loop+0x116c>)
    8286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    828a:	621e      	str	r6, [r3, #32]
		if (freq < 0.0f) freq = 0.0;
    828c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    8290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8294:	d409      	bmi.n	82aa <loop+0x1082>
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.0f) freq = AUDIO_SAMPLE_RATE_EXACT/2.0f;
    8296:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8398 <loop+0x1170>
    829a:	eef4 7ac7 	vcmpe.f32	s15, s14
    829e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    82a2:	f342 80a1 	ble.w	a3e8 <loop+0x31c0>
    82a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
      if (intMode == 18)//TEST6K
    82aa:	6825      	ldr	r5, [r4, #0]
		magnitude = n * 65536.0f;
    82ac:	f641 5339 	movw	r3, #7481	; 0x1d39
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    82b0:	4a3a      	ldr	r2, [pc, #232]	; (839c <loop+0x1174>)
    82b2:	2d12      	cmp	r5, #18
    82b4:	61d6      	str	r6, [r2, #28]
		magnitude = n * 65536.0f;
    82b6:	6213      	str	r3, [r2, #32]
    82b8:	f47f a872 	bne.w	73a0 <loop+0x178>
          blnTestMode6K = true; blnTestMode3K = false; intTestFreqHz = 3000; intTargetSN = 40;
    82bc:	2600      	movs	r6, #0
    82be:	4a2d      	ldr	r2, [pc, #180]	; (8374 <loop+0x114c>)
		multiplier = n * 65536.0f;
    82c0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    82c4:	4f2c      	ldr	r7, [pc, #176]	; (8378 <loop+0x1150>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    82c6:	6256      	str	r6, [r2, #36]	; 0x24
          if (!(intBandwidth == 6000)); intBandwidth = 6000; SetFilterBandwidth(intBandwidth);
    82c8:	f241 7070 	movw	r0, #6000	; 0x1770
    82cc:	6191      	str	r1, [r2, #24]
    82ce:	4b2b      	ldr	r3, [pc, #172]	; (837c <loop+0x1154>)
    82d0:	e9c2 6607 	strd	r6, r6, [r2, #28]
          blnTestMode6K = true; blnTestMode3K = false; intTestFreqHz = 3000; intTargetSN = 40;
    82d4:	4a2b      	ldr	r2, [pc, #172]	; (8384 <loop+0x115c>)
    82d6:	619e      	str	r6, [r3, #24]
    82d8:	4615      	mov	r5, r2
    82da:	2201      	movs	r2, #1
    82dc:	702a      	strb	r2, [r5, #0]
    82de:	2528      	movs	r5, #40	; 0x28
    82e0:	4a27      	ldr	r2, [pc, #156]	; (8380 <loop+0x1158>)
    82e2:	7016      	strb	r6, [r2, #0]
    82e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    82e8:	603a      	str	r2, [r7, #0]
    82ea:	4a27      	ldr	r2, [pc, #156]	; (8388 <loop+0x1160>)
    82ec:	6015      	str	r5, [r2, #0]
		multiplier = n * 65536.0f;
    82ee:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    82f2:	4a26      	ldr	r2, [pc, #152]	; (838c <loop+0x1164>)
    82f4:	6195      	str	r5, [r2, #24]
    82f6:	4a26      	ldr	r2, [pc, #152]	; (8390 <loop+0x1168>)
          if (!(intBandwidth == 6000)); intBandwidth = 6000; SetFilterBandwidth(intBandwidth);
    82f8:	4d15      	ldr	r5, [pc, #84]	; (8350 <loop+0x1128>)
    82fa:	6191      	str	r1, [r2, #24]
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    82fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    8300:	6028      	str	r0, [r5, #0]
    8302:	61da      	str	r2, [r3, #28]
    8304:	e9c3 6608 	strd	r6, r6, [r3, #32]
    8308:	4b22      	ldr	r3, [pc, #136]	; (8394 <loop+0x116c>)
    830a:	621e      	str	r6, [r3, #32]
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
    830c:	f7f7 ff0c 	bl	128 <SetFilterBandwidth(int) [clone .part.0]>
          InputTestWaveform.frequency (intTestFreqHz); InputTestWaveform.amplitude(fltCalTestLevel);
    8310:	edd7 7a00 	vldr	s15, [r7]
    8314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if (freq < 0.0f) freq = 0.0;
    8318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    831c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8320:	d440      	bmi.n	83a4 <loop+0x117c>
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.0f) freq = AUDIO_SAMPLE_RATE_EXACT/2.0f;
    8322:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8398 <loop+0x1170>
    8326:	eef4 7ac7 	vcmpe.f32	s15, s14
    832a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    832e:	f342 8065 	ble.w	a3fc <loop+0x31d4>
    8332:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    8336:	e035      	b.n	83a4 <loop+0x117c>
    8338:	200038c0 	.word	0x200038c0
    833c:	20005700 	.word	0x20005700
    8340:	2000389c 	.word	0x2000389c
    8344:	2001355c 	.word	0x2001355c
    8348:	20009a30 	.word	0x20009a30
    834c:	2000352c 	.word	0x2000352c
    8350:	20009a10 	.word	0x20009a10
    8354:	200034ec 	.word	0x200034ec
    8358:	200054d8 	.word	0x200054d8
    835c:	200054ec 	.word	0x200054ec
    8360:	200136f9 	.word	0x200136f9
    8364:	200136f8 	.word	0x200136f8
    8368:	20009a14 	.word	0x20009a14
    836c:	20003728 	.word	0x20003728
    8370:	20013690 	.word	0x20013690
    8374:	20012db0 	.word	0x20012db0
    8378:	20009a5c 	.word	0x20009a5c
    837c:	20012d08 	.word	0x20012d08
    8380:	200136ed 	.word	0x200136ed
    8384:	200136ee 	.word	0x200136ee
    8388:	20009a58 	.word	0x20009a58
    838c:	2000cad0 	.word	0x2000cad0
    8390:	2000caf0 	.word	0x2000caf0
    8394:	200134f0 	.word	0x200134f0
    8398:	46ac4400 	.word	0x46ac4400
    839c:	2000a888 	.word	0x2000a888
    83a0:	20013554 	.word	0x20013554
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    83a4:	4a03      	ldr	r2, [pc, #12]	; (83b4 <loop+0x118c>)
		magnitude = n * 65536.0f;
    83a6:	f641 5339 	movw	r3, #7481	; 0x1d39
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    83aa:	61d6      	str	r6, [r2, #28]
		magnitude = n * 65536.0f;
    83ac:	6213      	str	r3, [r2, #32]
	}
    83ae:	f7fe bff7 	b.w	73a0 <loop+0x178>
    83b2:	bf00      	nop
    83b4:	2000a888 	.word	0x2000a888
          intCountrmsMixIQ1234Out =0.0; 
    83b8:	4bb8      	ldr	r3, [pc, #736]	; (869c <loop+0x1474>)
          SetIQTapDelays(intMode);
    83ba:	4628      	mov	r0, r5
          intCountrmsMixIQ1234Out =0.0; 
    83bc:	2500      	movs	r5, #0
    83be:	601d      	str	r5, [r3, #0]
          SetIQTapDelays(intMode);
    83c0:	f7fa fd28 	bl	2e14 <SetIQTapDelays(int)>
          if (intMultipaths == 2)
    83c4:	4bb6      	ldr	r3, [pc, #728]	; (86a0 <loop+0x1478>)
    83c6:	681b      	ldr	r3, [r3, #0]
    83c8:	2b02      	cmp	r3, #2
    83ca:	f002 8004 	beq.w	a3d6 <loop+0x31ae>
           if (intMultipaths == 4)
    83ce:	2b04      	cmp	r3, #4
    83d0:	f001 839b 	beq.w	9b0a <loop+0x28e2>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    83d4:	2115      	movs	r1, #21
    83d6:	48b3      	ldr	r0, [pc, #716]	; (86a4 <loop+0x147c>)
    83d8:	f015 f880 	bl	1d4dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    83dc:	6821      	ldr	r1, [r4, #0]
    83de:	48b2      	ldr	r0, [pc, #712]	; (86a8 <loop+0x1480>)
    83e0:	f012 fc5c 	bl	1ac9c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    83e4:	48b0      	ldr	r0, [pc, #704]	; (86a8 <loop+0x1480>)
    83e6:	f012 fc65 	bl	1acb4 <Print::println()>
          str1 = chrModes[intMode];  str2 = "    S:N= "; str3 = " dB";
    83ea:	4bb0      	ldr	r3, [pc, #704]	; (86ac <loop+0x1484>)
    83ec:	6822      	ldr	r2, [r4, #0]
    83ee:	a809      	add	r0, sp, #36	; 0x24
    83f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    83f4:	f012 fe34 	bl	1b060 <String::operator=(char const*)>
    83f8:	49ad      	ldr	r1, [pc, #692]	; (86b0 <loop+0x1488>)
    83fa:	a80c      	add	r0, sp, #48	; 0x30
    83fc:	f012 fe30 	bl	1b060 <String::operator=(char const*)>
    8400:	49ac      	ldr	r1, [pc, #688]	; (86b4 <loop+0x148c>)
    8402:	a80f      	add	r0, sp, #60	; 0x3c
    8404:	f012 fe2c 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    8408:	f240 71ff 	movw	r1, #2047	; 0x7ff
    840c:	48aa      	ldr	r0, [pc, #680]	; (86b8 <loop+0x1490>)
    840e:	f00f f867 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8412:	2203      	movs	r2, #3
    8414:	48a8      	ldr	r0, [pc, #672]	; (86b8 <loop+0x1490>)
    8416:	4611      	mov	r1, r2
    8418:	f00f f856 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
    841c:	a909      	add	r1, sp, #36	; 0x24
    841e:	48a6      	ldr	r0, [pc, #664]	; (86b8 <loop+0x1490>)
    8420:	f012 fc16 	bl	1ac50 <Print::print(String const&)>
    8424:	48a4      	ldr	r0, [pc, #656]	; (86b8 <loop+0x1490>)
    8426:	f012 fc45 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intTargetSN + str3);
    842a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    842e:	48a2      	ldr	r0, [pc, #648]	; (86b8 <loop+0x1490>)
    8430:	f00f f856 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8434:	2203      	movs	r2, #3
    8436:	48a0      	ldr	r0, [pc, #640]	; (86b8 <loop+0x1490>)
    8438:	4611      	mov	r1, r2
    843a:	f00f f845 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    843e:	a90c      	add	r1, sp, #48	; 0x30
    8440:	a815      	add	r0, sp, #84	; 0x54
    8442:	f012 fd65 	bl	1af10 <String::String(String const&)>
    8446:	4b9d      	ldr	r3, [pc, #628]	; (86bc <loop+0x1494>)
    8448:	a815      	add	r0, sp, #84	; 0x54
    844a:	6819      	ldr	r1, [r3, #0]
    844c:	f012 fe80 	bl	1b150 <operator+(StringSumHelper const&, int)>
    8450:	a90f      	add	r1, sp, #60	; 0x3c
    8452:	f012 fe67 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    8456:	4601      	mov	r1, r0
    8458:	4897      	ldr	r0, [pc, #604]	; (86b8 <loop+0x1490>)
    845a:	f012 fbf9 	bl	1ac50 <Print::print(String const&)>
    845e:	4896      	ldr	r0, [pc, #600]	; (86b8 <loop+0x1490>)
    8460:	f012 fc28 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    8464:	a815      	add	r0, sp, #84	; 0x54
    8466:	f012 fd6f 	bl	1af48 <String::~String()>
          if (( intTuneOffset != 0) || (intFMDevPtr !=0))
    846a:	4b95      	ldr	r3, [pc, #596]	; (86c0 <loop+0x1498>)
    846c:	4a95      	ldr	r2, [pc, #596]	; (86c4 <loop+0x149c>)
    846e:	681b      	ldr	r3, [r3, #0]
    8470:	6812      	ldr	r2, [r2, #0]
    8472:	4313      	orrs	r3, r2
    8474:	d011      	beq.n	849a <loop+0x1272>
              tft.setTextColor(ST7735_YELLOW);  tft.setTextSize(2);  tft.println("    (no FM or Offset!)");
    8476:	f64f 71e0 	movw	r1, #65504	; 0xffe0
    847a:	488f      	ldr	r0, [pc, #572]	; (86b8 <loop+0x1490>)
    847c:	f00f f830 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8480:	2202      	movs	r2, #2
    8482:	488d      	ldr	r0, [pc, #564]	; (86b8 <loop+0x1490>)
    8484:	4611      	mov	r1, r2
    8486:	f00f f81f 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    848a:	2216      	movs	r2, #22
    848c:	498e      	ldr	r1, [pc, #568]	; (86c8 <loop+0x14a0>)
    848e:	488a      	ldr	r0, [pc, #552]	; (86b8 <loop+0x1490>)
    8490:	f011 fb22 	bl	19ad8 <ST7735_t3::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    8494:	4888      	ldr	r0, [pc, #544]	; (86b8 <loop+0x1490>)
    8496:	f012 fc0d 	bl	1acb4 <Print::println()>
      if (intMode == 5)//MULTIPATHS
    849a:	6825      	ldr	r5, [r4, #0]
    849c:	2d05      	cmp	r5, #5
    849e:	f47e af5b 	bne.w	7358 <loop+0x130>
          str1 = chrModes[intMode];  str2 = "    "; str3 = "";
    84a2:	498a      	ldr	r1, [pc, #552]	; (86cc <loop+0x14a4>)
    84a4:	a809      	add	r0, sp, #36	; 0x24
    84a6:	f012 fddb 	bl	1b060 <String::operator=(char const*)>
    84aa:	4989      	ldr	r1, [pc, #548]	; (86d0 <loop+0x14a8>)
    84ac:	a80c      	add	r0, sp, #48	; 0x30
    84ae:	f012 fdd7 	bl	1b060 <String::operator=(char const*)>
    84b2:	4988      	ldr	r1, [pc, #544]	; (86d4 <loop+0x14ac>)
    84b4:	a80f      	add	r0, sp, #60	; 0x3c
    84b6:	f012 fdd3 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    84ba:	f240 71ff 	movw	r1, #2047	; 0x7ff
    84be:	487e      	ldr	r0, [pc, #504]	; (86b8 <loop+0x1490>)
    84c0:	f00f f80e 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    84c4:	2203      	movs	r2, #3
    84c6:	487c      	ldr	r0, [pc, #496]	; (86b8 <loop+0x1490>)
    84c8:	4611      	mov	r1, r2
    84ca:	f00e fffd 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
    84ce:	a909      	add	r1, sp, #36	; 0x24
    84d0:	4879      	ldr	r0, [pc, #484]	; (86b8 <loop+0x1490>)
    84d2:	f012 fbbd 	bl	1ac50 <Print::print(String const&)>
    84d6:	4878      	ldr	r0, [pc, #480]	; (86b8 <loop+0x1490>)
    84d8:	f012 fbec 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intMultipaths);
    84dc:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    84e0:	4875      	ldr	r0, [pc, #468]	; (86b8 <loop+0x1490>)
    84e2:	f00e fffd 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    84e6:	2203      	movs	r2, #3
    84e8:	4873      	ldr	r0, [pc, #460]	; (86b8 <loop+0x1490>)
    84ea:	4611      	mov	r1, r2
    84ec:	f00e ffec 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    84f0:	a90c      	add	r1, sp, #48	; 0x30
    84f2:	a815      	add	r0, sp, #84	; 0x54
    84f4:	f012 fd0c 	bl	1af10 <String::String(String const&)>
    84f8:	4b69      	ldr	r3, [pc, #420]	; (86a0 <loop+0x1478>)
    84fa:	a815      	add	r0, sp, #84	; 0x54
    84fc:	6819      	ldr	r1, [r3, #0]
    84fe:	f012 fe27 	bl	1b150 <operator+(StringSumHelper const&, int)>
    8502:	4601      	mov	r1, r0
    8504:	486c      	ldr	r0, [pc, #432]	; (86b8 <loop+0x1490>)
    8506:	f012 fba3 	bl	1ac50 <Print::print(String const&)>
    850a:	486b      	ldr	r0, [pc, #428]	; (86b8 <loop+0x1490>)
    850c:	f012 fbd2 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    8510:	a815      	add	r0, sp, #84	; 0x54
    8512:	f012 fd19 	bl	1af48 <String::~String()>
      if (intMode == 6) //FADE Depth
    8516:	6825      	ldr	r5, [r4, #0]
    8518:	2d06      	cmp	r5, #6
    851a:	f47e af20 	bne.w	735e <loop+0x136>
          str1 = chrModes[intMode];  str2 = "    "; str3 = " dB";
    851e:	496e      	ldr	r1, [pc, #440]	; (86d8 <loop+0x14b0>)
    8520:	a809      	add	r0, sp, #36	; 0x24
    8522:	f012 fd9d 	bl	1b060 <String::operator=(char const*)>
    8526:	496a      	ldr	r1, [pc, #424]	; (86d0 <loop+0x14a8>)
    8528:	a80c      	add	r0, sp, #48	; 0x30
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intFadeDepth_dB + str3);
    852a:	4d6c      	ldr	r5, [pc, #432]	; (86dc <loop+0x14b4>)
          str1 = chrModes[intMode];  str2 = "    "; str3 = " dB";
    852c:	f012 fd98 	bl	1b060 <String::operator=(char const*)>
    8530:	4960      	ldr	r1, [pc, #384]	; (86b4 <loop+0x148c>)
    8532:	a80f      	add	r0, sp, #60	; 0x3c
    8534:	f012 fd94 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    8538:	f240 71ff 	movw	r1, #2047	; 0x7ff
    853c:	485e      	ldr	r0, [pc, #376]	; (86b8 <loop+0x1490>)
    853e:	f00e ffcf 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8542:	2203      	movs	r2, #3
    8544:	485c      	ldr	r0, [pc, #368]	; (86b8 <loop+0x1490>)
    8546:	4611      	mov	r1, r2
    8548:	f00e ffbe 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    854c:	a909      	add	r1, sp, #36	; 0x24
    854e:	485a      	ldr	r0, [pc, #360]	; (86b8 <loop+0x1490>)
    8550:	f012 fb7e 	bl	1ac50 <Print::print(String const&)>
    8554:	4858      	ldr	r0, [pc, #352]	; (86b8 <loop+0x1490>)
    8556:	f012 fbad 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intFadeDepth_dB + str3);
    855a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    855e:	4856      	ldr	r0, [pc, #344]	; (86b8 <loop+0x1490>)
    8560:	f00e ffbe 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8564:	2203      	movs	r2, #3
    8566:	4854      	ldr	r0, [pc, #336]	; (86b8 <loop+0x1490>)
    8568:	4611      	mov	r1, r2
    856a:	9505      	str	r5, [sp, #20]
    856c:	f00e ffac 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    8570:	a90c      	add	r1, sp, #48	; 0x30
    8572:	a815      	add	r0, sp, #84	; 0x54
    8574:	f012 fccc 	bl	1af10 <String::String(String const&)>
    8578:	6829      	ldr	r1, [r5, #0]
    857a:	a815      	add	r0, sp, #84	; 0x54
    857c:	f012 fde8 	bl	1b150 <operator+(StringSumHelper const&, int)>
    8580:	a90f      	add	r1, sp, #60	; 0x3c
    8582:	f012 fdcf 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    8586:	4601      	mov	r1, r0
    8588:	484b      	ldr	r0, [pc, #300]	; (86b8 <loop+0x1490>)
    858a:	f012 fb61 	bl	1ac50 <Print::print(String const&)>
    858e:	484a      	ldr	r0, [pc, #296]	; (86b8 <loop+0x1490>)
    8590:	f012 fb90 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    8594:	a815      	add	r0, sp, #84	; 0x54
    8596:	f012 fcd7 	bl	1af48 <String::~String()>
      if (intMode == 7) // FADE Freq
    859a:	6825      	ldr	r5, [r4, #0]
    859c:	2d07      	cmp	r5, #7
    859e:	f47e aee3 	bne.w	7368 <loop+0x140>
          str1 = chrModes[intMode];  str2 = "    "; str3 = " Hz";
    85a2:	494f      	ldr	r1, [pc, #316]	; (86e0 <loop+0x14b8>)
    85a4:	a809      	add	r0, sp, #36	; 0x24
    85a6:	f012 fd5b 	bl	1b060 <String::operator=(char const*)>
    85aa:	4949      	ldr	r1, [pc, #292]	; (86d0 <loop+0x14a8>)
    85ac:	a80c      	add	r0, sp, #48	; 0x30
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(10 * fltLogs[intFadeRatePtr]) + str3);
    85ae:	4d4d      	ldr	r5, [pc, #308]	; (86e4 <loop+0x14bc>)
          str1 = chrModes[intMode];  str2 = "    "; str3 = " Hz";
    85b0:	f012 fd56 	bl	1b060 <String::operator=(char const*)>
    85b4:	494c      	ldr	r1, [pc, #304]	; (86e8 <loop+0x14c0>)
    85b6:	a80f      	add	r0, sp, #60	; 0x3c
    85b8:	f012 fd52 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    85bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
    85c0:	483d      	ldr	r0, [pc, #244]	; (86b8 <loop+0x1490>)
    85c2:	f00e ff8d 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    85c6:	2203      	movs	r2, #3
    85c8:	483b      	ldr	r0, [pc, #236]	; (86b8 <loop+0x1490>)
    85ca:	4611      	mov	r1, r2
    85cc:	f00e ff7c 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    85d0:	a909      	add	r1, sp, #36	; 0x24
    85d2:	4839      	ldr	r0, [pc, #228]	; (86b8 <loop+0x1490>)
    85d4:	f012 fb3c 	bl	1ac50 <Print::print(String const&)>
    85d8:	4837      	ldr	r0, [pc, #220]	; (86b8 <loop+0x1490>)
    85da:	f012 fb6b 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(10 * fltLogs[intFadeRatePtr]) + str3);
    85de:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    85e2:	4835      	ldr	r0, [pc, #212]	; (86b8 <loop+0x1490>)
    85e4:	f00e ff7c 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    85e8:	2203      	movs	r2, #3
    85ea:	4833      	ldr	r0, [pc, #204]	; (86b8 <loop+0x1490>)
    85ec:	4611      	mov	r1, r2
    85ee:	f00e ff6b 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    85f2:	a90c      	add	r1, sp, #48	; 0x30
    85f4:	a815      	add	r0, sp, #84	; 0x54
    85f6:	f012 fc8b 	bl	1af10 <String::String(String const&)>
    85fa:	4b3c      	ldr	r3, [pc, #240]	; (86ec <loop+0x14c4>)
    85fc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    8600:	2102      	movs	r1, #2
    8602:	681b      	ldr	r3, [r3, #0]
    8604:	a812      	add	r0, sp, #72	; 0x48
    8606:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    860a:	ed93 0a00 	vldr	s0, [r3]
    860e:	ee20 0a27 	vmul.f32	s0, s0, s15
    8612:	f012 fceb 	bl	1afec <String::String(float, unsigned char)>
    8616:	a912      	add	r1, sp, #72	; 0x48
    8618:	a815      	add	r0, sp, #84	; 0x54
    861a:	f012 fd83 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    861e:	a90f      	add	r1, sp, #60	; 0x3c
    8620:	f012 fd80 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    8624:	4601      	mov	r1, r0
    8626:	4824      	ldr	r0, [pc, #144]	; (86b8 <loop+0x1490>)
    8628:	f012 fb12 	bl	1ac50 <Print::print(String const&)>
    862c:	4822      	ldr	r0, [pc, #136]	; (86b8 <loop+0x1490>)
    862e:	f012 fb41 	bl	1acb4 <Print::println()>
    8632:	a812      	add	r0, sp, #72	; 0x48
    8634:	f012 fc88 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    8638:	a815      	add	r0, sp, #84	; 0x54
    863a:	f012 fc85 	bl	1af48 <String::~String()>
      if (intMode == 8) //Offset
    863e:	6825      	ldr	r5, [r4, #0]
    8640:	2d08      	cmp	r5, #8
    8642:	f47e ae94 	bne.w	736e <loop+0x146>
          str1 = chrModes[intMode];  str2 = "    "; str3 = " Hz";
    8646:	492a      	ldr	r1, [pc, #168]	; (86f0 <loop+0x14c8>)
    8648:	a809      	add	r0, sp, #36	; 0x24
    864a:	f012 fd09 	bl	1b060 <String::operator=(char const*)>
    864e:	4920      	ldr	r1, [pc, #128]	; (86d0 <loop+0x14a8>)
    8650:	a80c      	add	r0, sp, #48	; 0x30
    8652:	f012 fd05 	bl	1b060 <String::operator=(char const*)>
    8656:	4924      	ldr	r1, [pc, #144]	; (86e8 <loop+0x14c0>)
    8658:	a80f      	add	r0, sp, #60	; 0x3c
    865a:	f012 fd01 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    865e:	f240 71ff 	movw	r1, #2047	; 0x7ff
    8662:	4815      	ldr	r0, [pc, #84]	; (86b8 <loop+0x1490>)
    8664:	f00e ff3c 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8668:	2203      	movs	r2, #3
    866a:	4813      	ldr	r0, [pc, #76]	; (86b8 <loop+0x1490>)
    866c:	4611      	mov	r1, r2
    866e:	f00e ff2b 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    8672:	a909      	add	r1, sp, #36	; 0x24
    8674:	4810      	ldr	r0, [pc, #64]	; (86b8 <loop+0x1490>)
    8676:	f012 faeb 	bl	1ac50 <Print::print(String const&)>
    867a:	480f      	ldr	r0, [pc, #60]	; (86b8 <loop+0x1490>)
    867c:	f012 fb1a 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intTuneOffset + str3);
    8680:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    8684:	480c      	ldr	r0, [pc, #48]	; (86b8 <loop+0x1490>)
    8686:	f00e ff2b 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    868a:	2203      	movs	r2, #3
    868c:	480a      	ldr	r0, [pc, #40]	; (86b8 <loop+0x1490>)
    868e:	4611      	mov	r1, r2
    8690:	f00e ff1a 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    8694:	a90c      	add	r1, sp, #48	; 0x30
    8696:	a815      	add	r0, sp, #84	; 0x54
    8698:	e02c      	b.n	86f4 <loop+0x14cc>
    869a:	bf00      	nop
    869c:	20012c98 	.word	0x20012c98
    86a0:	20009a48 	.word	0x20009a48
    86a4:	20005494 	.word	0x20005494
    86a8:	20008ba0 	.word	0x20008ba0
    86ac:	200038c0 	.word	0x200038c0
    86b0:	200034ac 	.word	0x200034ac
    86b4:	200034b8 	.word	0x200034b8
    86b8:	2001355c 	.word	0x2001355c
    86bc:	20009a58 	.word	0x20009a58
    86c0:	20012cbc 	.word	0x20012cbc
    86c4:	20009a24 	.word	0x20009a24
    86c8:	200054ac 	.word	0x200054ac
    86cc:	200054c4 	.word	0x200054c4
    86d0:	20005700 	.word	0x20005700
    86d4:	200039f8 	.word	0x200039f8
    86d8:	200034bc 	.word	0x200034bc
    86dc:	20012cac 	.word	0x20012cac
    86e0:	200034d8 	.word	0x200034d8
    86e4:	2000389c 	.word	0x2000389c
    86e8:	200034ec 	.word	0x200034ec
    86ec:	20009a2c 	.word	0x20009a2c
    86f0:	200034f0 	.word	0x200034f0
    86f4:	f012 fc0c 	bl	1af10 <String::String(String const&)>
    86f8:	4b72      	ldr	r3, [pc, #456]	; (88c4 <loop+0x169c>)
    86fa:	a815      	add	r0, sp, #84	; 0x54
    86fc:	6819      	ldr	r1, [r3, #0]
    86fe:	f012 fd27 	bl	1b150 <operator+(StringSumHelper const&, int)>
    8702:	a90f      	add	r1, sp, #60	; 0x3c
    8704:	f012 fd0e 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    8708:	4601      	mov	r1, r0
    870a:	486f      	ldr	r0, [pc, #444]	; (88c8 <loop+0x16a0>)
    870c:	f012 faa0 	bl	1ac50 <Print::print(String const&)>
    8710:	486d      	ldr	r0, [pc, #436]	; (88c8 <loop+0x16a0>)
    8712:	f012 facf 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    8716:	a815      	add	r0, sp, #84	; 0x54
    8718:	f012 fc16 	bl	1af48 <String::~String()>
      if (intMode == 9) //FM Deviation
    871c:	6825      	ldr	r5, [r4, #0]
    871e:	2d09      	cmp	r5, #9
    8720:	f47e ae28 	bne.w	7374 <loop+0x14c>
          str1 = chrModes[intMode];  str2 = "    "; str3 = " Hz";
    8724:	4969      	ldr	r1, [pc, #420]	; (88cc <loop+0x16a4>)
    8726:	a809      	add	r0, sp, #36	; 0x24
    8728:	f012 fc9a 	bl	1b060 <String::operator=(char const*)>
    872c:	4968      	ldr	r1, [pc, #416]	; (88d0 <loop+0x16a8>)
    872e:	a80c      	add	r0, sp, #48	; 0x30
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(100 * fltLogs[intFMDevPtr]) + str3);
    8730:	4d68      	ldr	r5, [pc, #416]	; (88d4 <loop+0x16ac>)
          str1 = chrModes[intMode];  str2 = "    "; str3 = " Hz";
    8732:	f012 fc95 	bl	1b060 <String::operator=(char const*)>
    8736:	4968      	ldr	r1, [pc, #416]	; (88d8 <loop+0x16b0>)
    8738:	a80f      	add	r0, sp, #60	; 0x3c
    873a:	f012 fc91 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    873e:	f240 71ff 	movw	r1, #2047	; 0x7ff
    8742:	4861      	ldr	r0, [pc, #388]	; (88c8 <loop+0x16a0>)
    8744:	f00e fecc 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8748:	2203      	movs	r2, #3
    874a:	485f      	ldr	r0, [pc, #380]	; (88c8 <loop+0x16a0>)
    874c:	4611      	mov	r1, r2
    874e:	f00e febb 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    8752:	a909      	add	r1, sp, #36	; 0x24
    8754:	485c      	ldr	r0, [pc, #368]	; (88c8 <loop+0x16a0>)
    8756:	f012 fa7b 	bl	1ac50 <Print::print(String const&)>
    875a:	485b      	ldr	r0, [pc, #364]	; (88c8 <loop+0x16a0>)
    875c:	f012 faaa 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(100 * fltLogs[intFMDevPtr]) + str3);
    8760:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    8764:	4858      	ldr	r0, [pc, #352]	; (88c8 <loop+0x16a0>)
    8766:	f00e febb 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    876a:	2203      	movs	r2, #3
    876c:	4856      	ldr	r0, [pc, #344]	; (88c8 <loop+0x16a0>)
    876e:	4611      	mov	r1, r2
    8770:	f00e feaa 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    8774:	a90c      	add	r1, sp, #48	; 0x30
    8776:	a815      	add	r0, sp, #84	; 0x54
    8778:	f012 fbca 	bl	1af10 <String::String(String const&)>
    877c:	4b57      	ldr	r3, [pc, #348]	; (88dc <loop+0x16b4>)
    877e:	eddf 7a58 	vldr	s15, [pc, #352]	; 88e0 <loop+0x16b8>
    8782:	2102      	movs	r1, #2
    8784:	681b      	ldr	r3, [r3, #0]
    8786:	a812      	add	r0, sp, #72	; 0x48
    8788:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    878c:	ed93 0a00 	vldr	s0, [r3]
    8790:	ee20 0a27 	vmul.f32	s0, s0, s15
    8794:	f012 fc2a 	bl	1afec <String::String(float, unsigned char)>
    8798:	a912      	add	r1, sp, #72	; 0x48
    879a:	a815      	add	r0, sp, #84	; 0x54
    879c:	f012 fcc2 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    87a0:	a90f      	add	r1, sp, #60	; 0x3c
    87a2:	f012 fcbf 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    87a6:	4601      	mov	r1, r0
    87a8:	4847      	ldr	r0, [pc, #284]	; (88c8 <loop+0x16a0>)
    87aa:	f012 fa51 	bl	1ac50 <Print::print(String const&)>
    87ae:	4846      	ldr	r0, [pc, #280]	; (88c8 <loop+0x16a0>)
    87b0:	f012 fa80 	bl	1acb4 <Print::println()>
    87b4:	a812      	add	r0, sp, #72	; 0x48
    87b6:	f012 fbc7 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    87ba:	a815      	add	r0, sp, #84	; 0x54
    87bc:	f012 fbc4 	bl	1af48 <String::~String()>
      if (intMode == 10) //FM Rate
    87c0:	6825      	ldr	r5, [r4, #0]
    87c2:	2d0a      	cmp	r5, #10
    87c4:	f47e add9 	bne.w	737a <loop+0x152>
          str1 = chrModes[intMode];  str2 = "    "; str3 = " Hz";
    87c8:	4946      	ldr	r1, [pc, #280]	; (88e4 <loop+0x16bc>)
    87ca:	a809      	add	r0, sp, #36	; 0x24
    87cc:	f012 fc48 	bl	1b060 <String::operator=(char const*)>
    87d0:	493f      	ldr	r1, [pc, #252]	; (88d0 <loop+0x16a8>)
    87d2:	a80c      	add	r0, sp, #48	; 0x30
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(10 * fltLogs[intFMRatePtr]) + str3);
    87d4:	4d3f      	ldr	r5, [pc, #252]	; (88d4 <loop+0x16ac>)
          str1 = chrModes[intMode];  str2 = "    "; str3 = " Hz";
    87d6:	f012 fc43 	bl	1b060 <String::operator=(char const*)>
    87da:	493f      	ldr	r1, [pc, #252]	; (88d8 <loop+0x16b0>)
    87dc:	a80f      	add	r0, sp, #60	; 0x3c
    87de:	f012 fc3f 	bl	1b060 <String::operator=(char const*)>
          tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    87e2:	f240 71ff 	movw	r1, #2047	; 0x7ff
    87e6:	4838      	ldr	r0, [pc, #224]	; (88c8 <loop+0x16a0>)
    87e8:	f00e fe7a 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    87ec:	2203      	movs	r2, #3
    87ee:	4836      	ldr	r0, [pc, #216]	; (88c8 <loop+0x16a0>)
    87f0:	4611      	mov	r1, r2
    87f2:	f00e fe69 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    87f6:	a909      	add	r1, sp, #36	; 0x24
    87f8:	4833      	ldr	r0, [pc, #204]	; (88c8 <loop+0x16a0>)
    87fa:	f012 fa29 	bl	1ac50 <Print::print(String const&)>
    87fe:	4832      	ldr	r0, [pc, #200]	; (88c8 <loop+0x16a0>)
    8800:	f012 fa58 	bl	1acb4 <Print::println()>
          tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(10 * fltLogs[intFMRatePtr]) + str3);
    8804:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    8808:	482f      	ldr	r0, [pc, #188]	; (88c8 <loop+0x16a0>)
    880a:	f00e fe69 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    880e:	2203      	movs	r2, #3
    8810:	482d      	ldr	r0, [pc, #180]	; (88c8 <loop+0x16a0>)
    8812:	4611      	mov	r1, r2
    8814:	f00e fe58 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    8818:	a90c      	add	r1, sp, #48	; 0x30
    881a:	a815      	add	r0, sp, #84	; 0x54
    881c:	f012 fb78 	bl	1af10 <String::String(String const&)>
    8820:	4b31      	ldr	r3, [pc, #196]	; (88e8 <loop+0x16c0>)
    8822:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    8826:	2102      	movs	r1, #2
    8828:	681b      	ldr	r3, [r3, #0]
    882a:	a812      	add	r0, sp, #72	; 0x48
    882c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8830:	ed93 0a00 	vldr	s0, [r3]
    8834:	ee20 0a27 	vmul.f32	s0, s0, s15
    8838:	f012 fbd8 	bl	1afec <String::String(float, unsigned char)>
    883c:	a912      	add	r1, sp, #72	; 0x48
    883e:	a815      	add	r0, sp, #84	; 0x54
    8840:	f012 fc70 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    8844:	a90f      	add	r1, sp, #60	; 0x3c
    8846:	f012 fc6d 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    884a:	4601      	mov	r1, r0
    884c:	481e      	ldr	r0, [pc, #120]	; (88c8 <loop+0x16a0>)
    884e:	f012 f9ff 	bl	1ac50 <Print::print(String const&)>
    8852:	481d      	ldr	r0, [pc, #116]	; (88c8 <loop+0x16a0>)
    8854:	f012 fa2e 	bl	1acb4 <Print::println()>
    8858:	a812      	add	r0, sp, #72	; 0x48
    885a:	f012 fb75 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    885e:	a815      	add	r0, sp, #84	; 0x54
    8860:	f012 fb72 	bl	1af48 <String::~String()>
      if ((intMode >= 11) && (intMode < 15)) //Ch1, Ch2, IN;Out
    8864:	6825      	ldr	r5, [r4, #0]
    8866:	f7fe bd88 	b.w	737a <loop+0x152>
			noInterrupts();
    886a:	b672      	cpsid	i
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    886c:	6858      	ldr	r0, [r3, #4]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    886e:	6819      	ldr	r1, [r3, #0]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    8870:	8b1a      	ldrh	r2, [r3, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    8872:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    8874:	6804      	ldr	r4, [r0, #0]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    8876:	0092      	lsls	r2, r2, #2
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    8878:	6898      	ldr	r0, [r3, #8]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    887a:	b292      	uxth	r2, r2
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    887c:	4001      	ands	r1, r0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    887e:	68d8      	ldr	r0, [r3, #12]
		arg->pstate  <<= 2;                       // save last 2 bit of state
    8880:	831a      	strh	r2, [r3, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    8882:	4204      	tst	r4, r0
    8884:	f000 81cf 	beq.w	8c26 <loop+0x19fe>
		if (p1val) arg->pstate |= 0x02;
    8888:	b109      	cbz	r1, 888e <loop+0x1666>
    888a:	f042 0202 	orr.w	r2, r2, #2
		if (p2val) arg->pstate |= 0x01;
    888e:	f042 0201 	orr.w	r2, r2, #1
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    8892:	f002 020f 	and.w	r2, r2, #15
		if (rot_enc_table[arg->pstate] )
    8896:	4915      	ldr	r1, [pc, #84]	; (88ec <loop+0x16c4>)
    8898:	5689      	ldrsb	r1, [r1, r2]
	    arg->pstate &= 0x0f;                     // save current 2 bit of state
    889a:	831a      	strh	r2, [r3, #24]
		if (rot_enc_table[arg->pstate] )
    889c:	2900      	cmp	r1, #0
    889e:	f43e acda 	beq.w	7256 <loop+0x2e>
		        arg->store <<= 4;               // Save last in MSB
    88a2:	8b59      	ldrh	r1, [r3, #26]
		        arg->store |= arg->pstate;      // Save current in LSB      
    88a4:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
    88a8:	b292      	uxth	r2, r2
    88aa:	835a      	strh	r2, [r3, #26]
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    88ac:	b2d2      	uxtb	r2, r2
    88ae:	2a2b      	cmp	r2, #43	; 0x2b
    88b0:	f001 87c8 	beq.w	a844 <loop+0x361c>
                if ((arg->store & 0xff) == 0x17) { arg->position++; return ; }                   
    88b4:	2a17      	cmp	r2, #23
    88b6:	695a      	ldr	r2, [r3, #20]
    88b8:	bf04      	itt	eq
    88ba:	3201      	addeq	r2, #1
    88bc:	615a      	streq	r2, [r3, #20]
    88be:	f7fe bccb 	b.w	7258 <loop+0x30>
    88c2:	bf00      	nop
    88c4:	20012cbc 	.word	0x20012cbc
    88c8:	2001355c 	.word	0x2001355c
    88cc:	20003504 	.word	0x20003504
    88d0:	20005700 	.word	0x20005700
    88d4:	2000389c 	.word	0x2000389c
    88d8:	200034ec 	.word	0x200034ec
    88dc:	20009a24 	.word	0x20009a24
    88e0:	42c80000 	.word	0x42c80000
    88e4:	20003518 	.word	0x20003518
    88e8:	20009a28 	.word	0x20009a28
    88ec:	20009448 	.word	0x20009448
    88f0:	46fffe00 	.word	0x46fffe00
    88f4:	447a0000 	.word	0x447a0000
		__disable_irq();
    88f8:	b672      	cpsid	i
		min_sample = 32767;
    88fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
		max_sample = -32768;
    88fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		int min = min_sample;
    8902:	f9b2 101e 	ldrsh.w	r1, [r2, #30]
		min_sample = 32767;
    8906:	83d3      	strh	r3, [r2, #30]
		int max = max_sample;
    8908:	f9b2 3020 	ldrsh.w	r3, [r2, #32]
		max_sample = -32768;
    890c:	8410      	strh	r0, [r2, #32]
		__enable_irq();
    890e:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    8910:	1a5b      	subs	r3, r3, r1
    8912:	ed1f 6a09 	vldr	s12, [pc, #-36]	; 88f0 <loop+0x16c8>
          fltppLPInputPk =  1000 * ppLPInput.readPeakToPeak();//Serial.println(fltppMixIQOutMeasAvg);
    8916:	ed5f 6a09 	vldr	s13, [pc, #-36]	; 88f4 <loop+0x16cc>
    891a:	ee07 3a90 	vmov	s15, r3
          if (fltppInputForDisplay < fltppLPInputPk) // calculate rolling averages (only used for display of Lvl) fltppInputForDisplay displayed every 200 ms below. 
    891e:	4eca      	ldr	r6, [pc, #808]	; (8c48 <loop+0x1a20>)
          fltppLPInputPk =  1000 * ppLPInput.readPeakToPeak();//Serial.println(fltppMixIQOutMeasAvg);
    8920:	4bca      	ldr	r3, [pc, #808]	; (8c4c <loop+0x1a24>)
    8922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
          if (fltppInputForDisplay < fltppLPInputPk) // calculate rolling averages (only used for display of Lvl) fltppInputForDisplay displayed every 200 ms below. 
    8926:	ed96 5a00 	vldr	s10, [r6]
    892a:	eec7 7a06 	vdiv.f32	s15, s14, s12
          fltppLPInputPk =  1000 * ppLPInput.readPeakToPeak();//Serial.println(fltppMixIQOutMeasAvg);
    892e:	ee67 7aa6 	vmul.f32	s15, s15, s13
          if (fltppInputForDisplay < fltppLPInputPk) // calculate rolling averages (only used for display of Lvl) fltppInputForDisplay displayed every 200 ms below. 
    8932:	eef4 7ac5 	vcmpe.f32	s15, s10
          fltppLPInputPk =  1000 * ppLPInput.readPeakToPeak();//Serial.println(fltppMixIQOutMeasAvg);
    8936:	edc3 7a00 	vstr	s15, [r3]
          if (fltppInputForDisplay < fltppLPInputPk) // calculate rolling averages (only used for display of Lvl) fltppInputForDisplay displayed every 200 ms below. 
    893a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    893e:	f300 8559 	bgt.w	93f4 <loop+0x21cc>
              fltppInputForDisplay = (.95 * fltppInputForDisplay) + .05 * fltppLPInputPk; // Slower decay :   
    8942:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    8946:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    894a:	ed9f 3bbb 	vldr	d3, [pc, #748]	; 8c38 <loop+0x1a10>
    894e:	ed9f 4bbc 	vldr	d4, [pc, #752]	; 8c40 <loop+0x1a18>
    8952:	ee26 6b03 	vmul.f64	d6, d6, d3
    8956:	eea5 6b04 	vfma.f64	d6, d5, d4
    895a:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
            peaks[peakcount] = fltppLPInputPk;
    895e:	4abc      	ldr	r2, [pc, #752]	; (8c50 <loop+0x1a28>)
            peakcount %= NUMPEAKS;
    8960:	f240 5edc 	movw	lr, #1500	; 0x5dc
            peaks[peakcount] = fltppLPInputPk;
    8964:	4fbb      	ldr	r7, [pc, #748]	; (8c54 <loop+0x1a2c>)
    8966:	6811      	ldr	r1, [r2, #0]
            if(peaks[peakcount] == peaklevel)
    8968:	4bbb      	ldr	r3, [pc, #748]	; (8c58 <loop+0x1a30>)
            peakcount %= NUMPEAKS;
    896a:	f8df c35c 	ldr.w	ip, [pc, #860]	; 8cc8 <loop+0x1aa0>
            if(peaks[peakcount] == peaklevel)
    896e:	ed93 7a00 	vldr	s14, [r3]
            peakcount++;
    8972:	1c4b      	adds	r3, r1, #1
            peaks[peakcount] = fltppLPInputPk;
    8974:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    8978:	ed86 6a00 	vstr	s12, [r6]
    897c:	edc1 7a00 	vstr	s15, [r1]
            peakcount %= NUMPEAKS;
    8980:	fb8c 0103 	smull	r0, r1, ip, r3
    8984:	17d8      	asrs	r0, r3, #31
    8986:	ebc0 1061 	rsb	r0, r0, r1, asr #5
    898a:	fb0e 3010 	mls	r0, lr, r0, r3
            if(peaks[peakcount] == peaklevel)
    898e:	eb07 0380 	add.w	r3, r7, r0, lsl #2
            peakcount %= NUMPEAKS;
    8992:	6010      	str	r0, [r2, #0]
            if(peaks[peakcount] == peaklevel)
    8994:	edd3 6a00 	vldr	s13, [r3]
    8998:	eef4 6a47 	vcmp.f32	s13, s14
    899c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    89a0:	f041 8132 	bne.w	9c08 <loop+0x29e0>
                peaklevel = 0;
    89a4:	eddf 7aad 	vldr	s15, [pc, #692]	; 8c5c <loop+0x1a34>
                for(r=0, k = peakcount+1; r<NUMPEAKS-1; r++)
    89a8:	1c42      	adds	r2, r0, #1
                peaklevel = 0;
    89aa:	4bab      	ldr	r3, [pc, #684]	; (8c58 <loop+0x1a30>)
    89ac:	4470      	add	r0, lr
                for(r=0, k = peakcount+1; r<NUMPEAKS-1; r++)
    89ae:	eeb0 7a67 	vmov.f32	s14, s15
    89b2:	f04f 0900 	mov.w	r9, #0
                peaklevel = 0;
    89b6:	edc3 7a00 	vstr	s15, [r3]
                  if(peaks[k % NUMPEAKS] > peaklevel)
    89ba:	fb8c 3102 	smull	r3, r1, ip, r2
    89be:	17d3      	asrs	r3, r2, #31
    89c0:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    89c4:	fb0e 2313 	mls	r3, lr, r3, r2
    89c8:	3201      	adds	r2, #1
    89ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    89ce:	edd3 7a00 	vldr	s15, [r3]
    89d2:	eef4 7ac7 	vcmpe.f32	s15, s14
    89d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    89da:	dd02      	ble.n	89e2 <loop+0x17ba>
                    peaklevel = peaks[k % NUMPEAKS]; 
    89dc:	eeb0 7a67 	vmov.f32	s14, s15
                  if(peaks[k % NUMPEAKS] > peaklevel)
    89e0:	46c1      	mov	r9, r8
                for(r=0, k = peakcount+1; r<NUMPEAKS-1; r++)
    89e2:	4282      	cmp	r2, r0
    89e4:	d1e9      	bne.n	89ba <loop+0x1792>
    89e6:	f1b9 0f00 	cmp.w	r9, #0
    89ea:	f001 86d0 	beq.w	a78e <loop+0x3566>
    89ee:	4b9a      	ldr	r3, [pc, #616]	; (8c58 <loop+0x1a30>)
    89f0:	ed83 7a00 	vstr	s14, [r3]
                fltppLPInputMeasAvg = peaklevel;
    89f4:	4b9a      	ldr	r3, [pc, #616]	; (8c60 <loop+0x1a38>)
    89f6:	ed83 7a00 	vstr	s14, [r3]
          blnDisplayLvl= (millis() - ulngLastLevelDisplayMs )  > 200; 
    89fa:	4b9a      	ldr	r3, [pc, #616]	; (8c64 <loop+0x1a3c>)
    89fc:	4f9a      	ldr	r7, [pc, #616]	; (8c68 <loop+0x1a40>)
    89fe:	681a      	ldr	r2, [r3, #0]
    8a00:	f8db 3000 	ldr.w	r3, [fp]
    8a04:	1a9b      	subs	r3, r3, r2
          if ((intMode <5)&&(!blnPlotSpectrum) && blnDisplayLvl)
    8a06:	6822      	ldr	r2, [r4, #0]
          blnDisplayLvl= (millis() - ulngLastLevelDisplayMs )  > 200; 
    8a08:	2bc8      	cmp	r3, #200	; 0xc8
    8a0a:	bf94      	ite	ls
    8a0c:	2300      	movls	r3, #0
    8a0e:	2301      	movhi	r3, #1
          if ((intMode <5)&&(!blnPlotSpectrum) && blnDisplayLvl)
    8a10:	2a04      	cmp	r2, #4
          blnDisplayLvl= (millis() - ulngLastLevelDisplayMs )  > 200; 
    8a12:	703b      	strb	r3, [r7, #0]
          if ((intMode <5)&&(!blnPlotSpectrum) && blnDisplayLvl)
    8a14:	f73e adaa 	bgt.w	756c <loop+0x344>
    8a18:	4a94      	ldr	r2, [pc, #592]	; (8c6c <loop+0x1a44>)
    8a1a:	7812      	ldrb	r2, [r2, #0]
    8a1c:	2a01      	cmp	r2, #1
    8a1e:	f43e ada5 	beq.w	756c <loop+0x344>
    8a22:	2b00      	cmp	r3, #0
    8a24:	f43e ada2 	beq.w	756c <loop+0x344>
              tft.setCursor(0,140); tft.setTextColor(ST7735_BLACK);  tft.setTextSize(3);  tft.println(strLastLevel);
    8a28:	2300      	movs	r3, #0
    8a2a:	228c      	movs	r2, #140	; 0x8c
    8a2c:	4890      	ldr	r0, [pc, #576]	; (8c70 <loop+0x1a48>)
    8a2e:	4619      	mov	r1, r3
    8a30:	f00e fcf4 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
    8a34:	2100      	movs	r1, #0
    8a36:	488e      	ldr	r0, [pc, #568]	; (8c70 <loop+0x1a48>)
    8a38:	f00e fd52 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8a3c:	2203      	movs	r2, #3
    8a3e:	488c      	ldr	r0, [pc, #560]	; (8c70 <loop+0x1a48>)
    8a40:	4611      	mov	r1, r2
    8a42:	f00e fd41 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    8a46:	498b      	ldr	r1, [pc, #556]	; (8c74 <loop+0x1a4c>)
    8a48:	4889      	ldr	r0, [pc, #548]	; (8c70 <loop+0x1a48>)
    8a4a:	f012 f901 	bl	1ac50 <Print::print(String const&)>
    8a4e:	4888      	ldr	r0, [pc, #544]	; (8c70 <loop+0x1a48>)
    8a50:	f012 f930 	bl	1acb4 <Print::println()>
              tft.setCursor(0,180); tft.setTextColor(ST7735_BLACK);  tft.setTextSize(2);  tft.println(strLastCF);
    8a54:	2300      	movs	r3, #0
    8a56:	22b4      	movs	r2, #180	; 0xb4
    8a58:	4885      	ldr	r0, [pc, #532]	; (8c70 <loop+0x1a48>)
    8a5a:	4619      	mov	r1, r3
    8a5c:	f00e fcde 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
    8a60:	2100      	movs	r1, #0
    8a62:	4883      	ldr	r0, [pc, #524]	; (8c70 <loop+0x1a48>)
    8a64:	f00e fd3c 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8a68:	2202      	movs	r2, #2
    8a6a:	4881      	ldr	r0, [pc, #516]	; (8c70 <loop+0x1a48>)
    8a6c:	4611      	mov	r1, r2
    8a6e:	f00e fd2b 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    8a72:	4981      	ldr	r1, [pc, #516]	; (8c78 <loop+0x1a50>)
    8a74:	487e      	ldr	r0, [pc, #504]	; (8c70 <loop+0x1a48>)
    8a76:	f012 f8eb 	bl	1ac50 <Print::print(String const&)>
    8a7a:	487d      	ldr	r0, [pc, #500]	; (8c70 <loop+0x1a48>)
    8a7c:	f012 f91a 	bl	1acb4 <Print::println()>
              str1 = "   Lvl=";  str2 =  String(int(fltppInputForDisplay));str3 = " mvp-p"; strLastLevel = str1 + str2 + str3;
    8a80:	497e      	ldr	r1, [pc, #504]	; (8c7c <loop+0x1a54>)
    8a82:	a809      	add	r0, sp, #36	; 0x24
    8a84:	f012 faec 	bl	1b060 <String::operator=(char const*)>
    8a88:	edd6 7a00 	vldr	s15, [r6]
    8a8c:	220a      	movs	r2, #10
    8a8e:	a815      	add	r0, sp, #84	; 0x54
    8a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8a94:	ee17 1a90 	vmov	r1, s15
    8a98:	f012 fa92 	bl	1afc0 <String::String(int, unsigned char)>
    8a9c:	a915      	add	r1, sp, #84	; 0x54
    8a9e:	a80c      	add	r0, sp, #48	; 0x30
    8aa0:	f012 fac8 	bl	1b034 <String::operator=(String&&)>
    8aa4:	a815      	add	r0, sp, #84	; 0x54
    8aa6:	f012 fa4f 	bl	1af48 <String::~String()>
    8aaa:	4975      	ldr	r1, [pc, #468]	; (8c80 <loop+0x1a58>)
    8aac:	a80f      	add	r0, sp, #60	; 0x3c
    8aae:	f012 fad7 	bl	1b060 <String::operator=(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    8ab2:	a909      	add	r1, sp, #36	; 0x24
    8ab4:	a815      	add	r0, sp, #84	; 0x54
    8ab6:	f012 fa2b 	bl	1af10 <String::String(String const&)>
    8aba:	a90c      	add	r1, sp, #48	; 0x30
    8abc:	a815      	add	r0, sp, #84	; 0x54
    8abe:	f012 fb31 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    8ac2:	a90f      	add	r1, sp, #60	; 0x3c
    8ac4:	f012 fb2e 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    8ac8:	4601      	mov	r1, r0
    8aca:	486a      	ldr	r0, [pc, #424]	; (8c74 <loop+0x1a4c>)
    8acc:	f012 faaa 	bl	1b024 <String::operator=(String const&)>
class StringSumHelper : public String
    8ad0:	a815      	add	r0, sp, #84	; 0x54
    8ad2:	f012 fa39 	bl	1af48 <String::~String()>
              if ((199 < fltppInputForDisplay)&&(fltppInputForDisplay < 1200) &&(fltppMixIQOut <1800) )//"Green" range 
    8ad6:	edd6 7a00 	vldr	s15, [r6]
    8ada:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8c84 <loop+0x1a5c>
    8ade:	eef4 7ac7 	vcmpe.f32	s15, s14
    8ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8ae6:	dd11      	ble.n	8b0c <loop+0x18e4>
    8ae8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8c88 <loop+0x1a60>
    8aec:	eef4 7ac7 	vcmpe.f32	s15, s14
    8af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8af4:	d50a      	bpl.n	8b0c <loop+0x18e4>
    8af6:	4b65      	ldr	r3, [pc, #404]	; (8c8c <loop+0x1a64>)
    8af8:	eddf 7a65 	vldr	s15, [pc, #404]	; 8c90 <loop+0x1a68>
    8afc:	ed93 7a00 	vldr	s14, [r3]
    8b00:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8b08:	f101 873f 	bmi.w	a98a <loop+0x3762>
              else{tft.setCursor(0,140); tft.setTextColor(ST7735_RED);  tft.setTextSize(3);  tft.println(strLastLevel);}
    8b0c:	2300      	movs	r3, #0
    8b0e:	228c      	movs	r2, #140	; 0x8c
    8b10:	4857      	ldr	r0, [pc, #348]	; (8c70 <loop+0x1a48>)
    8b12:	4619      	mov	r1, r3
    8b14:	f00e fc82 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
    8b18:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    8b1c:	4854      	ldr	r0, [pc, #336]	; (8c70 <loop+0x1a48>)
    8b1e:	f00e fcdf 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8b22:	2203      	movs	r2, #3
    8b24:	4852      	ldr	r0, [pc, #328]	; (8c70 <loop+0x1a48>)
    8b26:	4611      	mov	r1, r2
    8b28:	f00e fcce 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    8b2c:	4951      	ldr	r1, [pc, #324]	; (8c74 <loop+0x1a4c>)
    8b2e:	4850      	ldr	r0, [pc, #320]	; (8c70 <loop+0x1a48>)
    8b30:	f012 f88e 	bl	1ac50 <Print::print(String const&)>
    8b34:	484e      	ldr	r0, [pc, #312]	; (8c70 <loop+0x1a48>)
    8b36:	f012 f8bd 	bl	1acb4 <Print::println()>
    8b3a:	f7fe bd17 	b.w	756c <loop+0x344>
          ulngLastDelayUpdateUs = ulngCurrentElapsedTimeUs; ulngLastSNUpdateUs = ulngCurrentElapsedTimeUs;
    8b3e:	6030      	str	r0, [r6, #0]
    8b40:	4e54      	ldr	r6, [pc, #336]	; (8c94 <loop+0x1a6c>)
    8b42:	6030      	str	r0, [r6, #0]
    8b44:	f7fe bebf 	b.w	78c6 <loop+0x69e>
          if (intMode < 0 ){intMode = 0;}
    8b48:	2e00      	cmp	r6, #0
    8b4a:	f280 87e7 	bge.w	9b1c <loop+0x28f4>
    8b4e:	2600      	movs	r6, #0
    8b50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    8b54:	6026      	str	r6, [r4, #0]
              mixInpSel.gain(0, 0); mixInpSel.gain(1, 0.0); mixInpSel.gain(2, 100 * fltLogs[intGainLevel[0]]); mixInpSel.gain(3, 100 * fltLogs[intGainLevel[1]]);
    8b56:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8cc4 <loop+0x1a9c>
              blnTestMode3K = false; blnTestMode6K = false;  blnEnableTestTone = false;
    8b5a:	2100      	movs	r1, #0
              mixInpSel.gain(0, 0); mixInpSel.gain(1, 0.0); mixInpSel.gain(2, 100 * fltLogs[intGainLevel[0]]); mixInpSel.gain(3, 100 * fltLogs[intGainLevel[1]]);
    8b5c:	4d4e      	ldr	r5, [pc, #312]	; (8c98 <loop+0x1a70>)
    8b5e:	f8da 3000 	ldr.w	r3, [sl]
    8b62:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8c9c <loop+0x1a74>
    8b66:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		if (gain > 32767.0f) gain = 32767.0f;
    8b6a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8ca0 <loop+0x1a78>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    8b6e:	4a4d      	ldr	r2, [pc, #308]	; (8ca4 <loop+0x1a7c>)
    8b70:	edd3 7a00 	vldr	s15, [r3]
              blnTestMode3K = false; blnTestMode6K = false;  blnEnableTestTone = false;
    8b74:	4b4c      	ldr	r3, [pc, #304]	; (8ca8 <loop+0x1a80>)
              mixInpSel.gain(0, 0); mixInpSel.gain(1, 0.0); mixInpSel.gain(2, 100 * fltLogs[intGainLevel[0]]); mixInpSel.gain(3, 100 * fltLogs[intGainLevel[1]]);
    8b76:	ee67 7aa6 	vmul.f32	s15, s15, s13
              blnTestMode3K = false; blnTestMode6K = false;  blnEnableTestTone = false;
    8b7a:	7019      	strb	r1, [r3, #0]
    8b7c:	4b4b      	ldr	r3, [pc, #300]	; (8cac <loop+0x1a84>)
		if (gain > 32767.0f) gain = 32767.0f;
    8b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
    8b82:	7019      	strb	r1, [r3, #0]
    8b84:	4b4a      	ldr	r3, [pc, #296]	; (8cb0 <loop+0x1a88>)
    8b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8b8a:	7019      	strb	r1, [r3, #0]
		magnitude = n * 65536.0f;
    8b8c:	4b49      	ldr	r3, [pc, #292]	; (8cb4 <loop+0x1a8c>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    8b8e:	e9c2 1106 	strd	r1, r1, [r2, #24]
    8b92:	6219      	str	r1, [r3, #32]
		if (gain > 32767.0f) gain = 32767.0f;
    8b94:	f301 818e 	bgt.w	9eb4 <loop+0x2c8c>
		else if (gain < -32767.0f) gain = -32767.0f;
    8b98:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8cb8 <loop+0x1a90>
    8b9c:	eef4 7ac7 	vcmpe.f32	s15, s14
    8ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8ba4:	f141 8514 	bpl.w	a5d0 <loop+0x33a8>
    8ba8:	4b44      	ldr	r3, [pc, #272]	; (8cbc <loop+0x1a94>)
    8baa:	f001 b984 	b.w	9eb6 <loop+0x2c8e>
    8bae:	f8db 3000 	ldr.w	r3, [fp]
  if (millis() < ulngLastSpectrumUpdateMs){ulngLastSpectrumUpdateMs = millis();}//handles possible millis() rollover
    8bb2:	602b      	str	r3, [r5, #0]
    8bb4:	f7fe bf1c 	b.w	79f0 <loop+0x7c8>
            intBusyGain = intBusyGain + (lngENC1New - lngENC1Old);
    8bb8:	4a41      	ldr	r2, [pc, #260]	; (8cc0 <loop+0x1a98>)
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    8bba:	ed92 6a00 	vldr	s12, [r2]
            if (intTargetSN > intMaxSN){intTargetSN = intMinSN;} //Circular wrap around
    8bbe:	f06f 0227 	mvn.w	r2, #39	; 0x27
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    8bc2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
            if (intTargetSN > intMaxSN){intTargetSN = intMinSN;} //Circular wrap around
    8bc6:	601a      	str	r2, [r3, #0]
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    8bc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
    8bcc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		if (gain > 32767.0f) gain = 32767.0f;
    8bd0:	eddf 7a33 	vldr	s15, [pc, #204]	; 8ca0 <loop+0x1a78>
    8bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8bdc:	f73e ac29 	bgt.w	7432 <loop+0x20a>
		else if (gain < -32767.0f) gain = -32767.0f;
    8be0:	eddf 7a35 	vldr	s15, [pc, #212]	; 8cb8 <loop+0x1a90>
    8be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8bec:	f57f a946 	bpl.w	7e7c <loop+0xc54>
    8bf0:	4b32      	ldr	r3, [pc, #200]	; (8cbc <loop+0x1a94>)
    8bf2:	f7ff b949 	b.w	7e88 <loop+0xc60>
	StringSumHelper(const String &s) : String(s) {}
    8bf6:	f012 f98b 	bl	1af10 <String::String(String const&)>
          if (intMode < 13) {tft.println(str2 +String(100 * fltLogs[intGainLevel[ intMode - 11]]));}  // Scale up input fltLogs by 100}
    8bfa:	6823      	ldr	r3, [r4, #0]
    8bfc:	4a31      	ldr	r2, [pc, #196]	; (8cc4 <loop+0x1a9c>)
    8bfe:	3b0b      	subs	r3, #11
    8c00:	eddf 7a26 	vldr	s15, [pc, #152]	; 8c9c <loop+0x1a74>
    8c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8c0c:	ed93 0a00 	vldr	s0, [r3]
    8c10:	ee20 0a27 	vmul.f32	s0, s0, s15
    8c14:	f7ff ba55 	b.w	80c2 <loop+0xe9a>
		if (p1val) arg->pstate |= 0x02;
    8c18:	2a00      	cmp	r2, #0
    8c1a:	f43e ac3a 	beq.w	7492 <loop+0x26a>
    8c1e:	f043 0302 	orr.w	r3, r3, #2
		if (p2val) arg->pstate |= 0x01;
    8c22:	f7fe bc36 	b.w	7492 <loop+0x26a>
		if (p1val) arg->pstate |= 0x02;
    8c26:	2900      	cmp	r1, #0
    8c28:	f43f ae33 	beq.w	8892 <loop+0x166a>
    8c2c:	f042 0202 	orr.w	r2, r2, #2
		if (p2val) arg->pstate |= 0x01;
    8c30:	e62f      	b.n	8892 <loop+0x166a>
    8c32:	bf00      	nop
    8c34:	f3af 8000 	nop.w
    8c38:	9999999a 	.word	0x9999999a
    8c3c:	3fa99999 	.word	0x3fa99999
    8c40:	66666666 	.word	0x66666666
    8c44:	3fee6666 	.word	0x3fee6666
    8c48:	20012c2c 	.word	0x20012c2c
    8c4c:	20012c34 	.word	0x20012c34
    8c50:	2000c7b4 	.word	0x2000c7b4
    8c54:	2000b044 	.word	0x2000b044
    8c58:	2000c7b8 	.word	0x2000c7b8
    8c5c:	00000000 	.word	0x00000000
    8c60:	20012c30 	.word	0x20012c30
    8c64:	20013678 	.word	0x20013678
    8c68:	20009cb7 	.word	0x20009cb7
    8c6c:	200136eb 	.word	0x200136eb
    8c70:	2001355c 	.word	0x2001355c
    8c74:	20013520 	.word	0x20013520
    8c78:	20013514 	.word	0x20013514
    8c7c:	20005510 	.word	0x20005510
    8c80:	20005518 	.word	0x20005518
    8c84:	43470000 	.word	0x43470000
    8c88:	44960000 	.word	0x44960000
    8c8c:	20012c38 	.word	0x20012c38
    8c90:	44e10000 	.word	0x44e10000
    8c94:	20013680 	.word	0x20013680
    8c98:	2000389c 	.word	0x2000389c
    8c9c:	42c80000 	.word	0x42c80000
    8ca0:	46fffe00 	.word	0x46fffe00
    8ca4:	20012db0 	.word	0x20012db0
    8ca8:	200136ed 	.word	0x200136ed
    8cac:	200136ee 	.word	0x200136ee
    8cb0:	200136e5 	.word	0x200136e5
    8cb4:	2000a888 	.word	0x2000a888
    8cb8:	c6fffe00 	.word	0xc6fffe00
    8cbc:	80010000 	.word	0x80010000
    8cc0:	20009a20 	.word	0x20009a20
    8cc4:	20009a30 	.word	0x20009a30
    8cc8:	057619f1 	.word	0x057619f1
    8ccc:	4bc4      	ldr	r3, [pc, #784]	; (8fe0 <loop+0x1db8>)
    8cce:	9307      	str	r3, [sp, #28]
		__disable_irq();
    8cd0:	b672      	cpsid	i
		bool flag = new_output;
    8cd2:	f8df 9358 	ldr.w	r9, [pc, #856]	; 902c <loop+0x1e04>
    8cd6:	f899 301c 	ldrb.w	r3, [r9, #28]
		if (flag) new_output = false;
    8cda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    8cde:	b113      	cbz	r3, 8ce6 <loop+0x1abe>
    8ce0:	2300      	movs	r3, #0
    8ce2:	f889 301c 	strb.w	r3, [r9, #28]
		__enable_irq();
    8ce6:	b662      	cpsie	i
          if (ppi2s0In.available() == true)//Update ppi2s0In average if available
    8ce8:	b33a      	cbz	r2, 8d3a <loop+0x1b12>
              if (fltppi2s0InAvg < 50){fltppi2s0InAvg = 1000 * ppi2s0In.readPeakToPeak();}
    8cea:	4bbe      	ldr	r3, [pc, #760]	; (8fe4 <loop+0x1dbc>)
    8cec:	eddf 7abe 	vldr	s15, [pc, #760]	; 8fe8 <loop+0x1dc0>
    8cf0:	ed93 6a00 	vldr	s12, [r3]
    8cf4:	eeb4 6ae7 	vcmpe.f32	s12, s15
    8cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8cfc:	f141 8423 	bpl.w	a546 <loop+0x331e>
		__disable_irq();
    8d00:	b672      	cpsid	i
		min_sample = 32767;
    8d02:	f647 72ff 	movw	r2, #32767	; 0x7fff
		max_sample = -32768;
    8d06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		int min = min_sample;
    8d0a:	f9b9 101e 	ldrsh.w	r1, [r9, #30]
		min_sample = 32767;
    8d0e:	f8a9 201e 	strh.w	r2, [r9, #30]
		int max = max_sample;
    8d12:	f9b9 2020 	ldrsh.w	r2, [r9, #32]
		max_sample = -32768;
    8d16:	f8a9 0020 	strh.w	r0, [r9, #32]
		__enable_irq();
    8d1a:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    8d1c:	1a52      	subs	r2, r2, r1
    8d1e:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 8fec <loop+0x1dc4>
    8d22:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8ff0 <loop+0x1dc8>
    8d26:	ee07 2a90 	vmov	s15, r2
    8d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8d2e:	ee87 7a86 	vdiv.f32	s14, s15, s12
    8d32:	ee67 7a26 	vmul.f32	s15, s14, s13
    8d36:	edc3 7a00 	vstr	s15, [r3]
		__disable_irq();
    8d3a:	b672      	cpsid	i
		bool flag = new_output;
    8d3c:	4ead      	ldr	r6, [pc, #692]	; (8ff4 <loop+0x1dcc>)
    8d3e:	7f33      	ldrb	r3, [r6, #28]
		if (flag) new_output = false;
    8d40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    8d44:	b10b      	cbz	r3, 8d4a <loop+0x1b22>
    8d46:	2300      	movs	r3, #0
    8d48:	7733      	strb	r3, [r6, #28]
		__enable_irq();
    8d4a:	b662      	cpsie	i
          if (ppi2s1In.available() == true)//Update In average if available
    8d4c:	b32a      	cbz	r2, 8d9a <loop+0x1b72>
          if (fltppi2s1InAvg < 50){fltppi2s1InAvg = 1000 * ppi2s1In.readPeakToPeak();}
    8d4e:	4baa      	ldr	r3, [pc, #680]	; (8ff8 <loop+0x1dd0>)
    8d50:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8fe8 <loop+0x1dc0>
    8d54:	ed93 6a00 	vldr	s12, [r3]
    8d58:	eeb4 6ae7 	vcmpe.f32	s12, s15
    8d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8d60:	f141 83a4 	bpl.w	a4ac <loop+0x3284>
		__disable_irq();
    8d64:	b672      	cpsid	i
		min_sample = 32767;
    8d66:	f647 72ff 	movw	r2, #32767	; 0x7fff
		max_sample = -32768;
    8d6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		int min = min_sample;
    8d6e:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
		min_sample = 32767;
    8d72:	83f2      	strh	r2, [r6, #30]
		int max = max_sample;
    8d74:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
		max_sample = -32768;
    8d78:	8430      	strh	r0, [r6, #32]
		__enable_irq();
    8d7a:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    8d7c:	1a52      	subs	r2, r2, r1
    8d7e:	ed9f 6a9b 	vldr	s12, [pc, #620]	; 8fec <loop+0x1dc4>
    8d82:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8ff0 <loop+0x1dc8>
    8d86:	ee07 2a90 	vmov	s15, r2
    8d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8d8e:	ee87 7a86 	vdiv.f32	s14, s15, s12
    8d92:	ee67 7a26 	vmul.f32	s15, s14, s13
    8d96:	edc3 7a00 	vstr	s15, [r3]
		__disable_irq();
    8d9a:	b672      	cpsid	i
		bool flag = new_output;
    8d9c:	4b97      	ldr	r3, [pc, #604]	; (8ffc <loop+0x1dd4>)
    8d9e:	7f1a      	ldrb	r2, [r3, #28]
		if (flag) new_output = false;
    8da0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    8da4:	b10a      	cbz	r2, 8daa <loop+0x1b82>
    8da6:	2200      	movs	r2, #0
    8da8:	771a      	strb	r2, [r3, #28]
		__enable_irq();
    8daa:	b662      	cpsie	i
      if (ppAmpRightOut.available() == true)//Update ppAmpRightOut average if available
    8dac:	b329      	cbz	r1, 8dfa <loop+0x1bd2>
          if (fltppAmpRightOutAvg < 50) {fltppAmpRightOutAvg = 1000 * ppAmpRightOut.readPeakToPeak();}
    8dae:	4a94      	ldr	r2, [pc, #592]	; (9000 <loop+0x1dd8>)
    8db0:	eddf 7a8d 	vldr	s15, [pc, #564]	; 8fe8 <loop+0x1dc0>
    8db4:	ed92 6a00 	vldr	s12, [r2]
    8db8:	eeb4 6ae7 	vcmpe.f32	s12, s15
    8dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8dc0:	f141 834d 	bpl.w	a45e <loop+0x3236>
		__disable_irq();
    8dc4:	b672      	cpsid	i
		min_sample = 32767;
    8dc6:	f647 71ff 	movw	r1, #32767	; 0x7fff
		max_sample = -32768;
    8dca:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		int min = min_sample;
    8dce:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
		min_sample = 32767;
    8dd2:	83d9      	strh	r1, [r3, #30]
		int max = max_sample;
    8dd4:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
		max_sample = -32768;
    8dd8:	841f      	strh	r7, [r3, #32]
		__enable_irq();
    8dda:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    8ddc:	1a09      	subs	r1, r1, r0
    8dde:	ed9f 6a83 	vldr	s12, [pc, #524]	; 8fec <loop+0x1dc4>
    8de2:	eddf 6a83 	vldr	s13, [pc, #524]	; 8ff0 <loop+0x1dc8>
    8de6:	ee07 1a90 	vmov	s15, r1
    8dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8dee:	ee87 7a86 	vdiv.f32	s14, s15, s12
    8df2:	ee67 7a26 	vmul.f32	s15, s14, s13
    8df6:	edc2 7a00 	vstr	s15, [r2]
		__disable_irq();
    8dfa:	b672      	cpsid	i
		bool flag = new_output;
    8dfc:	4b81      	ldr	r3, [pc, #516]	; (9004 <loop+0x1ddc>)
    8dfe:	7f1a      	ldrb	r2, [r3, #28]
		if (flag) new_output = false;
    8e00:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    8e04:	b10a      	cbz	r2, 8e0a <loop+0x1be2>
    8e06:	2200      	movs	r2, #0
    8e08:	771a      	strb	r2, [r3, #28]
		__enable_irq();
    8e0a:	b662      	cpsie	i
      if (ppAmpLeftOut.available() == true)//Update ppAmpLeftOut average if available
    8e0c:	b329      	cbz	r1, 8e5a <loop+0x1c32>
          if (fltppAmpLeftOutAvg < 50) {fltppAmpLeftOutAvg = 1000 * ppAmpLeftOut.readPeakToPeak();}
    8e0e:	4a7e      	ldr	r2, [pc, #504]	; (9008 <loop+0x1de0>)
    8e10:	eddf 7a75 	vldr	s15, [pc, #468]	; 8fe8 <loop+0x1dc0>
    8e14:	ed92 6a00 	vldr	s12, [r2]
    8e18:	eeb4 6ae7 	vcmpe.f32	s12, s15
    8e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e20:	f141 82f6 	bpl.w	a410 <loop+0x31e8>
		__disable_irq();
    8e24:	b672      	cpsid	i
		min_sample = 32767;
    8e26:	f647 71ff 	movw	r1, #32767	; 0x7fff
		max_sample = -32768;
    8e2a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		int min = min_sample;
    8e2e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
		min_sample = 32767;
    8e32:	83d9      	strh	r1, [r3, #30]
		int max = max_sample;
    8e34:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
		max_sample = -32768;
    8e38:	841f      	strh	r7, [r3, #32]
		__enable_irq();
    8e3a:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    8e3c:	1a09      	subs	r1, r1, r0
    8e3e:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 8fec <loop+0x1dc4>
    8e42:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8ff0 <loop+0x1dc8>
    8e46:	ee07 1a90 	vmov	s15, r1
    8e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8e4e:	ee87 7a86 	vdiv.f32	s14, s15, s12
    8e52:	ee67 7a26 	vmul.f32	s15, s14, s13
    8e56:	edc2 7a00 	vstr	s15, [r2]
      tft.fillScreen(ST7735_BLACK);
    8e5a:	2100      	movs	r1, #0
    8e5c:	486b      	ldr	r0, [pc, #428]	; (900c <loop+0x1de4>)
    8e5e:	f00d fcc9 	bl	167f4 <ST7735_t3::fillScreen(unsigned short)>
      tft.setCursor(0, 0);
    8e62:	2300      	movs	r3, #0
    8e64:	4869      	ldr	r0, [pc, #420]	; (900c <loop+0x1de4>)
    8e66:	461a      	mov	r2, r3
    8e68:	4619      	mov	r1, r3
    8e6a:	f00e fad7 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
      str1 = chrModes[intMode];  str2 =  " Ch1 Out = "; str3 = " Ch1 In  = ";
    8e6e:	4b68      	ldr	r3, [pc, #416]	; (9010 <loop+0x1de8>)
    8e70:	6822      	ldr	r2, [r4, #0]
    8e72:	a809      	add	r0, sp, #36	; 0x24
    8e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8e78:	f012 f8f2 	bl	1b060 <String::operator=(char const*)>
    8e7c:	4965      	ldr	r1, [pc, #404]	; (9014 <loop+0x1dec>)
    8e7e:	a80c      	add	r0, sp, #48	; 0x30
    8e80:	f012 f8ee 	bl	1b060 <String::operator=(char const*)>
    8e84:	4964      	ldr	r1, [pc, #400]	; (9018 <loop+0x1df0>)
    8e86:	a80f      	add	r0, sp, #60	; 0x3c
    8e88:	f012 f8ea 	bl	1b060 <String::operator=(char const*)>
      tft.setTextColor(ST7735_MAGENTA);  tft.setTextSize(3);  tft.println(str1);
    8e8c:	f64f 011f 	movw	r1, #63519	; 0xf81f
    8e90:	485e      	ldr	r0, [pc, #376]	; (900c <loop+0x1de4>)
    8e92:	f00e fb25 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8e96:	2203      	movs	r2, #3
    8e98:	485c      	ldr	r0, [pc, #368]	; (900c <loop+0x1de4>)
    8e9a:	4611      	mov	r1, r2
    8e9c:	f00e fb14 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    8ea0:	a909      	add	r1, sp, #36	; 0x24
    8ea2:	485a      	ldr	r0, [pc, #360]	; (900c <loop+0x1de4>)
    8ea4:	f011 fed4 	bl	1ac50 <Print::print(String const&)>
    8ea8:	4858      	ldr	r0, [pc, #352]	; (900c <loop+0x1de4>)
    8eaa:	f011 ff03 	bl	1acb4 <Print::println()>
      tft.setTextColor(ST7735_WHITE);    tft.setTextSize(3);  tft.println(" Freq (Hz) =" + String(intTestFreqHz));
    8eae:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8eb2:	4856      	ldr	r0, [pc, #344]	; (900c <loop+0x1de4>)
    8eb4:	f00e fb14 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8eb8:	2203      	movs	r2, #3
    8eba:	4854      	ldr	r0, [pc, #336]	; (900c <loop+0x1de4>)
    8ebc:	4611      	mov	r1, r2
    8ebe:	f00e fb03 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const char *p) : String(p) {}
    8ec2:	4956      	ldr	r1, [pc, #344]	; (901c <loop+0x1df4>)
    8ec4:	a815      	add	r0, sp, #84	; 0x54
    8ec6:	f012 f805 	bl	1aed4 <String::String(char const*)>
    8eca:	4b55      	ldr	r3, [pc, #340]	; (9020 <loop+0x1df8>)
    8ecc:	220a      	movs	r2, #10
    8ece:	a812      	add	r0, sp, #72	; 0x48
    8ed0:	6819      	ldr	r1, [r3, #0]
    8ed2:	f012 f875 	bl	1afc0 <String::String(int, unsigned char)>
    8ed6:	a912      	add	r1, sp, #72	; 0x48
    8ed8:	a815      	add	r0, sp, #84	; 0x54
    8eda:	f012 f923 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    8ede:	4601      	mov	r1, r0
    8ee0:	484a      	ldr	r0, [pc, #296]	; (900c <loop+0x1de4>)
    8ee2:	f011 feb5 	bl	1ac50 <Print::print(String const&)>
    8ee6:	4849      	ldr	r0, [pc, #292]	; (900c <loop+0x1de4>)
    8ee8:	f011 fee4 	bl	1acb4 <Print::println()>
    8eec:	a812      	add	r0, sp, #72	; 0x48
    8eee:	f012 f82b 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    8ef2:	a815      	add	r0, sp, #84	; 0x54
    8ef4:	f012 f828 	bl	1af48 <String::~String()>
							  return write((const uint8_t *)str, strlen(str)); }
    8ef8:	2201      	movs	r2, #1
    8efa:	494a      	ldr	r1, [pc, #296]	; (9024 <loop+0x1dfc>)
    8efc:	4843      	ldr	r0, [pc, #268]	; (900c <loop+0x1de4>)
    8efe:	f010 fdeb 	bl	19ad8 <ST7735_t3::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    8f02:	4842      	ldr	r0, [pc, #264]	; (900c <loop+0x1de4>)
    8f04:	f011 fed6 	bl	1acb4 <Print::println()>
      if (blnTestMode3K)
    8f08:	f898 3000 	ldrb.w	r3, [r8]
    8f0c:	2b00      	cmp	r3, #0
    8f0e:	f000 8134 	beq.w	917a <loop+0x1f52>
          if ((fltppAmpLeftOutAvg > (fltNomCalLevel * .89)) && (fltppAmpLeftOutAvg < (fltNomCalLevel * 1.12))) //Nominal +/- 1 dB
    8f12:	4f3d      	ldr	r7, [pc, #244]	; (9008 <loop+0x1de0>)
    8f14:	eddf 7a44 	vldr	s15, [pc, #272]	; 9028 <loop+0x1e00>
    8f18:	ed97 7a00 	vldr	s14, [r7]
    8f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f24:	dd09      	ble.n	8f3a <loop+0x1d12>
    8f26:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8f2a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8fc8 <loop+0x1da0>
    8f2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f36:	f101 83ce 	bmi.w	a6d6 <loop+0x34ae>
              tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpLeftOutAvg)));
    8f3a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    8f3e:	4833      	ldr	r0, [pc, #204]	; (900c <loop+0x1de4>)
    8f40:	f00e face 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8f44:	2203      	movs	r2, #3
    8f46:	4831      	ldr	r0, [pc, #196]	; (900c <loop+0x1de4>)
    8f48:	4611      	mov	r1, r2
    8f4a:	f00e fabd 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    8f4e:	a90c      	add	r1, sp, #48	; 0x30
    8f50:	a815      	add	r0, sp, #84	; 0x54
    8f52:	f011 ffdd 	bl	1af10 <String::String(String const&)>
    8f56:	edd7 7a00 	vldr	s15, [r7]
    8f5a:	220a      	movs	r2, #10
    8f5c:	a812      	add	r0, sp, #72	; 0x48
    8f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
          if ((fltppi2s0InAvg > (fltNomCalLevel * fltNomInOutRatio * .89)) && (fltppi2s0InAvg < (fltNomCalLevel * fltNomInOutRatio * 1.12))) //Nominal +/- 1 dB
    8f62:	4f20      	ldr	r7, [pc, #128]	; (8fe4 <loop+0x1dbc>)
              tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpLeftOutAvg)));
    8f64:	ee17 1a90 	vmov	r1, s15
    8f68:	f012 f82a 	bl	1afc0 <String::String(int, unsigned char)>
    8f6c:	a912      	add	r1, sp, #72	; 0x48
    8f6e:	a815      	add	r0, sp, #84	; 0x54
    8f70:	f012 f8d8 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    8f74:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    8f76:	4825      	ldr	r0, [pc, #148]	; (900c <loop+0x1de4>)
    8f78:	f011 fe6a 	bl	1ac50 <Print::print(String const&)>
    8f7c:	4823      	ldr	r0, [pc, #140]	; (900c <loop+0x1de4>)
    8f7e:	f011 fe99 	bl	1acb4 <Print::println()>
    8f82:	a812      	add	r0, sp, #72	; 0x48
    8f84:	f011 ffe0 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    8f88:	a815      	add	r0, sp, #84	; 0x54
    8f8a:	f011 ffdd 	bl	1af48 <String::~String()>
          if ((fltppi2s0InAvg > (fltNomCalLevel * fltNomInOutRatio * .89)) && (fltppi2s0InAvg < (fltNomCalLevel * fltNomInOutRatio * 1.12))) //Nominal +/- 1 dB
    8f8e:	ed97 7a00 	vldr	s14, [r7]
    8f92:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8fd0 <loop+0x1da8>
    8f96:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    8f9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8fa2:	dd07      	ble.n	8fb4 <loop+0x1d8c>
    8fa4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8fd8 <loop+0x1db0>
    8fa8:	eeb4 7bc6 	vcmpe.f64	d7, d6
    8fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8fb0:	f101 838d 	bmi.w	a6ce <loop+0x34a6>
              tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str3 +  String(int(fltppi2s0InAvg)));
    8fb4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    8fb8:	4814      	ldr	r0, [pc, #80]	; (900c <loop+0x1de4>)
    8fba:	f00e fa91 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    8fbe:	2203      	movs	r2, #3
    8fc0:	e036      	b.n	9030 <loop+0x1e08>
    8fc2:	bf00      	nop
    8fc4:	f3af 8000 	nop.w
    8fc8:	00000001 	.word	0x00000001
    8fcc:	409f8000 	.word	0x409f8000
    8fd0:	d5c28f5c 	.word	0xd5c28f5c
    8fd4:	40848d9b 	.word	0x40848d9b
    8fd8:	ae147ae2 	.word	0xae147ae2
    8fdc:	4089dd59 	.word	0x4089dd59
    8fe0:	200136ee 	.word	0x200136ee
    8fe4:	20012c3c 	.word	0x20012c3c
    8fe8:	42480000 	.word	0x42480000
    8fec:	46fffe00 	.word	0x46fffe00
    8ff0:	447a0000 	.word	0x447a0000
    8ff4:	200132b8 	.word	0x200132b8
    8ff8:	20012c40 	.word	0x20012c40
    8ffc:	2001324c 	.word	0x2001324c
    9000:	20012c28 	.word	0x20012c28
    9004:	20013228 	.word	0x20013228
    9008:	20012c24 	.word	0x20012c24
    900c:	2001355c 	.word	0x2001355c
    9010:	200038c0 	.word	0x200038c0
    9014:	20005538 	.word	0x20005538
    9018:	20005544 	.word	0x20005544
    901c:	20005550 	.word	0x20005550
    9020:	20009a5c 	.word	0x20009a5c
    9024:	200035f0 	.word	0x200035f0
    9028:	44c84000 	.word	0x44c84000
    902c:	20013294 	.word	0x20013294
    9030:	48cb      	ldr	r0, [pc, #812]	; (9360 <loop+0x2138>)
    9032:	4611      	mov	r1, r2
    9034:	f00e fa48 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    9038:	a90f      	add	r1, sp, #60	; 0x3c
    903a:	a815      	add	r0, sp, #84	; 0x54
    903c:	f011 ff68 	bl	1af10 <String::String(String const&)>
    9040:	edd7 7a00 	vldr	s15, [r7]
    9044:	220a      	movs	r2, #10
    9046:	a812      	add	r0, sp, #72	; 0x48
    9048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
          if ((fltppAmpRightOutAvg > (fltNomCalLevel * .5 * .89)) && (fltppAmpRightOutAvg < (fltNomCalLevel * .5 * 1.12)))// //Nominal +/- 1 dB
    904c:	4fc5      	ldr	r7, [pc, #788]	; (9364 <loop+0x213c>)
              tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str3 +  String(int(fltppi2s0InAvg)));
    904e:	ee17 1a90 	vmov	r1, s15
    9052:	f011 ffb5 	bl	1afc0 <String::String(int, unsigned char)>
    9056:	a912      	add	r1, sp, #72	; 0x48
    9058:	a815      	add	r0, sp, #84	; 0x54
    905a:	f012 f863 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    905e:	4601      	mov	r1, r0
    9060:	48bf      	ldr	r0, [pc, #764]	; (9360 <loop+0x2138>)
    9062:	f011 fdf5 	bl	1ac50 <Print::print(String const&)>
    9066:	48be      	ldr	r0, [pc, #760]	; (9360 <loop+0x2138>)
    9068:	f011 fe24 	bl	1acb4 <Print::println()>
    906c:	a812      	add	r0, sp, #72	; 0x48
    906e:	f011 ff6b 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    9072:	a815      	add	r0, sp, #84	; 0x54
    9074:	f011 ff68 	bl	1af48 <String::~String()>
          str2 =  " Ch2 Out = "; str3 = " Ch2 In  = ";
    9078:	49bb      	ldr	r1, [pc, #748]	; (9368 <loop+0x2140>)
    907a:	a80c      	add	r0, sp, #48	; 0x30
    907c:	f011 fff0 	bl	1b060 <String::operator=(char const*)>
    9080:	49ba      	ldr	r1, [pc, #744]	; (936c <loop+0x2144>)
    9082:	a80f      	add	r0, sp, #60	; 0x3c
    9084:	f011 ffec 	bl	1b060 <String::operator=(char const*)>
          if ((fltppAmpRightOutAvg > (fltNomCalLevel * .5 * .89)) && (fltppAmpRightOutAvg < (fltNomCalLevel * .5 * 1.12)))// //Nominal +/- 1 dB
    9088:	ed97 7a00 	vldr	s14, [r7]
    908c:	eddf 7ab8 	vldr	s15, [pc, #736]	; 9370 <loop+0x2148>
    9090:	eeb4 7ae7 	vcmpe.f32	s14, s15
    9094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9098:	dd09      	ble.n	90ae <loop+0x1e86>
    909a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    909e:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 9330 <loop+0x2108>
    90a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
    90a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    90aa:	f101 830c 	bmi.w	a6c6 <loop+0x349e>
              tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpRightOutAvg)));
    90ae:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    90b2:	48ab      	ldr	r0, [pc, #684]	; (9360 <loop+0x2138>)
    90b4:	f00e fa14 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    90b8:	2203      	movs	r2, #3
    90ba:	48a9      	ldr	r0, [pc, #676]	; (9360 <loop+0x2138>)
    90bc:	4611      	mov	r1, r2
    90be:	f00e fa03 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    90c2:	a90c      	add	r1, sp, #48	; 0x30
    90c4:	a815      	add	r0, sp, #84	; 0x54
    90c6:	f011 ff23 	bl	1af10 <String::String(String const&)>
    90ca:	edd7 7a00 	vldr	s15, [r7]
    90ce:	220a      	movs	r2, #10
    90d0:	a812      	add	r0, sp, #72	; 0x48
    90d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
          if ((fltppi2s1InAvg > (fltNomCalLevel * .5 * .89 * fltNomInOutRatio )) && (fltppi2s1InAvg < fltNomCalLevel * .5 * 1.12 * fltNomInOutRatio ))// Nominal +/- 1 dB
    90d6:	4fa7      	ldr	r7, [pc, #668]	; (9374 <loop+0x214c>)
              tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpRightOutAvg)));
    90d8:	ee17 1a90 	vmov	r1, s15
    90dc:	f011 ff70 	bl	1afc0 <String::String(int, unsigned char)>
    90e0:	a912      	add	r1, sp, #72	; 0x48
    90e2:	a815      	add	r0, sp, #84	; 0x54
    90e4:	f012 f81e 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    90e8:	4601      	mov	r1, r0
    90ea:	489d      	ldr	r0, [pc, #628]	; (9360 <loop+0x2138>)
    90ec:	f011 fdb0 	bl	1ac50 <Print::print(String const&)>
    90f0:	489b      	ldr	r0, [pc, #620]	; (9360 <loop+0x2138>)
    90f2:	f011 fddf 	bl	1acb4 <Print::println()>
    90f6:	a812      	add	r0, sp, #72	; 0x48
    90f8:	f011 ff26 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    90fc:	a815      	add	r0, sp, #84	; 0x54
    90fe:	f011 ff23 	bl	1af48 <String::~String()>
          if ((fltppi2s1InAvg > (fltNomCalLevel * .5 * .89 * fltNomInOutRatio )) && (fltppi2s1InAvg < fltNomCalLevel * .5 * 1.12 * fltNomInOutRatio ))// Nominal +/- 1 dB
    9102:	ed97 7a00 	vldr	s14, [r7]
    9106:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 9338 <loop+0x2110>
    910a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    910e:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9116:	dd07      	ble.n	9128 <loop+0x1f00>
    9118:	ed9f 6b89 	vldr	d6, [pc, #548]	; 9340 <loop+0x2118>
    911c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9124:	f101 82cb 	bmi.w	a6be <loop+0x3496>
              tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str3 +  String(int(fltppi2s1InAvg)));
    9128:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    912c:	488c      	ldr	r0, [pc, #560]	; (9360 <loop+0x2138>)
    912e:	f00e f9d7 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    9132:	2203      	movs	r2, #3
    9134:	488a      	ldr	r0, [pc, #552]	; (9360 <loop+0x2138>)
    9136:	4611      	mov	r1, r2
    9138:	f00e f9c6 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    913c:	a90f      	add	r1, sp, #60	; 0x3c
    913e:	a815      	add	r0, sp, #84	; 0x54
    9140:	f011 fee6 	bl	1af10 <String::String(String const&)>
    9144:	edd7 7a00 	vldr	s15, [r7]
    9148:	220a      	movs	r2, #10
    914a:	a812      	add	r0, sp, #72	; 0x48
    914c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    9150:	ee17 1a90 	vmov	r1, s15
    9154:	f011 ff34 	bl	1afc0 <String::String(int, unsigned char)>
    9158:	a912      	add	r1, sp, #72	; 0x48
    915a:	a815      	add	r0, sp, #84	; 0x54
    915c:	f011 ffe2 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9160:	4601      	mov	r1, r0
    9162:	487f      	ldr	r0, [pc, #508]	; (9360 <loop+0x2138>)
    9164:	f011 fd74 	bl	1ac50 <Print::print(String const&)>
    9168:	487d      	ldr	r0, [pc, #500]	; (9360 <loop+0x2138>)
    916a:	f011 fda3 	bl	1acb4 <Print::println()>
    916e:	a812      	add	r0, sp, #72	; 0x48
    9170:	f011 feea 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    9174:	a815      	add	r0, sp, #84	; 0x54
    9176:	f011 fee7 	bl	1af48 <String::~String()>
      if (blnTestMode6K)
    917a:	9b07      	ldr	r3, [sp, #28]
    917c:	781b      	ldrb	r3, [r3, #0]
    917e:	2b00      	cmp	r3, #0
    9180:	f000 8129 	beq.w	93d6 <loop+0x21ae>
          if ((fltppAmpLeftOutAvg > (fltNomCalLevel * .5 * .89 )) && (fltppAmpLeftOutAvg < (fltNomCalLevel * .5 * 1.12  )))//Nominal +/- 1 dB
    9184:	4f7c      	ldr	r7, [pc, #496]	; (9378 <loop+0x2150>)
    9186:	eddf 7a7a 	vldr	s15, [pc, #488]	; 9370 <loop+0x2148>
    918a:	ed97 7a00 	vldr	s14, [r7]
    918e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    9192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9196:	dd09      	ble.n	91ac <loop+0x1f84>
    9198:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    919c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 9330 <loop+0x2108>
    91a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
    91a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91a8:	f101 8285 	bmi.w	a6b6 <loop+0x348e>
                tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpLeftOutAvg)));
    91ac:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    91b0:	486b      	ldr	r0, [pc, #428]	; (9360 <loop+0x2138>)
    91b2:	f00e f995 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    91b6:	2203      	movs	r2, #3
    91b8:	4869      	ldr	r0, [pc, #420]	; (9360 <loop+0x2138>)
    91ba:	4611      	mov	r1, r2
    91bc:	f00e f984 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    91c0:	a90c      	add	r1, sp, #48	; 0x30
    91c2:	a815      	add	r0, sp, #84	; 0x54
    91c4:	f011 fea4 	bl	1af10 <String::String(String const&)>
    91c8:	edd7 7a00 	vldr	s15, [r7]
    91cc:	220a      	movs	r2, #10
    91ce:	a812      	add	r0, sp, #72	; 0x48
    91d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            if ((fltppi2s0InAvg > (fltNomCalLevel * .5 * .89 * fltNomInOutRatio )) && (fltppi2s0InAvg < fltNomCalLevel * .5 * 1.12 * fltNomInOutRatio ))//Nominal +/- 1 dB
    91d4:	4f69      	ldr	r7, [pc, #420]	; (937c <loop+0x2154>)
                tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpLeftOutAvg)));
    91d6:	ee17 1a90 	vmov	r1, s15
    91da:	f011 fef1 	bl	1afc0 <String::String(int, unsigned char)>
    91de:	a912      	add	r1, sp, #72	; 0x48
    91e0:	a815      	add	r0, sp, #84	; 0x54
    91e2:	f011 ff9f 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    91e6:	4601      	mov	r1, r0
    91e8:	485d      	ldr	r0, [pc, #372]	; (9360 <loop+0x2138>)
    91ea:	f011 fd31 	bl	1ac50 <Print::print(String const&)>
    91ee:	485c      	ldr	r0, [pc, #368]	; (9360 <loop+0x2138>)
    91f0:	f011 fd60 	bl	1acb4 <Print::println()>
    91f4:	a812      	add	r0, sp, #72	; 0x48
    91f6:	f011 fea7 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    91fa:	a815      	add	r0, sp, #84	; 0x54
    91fc:	f011 fea4 	bl	1af48 <String::~String()>
            if ((fltppi2s0InAvg > (fltNomCalLevel * .5 * .89 * fltNomInOutRatio )) && (fltppi2s0InAvg < fltNomCalLevel * .5 * 1.12 * fltNomInOutRatio ))//Nominal +/- 1 dB
    9200:	ed97 7a00 	vldr	s14, [r7]
    9204:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 9338 <loop+0x2110>
    9208:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    920c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9214:	dd07      	ble.n	9226 <loop+0x1ffe>
    9216:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 9340 <loop+0x2118>
    921a:	eeb4 7bc6 	vcmpe.f64	d7, d6
    921e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9222:	f101 8244 	bmi.w	a6ae <loop+0x3486>
                tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str3 +  String(int(fltppi2s0InAvg)));
    9226:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    922a:	484d      	ldr	r0, [pc, #308]	; (9360 <loop+0x2138>)
    922c:	f00e f958 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    9230:	2203      	movs	r2, #3
    9232:	484b      	ldr	r0, [pc, #300]	; (9360 <loop+0x2138>)
    9234:	4611      	mov	r1, r2
    9236:	f00e f947 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    923a:	a90f      	add	r1, sp, #60	; 0x3c
    923c:	a815      	add	r0, sp, #84	; 0x54
    923e:	f011 fe67 	bl	1af10 <String::String(String const&)>
    9242:	edd7 7a00 	vldr	s15, [r7]
    9246:	220a      	movs	r2, #10
    9248:	a812      	add	r0, sp, #72	; 0x48
    924a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            if ((fltppAmpRightOutAvg > (fltNomCalLevel * .89)) && (fltppAmpRightOutAvg < (fltNomCalLevel * 1.12))) //Nominal +/- 1 dB
    924e:	4f45      	ldr	r7, [pc, #276]	; (9364 <loop+0x213c>)
                tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str3 +  String(int(fltppi2s0InAvg)));
    9250:	ee17 1a90 	vmov	r1, s15
    9254:	f011 feb4 	bl	1afc0 <String::String(int, unsigned char)>
    9258:	a912      	add	r1, sp, #72	; 0x48
    925a:	a815      	add	r0, sp, #84	; 0x54
    925c:	f011 ff62 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9260:	4601      	mov	r1, r0
    9262:	483f      	ldr	r0, [pc, #252]	; (9360 <loop+0x2138>)
    9264:	f011 fcf4 	bl	1ac50 <Print::print(String const&)>
    9268:	483d      	ldr	r0, [pc, #244]	; (9360 <loop+0x2138>)
    926a:	f011 fd23 	bl	1acb4 <Print::println()>
    926e:	a812      	add	r0, sp, #72	; 0x48
    9270:	f011 fe6a 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    9274:	a815      	add	r0, sp, #84	; 0x54
    9276:	f011 fe67 	bl	1af48 <String::~String()>
            str2 =  " Ch2 Out = "; str3 = " Ch2 In  = ";
    927a:	493b      	ldr	r1, [pc, #236]	; (9368 <loop+0x2140>)
    927c:	a80c      	add	r0, sp, #48	; 0x30
    927e:	f011 feef 	bl	1b060 <String::operator=(char const*)>
    9282:	493a      	ldr	r1, [pc, #232]	; (936c <loop+0x2144>)
    9284:	a80f      	add	r0, sp, #60	; 0x3c
    9286:	f011 feeb 	bl	1b060 <String::operator=(char const*)>
            if ((fltppAmpRightOutAvg > (fltNomCalLevel * .89)) && (fltppAmpRightOutAvg < (fltNomCalLevel * 1.12))) //Nominal +/- 1 dB
    928a:	ed97 7a00 	vldr	s14, [r7]
    928e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 9380 <loop+0x2158>
    9292:	eeb4 7ae7 	vcmpe.f32	s14, s15
    9296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    929a:	dd09      	ble.n	92b0 <loop+0x2088>
    929c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    92a0:	ed9f 6b29 	vldr	d6, [pc, #164]	; 9348 <loop+0x2120>
    92a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
    92a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    92ac:	f101 81fb 	bmi.w	a6a6 <loop+0x347e>
                tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpRightOutAvg)));
    92b0:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    92b4:	482a      	ldr	r0, [pc, #168]	; (9360 <loop+0x2138>)
    92b6:	f00e f913 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    92ba:	2203      	movs	r2, #3
    92bc:	4828      	ldr	r0, [pc, #160]	; (9360 <loop+0x2138>)
    92be:	4611      	mov	r1, r2
    92c0:	f00e f902 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    92c4:	a90c      	add	r1, sp, #48	; 0x30
    92c6:	a815      	add	r0, sp, #84	; 0x54
    92c8:	f011 fe22 	bl	1af10 <String::String(String const&)>
    92cc:	edd7 7a00 	vldr	s15, [r7]
    92d0:	220a      	movs	r2, #10
    92d2:	a812      	add	r0, sp, #72	; 0x48
    92d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            if ((fltppi2s1InAvg > (fltNomCalLevel * fltNomInOutRatio * .89)) && (fltppi2s1InAvg < (fltNomCalLevel * fltNomInOutRatio * 1.12))) //Nominal +/- 1 dB
    92d8:	4f26      	ldr	r7, [pc, #152]	; (9374 <loop+0x214c>)
                tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpRightOutAvg)));
    92da:	ee17 1a90 	vmov	r1, s15
    92de:	f011 fe6f 	bl	1afc0 <String::String(int, unsigned char)>
    92e2:	a912      	add	r1, sp, #72	; 0x48
    92e4:	a815      	add	r0, sp, #84	; 0x54
    92e6:	f011 ff1d 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    92ea:	4601      	mov	r1, r0
    92ec:	481c      	ldr	r0, [pc, #112]	; (9360 <loop+0x2138>)
    92ee:	f011 fcaf 	bl	1ac50 <Print::print(String const&)>
    92f2:	481b      	ldr	r0, [pc, #108]	; (9360 <loop+0x2138>)
    92f4:	f011 fcde 	bl	1acb4 <Print::println()>
    92f8:	a812      	add	r0, sp, #72	; 0x48
    92fa:	f011 fe25 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    92fe:	a815      	add	r0, sp, #84	; 0x54
    9300:	f011 fe22 	bl	1af48 <String::~String()>
            if ((fltppi2s1InAvg > (fltNomCalLevel * fltNomInOutRatio * .89)) && (fltppi2s1InAvg < (fltNomCalLevel * fltNomInOutRatio * 1.12))) //Nominal +/- 1 dB
    9304:	ed97 7a00 	vldr	s14, [r7]
    9308:	ed9f 6b11 	vldr	d6, [pc, #68]	; 9350 <loop+0x2128>
    930c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9310:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9318:	dd34      	ble.n	9384 <loop+0x215c>
    931a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 9358 <loop+0x2130>
    931e:	eeb4 7bc6 	vcmpe.f64	d7, d6
    9322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9326:	f101 81ba 	bmi.w	a69e <loop+0x3476>
    932a:	e02b      	b.n	9384 <loop+0x215c>
    932c:	f3af 8000 	nop.w
    9330:	00000001 	.word	0x00000001
    9334:	408f8000 	.word	0x408f8000
    9338:	d8e00000 	.word	0xd8e00000
    933c:	40748d9b 	.word	0x40748d9b
    9340:	b2000001 	.word	0xb2000001
    9344:	4079dd59 	.word	0x4079dd59
    9348:	00000001 	.word	0x00000001
    934c:	409f8000 	.word	0x409f8000
    9350:	d5c28f5c 	.word	0xd5c28f5c
    9354:	40848d9b 	.word	0x40848d9b
    9358:	ae147ae2 	.word	0xae147ae2
    935c:	4089dd59 	.word	0x4089dd59
    9360:	2001355c 	.word	0x2001355c
    9364:	20012c28 	.word	0x20012c28
    9368:	20005560 	.word	0x20005560
    936c:	2000556c 	.word	0x2000556c
    9370:	44484000 	.word	0x44484000
    9374:	20012c40 	.word	0x20012c40
    9378:	20012c24 	.word	0x20012c24
    937c:	20012c3c 	.word	0x20012c3c
    9380:	44c84000 	.word	0x44c84000
                tft.setTextColor(ST7735_RED); tft.setTextSize(3); tft.println(str3 +  String(int(fltppi2s1InAvg)));
    9384:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    9388:	48a4      	ldr	r0, [pc, #656]	; (961c <loop+0x23f4>)
    938a:	f00e f8a9 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    938e:	2203      	movs	r2, #3
    9390:	48a2      	ldr	r0, [pc, #648]	; (961c <loop+0x23f4>)
    9392:	4611      	mov	r1, r2
    9394:	f00e f898 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    9398:	a90f      	add	r1, sp, #60	; 0x3c
    939a:	a815      	add	r0, sp, #84	; 0x54
    939c:	f011 fdb8 	bl	1af10 <String::String(String const&)>
    93a0:	edd7 7a00 	vldr	s15, [r7]
    93a4:	220a      	movs	r2, #10
    93a6:	a812      	add	r0, sp, #72	; 0x48
    93a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    93ac:	ee17 1a90 	vmov	r1, s15
    93b0:	f011 fe06 	bl	1afc0 <String::String(int, unsigned char)>
    93b4:	a912      	add	r1, sp, #72	; 0x48
    93b6:	a815      	add	r0, sp, #84	; 0x54
    93b8:	f011 feb4 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    93bc:	4601      	mov	r1, r0
    93be:	4897      	ldr	r0, [pc, #604]	; (961c <loop+0x23f4>)
    93c0:	f011 fc46 	bl	1ac50 <Print::print(String const&)>
    93c4:	4895      	ldr	r0, [pc, #596]	; (961c <loop+0x23f4>)
    93c6:	f011 fc75 	bl	1acb4 <Print::println()>
    93ca:	a812      	add	r0, sp, #72	; 0x48
    93cc:	f011 fdbc 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    93d0:	a815      	add	r0, sp, #84	; 0x54
    93d2:	f011 fdb9 	bl	1af48 <String::~String()>
      delay(50);
    93d6:	2032      	movs	r0, #50	; 0x32
    93d8:	f012 f8ac 	bl	1b534 <delay>
    if (!(blnTestMode3K || blnTestMode6K))//Code to measure input levels (not during TEST3K or TEST6K)
    93dc:	f898 3000 	ldrb.w	r3, [r8]
    93e0:	2b00      	cmp	r3, #0
    93e2:	f47e aa23 	bne.w	782c <loop+0x604>
    93e6:	9b07      	ldr	r3, [sp, #28]
    93e8:	781b      	ldrb	r3, [r3, #0]
    93ea:	2b00      	cmp	r3, #0
    93ec:	f47e aa1e 	bne.w	782c <loop+0x604>
    93f0:	f7fe b9a1 	b.w	7736 <loop+0x50e>
              fltppInputForDisplay = (.5 * fltppInputForDisplay) + .5 * fltppLPInputPk; // Fast attack to capture peak: 
    93f4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
    93f8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    93fc:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    9400:	ee26 6b04 	vmul.f64	d6, d6, d4
    9404:	eea5 6b04 	vfma.f64	d6, d5, d4
    9408:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    940c:	f7ff baa7 	b.w	895e <loop+0x1736>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    9410:	4b83      	ldr	r3, [pc, #524]	; (9620 <loop+0x23f8>)
    9412:	2200      	movs	r2, #0
    9414:	f44f 3100 	mov.w	r1, #131072	; 0x20000
      delay(100);  
    9418:	2064      	movs	r0, #100	; 0x64
    941a:	625a      	str	r2, [r3, #36]	; 0x24
    941c:	6199      	str	r1, [r3, #24]
              intTestFreqHz = 1500; //sine_VLF_Dnmix_Mod.amplitude(0);
    941e:	f240 51dc 	movw	r1, #1500	; 0x5dc
    9422:	e9c3 2207 	strd	r2, r2, [r3, #28]
    9426:	4a7f      	ldr	r2, [pc, #508]	; (9624 <loop+0x23fc>)
    9428:	f244 037b 	movw	r3, #16507	; 0x407b
    942c:	6213      	str	r3, [r2, #32]
    942e:	4b7e      	ldr	r3, [pc, #504]	; (9628 <loop+0x2400>)
    9430:	6019      	str	r1, [r3, #0]
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    9432:	4b7e      	ldr	r3, [pc, #504]	; (962c <loop+0x2404>)
    9434:	61d3      	str	r3, [r2, #28]
              blnResetrmsMixIQCount = true;
    9436:	2201      	movs	r2, #1
    9438:	4b7d      	ldr	r3, [pc, #500]	; (9630 <loop+0x2408>)
    943a:	701a      	strb	r2, [r3, #0]
      delay(100);  
    943c:	f012 f87a 	bl	1b534 <delay>
    9440:	f7fe bb88 	b.w	7b54 <loop+0x92c>
      if ((blnTestMode3K || blnTestMode6K) && (!blnPlotSpectrum))
    9444:	4b7b      	ldr	r3, [pc, #492]	; (9634 <loop+0x240c>)
    9446:	781b      	ldrb	r3, [r3, #0]
    9448:	2b00      	cmp	r3, #0
    944a:	f43f ac41 	beq.w	8cd0 <loop+0x1aa8>
    944e:	f7fe b9ec 	b.w	782a <loop+0x602>
          if (fltrmsLPInputMeasAvg < 50){fltrmsLPInputMeasAvg =  1000 * rmsLPInput.read();}
    9452:	f001 fc31 	bl	acb8 <AudioAnalyzeRMS::read()>
    9456:	eddf 7a78 	vldr	s15, [pc, #480]	; 9638 <loop+0x2410>
    945a:	ee20 0a27 	vmul.f32	s0, s0, s15
    945e:	f7fe b8aa 	b.w	75b6 <loop+0x38e>
            if (intGainLevel[intMode - 11] > 8) { intGainLevel[intMode - 11] = 8;} //Hold at stops
    9462:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 9660 <loop+0x2438>
            intGainLevel[intMode - 11] = intGainLevel[intMode - 11] + (lngENC1New - lngENC1Old);
    9466:	6832      	ldr	r2, [r6, #0]
    9468:	683b      	ldr	r3, [r7, #0]
            tft.println(str2 +String(100 * fltLogs[intGainLevel[ intMode - 11]]));// Scale up fltLogs by 100 
    946a:	4d74      	ldr	r5, [pc, #464]	; (963c <loop+0x2414>)
            intGainLevel[intMode - 11] = intGainLevel[intMode - 11] + (lngENC1New - lngENC1Old);
    946c:	1a9b      	subs	r3, r3, r2
    946e:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
            tft.println(str2 +String(100 * fltLogs[intGainLevel[ intMode - 11]]));// Scale up fltLogs by 100 
    9472:	ed9f 8a73 	vldr	s16, [pc, #460]	; 9640 <loop+0x2418>
            intGainLevel[intMode - 11] = intGainLevel[intMode - 11] + (lngENC1New - lngENC1Old);
    9476:	4413      	add	r3, r2
    9478:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    947c:	2b08      	cmp	r3, #8
    947e:	bfa8      	it	ge
    9480:	2308      	movge	r3, #8
    9482:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
            str1 = chrModes[intMode]; str2 = "    "; tft.setTextColor(ST7735_CYAN);tft.setTextSize(3); tft.println(str1);
    9486:	4b6f      	ldr	r3, [pc, #444]	; (9644 <loop+0x241c>)
    9488:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    948c:	a809      	add	r0, sp, #36	; 0x24
    948e:	f011 fde7 	bl	1b060 <String::operator=(char const*)>
    9492:	496d      	ldr	r1, [pc, #436]	; (9648 <loop+0x2420>)
    9494:	a80c      	add	r0, sp, #48	; 0x30
    9496:	f011 fde3 	bl	1b060 <String::operator=(char const*)>
    949a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    949e:	485f      	ldr	r0, [pc, #380]	; (961c <loop+0x23f4>)
    94a0:	f00e f81e 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    94a4:	2203      	movs	r2, #3
    94a6:	485d      	ldr	r0, [pc, #372]	; (961c <loop+0x23f4>)
    94a8:	4611      	mov	r1, r2
    94aa:	f00e f80d 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    94ae:	a909      	add	r1, sp, #36	; 0x24
    94b0:	485a      	ldr	r0, [pc, #360]	; (961c <loop+0x23f4>)
    94b2:	f011 fbcd 	bl	1ac50 <Print::print(String const&)>
    94b6:	4859      	ldr	r0, [pc, #356]	; (961c <loop+0x23f4>)
    94b8:	f011 fbfc 	bl	1acb4 <Print::println()>
            tft.setTextColor(ST7735_GREEN); tft.setTextSize(3);
    94bc:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    94c0:	4856      	ldr	r0, [pc, #344]	; (961c <loop+0x23f4>)
    94c2:	f00e f80d 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    94c6:	2203      	movs	r2, #3
    94c8:	4854      	ldr	r0, [pc, #336]	; (961c <loop+0x23f4>)
    94ca:	4611      	mov	r1, r2
    94cc:	f00d fffc 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    94d0:	a90c      	add	r1, sp, #48	; 0x30
    94d2:	a815      	add	r0, sp, #84	; 0x54
    94d4:	f011 fd1c 	bl	1af10 <String::String(String const&)>
            tft.println(str2 +String(100 * fltLogs[intGainLevel[ intMode - 11]]));// Scale up fltLogs by 100 
    94d8:	6823      	ldr	r3, [r4, #0]
    94da:	2102      	movs	r1, #2
    94dc:	a812      	add	r0, sp, #72	; 0x48
    94de:	3b0b      	subs	r3, #11
    94e0:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
    94e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    94e8:	ed93 0a00 	vldr	s0, [r3]
    94ec:	ee20 0a08 	vmul.f32	s0, s0, s16
    94f0:	f011 fd7c 	bl	1afec <String::String(float, unsigned char)>
    94f4:	a912      	add	r1, sp, #72	; 0x48
    94f6:	a815      	add	r0, sp, #84	; 0x54
    94f8:	f011 fe14 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    94fc:	4601      	mov	r1, r0
    94fe:	4847      	ldr	r0, [pc, #284]	; (961c <loop+0x23f4>)
    9500:	f011 fba6 	bl	1ac50 <Print::print(String const&)>
    9504:	4845      	ldr	r0, [pc, #276]	; (961c <loop+0x23f4>)
    9506:	f011 fbd5 	bl	1acb4 <Print::println()>
    950a:	a812      	add	r0, sp, #72	; 0x48
    950c:	f011 fd1c 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    9510:	a815      	add	r0, sp, #84	; 0x54
    9512:	f011 fd19 	bl	1af48 <String::~String()>
            mixInpSel.gain((intMode - 9), (100 * fltLogs[intGainLevel[intMode - 11]])); //sets input mixer gain (0-100 (log))
    9516:	6820      	ldr	r0, [r4, #0]
    9518:	f1a0 0209 	sub.w	r2, r0, #9
		if (channel >= 4) return;
    951c:	2a03      	cmp	r2, #3
    951e:	f63e ad52 	bhi.w	7fc6 <loop+0xd9e>
    9522:	f1a0 030b 	sub.w	r3, r0, #11
		if (gain > 32767.0f) gain = 32767.0f;
    9526:	ed9f 7a49 	vldr	s14, [pc, #292]	; 964c <loop+0x2424>
    952a:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
    952e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    9532:	edd5 7a00 	vldr	s15, [r5]
    9536:	ee67 7a88 	vmul.f32	s15, s15, s16
    953a:	eef4 7ac7 	vcmpe.f32	s15, s14
    953e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9542:	f301 802d 	bgt.w	a5a0 <loop+0x3378>
		else if (gain < -32767.0f) gain = -32767.0f;
    9546:	ed9f 7a42 	vldr	s14, [pc, #264]	; 9650 <loop+0x2428>
    954a:	eef4 7ac7 	vcmpe.f32	s15, s14
    954e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9552:	f101 8186 	bmi.w	a862 <loop+0x363a>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    9556:	eeb0 7a67 	vmov.f32	s14, s15
    955a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    955e:	ee17 3a10 	vmov	r3, s14
    9562:	3206      	adds	r2, #6
    9564:	492e      	ldr	r1, [pc, #184]	; (9620 <loop+0x23f8>)
    9566:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    956a:	f7fe bd2c 	b.w	7fc6 <loop+0xd9e>
          Fade (intTargetSN, intFadeDepth_dB, fltFadeRate);//Fade also adjust S:N on peak value averages
    956e:	4b39      	ldr	r3, [pc, #228]	; (9654 <loop+0x242c>)
    9570:	6818      	ldr	r0, [r3, #0]
    9572:	f7f9 f915 	bl	27a0 <Fade(int, int, float)>
  if ((blnSim) && ( (millis() - ulngLastSpectrumUpdateMs) > 100) && blnPlotSpectrum) //Plot only every 100 ms in Sim mode (no averaging)
    9576:	9b03      	ldr	r3, [sp, #12]
    9578:	7819      	ldrb	r1, [r3, #0]
          Fade (intTargetSN, intFadeDepth_dB, fltFadeRate);//Fade also adjust S:N on peak value averages
    957a:	f7fe ba32 	b.w	79e2 <loop+0x7ba>
              intFadeDepth_dB = intFadeDepth_dB +  (lngENC1New - lngENC1Old);
    957e:	6832      	ldr	r2, [r6, #0]
    9580:	683b      	ldr	r3, [r7, #0]
    9582:	9905      	ldr	r1, [sp, #20]
    9584:	1a9b      	subs	r3, r3, r2
    9586:	680a      	ldr	r2, [r1, #0]
    9588:	4413      	add	r3, r2
              if (intFadeDepth_dB > intMaxFade) 
    958a:	2b28      	cmp	r3, #40	; 0x28
    958c:	f300 87c1 	bgt.w	a512 <loop+0x32ea>
              if (intFadeDepth_dB < 0) {intFadeDepth_dB = 0;}
    9590:	2b00      	cmp	r3, #0
    9592:	9a05      	ldr	r2, [sp, #20]
    9594:	bfb8      	it	lt
    9596:	2300      	movlt	r3, #0
    9598:	6013      	str	r3, [r2, #0]
              str1 = chrModes[intMode];   str2 = "    ";  str3 = " dB";
    959a:	492f      	ldr	r1, [pc, #188]	; (9658 <loop+0x2430>)
    959c:	a809      	add	r0, sp, #36	; 0x24
    959e:	f011 fd5f 	bl	1b060 <String::operator=(char const*)>
    95a2:	4929      	ldr	r1, [pc, #164]	; (9648 <loop+0x2420>)
    95a4:	a80c      	add	r0, sp, #48	; 0x30
    95a6:	f011 fd5b 	bl	1b060 <String::operator=(char const*)>
    95aa:	492c      	ldr	r1, [pc, #176]	; (965c <loop+0x2434>)
    95ac:	a80f      	add	r0, sp, #60	; 0x3c
    95ae:	f011 fd57 	bl	1b060 <String::operator=(char const*)>
              tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    95b2:	f240 71ff 	movw	r1, #2047	; 0x7ff
    95b6:	4819      	ldr	r0, [pc, #100]	; (961c <loop+0x23f4>)
    95b8:	f00d ff92 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    95bc:	2203      	movs	r2, #3
    95be:	4817      	ldr	r0, [pc, #92]	; (961c <loop+0x23f4>)
    95c0:	4611      	mov	r1, r2
    95c2:	f00d ff81 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    95c6:	a909      	add	r1, sp, #36	; 0x24
    95c8:	4814      	ldr	r0, [pc, #80]	; (961c <loop+0x23f4>)
    95ca:	f011 fb41 	bl	1ac50 <Print::print(String const&)>
    95ce:	4813      	ldr	r0, [pc, #76]	; (961c <loop+0x23f4>)
    95d0:	f011 fb70 	bl	1acb4 <Print::println()>
              tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intFadeDepth_dB + str3);
    95d4:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    95d8:	4810      	ldr	r0, [pc, #64]	; (961c <loop+0x23f4>)
    95da:	f00d ff81 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    95de:	2203      	movs	r2, #3
    95e0:	480e      	ldr	r0, [pc, #56]	; (961c <loop+0x23f4>)
    95e2:	4611      	mov	r1, r2
    95e4:	f00d ff70 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    95e8:	a90c      	add	r1, sp, #48	; 0x30
    95ea:	a815      	add	r0, sp, #84	; 0x54
    95ec:	f011 fc90 	bl	1af10 <String::String(String const&)>
    95f0:	9b05      	ldr	r3, [sp, #20]
    95f2:	a815      	add	r0, sp, #84	; 0x54
    95f4:	6819      	ldr	r1, [r3, #0]
    95f6:	f011 fdab 	bl	1b150 <operator+(StringSumHelper const&, int)>
    95fa:	a90f      	add	r1, sp, #60	; 0x3c
    95fc:	f011 fd92 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9600:	4601      	mov	r1, r0
    9602:	4806      	ldr	r0, [pc, #24]	; (961c <loop+0x23f4>)
    9604:	f011 fb24 	bl	1ac50 <Print::print(String const&)>
    9608:	4804      	ldr	r0, [pc, #16]	; (961c <loop+0x23f4>)
    960a:	f011 fb53 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    960e:	a815      	add	r0, sp, #84	; 0x54
    9610:	f011 fc9a 	bl	1af48 <String::~String()>
          if (intMode == 7)//FADE FREQ
    9614:	6820      	ldr	r0, [r4, #0]
    9616:	f7fe bcc0 	b.w	7f9a <loop+0xd72>
    961a:	bf00      	nop
    961c:	2001355c 	.word	0x2001355c
    9620:	20012db0 	.word	0x20012db0
    9624:	2000a888 	.word	0x2000a888
    9628:	20009a5c 	.word	0x20009a5c
    962c:	08b51da0 	.word	0x08b51da0
    9630:	200136ec 	.word	0x200136ec
    9634:	200136eb 	.word	0x200136eb
    9638:	447a0000 	.word	0x447a0000
    963c:	2000389c 	.word	0x2000389c
    9640:	42c80000 	.word	0x42c80000
    9644:	200038c0 	.word	0x200038c0
    9648:	20005700 	.word	0x20005700
    964c:	46fffe00 	.word	0x46fffe00
    9650:	c6fffe00 	.word	0xc6fffe00
    9654:	20009a58 	.word	0x20009a58
    9658:	200034bc 	.word	0x200034bc
    965c:	200034b8 	.word	0x200034b8
    9660:	20009a30 	.word	0x20009a30
              intMultipaths = intMultipaths + 2 * (lngENC1New - lngENC1Old);
    9664:	4db0      	ldr	r5, [pc, #704]	; (9928 <loop+0x2700>)
    9666:	211a      	movs	r1, #26
    9668:	683b      	ldr	r3, [r7, #0]
    966a:	6832      	ldr	r2, [r6, #0]
    966c:	48af      	ldr	r0, [pc, #700]	; (992c <loop+0x2704>)
    966e:	1a9a      	subs	r2, r3, r2
    9670:	682b      	ldr	r3, [r5, #0]
    9672:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    9676:	2200      	movs	r2, #0
              if (intMultipaths <= 2) 
    9678:	2b02      	cmp	r3, #2
    967a:	4bad      	ldr	r3, [pc, #692]	; (9930 <loop+0x2708>)
    967c:	e9c3 2208 	strd	r2, r2, [r3, #32]
    9680:	bfcc      	ite	gt
    9682:	2204      	movgt	r2, #4
    9684:	2202      	movle	r2, #2
                  intMultipaths =2;
    9686:	602a      	str	r2, [r5, #0]
              if (intMultipaths <= 2) 
    9688:	bfcc      	ite	gt
    968a:	f44f 3280 	movgt.w	r2, #65536	; 0x10000
    968e:	2200      	movle	r2, #0
    9690:	61da      	str	r2, [r3, #28]
    9692:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9696:	619a      	str	r2, [r3, #24]
    9698:	f013 ff20 	bl	1d4dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    969c:	6829      	ldr	r1, [r5, #0]
    969e:	48a5      	ldr	r0, [pc, #660]	; (9934 <loop+0x270c>)
    96a0:	f011 fafc 	bl	1ac9c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    96a4:	48a3      	ldr	r0, [pc, #652]	; (9934 <loop+0x270c>)
    96a6:	f011 fb05 	bl	1acb4 <Print::println()>
              str1 = chrModes[intMode]; str2 = "    " ; 
    96aa:	4ba3      	ldr	r3, [pc, #652]	; (9938 <loop+0x2710>)
    96ac:	6822      	ldr	r2, [r4, #0]
    96ae:	a809      	add	r0, sp, #36	; 0x24
    96b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    96b4:	f011 fcd4 	bl	1b060 <String::operator=(char const*)>
    96b8:	49a0      	ldr	r1, [pc, #640]	; (993c <loop+0x2714>)
    96ba:	a80c      	add	r0, sp, #48	; 0x30
    96bc:	f011 fcd0 	bl	1b060 <String::operator=(char const*)>
              tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3); tft.println(str1);
    96c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
    96c4:	489e      	ldr	r0, [pc, #632]	; (9940 <loop+0x2718>)
    96c6:	f00d ff0b 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    96ca:	2203      	movs	r2, #3
    96cc:	489c      	ldr	r0, [pc, #624]	; (9940 <loop+0x2718>)
    96ce:	4611      	mov	r1, r2
    96d0:	f00d fefa 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
    96d4:	a909      	add	r1, sp, #36	; 0x24
    96d6:	489a      	ldr	r0, [pc, #616]	; (9940 <loop+0x2718>)
    96d8:	f011 faba 	bl	1ac50 <Print::print(String const&)>
    96dc:	4898      	ldr	r0, [pc, #608]	; (9940 <loop+0x2718>)
    96de:	f011 fae9 	bl	1acb4 <Print::println()>
              tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intMultipaths);
    96e2:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    96e6:	4896      	ldr	r0, [pc, #600]	; (9940 <loop+0x2718>)
    96e8:	f00d fefa 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    96ec:	2203      	movs	r2, #3
    96ee:	4894      	ldr	r0, [pc, #592]	; (9940 <loop+0x2718>)
    96f0:	4611      	mov	r1, r2
    96f2:	f00d fee9 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    96f6:	a90c      	add	r1, sp, #48	; 0x30
    96f8:	a815      	add	r0, sp, #84	; 0x54
    96fa:	f011 fc09 	bl	1af10 <String::String(String const&)>
    96fe:	6829      	ldr	r1, [r5, #0]
    9700:	a815      	add	r0, sp, #84	; 0x54
    9702:	f011 fd25 	bl	1b150 <operator+(StringSumHelper const&, int)>
    9706:	4601      	mov	r1, r0
    9708:	488d      	ldr	r0, [pc, #564]	; (9940 <loop+0x2718>)
    970a:	f011 faa1 	bl	1ac50 <Print::print(String const&)>
    970e:	488c      	ldr	r0, [pc, #560]	; (9940 <loop+0x2718>)
    9710:	f011 fad0 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    9714:	a815      	add	r0, sp, #84	; 0x54
    9716:	f011 fc17 	bl	1af48 <String::~String()>
          if (intMode == 6)//FADE DEPTH
    971a:	6820      	ldr	r0, [r4, #0]
    971c:	f7fe bc3a 	b.w	7f94 <loop+0xd6c>
            intFMRatePtr = intFMRatePtr + (lngENC1New - lngENC1Old);
    9720:	6832      	ldr	r2, [r6, #0]
    9722:	683b      	ldr	r3, [r7, #0]
    9724:	f8df a23c 	ldr.w	sl, [pc, #572]	; 9964 <loop+0x273c>
    9728:	1a9b      	subs	r3, r3, r2
    972a:	f8da 2000 	ldr.w	r2, [sl]
    972e:	4413      	add	r3, r2
            if (intFMRatePtr > 8) {intFMRatePtr = 8;} //Hold at stops
    9730:	2b08      	cmp	r3, #8
    9732:	f340 86f2 	ble.w	a51a <loop+0x32f2>
                sine_VLF_Dnmix_Mod.amplitude(fltLogs[intFMDevPtr] * .0129870129870 ); //sets max deviation in Hz e.g. .0129870129870 * 7700  yields +/- 1 Hz peak deviation
    9736:	4b83      	ldr	r3, [pc, #524]	; (9944 <loop+0x271c>)
    9738:	4d83      	ldr	r5, [pc, #524]	; (9948 <loop+0x2720>)
    973a:	681b      	ldr	r3, [r3, #0]
    973c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9740:	ed93 7a00 	vldr	s14, [r3]
            if (intFMRatePtr > 8) {intFMRatePtr = 8;} //Hold at stops
    9744:	2308      	movs	r3, #8
                sine_VLF_Dnmix_Mod.amplitude(fltLogs[intFMDevPtr] * .0129870129870 ); //sets max deviation in Hz e.g. .0129870129870 * 7700  yields +/- 1 Hz peak deviation
    9746:	ed9f 6b76 	vldr	d6, [pc, #472]	; 9920 <loop+0x26f8>
    974a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
            if (intFMRatePtr > 8) {intFMRatePtr = 8;} //Hold at stops
    974e:	f8ca 3000 	str.w	r3, [sl]
                sine_VLF_Dnmix_Mod.amplitude(fltLogs[intFMDevPtr] * .0129870129870 ); //sets max deviation in Hz e.g. .0129870129870 * 7700  yields +/- 1 Hz peak deviation
    9752:	ee27 7b06 	vmul.f64	d7, d7, d6
    9756:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		if (n < 0.0f) n = 0;
    975a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9762:	f101 80a3 	bmi.w	a8ac <loop+0x3684>
		else if (n > 1.0f) n = 1.0f;
    9766:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    976a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    976e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9772:	f301 811a 	bgt.w	a9aa <loop+0x3782>
		magnitude = n * 65536.0f;
    9776:	eef0 7a47 	vmov.f32	s15, s14
    977a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    977e:	ee17 2a90 	vmov	r2, s15
                sine_VLF_Dnmix_Mod.frequency(10 * fltLogs[intFMRatePtr]);// Rate is .1 to 20 Hz
    9782:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9786:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    978a:	4970      	ldr	r1, [pc, #448]	; (994c <loop+0x2724>)
    978c:	edd3 7a00 	vldr	s15, [r3]
    9790:	620a      	str	r2, [r1, #32]
    9792:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (freq < 0.0f) freq = 0.0;
    9796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    979a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    979e:	f141 807a 	bpl.w	a896 <loop+0x366e>
    97a2:	2300      	movs	r3, #0
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    97a4:	61cb      	str	r3, [r1, #28]
            str1 = chrModes[intMode]; str2 = "    " ; str3 = " Hz";
    97a6:	496a      	ldr	r1, [pc, #424]	; (9950 <loop+0x2728>)
    97a8:	a809      	add	r0, sp, #36	; 0x24
    97aa:	f011 fc59 	bl	1b060 <String::operator=(char const*)>
    97ae:	4963      	ldr	r1, [pc, #396]	; (993c <loop+0x2714>)
    97b0:	a80c      	add	r0, sp, #48	; 0x30
    97b2:	f011 fc55 	bl	1b060 <String::operator=(char const*)>
    97b6:	4967      	ldr	r1, [pc, #412]	; (9954 <loop+0x272c>)
    97b8:	a80f      	add	r0, sp, #60	; 0x3c
    97ba:	f011 fc51 	bl	1b060 <String::operator=(char const*)>
            tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    97be:	f240 71ff 	movw	r1, #2047	; 0x7ff
    97c2:	485f      	ldr	r0, [pc, #380]	; (9940 <loop+0x2718>)
    97c4:	f00d fe8c 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    97c8:	2203      	movs	r2, #3
    97ca:	485d      	ldr	r0, [pc, #372]	; (9940 <loop+0x2718>)
    97cc:	4611      	mov	r1, r2
    97ce:	f00d fe7b 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    97d2:	a909      	add	r1, sp, #36	; 0x24
    97d4:	485a      	ldr	r0, [pc, #360]	; (9940 <loop+0x2718>)
    97d6:	f011 fa3b 	bl	1ac50 <Print::print(String const&)>
    97da:	4859      	ldr	r0, [pc, #356]	; (9940 <loop+0x2718>)
    97dc:	f011 fa6a 	bl	1acb4 <Print::println()>
            tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(10 * fltLogs[intFMRatePtr]) + str3);
    97e0:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    97e4:	4856      	ldr	r0, [pc, #344]	; (9940 <loop+0x2718>)
    97e6:	f00d fe7b 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    97ea:	2203      	movs	r2, #3
    97ec:	4854      	ldr	r0, [pc, #336]	; (9940 <loop+0x2718>)
    97ee:	4611      	mov	r1, r2
    97f0:	f00d fe6a 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    97f4:	a90c      	add	r1, sp, #48	; 0x30
    97f6:	a815      	add	r0, sp, #84	; 0x54
    97f8:	f011 fb8a 	bl	1af10 <String::String(String const&)>
    97fc:	f8da 3000 	ldr.w	r3, [sl]
    9800:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    9804:	2102      	movs	r1, #2
    9806:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    980a:	a812      	add	r0, sp, #72	; 0x48
    980c:	ed93 0a00 	vldr	s0, [r3]
    9810:	ee20 0a27 	vmul.f32	s0, s0, s15
    9814:	f011 fbea 	bl	1afec <String::String(float, unsigned char)>
    9818:	a912      	add	r1, sp, #72	; 0x48
    981a:	a815      	add	r0, sp, #84	; 0x54
    981c:	f011 fc82 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9820:	a90f      	add	r1, sp, #60	; 0x3c
    9822:	f011 fc7f 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9826:	4601      	mov	r1, r0
    9828:	4845      	ldr	r0, [pc, #276]	; (9940 <loop+0x2718>)
    982a:	f011 fa11 	bl	1ac50 <Print::print(String const&)>
    982e:	4844      	ldr	r0, [pc, #272]	; (9940 <loop+0x2718>)
    9830:	f011 fa40 	bl	1acb4 <Print::println()>
    9834:	a812      	add	r0, sp, #72	; 0x48
    9836:	f011 fb87 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    983a:	a815      	add	r0, sp, #84	; 0x54
    983c:	f011 fb84 	bl	1af48 <String::~String()>
        if ((intMode > 10) && (intMode < 13)) //Input GAINS: (0,1,2,5,10,20,50,100,200)[Nominal input range for 1000 mv p-p internal: 5 mv p-p to 1000 mv p-p]
    9840:	6820      	ldr	r0, [r4, #0]
    9842:	f7fe bbb6 	b.w	7fb2 <loop+0xd8a>
              intFMDevPtr = intFMDevPtr + (lngENC1New - lngENC1Old);
    9846:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9944 <loop+0x271c>
    984a:	6832      	ldr	r2, [r6, #0]
    984c:	683b      	ldr	r3, [r7, #0]
    984e:	1a9b      	subs	r3, r3, r2
    9850:	f8da 2000 	ldr.w	r2, [sl]
    9854:	4413      	add	r3, r2
              if (intFMDevPtr > 8) {intFMDevPtr = 8;} //Hold at stops
    9856:	2b08      	cmp	r3, #8
              intFMDevPtr = intFMDevPtr + (lngENC1New - lngENC1Old);
    9858:	f8ca 3000 	str.w	r3, [sl]
              if (intFMDevPtr > 8) {intFMDevPtr = 8;} //Hold at stops
    985c:	f340 8669 	ble.w	a532 <loop+0x330a>
    9860:	2308      	movs	r3, #8
              else {sine_VLF_Dnmix_Mod.amplitude(fltLogs[intFMDevPtr] * .0129870129870 );} //sets max deviation in Hz e.g. .000129870129870 * 7700  yields +/- 1 Hz peak deviation
    9862:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 9958 <loop+0x2730>
    9866:	4d38      	ldr	r5, [pc, #224]	; (9948 <loop+0x2720>)
              if (intFMDevPtr > 8) {intFMDevPtr = 8;} //Hold at stops
    9868:	f8ca 3000 	str.w	r3, [sl]
		magnitude = n * 65536.0f;
    986c:	eef0 7a47 	vmov.f32	s15, s14
    9870:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    9874:	ee17 3a90 	vmov	r3, s15
    9878:	4a34      	ldr	r2, [pc, #208]	; (994c <loop+0x2724>)
              str1 = chrModes[intMode]; str2 = "    " ; str3 = " Hz";
    987a:	a809      	add	r0, sp, #36	; 0x24
    987c:	4937      	ldr	r1, [pc, #220]	; (995c <loop+0x2734>)
    987e:	6213      	str	r3, [r2, #32]
    9880:	f011 fbee 	bl	1b060 <String::operator=(char const*)>
    9884:	492d      	ldr	r1, [pc, #180]	; (993c <loop+0x2714>)
    9886:	a80c      	add	r0, sp, #48	; 0x30
    9888:	f011 fbea 	bl	1b060 <String::operator=(char const*)>
    988c:	4931      	ldr	r1, [pc, #196]	; (9954 <loop+0x272c>)
    988e:	a80f      	add	r0, sp, #60	; 0x3c
    9890:	f011 fbe6 	bl	1b060 <String::operator=(char const*)>
              tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    9894:	f240 71ff 	movw	r1, #2047	; 0x7ff
    9898:	4829      	ldr	r0, [pc, #164]	; (9940 <loop+0x2718>)
    989a:	f00d fe21 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    989e:	2203      	movs	r2, #3
    98a0:	4827      	ldr	r0, [pc, #156]	; (9940 <loop+0x2718>)
    98a2:	4611      	mov	r1, r2
    98a4:	f00d fe10 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    98a8:	a909      	add	r1, sp, #36	; 0x24
    98aa:	4825      	ldr	r0, [pc, #148]	; (9940 <loop+0x2718>)
    98ac:	f011 f9d0 	bl	1ac50 <Print::print(String const&)>
    98b0:	4823      	ldr	r0, [pc, #140]	; (9940 <loop+0x2718>)
    98b2:	f011 f9ff 	bl	1acb4 <Print::println()>
              tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(100 * fltLogs[intFMDevPtr]) + str3);
    98b6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    98ba:	4821      	ldr	r0, [pc, #132]	; (9940 <loop+0x2718>)
    98bc:	f00d fe10 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    98c0:	2203      	movs	r2, #3
    98c2:	481f      	ldr	r0, [pc, #124]	; (9940 <loop+0x2718>)
    98c4:	4611      	mov	r1, r2
    98c6:	f00d fdff 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    98ca:	a90c      	add	r1, sp, #48	; 0x30
    98cc:	a815      	add	r0, sp, #84	; 0x54
    98ce:	f011 fb1f 	bl	1af10 <String::String(String const&)>
    98d2:	f8da 3000 	ldr.w	r3, [sl]
    98d6:	eddf 7a22 	vldr	s15, [pc, #136]	; 9960 <loop+0x2738>
    98da:	2102      	movs	r1, #2
    98dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    98e0:	a812      	add	r0, sp, #72	; 0x48
    98e2:	ed93 0a00 	vldr	s0, [r3]
    98e6:	ee20 0a27 	vmul.f32	s0, s0, s15
    98ea:	f011 fb7f 	bl	1afec <String::String(float, unsigned char)>
    98ee:	a912      	add	r1, sp, #72	; 0x48
    98f0:	a815      	add	r0, sp, #84	; 0x54
    98f2:	f011 fc17 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    98f6:	a90f      	add	r1, sp, #60	; 0x3c
    98f8:	f011 fc14 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    98fc:	4601      	mov	r1, r0
    98fe:	4810      	ldr	r0, [pc, #64]	; (9940 <loop+0x2718>)
    9900:	f011 f9a6 	bl	1ac50 <Print::print(String const&)>
    9904:	480e      	ldr	r0, [pc, #56]	; (9940 <loop+0x2718>)
    9906:	f011 f9d5 	bl	1acb4 <Print::println()>
    990a:	a812      	add	r0, sp, #72	; 0x48
    990c:	f011 fb1c 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    9910:	a815      	add	r0, sp, #84	; 0x54
    9912:	f011 fb19 	bl	1af48 <String::~String()>
        if (intMode == 10)//FM RATE
    9916:	6820      	ldr	r0, [r4, #0]
    9918:	f7fe bb48 	b.w	7fac <loop+0xd84>
    991c:	f3af 8000 	nop.w
    9920:	606a467f 	.word	0x606a467f
    9924:	3f8a98ef 	.word	0x3f8a98ef
    9928:	20009a48 	.word	0x20009a48
    992c:	200054f4 	.word	0x200054f4
    9930:	20012d40 	.word	0x20012d40
    9934:	20008ba0 	.word	0x20008ba0
    9938:	200038c0 	.word	0x200038c0
    993c:	20005700 	.word	0x20005700
    9940:	2001355c 	.word	0x2001355c
    9944:	20009a24 	.word	0x20009a24
    9948:	2000389c 	.word	0x2000389c
    994c:	200134f0 	.word	0x200134f0
    9950:	20003518 	.word	0x20003518
    9954:	200034ec 	.word	0x200034ec
    9958:	3cd4c77b 	.word	0x3cd4c77b
    995c:	20003504 	.word	0x20003504
    9960:	42c80000 	.word	0x42c80000
    9964:	20009a28 	.word	0x20009a28
              intTuneOffset = intTuneOffset + (intOffsetStep * (lngENC1New - lngENC1Old));
    9968:	6832      	ldr	r2, [r6, #0]
    996a:	683b      	ldr	r3, [r7, #0]
    996c:	4dad      	ldr	r5, [pc, #692]	; (9c24 <loop+0x29fc>)
    996e:	1a9b      	subs	r3, r3, r2
    9970:	682a      	ldr	r2, [r5, #0]
    9972:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9976:	eb02 0243 	add.w	r2, r2, r3, lsl #1
              if (intTuneOffset > intMaxOffset) {intTuneOffset = intMaxOffset;} //Hold at stops
    997a:	2ac8      	cmp	r2, #200	; 0xc8
    997c:	f300 85c3 	bgt.w	a506 <loop+0x32de>
              if (intTuneOffset < intMinOffset) {intTuneOffset = intMinOffset;}
    9980:	f112 0fc8 	cmn.w	r2, #200	; 0xc8
    9984:	f280 86e6 	bge.w	a754 <loop+0x352c>
    9988:	f06f 03c7 	mvn.w	r3, #199	; 0xc7
    998c:	eddf 7aa6 	vldr	s15, [pc, #664]	; 9c28 <loop+0x2a00>
    9990:	602b      	str	r3, [r5, #0]
    9992:	4ba6      	ldr	r3, [pc, #664]	; (9c2c <loop+0x2a04>)
    9994:	2200      	movs	r2, #0
    9996:	621a      	str	r2, [r3, #32]
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    9998:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 9c30 <loop+0x2a08>
    999c:	ee67 7a87 	vmul.f32	s15, s15, s14
    99a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    99a4:	ee17 3a90 	vmov	r3, s15
    99a8:	49a2      	ldr	r1, [pc, #648]	; (9c34 <loop+0x2a0c>)
		magnitude = n * 65536.0f;
    99aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
              str1 = chrModes[intMode]; str2 = "    " ; str3 = " Hz";
    99ae:	a809      	add	r0, sp, #36	; 0x24
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    99b0:	61cb      	str	r3, [r1, #28]
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    99b2:	4ba1      	ldr	r3, [pc, #644]	; (9c38 <loop+0x2a10>)
		magnitude = n * 65536.0f;
    99b4:	624a      	str	r2, [r1, #36]	; 0x24
		magnitude = n * 65536.0f;
    99b6:	621a      	str	r2, [r3, #32]
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    99b8:	4aa0      	ldr	r2, [pc, #640]	; (9c3c <loop+0x2a14>)
    99ba:	49a1      	ldr	r1, [pc, #644]	; (9c40 <loop+0x2a18>)
    99bc:	61da      	str	r2, [r3, #28]
    99be:	f011 fb4f 	bl	1b060 <String::operator=(char const*)>
    99c2:	49a0      	ldr	r1, [pc, #640]	; (9c44 <loop+0x2a1c>)
    99c4:	a80c      	add	r0, sp, #48	; 0x30
    99c6:	f011 fb4b 	bl	1b060 <String::operator=(char const*)>
    99ca:	499f      	ldr	r1, [pc, #636]	; (9c48 <loop+0x2a20>)
    99cc:	a80f      	add	r0, sp, #60	; 0x3c
    99ce:	f011 fb47 	bl	1b060 <String::operator=(char const*)>
              tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    99d2:	f240 71ff 	movw	r1, #2047	; 0x7ff
    99d6:	489d      	ldr	r0, [pc, #628]	; (9c4c <loop+0x2a24>)
    99d8:	f00d fd82 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    99dc:	2203      	movs	r2, #3
    99de:	489b      	ldr	r0, [pc, #620]	; (9c4c <loop+0x2a24>)
    99e0:	4611      	mov	r1, r2
    99e2:	f00d fd71 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    99e6:	a909      	add	r1, sp, #36	; 0x24
    99e8:	4898      	ldr	r0, [pc, #608]	; (9c4c <loop+0x2a24>)
    99ea:	f011 f931 	bl	1ac50 <Print::print(String const&)>
    99ee:	4897      	ldr	r0, [pc, #604]	; (9c4c <loop+0x2a24>)
    99f0:	f011 f960 	bl	1acb4 <Print::println()>
              tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intTuneOffset + str3);
    99f4:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    99f8:	4894      	ldr	r0, [pc, #592]	; (9c4c <loop+0x2a24>)
    99fa:	f00d fd71 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    99fe:	2203      	movs	r2, #3
    9a00:	4892      	ldr	r0, [pc, #584]	; (9c4c <loop+0x2a24>)
    9a02:	4611      	mov	r1, r2
    9a04:	f00d fd60 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    9a08:	a90c      	add	r1, sp, #48	; 0x30
    9a0a:	a815      	add	r0, sp, #84	; 0x54
    9a0c:	f011 fa80 	bl	1af10 <String::String(String const&)>
    9a10:	6829      	ldr	r1, [r5, #0]
    9a12:	a815      	add	r0, sp, #84	; 0x54
    9a14:	f011 fb9c 	bl	1b150 <operator+(StringSumHelper const&, int)>
    9a18:	a90f      	add	r1, sp, #60	; 0x3c
    9a1a:	f011 fb83 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9a1e:	4601      	mov	r1, r0
    9a20:	488a      	ldr	r0, [pc, #552]	; (9c4c <loop+0x2a24>)
    9a22:	f011 f915 	bl	1ac50 <Print::print(String const&)>
    9a26:	4889      	ldr	r0, [pc, #548]	; (9c4c <loop+0x2a24>)
    9a28:	f011 f944 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    9a2c:	a815      	add	r0, sp, #84	; 0x54
    9a2e:	f011 fa8b 	bl	1af48 <String::~String()>
          if (intMode == 9) //FM DEVIATION
    9a32:	6820      	ldr	r0, [r4, #0]
    9a34:	f7fe bab7 	b.w	7fa6 <loop+0xd7e>
              intFadeRatePtr = intFadeRatePtr + (lngENC1New - lngENC1Old);
    9a38:	4a85      	ldr	r2, [pc, #532]	; (9c50 <loop+0x2a28>)
    9a3a:	6831      	ldr	r1, [r6, #0]
    9a3c:	683b      	ldr	r3, [r7, #0]
    9a3e:	1a5b      	subs	r3, r3, r1
    9a40:	6811      	ldr	r1, [r2, #0]
    9a42:	440b      	add	r3, r1
              if (intFadeRatePtr > 8) {intFadeRatePtr = 8;} //Hold at stops
    9a44:	2b08      	cmp	r3, #8
              intFadeRatePtr = intFadeRatePtr + (lngENC1New - lngENC1Old);
    9a46:	6013      	str	r3, [r2, #0]
              if (intFadeRatePtr > 8) {intFadeRatePtr = 8;} //Hold at stops
    9a48:	f300 8557 	bgt.w	a4fa <loop+0x32d2>
              if  (intFadeRatePtr < 0) {intFadeRatePtr = 0;}
    9a4c:	2b00      	cmp	r3, #0
    9a4e:	f280 8741 	bge.w	a8d4 <loop+0x36ac>
    9a52:	2300      	movs	r3, #0
    9a54:	eddf 7a7f 	vldr	s15, [pc, #508]	; 9c54 <loop+0x2a2c>
    9a58:	6013      	str	r3, [r2, #0]
              fltFadeRate = 10 * fltLogs[intFadeRatePtr];// Range 0, .1 to 20 [Log]
    9a5a:	4d7f      	ldr	r5, [pc, #508]	; (9c58 <loop+0x2a30>)
              str1 = chrModes[intMode]; str2 = "    " ; str3 = " Hz";
    9a5c:	a809      	add	r0, sp, #36	; 0x24
    9a5e:	497f      	ldr	r1, [pc, #508]	; (9c5c <loop+0x2a34>)
              fltFadeRate = 10 * fltLogs[intFadeRatePtr];// Range 0, .1 to 20 [Log]
    9a60:	edc5 7a00 	vstr	s15, [r5]
              str1 = chrModes[intMode]; str2 = "    " ; str3 = " Hz";
    9a64:	f011 fafc 	bl	1b060 <String::operator=(char const*)>
    9a68:	4976      	ldr	r1, [pc, #472]	; (9c44 <loop+0x2a1c>)
    9a6a:	a80c      	add	r0, sp, #48	; 0x30
    9a6c:	f011 faf8 	bl	1b060 <String::operator=(char const*)>
    9a70:	4975      	ldr	r1, [pc, #468]	; (9c48 <loop+0x2a20>)
    9a72:	a80f      	add	r0, sp, #60	; 0x3c
    9a74:	f011 faf4 	bl	1b060 <String::operator=(char const*)>
              tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    9a78:	f240 71ff 	movw	r1, #2047	; 0x7ff
    9a7c:	4873      	ldr	r0, [pc, #460]	; (9c4c <loop+0x2a24>)
    9a7e:	f00d fd2f 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    9a82:	2203      	movs	r2, #3
    9a84:	4871      	ldr	r0, [pc, #452]	; (9c4c <loop+0x2a24>)
    9a86:	4611      	mov	r1, r2
    9a88:	f00d fd1e 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    9a8c:	a909      	add	r1, sp, #36	; 0x24
    9a8e:	486f      	ldr	r0, [pc, #444]	; (9c4c <loop+0x2a24>)
    9a90:	f011 f8de 	bl	1ac50 <Print::print(String const&)>
    9a94:	486d      	ldr	r0, [pc, #436]	; (9c4c <loop+0x2a24>)
    9a96:	f011 f90d 	bl	1acb4 <Print::println()>
              tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(fltFadeRate)  + str3);
    9a9a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    9a9e:	486b      	ldr	r0, [pc, #428]	; (9c4c <loop+0x2a24>)
    9aa0:	f00d fd1e 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    9aa4:	2203      	movs	r2, #3
    9aa6:	4869      	ldr	r0, [pc, #420]	; (9c4c <loop+0x2a24>)
    9aa8:	4611      	mov	r1, r2
    9aaa:	f00d fd0d 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    9aae:	a90c      	add	r1, sp, #48	; 0x30
    9ab0:	a815      	add	r0, sp, #84	; 0x54
    9ab2:	f011 fa2d 	bl	1af10 <String::String(String const&)>
    9ab6:	ed95 0a00 	vldr	s0, [r5]
    9aba:	2102      	movs	r1, #2
    9abc:	a812      	add	r0, sp, #72	; 0x48
    9abe:	f011 fa95 	bl	1afec <String::String(float, unsigned char)>
    9ac2:	a912      	add	r1, sp, #72	; 0x48
    9ac4:	a815      	add	r0, sp, #84	; 0x54
    9ac6:	f011 fb2d 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9aca:	a90f      	add	r1, sp, #60	; 0x3c
    9acc:	f011 fb2a 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9ad0:	4601      	mov	r1, r0
    9ad2:	485e      	ldr	r0, [pc, #376]	; (9c4c <loop+0x2a24>)
    9ad4:	f011 f8bc 	bl	1ac50 <Print::print(String const&)>
    9ad8:	485c      	ldr	r0, [pc, #368]	; (9c4c <loop+0x2a24>)
    9ada:	f011 f8eb 	bl	1acb4 <Print::println()>
    9ade:	a812      	add	r0, sp, #72	; 0x48
    9ae0:	f011 fa32 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    9ae4:	a815      	add	r0, sp, #84	; 0x54
    9ae6:	f011 fa2f 	bl	1af48 <String::~String()>
          if (intMode == 8)//OFFSET
    9aea:	6820      	ldr	r0, [r4, #0]
    9aec:	f7fe ba58 	b.w	7fa0 <loop+0xd78>
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    9af0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
            intBusyGain = intBusyGain + (lngENC1New - lngENC1Old);
    9af4:	4b5a      	ldr	r3, [pc, #360]	; (9c60 <loop+0x2a38>)
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    9af6:	ed93 6a00 	vldr	s12, [r3]
    9afa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    9afe:	ee86 7b05 	vdiv.f64	d7, d6, d5
    9b02:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    9b06:	f7fd bc8c 	b.w	7422 <loop+0x1fa>
    9b0a:	4b56      	ldr	r3, [pc, #344]	; (9c64 <loop+0x2a3c>)
    9b0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9b10:	e9c3 5508 	strd	r5, r5, [r3, #32]
    9b14:	e9c3 2206 	strd	r2, r2, [r3, #24]
    9b18:	f7fe bc5c 	b.w	83d4 <loop+0x11ac>
          if (intMode < 17)
    9b1c:	2e10      	cmp	r6, #16
              if ( ((intMode >= 1)&& (intMode <=4))  || ((intMode == 0) && (intTuneOffset == 0) && (intFMDevPtr ==0)) )
    9b1e:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
          intMode = intMode + (lngENC2New - lngENC2Old);
    9b22:	6026      	str	r6, [r4, #0]
          if (intMode < 17)
    9b24:	f77f a817 	ble.w	8b56 <loop+0x192e>
          if ((intMode >= 1) && (intMode <= 4))
    9b28:	2f03      	cmp	r7, #3
    9b2a:	f63d abaa 	bhi.w	7282 <loop+0x5a>
             SetIQTapDelays(intMode);
    9b2e:	4630      	mov	r0, r6
    9b30:	f7f9 f970 	bl	2e14 <SetIQTapDelays(int)>
              blnModes = true; 
    9b34:	4b4c      	ldr	r3, [pc, #304]	; (9c68 <loop+0x2a40>)
    9b36:	2201      	movs	r2, #1
    9b38:	701a      	strb	r2, [r3, #0]
    9b3a:	f7fd bba2 	b.w	7282 <loop+0x5a>
        intBusyBWHiHz = intBusyBWHiHz + intBusyFreqStep * (lngENC1New - lngENC1Old);
    9b3e:	683a      	ldr	r2, [r7, #0]
    9b40:	6833      	ldr	r3, [r6, #0]
    9b42:	4f4a      	ldr	r7, [pc, #296]	; (9c6c <loop+0x2a44>)
    9b44:	1ad2      	subs	r2, r2, r3
    9b46:	4b4a      	ldr	r3, [pc, #296]	; (9c70 <loop+0x2a48>)
    9b48:	6819      	ldr	r1, [r3, #0]
    9b4a:	683b      	ldr	r3, [r7, #0]
    9b4c:	fb01 3302 	mla	r3, r1, r2, r3
        if (intBusyBWHiHz > 3300) {intBusyBWHiHz = (intBusyBWLoHz + 300);} //Circular wrap around
    9b50:	f640 42e4 	movw	r2, #3300	; 0xce4
    9b54:	4293      	cmp	r3, r2
        intBusyBWHiHz = intBusyBWHiHz + intBusyFreqStep * (lngENC1New - lngENC1Old);
    9b56:	603b      	str	r3, [r7, #0]
        if (intBusyBWHiHz > 3300) {intBusyBWHiHz = (intBusyBWLoHz + 300);} //Circular wrap around
    9b58:	dc4c      	bgt.n	9bf4 <loop+0x29cc>
        intBusyBWLoHz = intBusyBWLoHz + intBusyFreqStep * (lngENC1New - lngENC1Old);
    9b5a:	4a46      	ldr	r2, [pc, #280]	; (9c74 <loop+0x2a4c>)
    9b5c:	6812      	ldr	r2, [r2, #0]
        if (intBusyBWHiHz < (intBusyBWLoHz + 300)) {intBusyBWHiHz = 3300;}
    9b5e:	f202 122b 	addw	r2, r2, #299	; 0x12b
    9b62:	429a      	cmp	r2, r3
    9b64:	f6fe aa57 	blt.w	8016 <loop+0xdee>
    9b68:	f640 43e4 	movw	r3, #3300	; 0xce4
        intAvg = intAvg + (lngENC1New - lngENC1Old);
    9b6c:	4e42      	ldr	r6, [pc, #264]	; (9c78 <loop+0x2a50>)
        if (intBusyBWHiHz < (intBusyBWLoHz + 300)) {intBusyBWHiHz = 3300;}
    9b6e:	603b      	str	r3, [r7, #0]
        intAvg = intAvg + (lngENC1New - lngENC1Old);
    9b70:	6833      	ldr	r3, [r6, #0]
    9b72:	f7fe b99e 	b.w	7eb2 <loop+0xc8a>
      || ((intMode == 1) && ((ulngCurrentElapsedTimeUs - ulngLastDelayUpdateUs) >= (156250)))) //Every 156.25ms MPG
    9b76:	2a01      	cmp	r2, #1
    9b78:	f040 8714 	bne.w	a9a4 <loop+0x377c>
    9b7c:	6833      	ldr	r3, [r6, #0]
    9b7e:	493f      	ldr	r1, [pc, #252]	; (9c7c <loop+0x2a54>)
    9b80:	1ac7      	subs	r7, r0, r3
    9b82:	428f      	cmp	r7, r1
    9b84:	f67d af0d 	bls.w	79a2 <loop+0x77a>
    9b88:	f7fd be92 	b.w	78b0 <loop+0x688>
			uint32_t elapsed = systick_millis_count - millis_begin;
    9b8c:	f8db 3000 	ldr.w	r3, [fp]
			if (usb_configuration) {
    9b90:	782a      	ldrb	r2, [r5, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    9b92:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    9b94:	b13a      	cbz	r2, 9ba6 <loop+0x297e>
				if (elapsed > 2000) break;
    9b96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    9b9a:	f63e ab46 	bhi.w	822a <loop+0x1002>
			yield();
    9b9e:	f013 fd1b 	bl	1d5d8 <yield>
    9ba2:	f7fe bb30 	b.w	8206 <loop+0xfde>
				if (elapsed > 750) break;
    9ba6:	4553      	cmp	r3, sl
    9ba8:	d9f9      	bls.n	9b9e <loop+0x2976>
    9baa:	f7fe bb3e 	b.w	822a <loop+0x1002>
          float fltrmsNoiseRead = 1000 * rmsNoise.read(); 
    9bae:	f001 f883 	bl	acb8 <AudioAnalyzeRMS::read()>
          if (intBandwidth != intLastBandwidth)//This mechanism speeds up acquistion on Bandwidth/filters change then smooths with slow averaging. 
    9bb2:	4b33      	ldr	r3, [pc, #204]	; (9c80 <loop+0x2a58>)
    9bb4:	4a33      	ldr	r2, [pc, #204]	; (9c84 <loop+0x2a5c>)
    9bb6:	681b      	ldr	r3, [r3, #0]
    9bb8:	6811      	ldr	r1, [r2, #0]
    9bba:	428b      	cmp	r3, r1
    9bbc:	f000 82f0 	beq.w	a1a0 <loop+0x2f78>
              intLastBandwidth = intBandwidth;
    9bc0:	6013      	str	r3, [r2, #0]
              if (intBandwidth == 3000){fltrmsNoiseAvg = 235;}// 3KHz bandwidth 
    9bc2:	f640 32b8 	movw	r2, #3000	; 0xbb8
    9bc6:	eddf 7a30 	vldr	s15, [pc, #192]	; 9c88 <loop+0x2a60>
    9bca:	4293      	cmp	r3, r2
    9bcc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 9c8c <loop+0x2a64>
    9bd0:	4b2f      	ldr	r3, [pc, #188]	; (9c90 <loop+0x2a68>)
    9bd2:	fe47 7a27 	vseleq.f32	s15, s14, s15
    9bd6:	edc3 7a00 	vstr	s15, [r3]
              intLastBandwidth = intBandwidth;
    9bda:	f7fd bccc 	b.w	7576 <loop+0x34e>
        if (intBusyBWLoHz < 300) {intBusyBWLoHz = (intBusyBWHiHz - 300);}
    9bde:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    9be2:	f6be aa18 	bge.w	8016 <loop+0xdee>
    9be6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
        intAvg = intAvg + (lngENC1New - lngENC1Old);
    9bea:	4e23      	ldr	r6, [pc, #140]	; (9c78 <loop+0x2a50>)
        if (intBusyBWLoHz < 300) {intBusyBWLoHz = (intBusyBWHiHz - 300);}
    9bec:	6010      	str	r0, [r2, #0]
        intAvg = intAvg + (lngENC1New - lngENC1Old);
    9bee:	6833      	ldr	r3, [r6, #0]
    9bf0:	f7fe b95f 	b.w	7eb2 <loop+0xc8a>
        if (intBusyBWHiHz > 3300) {intBusyBWHiHz = (intBusyBWLoHz + 300);} //Circular wrap around
    9bf4:	4b1f      	ldr	r3, [pc, #124]	; (9c74 <loop+0x2a4c>)
    9bf6:	681a      	ldr	r2, [r3, #0]
    9bf8:	f502 7396 	add.w	r3, r2, #300	; 0x12c
    9bfc:	603b      	str	r3, [r7, #0]
    9bfe:	e7ae      	b.n	9b5e <loop+0x2936>
        if (intAvg > 50) { intAvg = 1;} //Circular wrap around
    9c00:	2301      	movs	r3, #1
    9c02:	6033      	str	r3, [r6, #0]
    if (intAvg < 1) 
    9c04:	f7fe b959 	b.w	7eba <loop+0xc92>
              if(fltppLPInputPk > peaklevel)
    9c08:	eef4 7ac7 	vcmpe.f32	s15, s14
    9c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9c10:	f77e aef3 	ble.w	89fa <loop+0x17d2>
                peaklevel = fltppLPInputPk;
    9c14:	4b1f      	ldr	r3, [pc, #124]	; (9c94 <loop+0x2a6c>)
    9c16:	edc3 7a00 	vstr	s15, [r3]
                fltppLPInputMeasAvg = peaklevel;
    9c1a:	4b1f      	ldr	r3, [pc, #124]	; (9c98 <loop+0x2a70>)
    9c1c:	edc3 7a00 	vstr	s15, [r3]
    9c20:	f7fe beeb 	b.w	89fa <loop+0x17d2>
    9c24:	20012cbc 	.word	0x20012cbc
    9c28:	45f6e000 	.word	0x45f6e000
    9c2c:	200134f0 	.word	0x200134f0
    9c30:	47be37c6 	.word	0x47be37c6
    9c34:	200134a4 	.word	0x200134a4
    9c38:	200134cc 	.word	0x200134cc
    9c3c:	2cb2cb00 	.word	0x2cb2cb00
    9c40:	200034f0 	.word	0x200034f0
    9c44:	20005700 	.word	0x20005700
    9c48:	200034ec 	.word	0x200034ec
    9c4c:	2001355c 	.word	0x2001355c
    9c50:	20009a2c 	.word	0x20009a2c
    9c54:	00000000 	.word	0x00000000
    9c58:	20012c0c 	.word	0x20012c0c
    9c5c:	200034d8 	.word	0x200034d8
    9c60:	20009a20 	.word	0x20009a20
    9c64:	20012d40 	.word	0x20012d40
    9c68:	20009cb9 	.word	0x20009cb9
    9c6c:	20009a18 	.word	0x20009a18
    9c70:	20009a1c 	.word	0x20009a1c
    9c74:	20012c90 	.word	0x20012c90
    9c78:	20009a0c 	.word	0x20009a0c
    9c7c:	00026259 	.word	0x00026259
    9c80:	20009a10 	.word	0x20009a10
    9c84:	20009a40 	.word	0x20009a40
    9c88:	439c8000 	.word	0x439c8000
    9c8c:	436b0000 	.word	0x436b0000
    9c90:	20012c4c 	.word	0x20012c4c
    9c94:	2000c7b8 	.word	0x2000c7b8
    9c98:	20012c30 	.word	0x20012c30
    9c9c:	46fffe00 	.word	0x46fffe00
		__disable_irq();
    9ca0:	b672      	cpsid	i
		min_sample = 32767;
    9ca2:	f647 72ff 	movw	r2, #32767	; 0x7fff
		max_sample = -32768;
    9ca6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		int min = min_sample;
    9caa:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
		min_sample = 32767;
    9cae:	83f2      	strh	r2, [r6, #30]
		int max = max_sample;
    9cb0:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
		max_sample = -32768;
    9cb4:	8430      	strh	r0, [r6, #32]
		__enable_irq();
    9cb6:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    9cb8:	1a52      	subs	r2, r2, r1
    9cba:	ed5f 3a08 	vldr	s7, [pc, #-32]	; 9c9c <loop+0x2a74>
        else {fltppi2s1InAvg = (.9 * fltppi2s1InAvg) +  100.0 * ppi2s1In.readPeakToPeak();} //Fast time constant for ppi2s1In  average
    9cbe:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    9cc2:	ee07 2a90 	vmov	s15, r2
    9cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9cca:	ed9f 4bb7 	vldr	d4, [pc, #732]	; 9fa8 <loop+0x2d80>
    9cce:	ee87 7aa3 	vdiv.f32	s14, s15, s7
    9cd2:	ed9f 5bb7 	vldr	d5, [pc, #732]	; 9fb0 <loop+0x2d88>
    9cd6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    9cda:	ee27 7b04 	vmul.f64	d7, d7, d4
    9cde:	eea6 7b05 	vfma.f64	d7, d6, d5
    9ce2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    9ce6:	ed83 7a00 	vstr	s14, [r3]
    9cea:	f7fd bdce 	b.w	788a <loop+0x662>
                      if (intSerialCmdMode < 5){ ParseSetParameter(strParameter, intSerialCmdMode);}
    9cee:	4639      	mov	r1, r7
    9cf0:	a815      	add	r0, sp, #84	; 0x54
    9cf2:	f011 f90d 	bl	1af10 <String::String(String const&)>
    9cf6:	6821      	ldr	r1, [r4, #0]
    9cf8:	a815      	add	r0, sp, #84	; 0x54
    9cfa:	f7fa fda1 	bl	4840 <ParseSetParameter(String, int)>
    9cfe:	a815      	add	r0, sp, #84	; 0x54
    9d00:	f011 f922 	bl	1af48 <String::~String()>
    9d04:	f7fd bfb2 	b.w	7c6c <loop+0xa44>
            if (intBusyGain < 0) {intBusyGain = 0;} //Stop at limits
    9d08:	2a00      	cmp	r2, #0
    9d0a:	f280 85ad 	bge.w	a868 <loop+0x3640>
    9d0e:	602b      	str	r3, [r5, #0]
		if (gain > 32767.0f) gain = 32767.0f;
    9d10:	f7fe b8ba 	b.w	7e88 <loop+0xc60>
            intBaudPtr = intBaudPtr + (lngENC1New - lngENC1Old);
    9d14:	6832      	ldr	r2, [r6, #0]
    9d16:	683b      	ldr	r3, [r7, #0]
    9d18:	4da7      	ldr	r5, [pc, #668]	; (9fb8 <loop+0x2d90>)
    9d1a:	1a9b      	subs	r3, r3, r2
    9d1c:	682a      	ldr	r2, [r5, #0]
    9d1e:	4413      	add	r3, r2
            if (intBaudPtr > 6) {intBaudPtr = 6;} //Hold at stops
    9d20:	2b06      	cmp	r3, #6
    9d22:	f300 8439 	bgt.w	a598 <loop+0x3370>
            if (intBaudPtr < 0) {intBaudPtr = 0;}
    9d26:	2b00      	cmp	r3, #0
    9d28:	bfb8      	it	lt
    9d2a:	2300      	movlt	r3, #0
    9d2c:	602b      	str	r3, [r5, #0]
            str1 = chrModes[intMode]; str2 = "    " ; str3 = " Baud";
    9d2e:	49a3      	ldr	r1, [pc, #652]	; (9fbc <loop+0x2d94>)
    9d30:	a809      	add	r0, sp, #36	; 0x24
    9d32:	f011 f995 	bl	1b060 <String::operator=(char const*)>
    9d36:	49a2      	ldr	r1, [pc, #648]	; (9fc0 <loop+0x2d98>)
    9d38:	a80c      	add	r0, sp, #48	; 0x30
    9d3a:	f011 f991 	bl	1b060 <String::operator=(char const*)>
    9d3e:	49a1      	ldr	r1, [pc, #644]	; (9fc4 <loop+0x2d9c>)
    9d40:	a80f      	add	r0, sp, #60	; 0x3c
    9d42:	f011 f98d 	bl	1b060 <String::operator=(char const*)>
            tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3);  tft.println(str1);
    9d46:	f240 71ff 	movw	r1, #2047	; 0x7ff
    9d4a:	489f      	ldr	r0, [pc, #636]	; (9fc8 <loop+0x2da0>)
    9d4c:	f00d fbc8 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    9d50:	2203      	movs	r2, #3
    9d52:	489d      	ldr	r0, [pc, #628]	; (9fc8 <loop+0x2da0>)
    9d54:	4611      	mov	r1, r2
    9d56:	f00d fbb7 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    9d5a:	a909      	add	r1, sp, #36	; 0x24
    9d5c:	489a      	ldr	r0, [pc, #616]	; (9fc8 <loop+0x2da0>)
    9d5e:	f010 ff77 	bl	1ac50 <Print::print(String const&)>
    9d62:	4899      	ldr	r0, [pc, #612]	; (9fc8 <loop+0x2da0>)
    9d64:	f010 ffa6 	bl	1acb4 <Print::println()>
            tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(intBaudRate[intBaudPtr]) + str3);
    9d68:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    9d6c:	4896      	ldr	r0, [pc, #600]	; (9fc8 <loop+0x2da0>)
    9d6e:	f00d fbb7 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    9d72:	2203      	movs	r2, #3
    9d74:	4894      	ldr	r0, [pc, #592]	; (9fc8 <loop+0x2da0>)
    9d76:	4611      	mov	r1, r2
    9d78:	f00d fba6 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    9d7c:	a90c      	add	r1, sp, #48	; 0x30
    9d7e:	a815      	add	r0, sp, #84	; 0x54
    9d80:	f011 f8c6 	bl	1af10 <String::String(String const&)>
    9d84:	4b91      	ldr	r3, [pc, #580]	; (9fcc <loop+0x2da4>)
    9d86:	682a      	ldr	r2, [r5, #0]
    9d88:	a812      	add	r0, sp, #72	; 0x48
    9d8a:	4d91      	ldr	r5, [pc, #580]	; (9fd0 <loop+0x2da8>)
    9d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9d90:	220a      	movs	r2, #10
    9d92:	f011 f915 	bl	1afc0 <String::String(int, unsigned char)>
    9d96:	a912      	add	r1, sp, #72	; 0x48
    9d98:	a815      	add	r0, sp, #84	; 0x54
    9d9a:	f011 f9c3 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9d9e:	a90f      	add	r1, sp, #60	; 0x3c
    9da0:	f011 f9c0 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9da4:	4601      	mov	r1, r0
    9da6:	4888      	ldr	r0, [pc, #544]	; (9fc8 <loop+0x2da0>)
    9da8:	f010 ff52 	bl	1ac50 <Print::print(String const&)>
    9dac:	4886      	ldr	r0, [pc, #536]	; (9fc8 <loop+0x2da0>)
    9dae:	f010 ff81 	bl	1acb4 <Print::println()>
    9db2:	a812      	add	r0, sp, #72	; 0x48
    9db4:	f011 f8c8 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    9db8:	a815      	add	r0, sp, #84	; 0x54
    9dba:	f011 f8c5 	bl	1af48 <String::~String()>
		uint32_t millis_begin = systick_millis_count;
    9dbe:	f8db a000 	ldr.w	sl, [fp]
		yield();
    9dc2:	f013 fc09 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    9dc6:	782b      	ldrb	r3, [r5, #0]
    9dc8:	2b00      	cmp	r3, #0
    9dca:	f000 84af 	beq.w	a72c <loop+0x3504>
    9dce:	4b81      	ldr	r3, [pc, #516]	; (9fd4 <loop+0x2dac>)
    9dd0:	781b      	ldrb	r3, [r3, #0]
    9dd2:	07d8      	lsls	r0, r3, #31
    9dd4:	f140 84aa 	bpl.w	a72c <loop+0x3504>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    9dd8:	4a7f      	ldr	r2, [pc, #508]	; (9fd8 <loop+0x2db0>)
    9dda:	f8db 3000 	ldr.w	r3, [fp]
    9dde:	6812      	ldr	r2, [r2, #0]
    9de0:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    9de2:	2b0e      	cmp	r3, #14
    9de4:	f240 84a2 	bls.w	a72c <loop+0x3504>
        if (intMode == 17)//TEST3K (Sine)
    9de8:	6820      	ldr	r0, [r4, #0]
    9dea:	f7fe b8f2 	b.w	7fd2 <loop+0xdaa>
            if ((lngENC1New - lngENC1Old) >0){intBandwidth = 6000;}
    9dee:	683b      	ldr	r3, [r7, #0]
    9df0:	6832      	ldr	r2, [r6, #0]
    9df2:	4d7a      	ldr	r5, [pc, #488]	; (9fdc <loop+0x2db4>)
    9df4:	1a9b      	subs	r3, r3, r2
    9df6:	2b00      	cmp	r3, #0
    9df8:	f340 84cd 	ble.w	a796 <loop+0x356e>
    9dfc:	f241 7370 	movw	r3, #6000	; 0x1770
    9e00:	602b      	str	r3, [r5, #0]
            str1 = chrModes[intMode]; str2 = "    " ; str3 = " Hz";
    9e02:	4977      	ldr	r1, [pc, #476]	; (9fe0 <loop+0x2db8>)
    9e04:	a809      	add	r0, sp, #36	; 0x24
    9e06:	f011 f92b 	bl	1b060 <String::operator=(char const*)>
    9e0a:	496d      	ldr	r1, [pc, #436]	; (9fc0 <loop+0x2d98>)
    9e0c:	a80c      	add	r0, sp, #48	; 0x30
    9e0e:	f011 f927 	bl	1b060 <String::operator=(char const*)>
    9e12:	4974      	ldr	r1, [pc, #464]	; (9fe4 <loop+0x2dbc>)
    9e14:	a80f      	add	r0, sp, #60	; 0x3c
    9e16:	f011 f923 	bl	1b060 <String::operator=(char const*)>
            tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3); tft.println(str1);
    9e1a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    9e1e:	486a      	ldr	r0, [pc, #424]	; (9fc8 <loop+0x2da0>)
    9e20:	f00d fb5e 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    9e24:	2203      	movs	r2, #3
    9e26:	4868      	ldr	r0, [pc, #416]	; (9fc8 <loop+0x2da0>)
    9e28:	4611      	mov	r1, r2
    9e2a:	f00d fb4d 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    9e2e:	a909      	add	r1, sp, #36	; 0x24
    9e30:	4865      	ldr	r0, [pc, #404]	; (9fc8 <loop+0x2da0>)
    9e32:	f010 ff0d 	bl	1ac50 <Print::print(String const&)>
    9e36:	4864      	ldr	r0, [pc, #400]	; (9fc8 <loop+0x2da0>)
    9e38:	f010 ff3c 	bl	1acb4 <Print::println()>
            tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + intBandwidth + str3);
    9e3c:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    9e40:	4861      	ldr	r0, [pc, #388]	; (9fc8 <loop+0x2da0>)
    9e42:	f00d fb4d 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    9e46:	2203      	movs	r2, #3
    9e48:	485f      	ldr	r0, [pc, #380]	; (9fc8 <loop+0x2da0>)
    9e4a:	4611      	mov	r1, r2
    9e4c:	f00d fb3c 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    9e50:	a90c      	add	r1, sp, #48	; 0x30
    9e52:	a815      	add	r0, sp, #84	; 0x54
    9e54:	f011 f85c 	bl	1af10 <String::String(String const&)>
    9e58:	6829      	ldr	r1, [r5, #0]
    9e5a:	a815      	add	r0, sp, #84	; 0x54
    9e5c:	f011 f978 	bl	1b150 <operator+(StringSumHelper const&, int)>
    9e60:	a90f      	add	r1, sp, #60	; 0x3c
    9e62:	f011 f95f 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    9e66:	4601      	mov	r1, r0
    9e68:	4857      	ldr	r0, [pc, #348]	; (9fc8 <loop+0x2da0>)
    9e6a:	f010 fef1 	bl	1ac50 <Print::print(String const&)>
    9e6e:	4856      	ldr	r0, [pc, #344]	; (9fc8 <loop+0x2da0>)
    9e70:	f010 ff20 	bl	1acb4 <Print::println()>
class StringSumHelper : public String
    9e74:	a815      	add	r0, sp, #84	; 0x54
    9e76:	f011 f867 	bl	1af48 <String::~String()>
            SetFilterBandwidth(intBandwidth);// Sets filters and parameters for correct bandwidth 3000 or 6000 Hz
    9e7a:	6828      	ldr	r0, [r5, #0]
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
    9e7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
    9e80:	4298      	cmp	r0, r3
    9e82:	d006      	beq.n	9e92 <loop+0x2c6a>
    9e84:	f241 7370 	movw	r3, #6000	; 0x1770
    9e88:	4298      	cmp	r0, r3
    9e8a:	d002      	beq.n	9e92 <loop+0x2c6a>
        if (intMode == 16)//SERIAL
    9e8c:	6820      	ldr	r0, [r4, #0]
    9e8e:	f7fe b89d 	b.w	7fcc <loop+0xda4>
    9e92:	f7f6 f949 	bl	128 <SetFilterBandwidth(int) [clone .part.0]>
    9e96:	e7f9      	b.n	9e8c <loop+0x2c64>
              if (intTargetSN < intMinSN) 
    9e98:	f113 0f28 	cmn.w	r3, #40	; 0x28
                  intTargetSN = intMinSN;
    9e9c:	bfb8      	it	lt
    9e9e:	f06f 0327 	mvnlt.w	r3, #39	; 0x27
    9ea2:	602b      	str	r3, [r5, #0]
    9ea4:	f7fe b834 	b.w	7f10 <loop+0xce8>
                  SetIQTapDelays(intMode);
    9ea8:	9007      	str	r0, [sp, #28]
    9eaa:	f7f8 ffb3 	bl	2e14 <SetIQTapDelays(int)>
    9eae:	9807      	ldr	r0, [sp, #28]
    9eb0:	f7fe b823 	b.w	7efa <loop+0xcd2>
    9eb4:	4b4c      	ldr	r3, [pc, #304]	; (9fe8 <loop+0x2dc0>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    9eb6:	6213      	str	r3, [r2, #32]
              mixInpSel.gain(0, 0); mixInpSel.gain(1, 0.0); mixInpSel.gain(2, 100 * fltLogs[intGainLevel[0]]); mixInpSel.gain(3, 100 * fltLogs[intGainLevel[1]]);
    9eb8:	f8da 3004 	ldr.w	r3, [sl, #4]
    9ebc:	eddf 6a4b 	vldr	s13, [pc, #300]	; 9fec <loop+0x2dc4>
    9ec0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		if (gain > 32767.0f) gain = 32767.0f;
    9ec4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 9ff0 <loop+0x2dc8>
    9ec8:	edd3 7a00 	vldr	s15, [r3]
    9ecc:	ee67 7aa6 	vmul.f32	s15, s15, s13
    9ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
    9ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ed8:	dc09      	bgt.n	9eee <loop+0x2cc6>
		else if (gain < -32767.0f) gain = -32767.0f;
    9eda:	ed9f 7a46 	vldr	s14, [pc, #280]	; 9ff4 <loop+0x2dcc>
    9ede:	eef4 7ac7 	vcmpe.f32	s15, s14
    9ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ee6:	f140 836c 	bpl.w	a5c2 <loop+0x339a>
    9eea:	4b43      	ldr	r3, [pc, #268]	; (9ff8 <loop+0x2dd0>)
    9eec:	e000      	b.n	9ef0 <loop+0x2cc8>
    9eee:	4b3e      	ldr	r3, [pc, #248]	; (9fe8 <loop+0x2dc0>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    9ef0:	6253      	str	r3, [r2, #36]	; 0x24
              ampLeftOut.gain(fltLogs[intGainLevel[2]]);//sets ampLeftOut gain (0-2 (log))
    9ef2:	f8da 3008 	ldr.w	r3, [sl, #8]
		if (n > 32767.0f) n = 32767.0f;
    9ef6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 9ff0 <loop+0x2dc8>
    9efa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9efe:	edd3 7a00 	vldr	s15, [r3]
    9f02:	eef4 7ac7 	vcmpe.f32	s15, s14
    9f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9f0a:	dc09      	bgt.n	9f20 <loop+0x2cf8>
		else if (n < -32767.0f) n = -32767.0f;
    9f0c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 9ff4 <loop+0x2dcc>
    9f10:	eef4 7ac7 	vcmpe.f32	s15, s14
    9f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9f18:	f140 834c 	bpl.w	a5b4 <loop+0x338c>
    9f1c:	4b36      	ldr	r3, [pc, #216]	; (9ff8 <loop+0x2dd0>)
    9f1e:	e000      	b.n	9f22 <loop+0x2cfa>
    9f20:	4b31      	ldr	r3, [pc, #196]	; (9fe8 <loop+0x2dc0>)
              ampRightOut.gain(fltLogs[intGainLevel[3]]);//sets ampRightOut gain (0-2 (log))
    9f22:	f8da 200c 	ldr.w	r2, [sl, #12]
		if (n > 32767.0f) n = 32767.0f;
    9f26:	ed9f 7a32 	vldr	s14, [pc, #200]	; 9ff0 <loop+0x2dc8>
    9f2a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    9f2e:	edd2 7a00 	vldr	s15, [r2]
		multiplier = n * 65536.0f;
    9f32:	4a32      	ldr	r2, [pc, #200]	; (9ffc <loop+0x2dd4>)
		if (n > 32767.0f) n = 32767.0f;
    9f34:	eef4 7ac7 	vcmpe.f32	s15, s14
		multiplier = n * 65536.0f;
    9f38:	6193      	str	r3, [r2, #24]
		if (n > 32767.0f) n = 32767.0f;
    9f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9f3e:	dc09      	bgt.n	9f54 <loop+0x2d2c>
		else if (n < -32767.0f) n = -32767.0f;
    9f40:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 9ff4 <loop+0x2dcc>
    9f44:	eef4 7ac7 	vcmpe.f32	s15, s14
    9f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9f4c:	f140 832b 	bpl.w	a5a6 <loop+0x337e>
    9f50:	4b29      	ldr	r3, [pc, #164]	; (9ff8 <loop+0x2dd0>)
    9f52:	e000      	b.n	9f56 <loop+0x2d2e>
    9f54:	4b24      	ldr	r3, [pc, #144]	; (9fe8 <loop+0x2dc0>)
		multiplier = n * 65536.0f;
    9f56:	4a2a      	ldr	r2, [pc, #168]	; (a000 <loop+0x2dd8>)
              if ( ((intMode >= 1)&& (intMode <=4))  || ((intMode == 0) && (intTuneOffset == 0) && (intFMDevPtr ==0)) )
    9f58:	2f03      	cmp	r7, #3
    9f5a:	6193      	str	r3, [r2, #24]
    9f5c:	d95e      	bls.n	a01c <loop+0x2df4>
    9f5e:	2e00      	cmp	r6, #0
    9f60:	f47d a98f 	bne.w	7282 <loop+0x5a>
    9f64:	4b27      	ldr	r3, [pc, #156]	; (a004 <loop+0x2ddc>)
    9f66:	4a28      	ldr	r2, [pc, #160]	; (a008 <loop+0x2de0>)
    9f68:	681b      	ldr	r3, [r3, #0]
    9f6a:	6812      	ldr	r2, [r2, #0]
    9f6c:	4313      	orrs	r3, r2
    9f6e:	f000 846e 	beq.w	a84e <loop+0x3626>
                  SetIQTapDelays(intMode);
    9f72:	4630      	mov	r0, r6
    9f74:	f7f8 ff4e 	bl	2e14 <SetIQTapDelays(int)>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    9f78:	4b24      	ldr	r3, [pc, #144]	; (a00c <loop+0x2de4>)
    9f7a:	f64d 128c 	movw	r2, #55692	; 0xd98c
                  mixIQ12.gain(0,0.0);mixIQ12.gain(1,.8498);mixIQ12.gain(2,0.0);mixIQ12.gain(3,0.0);SetIQTapDelays(intMode);
    9f7e:	4630      	mov	r0, r6
    9f80:	619e      	str	r6, [r3, #24]
    9f82:	61da      	str	r2, [r3, #28]
    9f84:	e9c3 6608 	strd	r6, r6, [r3, #32]
    9f88:	f7f8 ff44 	bl	2e14 <SetIQTapDelays(int)>
    9f8c:	4b20      	ldr	r3, [pc, #128]	; (a010 <loop+0x2de8>)
    9f8e:	4a21      	ldr	r2, [pc, #132]	; (a014 <loop+0x2dec>)
    9f90:	619e      	str	r6, [r3, #24]
    9f92:	61da      	str	r2, [r3, #28]
                  blnModes = true;
    9f94:	2201      	movs	r2, #1
    9f96:	e9c3 6608 	strd	r6, r6, [r3, #32]
    9f9a:	4b1f      	ldr	r3, [pc, #124]	; (a018 <loop+0x2df0>)
    9f9c:	701a      	strb	r2, [r3, #0]
    9f9e:	f7fd b970 	b.w	7282 <loop+0x5a>
    9fa2:	bf00      	nop
    9fa4:	f3af 8000 	nop.w
    9fa8:	00000000 	.word	0x00000000
    9fac:	40590000 	.word	0x40590000
    9fb0:	cccccccd 	.word	0xcccccccd
    9fb4:	3feccccc 	.word	0x3feccccc
    9fb8:	20009a14 	.word	0x20009a14
    9fbc:	200054d8 	.word	0x200054d8
    9fc0:	20005700 	.word	0x20005700
    9fc4:	200054ec 	.word	0x200054ec
    9fc8:	2001355c 	.word	0x2001355c
    9fcc:	20003728 	.word	0x20003728
    9fd0:	200136f9 	.word	0x200136f9
    9fd4:	200136f8 	.word	0x200136f8
    9fd8:	20013690 	.word	0x20013690
    9fdc:	20009a10 	.word	0x20009a10
    9fe0:	2000352c 	.word	0x2000352c
    9fe4:	200034ec 	.word	0x200034ec
    9fe8:	7fff0000 	.word	0x7fff0000
    9fec:	42c80000 	.word	0x42c80000
    9ff0:	46fffe00 	.word	0x46fffe00
    9ff4:	c6fffe00 	.word	0xc6fffe00
    9ff8:	80010000 	.word	0x80010000
    9ffc:	2000cad0 	.word	0x2000cad0
    a000:	2000caf0 	.word	0x2000caf0
    a004:	20012cbc 	.word	0x20012cbc
    a008:	20009a24 	.word	0x20009a24
    a00c:	20012d08 	.word	0x20012d08
    a010:	20012de8 	.word	0x20012de8
    a014:	000214f7 	.word	0x000214f7
    a018:	20009cb9 	.word	0x20009cb9
                  if (intMode == 0){mixIQ12.gain(0,0.0);mixIQ12.gain(1,.8498);mixIQ12.gain(2,0.0);mixIQ12.gain(3,0.0);};
    a01c:	2e00      	cmp	r6, #0
    a01e:	f000 8416 	beq.w	a84e <loop+0x3626>
                  SetIQTapDelays(intMode);
    a022:	4630      	mov	r0, r6
    a024:	f7f8 fef6 	bl	2e14 <SetIQTapDelays(int)>
    a028:	4baf      	ldr	r3, [pc, #700]	; (a2e8 <loop+0x30c0>)
    a02a:	2200      	movs	r2, #0
                  SetIQTapDelays(intMode);
    a02c:	4630      	mov	r0, r6
    a02e:	e9c3 2207 	strd	r2, r2, [r3, #28]
    a032:	625a      	str	r2, [r3, #36]	; 0x24
    a034:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    a038:	619a      	str	r2, [r3, #24]
    a03a:	f7f8 feeb 	bl	2e14 <SetIQTapDelays(int)>
                  blnModes = true;
    a03e:	4bab      	ldr	r3, [pc, #684]	; (a2ec <loop+0x30c4>)
    a040:	2201      	movs	r2, #1
    a042:	701a      	strb	r2, [r3, #0]
    a044:	e570      	b.n	9b28 <loop+0x2900>
            if (intGainLevel[intMode - 11] > 8) { intGainLevel[intMode - 11] = 8;} //Hold at stops
    a046:	f8df a318 	ldr.w	sl, [pc, #792]	; a360 <loop+0x3138>
            intGainLevel[intMode - 11] = intGainLevel[intMode - 11] + (lngENC1New - lngENC1Old);
    a04a:	6832      	ldr	r2, [r6, #0]
    a04c:	683b      	ldr	r3, [r7, #0]
		if (n > 32767.0f) n = 32767.0f;
    a04e:	ed9f 7aa8 	vldr	s14, [pc, #672]	; a2f0 <loop+0x30c8>
    a052:	1a9b      	subs	r3, r3, r2
    a054:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
            if (intMode == 13){ampLeftOut.gain(fltLogs[ intGainLevel[intMode - 11]]); }//sets ampLeftOut gain (0-2) (log))
    a058:	4da6      	ldr	r5, [pc, #664]	; (a2f4 <loop+0x30cc>)
            intGainLevel[intMode - 11] = intGainLevel[intMode - 11] + (lngENC1New - lngENC1Old);
    a05a:	4413      	add	r3, r2
    a05c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a060:	2b08      	cmp	r3, #8
    a062:	bfa8      	it	ge
    a064:	2308      	movge	r3, #8
            if (intMode == 13){ampLeftOut.gain(fltLogs[ intGainLevel[intMode - 11]]); }//sets ampLeftOut gain (0-2) (log))
    a066:	280d      	cmp	r0, #13
    a068:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
    a06c:	f000 82fa 	beq.w	a664 <loop+0x343c>
            if (intMode == 14){ampRightOut.gain(fltLogs[ intGainLevel[intMode - 11]]); }//sets ampRightOut gain (0-2) (log)) 
    a070:	f8da 300c 	ldr.w	r3, [sl, #12]
    a074:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    a078:	edd3 7a00 	vldr	s15, [r3]
    a07c:	eef4 7ac7 	vcmpe.f32	s15, s14
    a080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a084:	f300 8423 	bgt.w	a8ce <loop+0x36a6>
		else if (n < -32767.0f) n = -32767.0f;
    a088:	ed9f 7a9b 	vldr	s14, [pc, #620]	; a2f8 <loop+0x30d0>
    a08c:	eef4 7ac7 	vcmpe.f32	s15, s14
    a090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a094:	f100 8476 	bmi.w	a984 <loop+0x375c>
		multiplier = n * 65536.0f;
    a098:	eeb0 7a67 	vmov.f32	s14, s15
    a09c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    a0a0:	ee17 3a10 	vmov	r3, s14
    a0a4:	4a95      	ldr	r2, [pc, #596]	; (a2fc <loop+0x30d4>)
    a0a6:	6193      	str	r3, [r2, #24]
            str1 = chrModes[intMode]; str2 = "    " ;
    a0a8:	4b95      	ldr	r3, [pc, #596]	; (a300 <loop+0x30d8>)
    a0aa:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    a0ae:	a809      	add	r0, sp, #36	; 0x24
    a0b0:	f010 ffd6 	bl	1b060 <String::operator=(char const*)>
    a0b4:	4993      	ldr	r1, [pc, #588]	; (a304 <loop+0x30dc>)
    a0b6:	a80c      	add	r0, sp, #48	; 0x30
    a0b8:	f010 ffd2 	bl	1b060 <String::operator=(char const*)>
            tft.setTextColor(ST7735_CYAN);   tft.setTextSize(3); tft.println(str1);
    a0bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
    a0c0:	4891      	ldr	r0, [pc, #580]	; (a308 <loop+0x30e0>)
    a0c2:	f00d fa0d 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    a0c6:	2203      	movs	r2, #3
    a0c8:	488f      	ldr	r0, [pc, #572]	; (a308 <loop+0x30e0>)
    a0ca:	4611      	mov	r1, r2
    a0cc:	f00d f9fc 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
    a0d0:	a909      	add	r1, sp, #36	; 0x24
    a0d2:	488d      	ldr	r0, [pc, #564]	; (a308 <loop+0x30e0>)
    a0d4:	f010 fdbc 	bl	1ac50 <Print::print(String const&)>
    a0d8:	488b      	ldr	r0, [pc, #556]	; (a308 <loop+0x30e0>)
    a0da:	f010 fdeb 	bl	1acb4 <Print::println()>
            tft.setTextColor(ST7735_GREEN);  tft.setTextSize(3);  tft.println(str2 + String(fltLogs[intGainLevel[intMode - 11]]));
    a0de:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    a0e2:	4889      	ldr	r0, [pc, #548]	; (a308 <loop+0x30e0>)
    a0e4:	f00d f9fc 	bl	174e0 <ST7735_t3::setTextColor(unsigned short)>
    a0e8:	2203      	movs	r2, #3
    a0ea:	4887      	ldr	r0, [pc, #540]	; (a308 <loop+0x30e0>)
    a0ec:	4611      	mov	r1, r2
    a0ee:	f00d f9eb 	bl	174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    a0f2:	a90c      	add	r1, sp, #48	; 0x30
    a0f4:	a815      	add	r0, sp, #84	; 0x54
    a0f6:	f010 ff0b 	bl	1af10 <String::String(String const&)>
    a0fa:	6823      	ldr	r3, [r4, #0]
    a0fc:	2102      	movs	r1, #2
    a0fe:	a812      	add	r0, sp, #72	; 0x48
    a100:	3b0b      	subs	r3, #11
    a102:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
    a106:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    a10a:	ed93 0a00 	vldr	s0, [r3]
    a10e:	f010 ff6d 	bl	1afec <String::String(float, unsigned char)>
    a112:	a912      	add	r1, sp, #72	; 0x48
    a114:	a815      	add	r0, sp, #84	; 0x54
    a116:	f011 f805 	bl	1b124 <operator+(StringSumHelper const&, String const&)>
    a11a:	4601      	mov	r1, r0
    a11c:	487a      	ldr	r0, [pc, #488]	; (a308 <loop+0x30e0>)
    a11e:	f010 fd97 	bl	1ac50 <Print::print(String const&)>
    a122:	4879      	ldr	r0, [pc, #484]	; (a308 <loop+0x30e0>)
    a124:	f010 fdc6 	bl	1acb4 <Print::println()>
    a128:	a812      	add	r0, sp, #72	; 0x48
    a12a:	f010 ff0d 	bl	1af48 <String::~String()>
class StringSumHelper : public String
    a12e:	a815      	add	r0, sp, #84	; 0x54
    a130:	f010 ff0a 	bl	1af48 <String::~String()>
        if (intMode == 15)//BANDWIDTH
    a134:	6820      	ldr	r0, [r4, #0]
    a136:	f7fd bf46 	b.w	7fc6 <loop+0xd9e>
      else if (blnPlotSpectrum)
    a13a:	4b74      	ldr	r3, [pc, #464]	; (a30c <loop+0x30e4>)
    a13c:	7818      	ldrb	r0, [r3, #0]
    a13e:	2800      	cmp	r0, #0
    a140:	f43d ad1f 	beq.w	7b82 <loop+0x95a>
          blnPlotSpectrum = false;     
    a144:	7019      	strb	r1, [r3, #0]
          blnInitModes = true; blnModes = true;
    a146:	2301      	movs	r3, #1
    a148:	9906      	ldr	r1, [sp, #24]
    a14a:	700b      	strb	r3, [r1, #0]
    a14c:	7013      	strb	r3, [r2, #0]
    a14e:	f7fd bd18 	b.w	7b82 <loop+0x95a>
    a152:	4b6f      	ldr	r3, [pc, #444]	; (a310 <loop+0x30e8>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    a154:	6213      	str	r3, [r2, #32]
              mixInpSel.gain(0, 0); mixInpSel.gain(1, 0); mixInpSel.gain(2, 100 * fltLogs[intGainLevel[0]]); mixInpSel.gain(3, 100 * fltLogs[intGainLevel[1]]);
    a156:	f8da 3004 	ldr.w	r3, [sl, #4]
    a15a:	eddf 6a6e 	vldr	s13, [pc, #440]	; a314 <loop+0x30ec>
    a15e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		if (gain > 32767.0f) gain = 32767.0f;
    a162:	ed9f 7a63 	vldr	s14, [pc, #396]	; a2f0 <loop+0x30c8>
    a166:	edd3 7a00 	vldr	s15, [r3]
    a16a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    a16e:	eef4 7ac7 	vcmpe.f32	s15, s14
    a172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a176:	dc09      	bgt.n	a18c <loop+0x2f64>
		else if (gain < -32767.0f) gain = -32767.0f;
    a178:	ed9f 7a5f 	vldr	s14, [pc, #380]	; a2f8 <loop+0x30d0>
    a17c:	eef4 7ac7 	vcmpe.f32	s15, s14
    a180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a184:	f140 822b 	bpl.w	a5de <loop+0x33b6>
    a188:	4b63      	ldr	r3, [pc, #396]	; (a318 <loop+0x30f0>)
    a18a:	e000      	b.n	a18e <loop+0x2f66>
    a18c:	4b60      	ldr	r3, [pc, #384]	; (a310 <loop+0x30e8>)
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    a18e:	6253      	str	r3, [r2, #36]	; 0x24
		magnitude = n * 65536.0f;
    a190:	2200      	movs	r2, #0
    a192:	4b62      	ldr	r3, [pc, #392]	; (a31c <loop+0x30f4>)
      delay(100);  
    a194:	2064      	movs	r0, #100	; 0x64
    a196:	621a      	str	r2, [r3, #32]
    a198:	f011 f9cc 	bl	1b534 <delay>
    a19c:	f7fd bcda 	b.w	7b54 <loop+0x92c>
          float fltrmsNoiseRead = 1000 * rmsNoise.read(); 
    a1a0:	eddf 7a5f 	vldr	s15, [pc, #380]	; a320 <loop+0x30f8>
               fltrmsNoiseAvg = .999 * fltrmsNoiseAvg + .001 * fltrmsNoiseRead; //slow averaging 
    a1a4:	4b5f      	ldr	r3, [pc, #380]	; (a324 <loop+0x30fc>)
          float fltrmsNoiseRead = 1000 * rmsNoise.read(); 
    a1a6:	ee20 7a27 	vmul.f32	s14, s0, s15
               fltrmsNoiseAvg = .999 * fltrmsNoiseAvg + .001 * fltrmsNoiseRead; //slow averaging 
    a1aa:	ed9f 6b4b 	vldr	d6, [pc, #300]	; a2d8 <loop+0x30b0>
    a1ae:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a1b2:	ed9f 5b4b 	vldr	d5, [pc, #300]	; a2e0 <loop+0x30b8>
    a1b6:	ee27 7b06 	vmul.f64	d7, d7, d6
    a1ba:	ed93 6a00 	vldr	s12, [r3]
    a1be:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    a1c2:	eea6 7b05 	vfma.f64	d7, d6, d5
    a1c6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a1ca:	ed83 7a00 	vstr	s14, [r3]
    a1ce:	f7fd b9d2 	b.w	7576 <loop+0x34e>
        intDetectSN = SearchRatioDetect(intBusyBWLoHz, intBusyBWHiHz, 258, intThresh);//Search and detect Region of Interest for 258 Hz BW)
    a1d2:	4618      	mov	r0, r3
    a1d4:	4b54      	ldr	r3, [pc, #336]	; (a328 <loop+0x3100>)
    a1d6:	4611      	mov	r1, r2
    a1d8:	f44f 7281 	mov.w	r2, #258	; 0x102
    a1dc:	681b      	ldr	r3, [r3, #0]
    a1de:	9305      	str	r3, [sp, #20]
    a1e0:	f7fb f9ba 	bl	5558 <SearchRatioDetect(int, int, int, int)>
    a1e4:	4b51      	ldr	r3, [pc, #324]	; (a32c <loop+0x3104>)
    a1e6:	4602      	mov	r2, r0
    a1e8:	6018      	str	r0, [r3, #0]
        if ((intDetectSN >= intThresh ) && (!blnChanBusySent) && blnEnbBusyDetect)
    a1ea:	9b05      	ldr	r3, [sp, #20]
    a1ec:	4283      	cmp	r3, r0
    a1ee:	dc1e      	bgt.n	a22e <loop+0x3006>
    a1f0:	4b4f      	ldr	r3, [pc, #316]	; (a330 <loop+0x3108>)
    a1f2:	7819      	ldrb	r1, [r3, #0]
    a1f4:	9105      	str	r1, [sp, #20]
    a1f6:	b9d1      	cbnz	r1, a22e <loop+0x3006>
    a1f8:	494e      	ldr	r1, [pc, #312]	; (a334 <loop+0x310c>)
    a1fa:	7809      	ldrb	r1, [r1, #0]
    a1fc:	b1b9      	cbz	r1, a22e <loop+0x3006>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a1fe:	2107      	movs	r1, #7
    a200:	484d      	ldr	r0, [pc, #308]	; (a338 <loop+0x3110>)
    a202:	f013 f96b 	bl	1d4dc <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    a206:	4b49      	ldr	r3, [pc, #292]	; (a32c <loop+0x3104>)
    a208:	484c      	ldr	r0, [pc, #304]	; (a33c <loop+0x3114>)
    a20a:	6819      	ldr	r1, [r3, #0]
    a20c:	f010 fd46 	bl	1ac9c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    a210:	484a      	ldr	r0, [pc, #296]	; (a33c <loop+0x3114>)
    a212:	f010 fd4f 	bl	1acb4 <Print::println()>
          blnChanBusySent = true;
    a216:	2201      	movs	r2, #1
    a218:	4b45      	ldr	r3, [pc, #276]	; (a330 <loop+0x3108>)
      if (0 == (intBinsAveraged % intAvg))// Only plot every intAvg averages (about 11ms /average)
    a21a:	f8d6 9000 	ldr.w	r9, [r6]
          blnChanBusySent = true;
    a21e:	701a      	strb	r2, [r3, #0]
          blnChanClearSent = false;
    a220:	4b47      	ldr	r3, [pc, #284]	; (a340 <loop+0x3118>)
    a222:	9a05      	ldr	r2, [sp, #20]
      if (0 == (intBinsAveraged % intAvg))// Only plot every intAvg averages (about 11ms /average)
    a224:	f8da 8000 	ldr.w	r8, [sl]
          blnChanClearSent = false;
    a228:	701a      	strb	r2, [r3, #0]
    a22a:	f7fd bd90 	b.w	7d4e <loop+0xb26>
        else if ((intDetectSN == 0)  && (!blnChanClearSent) && blnEnbBusyDetect)
    a22e:	2a00      	cmp	r2, #0
    a230:	f47d ad8d 	bne.w	7d4e <loop+0xb26>
    a234:	4b42      	ldr	r3, [pc, #264]	; (a340 <loop+0x3118>)
    a236:	7819      	ldrb	r1, [r3, #0]
    a238:	2900      	cmp	r1, #0
    a23a:	f47d ad88 	bne.w	7d4e <loop+0xb26>
    a23e:	493d      	ldr	r1, [pc, #244]	; (a334 <loop+0x310c>)
    a240:	7809      	ldrb	r1, [r1, #0]
    a242:	2900      	cmp	r1, #0
    a244:	f43d ad83 	beq.w	7d4e <loop+0xb26>
    a248:	2108      	movs	r1, #8
    a24a:	483e      	ldr	r0, [pc, #248]	; (a344 <loop+0x311c>)
    a24c:	9205      	str	r2, [sp, #20]
    a24e:	f013 f945 	bl	1d4dc <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    a252:	483a      	ldr	r0, [pc, #232]	; (a33c <loop+0x3114>)
    a254:	f010 fd2e 	bl	1acb4 <Print::println()>
          blnChanClearSent = true;
    a258:	4b39      	ldr	r3, [pc, #228]	; (a340 <loop+0x3118>)
    a25a:	2101      	movs	r1, #1
          blnChanBusySent = false;
    a25c:	9a05      	ldr	r2, [sp, #20]
      if (0 == (intBinsAveraged % intAvg))// Only plot every intAvg averages (about 11ms /average)
    a25e:	f8d6 9000 	ldr.w	r9, [r6]
          blnChanClearSent = true;
    a262:	7019      	strb	r1, [r3, #0]
          blnChanBusySent = false;
    a264:	4b32      	ldr	r3, [pc, #200]	; (a330 <loop+0x3108>)
      if (0 == (intBinsAveraged % intAvg))// Only plot every intAvg averages (about 11ms /average)
    a266:	f8da 8000 	ldr.w	r8, [sl]
          blnChanBusySent = false;
    a26a:	701a      	strb	r2, [r3, #0]
    a26c:	f7fd bd6f 	b.w	7d4e <loop+0xb26>
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
    a270:	f640 30b8 	movw	r0, #3000	; 0xbb8
            intTestFreqHz = intTestFreqHz + 100 * (lngENC1New - lngENC1Old); //Inc/Dec by 100 Hz per click
    a274:	2564      	movs	r5, #100	; 0x64
    a276:	f7f5 ff57 	bl	128 <SetFilterBandwidth(int) [clone .part.0]>
    a27a:	683b      	ldr	r3, [r7, #0]
    a27c:	6832      	ldr	r2, [r6, #0]
            if (intTestFreqHz > 3300) {intTestFreqHz = 3300; }//Hold at stops
    a27e:	f640 40e4 	movw	r0, #3300	; 0xce4
            intTestFreqHz = intTestFreqHz + 100 * (lngENC1New - lngENC1Old); //Inc/Dec by 100 Hz per click
    a282:	4931      	ldr	r1, [pc, #196]	; (a348 <loop+0x3120>)
    a284:	1a9a      	subs	r2, r3, r2
    a286:	680b      	ldr	r3, [r1, #0]
    a288:	fb05 3302 	mla	r3, r5, r2, r3
            if (intTestFreqHz > 3300) {intTestFreqHz = 3300; }//Hold at stops
    a28c:	4283      	cmp	r3, r0
    a28e:	f340 81df 	ble.w	a650 <loop+0x3428>
    a292:	eddf 7a2e 	vldr	s15, [pc, #184]	; a34c <loop+0x3124>
    a296:	6008      	str	r0, [r1, #0]
            intBandwidth = 3000; intTuneOffset = 0;
    a298:	4b2d      	ldr	r3, [pc, #180]	; (a350 <loop+0x3128>)
    a29a:	f640 32b8 	movw	r2, #3000	; 0xbb8
    a29e:	601a      	str	r2, [r3, #0]
    a2a0:	2200      	movs	r2, #0
    a2a2:	4b2c      	ldr	r3, [pc, #176]	; (a354 <loop+0x312c>)
    a2a4:	601a      	str	r2, [r3, #0]
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    a2a6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; a358 <loop+0x3130>
    a2aa:	ee67 7a87 	vmul.f32	s15, s15, s14
    a2ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    a2b2:	ee17 1a90 	vmov	r1, s15
    a2b6:	4b29      	ldr	r3, [pc, #164]	; (a35c <loop+0x3134>)
    a2b8:	2200      	movs	r2, #0
        if (intMode == 18)//TEST6K (Sine)
    a2ba:	6820      	ldr	r0, [r4, #0]
    a2bc:	625a      	str	r2, [r3, #36]	; 0x24
    a2be:	e9c3 2207 	strd	r2, r2, [r3, #28]
    a2c2:	4a16      	ldr	r2, [pc, #88]	; (a31c <loop+0x30f4>)
    a2c4:	61d1      	str	r1, [r2, #28]
		magnitude = n * 65536.0f;
    a2c6:	f641 5139 	movw	r1, #7481	; 0x1d39
    a2ca:	6211      	str	r1, [r2, #32]
    a2cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a2d0:	619a      	str	r2, [r3, #24]
    a2d2:	f7fd be81 	b.w	7fd8 <loop+0xdb0>
    a2d6:	bf00      	nop
    a2d8:	d2f1a9fc 	.word	0xd2f1a9fc
    a2dc:	3f50624d 	.word	0x3f50624d
    a2e0:	d916872b 	.word	0xd916872b
    a2e4:	3feff7ce 	.word	0x3feff7ce
    a2e8:	20012de8 	.word	0x20012de8
    a2ec:	20009cb9 	.word	0x20009cb9
    a2f0:	46fffe00 	.word	0x46fffe00
    a2f4:	2000389c 	.word	0x2000389c
    a2f8:	c6fffe00 	.word	0xc6fffe00
    a2fc:	2000caf0 	.word	0x2000caf0
    a300:	200038c0 	.word	0x200038c0
    a304:	20005700 	.word	0x20005700
    a308:	2001355c 	.word	0x2001355c
    a30c:	200136eb 	.word	0x200136eb
    a310:	7fff0000 	.word	0x7fff0000
    a314:	42c80000 	.word	0x42c80000
    a318:	80010000 	.word	0x80010000
    a31c:	2000a888 	.word	0x2000a888
    a320:	447a0000 	.word	0x447a0000
    a324:	20012c4c 	.word	0x20012c4c
    a328:	20009a60 	.word	0x20009a60
    a32c:	20012ca4 	.word	0x20012ca4
    a330:	200136e2 	.word	0x200136e2
    a334:	200136e6 	.word	0x200136e6
    a338:	20005578 	.word	0x20005578
    a33c:	20008ba0 	.word	0x20008ba0
    a340:	200136e3 	.word	0x200136e3
    a344:	20005580 	.word	0x20005580
    a348:	20009a5c 	.word	0x20009a5c
    a34c:	454e4000 	.word	0x454e4000
    a350:	20009a10 	.word	0x20009a10
    a354:	20012cbc 	.word	0x20012cbc
    a358:	47be37c6 	.word	0x47be37c6
    a35c:	20012db0 	.word	0x20012db0
    a360:	20009a30 	.word	0x20009a30
  if (!((intBW == 3000) || (intBW == 6000))) {return;} // intBW must be 3000 or 6000
    a364:	f241 7070 	movw	r0, #6000	; 0x1770
            if (intTestFreqHz > 6300) {intTestFreqHz = 6300;} //Hold at stops
    a368:	f641 059c 	movw	r5, #6300	; 0x189c
    a36c:	f7f5 fedc 	bl	128 <SetFilterBandwidth(int) [clone .part.0]>
            intTestFreqHz = intTestFreqHz + 200 * (lngENC1New - lngENC1Old); //Inc/Dec by 200 Hz per click
    a370:	6832      	ldr	r2, [r6, #0]
    a372:	683b      	ldr	r3, [r7, #0]
    a374:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
    a378:	48db      	ldr	r0, [pc, #876]	; (a6e8 <loop+0x34c0>)
    a37a:	1a99      	subs	r1, r3, r2
    a37c:	6802      	ldr	r2, [r0, #0]
    a37e:	fb0c 2201 	mla	r2, ip, r1, r2
            if (intTestFreqHz > 6300) {intTestFreqHz = 6300;} //Hold at stops
    a382:	42aa      	cmp	r2, r5
    a384:	f300 8160 	bgt.w	a648 <loop+0x3420>
            if (intTestFreqHz < 300) {intTestFreqHz = 300;}
    a388:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
    a38c:	f280 8226 	bge.w	a7dc <loop+0x35b4>
    a390:	f44f 7296 	mov.w	r2, #300	; 0x12c
    a394:	eddf 7ad5 	vldr	s15, [pc, #852]	; a6ec <loop+0x34c4>
    a398:	6002      	str	r2, [r0, #0]
            intBandwidth = 6000; intTuneOffset = 0;
    a39a:	4ad5      	ldr	r2, [pc, #852]	; (a6f0 <loop+0x34c8>)
    a39c:	f241 7170 	movw	r1, #6000	; 0x1770
    a3a0:	6011      	str	r1, [r2, #0]
    a3a2:	2100      	movs	r1, #0
    a3a4:	4ad3      	ldr	r2, [pc, #844]	; (a6f4 <loop+0x34cc>)
    a3a6:	6011      	str	r1, [r2, #0]
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    a3a8:	ed9f 7ad3 	vldr	s14, [pc, #844]	; a6f8 <loop+0x34d0>
    a3ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    a3b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    a3b4:	ee17 0a90 	vmov	r0, s15
    a3b8:	4ad0      	ldr	r2, [pc, #832]	; (a6fc <loop+0x34d4>)
    a3ba:	2100      	movs	r1, #0
    a3bc:	e9c2 1107 	strd	r1, r1, [r2, #28]
    a3c0:	6251      	str	r1, [r2, #36]	; 0x24
    a3c2:	49cf      	ldr	r1, [pc, #828]	; (a700 <loop+0x34d8>)
    a3c4:	61c8      	str	r0, [r1, #28]
		magnitude = n * 65536.0f;
    a3c6:	f641 5039 	movw	r0, #7481	; 0x1d39
    a3ca:	6208      	str	r0, [r1, #32]
    a3cc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    a3d0:	6191      	str	r1, [r2, #24]
    a3d2:	f7fd be05 	b.w	7fe0 <loop+0xdb8>
    a3d6:	4bcb      	ldr	r3, [pc, #812]	; (a704 <loop+0x34dc>)
    a3d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a3dc:	e9c3 5507 	strd	r5, r5, [r3, #28]
    a3e0:	625d      	str	r5, [r3, #36]	; 0x24
    a3e2:	619a      	str	r2, [r3, #24]
           if (intMultipaths == 4)
    a3e4:	f7fd bff6 	b.w	83d4 <loop+0x11ac>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    a3e8:	ed9f 7ac3 	vldr	s14, [pc, #780]	; a6f8 <loop+0x34d0>
    a3ec:	ee67 7a87 	vmul.f32	s15, s15, s14
    a3f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    a3f4:	ee17 6a90 	vmov	r6, s15
    a3f8:	f7fd bf57 	b.w	82aa <loop+0x1082>
    a3fc:	ed9f 7abe 	vldr	s14, [pc, #760]	; a6f8 <loop+0x34d0>
    a400:	ee67 7a87 	vmul.f32	s15, s15, s14
    a404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    a408:	ee17 6a90 	vmov	r6, s15
    a40c:	f7fd bfca 	b.w	83a4 <loop+0x117c>
		__disable_irq();
    a410:	b672      	cpsid	i
		min_sample = 32767;
    a412:	f647 71ff 	movw	r1, #32767	; 0x7fff
		max_sample = -32768;
    a416:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		int min = min_sample;
    a41a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
		min_sample = 32767;
    a41e:	83d9      	strh	r1, [r3, #30]
		int max = max_sample;
    a420:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
		max_sample = -32768;
    a424:	841f      	strh	r7, [r3, #32]
		__enable_irq();
    a426:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    a428:	1a09      	subs	r1, r1, r0
    a42a:	ed9f 4ab7 	vldr	s8, [pc, #732]	; a708 <loop+0x34e0>
          else {fltppAmpLeftOutAvg = (.9 * fltppAmpLeftOutAvg) +  100 * ppAmpLeftOut.readPeakToPeak();} //moderate time constant for ppAmpLeft  average
    a42e:	eddf 4ab7 	vldr	s9, [pc, #732]	; a70c <loop+0x34e4>
    a432:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    a436:	ee07 1a90 	vmov	s15, r1
    a43a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a43e:	ed9f 5ba8 	vldr	d5, [pc, #672]	; a6e0 <loop+0x34b8>
    a442:	ee87 7a84 	vdiv.f32	s14, s15, s8
    a446:	ee27 7a24 	vmul.f32	s14, s14, s9
    a44a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a44e:	eea6 7b05 	vfma.f64	d7, d6, d5
    a452:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a456:	ed82 7a00 	vstr	s14, [r2]
    a45a:	f7fe bcfe 	b.w	8e5a <loop+0x1c32>
		__disable_irq();
    a45e:	b672      	cpsid	i
		min_sample = 32767;
    a460:	f647 71ff 	movw	r1, #32767	; 0x7fff
		max_sample = -32768;
    a464:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		int min = min_sample;
    a468:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
		min_sample = 32767;
    a46c:	83d9      	strh	r1, [r3, #30]
		int max = max_sample;
    a46e:	f9b3 1020 	ldrsh.w	r1, [r3, #32]
		max_sample = -32768;
    a472:	841f      	strh	r7, [r3, #32]
		__enable_irq();
    a474:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    a476:	1a09      	subs	r1, r1, r0
    a478:	ed9f 4aa3 	vldr	s8, [pc, #652]	; a708 <loop+0x34e0>
          else {fltppAmpRightOutAvg = (.9 * fltppAmpRightOutAvg) +  100 * ppAmpRightOut.readPeakToPeak();} //moderate time constant for ppAmpRight  average
    a47c:	eddf 4aa3 	vldr	s9, [pc, #652]	; a70c <loop+0x34e4>
    a480:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    a484:	ee07 1a90 	vmov	s15, r1
    a488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a48c:	ed9f 5b94 	vldr	d5, [pc, #592]	; a6e0 <loop+0x34b8>
    a490:	ee87 7a84 	vdiv.f32	s14, s15, s8
    a494:	ee27 7a24 	vmul.f32	s14, s14, s9
    a498:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a49c:	eea6 7b05 	vfma.f64	d7, d6, d5
    a4a0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a4a4:	ed82 7a00 	vstr	s14, [r2]
    a4a8:	f7fe bca7 	b.w	8dfa <loop+0x1bd2>
		__disable_irq();
    a4ac:	b672      	cpsid	i
		min_sample = 32767;
    a4ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
		max_sample = -32768;
    a4b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		int min = min_sample;
    a4b6:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
		min_sample = 32767;
    a4ba:	83f2      	strh	r2, [r6, #30]
		int max = max_sample;
    a4bc:	f9b6 2020 	ldrsh.w	r2, [r6, #32]
		max_sample = -32768;
    a4c0:	8430      	strh	r0, [r6, #32]
		__enable_irq();
    a4c2:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    a4c4:	1a52      	subs	r2, r2, r1
    a4c6:	ed9f 4a90 	vldr	s8, [pc, #576]	; a708 <loop+0x34e0>
          else {fltppi2s1InAvg = (.9 * fltppi2s1InAvg) +  100 * ppi2s1In.readPeakToPeak();} //moderate time constant for ppi2s1In  average
    a4ca:	eddf 4a90 	vldr	s9, [pc, #576]	; a70c <loop+0x34e4>
    a4ce:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    a4d2:	ee07 2a90 	vmov	s15, r2
    a4d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a4da:	ed9f 5b81 	vldr	d5, [pc, #516]	; a6e0 <loop+0x34b8>
    a4de:	ee87 7a84 	vdiv.f32	s14, s15, s8
    a4e2:	ee27 7a24 	vmul.f32	s14, s14, s9
    a4e6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a4ea:	eea6 7b05 	vfma.f64	d7, d6, d5
    a4ee:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a4f2:	ed83 7a00 	vstr	s14, [r3]
    a4f6:	f7fe bc50 	b.w	8d9a <loop+0x1b72>
              if (intFadeRatePtr > 8) {intFadeRatePtr = 8;} //Hold at stops
    a4fa:	2308      	movs	r3, #8
    a4fc:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
    a500:	6013      	str	r3, [r2, #0]
              if  (intFadeRatePtr < 0) {intFadeRatePtr = 0;}
    a502:	f7ff baaa 	b.w	9a5a <loop+0x2832>
              if (intTuneOffset > intMaxOffset) {intTuneOffset = intMaxOffset;} //Hold at stops
    a506:	23c8      	movs	r3, #200	; 0xc8
    a508:	eddf 7a81 	vldr	s15, [pc, #516]	; a710 <loop+0x34e8>
    a50c:	602b      	str	r3, [r5, #0]
              if (intTuneOffset < intMinOffset) {intTuneOffset = intMinOffset;}
    a50e:	f7ff ba40 	b.w	9992 <loop+0x276a>
                  intFadeDepth_dB = intMaxFade; //Hold at stops
    a512:	2328      	movs	r3, #40	; 0x28
    a514:	600b      	str	r3, [r1, #0]
              if (intFadeDepth_dB < 0) {intFadeDepth_dB = 0;}
    a516:	f7ff b840 	b.w	959a <loop+0x2372>
            if (intFMRatePtr < 0) {intFMRatePtr = 0;}
    a51a:	2b00      	cmp	r3, #0
    a51c:	f280 820c 	bge.w	a938 <loop+0x3710>
    a520:	2300      	movs	r3, #0
    a522:	f8ca 3000 	str.w	r3, [sl]
		magnitude = n * 65536.0f;
    a526:	4b7b      	ldr	r3, [pc, #492]	; (a714 <loop+0x34ec>)
    a528:	2200      	movs	r2, #0
    a52a:	4d7b      	ldr	r5, [pc, #492]	; (a718 <loop+0x34f0>)
    a52c:	621a      	str	r2, [r3, #32]
	}
    a52e:	f7ff b93a 	b.w	97a6 <loop+0x257e>
              if (intFMDevPtr < 0) {intFMDevPtr = 0;}
    a532:	2b00      	cmp	r3, #0
    a534:	f280 81d9 	bge.w	a8ea <loop+0x36c2>
    a538:	2300      	movs	r3, #0
    a53a:	4d77      	ldr	r5, [pc, #476]	; (a718 <loop+0x34f0>)
    a53c:	f8ca 3000 	str.w	r3, [sl]
              if (fltLogs[intFMDevPtr] <.01){sine_VLF_Dnmix_Mod.amplitude(0.0);}  
    a540:	2300      	movs	r3, #0
    a542:	f7ff b999 	b.w	9878 <loop+0x2650>
		__disable_irq();
    a546:	b672      	cpsid	i
		min_sample = 32767;
    a548:	f647 72ff 	movw	r2, #32767	; 0x7fff
		max_sample = -32768;
    a54c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		int min = min_sample;
    a550:	f9b9 101e 	ldrsh.w	r1, [r9, #30]
		min_sample = 32767;
    a554:	f8a9 201e 	strh.w	r2, [r9, #30]
		int max = max_sample;
    a558:	f9b9 2020 	ldrsh.w	r2, [r9, #32]
		max_sample = -32768;
    a55c:	f8a9 0020 	strh.w	r0, [r9, #32]
		__enable_irq();
    a560:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    a562:	1a52      	subs	r2, r2, r1
    a564:	ed9f 4a68 	vldr	s8, [pc, #416]	; a708 <loop+0x34e0>
              else {fltppi2s0InAvg = (.9 * fltppi2s0InAvg) +  100 * ppi2s0In.readPeakToPeak(); }//moderate time constant for ppi2s1In  average
    a568:	eddf 4a68 	vldr	s9, [pc, #416]	; a70c <loop+0x34e4>
    a56c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    a570:	ee07 2a90 	vmov	s15, r2
    a574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a578:	ed9f 5b59 	vldr	d5, [pc, #356]	; a6e0 <loop+0x34b8>
    a57c:	ee87 7a84 	vdiv.f32	s14, s15, s8
    a580:	ee27 7a24 	vmul.f32	s14, s14, s9
    a584:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a588:	eea6 7b05 	vfma.f64	d7, d6, d5
    a58c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a590:	ed83 7a00 	vstr	s14, [r3]
    a594:	f7fe bbd1 	b.w	8d3a <loop+0x1b12>
            if (intBaudPtr > 6) {intBaudPtr = 6;} //Hold at stops
    a598:	2306      	movs	r3, #6
    a59a:	602b      	str	r3, [r5, #0]
            if (intBaudPtr < 0) {intBaudPtr = 0;}
    a59c:	f7ff bbc7 	b.w	9d2e <loop+0x2b06>
    a5a0:	4b5e      	ldr	r3, [pc, #376]	; (a71c <loop+0x34f4>)
    a5a2:	f7fe bfde 	b.w	9562 <loop+0x233a>
		multiplier = n * 65536.0f;
    a5a6:	eeb0 7a67 	vmov.f32	s14, s15
    a5aa:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    a5ae:	ee17 3a10 	vmov	r3, s14
    a5b2:	e4d0      	b.n	9f56 <loop+0x2d2e>
    a5b4:	eeb0 7a67 	vmov.f32	s14, s15
    a5b8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    a5bc:	ee17 3a10 	vmov	r3, s14
    a5c0:	e4af      	b.n	9f22 <loop+0x2cfa>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    a5c2:	eeb0 7a67 	vmov.f32	s14, s15
    a5c6:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    a5ca:	ee17 3a10 	vmov	r3, s14
    a5ce:	e48f      	b.n	9ef0 <loop+0x2cc8>
    a5d0:	eeb0 7a67 	vmov.f32	s14, s15
    a5d4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    a5d8:	ee17 3a10 	vmov	r3, s14
    a5dc:	e46b      	b.n	9eb6 <loop+0x2c8e>
    a5de:	eeb0 7a67 	vmov.f32	s14, s15
    a5e2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    a5e6:	ee17 3a10 	vmov	r3, s14
    a5ea:	e5d0      	b.n	a18e <loop+0x2f66>
    a5ec:	eeb0 7a67 	vmov.f32	s14, s15
    a5f0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    a5f4:	ee17 3a10 	vmov	r3, s14
    a5f8:	e5ac      	b.n	a154 <loop+0x2f2c>
		__disable_irq();
    a5fa:	b672      	cpsid	i
		min_sample = 32767;
    a5fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
		max_sample = -32768;
    a600:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		int min = min_sample;
    a604:	f9b9 101e 	ldrsh.w	r1, [r9, #30]
		min_sample = 32767;
    a608:	f8a9 201e 	strh.w	r2, [r9, #30]
		int max = max_sample;
    a60c:	f9b9 2020 	ldrsh.w	r2, [r9, #32]
		max_sample = -32768;
    a610:	f8a9 0020 	strh.w	r0, [r9, #32]
		__enable_irq();
    a614:	b662      	cpsie	i
		return (float)(max - min) / 32767.0f;
    a616:	1a52      	subs	r2, r2, r1
    a618:	ed9f 5a3b 	vldr	s10, [pc, #236]	; a708 <loop+0x34e0>
        else {fltppi2s0InAvg = (.9 * fltppi2s0InAvg) +  100 * ppi2s0In.readPeakToPeak();} //Fast time constant for ppi2s1In  average
    a61c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    a620:	ee07 2a10 	vmov	s14, r2
    a624:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    a628:	ed9f 4b2d 	vldr	d4, [pc, #180]	; a6e0 <loop+0x34b8>
    a62c:	ee85 7a85 	vdiv.f32	s14, s11, s10
    a630:	ee27 7a27 	vmul.f32	s14, s14, s15
    a634:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a638:	eea6 7b04 	vfma.f64	d7, d6, d4
    a63c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a640:	ed83 7a00 	vstr	s14, [r3]
    a644:	f7fd b8f2 	b.w	782c <loop+0x604>
            if (intTestFreqHz > 6300) {intTestFreqHz = 6300;} //Hold at stops
    a648:	eddf 7a35 	vldr	s15, [pc, #212]	; a720 <loop+0x34f8>
    a64c:	6005      	str	r5, [r0, #0]
            if (intTestFreqHz < 300) {intTestFreqHz = 300;}
    a64e:	e6a4      	b.n	a39a <loop+0x3172>
            if (intTestFreqHz < 300) { intTestFreqHz = 300;} //Hold at 300 Hz. Lower limit is ~40 Hz at -.5dB (-1.5 dB @10 Hz) with 10 uf Caps.
    a650:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a654:	f280 80a5 	bge.w	a7a2 <loop+0x357a>
    a658:	f44f 7396 	mov.w	r3, #300	; 0x12c
    a65c:	eddf 7a23 	vldr	s15, [pc, #140]	; a6ec <loop+0x34c4>
    a660:	600b      	str	r3, [r1, #0]
    a662:	e619      	b.n	a298 <loop+0x3070>
            if (intMode == 13){ampLeftOut.gain(fltLogs[ intGainLevel[intMode - 11]]); }//sets ampLeftOut gain (0-2) (log))
    a664:	f8da 3008 	ldr.w	r3, [sl, #8]
    a668:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    a66c:	edd3 7a00 	vldr	s15, [r3]
		if (n > 32767.0f) n = 32767.0f;
    a670:	eef4 7ac7 	vcmpe.f32	s15, s14
    a674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a678:	f300 8127 	bgt.w	a8ca <loop+0x36a2>
		else if (n < -32767.0f) n = -32767.0f;
    a67c:	ed9f 7a29 	vldr	s14, [pc, #164]	; a724 <loop+0x34fc>
    a680:	eef4 7ac7 	vcmpe.f32	s15, s14
    a684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a688:	f100 817a 	bmi.w	a980 <loop+0x3758>
		multiplier = n * 65536.0f;
    a68c:	eeb0 7a67 	vmov.f32	s14, s15
    a690:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    a694:	ee17 3a10 	vmov	r3, s14
    a698:	4a23      	ldr	r2, [pc, #140]	; (a728 <loop+0x3500>)
    a69a:	6193      	str	r3, [r2, #24]
            if (intMode == 14){ampRightOut.gain(fltLogs[ intGainLevel[intMode - 11]]); }//sets ampRightOut gain (0-2) (log)) 
    a69c:	e504      	b.n	a0a8 <loop+0x2e80>
                tft.setTextColor(ST7735_GREEN); tft.setTextSize(3); tft.println(str3 +  String(int(fltppi2s1InAvg)));
    a69e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    a6a2:	f7fe be71 	b.w	9388 <loop+0x2160>
                tft.setTextColor(ST7735_GREEN); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpRightOutAvg)));
    a6a6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    a6aa:	f7fe be03 	b.w	92b4 <loop+0x208c>
                tft.setTextColor(ST7735_GREEN); tft.setTextSize(3); tft.println(str3 +  String(int(fltppi2s0InAvg)));
    a6ae:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    a6b2:	f7fe bdba 	b.w	922a <loop+0x2002>
              tft.setTextColor(ST7735_GREEN); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpLeftOutAvg)));
    a6b6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    a6ba:	f7fe bd79 	b.w	91b0 <loop+0x1f88>
              tft.setTextColor(ST7735_GREEN); tft.setTextSize(3); tft.println(str3 +  String(int(fltppi2s1InAvg))); 
    a6be:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    a6c2:	f7fe bd33 	b.w	912c <loop+0x1f04>
              tft.setTextColor(ST7735_GREEN); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpRightOutAvg)));
    a6c6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    a6ca:	f7fe bcf2 	b.w	90b2 <loop+0x1e8a>
              tft.setTextColor(ST7735_GREEN); tft.setTextSize(3); tft.println(str3 +  String(int(fltppi2s0InAvg)));
    a6ce:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    a6d2:	f7fe bc71 	b.w	8fb8 <loop+0x1d90>
              tft.setTextColor(ST7735_GREEN); tft.setTextSize(3); tft.println(str2 +  String(int(fltppAmpLeftOutAvg)));
    a6d6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    a6da:	f7fe bc30 	b.w	8f3e <loop+0x1d16>
    a6de:	bf00      	nop
    a6e0:	cccccccd 	.word	0xcccccccd
    a6e4:	3feccccc 	.word	0x3feccccc
    a6e8:	20009a5c 	.word	0x20009a5c
    a6ec:	43960000 	.word	0x43960000
    a6f0:	20009a10 	.word	0x20009a10
    a6f4:	20012cbc 	.word	0x20012cbc
    a6f8:	47be37c6 	.word	0x47be37c6
    a6fc:	20012db0 	.word	0x20012db0
    a700:	2000a888 	.word	0x2000a888
    a704:	20012d40 	.word	0x20012d40
    a708:	46fffe00 	.word	0x46fffe00
    a70c:	42c80000 	.word	0x42c80000
    a710:	45ea6000 	.word	0x45ea6000
    a714:	200134f0 	.word	0x200134f0
    a718:	2000389c 	.word	0x2000389c
    a71c:	7fff0000 	.word	0x7fff0000
    a720:	45c4e000 	.word	0x45c4e000
    a724:	c6fffe00 	.word	0xc6fffe00
    a728:	2000cad0 	.word	0x2000cad0
			uint32_t elapsed = systick_millis_count - millis_begin;
    a72c:	f8db 3000 	ldr.w	r3, [fp]
			if (usb_configuration) {
    a730:	782a      	ldrb	r2, [r5, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    a732:	eba3 030a 	sub.w	r3, r3, sl
			if (usb_configuration) {
    a736:	b13a      	cbz	r2, a748 <loop+0x3520>
				if (elapsed > 2000) break;
    a738:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    a73c:	f63f ab54 	bhi.w	9de8 <loop+0x2bc0>
			yield();
    a740:	f012 ff4a 	bl	1d5d8 <yield>
    a744:	f7ff bb3d 	b.w	9dc2 <loop+0x2b9a>
				if (elapsed > 750) break;
    a748:	f240 22ee 	movw	r2, #750	; 0x2ee
    a74c:	4293      	cmp	r3, r2
    a74e:	d9f7      	bls.n	a740 <loop+0x3518>
    a750:	f7ff bb4a 	b.w	9de8 <loop+0x2bc0>
              sine_VLF_Dnmix_Mod.amplitude(0);sine_Dnmix.frequency(7700 - intTuneOffset); sine_Dnmix.amplitude(1.0); sine_Upmix.frequency(7700); sine_Upmix.amplitude(1.0);
    a754:	f641 6314 	movw	r3, #7700	; 0x1e14
              intTuneOffset = intTuneOffset + (intOffsetStep * (lngENC1New - lngENC1Old));
    a758:	602a      	str	r2, [r5, #0]
              sine_VLF_Dnmix_Mod.amplitude(0);sine_Dnmix.frequency(7700 - intTuneOffset); sine_Dnmix.amplitude(1.0); sine_Upmix.frequency(7700); sine_Upmix.amplitude(1.0);
    a75a:	1a9b      	subs	r3, r3, r2
		magnitude = n * 65536.0f;
    a75c:	4a9a      	ldr	r2, [pc, #616]	; (a9c8 <loop+0x37a0>)
    a75e:	ee07 3a90 	vmov	s15, r3
    a762:	2300      	movs	r3, #0
    a764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a768:	6213      	str	r3, [r2, #32]
		if (freq < 0.0f) freq = 0.0f;
    a76a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a772:	f53f a919 	bmi.w	99a8 <loop+0x2780>
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/4.0f) freq = AUDIO_SAMPLE_RATE_EXACT/4.0f;
    a776:	ed9f 7a95 	vldr	s14, [pc, #596]	; a9cc <loop+0x37a4>
    a77a:	eef4 7ac7 	vcmpe.f32	s15, s14
    a77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a782:	f77f a909 	ble.w	9998 <loop+0x2770>
    a786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a78a:	f7ff b90d 	b.w	99a8 <loop+0x2780>
                for(r=0, k = peakcount+1; r<NUMPEAKS-1; r++)
    a78e:	ed9f 7a90 	vldr	s14, [pc, #576]	; a9d0 <loop+0x37a8>
    a792:	f7fe b92f 	b.w	89f4 <loop+0x17cc>
            if ((lngENC1New - lngENC1Old) <0){intBandwidth = 3000;}
    a796:	bf1c      	itt	ne
    a798:	f640 33b8 	movwne	r3, #3000	; 0xbb8
    a79c:	602b      	strne	r3, [r5, #0]
    a79e:	f7ff bb30 	b.w	9e02 <loop+0x2bda>
            InputTestWaveform.frequency (intTestFreqHz); InputTestWaveform.amplitude(fltCalTestLevel);
    a7a2:	ee07 3a90 	vmov	s15, r3
            intTestFreqHz = intTestFreqHz + 100 * (lngENC1New - lngENC1Old); //Inc/Dec by 100 Hz per click
    a7a6:	600b      	str	r3, [r1, #0]
            intBandwidth = 3000; intTuneOffset = 0;
    a7a8:	f640 32b8 	movw	r2, #3000	; 0xbb8
    a7ac:	4b89      	ldr	r3, [pc, #548]	; (a9d4 <loop+0x37ac>)
            InputTestWaveform.frequency (intTestFreqHz); InputTestWaveform.amplitude(fltCalTestLevel);
    a7ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            intBandwidth = 3000; intTuneOffset = 0;
    a7b2:	2100      	movs	r1, #0
    a7b4:	601a      	str	r2, [r3, #0]
    a7b6:	4b88      	ldr	r3, [pc, #544]	; (a9d8 <loop+0x37b0>)
		if (freq < 0.0f) freq = 0.0;
    a7b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a7bc:	6019      	str	r1, [r3, #0]
    a7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a7c2:	f53f ad78 	bmi.w	a2b6 <loop+0x308e>
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.0f) freq = AUDIO_SAMPLE_RATE_EXACT/2.0f;
    a7c6:	ed9f 7a85 	vldr	s14, [pc, #532]	; a9dc <loop+0x37b4>
    a7ca:	eef4 7ac7 	vcmpe.f32	s15, s14
    a7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a7d2:	f77f ad68 	ble.w	a2a6 <loop+0x307e>
    a7d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    a7da:	e56c      	b.n	a2b6 <loop+0x308e>
            InputTestWaveform.frequency (intTestFreqHz); InputTestWaveform.amplitude(fltCalTestLevel);
    a7dc:	ee07 2a90 	vmov	s15, r2
            intTestFreqHz = intTestFreqHz + 200 * (lngENC1New - lngENC1Old); //Inc/Dec by 200 Hz per click
    a7e0:	6002      	str	r2, [r0, #0]
            intBandwidth = 6000; intTuneOffset = 0;
    a7e2:	f241 7170 	movw	r1, #6000	; 0x1770
    a7e6:	4a7b      	ldr	r2, [pc, #492]	; (a9d4 <loop+0x37ac>)
            InputTestWaveform.frequency (intTestFreqHz); InputTestWaveform.amplitude(fltCalTestLevel);
    a7e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            intBandwidth = 6000; intTuneOffset = 0;
    a7ec:	2000      	movs	r0, #0
    a7ee:	6011      	str	r1, [r2, #0]
    a7f0:	4a79      	ldr	r2, [pc, #484]	; (a9d8 <loop+0x37b0>)
		if (freq < 0.0f) freq = 0.0;
    a7f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a7f6:	6010      	str	r0, [r2, #0]
    a7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a7fc:	f53f addc 	bmi.w	a3b8 <loop+0x3190>
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.0f) freq = AUDIO_SAMPLE_RATE_EXACT/2.0f;
    a800:	ed9f 7a76 	vldr	s14, [pc, #472]	; a9dc <loop+0x37b4>
    a804:	eef4 7ac7 	vcmpe.f32	s15, s14
    a808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a80c:	f77f adcc 	ble.w	a3a8 <loop+0x3180>
    a810:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    a814:	e5d0      	b.n	a3b8 <loop+0x3190>
          PlotSpectrum(fltFFT, intBusyBWLoHz, intBusyBWHiHz, blnInitSpectrum, intBandwidth);
    a816:	4b72      	ldr	r3, [pc, #456]	; (a9e0 <loop+0x37b8>)
    a818:	683a      	ldr	r2, [r7, #0]
    a81a:	6819      	ldr	r1, [r3, #0]
    a81c:	4b6d      	ldr	r3, [pc, #436]	; (a9d4 <loop+0x37ac>)
    a81e:	4f71      	ldr	r7, [pc, #452]	; (a9e4 <loop+0x37bc>)
    a820:	681b      	ldr	r3, [r3, #0]
    a822:	4871      	ldr	r0, [pc, #452]	; (a9e8 <loop+0x37c0>)
    a824:	9300      	str	r3, [sp, #0]
    a826:	783b      	ldrb	r3, [r7, #0]
    a828:	f7fc fb16 	bl	6e58 <PlotSpectrum(float*, int, int, bool, int)>
    a82c:	f8db 3000 	ldr.w	r3, [fp]
        if (intBinsAveraged > 100000) {
    a830:	f8da 8000 	ldr.w	r8, [sl]
          blnInitSpectrum = false;// only init on first call to print headers.
    a834:	703e      	strb	r6, [r7, #0]
          ulngLastSpectrumUpdateMs = millis();
    a836:	602b      	str	r3, [r5, #0]
    a838:	f7fd ba95 	b.w	7d66 <loop+0xb3e>
		        if ((arg->store & 0xff) == 0x2b) { arg->position--; return ; }
    a83c:	3a01      	subs	r2, #1
    a83e:	614a      	str	r2, [r1, #20]
    a840:	f7fc bdbd 	b.w	73be <loop+0x196>
    a844:	695a      	ldr	r2, [r3, #20]
    a846:	3a01      	subs	r2, #1
    a848:	615a      	str	r2, [r3, #20]
    a84a:	f7fc bd05 	b.w	7258 <loop+0x30>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    a84e:	4b67      	ldr	r3, [pc, #412]	; (a9ec <loop+0x37c4>)
    a850:	2200      	movs	r2, #0
    a852:	619a      	str	r2, [r3, #24]
    a854:	e9c3 2208 	strd	r2, r2, [r3, #32]
    a858:	f64d 128c 	movw	r2, #55692	; 0xd98c
    a85c:	61da      	str	r2, [r3, #28]
    a85e:	f7ff bbe0 	b.w	a022 <loop+0x2dfa>
    a862:	4b63      	ldr	r3, [pc, #396]	; (a9f0 <loop+0x37c8>)
    a864:	f7fe be7d 	b.w	9562 <loop+0x233a>
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    a868:	ee07 2a90 	vmov	s15, r2
    a86c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
            intBusyGain = intBusyGain + (lngENC1New - lngENC1Old);
    a870:	602a      	str	r2, [r5, #0]
        mixInpSel.gain(2, intBusyGain / 10.0); //sets input mixer 0 gain (0 to 2) for Audio In #1
    a872:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    a876:	ee86 7b05 	vdiv.f64	d7, d6, d5
    a87a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    a87e:	f7fc bdd0 	b.w	7422 <loop+0x1fa>
    a882:	2096      	movs	r0, #150	; 0x96
    a884:	f7fd b8d5 	b.w	7a32 <loop+0x80a>
          for (int i = 0; i <= intNumofBinsToPlot; i++) { fltFFT[i] = 4000.0 * fft1024.read(i);}
    a888:	4b5a      	ldr	r3, [pc, #360]	; (a9f4 <loop+0x37cc>)
    a88a:	6818      	ldr	r0, [r3, #0]
    a88c:	2800      	cmp	r0, #0
    a88e:	f6bd a8d2 	bge.w	7a36 <loop+0x80e>
    a892:	f7fd b8e6 	b.w	7a62 <loop+0x83a>
    a896:	ed9f 7a51 	vldr	s14, [pc, #324]	; a9dc <loop+0x37b4>
    a89a:	eef4 7ac7 	vcmpe.f32	s15, s14
    a89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8a2:	dd08      	ble.n	a8b6 <loop+0x368e>
    a8a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    a8a8:	f7fe bf7c 	b.w	97a4 <loop+0x257c>
                sine_VLF_Dnmix_Mod.frequency(10 * fltLogs[intFMRatePtr]);// Rate is .1 to 20 Hz
    a8ac:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
		magnitude = n * 65536.0f;
    a8b0:	4945      	ldr	r1, [pc, #276]	; (a9c8 <loop+0x37a0>)
    a8b2:	2300      	movs	r3, #0
    a8b4:	620b      	str	r3, [r1, #32]
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    a8b6:	ed9f 7a50 	vldr	s14, [pc, #320]	; a9f8 <loop+0x37d0>
    a8ba:	ee67 7a87 	vmul.f32	s15, s15, s14
    a8be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    a8c2:	ee17 3a90 	vmov	r3, s15
    a8c6:	f7fe bf6d 	b.w	97a4 <loop+0x257c>
    a8ca:	4b4c      	ldr	r3, [pc, #304]	; (a9fc <loop+0x37d4>)
    a8cc:	e6e4      	b.n	a698 <loop+0x3470>
    a8ce:	4b4b      	ldr	r3, [pc, #300]	; (a9fc <loop+0x37d4>)
    a8d0:	f7ff bbe8 	b.w	a0a4 <loop+0x2e7c>
              fltFadeRate = 10 * fltLogs[intFadeRatePtr];// Range 0, .1 to 20 [Log]
    a8d4:	4d4a      	ldr	r5, [pc, #296]	; (aa00 <loop+0x37d8>)
    a8d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    a8da:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    a8de:	edd3 7a00 	vldr	s15, [r3]
    a8e2:	ee67 7a87 	vmul.f32	s15, s15, s14
    a8e6:	f7ff b8b8 	b.w	9a5a <loop+0x2832>
              if (fltLogs[intFMDevPtr] <.01){sine_VLF_Dnmix_Mod.amplitude(0.0);}  
    a8ea:	4d45      	ldr	r5, [pc, #276]	; (aa00 <loop+0x37d8>)
    a8ec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    a8f0:	ed93 7a00 	vldr	s14, [r3]
    a8f4:	ed9f 6b30 	vldr	d6, [pc, #192]	; a9b8 <loop+0x3790>
    a8f8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a8fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
    a900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a904:	f53f ae1c 	bmi.w	a540 <loop+0x3318>
              else {sine_VLF_Dnmix_Mod.amplitude(fltLogs[intFMDevPtr] * .0129870129870 );} //sets max deviation in Hz e.g. .000129870129870 * 7700  yields +/- 1 Hz peak deviation
    a908:	ed9f 6b2d 	vldr	d6, [pc, #180]	; a9c0 <loop+0x3798>
    a90c:	ee27 7b06 	vmul.f64	d7, d7, d6
    a910:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		if (n < 0.0f) n = 0;
    a914:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    a918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a91c:	f53f ae10 	bmi.w	a540 <loop+0x3318>
		else if (n > 1.0f) n = 1.0f;
    a920:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    a924:	eeb4 7ae7 	vcmpe.f32	s14, s15
    a928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a92c:	f77e af9e 	ble.w	986c <loop+0x2644>
    a930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	}
    a934:	f7fe bfa0 	b.w	9878 <loop+0x2650>
            intFMRatePtr = intFMRatePtr + (lngENC1New - lngENC1Old);
    a938:	f8ca 3000 	str.w	r3, [sl]
            if (intFMRatePtr == 0){sine_VLF_Dnmix_Mod.amplitude(0);}
    a93c:	f43f adf3 	beq.w	a526 <loop+0x32fe>
                sine_VLF_Dnmix_Mod.amplitude(fltLogs[intFMDevPtr] * .0129870129870 ); //sets max deviation in Hz e.g. .0129870129870 * 7700  yields +/- 1 Hz peak deviation
    a940:	4a30      	ldr	r2, [pc, #192]	; (aa04 <loop+0x37dc>)
    a942:	4d2f      	ldr	r5, [pc, #188]	; (aa00 <loop+0x37d8>)
    a944:	6812      	ldr	r2, [r2, #0]
    a946:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    a94a:	ed92 7a00 	vldr	s14, [r2]
    a94e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; a9c0 <loop+0x3798>
    a952:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    a956:	ee27 7b06 	vmul.f64	d7, d7, d6
    a95a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		if (n < 0.0f) n = 0;
    a95e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    a962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a966:	d41a      	bmi.n	a99e <loop+0x3776>
		else if (n > 1.0f) n = 1.0f;
    a968:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    a96c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    a970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a974:	f77e aeff 	ble.w	9776 <loop+0x254e>
    a978:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a97c:	f7fe bf01 	b.w	9782 <loop+0x255a>
    a980:	4b1b      	ldr	r3, [pc, #108]	; (a9f0 <loop+0x37c8>)
    a982:	e689      	b.n	a698 <loop+0x3470>
    a984:	4b1a      	ldr	r3, [pc, #104]	; (a9f0 <loop+0x37c8>)
    a986:	f7ff bb8d 	b.w	a0a4 <loop+0x2e7c>
                {tft.setCursor(0,140);  tft.setTextColor(ST7735_GREEN); tft.setTextSize(3);  tft.println(strLastLevel);}
    a98a:	2300      	movs	r3, #0
    a98c:	228c      	movs	r2, #140	; 0x8c
    a98e:	481e      	ldr	r0, [pc, #120]	; (aa08 <loop+0x37e0>)
    a990:	4619      	mov	r1, r3
    a992:	f00c fd43 	bl	1741c <ST7735_t3::setCursor(short, short, bool)>
    a996:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    a99a:	f7fe b8bf 	b.w	8b1c <loop+0x18f4>
    a99e:	2200      	movs	r2, #0
    a9a0:	f7fe beef 	b.w	9782 <loop+0x255a>
  if (((intMode == 4) && ((ulngCurrentElapsedTimeUs - ulngLastDelayUpdateUs) >= (7812))) //Every 7.812 ms for MPD  
    a9a4:	6833      	ldr	r3, [r6, #0]
    a9a6:	f7fc bffc 	b.w	79a2 <loop+0x77a>
		magnitude = n * 65536.0f;
    a9aa:	4907      	ldr	r1, [pc, #28]	; (a9c8 <loop+0x37a0>)
    a9ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
                sine_VLF_Dnmix_Mod.frequency(10 * fltLogs[intFMRatePtr]);// Rate is .1 to 20 Hz
    a9b0:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
    a9b4:	620b      	str	r3, [r1, #32]
		if (freq < 0.0f) freq = 0.0;
    a9b6:	e77e      	b.n	a8b6 <loop+0x368e>
    a9b8:	47ae147b 	.word	0x47ae147b
    a9bc:	3f847ae1 	.word	0x3f847ae1
    a9c0:	606a467f 	.word	0x606a467f
    a9c4:	3f8a98ef 	.word	0x3f8a98ef
    a9c8:	200134f0 	.word	0x200134f0
    a9cc:	462c4400 	.word	0x462c4400
    a9d0:	00000000 	.word	0x00000000
    a9d4:	20009a10 	.word	0x20009a10
    a9d8:	20012cbc 	.word	0x20012cbc
    a9dc:	46ac4400 	.word	0x46ac4400
    a9e0:	20012c90 	.word	0x20012c90
    a9e4:	200136e7 	.word	0x200136e7
    a9e8:	200129b0 	.word	0x200129b0
    a9ec:	20012d08 	.word	0x20012d08
    a9f0:	80010000 	.word	0x80010000
    a9f4:	20012cb4 	.word	0x20012cb4
    a9f8:	47be37c6 	.word	0x47be37c6
    a9fc:	7fff0000 	.word	0x7fff0000
    aa00:	2000389c 	.word	0x2000389c
    aa04:	20009a24 	.word	0x20009a24
    aa08:	2001355c 	.word	0x2001355c

0000aa0c <AudioAnalyzeFFT1024::update()>:

}
#endif

void AudioAnalyzeFFT1024::update(void)
{
    aa0c:	b570      	push	{r4, r5, r6, lr}
	audio_block_t *block;

	block = receiveReadOnly();
    aa0e:	2100      	movs	r1, #0
{
    aa10:	4604      	mov	r4, r0
	block = receiveReadOnly();
    aa12:	f00f fd91 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
    aa16:	b180      	cbz	r0, aa3a <AudioAnalyzeFFT1024::update()+0x2e>

#if defined(__ARM_ARCH_7EM__)
	switch (state) {
    aa18:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
    aa1c:	f895 343c 	ldrb.w	r3, [r5, #1084]	; 0x43c
    aa20:	2b07      	cmp	r3, #7
    aa22:	d80a      	bhi.n	aa3a <AudioAnalyzeFFT1024::update()+0x2e>
    aa24:	e8df f003 	tbb	[pc, r3]
    aa28:	e4ded8d2 	.word	0xe4ded8d2
    aa2c:	0a04f0ea 	.word	0x0a04f0ea
		blocklist[5] = block;
		state = 6;
		break;
	case 6:
		blocklist[6] = block;
		state = 7;
    aa30:	2307      	movs	r3, #7
		blocklist[6] = block;
    aa32:	f8c4 0434 	str.w	r0, [r4, #1076]	; 0x434
		state = 7;
    aa36:	f885 343c 	strb.w	r3, [r5, #1084]	; 0x43c
		break;
	}
#else
	release(block);
#endif
}
    aa3a:	bd70      	pop	{r4, r5, r6, pc}
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
    aa3c:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
    aa40:	f204 413c 	addw	r1, r4, #1084	; 0x43c
		blocklist[7] = block;
    aa44:	f8c4 0438 	str.w	r0, [r4, #1080]	; 0x438
		copy_to_fft_buffer(buffer+0x000, blocklist[0]->data);
    aa48:	1d13      	adds	r3, r2, #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aa4a:	f502 7c82 	add.w	ip, r2, #260	; 0x104
	uint32_t *dst = (uint32_t *)destination;
    aa4e:	460a      	mov	r2, r1
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aa50:	f833 6b02 	ldrh.w	r6, [r3], #2
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aa54:	4563      	cmp	r3, ip
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aa56:	f842 6b04 	str.w	r6, [r2], #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aa5a:	d1f9      	bne.n	aa50 <AudioAnalyzeFFT1024::update()+0x44>
		copy_to_fft_buffer(buffer+0x100, blocklist[1]->data);
    aa5c:	f8d4 6420 	ldr.w	r6, [r4, #1056]	; 0x420
    aa60:	f204 623c 	addw	r2, r4, #1596	; 0x63c
    aa64:	1d33      	adds	r3, r6, #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aa66:	f506 7c82 	add.w	ip, r6, #260	; 0x104
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aa6a:	f833 6b02 	ldrh.w	r6, [r3], #2
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aa6e:	4563      	cmp	r3, ip
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aa70:	f842 6b04 	str.w	r6, [r2], #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aa74:	d1f9      	bne.n	aa6a <AudioAnalyzeFFT1024::update()+0x5e>
		copy_to_fft_buffer(buffer+0x200, blocklist[2]->data);
    aa76:	f8d4 6424 	ldr.w	r6, [r4, #1060]	; 0x424
    aa7a:	f604 023c 	addw	r2, r4, #2108	; 0x83c
    aa7e:	1d33      	adds	r3, r6, #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aa80:	f506 7c82 	add.w	ip, r6, #260	; 0x104
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aa84:	f833 6b02 	ldrh.w	r6, [r3], #2
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aa88:	4563      	cmp	r3, ip
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aa8a:	f842 6b04 	str.w	r6, [r2], #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aa8e:	d1f9      	bne.n	aa84 <AudioAnalyzeFFT1024::update()+0x78>
		copy_to_fft_buffer(buffer+0x300, blocklist[3]->data);
    aa90:	f8d4 6428 	ldr.w	r6, [r4, #1064]	; 0x428
    aa94:	f604 223c 	addw	r2, r4, #2620	; 0xa3c
    aa98:	1d33      	adds	r3, r6, #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aa9a:	f506 7c82 	add.w	ip, r6, #260	; 0x104
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aa9e:	f833 6b02 	ldrh.w	r6, [r3], #2
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aaa2:	4563      	cmp	r3, ip
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aaa4:	f842 6b04 	str.w	r6, [r2], #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aaa8:	d1f9      	bne.n	aa9e <AudioAnalyzeFFT1024::update()+0x92>
		copy_to_fft_buffer(buffer+0x400, blocklist[4]->data);
    aaaa:	f8d4 642c 	ldr.w	r6, [r4, #1068]	; 0x42c
    aaae:	f604 423c 	addw	r2, r4, #3132	; 0xc3c
    aab2:	1d33      	adds	r3, r6, #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aab4:	f506 7c82 	add.w	ip, r6, #260	; 0x104
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aab8:	f833 6b02 	ldrh.w	r6, [r3], #2
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aabc:	4563      	cmp	r3, ip
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aabe:	f842 6b04 	str.w	r6, [r2], #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aac2:	d1f9      	bne.n	aab8 <AudioAnalyzeFFT1024::update()+0xac>
		copy_to_fft_buffer(buffer+0x500, blocklist[5]->data);
    aac4:	f8d4 6430 	ldr.w	r6, [r4, #1072]	; 0x430
    aac8:	f604 623c 	addw	r2, r4, #3644	; 0xe3c
    aacc:	1d33      	adds	r3, r6, #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aace:	f506 7c82 	add.w	ip, r6, #260	; 0x104
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aad2:	f833 6b02 	ldrh.w	r6, [r3], #2
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aad6:	459c      	cmp	ip, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aad8:	f842 6b04 	str.w	r6, [r2], #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aadc:	d1f9      	bne.n	aad2 <AudioAnalyzeFFT1024::update()+0xc6>
		copy_to_fft_buffer(buffer+0x600, blocklist[6]->data);
    aade:	f8d4 6434 	ldr.w	r6, [r4, #1076]	; 0x434
    aae2:	f241 023c 	movw	r2, #4156	; 0x103c
    aae6:	1d33      	adds	r3, r6, #4
    aae8:	4422      	add	r2, r4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aaea:	f506 7c82 	add.w	ip, r6, #260	; 0x104
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aaee:	f833 6b02 	ldrh.w	r6, [r3], #2
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aaf2:	459c      	cmp	ip, r3
		*dst++ = *src++;  // real sample plus a zero for imaginary
    aaf4:	f842 6b04 	str.w	r6, [r2], #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    aaf8:	d1f9      	bne.n	aaee <AudioAnalyzeFFT1024::update()+0xe2>
		copy_to_fft_buffer(buffer+0x700, blocklist[7]->data);
    aafa:	f241 223c 	movw	r2, #4668	; 0x123c
    aafe:	1d03      	adds	r3, r0, #4
    ab00:	f500 7082 	add.w	r0, r0, #260	; 0x104
    ab04:	4422      	add	r2, r4
		*dst++ = *src++;  // real sample plus a zero for imaginary
    ab06:	f833 6b02 	ldrh.w	r6, [r3], #2
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ab0a:	4283      	cmp	r3, r0
		*dst++ = *src++;  // real sample plus a zero for imaginary
    ab0c:	f842 6b04 	str.w	r6, [r2], #4
	for (int i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ab10:	d1f9      	bne.n	ab06 <AudioAnalyzeFFT1024::update()+0xfa>
		if (window) apply_window_to_fft_buffer(buffer, window);
    ab12:	f8d4 0418 	ldr.w	r0, [r4, #1048]	; 0x418
    ab16:	b180      	cbz	r0, ab3a <AudioAnalyzeFFT1024::update()+0x12e>
    ab18:	f504 6288 	add.w	r2, r4, #1088	; 0x440
    ab1c:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
		int32_t val = *buf * *win++;
    ab20:	f832 3c04 	ldrh.w	r3, [r2, #-4]
	for (int i=0; i < 1024; i++) {
    ab24:	3204      	adds	r2, #4
		int32_t val = *buf * *win++;
    ab26:	f830 6b02 	ldrh.w	r6, [r0], #2
    ab2a:	fb13 f306 	smulbb	r3, r3, r6
	for (int i=0; i < 1024; i++) {
    ab2e:	4584      	cmp	ip, r0
		*buf = val >> 15;
    ab30:	ea4f 33e3 	mov.w	r3, r3, asr #15
    ab34:	f822 3c08 	strh.w	r3, [r2, #-8]
	for (int i=0; i < 1024; i++) {
    ab38:	d1f2      	bne.n	ab20 <AudioAnalyzeFFT1024::update()+0x114>
		arm_cfft_radix4_q15(&fft_inst, buffer);
    ab3a:	f241 4044 	movw	r0, #5188	; 0x1444
    ab3e:	4e35      	ldr	r6, [pc, #212]	; (ac14 <AudioAnalyzeFFT1024::update()+0x208>)
    ab40:	4420      	add	r0, r4
    ab42:	f013 f895 	bl	1dc70 <arm_cfft_radix4_q15>
		for (int i=0; i < 512; i++) {
    ab46:	f504 6187 	add.w	r1, r4, #1080	; 0x438
    ab4a:	f104 0016 	add.w	r0, r4, #22
    ab4e:	f604 4c38 	addw	ip, r4, #3128	; 0xc38
			uint32_t tmp = *((uint32_t *)buffer + i); // real & imag
    ab52:	f851 3f04 	ldr.w	r3, [r1, #4]!
// computes ((a[15:0] * b[15:0]) + (a[31:16] * b[31:16]))
static inline int32_t multiply_16tx16t_add_16bx16b(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16tx16t_add_16bx16b(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smuad %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    ab56:	fb23 f303 	smuad	r3, r3, r3
}

inline uint32_t sqrt_uint32_approx(uint32_t in) __attribute__((always_inline,unused));
inline uint32_t sqrt_uint32_approx(uint32_t in)
{
	uint32_t n = sqrt_integer_guess_table[__builtin_clz(in)];
    ab5a:	fab3 f283 	clz	r2, r3
		for (int i=0; i < 512; i++) {
    ab5e:	458c      	cmp	ip, r1
    ab60:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
	n = ((in / n) + n) / 2;
    ab64:	fbb3 f2fe 	udiv	r2, r3, lr
    ab68:	4472      	add	r2, lr
    ab6a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	n = ((in / n) + n) / 2;
    ab6e:	fbb3 f3f2 	udiv	r3, r3, r2
    ab72:	4413      	add	r3, r2
    ab74:	ea4f 0353 	mov.w	r3, r3, lsr #1
			output[i] = sqrt_uint32_approx(magsq);
    ab78:	f820 3f02 	strh.w	r3, [r0, #2]!
		for (int i=0; i < 512; i++) {
    ab7c:	d1e9      	bne.n	ab52 <AudioAnalyzeFFT1024::update()+0x146>
		outputflag = true;
    ab7e:	2301      	movs	r3, #1
		release(blocklist[0]);
    ab80:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
		outputflag = true;
    ab84:	f885 343d 	strb.w	r3, [r5, #1085]	; 0x43d
		release(blocklist[0]);
    ab88:	f00f fc8a 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		release(blocklist[1]);
    ab8c:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
    ab90:	f00f fc86 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		release(blocklist[2]);
    ab94:	f8d4 0424 	ldr.w	r0, [r4, #1060]	; 0x424
    ab98:	f00f fc82 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		release(blocklist[3]);
    ab9c:	f8d4 0428 	ldr.w	r0, [r4, #1064]	; 0x428
    aba0:	f00f fc7e 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		blocklist[0] = blocklist[4];
    aba4:	f8d4 242c 	ldr.w	r2, [r4, #1068]	; 0x42c
		blocklist[1] = blocklist[5];
    aba8:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
		blocklist[2] = blocklist[6];
    abac:	f8d4 1434 	ldr.w	r1, [r4, #1076]	; 0x434
		blocklist[0] = blocklist[4];
    abb0:	f8c4 241c 	str.w	r2, [r4, #1052]	; 0x41c
		blocklist[1] = blocklist[5];
    abb4:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
		state = 4;
    abb8:	2304      	movs	r3, #4
		blocklist[3] = blocklist[7];
    abba:	f8d4 2438 	ldr.w	r2, [r4, #1080]	; 0x438
		blocklist[2] = blocklist[6];
    abbe:	f8c4 1424 	str.w	r1, [r4, #1060]	; 0x424
		blocklist[3] = blocklist[7];
    abc2:	f8c4 2428 	str.w	r2, [r4, #1064]	; 0x428
		state = 4;
    abc6:	f885 343c 	strb.w	r3, [r5, #1084]	; 0x43c
}
    abca:	bd70      	pop	{r4, r5, r6, pc}
		state = 1;
    abcc:	2301      	movs	r3, #1
		blocklist[0] = block;
    abce:	f8c4 041c 	str.w	r0, [r4, #1052]	; 0x41c
		state = 1;
    abd2:	f885 343c 	strb.w	r3, [r5, #1084]	; 0x43c
}
    abd6:	bd70      	pop	{r4, r5, r6, pc}
		state = 2;
    abd8:	2302      	movs	r3, #2
		blocklist[1] = block;
    abda:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
		state = 2;
    abde:	f885 343c 	strb.w	r3, [r5, #1084]	; 0x43c
}
    abe2:	bd70      	pop	{r4, r5, r6, pc}
		state = 3;
    abe4:	2303      	movs	r3, #3
		blocklist[2] = block;
    abe6:	f8c4 0424 	str.w	r0, [r4, #1060]	; 0x424
		state = 3;
    abea:	f885 343c 	strb.w	r3, [r5, #1084]	; 0x43c
}
    abee:	bd70      	pop	{r4, r5, r6, pc}
		state = 4;
    abf0:	2304      	movs	r3, #4
		blocklist[3] = block;
    abf2:	f8c4 0428 	str.w	r0, [r4, #1064]	; 0x428
		state = 4;
    abf6:	f885 343c 	strb.w	r3, [r5, #1084]	; 0x43c
}
    abfa:	bd70      	pop	{r4, r5, r6, pc}
		state = 5;
    abfc:	2305      	movs	r3, #5
		blocklist[4] = block;
    abfe:	f8c4 042c 	str.w	r0, [r4, #1068]	; 0x42c
		state = 5;
    ac02:	f885 343c 	strb.w	r3, [r5, #1084]	; 0x43c
}
    ac06:	bd70      	pop	{r4, r5, r6, pc}
		state = 6;
    ac08:	2306      	movs	r3, #6
		blocklist[5] = block;
    ac0a:	f8c4 0430 	str.w	r0, [r4, #1072]	; 0x430
		state = 6;
    ac0e:	f885 343c 	strb.w	r3, [r5, #1084]	; 0x43c
}
    ac12:	bd70      	pop	{r4, r5, r6, pc}
    ac14:	20005660 	.word	0x20005660

0000ac18 <AudioAnalyzePeak::update()>:

#include <Arduino.h>
#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
    ac18:	b510      	push	{r4, lr}
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
    ac1a:	2100      	movs	r1, #0
{
    ac1c:	4604      	mov	r4, r0
	block = receiveReadOnly();
    ac1e:	f00f fc8b 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) {
    ac22:	b1c8      	cbz	r0, ac58 <AudioAnalyzePeak::update()+0x40>
		return;
	}
	p = block->data;
    ac24:	1d03      	adds	r3, r0, #4
	end = p + AUDIO_BLOCK_SAMPLES;
	min = min_sample;
    ac26:	f9b4 c01e 	ldrsh.w	ip, [r4, #30]
	max = max_sample;
    ac2a:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
    ac2e:	f500 7e82 	add.w	lr, r0, #260	; 0x104
	do {
		int16_t d=*p++;
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
    ac32:	f933 2b02 	ldrsh.w	r2, [r3], #2
    ac36:	4594      	cmp	ip, r2
    ac38:	bfa8      	it	ge
    ac3a:	4694      	movge	ip, r2
		if (d>max) max=d;
    ac3c:	4291      	cmp	r1, r2
    ac3e:	bfb8      	it	lt
    ac40:	4611      	movlt	r1, r2
	} while (p < end);
    ac42:	4573      	cmp	r3, lr
    ac44:	d1f5      	bne.n	ac32 <AudioAnalyzePeak::update()+0x1a>
	min_sample = min;
	max_sample = max;
	new_output = true;
    ac46:	2301      	movs	r3, #1
	min_sample = min;
    ac48:	f8a4 c01e 	strh.w	ip, [r4, #30]
	max_sample = max;
    ac4c:	8421      	strh	r1, [r4, #32]
	new_output = true;
    ac4e:	7723      	strb	r3, [r4, #28]
	release(block);
}
    ac50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	release(block);
    ac54:	f00f bc24 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
}
    ac58:	bd10      	pop	{r4, pc}
    ac5a:	bf00      	nop

0000ac5c <AudioAnalyzeRMS::update()>:
#include <Arduino.h>
#include "analyze_rms.h"
#include "utility/dspinst.h"

void AudioAnalyzeRMS::update(void)
{
    ac5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	audio_block_t *block = receiveReadOnly();
    ac60:	2100      	movs	r1, #0
{
    ac62:	4680      	mov	r8, r0
	audio_block_t *block = receiveReadOnly();
    ac64:	f00f fc68 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) {
    ac68:	b1f8      	cbz	r0, acaa <AudioAnalyzeRMS::update()+0x4e>
		return;
	}
#if defined(__ARM_ARCH_7EM__)
	uint32_t *p = (uint32_t *)(block->data);
	uint32_t *end = p + AUDIO_BLOCK_SAMPLES/2;
	int64_t sum = accum;
    ac6a:	f100 0114 	add.w	r1, r0, #20
    ac6e:	f500 7c8a 	add.w	ip, r0, #276	; 0x114
    ac72:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
	do {
		uint32_t n1 = *p++;
		uint32_t n2 = *p++;
    ac76:	e951 7604 	ldrd	r7, r6, [r1, #-16]
		uint32_t n3 = *p++;
		uint32_t n4 = *p++;
    ac7a:	e951 5402 	ldrd	r5, r4, [r1, #-8]
}

// // computes sum += ((a[15:0] * b[15:0]) + (a[31:16] * b[31:16]))
static inline int64_t multiply_accumulate_16tx16t_add_16bx16b(int64_t sum, uint32_t a, uint32_t b)
{
	asm volatile("smlald %Q0, %R0, %1, %2" : "+r" (sum) : "r" (a), "r" (b));
    ac7e:	fbc7 23c7 	smlald	r2, r3, r7, r7
    ac82:	fbc6 23c6 	smlald	r2, r3, r6, r6
    ac86:	fbc5 23c5 	smlald	r2, r3, r5, r5
    ac8a:	fbc4 23c4 	smlald	r2, r3, r4, r4
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n1, n1);
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n2, n2);
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n3, n3);
		sum = multiply_accumulate_16tx16t_add_16bx16b(sum, n4, n4);
	} while (p < end);
    ac8e:	3110      	adds	r1, #16
    ac90:	4561      	cmp	r1, ip
    ac92:	d1f0      	bne.n	ac76 <AudioAnalyzeRMS::update()+0x1a>
	accum = sum;
	count++;
    ac94:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
    ac98:	3101      	adds	r1, #1
	accum = sum;
    ac9a:	e9c8 2308 	strd	r2, r3, [r8, #32]
	count++;
    ac9e:	f8c8 1028 	str.w	r1, [r8, #40]	; 0x28
	} while (p < end);
	accum = sum;
	count++;
#endif
	release(block);
}
    aca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	release(block);
    aca6:	f00f bbfb 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
		count++;
    acaa:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    acae:	3301      	adds	r3, #1
    acb0:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
}
    acb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000acb8 <AudioAnalyzeRMS::read()>:

float AudioAnalyzeRMS::read(void)
{
    acb8:	b538      	push	{r3, r4, r5, lr}
	__disable_irq();
    acba:	b672      	cpsid	i
	int64_t sum = accum;
	accum = 0;
    acbc:	ed9f 7b12 	vldr	d7, [pc, #72]	; ad08 <AudioAnalyzeRMS::read()+0x50>
	uint32_t num = count;
	count = 0;
    acc0:	2300      	movs	r3, #0
	uint32_t num = count;
    acc2:	6a82      	ldr	r2, [r0, #40]	; 0x28
	int64_t sum = accum;
    acc4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
	count = 0;
    acc8:	6283      	str	r3, [r0, #40]	; 0x28
	accum = 0;
    acca:	ed80 7b08 	vstr	d7, [r0, #32]
	__enable_irq();
    acce:	b662      	cpsie	i
	float meansq = sum / (num * AUDIO_BLOCK_SAMPLES);
    acd0:	01d2      	lsls	r2, r2, #7
    acd2:	4620      	mov	r0, r4
    acd4:	4629      	mov	r1, r5
    acd6:	f015 fa27 	bl	20128 <__aeabi_ldivmod>
    acda:	f015 f9e7 	bl	200ac <__aeabi_l2f>
    acde:	ee07 0a90 	vmov	s15, r0
	// TODO: shift down to 32 bits and use sqrt_uint32
	//       but is that really any more efficient?
	return sqrtf(meansq) / 32767.0;
    ace2:	eef5 7a40 	vcmp.f32	s15, #0.0
    ace6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acea:	d406      	bmi.n	acfa <AudioAnalyzeRMS::read()+0x42>
    acec:	eeb1 0ae7 	vsqrt.f32	s0, s15
    acf0:	eddf 7a07 	vldr	s15, [pc, #28]	; ad10 <AudioAnalyzeRMS::read()+0x58>
}
    acf4:	ee80 0a27 	vdiv.f32	s0, s0, s15
    acf8:	bd38      	pop	{r3, r4, r5, pc}
	return sqrtf(meansq) / 32767.0;
    acfa:	ee00 0a10 	vmov	s0, r0
    acfe:	f013 fd77 	bl	1e7f0 <sqrtf>
    ad02:	e7f5      	b.n	acf0 <AudioAnalyzeRMS::read()+0x38>
    ad04:	f3af 8000 	nop.w
	...
    ad10:	46fffe00 	.word	0x46fffe00

0000ad14 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    ad14:	b510      	push	{r4, lr}
    ad16:	4604      	mov	r4, r0
		release();
    ad18:	f00f fdac 	bl	1a874 <DMAChannel::release()>
	}
    ad1c:	4620      	mov	r0, r4
    ad1e:	bd10      	pop	{r4, pc}

0000ad20 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    ad20:	4a02      	ldr	r2, [pc, #8]	; (ad2c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    ad22:	4903      	ldr	r1, [pc, #12]	; (ad30 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    ad24:	4803      	ldr	r0, [pc, #12]	; (ad34 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    ad26:	f014 bf2f 	b.w	1fb88 <__aeabi_atexit>
    ad2a:	bf00      	nop
    ad2c:	20009460 	.word	0x20009460
    ad30:	0000ad15 	.word	0x0000ad15
    ad34:	2000af58 	.word	0x2000af58

0000ad38 <AudioControlSGTL5000::disable()>:
	bool disable(void) { return false; }
    ad38:	2000      	movs	r0, #0
    ad3a:	4770      	bx	lr

0000ad3c <AudioControlSGTL5000::inputLevel(float)>:
	bool inputLevel(float n) {return false;}
    ad3c:	2000      	movs	r0, #0
    ad3e:	4770      	bx	lr

0000ad40 <AudioControlSGTL5000::read(unsigned int)>:
	return true;
}


unsigned int AudioControlSGTL5000::read(unsigned int reg)
{
    ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    ad42:	2701      	movs	r7, #1
		txBuffer[0] = (address << 1);
    ad44:	7a02      	ldrb	r2, [r0, #8]
    ad46:	4c1e      	ldr	r4, [pc, #120]	; (adc0 <AudioControlSGTL5000::read(unsigned int)+0x80>)
    ad48:	460d      	mov	r5, r1
    ad4a:	40ba      	lsls	r2, r7
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    ad4c:	f3c1 2107 	ubfx	r1, r1, #8, #8
    ad50:	4606      	mov	r6, r0
    ad52:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
    ad54:	f884 20a5 	strb.w	r2, [r4, #165]	; 0xa5
		transmitting = 1;
    ad58:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		txBufferLength = 1;
    ad5c:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		return write((uint8_t)n);
    ad60:	f009 fd5a 	bl	14818 <TwoWire::write(unsigned char)>
    ad64:	b2e9      	uxtb	r1, r5
    ad66:	4620      	mov	r0, r4
    ad68:	f009 fd56 	bl	14818 <TwoWire::write(unsigned char)>
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
    ad6c:	2100      	movs	r1, #0
    ad6e:	4620      	mov	r0, r4
    ad70:	f009 fe2a 	bl	149c8 <TwoWire::endTransmission(unsigned char)>
    ad74:	b108      	cbz	r0, ad7a <AudioControlSGTL5000::read(unsigned int)+0x3a>
    ad76:	2000      	movs	r0, #0
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
	val = Wire.read() << 8;
	val |= Wire.read();
	return val;
}
    ad78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    ad7a:	463b      	mov	r3, r7
    ad7c:	2202      	movs	r2, #2
    ad7e:	7a31      	ldrb	r1, [r6, #8]
    ad80:	4620      	mov	r0, r4
    ad82:	f009 fea1 	bl	14ac8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    ad86:	2801      	cmp	r0, #1
    ad88:	d9f5      	bls.n	ad76 <AudioControlSGTL5000::read(unsigned int)+0x36>
		if (rxBufferIndex >= rxBufferLength) return -1;
    ad8a:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
    ad8e:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    ad92:	4282      	cmp	r2, r0
    ad94:	d210      	bcs.n	adb8 <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    ad96:	1c53      	adds	r3, r2, #1
    ad98:	18a1      	adds	r1, r4, r2
    ad9a:	b2db      	uxtb	r3, r3
    ad9c:	7e89      	ldrb	r1, [r1, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    ad9e:	4298      	cmp	r0, r3
	val = Wire.read() << 8;
    ada0:	ea4f 2101 	mov.w	r1, r1, lsl #8
		return rxBuffer[rxBufferIndex++];
    ada4:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		if (rxBufferIndex >= rxBufferLength) return -1;
    ada8:	d906      	bls.n	adb8 <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    adaa:	4423      	add	r3, r4
    adac:	3202      	adds	r2, #2
    adae:	7e98      	ldrb	r0, [r3, #26]
    adb0:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
	val |= Wire.read();
    adb4:	4308      	orrs	r0, r1
}
    adb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    adb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    adbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    adbe:	bf00      	nop
    adc0:	20008bb0 	.word	0x20008bb0

0000adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		transmitting = 1;
    adc6:	2701      	movs	r7, #1
		txBuffer[0] = (address << 1);
    adc8:	7a03      	ldrb	r3, [r0, #8]
    adca:	4c14      	ldr	r4, [pc, #80]	; (ae1c <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x58>)
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    adcc:	2924      	cmp	r1, #36	; 0x24
    adce:	fa03 f307 	lsl.w	r3, r3, r7
{
    add2:	460d      	mov	r5, r1
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    add4:	bf08      	it	eq
    add6:	80c2      	strheq	r2, [r0, #6]
{
    add8:	4616      	mov	r6, r2
		return write((uint8_t)n);
    adda:	f3c1 2107 	ubfx	r1, r1, #8, #8
    adde:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
    ade0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		transmitting = 1;
    ade4:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		txBufferLength = 1;
    ade8:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		return write((uint8_t)n);
    adec:	f009 fd14 	bl	14818 <TwoWire::write(unsigned char)>
    adf0:	b2e9      	uxtb	r1, r5
    adf2:	4620      	mov	r0, r4
    adf4:	f009 fd10 	bl	14818 <TwoWire::write(unsigned char)>
    adf8:	f3c6 2107 	ubfx	r1, r6, #8, #8
    adfc:	4620      	mov	r0, r4
    adfe:	f009 fd0b 	bl	14818 <TwoWire::write(unsigned char)>
    ae02:	4620      	mov	r0, r4
    ae04:	b2f1      	uxtb	r1, r6
    ae06:	f009 fd07 	bl	14818 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    ae0a:	4639      	mov	r1, r7
    ae0c:	4620      	mov	r0, r4
    ae0e:	f009 fddb 	bl	149c8 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    ae12:	fab0 f080 	clz	r0, r0
    ae16:	0940      	lsrs	r0, r0, #5
    ae18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae1a:	bf00      	nop
    ae1c:	20008bb0 	.word	0x20008bb0

0000ae20 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]>:
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    ae20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        muted = true;
    ae24:	f04f 0801 	mov.w	r8, #1
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    ae28:	460f      	mov	r7, r1
    ae2a:	4615      	mov	r5, r2
	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    ae2c:	2130      	movs	r1, #48	; 0x30
    ae2e:	f244 0260 	movw	r2, #16480	; 0x4060
        muted = true;
    ae32:	f880 8004 	strb.w	r8, [r0, #4]
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    ae36:	4604      	mov	r4, r0
	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    ae38:	f7ff ffc4 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    ae3c:	4606      	mov	r6, r0
    ae3e:	b910      	cbnz	r0, ae46 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x26>
}
    ae40:	4630      	mov	r0, r6
    ae42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    ae46:	226c      	movs	r2, #108	; 0x6c
    ae48:	2126      	movs	r1, #38	; 0x26
    ae4a:	4620      	mov	r0, r4
    ae4c:	f7ff ffba 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    ae50:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
    ae54:	2128      	movs	r1, #40	; 0x28
    ae56:	4620      	mov	r0, r4
    ae58:	f7ff ffb4 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    ae5c:	f640 7222 	movw	r2, #3874	; 0xf22
    ae60:	212c      	movs	r1, #44	; 0x2c
    ae62:	4620      	mov	r0, r4
    ae64:	f7ff ffae 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    ae68:	f244 4246 	movw	r2, #17478	; 0x4446
    ae6c:	213c      	movs	r1, #60	; 0x3c
    ae6e:	4620      	mov	r0, r4
    ae70:	f7ff ffa8 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    ae74:	f240 1237 	movw	r2, #311	; 0x137
    ae78:	2124      	movs	r1, #36	; 0x24
    ae7a:	4620      	mov	r0, r4
    ae7c:	f7ff ffa2 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (extMCLK > 0) {
    ae80:	2f00      	cmp	r7, #0
    ae82:	d06b      	beq.n	af5c <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x13c>
		if (extMCLK > 17000000) {
    ae84:	4b45      	ldr	r3, [pc, #276]	; (af9c <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x17c>)
			write(CHIP_CLK_TOP_CTRL, 0);
    ae86:	2134      	movs	r1, #52	; 0x34
    ae88:	4620      	mov	r0, r4
		if (extMCLK > 17000000) {
    ae8a:	429f      	cmp	r7, r3
			write(CHIP_CLK_TOP_CTRL, 1);
    ae8c:	bf8c      	ite	hi
    ae8e:	4642      	movhi	r2, r8
			write(CHIP_CLK_TOP_CTRL, 0);
    ae90:	2200      	movls	r2, #0
    ae92:	f7ff ff97 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    ae96:	ee07 5a90 	vmov	s15, r5
    ae9a:	ed9f 7a41 	vldr	s14, [pc, #260]	; afa0 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x180>
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    ae9e:	2132      	movs	r1, #50	; 0x32
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    aea0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
    aea4:	ee07 7a90 	vmov	s15, r7
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    aea8:	4620      	mov	r0, r4
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    aeaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    aeae:	fbb5 f2f7 	udiv	r2, r5, r7
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    aeb2:	eec6 7a26 	vdiv.f32	s15, s12, s13
		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    aeb6:	f002 021f 	and.w	r2, r2, #31
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    aeba:	ee06 2a90 	vmov	s13, r2
    aebe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    aec2:	ee77 7ae6 	vsub.f32	s15, s15, s13
    aec6:	ee67 7a87 	vmul.f32	s15, s15, s14
    aeca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    aece:	ee17 3a90 	vmov	r3, s15
    aed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    aed6:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
    aeda:	f7ff ff73 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
    aede:	f244 52ff 	movw	r2, #17919	; 0x45ff
    aee2:	2130      	movs	r1, #48	; 0x30
    aee4:	4620      	mov	r0, r4
    aee6:	f7ff ff6d 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    aeea:	2273      	movs	r2, #115	; 0x73
    aeec:	2102      	movs	r1, #2
    aeee:	4620      	mov	r0, r4
    aef0:	f7ff ff68 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    aef4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    aef8:	f010 fb1c 	bl	1b534 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    aefc:	f641 521d 	movw	r2, #7453	; 0x1d1d
    af00:	212e      	movs	r1, #46	; 0x2e
    af02:	4620      	mov	r0, r4
    af04:	f7ff ff5e 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
    af08:	2207      	movs	r2, #7
    af0a:	2104      	movs	r1, #4
    af0c:	4620      	mov	r0, r4
    af0e:	f7ff ff59 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
    af12:	22b0      	movs	r2, #176	; 0xb0
    af14:	2106      	movs	r1, #6
    af16:	4620      	mov	r0, r4
    af18:	f7ff ff54 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    af1c:	2210      	movs	r2, #16
    af1e:	210a      	movs	r1, #10
    af20:	4620      	mov	r0, r4
    af22:	f7ff ff4f 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    af26:	2200      	movs	r2, #0
    af28:	210e      	movs	r1, #14
    af2a:	4620      	mov	r0, r4
    af2c:	f7ff ff4a 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    af30:	f643 423c 	movw	r2, #15420	; 0x3c3c
    af34:	2110      	movs	r1, #16
    af36:	4620      	mov	r0, r4
    af38:	f7ff ff44 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    af3c:	f647 727f 	movw	r2, #32639	; 0x7f7f
    af40:	2122      	movs	r1, #34	; 0x22
    af42:	4620      	mov	r0, r4
    af44:	f7ff ff3e 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    af48:	2236      	movs	r2, #54	; 0x36
    af4a:	2124      	movs	r1, #36	; 0x24
    af4c:	4620      	mov	r0, r4
    af4e:	f7ff ff39 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	semi_automated = true;
    af52:	2301      	movs	r3, #1
}
    af54:	4630      	mov	r0, r6
	semi_automated = true;
    af56:	7263      	strb	r3, [r4, #9]
}
    af58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    af5c:	f244 02ff 	movw	r2, #16639	; 0x40ff
    af60:	2130      	movs	r1, #48	; 0x30
    af62:	4620      	mov	r0, r4
    af64:	f7ff ff2e 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    af68:	2273      	movs	r2, #115	; 0x73
    af6a:	2102      	movs	r1, #2
    af6c:	4620      	mov	r0, r4
    af6e:	f7ff ff29 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    af72:	f44f 70c8 	mov.w	r0, #400	; 0x190
    af76:	f010 fadd 	bl	1b534 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    af7a:	f641 521d 	movw	r2, #7453	; 0x1d1d
    af7e:	212e      	movs	r1, #46	; 0x2e
    af80:	4620      	mov	r0, r4
    af82:	f7ff ff1f 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    af86:	2204      	movs	r2, #4
    af88:	4620      	mov	r0, r4
    af8a:	4611      	mov	r1, r2
    af8c:	f7ff ff1a 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    af90:	2230      	movs	r2, #48	; 0x30
    af92:	2106      	movs	r1, #6
    af94:	4620      	mov	r0, r4
    af96:	f7ff ff15 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    af9a:	e7bf      	b.n	af1c <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0xfc>
    af9c:	01036640 	.word	0x01036640
    afa0:	45000000 	.word	0x45000000

0000afa4 <AudioControlSGTL5000::enable()>:
bool AudioControlSGTL5000::enable(void) {
    afa4:	b510      	push	{r4, lr}
    afa6:	4604      	mov	r4, r0
	Wire.begin();
    afa8:	4808      	ldr	r0, [pc, #32]	; (afcc <AudioControlSGTL5000::enable()+0x28>)
    afaa:	f01d fbc1 	bl	28730 <___ZN7TwoWire5beginEv_veneer>
	delay(5);
    afae:	2005      	movs	r0, #5
    afb0:	f010 fac0 	bl	1b534 <delay>
	unsigned int n = read(CHIP_I2S_CTRL);
    afb4:	2106      	movs	r1, #6
    afb6:	4620      	mov	r0, r4
    afb8:	f7ff fec2 	bl	ad40 <AudioControlSGTL5000::read(unsigned int)>
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
    afbc:	4620      	mov	r0, r4
    afbe:	4a04      	ldr	r2, [pc, #16]	; (afd0 <AudioControlSGTL5000::enable()+0x2c>)
    afc0:	2100      	movs	r1, #0
}
    afc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afc6:	f7ff bf2b 	b.w	ae20 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]>
    afca:	bf00      	nop
    afcc:	20008bb0 	.word	0x20008bb0
    afd0:	0ac44000 	.word	0x0ac44000

0000afd4 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    afd4:	b510      	push	{r4, lr}
    afd6:	4604      	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    afd8:	b1d1      	cbz	r1, b010 <AudioControlSGTL5000::inputSelect(int)+0x3c>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    afda:	2901      	cmp	r1, #1
    afdc:	d001      	beq.n	afe2 <AudioControlSGTL5000::inputSelect(int)+0xe>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    afde:	2000      	movs	r0, #0
    afe0:	bd10      	pop	{r4, pc}
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    afe2:	f240 1273 	movw	r2, #371	; 0x173
    afe6:	212a      	movs	r1, #42	; 0x2a
    afe8:	f7ff feec 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    afec:	2800      	cmp	r0, #0
    afee:	d0f6      	beq.n	afde <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    aff0:	2288      	movs	r2, #136	; 0x88
    aff2:	2120      	movs	r1, #32
    aff4:	4620      	mov	r0, r4
    aff6:	f7ff fee5 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    affa:	2800      	cmp	r0, #0
    affc:	d0ef      	beq.n	afde <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    affe:	88e2      	ldrh	r2, [r4, #6]
    b000:	4620      	mov	r0, r4
    b002:	2124      	movs	r1, #36	; 0x24
    b004:	f022 0204 	bic.w	r2, r2, #4
	}
    b008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    b00c:	f7ff beda 	b.w	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    b010:	2255      	movs	r2, #85	; 0x55
    b012:	2120      	movs	r1, #32
    b014:	f7ff fed6 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    b018:	2800      	cmp	r0, #0
    b01a:	d0e0      	beq.n	afde <AudioControlSGTL5000::inputSelect(int)+0xa>
    b01c:	88e2      	ldrh	r2, [r4, #6]
    b01e:	4620      	mov	r0, r4
    b020:	2124      	movs	r1, #36	; 0x24
    b022:	f042 0204 	orr.w	r2, r2, #4
	}
    b026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    b02a:	f7ff becb 	b.w	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    b02e:	bf00      	nop

0000b030 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    b030:	b538      	push	{r3, r4, r5, lr}
    b032:	4605      	mov	r5, r0
	if (n == 0) {
    b034:	b311      	cbz	r1, b07c <AudioControlSGTL5000::volumeInteger(unsigned int)+0x4c>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    b036:	2980      	cmp	r1, #128	; 0x80
    b038:	d80c      	bhi.n	b054 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x24>
		n = 0;
	} else {
		n = 0x80 - n;
    b03a:	f1c1 0480 	rsb	r4, r1, #128	; 0x80
	}
	if (muted) {
    b03e:	792b      	ldrb	r3, [r5, #4]
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
    b040:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
	if (muted) {
    b044:	b953      	cbnz	r3, b05c <AudioControlSGTL5000::volumeInteger(unsigned int)+0x2c>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b046:	4622      	mov	r2, r4
    b048:	4628      	mov	r0, r5
    b04a:	2122      	movs	r1, #34	; 0x22
}
    b04c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b050:	f7ff beb8 	b.w	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (muted) {
    b054:	792b      	ldrb	r3, [r5, #4]
    b056:	2400      	movs	r4, #0
    b058:	2b00      	cmp	r3, #0
    b05a:	d0f4      	beq.n	b046 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x16>
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    b05c:	88ea      	ldrh	r2, [r5, #6]
		muted = false;
    b05e:	2300      	movs	r3, #0
    b060:	2124      	movs	r1, #36	; 0x24
    b062:	4628      	mov	r0, r5
    b064:	f022 0210 	bic.w	r2, r2, #16
    b068:	712b      	strb	r3, [r5, #4]
    b06a:	f7ff feab 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b06e:	4622      	mov	r2, r4
    b070:	4628      	mov	r0, r5
    b072:	2122      	movs	r1, #34	; 0x22
}
    b074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b078:	f7ff bea4 	b.w	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		muted = true;
    b07c:	2301      	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    b07e:	f647 727f 	movw	r2, #32639	; 0x7f7f
    b082:	2122      	movs	r1, #34	; 0x22
		muted = true;
    b084:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    b086:	f7ff fe9d 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    b08a:	88ea      	ldrh	r2, [r5, #6]
    b08c:	4628      	mov	r0, r5
    b08e:	2124      	movs	r1, #36	; 0x24
    b090:	f042 0210 	orr.w	r2, r2, #16
}
    b094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b098:	f7ff be94 	b.w	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

0000b09c <AudioControlSGTL5000::volume(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    b09c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; b11c <AudioControlSGTL5000::volume(float)+0x80>
    b0a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; b120 <AudioControlSGTL5000::volume(float)+0x84>
    b0a4:	eee0 7a07 	vfma.f32	s15, s0, s14
    b0a8:	b538      	push	{r3, r4, r5, lr}
    b0aa:	4605      	mov	r5, r0
    b0ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    b0b0:	ee17 4a90 	vmov	r4, s15
	if (n == 0) {
    b0b4:	b314      	cbz	r4, b0fc <AudioControlSGTL5000::volume(float)+0x60>
	} else if (n > 0x80) {
    b0b6:	2c80      	cmp	r4, #128	; 0x80
    b0b8:	d80c      	bhi.n	b0d4 <AudioControlSGTL5000::volume(float)+0x38>
		n = 0x80 - n;
    b0ba:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (muted) {
    b0be:	792b      	ldrb	r3, [r5, #4]
	n = n | (n << 8);
    b0c0:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
	if (muted) {
    b0c4:	b953      	cbnz	r3, b0dc <AudioControlSGTL5000::volume(float)+0x40>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b0c6:	4622      	mov	r2, r4
    b0c8:	4628      	mov	r0, r5
    b0ca:	2122      	movs	r1, #34	; 0x22
    b0cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b0d0:	f7ff be78 	b.w	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (muted) {
    b0d4:	792b      	ldrb	r3, [r5, #4]
    b0d6:	2400      	movs	r4, #0
    b0d8:	2b00      	cmp	r3, #0
    b0da:	d0f4      	beq.n	b0c6 <AudioControlSGTL5000::volume(float)+0x2a>
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    b0dc:	88ea      	ldrh	r2, [r5, #6]
		muted = false;
    b0de:	2300      	movs	r3, #0
    b0e0:	2124      	movs	r1, #36	; 0x24
    b0e2:	4628      	mov	r0, r5
    b0e4:	f022 0210 	bic.w	r2, r2, #16
    b0e8:	712b      	strb	r3, [r5, #4]
    b0ea:	f7ff fe6b 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b0ee:	4622      	mov	r2, r4
    b0f0:	4628      	mov	r0, r5
    b0f2:	2122      	movs	r1, #34	; 0x22
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    b0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b0f8:	f7ff be64 	b.w	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		muted = true;
    b0fc:	2301      	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    b0fe:	f647 727f 	movw	r2, #32639	; 0x7f7f
    b102:	2122      	movs	r1, #34	; 0x22
		muted = true;
    b104:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    b106:	f7ff fe5d 	bl	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    b10a:	88ea      	ldrh	r2, [r5, #6]
    b10c:	4628      	mov	r0, r5
    b10e:	2124      	movs	r1, #36	; 0x24
    b110:	f042 0210 	orr.w	r2, r2, #16
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    b114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    b118:	f7ff be54 	b.w	adc4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    b11c:	43010000 	.word	0x43010000
    b120:	3eff7cee 	.word	0x3eff7cee

0000b124 <AudioEffectDelay::update()>:

#include <Arduino.h>
#include "effect_delay.h"

void AudioEffectDelay::update(void)
{
    b124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, tail, count, channel, index, prev, offset;
	const int16_t *src, *end;
	int16_t *dst;

	// grab incoming data and put it into the queue
	head = headindex;
    b128:	f8b0 801a 	ldrh.w	r8, [r0, #26]
	tail = tailindex;
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
    b12c:	f240 5362 	movw	r3, #1378	; 0x562
{
    b130:	4605      	mov	r5, r0
	tail = tailindex;
    b132:	8b86      	ldrh	r6, [r0, #28]
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
    b134:	f108 0801 	add.w	r8, r8, #1
    b138:	4598      	cmp	r8, r3
    b13a:	f200 80b7 	bhi.w	b2ac <AudioEffectDelay::update()+0x188>
	if (head == tail) {
    b13e:	45b0      	cmp	r8, r6
		if (queue[tail] != NULL) release(queue[tail]);
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
	}
	queue[head] = receiveReadOnly();
	headindex = head;
    b140:	fa1f f788 	uxth.w	r7, r8
		if (queue[tail] != NULL) release(queue[tail]);
    b144:	f108 0410 	add.w	r4, r8, #16
	if (head == tail) {
    b148:	f000 80b7 	beq.w	b2ba <AudioEffectDelay::update()+0x196>
	queue[head] = receiveReadOnly();
    b14c:	2100      	movs	r1, #0
    b14e:	4628      	mov	r0, r5
    b150:	f00f f9f2 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
	//		digitalWriteFast(2, LOW);
	//	}
	//}

	// discard unneeded blocks from the queue
	if (head >= tail) {
    b154:	45b0      	cmp	r8, r6
	queue[head] = receiveReadOnly();
    b156:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	headindex = head;
    b15a:	836f      	strh	r7, [r5, #26]
	if (head >= tail) {
    b15c:	f080 80c2 	bcs.w	b2e4 <AudioEffectDelay::update()+0x1c0>
		count = head - tail;
	} else {
		count = DELAY_QUEUE_SIZE + head - tail;
    b160:	f208 5463 	addw	r4, r8, #1379	; 0x563
    b164:	1ba4      	subs	r4, r4, r6
	}
	if (count > maxblocks) {
    b166:	8beb      	ldrh	r3, [r5, #30]
    b168:	42a3      	cmp	r3, r4
    b16a:	d212      	bcs.n	b192 <AudioEffectDelay::update()+0x6e>
		count -= maxblocks;
    b16c:	1ae4      	subs	r4, r4, r3
		do {
			if (queue[tail] != NULL) {
				release(queue[tail]);
				queue[tail] = NULL;
    b16e:	f04f 0a00 	mov.w	sl, #0
			}
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    b172:	f240 5962 	movw	r9, #1378	; 0x562
				release(queue[tail]);
    b176:	eb05 0786 	add.w	r7, r5, r6, lsl #2
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    b17a:	3601      	adds	r6, #1
			if (queue[tail] != NULL) {
    b17c:	6c38      	ldr	r0, [r7, #64]	; 0x40
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    b17e:	454e      	cmp	r6, r9
    b180:	bf88      	it	hi
    b182:	2600      	movhi	r6, #0
			if (queue[tail] != NULL) {
    b184:	b118      	cbz	r0, b18e <AudioEffectDelay::update()+0x6a>
				release(queue[tail]);
    b186:	f00f f98b 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
				queue[tail] = NULL;
    b18a:	f8c7 a040 	str.w	sl, [r7, #64]	; 0x40
		} while (--count > 0);
    b18e:	3c01      	subs	r4, #1
    b190:	d1f1      	bne.n	b176 <AudioEffectDelay::update()+0x52>
	}
	tailindex = tail;

	// transmit the delayed outputs using queue data
	for (channel = 0; channel < 8; channel++) {
    b192:	2400      	movs	r4, #0
		if (!(activemask & (1<<channel))) continue;
		index =  position[channel] / AUDIO_BLOCK_SAMPLES;
    b194:	f105 0920 	add.w	r9, r5, #32
	tailindex = tail;
    b198:	83ae      	strh	r6, [r5, #28]
		if (!(activemask & (1<<channel))) continue;
    b19a:	7e2b      	ldrb	r3, [r5, #24]
    b19c:	4123      	asrs	r3, r4
    b19e:	07db      	lsls	r3, r3, #31
    b1a0:	d515      	bpl.n	b1ce <AudioEffectDelay::update()+0xaa>
		index =  position[channel] / AUDIO_BLOCK_SAMPLES;
    b1a2:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
		offset = position[channel] % AUDIO_BLOCK_SAMPLES;
		if (head >= index) {
    b1a6:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
		offset = position[channel] % AUDIO_BLOCK_SAMPLES;
    b1aa:	f003 0a7f 	and.w	sl, r3, #127	; 0x7f
		index =  position[channel] / AUDIO_BLOCK_SAMPLES;
    b1ae:	ea4f 16d3 	mov.w	r6, r3, lsr #7
		if (head >= index) {
    b1b2:	d311      	bcc.n	b1d8 <AudioEffectDelay::update()+0xb4>
			index = head - index;
    b1b4:	eba8 0606 	sub.w	r6, r8, r6
		} else {
			index = DELAY_QUEUE_SIZE + head - index;
		}
		if (offset == 0) {
    b1b8:	f1ba 0f00 	cmp.w	sl, #0
    b1bc:	d112      	bne.n	b1e4 <AudioEffectDelay::update()+0xc0>
			// delay falls on the block boundary
			if (queue[index]) {
    b1be:	3610      	adds	r6, #16
    b1c0:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
    b1c4:	b119      	cbz	r1, b1ce <AudioEffectDelay::update()+0xaa>
				transmit(queue[index], channel);
    b1c6:	b2e2      	uxtb	r2, r4
    b1c8:	4628      	mov	r0, r5
    b1ca:	f00f f991 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	for (channel = 0; channel < 8; channel++) {
    b1ce:	3401      	adds	r4, #1
    b1d0:	2c08      	cmp	r4, #8
    b1d2:	d1e2      	bne.n	b19a <AudioEffectDelay::update()+0x76>
			transmit(output, channel);
			release(output);
		}
	}

}
    b1d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			index = DELAY_QUEUE_SIZE + head - index;
    b1d8:	f208 5363 	addw	r3, r8, #1379	; 0x563
    b1dc:	1b9e      	subs	r6, r3, r6
		if (offset == 0) {
    b1de:	f1ba 0f00 	cmp.w	sl, #0
    b1e2:	d0ec      	beq.n	b1be <AudioEffectDelay::update()+0x9a>
			output = allocate();
    b1e4:	f00f f906 	bl	1a3f4 <AudioStream::allocate()>
			if (!output) continue;
    b1e8:	4683      	mov	fp, r0
    b1ea:	2800      	cmp	r0, #0
    b1ec:	d0ef      	beq.n	b1ce <AudioEffectDelay::update()+0xaa>
			dst = output->data;
    b1ee:	1d07      	adds	r7, r0, #4
			if (index > 0) {
    b1f0:	b396      	cbz	r6, b258 <AudioEffectDelay::update()+0x134>
				prev = index - 1;
    b1f2:	1e73      	subs	r3, r6, #1
			if (queue[prev]) {
    b1f4:	3310      	adds	r3, #16
    b1f6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    b1fa:	b3a1      	cbz	r1, b266 <AudioEffectDelay::update()+0x142>
				end = queue[prev]->data + AUDIO_BLOCK_SAMPLES;
    b1fc:	f501 7e82 	add.w	lr, r1, #260	; 0x104
				src = end - offset;
    b200:	ebae 024a 	sub.w	r2, lr, sl, lsl #1
				while (src < end) {
    b204:	4596      	cmp	lr, r2
    b206:	d90e      	bls.n	b226 <AudioEffectDelay::update()+0x102>
			dst = output->data;
    b208:	4638      	mov	r0, r7
				while (src < end) {
    b20a:	4613      	mov	r3, r2
					*dst++ = *src++; // TODO: optimize
    b20c:	f933 cb02 	ldrsh.w	ip, [r3], #2
				while (src < end) {
    b210:	459e      	cmp	lr, r3
					*dst++ = *src++; // TODO: optimize
    b212:	f820 cb02 	strh.w	ip, [r0], #2
				while (src < end) {
    b216:	d8f9      	bhi.n	b20c <AudioEffectDelay::update()+0xe8>
					*dst++ = *src++; // TODO: optimize
    b218:	f201 1303 	addw	r3, r1, #259	; 0x103
    b21c:	1a9b      	subs	r3, r3, r2
    b21e:	f023 0301 	bic.w	r3, r3, #1
    b222:	3302      	adds	r3, #2
    b224:	441f      	add	r7, r3
			if (queue[index]) {
    b226:	3610      	adds	r6, #16
			end = output->data + AUDIO_BLOCK_SAMPLES;
    b228:	f50b 7282 	add.w	r2, fp, #260	; 0x104
			if (queue[index]) {
    b22c:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
    b230:	b381      	cbz	r1, b294 <AudioEffectDelay::update()+0x170>
				while (dst < end) {
    b232:	4297      	cmp	r7, r2
				src = queue[index]->data;
    b234:	f101 0104 	add.w	r1, r1, #4
				while (dst < end) {
    b238:	d205      	bcs.n	b246 <AudioEffectDelay::update()+0x122>
					*dst++ = *src++; // TODO: optimize
    b23a:	f931 3b02 	ldrsh.w	r3, [r1], #2
    b23e:	f827 3b02 	strh.w	r3, [r7], #2
				while (dst < end) {
    b242:	42ba      	cmp	r2, r7
    b244:	d8f9      	bhi.n	b23a <AudioEffectDelay::update()+0x116>
			transmit(output, channel);
    b246:	4628      	mov	r0, r5
    b248:	b2e2      	uxtb	r2, r4
    b24a:	4659      	mov	r1, fp
    b24c:	f00f f950 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
			release(output);
    b250:	4658      	mov	r0, fp
    b252:	f00f f925 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
    b256:	e7ba      	b.n	b1ce <AudioEffectDelay::update()+0xaa>
				prev = DELAY_QUEUE_SIZE-1;
    b258:	f240 5362 	movw	r3, #1378	; 0x562
			if (queue[prev]) {
    b25c:	3310      	adds	r3, #16
    b25e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    b262:	2900      	cmp	r1, #0
    b264:	d1ca      	bne.n	b1fc <AudioEffectDelay::update()+0xd8>
				end = dst + offset;
    b266:	eb07 024a 	add.w	r2, r7, sl, lsl #1
				while (dst < end) {
    b26a:	4297      	cmp	r7, r2
    b26c:	d2db      	bcs.n	b226 <AudioEffectDelay::update()+0x102>
					*dst++ = 0;
    b26e:	f06f 0304 	mvn.w	r3, #4
			if (queue[index]) {
    b272:	3610      	adds	r6, #16
					*dst++ = 0;
    b274:	4638      	mov	r0, r7
    b276:	eba3 030b 	sub.w	r3, r3, fp
    b27a:	441a      	add	r2, r3
    b27c:	f022 0201 	bic.w	r2, r2, #1
    b280:	3202      	adds	r2, #2
    b282:	4417      	add	r7, r2
    b284:	f017 f83c 	bl	22300 <memset>
			if (queue[index]) {
    b288:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
			end = output->data + AUDIO_BLOCK_SAMPLES;
    b28c:	f50b 7282 	add.w	r2, fp, #260	; 0x104
			if (queue[index]) {
    b290:	2900      	cmp	r1, #0
    b292:	d1ce      	bne.n	b232 <AudioEffectDelay::update()+0x10e>
				while (dst < end) {
    b294:	4297      	cmp	r7, r2
    b296:	d2d6      	bcs.n	b246 <AudioEffectDelay::update()+0x122>
					*dst++ = 0;
    b298:	f20b 1203 	addw	r2, fp, #259	; 0x103
    b29c:	4638      	mov	r0, r7
    b29e:	1bd2      	subs	r2, r2, r7
    b2a0:	f022 0201 	bic.w	r2, r2, #1
    b2a4:	3202      	adds	r2, #2
    b2a6:	f017 f82b 	bl	22300 <memset>
    b2aa:	e7cc      	b.n	b246 <AudioEffectDelay::update()+0x122>
    b2ac:	2700      	movs	r7, #0
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
    b2ae:	46b8      	mov	r8, r7
	if (head == tail) {
    b2b0:	45b0      	cmp	r8, r6
		if (queue[tail] != NULL) release(queue[tail]);
    b2b2:	f108 0410 	add.w	r4, r8, #16
	if (head == tail) {
    b2b6:	f47f af49 	bne.w	b14c <AudioEffectDelay::update()+0x28>
		if (queue[tail] != NULL) release(queue[tail]);
    b2ba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    b2be:	b108      	cbz	r0, b2c4 <AudioEffectDelay::update()+0x1a0>
    b2c0:	f00f f8ee 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    b2c4:	3601      	adds	r6, #1
    b2c6:	f240 5363 	movw	r3, #1379	; 0x563
    b2ca:	429e      	cmp	r6, r3
    b2cc:	f47f af3e 	bne.w	b14c <AudioEffectDelay::update()+0x28>
	queue[head] = receiveReadOnly();
    b2d0:	2100      	movs	r1, #0
    b2d2:	4628      	mov	r0, r5
    b2d4:	f00f f930 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    b2d8:	2600      	movs	r6, #0
	queue[head] = receiveReadOnly();
    b2da:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	headindex = head;
    b2de:	4644      	mov	r4, r8
    b2e0:	836f      	strh	r7, [r5, #26]
	if (head >= tail) {
    b2e2:	e740      	b.n	b166 <AudioEffectDelay::update()+0x42>
		count = head - tail;
    b2e4:	eba8 0406 	sub.w	r4, r8, r6
    b2e8:	e73d      	b.n	b166 <AudioEffectDelay::update()+0x42>
    b2ea:	bf00      	nop

0000b2ec <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    b2ec:	b430      	push	{r4, r5}
    b2ee:	b082      	sub	sp, #8
    b2f0:	460c      	mov	r4, r1
    b2f2:	ab02      	add	r3, sp, #8
    b2f4:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    b2f8:	7cc3      	ldrb	r3, [r0, #19]
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d030      	beq.n	b360 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    b2fe:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    b300:	7cc3      	ldrb	r3, [r0, #19]
    b302:	07da      	lsls	r2, r3, #31
    b304:	d508      	bpl.n	b318 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    b306:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b30a:	6945      	ldr	r5, [r0, #20]
    b30c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    b310:	402a      	ands	r2, r5
    b312:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    b314:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    b318:	079d      	lsls	r5, r3, #30
    b31a:	d508      	bpl.n	b32e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    b31c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b320:	6985      	ldr	r5, [r0, #24]
    b322:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    b326:	402a      	ands	r2, r5
    b328:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    b32a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    b32e:	0759      	lsls	r1, r3, #29
    b330:	d508      	bpl.n	b344 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    b332:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b336:	69c5      	ldr	r5, [r0, #28]
    b338:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    b33c:	402a      	ands	r2, r5
    b33e:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    b340:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    b344:	071a      	lsls	r2, r3, #28
    b346:	d508      	bpl.n	b35a <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    b348:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b34c:	6a05      	ldr	r5, [r0, #32]
    b34e:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    b352:	402a      	ands	r2, r5
    b354:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    b356:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    b35a:	06db      	lsls	r3, r3, #27
    b35c:	d42f      	bmi.n	b3be <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    b35e:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    b360:	6883      	ldr	r3, [r0, #8]
    b362:	429c      	cmp	r4, r3
    b364:	d035      	beq.n	b3d2 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    b366:	4b22      	ldr	r3, [pc, #136]	; (b3f0 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    b368:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    b36a:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    b36c:	4a21      	ldr	r2, [pc, #132]	; (b3f4 <SPIClass::beginTransaction(SPISettings)+0x108>)
    b36e:	f3c3 1101 	ubfx	r1, r3, #4, #2
    b372:	f3c3 6382 	ubfx	r3, r3, #26, #3
    b376:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    b37a:	3301      	adds	r3, #1
    b37c:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    b380:	b1cc      	cbz	r4, b3b6 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    b382:	4294      	cmp	r4, r2
    b384:	d827      	bhi.n	b3d6 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    b386:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    b38a:	fbb2 f2f3 	udiv	r2, r2, r3
    b38e:	4294      	cmp	r4, r2
    b390:	d32c      	bcc.n	b3ec <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    b392:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    b396:	d320      	bcc.n	b3da <SPIClass::beginTransaction(SPISettings)+0xee>
    b398:	4c17      	ldr	r4, [pc, #92]	; (b3f8 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    b39a:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b39c:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    b39e:	2203      	movs	r2, #3
		port().CR = 0;
    b3a0:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    b3a2:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    b3a4:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    b3a6:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    b3a8:	2201      	movs	r2, #1
		port().CCR = _ccr;
    b3aa:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    b3ac:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    b3ae:	611a      	str	r2, [r3, #16]
	}
    b3b0:	b002      	add	sp, #8
    b3b2:	bc30      	pop	{r4, r5}
    b3b4:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    b3b6:	4299      	cmp	r1, r3
    b3b8:	d3ef      	bcc.n	b39a <SPIClass::beginTransaction(SPISettings)+0xae>
    b3ba:	1c53      	adds	r3, r2, #1
    b3bc:	e7e9      	b.n	b392 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    b3be:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b3c2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    b3c4:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    b3c8:	400b      	ands	r3, r1
    b3ca:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    b3cc:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    b3d0:	e7c5      	b.n	b35e <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    b3d2:	68c4      	ldr	r4, [r0, #12]
    b3d4:	e7e2      	b.n	b39c <SPIClass::beginTransaction(SPISettings)+0xb0>
    b3d6:	2400      	movs	r4, #0
    b3d8:	e7df      	b.n	b39a <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    b3da:	2b02      	cmp	r3, #2
    b3dc:	d9fb      	bls.n	b3d6 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    b3de:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    b3e0:	085a      	lsrs	r2, r3, #1
    b3e2:	0214      	lsls	r4, r2, #8
    b3e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    b3e8:	431c      	orrs	r4, r3
    b3ea:	e7d6      	b.n	b39a <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    b3ec:	461a      	mov	r2, r3
    b3ee:	e7e4      	b.n	b3ba <SPIClass::beginTransaction(SPISettings)+0xce>
    b3f0:	400fc000 	.word	0x400fc000
    b3f4:	20003fac 	.word	0x20003fac
    b3f8:	007f7fff 	.word	0x007f7fff

0000b3fc <AudioEffectMultiply::update()>:

#include <Arduino.h>
#include "effect_multiply.h"

void AudioEffectMultiply::update(void)
{
    b3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	audio_block_t *blocka, *blockb;
	uint32_t *pa, *pb, *end;
	uint32_t a12, a34; //, a56, a78;
	uint32_t b12, b34; //, b56, b78;

	blocka = receiveWritable(0);
    b400:	2100      	movs	r1, #0
{
    b402:	4680      	mov	r8, r0
	blocka = receiveWritable(0);
    b404:	f00f f8a4 	bl	1a550 <AudioStream::receiveWritable(unsigned int)>
    b408:	4604      	mov	r4, r0
	blockb = receiveReadOnly(1);
    b40a:	2101      	movs	r1, #1
    b40c:	4640      	mov	r0, r8
    b40e:	f00f f893 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
    b412:	4605      	mov	r5, r0
	if (!blocka) {
    b414:	b38c      	cbz	r4, b47a <AudioEffectMultiply::update()+0x7e>
		if (blockb) release(blockb);
		return;
	}
	if (!blockb) {
    b416:	b3a0      	cbz	r0, b482 <AudioEffectMultiply::update()+0x86>
		return;
	}
	pa = (uint32_t *)(blocka->data);
	pb = (uint32_t *)(blockb->data);
	end = pa + AUDIO_BLOCK_SAMPLES/2;
	while (pa < end) {
    b418:	300c      	adds	r0, #12
    b41a:	f104 010c 	add.w	r1, r4, #12
    b41e:	f505 7c86 	add.w	ip, r5, #268	; 0x10c
		a12 = *pa;
		a34 = *(pa+1);
    b422:	e951 2302 	ldrd	r2, r3, [r1, #-8]
		//a56 = *(pa+2); // 8 samples/loop should work, but crashes.
		//a78 = *(pa+3); // why?!  maybe a compiler bug??
		b12 = *pb++;
		b34 = *pb++;
    b426:	e950 6702 	ldrd	r6, r7, [r0, #-8]
// computes ((a[31:16] * b[31:16])
static inline int32_t multiply_16tx16t(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16tx16t(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smultt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b42a:	fb12 fe36 	smultt	lr, r2, r6
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    b42e:	f32e 3ecf 	ssat	lr, #16, lr, asr #15
	asm volatile("smulbb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b432:	fb12 f206 	smulbb	r2, r2, r6
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    b436:	f322 32cf 	ssat	r2, #16, r2, asr #15
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    b43a:	eac2 420e 	pkhbt	r2, r2, lr, lsl #16
	asm volatile("smultt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b43e:	fb13 fe37 	smultt	lr, r3, r7
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    b442:	f32e 3ecf 	ssat	lr, #16, lr, asr #15
	asm volatile("smulbb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b446:	fb13 f307 	smulbb	r3, r3, r7
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    b44a:	f323 33cf 	ssat	r3, #16, r3, asr #15
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    b44e:	eac3 430e 	pkhbt	r3, r3, lr, lsl #16
	while (pa < end) {
    b452:	3008      	adds	r0, #8
    b454:	4560      	cmp	r0, ip
		//	signed_saturate_rshift(multiply_16bx16b(a56, b56), 16, 15));
		//a78 = pack_16b_16b(
		//	signed_saturate_rshift(multiply_16tx16t(a78, b78), 16, 15), 
		//	signed_saturate_rshift(multiply_16bx16b(a78, b78), 16, 15));
		*pa++ = a12;
		*pa++ = a34;
    b456:	e941 2302 	strd	r2, r3, [r1, #-8]
	while (pa < end) {
    b45a:	f101 0108 	add.w	r1, r1, #8
    b45e:	d1e0      	bne.n	b422 <AudioEffectMultiply::update()+0x26>
		//*pa++ = a56;
		//*pa++ = a78;
	}
	transmit(blocka);
    b460:	2200      	movs	r2, #0
    b462:	4621      	mov	r1, r4
    b464:	4640      	mov	r0, r8
    b466:	f00f f843 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(blocka);
    b46a:	4620      	mov	r0, r4
    b46c:	f00f f818 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
	release(blockb);
    b470:	4628      	mov	r0, r5
	block = receiveReadOnly(0);
	if (block) release(block);
	block = receiveReadOnly(1);
	if (block) release(block);
#endif
}
    b472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	release(blockb);
    b476:	f00f b813 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
		if (blockb) release(blockb);
    b47a:	2800      	cmp	r0, #0
    b47c:	d1f9      	bne.n	b472 <AudioEffectMultiply::update()+0x76>
}
    b47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		release(blocka);
    b482:	4620      	mov	r0, r4
}
    b484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		release(blocka);
    b488:	f00f b80a 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>

0000b48c <AudioFilterFIR::update()>:
#include <Arduino.h>
#include "filter_fir.h"


void AudioFilterFIR::update(void)
{
    b48c:	b570      	push	{r4, r5, r6, lr}
	audio_block_t *block, *b_new;

	block = receiveReadOnly();
    b48e:	2100      	movs	r1, #0
{
    b490:	4605      	mov	r5, r0
	block = receiveReadOnly();
    b492:	f00f f851 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
    b496:	b1e0      	cbz	r0, b4d2 <AudioFilterFIR::update()+0x46>

	// If there's no coefficient table, give up.  
	if (coeff_p == NULL) {
    b498:	69eb      	ldr	r3, [r5, #28]
    b49a:	b1b3      	cbz	r3, b4ca <AudioFilterFIR::update()+0x3e>
		release(block);
		return;
	}

	// do passthru
	if (coeff_p == FIR_PASSTHRU) {
    b49c:	2b01      	cmp	r3, #1
    b49e:	4604      	mov	r4, r0
    b4a0:	d018      	beq.n	b4d4 <AudioFilterFIR::update()+0x48>
		release(block);
		return;
	}

	// get a block for the FIR output
	b_new = allocate();
    b4a2:	f00e ffa7 	bl	1a3f4 <AudioStream::allocate()>
	if (b_new) {
    b4a6:	4606      	mov	r6, r0
    b4a8:	b170      	cbz	r0, b4c8 <AudioFilterFIR::update()+0x3c>
		arm_fir_fast_q15(&fir_inst, (q15_t *)block->data,
    b4aa:	1d02      	adds	r2, r0, #4
    b4ac:	2380      	movs	r3, #128	; 0x80
    b4ae:	1d21      	adds	r1, r4, #4
    b4b0:	f105 0020 	add.w	r0, r5, #32
    b4b4:	f012 fc64 	bl	1dd80 <arm_fir_fast_q15>
			(q15_t *)b_new->data, AUDIO_BLOCK_SAMPLES);
		transmit(b_new); // send the FIR output
    b4b8:	4628      	mov	r0, r5
    b4ba:	2200      	movs	r2, #0
    b4bc:	4631      	mov	r1, r6
    b4be:	f00f f817 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(b_new);
    b4c2:	4630      	mov	r0, r6
    b4c4:	f00e ffec 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
	}
	release(block);
    b4c8:	4620      	mov	r0, r4
}
    b4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	release(block);
    b4ce:	f00e bfe7 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
}
    b4d2:	bd70      	pop	{r4, r5, r6, pc}
		transmit(block);
    b4d4:	4601      	mov	r1, r0
    b4d6:	2200      	movs	r2, #0
    b4d8:	4628      	mov	r0, r5
    b4da:	f00f f809 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(block);
    b4de:	4620      	mov	r0, r4
}
    b4e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		release(block);
    b4e4:	f00e bfdc 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>

0000b4e8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    b4e8:	4a02      	ldr	r2, [pc, #8]	; (b4f4 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    b4ea:	4903      	ldr	r1, [pc, #12]	; (b4f8 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    b4ec:	4803      	ldr	r0, [pc, #12]	; (b4fc <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    b4ee:	f014 bb4b 	b.w	1fb88 <__aeabi_atexit>
    b4f2:	bf00      	nop
    b4f4:	20009460 	.word	0x20009460
    b4f8:	0000ad15 	.word	0x0000ad15
    b4fc:	2000aed0 	.word	0x2000aed0

0000b500 <AudioInputI2S::isr()>:
	const int16_t *src, *end;
	int16_t *dest_left, *dest_right;
	audio_block_t *left, *right;

#if defined(KINETISK) || defined(__IMXRT1062__)
	daddr = (uint32_t)(dma.TCD->DADDR);
    b500:	4a29      	ldr	r2, [pc, #164]	; (b5a8 <AudioInputI2S::isr()+0xa8>)
	dma.clearInterrupt();
	//Serial.println("isr");

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
    b502:	4b2a      	ldr	r3, [pc, #168]	; (b5ac <AudioInputI2S::isr()+0xac>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    b504:	492a      	ldr	r1, [pc, #168]	; (b5b0 <AudioInputI2S::isr()+0xb0>)
{
    b506:	b510      	push	{r4, lr}
	daddr = (uint32_t)(dma.TCD->DADDR);
    b508:	6814      	ldr	r4, [r2, #0]
    b50a:	7910      	ldrb	r0, [r2, #4]
    b50c:	6922      	ldr	r2, [r4, #16]
    b50e:	77c8      	strb	r0, [r1, #31]
	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
    b510:	429a      	cmp	r2, r3
    b512:	d20b      	bcs.n	b52c <AudioInputI2S::isr()+0x2c>
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (AudioInputI2S::update_responsibility) AudioStream::update_all();
    b514:	4a27      	ldr	r2, [pc, #156]	; (b5b4 <AudioInputI2S::isr()+0xb4>)
    b516:	7812      	ldrb	r2, [r2, #0]
    b518:	2a00      	cmp	r2, #0
    b51a:	d041      	beq.n	b5a0 <AudioInputI2S::isr()+0xa0>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    b51c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b520:	2140      	movs	r1, #64	; 0x40
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
    b522:	f503 7e80 	add.w	lr, r3, #256	; 0x100
    b526:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    b52a:	e002      	b.n	b532 <AudioInputI2S::isr()+0x32>
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
    b52c:	469e      	mov	lr, r3
		src = (int16_t *)&i2s_rx_buffer[0];
    b52e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
	}
	left = AudioInputI2S::block_left;
    b532:	4921      	ldr	r1, [pc, #132]	; (b5b8 <AudioInputI2S::isr()+0xb8>)
	right = AudioInputI2S::block_right;
    b534:	4a21      	ldr	r2, [pc, #132]	; (b5bc <AudioInputI2S::isr()+0xbc>)
	left = AudioInputI2S::block_left;
    b536:	6809      	ldr	r1, [r1, #0]
	right = AudioInputI2S::block_right;
    b538:	6810      	ldr	r0, [r2, #0]
	if (left != NULL && right != NULL) {
    b53a:	b381      	cbz	r1, b59e <AudioInputI2S::isr()+0x9e>
    b53c:	b378      	cbz	r0, b59e <AudioInputI2S::isr()+0x9e>
		offset = AudioInputI2S::block_offset;
    b53e:	4c20      	ldr	r4, [pc, #128]	; (b5c0 <AudioInputI2S::isr()+0xc0>)
    b540:	8822      	ldrh	r2, [r4, #0]
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
    b542:	2a40      	cmp	r2, #64	; 0x40
    b544:	d82b      	bhi.n	b59e <AudioInputI2S::isr()+0x9e>
			dest_left = &(left->data[offset]);
    b546:	f102 0c02 	add.w	ip, r2, #2
			dest_right = &(right->data[offset]);
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    b54a:	3240      	adds	r2, #64	; 0x40
			dest_left = &(left->data[offset]);
    b54c:	eb01 014c 	add.w	r1, r1, ip, lsl #1
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    b550:	8022      	strh	r2, [r4, #0]
			dest_right = &(right->data[offset]);
    b552:	eb00 004c 	add.w	r0, r0, ip, lsl #1
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b556:	461a      	mov	r2, r3
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    b558:	f3bf 8f4f 	dsb	sy
    b55c:	f103 0420 	add.w	r4, r3, #32
	uint32_t end_addr = (uint32_t)addr + size;
    b560:	f503 7c80 	add.w	ip, r3, #256	; 0x100
    b564:	45a4      	cmp	ip, r4
    b566:	bf34      	ite	cc
    b568:	f04f 0c01 	movcc.w	ip, #1
    b56c:	f04f 0c08 	movcs.w	ip, #8
	do {
		SCB_CACHE_DCIMVAC = location;
    b570:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    b574:	eb03 1c4c 	add.w	ip, r3, ip, lsl #5
    b578:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    b57c:	3220      	adds	r2, #32
	} while (location < end_addr);
    b57e:	4562      	cmp	r2, ip
    b580:	d1fa      	bne.n	b578 <AudioInputI2S::isr()+0x78>
	asm("dsb");
    b582:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b586:	f3bf 8f6f 	isb	sy
			arm_dcache_delete((void*)src, sizeof(i2s_rx_buffer) / 2);
			do {
				*dest_left++ = *src++;
    b58a:	f933 2b04 	ldrsh.w	r2, [r3], #4
    b58e:	f821 2b02 	strh.w	r2, [r1], #2
				*dest_right++ = *src++;
			} while (src < end);
    b592:	459e      	cmp	lr, r3
				*dest_right++ = *src++;
    b594:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
    b598:	f820 2b02 	strh.w	r2, [r0], #2
			} while (src < end);
    b59c:	d8f5      	bhi.n	b58a <AudioInputI2S::isr()+0x8a>
		}
	}
#endif
}
    b59e:	bd10      	pop	{r4, pc}
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
    b5a0:	f503 7e80 	add.w	lr, r3, #256	; 0x100
    b5a4:	e7c5      	b.n	b532 <AudioInputI2S::isr()+0x32>
    b5a6:	bf00      	nop
    b5a8:	2000ae48 	.word	0x2000ae48
    b5ac:	202033e0 	.word	0x202033e0
    b5b0:	400e8000 	.word	0x400e8000
    b5b4:	200136dc 	.word	0x200136dc
    b5b8:	2000ae40 	.word	0x2000ae40
    b5bc:	2000ae44 	.word	0x2000ae44
    b5c0:	200136c6 	.word	0x200136c6

0000b5c4 <AudioInputI2S::update()>:



void AudioInputI2S::update(void)
{
    b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5c6:	4606      	mov	r6, r0
	audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

	// allocate 2 new blocks, but if one fails, allocate neither
	new_left = allocate();
    b5c8:	f00e ff14 	bl	1a3f4 <AudioStream::allocate()>
	if (new_left != NULL) {
    b5cc:	b1c0      	cbz	r0, b600 <AudioInputI2S::update()+0x3c>
		new_right = allocate();
    b5ce:	4604      	mov	r4, r0
    b5d0:	f00e ff10 	bl	1a3f4 <AudioStream::allocate()>
		if (new_right == NULL) {
    b5d4:	4605      	mov	r5, r0
    b5d6:	b180      	cbz	r0, b5fa <AudioInputI2S::update()+0x36>
			release(new_left);
			new_left = NULL;
		}
	}
	__disable_irq();
    b5d8:	b672      	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    b5da:	4b1e      	ldr	r3, [pc, #120]	; (b654 <AudioInputI2S::update()+0x90>)
    b5dc:	881a      	ldrh	r2, [r3, #0]
    b5de:	2a7f      	cmp	r2, #127	; 0x7f
    b5e0:	d817      	bhi.n	b612 <AudioInputI2S::update()+0x4e>
		transmit(out_right, 1);
		release(out_right);
		//Serial.print(".");
	} else if (new_left != NULL) {
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
    b5e2:	491d      	ldr	r1, [pc, #116]	; (b658 <AudioInputI2S::update()+0x94>)
    b5e4:	680a      	ldr	r2, [r1, #0]
    b5e6:	b372      	cbz	r2, b646 <AudioInputI2S::update()+0x82>
			block_right = new_right;
			block_offset = 0;
			__enable_irq();
		} else {
			// the DMA already has blocks, doesn't need these
			__enable_irq();
    b5e8:	b662      	cpsie	i
			release(new_left);
    b5ea:	4620      	mov	r0, r4
    b5ec:	f00e ff58 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
			release(new_right);
    b5f0:	4628      	mov	r0, r5
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    b5f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			release(new_right);
    b5f6:	f00e bf53 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
			release(new_left);
    b5fa:	4620      	mov	r0, r4
    b5fc:	f00e ff50 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
	__disable_irq();
    b600:	b672      	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    b602:	4b14      	ldr	r3, [pc, #80]	; (b654 <AudioInputI2S::update()+0x90>)
    b604:	881a      	ldrh	r2, [r3, #0]
    b606:	2a7f      	cmp	r2, #127	; 0x7f
    b608:	d801      	bhi.n	b60e <AudioInputI2S::update()+0x4a>
		__enable_irq();
    b60a:	b662      	cpsie	i
}
    b60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
    b60e:	2500      	movs	r5, #0
	new_left = allocate();
    b610:	462c      	mov	r4, r5
		out_left = block_left;
    b612:	4811      	ldr	r0, [pc, #68]	; (b658 <AudioInputI2S::update()+0x94>)
		block_offset = 0;
    b614:	2200      	movs	r2, #0
		out_right = block_right;
    b616:	4911      	ldr	r1, [pc, #68]	; (b65c <AudioInputI2S::update()+0x98>)
		out_left = block_left;
    b618:	6807      	ldr	r7, [r0, #0]
		block_offset = 0;
    b61a:	801a      	strh	r2, [r3, #0]
		block_left = new_left;
    b61c:	6004      	str	r4, [r0, #0]
		out_right = block_right;
    b61e:	680c      	ldr	r4, [r1, #0]
		block_right = new_right;
    b620:	600d      	str	r5, [r1, #0]
		__enable_irq();
    b622:	b662      	cpsie	i
		transmit(out_left, 0);
    b624:	4639      	mov	r1, r7
    b626:	4630      	mov	r0, r6
    b628:	f00e ff62 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out_left);
    b62c:	4638      	mov	r0, r7
    b62e:	f00e ff37 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		transmit(out_right, 1);
    b632:	4630      	mov	r0, r6
    b634:	4621      	mov	r1, r4
    b636:	2201      	movs	r2, #1
    b638:	f00e ff5a 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out_right);
    b63c:	4620      	mov	r0, r4
}
    b63e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		release(out_right);
    b642:	f00e bf2d 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
			block_left = new_left;
    b646:	600c      	str	r4, [r1, #0]
			block_right = new_right;
    b648:	4904      	ldr	r1, [pc, #16]	; (b65c <AudioInputI2S::update()+0x98>)
			block_offset = 0;
    b64a:	801a      	strh	r2, [r3, #0]
			block_right = new_right;
    b64c:	6008      	str	r0, [r1, #0]
			__enable_irq();
    b64e:	b662      	cpsie	i
}
    b650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b652:	bf00      	nop
    b654:	200136c6 	.word	0x200136c6
    b658:	2000ae40 	.word	0x2000ae40
    b65c:	2000ae44 	.word	0x2000ae44

0000b660 <AudioInputI2S::begin()>:
{
    b660:	b538      	push	{r3, r4, r5, lr}
	dma.begin(true); // Allocate the DMA channel first
    b662:	4c23      	ldr	r4, [pc, #140]	; (b6f0 <AudioInputI2S::begin()+0x90>)
    b664:	2101      	movs	r1, #1
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    b666:	2506      	movs	r5, #6
	dma.begin(true); // Allocate the DMA channel first
    b668:	4620      	mov	r0, r4
    b66a:	f00f f89f 	bl	1a7ac <DMAChannel::begin(bool)>
	AudioOutputI2S::config_i2s();
    b66e:	2000      	movs	r0, #0
    b670:	f000 faf6 	bl	bc60 <AudioOutputI2S::config_i2s(bool)>
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    b674:	2202      	movs	r2, #2
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
    b676:	491f      	ldr	r1, [pc, #124]	; (b6f4 <AudioInputI2S::begin()+0x94>)
    b678:	2003      	movs	r0, #3
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    b67a:	4b1f      	ldr	r3, [pc, #124]	; (b6f8 <AudioInputI2S::begin()+0x98>)
	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
    b67c:	f8c1 017c 	str.w	r0, [r1, #380]	; 0x17c
	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
    b680:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	dma.TCD->SOFF = 0;
    b684:	491d      	ldr	r1, [pc, #116]	; (b6fc <AudioInputI2S::begin()+0x9c>)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
    b686:	6823      	ldr	r3, [r4, #0]
    b688:	481d      	ldr	r0, [pc, #116]	; (b700 <AudioInputI2S::begin()+0xa0>)
	dma.TCD->SOFF = 0;
    b68a:	6059      	str	r1, [r3, #4]
	dma.TCD->NBYTES_MLNO = 2;
    b68c:	609a      	str	r2, [r3, #8]
	dma.TCD->DOFF = 2;
    b68e:	829a      	strh	r2, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    b690:	f44f 7280 	mov.w	r2, #256	; 0x100
	dma.TCD->DADDR = i2s_rx_buffer;
    b694:	491b      	ldr	r1, [pc, #108]	; (b704 <AudioInputI2S::begin()+0xa4>)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0 + 2);
    b696:	6018      	str	r0, [r3, #0]
	dma.TCD->SLAST = 0;
    b698:	2000      	movs	r0, #0
	dma.TCD->DADDR = i2s_rx_buffer;
    b69a:	6119      	str	r1, [r3, #16]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    b69c:	82da      	strh	r2, [r3, #22]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    b69e:	7921      	ldrb	r1, [r4, #4]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    b6a0:	83da      	strh	r2, [r3, #30]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    b6a2:	839d      	strh	r5, [r3, #28]
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    b6a4:	f2a5 2506 	subw	r5, r5, #518	; 0x206
    b6a8:	4a17      	ldr	r2, [pc, #92]	; (b708 <AudioInputI2S::begin()+0xa8>)
	dma.TCD->SLAST = 0;
    b6aa:	60d8      	str	r0, [r3, #12]
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    b6ac:	619d      	str	r5, [r3, #24]
		*mux = 0;
    b6ae:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    b6b2:	4816      	ldr	r0, [pc, #88]	; (b70c <AudioInputI2S::begin()+0xac>)
	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    b6b4:	4b16      	ldr	r3, [pc, #88]	; (b710 <AudioInputI2S::begin()+0xb0>)
    b6b6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    b6ba:	4a16      	ldr	r2, [pc, #88]	; (b714 <AudioInputI2S::begin()+0xb4>)
    b6bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	update_responsibility = update_setup();
    b6c0:	f00f f852 	bl	1a768 <AudioStream::update_setup()>
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    b6c4:	7923      	ldrb	r3, [r4, #4]
    b6c6:	4c14      	ldr	r4, [pc, #80]	; (b718 <AudioInputI2S::begin()+0xb8>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    b6c8:	2101      	movs	r1, #1
    b6ca:	4a14      	ldr	r2, [pc, #80]	; (b71c <AudioInputI2S::begin()+0xbc>)
    b6cc:	7020      	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    b6ce:	f103 0010 	add.w	r0, r3, #16
		DMA_SERQ = channel;
    b6d2:	4c13      	ldr	r4, [pc, #76]	; (b720 <AudioInputI2S::begin()+0xc0>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    b6d4:	eb02 1253 	add.w	r2, r2, r3, lsr #5
		DMA_SERQ = channel;
    b6d8:	76e3      	strb	r3, [r4, #27]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    b6da:	f003 031f 	and.w	r3, r3, #31
    b6de:	0092      	lsls	r2, r2, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    b6e0:	4c10      	ldr	r4, [pc, #64]	; (b724 <AudioInputI2S::begin()+0xc4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    b6e2:	4099      	lsls	r1, r3
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    b6e4:	4b10      	ldr	r3, [pc, #64]	; (b728 <AudioInputI2S::begin()+0xc8>)
    b6e6:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    b6ea:	6011      	str	r1, [r2, #0]
}
    b6ec:	bd38      	pop	{r3, r4, r5, pc}
    b6ee:	bf00      	nop
    b6f0:	2000ae48 	.word	0x2000ae48
    b6f4:	401f8000 	.word	0x401f8000
    b6f8:	401f8400 	.word	0x401f8400
    b6fc:	01010000 	.word	0x01010000
    b700:	403840a2 	.word	0x403840a2
    b704:	202032e0 	.word	0x202032e0
    b708:	400ec000 	.word	0x400ec000
    b70c:	80000013 	.word	0x80000013
    b710:	40384000 	.word	0x40384000
    b714:	92000001 	.word	0x92000001
    b718:	200136dc 	.word	0x200136dc
    b71c:	38003840 	.word	0x38003840
    b720:	400e8000 	.word	0x400e8000
    b724:	0000b501 	.word	0x0000b501
    b728:	2000a000 	.word	0x2000a000

0000b72c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAChannel AudioInputI2S::dma(false);
    b72c:	4a02      	ldr	r2, [pc, #8]	; (b738 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    b72e:	4903      	ldr	r1, [pc, #12]	; (b73c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    b730:	4803      	ldr	r0, [pc, #12]	; (b740 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    b732:	f014 ba29 	b.w	1fb88 <__aeabi_atexit>
    b736:	bf00      	nop
    b738:	20009460 	.word	0x20009460
    b73c:	0000ad15 	.word	0x0000ad15
    b740:	2000ae48 	.word	0x2000ae48

0000b744 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    b744:	4a02      	ldr	r2, [pc, #8]	; (b750 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    b746:	4903      	ldr	r1, [pc, #12]	; (b754 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    b748:	4803      	ldr	r0, [pc, #12]	; (b758 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    b74a:	f014 ba1d 	b.w	1fb88 <__aeabi_atexit>
    b74e:	bf00      	nop
    b750:	20009460 	.word	0x20009460
    b754:	0000ad15 	.word	0x0000ad15
    b758:	2000ae60 	.word	0x2000ae60

0000b75c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
audio_block_t * AudioInputI2SHex::block_ch4 = NULL;
audio_block_t * AudioInputI2SHex::block_ch5 = NULL;
audio_block_t * AudioInputI2SHex::block_ch6 = NULL;
uint16_t AudioInputI2SHex::block_offset = 0;
bool AudioInputI2SHex::update_responsibility = false;
DMAChannel AudioInputI2SHex::dma(false);
    b75c:	4a02      	ldr	r2, [pc, #8]	; (b768 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    b75e:	4903      	ldr	r1, [pc, #12]	; (b76c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    b760:	4803      	ldr	r0, [pc, #12]	; (b770 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    b762:	f014 ba11 	b.w	1fb88 <__aeabi_atexit>
    b766:	bf00      	nop
    b768:	20009460 	.word	0x20009460
    b76c:	0000ad15 	.word	0x0000ad15
    b770:	2000aed8 	.word	0x2000aed8

0000b774 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    b774:	4a02      	ldr	r2, [pc, #8]	; (b780 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    b776:	4903      	ldr	r1, [pc, #12]	; (b784 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    b778:	4803      	ldr	r0, [pc, #12]	; (b788 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    b77a:	f014 ba05 	b.w	1fb88 <__aeabi_atexit>
    b77e:	bf00      	nop
    b780:	20009460 	.word	0x20009460
    b784:	0000ad15 	.word	0x0000ad15
    b788:	2000aee0 	.word	0x2000aee0

0000b78c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
DMAChannel AudioInputI2SQuad::dma(false);
    b78c:	4a02      	ldr	r2, [pc, #8]	; (b798 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    b78e:	4903      	ldr	r1, [pc, #12]	; (b79c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    b790:	4803      	ldr	r0, [pc, #12]	; (b7a0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    b792:	f014 b9f9 	b.w	1fb88 <__aeabi_atexit>
    b796:	bf00      	nop
    b798:	20009460 	.word	0x20009460
    b79c:	0000ad15 	.word	0x0000ad15
    b7a0:	2000aef8 	.word	0x2000aef8

0000b7a4 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
DMAChannel AudioInputPDM::dma(false);
    b7a4:	4a02      	ldr	r2, [pc, #8]	; (b7b0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    b7a6:	4903      	ldr	r1, [pc, #12]	; (b7b4 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    b7a8:	4803      	ldr	r0, [pc, #12]	; (b7b8 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    b7aa:	f014 b9ed 	b.w	1fb88 <__aeabi_atexit>
    b7ae:	bf00      	nop
    b7b0:	20009460 	.word	0x20009460
    b7b4:	0000ad15 	.word	0x0000ad15
    b7b8:	2000ae50 	.word	0x2000ae50

0000b7bc <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    b7bc:	4a02      	ldr	r2, [pc, #8]	; (b7c8 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    b7be:	4903      	ldr	r1, [pc, #12]	; (b7cc <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    b7c0:	4803      	ldr	r0, [pc, #12]	; (b7d0 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    b7c2:	f014 b9e1 	b.w	1fb88 <__aeabi_atexit>
    b7c6:	bf00      	nop
    b7c8:	20009460 	.word	0x20009460
    b7cc:	0000ad15 	.word	0x0000ad15
    b7d0:	2000ae68 	.word	0x2000ae68

0000b7d4 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    b7d4:	4a02      	ldr	r2, [pc, #8]	; (b7e0 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    b7d6:	4903      	ldr	r1, [pc, #12]	; (b7e4 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    b7d8:	4803      	ldr	r0, [pc, #12]	; (b7e8 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    b7da:	f014 b9d5 	b.w	1fb88 <__aeabi_atexit>
    b7de:	bf00      	nop
    b7e0:	20009460 	.word	0x20009460
    b7e4:	0000ad15 	.word	0x0000ad15
    b7e8:	2000aee8 	.word	0x2000aee8

0000b7ec <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    b7ec:	4a02      	ldr	r2, [pc, #8]	; (b7f8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    b7ee:	4903      	ldr	r1, [pc, #12]	; (b7fc <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    b7f0:	4803      	ldr	r0, [pc, #12]	; (b800 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    b7f2:	f014 b9c9 	b.w	1fb88 <__aeabi_atexit>
    b7f6:	bf00      	nop
    b7f8:	20009460 	.word	0x20009460
    b7fc:	0000ad15 	.word	0x0000ad15
    b800:	2000ae58 	.word	0x2000ae58

0000b804 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
    b804:	4a02      	ldr	r2, [pc, #8]	; (b810 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    b806:	4903      	ldr	r1, [pc, #12]	; (b814 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    b808:	4803      	ldr	r0, [pc, #12]	; (b818 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    b80a:	f014 b9bd 	b.w	1fb88 <__aeabi_atexit>
    b80e:	bf00      	nop
    b810:	20009460 	.word	0x20009460
    b814:	0000ad15 	.word	0x0000ad15
    b818:	2000ae70 	.word	0x2000ae70

0000b81c <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    b81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    b820:	f500 7e80 	add.w	lr, r0, #256	; 0x100

0000b824 <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    b824:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    b828:	e8b2 1540 	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    b82c:	eac5 4306 	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    b830:	eac6 4425 	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    b834:	eac7 4508 	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    b838:	eac8 4627 	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    b83c:	eac9 470a 	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    b840:	eaca 4829 	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    b844:	eacb 490c 	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    b848:	eacc 4a2b 	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    b84c:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    b850:	4586      	cmp	lr, r0
	bne .loopLR
    b852:	d1e7      	bne.n	b824 <.loopLR>

	pop	{r4-r11,r14}	
    b854:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8}
#endif
	BX lr
    b858:	4770      	bx	lr

0000b85a <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    b85a:	f04f 0200 	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    b85e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    b862:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    b866:	bf00      	nop

0000b868 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    b868:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    b86c:	eac5 0302 	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    b870:	eac2 4425 	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    b874:	eac7 0502 	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    b878:	eac2 4627 	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    b87c:	eac9 0702 	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    b880:	eac2 4829 	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    b884:	eacb 0902 	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    b888:	eac2 4a2b 	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    b88c:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    b890:	4584      	cmp	ip, r0
	bne .loopL
    b892:	d1e9      	bne.n	b868 <.loopL>

	pop	{r4-r11}
    b894:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    b898:	4770      	bx	lr

0000b89a <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    b89a:	f04f 0200 	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    b89e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    b8a2:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    b8a6:	bf00      	nop

0000b8a8 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    b8a8:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    b8ac:	eac2 4305 	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    b8b0:	eac2 0405 	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    b8b4:	eac2 4507 	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    b8b8:	eac2 0607 	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    b8bc:	eac2 4709 	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    b8c0:	eac2 0809 	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    b8c4:	eac2 490b 	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    b8c8:	eac2 0a0b 	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    b8cc:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    b8d0:	4584      	cmp	ip, r0
	bne .loopR
    b8d2:	d1e9      	bne.n	b8a8 <.loopR>

	pop	{r4-r11}
    b8d4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    b8d8:	4770      	bx	lr

0000b8da <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    b8da:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    b8de:	9c08      	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    b8e0:	f500 7b00 	add.w	fp, r0, #512	; 0x200

0000b8e4 <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    b8e4:	f851 5b04 	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    b8e8:	f853 6b04 	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    b8ec:	eac5 4706 	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    b8f0:	eac6 4925 	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    b8f4:	f852 5b04 	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    b8f8:	f854 6b04 	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    b8fc:	eac5 4806 	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    b900:	eac6 4a25 	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    b904:	e8a0 0780 	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    b908:	4583      	cmp	fp, r0
	bne .loopQuad
    b90a:	d1eb      	bne.n	b8e4 <.loopQuad>

	pop	{r4-r11}
    b90c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    b910:	4770      	bx	lr
    b912:	bf00      	nop

0000b914 <AudioAmplifier::update()>:
		release(out);
	}
}

void AudioAmplifier::update(void)
{
    b914:	b570      	push	{r4, r5, r6, lr}
	audio_block_t *block;
	int32_t mult = multiplier;
    b916:	6984      	ldr	r4, [r0, #24]

	if (mult == 0) {
    b918:	b3ac      	cbz	r4, b986 <AudioAmplifier::update()+0x72>
		// zero gain, discard any input and transmit nothing
		block = receiveReadOnly(0);
		if (block) release(block);
	} else if (mult == MULTI_UNITYGAIN) {
    b91a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    b91e:	4605      	mov	r5, r0
		// unity gain, pass input to output without any change
		block = receiveReadOnly(0);
    b920:	f04f 0100 	mov.w	r1, #0
	} else if (mult == MULTI_UNITYGAIN) {
    b924:	d021      	beq.n	b96a <AudioAmplifier::update()+0x56>
			transmit(block);
			release(block);
		}
	} else {
		// apply gain to signal
		block = receiveWritable(0);
    b926:	f00e fe13 	bl	1a550 <AudioStream::receiveWritable(unsigned int)>
		if (block) {
    b92a:	4606      	mov	r6, r0
    b92c:	b380      	cbz	r0, b990 <AudioAmplifier::update()+0x7c>
			applyGain(block->data, mult);
    b92e:	f100 0c04 	add.w	ip, r0, #4
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    b932:	f500 7182 	add.w	r1, r0, #260	; 0x104
		uint32_t tmp32 = *p; // read 2 samples from *data
    b936:	f8dc 3000 	ldr.w	r3, [ip]
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b93a:	fb34 f203 	smulwb	r2, r4, r3
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b93e:	fb34 f313 	smulwt	r3, r4, r3
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    b942:	f302 020f 	ssat	r2, #16, r2
    b946:	f303 030f 	ssat	r3, #16, r3
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    b94a:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
		*p++ = pack_16b_16b(val2, val1);
    b94e:	f84c 3b04 	str.w	r3, [ip], #4
	} while (p < end);
    b952:	458c      	cmp	ip, r1
    b954:	d1ef      	bne.n	b936 <AudioAmplifier::update()+0x22>
			transmit(block);
    b956:	4628      	mov	r0, r5
    b958:	2200      	movs	r2, #0
    b95a:	4631      	mov	r1, r6
    b95c:	f00e fdc8 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
			release(block);
    b960:	4630      	mov	r0, r6
		}
	}
}
    b962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			release(block);
    b966:	f00e bd9b 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
		block = receiveReadOnly(0);
    b96a:	f00e fde5 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
		if (block) {
    b96e:	4604      	mov	r4, r0
    b970:	b170      	cbz	r0, b990 <AudioAmplifier::update()+0x7c>
			transmit(block);
    b972:	4601      	mov	r1, r0
    b974:	2200      	movs	r2, #0
    b976:	4628      	mov	r0, r5
    b978:	f00e fdba 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
			release(block);
    b97c:	4620      	mov	r0, r4
}
    b97e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			release(block);
    b982:	f00e bd8d 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
		block = receiveReadOnly(0);
    b986:	4621      	mov	r1, r4
    b988:	f00e fdd6 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
		if (block) release(block);
    b98c:	2800      	cmp	r0, #0
    b98e:	d1e8      	bne.n	b962 <AudioAmplifier::update()+0x4e>
}
    b990:	bd70      	pop	{r4, r5, r6, pc}
    b992:	bf00      	nop

0000b994 <AudioMixer4::update()>:
{
    b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (channel=0; channel < 4; channel++) {
    b996:	2700      	movs	r7, #0
{
    b998:	4605      	mov	r5, r0
	audio_block_t *in, *out=NULL;
    b99a:	463c      	mov	r4, r7
		if (!out) {
    b99c:	b3b4      	cbz	r4, ba0c <AudioMixer4::update()+0x78>
			in = receiveReadOnly(channel);
    b99e:	4639      	mov	r1, r7
    b9a0:	4628      	mov	r0, r5
    b9a2:	f00e fdc9 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
    b9a6:	b308      	cbz	r0, b9ec <AudioMixer4::update()+0x58>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    b9a8:	1dbb      	adds	r3, r7, #6
    b9aa:	f104 0e04 	add.w	lr, r4, #4
    b9ae:	f100 0c04 	add.w	ip, r0, #4
    b9b2:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
	if (mult == MULTI_UNITYGAIN) {
    b9b6:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
    b9ba:	d047      	beq.n	ba4c <AudioMixer4::update()+0xb8>
    b9bc:	f500 7182 	add.w	r1, r0, #260	; 0x104
			uint32_t tmp32 = *src++; // read 2 samples from *data
    b9c0:	f85c 2b04 	ldr.w	r2, [ip], #4
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b9c4:	fb36 f302 	smulwb	r3, r6, r2
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b9c8:	fb36 f212 	smulwt	r2, r6, r2
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    b9cc:	f303 030f 	ssat	r3, #16, r3
    b9d0:	f302 020f 	ssat	r2, #16, r2
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    b9d4:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    b9d8:	f8de 2000 	ldr.w	r2, [lr]
    b9dc:	fa93 f312 	qadd16	r3, r3, r2
		} while (dst < end);
    b9e0:	458c      	cmp	ip, r1
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
    b9e2:	f84e 3b04 	str.w	r3, [lr], #4
		} while (dst < end);
    b9e6:	d1eb      	bne.n	b9c0 <AudioMixer4::update()+0x2c>
				release(in);
    b9e8:	f00e fd5a 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
	for (channel=0; channel < 4; channel++) {
    b9ec:	3701      	adds	r7, #1
    b9ee:	2f04      	cmp	r7, #4
    b9f0:	d1d4      	bne.n	b99c <AudioMixer4::update()+0x8>
		transmit(out);
    b9f2:	4628      	mov	r0, r5
    b9f4:	4621      	mov	r1, r4
    b9f6:	2200      	movs	r2, #0
    b9f8:	f00e fd7a 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
    b9fc:	4620      	mov	r0, r4
}
    b9fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		release(out);
    ba02:	f00e bd4d 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
	for (channel=0; channel < 4; channel++) {
    ba06:	3701      	adds	r7, #1
    ba08:	2f04      	cmp	r7, #4
    ba0a:	d03a      	beq.n	ba82 <AudioMixer4::update()+0xee>
			out = receiveWritable(channel);
    ba0c:	4639      	mov	r1, r7
    ba0e:	4628      	mov	r0, r5
    ba10:	f00e fd9e 	bl	1a550 <AudioStream::receiveWritable(unsigned int)>
			if (out) {
    ba14:	4604      	mov	r4, r0
    ba16:	2800      	cmp	r0, #0
    ba18:	d0f5      	beq.n	ba06 <AudioMixer4::update()+0x72>
				int32_t mult = multiplier[channel];
    ba1a:	1dbb      	adds	r3, r7, #6
    ba1c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
    ba20:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    ba24:	d0e2      	beq.n	b9ec <AudioMixer4::update()+0x58>
    ba26:	1d21      	adds	r1, r4, #4
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    ba28:	f504 7682 	add.w	r6, r4, #260	; 0x104
		uint32_t tmp32 = *p; // read 2 samples from *data
    ba2c:	680b      	ldr	r3, [r1, #0]
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    ba2e:	fb30 f203 	smulwb	r2, r0, r3
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    ba32:	fb30 f313 	smulwt	r3, r0, r3
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    ba36:	f302 020f 	ssat	r2, #16, r2
    ba3a:	f303 030f 	ssat	r3, #16, r3
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    ba3e:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
		*p++ = pack_16b_16b(val2, val1);
    ba42:	f841 3b04 	str.w	r3, [r1], #4
	} while (p < end);
    ba46:	42b1      	cmp	r1, r6
    ba48:	d1f0      	bne.n	ba2c <AudioMixer4::update()+0x98>
    ba4a:	e7cf      	b.n	b9ec <AudioMixer4::update()+0x58>
    ba4c:	f100 020c 	add.w	r2, r0, #12
    ba50:	f104 030c 	add.w	r3, r4, #12
    ba54:	f500 7c86 	add.w	ip, r0, #268	; 0x10c
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    ba58:	f853 1c08 	ldr.w	r1, [r3, #-8]
    ba5c:	f852 6c08 	ldr.w	r6, [r2, #-8]
    ba60:	fa91 f116 	qadd16	r1, r1, r6
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    ba64:	f843 1c08 	str.w	r1, [r3, #-8]
    ba68:	f853 1c04 	ldr.w	r1, [r3, #-4]
    ba6c:	f852 6c04 	ldr.w	r6, [r2, #-4]
    ba70:	fa91 f116 	qadd16	r1, r1, r6
		} while (dst < end);
    ba74:	3208      	adds	r2, #8
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    ba76:	f843 1c04 	str.w	r1, [r3, #-4]
		} while (dst < end);
    ba7a:	3308      	adds	r3, #8
    ba7c:	4594      	cmp	ip, r2
    ba7e:	d1eb      	bne.n	ba58 <AudioMixer4::update()+0xc4>
    ba80:	e7b2      	b.n	b9e8 <AudioMixer4::update()+0x54>
}
    ba82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ba84 <AudioOutputI2S::isr()>:
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    ba84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    ba88:	4b45      	ldr	r3, [pc, #276]	; (bba0 <AudioOutputI2S::isr()+0x11c>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    ba8a:	4c46      	ldr	r4, [pc, #280]	; (bba4 <AudioOutputI2S::isr()+0x120>)
	saddr = (uint32_t)(dma.TCD->SADDR);
    ba8c:	6818      	ldr	r0, [r3, #0]
		DMA_CINT = channel;
    ba8e:	7919      	ldrb	r1, [r3, #4]
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    ba90:	f504 7580 	add.w	r5, r4, #256	; 0x100
	saddr = (uint32_t)(dma.TCD->SADDR);
    ba94:	6803      	ldr	r3, [r0, #0]
    ba96:	4a44      	ldr	r2, [pc, #272]	; (bba8 <AudioOutputI2S::isr()+0x124>)
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    ba98:	42ab      	cmp	r3, r5
    ba9a:	77d1      	strb	r1, [r2, #31]
    ba9c:	d20b      	bcs.n	bab6 <AudioOutputI2S::isr()+0x32>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    ba9e:	4b43      	ldr	r3, [pc, #268]	; (bbac <AudioOutputI2S::isr()+0x128>)
    baa0:	781b      	ldrb	r3, [r3, #0]
    baa2:	2b00      	cmp	r3, #0
    baa4:	d04b      	beq.n	bb3e <AudioOutputI2S::isr()+0xba>
    baa6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    baaa:	2240      	movs	r2, #64	; 0x40
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    baac:	462c      	mov	r4, r5
	uint32_t end_addr = (uint32_t)addr + size;
    baae:	f505 7580 	add.w	r5, r5, #256	; 0x100
    bab2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    bab6:	4b3e      	ldr	r3, [pc, #248]	; (bbb0 <AudioOutputI2S::isr()+0x12c>)
	blockR = AudioOutputI2S::block_right_1st;
	offsetL = AudioOutputI2S::block_left_offset;
    bab8:	f8df a104 	ldr.w	sl, [pc, #260]	; bbc0 <AudioOutputI2S::isr()+0x13c>
	blockL = AudioOutputI2S::block_left_1st;
    babc:	f8d3 8000 	ldr.w	r8, [r3]
	offsetR = AudioOutputI2S::block_right_offset;
    bac0:	f8df 9100 	ldr.w	r9, [pc, #256]	; bbc4 <AudioOutputI2S::isr()+0x140>
	blockR = AudioOutputI2S::block_right_1st;
    bac4:	4b3b      	ldr	r3, [pc, #236]	; (bbb4 <AudioOutputI2S::isr()+0x130>)
	offsetL = AudioOutputI2S::block_left_offset;
    bac6:	f8ba 6000 	ldrh.w	r6, [sl]
	blockR = AudioOutputI2S::block_right_1st;
    baca:	f8d3 b000 	ldr.w	fp, [r3]
	offsetR = AudioOutputI2S::block_right_offset;
    bace:	f8b9 7000 	ldrh.w	r7, [r9]

	if (blockL && blockR) {
    bad2:	f1b8 0f00 	cmp.w	r8, #0
    bad6:	d04f      	beq.n	bb78 <AudioOutputI2S::isr()+0xf4>
    bad8:	f1bb 0f00 	cmp.w	fp, #0
    badc:	d121      	bne.n	bb22 <AudioOutputI2S::isr()+0x9e>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
    bade:	f1b8 0f00 	cmp.w	r8, #0
    bae2:	d049      	beq.n	bb78 <AudioOutputI2S::isr()+0xf4>
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    bae4:	f108 0104 	add.w	r1, r8, #4
    bae8:	4620      	mov	r0, r4
    baea:	eb01 0146 	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    baee:	3640      	adds	r6, #64	; 0x40
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    baf0:	f7ff feb3 	bl	b85a <memcpy_tointerleaveL>
	asm volatile("": : :"memory");
	asm("dsb");
    baf4:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    baf8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bafc:	f8c2 4f70 	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    bb00:	3420      	adds	r4, #32
	} while (location < end_addr);
    bb02:	42ac      	cmp	r4, r5
    bb04:	d3fa      	bcc.n	bafc <AudioOutputI2S::isr()+0x78>
	asm("dsb");
    bb06:	f3bf 8f4f 	dsb	sy
	asm("isb");
    bb0a:	f3bf 8f6f 	isb	sy
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    bb0e:	2e7f      	cmp	r6, #127	; 0x7f
    bb10:	d826      	bhi.n	bb60 <AudioOutputI2S::isr()+0xdc>
		AudioOutputI2S::block_left_offset = offsetL;
    bb12:	f8aa 6000 	strh.w	r6, [sl]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    bb16:	2f7f      	cmp	r7, #127	; 0x7f
    bb18:	d815      	bhi.n	bb46 <AudioOutputI2S::isr()+0xc2>
		AudioOutputI2S::block_right_offset = offsetR;
    bb1a:	f8a9 7000 	strh.w	r7, [r9]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    bb1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    bb22:	f10b 0204 	add.w	r2, fp, #4
    bb26:	f108 0104 	add.w	r1, r8, #4
    bb2a:	4620      	mov	r0, r4
    bb2c:	eb02 0247 	add.w	r2, r2, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    bb30:	3740      	adds	r7, #64	; 0x40
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    bb32:	eb01 0146 	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    bb36:	3640      	adds	r6, #64	; 0x40
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    bb38:	f7ff fe70 	bl	b81c <memcpy_tointerleaveLR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    bb3c:	e7da      	b.n	baf4 <AudioOutputI2S::isr()+0x70>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bb3e:	462c      	mov	r4, r5
	uint32_t end_addr = (uint32_t)addr + size;
    bb40:	f505 7580 	add.w	r5, r5, #256	; 0x100
    bb44:	e7b7      	b.n	bab6 <AudioOutputI2S::isr()+0x32>
		AudioOutputI2S::block_right_offset = 0;
    bb46:	2400      	movs	r4, #0
		AudioStream::release(blockR);
    bb48:	4658      	mov	r0, fp
		AudioOutputI2S::block_right_offset = 0;
    bb4a:	f8a9 4000 	strh.w	r4, [r9]
		AudioStream::release(blockR);
    bb4e:	f00e fca7 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    bb52:	4b19      	ldr	r3, [pc, #100]	; (bbb8 <AudioOutputI2S::isr()+0x134>)
    bb54:	681a      	ldr	r2, [r3, #0]
		AudioOutputI2S::block_right_2nd = NULL;
    bb56:	601c      	str	r4, [r3, #0]
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    bb58:	4b16      	ldr	r3, [pc, #88]	; (bbb4 <AudioOutputI2S::isr()+0x130>)
    bb5a:	601a      	str	r2, [r3, #0]
}
    bb5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		AudioOutputI2S::block_left_offset = 0;
    bb60:	2400      	movs	r4, #0
		AudioStream::release(blockL);
    bb62:	4640      	mov	r0, r8
		AudioOutputI2S::block_left_offset = 0;
    bb64:	f8aa 4000 	strh.w	r4, [sl]
		AudioStream::release(blockL);
    bb68:	f00e fc9a 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    bb6c:	4a13      	ldr	r2, [pc, #76]	; (bbbc <AudioOutputI2S::isr()+0x138>)
    bb6e:	4b10      	ldr	r3, [pc, #64]	; (bbb0 <AudioOutputI2S::isr()+0x12c>)
    bb70:	6811      	ldr	r1, [r2, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    bb72:	6014      	str	r4, [r2, #0]
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    bb74:	6019      	str	r1, [r3, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    bb76:	e7ce      	b.n	bb16 <AudioOutputI2S::isr()+0x92>
	} else if (blockR) {
    bb78:	f1bb 0f00 	cmp.w	fp, #0
    bb7c:	d008      	beq.n	bb90 <AudioOutputI2S::isr()+0x10c>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    bb7e:	f10b 0104 	add.w	r1, fp, #4
    bb82:	4620      	mov	r0, r4
    bb84:	eb01 0147 	add.w	r1, r1, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    bb88:	3740      	adds	r7, #64	; 0x40
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    bb8a:	f7ff fe86 	bl	b89a <memcpy_tointerleaveR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    bb8e:	e7b1      	b.n	baf4 <AudioOutputI2S::isr()+0x70>
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    bb90:	f44f 7280 	mov.w	r2, #256	; 0x100
    bb94:	4659      	mov	r1, fp
    bb96:	4620      	mov	r0, r4
    bb98:	f016 fbb2 	bl	22300 <memset>
    bb9c:	e7aa      	b.n	baf4 <AudioOutputI2S::isr()+0x70>
    bb9e:	bf00      	nop
    bba0:	2000ae88 	.word	0x2000ae88
    bba4:	202034e0 	.word	0x202034e0
    bba8:	400e8000 	.word	0x400e8000
    bbac:	200136dd 	.word	0x200136dd
    bbb0:	2000ae78 	.word	0x2000ae78
    bbb4:	2000ae80 	.word	0x2000ae80
    bbb8:	2000ae84 	.word	0x2000ae84
    bbbc:	2000ae7c 	.word	0x2000ae7c
    bbc0:	200136c8 	.word	0x200136c8
    bbc4:	200136ca 	.word	0x200136ca

0000bbc8 <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    bbc8:	b538      	push	{r3, r4, r5, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    bbca:	2100      	movs	r1, #0
{
    bbcc:	4604      	mov	r4, r0
	block = receiveReadOnly(0); // input 0 = left channel
    bbce:	f00e fcb3 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    bbd2:	b188      	cbz	r0, bbf8 <AudioOutputI2S::update()+0x30>
		__disable_irq();
    bbd4:	b672      	cpsid	i
		if (block_left_1st == NULL) {
    bbd6:	4a1c      	ldr	r2, [pc, #112]	; (bc48 <AudioOutputI2S::update()+0x80>)
    bbd8:	6813      	ldr	r3, [r2, #0]
    bbda:	2b00      	cmp	r3, #0
    bbdc:	d02b      	beq.n	bc36 <AudioOutputI2S::update()+0x6e>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    bbde:	491b      	ldr	r1, [pc, #108]	; (bc4c <AudioOutputI2S::update()+0x84>)
    bbe0:	680d      	ldr	r5, [r1, #0]
    bbe2:	2d00      	cmp	r5, #0
    bbe4:	d02c      	beq.n	bc40 <AudioOutputI2S::update()+0x78>
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    bbe6:	6015      	str	r5, [r2, #0]
			block_left_2nd = block;
    bbe8:	6008      	str	r0, [r1, #0]
			block_left_offset = 0;
    bbea:	2100      	movs	r1, #0
    bbec:	4a18      	ldr	r2, [pc, #96]	; (bc50 <AudioOutputI2S::update()+0x88>)
    bbee:	8011      	strh	r1, [r2, #0]
			__enable_irq();
    bbf0:	b662      	cpsie	i
			release(tmp);
    bbf2:	4618      	mov	r0, r3
    bbf4:	f00e fc54 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    bbf8:	2101      	movs	r1, #1
    bbfa:	4620      	mov	r0, r4
    bbfc:	f00e fc9c 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    bc00:	b198      	cbz	r0, bc2a <AudioOutputI2S::update()+0x62>
		__disable_irq();
    bc02:	b672      	cpsid	i
		if (block_right_1st == NULL) {
    bc04:	4a13      	ldr	r2, [pc, #76]	; (bc54 <AudioOutputI2S::update()+0x8c>)
    bc06:	6813      	ldr	r3, [r2, #0]
    bc08:	b183      	cbz	r3, bc2c <AudioOutputI2S::update()+0x64>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    bc0a:	4913      	ldr	r1, [pc, #76]	; (bc58 <AudioOutputI2S::update()+0x90>)
    bc0c:	680c      	ldr	r4, [r1, #0]
    bc0e:	b154      	cbz	r4, bc26 <AudioOutputI2S::update()+0x5e>
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    bc10:	6014      	str	r4, [r2, #0]
			block_right_2nd = block;
			block_right_offset = 0;
    bc12:	2400      	movs	r4, #0
    bc14:	4a11      	ldr	r2, [pc, #68]	; (bc5c <AudioOutputI2S::update()+0x94>)
			block_right_2nd = block;
    bc16:	6008      	str	r0, [r1, #0]
			block_right_offset = 0;
    bc18:	8014      	strh	r4, [r2, #0]
			__enable_irq();
    bc1a:	b662      	cpsie	i
			release(tmp);
    bc1c:	4618      	mov	r0, r3
		}
	}
}
    bc1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			release(tmp);
    bc22:	f00e bc3d 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
			block_right_2nd = block;
    bc26:	6008      	str	r0, [r1, #0]
			__enable_irq();
    bc28:	b662      	cpsie	i
}
    bc2a:	bd38      	pop	{r3, r4, r5, pc}
			block_right_offset = 0;
    bc2c:	490b      	ldr	r1, [pc, #44]	; (bc5c <AudioOutputI2S::update()+0x94>)
			block_right_1st = block;
    bc2e:	6010      	str	r0, [r2, #0]
			block_right_offset = 0;
    bc30:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    bc32:	b662      	cpsie	i
}
    bc34:	bd38      	pop	{r3, r4, r5, pc}
			block_left_offset = 0;
    bc36:	4906      	ldr	r1, [pc, #24]	; (bc50 <AudioOutputI2S::update()+0x88>)
			block_left_1st = block;
    bc38:	6010      	str	r0, [r2, #0]
			block_left_offset = 0;
    bc3a:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    bc3c:	b662      	cpsie	i
    bc3e:	e7db      	b.n	bbf8 <AudioOutputI2S::update()+0x30>
			block_left_2nd = block;
    bc40:	6008      	str	r0, [r1, #0]
			__enable_irq();
    bc42:	b662      	cpsie	i
    bc44:	e7d8      	b.n	bbf8 <AudioOutputI2S::update()+0x30>
    bc46:	bf00      	nop
    bc48:	2000ae78 	.word	0x2000ae78
    bc4c:	2000ae7c 	.word	0x2000ae7c
    bc50:	200136c8 	.word	0x200136c8
    bc54:	2000ae80 	.word	0x2000ae80
    bc58:	2000ae84 	.word	0x2000ae84
    bc5c:	200136ca 	.word	0x200136ca

0000bc60 <AudioOutputI2S::config_i2s(bool)>:
#endif
#endif


void AudioOutputI2S::config_i2s(bool only_bclk)
{
    bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    bc62:	4c2d      	ldr	r4, [pc, #180]	; (bd18 <AudioOutputI2S::config_i2s(bool)+0xb8>)
{
    bc64:	4605      	mov	r5, r0

	// if either transmitter or receiver is enabled, do nothing
	if ((I2S1_TCSR & I2S_TCSR_TE) != 0 || (I2S1_RCSR & I2S_RCSR_RE) != 0)
    bc66:	4a2d      	ldr	r2, [pc, #180]	; (bd1c <AudioOutputI2S::config_i2s(bool)+0xbc>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    bc68:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    bc6a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    bc6e:	67e3      	str	r3, [r4, #124]	; 0x7c
	if ((I2S1_TCSR & I2S_TCSR_TE) != 0 || (I2S1_RCSR & I2S_RCSR_RE) != 0)
    bc70:	6893      	ldr	r3, [r2, #8]
    bc72:	2b00      	cmp	r3, #0
    bc74:	db46      	blt.n	bd04 <AudioOutputI2S::config_i2s(bool)+0xa4>
    bc76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    bc7a:	2b00      	cmp	r3, #0
    bc7c:	db42      	blt.n	bd04 <AudioOutputI2S::config_i2s(bool)+0xa4>

	double C = ((double)fs * 256 * n1 * n2) / 24000000;
	int c0 = C;
	int c2 = 10000;
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);
    bc7e:	2300      	movs	r3, #0
    bc80:	f242 7210 	movw	r2, #10000	; 0x2710
    bc84:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
    bc88:	201c      	movs	r0, #28
    bc8a:	f01c fd45 	bl	28718 <___Z14set_audioClockilmb_veneer>

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    bc8e:	69e3      	ldr	r3, [r4, #28]
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    bc90:	4a23      	ldr	r2, [pc, #140]	; (bd20 <AudioOutputI2S::config_i2s(bool)+0xc0>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    bc92:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    bc96:	4923      	ldr	r1, [pc, #140]	; (bd24 <AudioOutputI2S::config_i2s(bool)+0xc4>)
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    bc98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    bc9c:	61e3      	str	r3, [r4, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    bc9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bca0:	401a      	ands	r2, r3
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    bca2:	4b21      	ldr	r3, [pc, #132]	; (bd28 <AudioOutputI2S::config_i2s(bool)+0xc8>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    bca4:	f042 02ce 	orr.w	r2, r2, #206	; 0xce
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    bca8:	62a2      	str	r2, [r4, #40]	; 0x28
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    bcaa:	684a      	ldr	r2, [r1, #4]
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    bcac:	4013      	ands	r3, r2
    bcae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    bcb2:	604b      	str	r3, [r1, #4]

	if (!only_bclk)
    bcb4:	b92d      	cbnz	r5, bcc2 <AudioOutputI2S::config_i2s(bool)+0x62>
	{
	  CORE_PIN23_CONFIG = 3;  //1:MCLK
    bcb6:	4b1d      	ldr	r3, [pc, #116]	; (bd2c <AudioOutputI2S::config_i2s(bool)+0xcc>)
    bcb8:	2203      	movs	r2, #3
    bcba:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	  CORE_PIN20_CONFIG = 3;  //1:RX_SYNC  (LRCLK)
    bcbe:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	}
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    bcc2:	4e1a      	ldr	r6, [pc, #104]	; (bd2c <AudioOutputI2S::config_i2s(bool)+0xcc>)
    bcc4:	2703      	movs	r7, #3

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    bcc6:	4b15      	ldr	r3, [pc, #84]	; (bd1c <AudioOutputI2S::config_i2s(bool)+0xbc>)
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    bcc8:	2401      	movs	r4, #1
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    bcca:	f8c6 7128 	str.w	r7, [r6, #296]	; 0x128
	I2S1_TMR = 0;
    bcce:	2500      	movs	r5, #0
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
    bcd0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
    bcd4:	4916      	ldr	r1, [pc, #88]	; (bd30 <AudioOutputI2S::config_i2s(bool)+0xd0>)
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    bcd6:	4a17      	ldr	r2, [pc, #92]	; (bd34 <AudioOutputI2S::config_i2s(bool)+0xd4>)
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
    bcd8:	4e17      	ldr	r6, [pc, #92]	; (bd38 <AudioOutputI2S::config_i2s(bool)+0xd8>)
	I2S1_TMR = 0;
    bcda:	661d      	str	r5, [r3, #96]	; 0x60
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    bcdc:	60dc      	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
    bcde:	611e      	str	r6, [r3, #16]
	I2S1_TCR3 = I2S_TCR3_TCE;
    bce0:	6158      	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
    bce2:	6199      	str	r1, [r3, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    bce4:	61da      	str	r2, [r3, #28]

	I2S1_RMR = 0;
    bce6:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
    bcea:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
    bcee:	f104 64e0 	add.w	r4, r4, #117440512	; 0x7000000
    bcf2:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
    bcf6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
    bcfa:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
    bcfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

#endif
}
    bd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  if (!only_bclk) // if previous transmitter/receiver only activated BCLK, activate the other clock pins now
    bd04:	2d00      	cmp	r5, #0
    bd06:	d1fc      	bne.n	bd02 <AudioOutputI2S::config_i2s(bool)+0xa2>
	    CORE_PIN23_CONFIG = 3;  //1:MCLK
    bd08:	4b08      	ldr	r3, [pc, #32]	; (bd2c <AudioOutputI2S::config_i2s(bool)+0xcc>)
    bd0a:	2203      	movs	r2, #3
    bd0c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC (LRCLK)
    bd10:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
    bd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd16:	bf00      	nop
    bd18:	400fc000 	.word	0x400fc000
    bd1c:	40384000 	.word	0x40384000
    bd20:	fffffe00 	.word	0xfffffe00
    bd24:	400ac000 	.word	0x400ac000
    bd28:	fff7fff8 	.word	0xfff7fff8
    bd2c:	401f8000 	.word	0x401f8000
    bd30:	00011f1b 	.word	0x00011f1b
    bd34:	1f1f1f00 	.word	0x1f1f1f00
    bd38:	47000001 	.word	0x47000001

0000bd3c <AudioOutputI2S::begin()>:
{
    bd3c:	b570      	push	{r4, r5, r6, lr}
	dma.begin(true); // Allocate the DMA channel first
    bd3e:	4d26      	ldr	r5, [pc, #152]	; (bdd8 <AudioOutputI2S::begin()+0x9c>)
	block_left_1st = NULL;
    bd40:	2400      	movs	r4, #0
	dma.begin(true); // Allocate the DMA channel first
    bd42:	2101      	movs	r1, #1
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    bd44:	4e25      	ldr	r6, [pc, #148]	; (bddc <AudioOutputI2S::begin()+0xa0>)
	dma.begin(true); // Allocate the DMA channel first
    bd46:	4628      	mov	r0, r5
    bd48:	f00e fd30 	bl	1a7ac <DMAChannel::begin(bool)>
	block_left_1st = NULL;
    bd4c:	4a24      	ldr	r2, [pc, #144]	; (bde0 <AudioOutputI2S::begin()+0xa4>)
	block_right_1st = NULL;
    bd4e:	4b25      	ldr	r3, [pc, #148]	; (bde4 <AudioOutputI2S::begin()+0xa8>)
	config_i2s();
    bd50:	4620      	mov	r0, r4
	block_left_1st = NULL;
    bd52:	6014      	str	r4, [r2, #0]
	block_right_1st = NULL;
    bd54:	601c      	str	r4, [r3, #0]
	config_i2s();
    bd56:	f7ff ff83 	bl	bc60 <AudioOutputI2S::config_i2s(bool)>
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    bd5a:	4b23      	ldr	r3, [pc, #140]	; (bde8 <AudioOutputI2S::begin()+0xac>)
    bd5c:	2103      	movs	r1, #3
	dma.TCD->SADDR = i2s_tx_buffer;
    bd5e:	4a23      	ldr	r2, [pc, #140]	; (bdec <AudioOutputI2S::begin()+0xb0>)
	dma.TCD->NBYTES_MLNO = 2;
    bd60:	2002      	movs	r0, #2
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    bd62:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
	dma.TCD->SADDR = i2s_tx_buffer;
    bd66:	682b      	ldr	r3, [r5, #0]
	dma.TCD->SOFF = 2;
    bd68:	4921      	ldr	r1, [pc, #132]	; (bdf0 <AudioOutputI2S::begin()+0xb4>)
	dma.TCD->SADDR = i2s_tx_buffer;
    bd6a:	601a      	str	r2, [r3, #0]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    bd6c:	f44f 7280 	mov.w	r2, #256	; 0x100
	dma.TCD->DLASTSGA = 0;
    bd70:	619c      	str	r4, [r3, #24]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    bd72:	82da      	strh	r2, [r3, #22]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    bd74:	83da      	strh	r2, [r3, #30]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    bd76:	2206      	movs	r2, #6
	dma.TCD->DOFF = 0;
    bd78:	829c      	strh	r4, [r3, #20]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    bd7a:	839a      	strh	r2, [r3, #28]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    bd7c:	4a1d      	ldr	r2, [pc, #116]	; (bdf4 <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    bd7e:	60de      	str	r6, [r3, #12]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    bd80:	611a      	str	r2, [r3, #16]
	dma.TCD->SOFF = 2;
    bd82:	e9c3 1001 	strd	r1, r0, [r3, #4]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    bd86:	7929      	ldrb	r1, [r5, #4]
    bd88:	481b      	ldr	r0, [pc, #108]	; (bdf8 <AudioOutputI2S::begin()+0xbc>)
    bd8a:	fa0f fc81 	sxth.w	ip, r1
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    bd8e:	4b1b      	ldr	r3, [pc, #108]	; (bdfc <AudioOutputI2S::begin()+0xc0>)
		*mux = 0;
    bd90:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    bd94:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
		DMA_SERQ = channel;
    bd98:	4b19      	ldr	r3, [pc, #100]	; (be00 <AudioOutputI2S::begin()+0xc4>)
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    bd9a:	481a      	ldr	r0, [pc, #104]	; (be04 <AudioOutputI2S::begin()+0xc8>)
    bd9c:	76d9      	strb	r1, [r3, #27]
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    bd9e:	f8d2 3066 	ldr.w	r3, [r2, #102]	; 0x66
	update_responsibility = update_setup();
    bda2:	4c19      	ldr	r4, [pc, #100]	; (be08 <AudioOutputI2S::begin()+0xcc>)
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    bda4:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    bda8:	f8c2 3066 	str.w	r3, [r2, #102]	; 0x66
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    bdac:	f842 0c1a 	str.w	r0, [r2, #-26]
	update_responsibility = update_setup();
    bdb0:	f00e fcda 	bl	1a768 <AudioStream::update_setup()>
    bdb4:	792a      	ldrb	r2, [r5, #4]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    bdb6:	4b15      	ldr	r3, [pc, #84]	; (be0c <AudioOutputI2S::begin()+0xd0>)
    bdb8:	2101      	movs	r1, #1
    bdba:	7020      	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    bdbc:	f102 0010 	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    bdc0:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    bdc4:	f002 021f 	and.w	r2, r2, #31
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    bdc8:	4c11      	ldr	r4, [pc, #68]	; (be10 <AudioOutputI2S::begin()+0xd4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    bdca:	4091      	lsls	r1, r2
    bdcc:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    bdce:	4a11      	ldr	r2, [pc, #68]	; (be14 <AudioOutputI2S::begin()+0xd8>)
    bdd0:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    bdd4:	6019      	str	r1, [r3, #0]
}
    bdd6:	bd70      	pop	{r4, r5, r6, pc}
    bdd8:	2000ae88 	.word	0x2000ae88
    bddc:	fffffe00 	.word	0xfffffe00
    bde0:	2000ae78 	.word	0x2000ae78
    bde4:	2000ae80 	.word	0x2000ae80
    bde8:	401f8000 	.word	0x401f8000
    bdec:	202034e0 	.word	0x202034e0
    bdf0:	01010002 	.word	0x01010002
    bdf4:	40384022 	.word	0x40384022
    bdf8:	400ec000 	.word	0x400ec000
    bdfc:	80000014 	.word	0x80000014
    be00:	400e8000 	.word	0x400e8000
    be04:	90000001 	.word	0x90000001
    be08:	200136dd 	.word	0x200136dd
    be0c:	38003840 	.word	0x38003840
    be10:	0000ba85 	.word	0x0000ba85
    be14:	2000a000 	.word	0x2000a000

0000be18 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
DMAChannel AudioOutputI2S::dma(false);
    be18:	4a02      	ldr	r2, [pc, #8]	; (be24 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    be1a:	4903      	ldr	r1, [pc, #12]	; (be28 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    be1c:	4803      	ldr	r0, [pc, #12]	; (be2c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    be1e:	f013 beb3 	b.w	1fb88 <__aeabi_atexit>
    be22:	bf00      	nop
    be24:	20009460 	.word	0x20009460
    be28:	0000ad15 	.word	0x0000ad15
    be2c:	2000ae88 	.word	0x2000ae88

0000be30 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    be30:	4a02      	ldr	r2, [pc, #8]	; (be3c <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    be32:	4903      	ldr	r1, [pc, #12]	; (be40 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    be34:	4803      	ldr	r0, [pc, #12]	; (be44 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    be36:	f013 bea7 	b.w	1fb88 <__aeabi_atexit>
    be3a:	bf00      	nop
    be3c:	20009460 	.word	0x20009460
    be40:	0000ad15 	.word	0x0000ad15
    be44:	2000aec0 	.word	0x2000aec0

0000be48 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    be48:	4a02      	ldr	r2, [pc, #8]	; (be54 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    be4a:	4903      	ldr	r1, [pc, #12]	; (be58 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    be4c:	4803      	ldr	r0, [pc, #12]	; (be5c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    be4e:	f013 be9b 	b.w	1fb88 <__aeabi_atexit>
    be52:	bf00      	nop
    be54:	20009460 	.word	0x20009460
    be58:	0000ad15 	.word	0x0000ad15
    be5c:	2000af00 	.word	0x2000af00

0000be60 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    be60:	4a02      	ldr	r2, [pc, #8]	; (be6c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    be62:	4903      	ldr	r1, [pc, #12]	; (be70 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    be64:	4803      	ldr	r0, [pc, #12]	; (be74 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    be66:	f013 be8f 	b.w	1fb88 <__aeabi_atexit>
    be6a:	bf00      	nop
    be6c:	20009460 	.word	0x20009460
    be70:	0000ad15 	.word	0x0000ad15
    be74:	2000af08 	.word	0x2000af08

0000be78 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    be78:	4a02      	ldr	r2, [pc, #8]	; (be84 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    be7a:	4903      	ldr	r1, [pc, #12]	; (be88 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    be7c:	4803      	ldr	r0, [pc, #12]	; (be8c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    be7e:	f013 be83 	b.w	1fb88 <__aeabi_atexit>
    be82:	bf00      	nop
    be84:	20009460 	.word	0x20009460
    be88:	0000ad15 	.word	0x0000ad15
    be8c:	2000af28 	.word	0x2000af28

0000be90 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    be90:	4a02      	ldr	r2, [pc, #8]	; (be9c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    be92:	4903      	ldr	r1, [pc, #12]	; (bea0 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    be94:	4803      	ldr	r0, [pc, #12]	; (bea4 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    be96:	f013 be77 	b.w	1fb88 <__aeabi_atexit>
    be9a:	bf00      	nop
    be9c:	20009460 	.word	0x20009460
    bea0:	0000ad15 	.word	0x0000ad15
    bea4:	2000ae90 	.word	0x2000ae90

0000bea8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    bea8:	4a02      	ldr	r2, [pc, #8]	; (beb4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    beaa:	4903      	ldr	r1, [pc, #12]	; (beb8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    beac:	4803      	ldr	r0, [pc, #12]	; (bebc <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    beae:	f013 be6b 	b.w	1fb88 <__aeabi_atexit>
    beb2:	bf00      	nop
    beb4:	20009460 	.word	0x20009460
    beb8:	0000ad15 	.word	0x0000ad15
    bebc:	2000af10 	.word	0x2000af10

0000bec0 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    bec0:	4a02      	ldr	r2, [pc, #8]	; (becc <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    bec2:	4903      	ldr	r1, [pc, #12]	; (bed0 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    bec4:	4803      	ldr	r0, [pc, #12]	; (bed4 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    bec6:	f013 be5f 	b.w	1fb88 <__aeabi_atexit>
    beca:	bf00      	nop
    becc:	20009460 	.word	0x20009460
    bed0:	0000ad15 	.word	0x0000ad15
    bed4:	2000af30 	.word	0x2000af30

0000bed8 <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    bed8:	b510      	push	{r4, lr}
		release();
    beda:	4c05      	ldr	r4, [pc, #20]	; (bef0 <__tcf_0+0x18>)
    bedc:	f104 0008 	add.w	r0, r4, #8
    bee0:	f00e fcc8 	bl	1a874 <DMAChannel::release()>
    bee4:	4620      	mov	r0, r4
    bee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    beea:	f00e bcc3 	b.w	1a874 <DMAChannel::release()>
    beee:	bf00      	nop
    bef0:	2000ae98 	.word	0x2000ae98

0000bef4 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    bef4:	b510      	push	{r4, lr}
		begin();
    bef6:	4c08      	ldr	r4, [pc, #32]	; (bf18 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    bef8:	2100      	movs	r1, #0
    befa:	4620      	mov	r0, r4
    befc:	f00e fc56 	bl	1a7ac <DMAChannel::begin(bool)>
    bf00:	f104 0008 	add.w	r0, r4, #8
    bf04:	2100      	movs	r1, #0
    bf06:	f00e fc51 	bl	1a7ac <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    bf0a:	4a04      	ldr	r2, [pc, #16]	; (bf1c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    bf0c:	4904      	ldr	r1, [pc, #16]	; (bf20 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    bf0e:	2000      	movs	r0, #0
}
    bf10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
DMAChannel AudioOutputPWM::dma[2];
    bf14:	f013 be38 	b.w	1fb88 <__aeabi_atexit>
    bf18:	2000ae98 	.word	0x2000ae98
    bf1c:	20009460 	.word	0x20009460
    bf20:	0000bed9 	.word	0x0000bed9

0000bf24 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    bf24:	4a02      	ldr	r2, [pc, #8]	; (bf30 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    bf26:	4903      	ldr	r1, [pc, #12]	; (bf34 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    bf28:	4803      	ldr	r0, [pc, #12]	; (bf38 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    bf2a:	f013 be2d 	b.w	1fb88 <__aeabi_atexit>
    bf2e:	bf00      	nop
    bf30:	20009460 	.word	0x20009460
    bf34:	0000ad15 	.word	0x0000ad15
    bf38:	2000aef0 	.word	0x2000aef0

0000bf3c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    bf3c:	4a02      	ldr	r2, [pc, #8]	; (bf48 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    bf3e:	4903      	ldr	r1, [pc, #12]	; (bf4c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    bf40:	4803      	ldr	r0, [pc, #12]	; (bf50 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    bf42:	f013 be21 	b.w	1fb88 <__aeabi_atexit>
    bf46:	bf00      	nop
    bf48:	20009460 	.word	0x20009460
    bf4c:	0000ad15 	.word	0x0000ad15
    bf50:	2000af18 	.word	0x2000af18

0000bf54 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    bf54:	4a02      	ldr	r2, [pc, #8]	; (bf60 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    bf56:	4903      	ldr	r1, [pc, #12]	; (bf64 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    bf58:	4803      	ldr	r0, [pc, #12]	; (bf68 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    bf5a:	f013 be15 	b.w	1fb88 <__aeabi_atexit>
    bf5e:	bf00      	nop
    bf60:	20009460 	.word	0x20009460
    bf64:	0000ad15 	.word	0x0000ad15
    bf68:	2000af20 	.word	0x2000af20

0000bf6c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
DMAChannel AudioOutputTDM::dma(false);
    bf6c:	4a02      	ldr	r2, [pc, #8]	; (bf78 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    bf6e:	4903      	ldr	r1, [pc, #12]	; (bf7c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    bf70:	4803      	ldr	r0, [pc, #12]	; (bf80 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    bf72:	f013 be09 	b.w	1fb88 <__aeabi_atexit>
    bf76:	bf00      	nop
    bf78:	20009460 	.word	0x20009460
    bf7c:	0000ad15 	.word	0x0000ad15
    bf80:	2000aea8 	.word	0x2000aea8

0000bf84 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
audio_block_t * AudioOutputTDM2::block_input[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioOutputTDM2::update_responsibility = false;
DMAChannel AudioOutputTDM2::dma(false);
    bf84:	4a02      	ldr	r2, [pc, #8]	; (bf90 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    bf86:	4903      	ldr	r1, [pc, #12]	; (bf94 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    bf88:	4803      	ldr	r0, [pc, #12]	; (bf98 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    bf8a:	f013 bdfd 	b.w	1fb88 <__aeabi_atexit>
    bf8e:	bf00      	nop
    bf90:	20009460 	.word	0x20009460
    bf94:	0000ad15 	.word	0x0000ad15
    bf98:	2000aec8 	.word	0x2000aec8

0000bf9c <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
    bf9c:	2000      	movs	r0, #0
    bf9e:	4770      	bx	lr

0000bfa0 <Print::flush()>:
	virtual void flush()				{ }
    bfa0:	4770      	bx	lr
    bfa2:	bf00      	nop

0000bfa4 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
    bfa4:	6d03      	ldr	r3, [r0, #80]	; 0x50
    bfa6:	b10b      	cbz	r3, bfac <SDFile::isOpen()+0x8>
    bfa8:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
    bfaa:	4770      	bx	lr
    bfac:	6d40      	ldr	r0, [r0, #84]	; 0x54
    bfae:	3800      	subs	r0, #0
    bfb0:	bf18      	it	ne
    bfb2:	2001      	movne	r0, #1
    bfb4:	4770      	bx	lr
    bfb6:	bf00      	nop

0000bfb8 <SDFile::close()>:
	virtual void close() {
    bfb8:	b510      	push	{r4, lr}
    bfba:	4604      	mov	r4, r0
		if (filename) {
    bfbc:	6d80      	ldr	r0, [r0, #88]	; 0x58
    bfbe:	b118      	cbz	r0, bfc8 <SDFile::close()+0x10>
			free(filename);
    bfc0:	f014 fa94 	bl	204ec <free>
			filename = nullptr;
    bfc4:	2300      	movs	r3, #0
    bfc6:	65a3      	str	r3, [r4, #88]	; 0x58
    bfc8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    bfca:	b12b      	cbz	r3, bfd8 <SDFile::close()+0x20>
			sdfatfile.close();
    bfcc:	f104 0018 	add.w	r0, r4, #24
	}
    bfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
    bfd4:	f005 bfdc 	b.w	11f90 <FsBaseFile::close()>
    bfd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bfda:	2b00      	cmp	r3, #0
    bfdc:	d1f6      	bne.n	bfcc <SDFile::close()+0x14>
	}
    bfde:	bd10      	pop	{r4, pc}

0000bfe0 <SDFile::name()>:
	virtual const char * name() {
    bfe0:	b510      	push	{r4, lr}
    bfe2:	4604      	mov	r4, r0
		if (!filename) {
    bfe4:	6d80      	ldr	r0, [r0, #88]	; 0x58
    bfe6:	b100      	cbz	r0, bfea <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
    bfe8:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
    bfea:	f44f 7080 	mov.w	r0, #256	; 0x100
    bfee:	f014 fa75 	bl	204dc <malloc>
    bff2:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
    bff4:	b1b0      	cbz	r0, c024 <SDFile::name()+0x44>
    *name = 0;
    bff6:	2200      	movs	r2, #0
    return m_fFile ? m_fFile->getName(name, len) :
    bff8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
    bffa:	7002      	strb	r2, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
    bffc:	b13b      	cbz	r3, c00e <SDFile::name()+0x2e>
    bffe:	4601      	mov	r1, r0
    c000:	f44f 7280 	mov.w	r2, #256	; 0x100
    c004:	4618      	mov	r0, r3
    c006:	f005 fc13 	bl	11830 <FatFile::getName(char*, unsigned int)>
		return filename;
    c00a:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
    c00c:	bd10      	pop	{r4, pc}
    c00e:	6d63      	ldr	r3, [r4, #84]	; 0x54
           m_xFile ? m_xFile->getName(name, len) : 0;
    c010:	2b00      	cmp	r3, #0
    c012:	d0e9      	beq.n	bfe8 <SDFile::name()+0x8>
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
    c014:	4601      	mov	r1, r0
    c016:	f44f 7280 	mov.w	r2, #256	; 0x100
    c01a:	4618      	mov	r0, r3
    c01c:	f003 f8b6 	bl	f18c <ExFatFile::getName8(char*, unsigned int)>
		return filename;
    c020:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
    c022:	bd10      	pop	{r4, pc}
				filename = &zeroterm;
    c024:	4b01      	ldr	r3, [pc, #4]	; (c02c <SDFile::name()+0x4c>)
    c026:	4618      	mov	r0, r3
    c028:	65a3      	str	r3, [r4, #88]	; 0x58
	}
    c02a:	bd10      	pop	{r4, pc}
    c02c:	200136e1 	.word	0x200136e1

0000c030 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
    c030:	b538      	push	{r3, r4, r5, lr}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
    c032:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c034:	b16d      	cbz	r5, c052 <SDFile::truncate(unsigned long long)+0x22>
    c036:	b10b      	cbz	r3, c03c <SDFile::truncate(unsigned long long)+0xc>
	}
    c038:	2000      	movs	r0, #0
    c03a:	bd38      	pop	{r3, r4, r5, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
    c03c:	4611      	mov	r1, r2
    c03e:	4628      	mov	r0, r5
    c040:	f004 f932 	bl	102a8 <FatFile::seekSet(unsigned long)>
    c044:	2800      	cmp	r0, #0
    c046:	d0f7      	beq.n	c038 <SDFile::truncate(unsigned long long)+0x8>
    c048:	4628      	mov	r0, r5
    c04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c04e:	f004 bacd 	b.w	105ec <FatFile::truncate()>
    c052:	6d44      	ldr	r4, [r0, #84]	; 0x54
           m_xFile ? m_xFile->truncate(length) : false;
    c054:	2c00      	cmp	r4, #0
    c056:	d0ef      	beq.n	c038 <SDFile::truncate(unsigned long long)+0x8>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    c058:	4620      	mov	r0, r4
    c05a:	f001 fce9 	bl	da30 <ExFatFile::seekSet(unsigned long long)>
    c05e:	2800      	cmp	r0, #0
    c060:	d0ea      	beq.n	c038 <SDFile::truncate(unsigned long long)+0x8>
    c062:	4620      	mov	r0, r4
    c064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c068:	f002 bb5c 	b.w	e724 <ExFatFile::truncate()>

0000c06c <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
    c06c:	798a      	ldrb	r2, [r1, #6]
    c06e:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
    c072:	061b      	lsls	r3, r3, #24
    c074:	d422      	bmi.n	c0bc <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    c076:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
    c07a:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    c07c:	794b      	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
    c07e:	b085      	sub	sp, #20
    return m_fFile ?
    c080:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    c082:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
    c084:	790d      	ldrb	r5, [r1, #4]
    c086:	788e      	ldrb	r6, [r1, #2]
    c088:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
    c08a:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
    c08c:	7809      	ldrb	r1, [r1, #0]
    c08e:	b14c      	cbz	r4, c0a4 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
    c090:	4620      	mov	r0, r4
    c092:	9601      	str	r6, [sp, #4]
    c094:	9500      	str	r5, [sp, #0]
    c096:	e9cd 7102 	strd	r7, r1, [sp, #8]
    c09a:	2104      	movs	r1, #4
    c09c:	f004 fa3a 	bl	10514 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
    c0a0:	b005      	add	sp, #20
    c0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0a4:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
    c0a6:	2800      	cmp	r0, #0
    c0a8:	d0fa      	beq.n	c0a0 <SDFile::setModifyTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
    c0aa:	9601      	str	r6, [sp, #4]
    c0ac:	9500      	str	r5, [sp, #0]
    c0ae:	e9cd 7102 	strd	r7, r1, [sp, #8]
    c0b2:	2104      	movs	r1, #4
    c0b4:	f002 fa7a 	bl	e5ac <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    c0b8:	b005      	add	sp, #20
    c0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
    c0bc:	2000      	movs	r0, #0
	}
    c0be:	4770      	bx	lr

0000c0c0 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
    c0c0:	b510      	push	{r4, lr}
    c0c2:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
    c0c4:	6d00      	ldr	r0, [r0, #80]	; 0x50
    c0c6:	b180      	cbz	r0, c0ea <SDFile::rewindDirectory()+0x2a>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
    c0c8:	7803      	ldrb	r3, [r0, #0]
    c0ca:	f013 0f70 	tst.w	r3, #112	; 0x70
    c0ce:	d100      	bne.n	c0d2 <SDFile::rewindDirectory()+0x12>
	}
    c0d0:	bd10      	pop	{r4, pc}
    seekSet(0);
    c0d2:	2100      	movs	r1, #0
    c0d4:	f004 f8e8 	bl	102a8 <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
    c0d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c0da:	2800      	cmp	r0, #0
    c0dc:	d0f8      	beq.n	c0d0 <SDFile::rewindDirectory()+0x10>
    seekSet(0);
    c0de:	2200      	movs	r2, #0
    c0e0:	2300      	movs	r3, #0
    c0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c0e6:	f001 bca3 	b.w	da30 <ExFatFile::seekSet(unsigned long long)>
    c0ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
    c0ec:	2800      	cmp	r0, #0
    c0ee:	d0ef      	beq.n	c0d0 <SDFile::rewindDirectory()+0x10>
    c0f0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    c0f4:	f013 0f50 	tst.w	r3, #80	; 0x50
    c0f8:	d0ea      	beq.n	c0d0 <SDFile::rewindDirectory()+0x10>
    c0fa:	2200      	movs	r2, #0
    c0fc:	2300      	movs	r3, #0
    c0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c102:	f001 bc95 	b.w	da30 <ExFatFile::seekSet(unsigned long long)>
    c106:	bf00      	nop

0000c108 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    c108:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
    c10a:	b510      	push	{r4, lr}
    c10c:	460c      	mov	r4, r1
    c10e:	b082      	sub	sp, #8
    c110:	b32b      	cbz	r3, c15e <SDFile::getModifyTime(DateTimeFields&)+0x56>
    c112:	f10d 0206 	add.w	r2, sp, #6
    c116:	a901      	add	r1, sp, #4
    c118:	4618      	mov	r0, r3
    c11a:	f003 fc6b 	bl	f9f4 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
    c11e:	b338      	cbz	r0, c170 <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
    c120:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c124:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c128:	ea53 0102 	orrs.w	r1, r3, r2
    c12c:	d020      	beq.n	c170 <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
    c12e:	f3c2 1c45 	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    c132:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
    c136:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
    c138:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
    c13c:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
    c13e:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
    c142:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
    c144:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
    c146:	3901      	subs	r1, #1
  return fatDate & 0X1F;
    c148:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
    c14c:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
    c150:	7020      	strb	r0, [r4, #0]
		return true;
    c152:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
    c154:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
    c156:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
    c158:	71a2      	strb	r2, [r4, #6]
	}
    c15a:	b002      	add	sp, #8
    c15c:	bd10      	pop	{r4, pc}
    c15e:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    c160:	b130      	cbz	r0, c170 <SDFile::getModifyTime(DateTimeFields&)+0x68>
    c162:	f10d 0206 	add.w	r2, sp, #6
    c166:	a901      	add	r1, sp, #4
    c168:	f001 fb08 	bl	d77c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    c16c:	2800      	cmp	r0, #0
    c16e:	d1d7      	bne.n	c120 <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
    c170:	2000      	movs	r0, #0
	}
    c172:	b002      	add	sp, #8
    c174:	bd10      	pop	{r4, pc}
    c176:	bf00      	nop

0000c178 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    c178:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
    c17a:	b510      	push	{r4, lr}
    c17c:	460c      	mov	r4, r1
    c17e:	b082      	sub	sp, #8
    c180:	b32b      	cbz	r3, c1ce <SDFile::getCreateTime(DateTimeFields&)+0x56>
    c182:	f10d 0206 	add.w	r2, sp, #6
    c186:	a901      	add	r1, sp, #4
    c188:	4618      	mov	r0, r3
    c18a:	f003 fc23 	bl	f9d4 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
    c18e:	b338      	cbz	r0, c1e0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
    c190:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c194:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c198:	ea53 0102 	orrs.w	r1, r3, r2
    c19c:	d020      	beq.n	c1e0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
    c19e:	f3c2 1c45 	ubfx	ip, r2, #5, #6
  return 2*(fatTime & 0X1F);
    c1a2:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
    c1a6:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
    c1a8:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
    c1ac:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
    c1ae:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
    c1b2:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
    c1b4:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
    c1b6:	3901      	subs	r1, #1
  return fatDate & 0X1F;
    c1b8:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
    c1bc:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
    c1c0:	7020      	strb	r0, [r4, #0]
		return true;
    c1c2:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
    c1c4:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
    c1c6:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
    c1c8:	71a2      	strb	r2, [r4, #6]
	}
    c1ca:	b002      	add	sp, #8
    c1cc:	bd10      	pop	{r4, pc}
    c1ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    c1d0:	b130      	cbz	r0, c1e0 <SDFile::getCreateTime(DateTimeFields&)+0x68>
    c1d2:	f10d 0206 	add.w	r2, sp, #6
    c1d6:	a901      	add	r1, sp, #4
    c1d8:	f001 fabe 	bl	d758 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    c1dc:	2800      	cmp	r0, #0
    c1de:	d1d7      	bne.n	c190 <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
    c1e0:	2000      	movs	r0, #0
	}
    c1e2:	b002      	add	sp, #8
    c1e4:	bd10      	pop	{r4, pc}
    c1e6:	bf00      	nop

0000c1e8 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
    c1e8:	6903      	ldr	r3, [r0, #16]
    c1ea:	b1d3      	cbz	r3, c222 <File::write(unsigned char const*, unsigned int)+0x3a>
    c1ec:	480e      	ldr	r0, [pc, #56]	; (c228 <File::write(unsigned char const*, unsigned int)+0x40>)
	virtual size_t write(const uint8_t *buf, size_t size) {
    c1ee:	b410      	push	{r4}
		return (f) ? f->write((void*)buf, size) : 0;
    c1f0:	681c      	ldr	r4, [r3, #0]
    c1f2:	68e4      	ldr	r4, [r4, #12]
    c1f4:	4284      	cmp	r4, r0
    c1f6:	d10f      	bne.n	c218 <File::write(unsigned char const*, unsigned int)+0x30>
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
    c1f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
    c1fa:	b118      	cbz	r0, c204 <File::write(unsigned char const*, unsigned int)+0x1c>
	}
    c1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    c200:	f004 ba2e 	b.w	10660 <FatFile::write(void const*, unsigned int)>
    c204:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
    c206:	b118      	cbz	r0, c210 <File::write(unsigned char const*, unsigned int)+0x28>
    c208:	f85d 4b04 	ldr.w	r4, [sp], #4
    c20c:	f002 bafc 	b.w	e808 <ExFatFile::write(void const*, unsigned int)>
    c210:	2000      	movs	r0, #0
    c212:	f85d 4b04 	ldr.w	r4, [sp], #4
    c216:	4770      	bx	lr
		return (f) ? f->write((void*)buf, size) : 0;
    c218:	4618      	mov	r0, r3
    c21a:	4623      	mov	r3, r4
	}
    c21c:	f85d 4b04 	ldr.w	r4, [sp], #4
		return (f) ? f->write((void*)buf, size) : 0;
    c220:	4718      	bx	r3
	}
    c222:	2000      	movs	r0, #0
    c224:	4770      	bx	lr
    c226:	bf00      	nop
    c228:	0000c4f1 	.word	0x0000c4f1

0000c22c <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
    c22c:	6900      	ldr	r0, [r0, #16]
    c22e:	b190      	cbz	r0, c256 <File::available()+0x2a>
    c230:	6803      	ldr	r3, [r0, #0]
    c232:	4a15      	ldr	r2, [pc, #84]	; (c288 <File::available()+0x5c>)
    c234:	691b      	ldr	r3, [r3, #16]
    c236:	4293      	cmp	r3, r2
    c238:	d125      	bne.n	c286 <File::available()+0x5a>
    return m_fFile ? m_fFile->available() :
    c23a:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c23c:	b163      	cbz	r3, c258 <File::available()+0x2c>
    return isFile() ? fileSize() - curPosition() : 0;
    c23e:	7818      	ldrb	r0, [r3, #0]
    c240:	f010 0008 	ands.w	r0, r0, #8
    c244:	d007      	beq.n	c256 <File::available()+0x2a>
    c246:	69d8      	ldr	r0, [r3, #28]
    c248:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
    c24a:	1ac0      	subs	r0, r0, r3
    c24c:	bf48      	it	mi
    c24e:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
    c252:	4770      	bx	lr
    c254:	4618      	mov	r0, r3
	}
    c256:	4770      	bx	lr
    c258:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
    c25a:	2b00      	cmp	r3, #0
    c25c:	d0fa      	beq.n	c254 <File::available()+0x28>
    return isFile() ? fileSize() - curPosition() : 0;
    c25e:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
    c262:	f010 0008 	ands.w	r0, r0, #8
    c266:	d0f6      	beq.n	c256 <File::available()+0x2a>
    c268:	6918      	ldr	r0, [r3, #16]
    c26a:	6819      	ldr	r1, [r3, #0]
    c26c:	695a      	ldr	r2, [r3, #20]
    c26e:	1a40      	subs	r0, r0, r1
    c270:	685b      	ldr	r3, [r3, #4]
    c272:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    c276:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    c27a:	f173 0300 	sbcs.w	r3, r3, #0
    c27e:	d3ea      	bcc.n	c256 <File::available()+0x2a>
    c280:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c284:	4770      	bx	lr
		return (f) ? f->available() : 0;
    c286:	4718      	bx	r3
    c288:	0000c5ed 	.word	0x0000c5ed

0000c28c <File::flush()>:
	int peek() {
		return (f) ? f->peek() : -1;
	}
	void flush() {
		if (f) f->flush();
    c28c:	6903      	ldr	r3, [r0, #16]
    c28e:	b163      	cbz	r3, c2aa <File::flush()+0x1e>
    c290:	681a      	ldr	r2, [r3, #0]
    c292:	4907      	ldr	r1, [pc, #28]	; (c2b0 <File::flush()+0x24>)
    c294:	6992      	ldr	r2, [r2, #24]
    c296:	428a      	cmp	r2, r1
    c298:	d108      	bne.n	c2ac <File::flush()+0x20>
    return m_fFile ? m_fFile->sync() :
    c29a:	6d18      	ldr	r0, [r3, #80]	; 0x50
    c29c:	b108      	cbz	r0, c2a2 <File::flush()+0x16>
    c29e:	f004 b933 	b.w	10508 <FatFile::sync()>
    c2a2:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
    c2a4:	b108      	cbz	r0, c2aa <File::flush()+0x1e>
    c2a6:	f002 b80b 	b.w	e2c0 <ExFatFile::sync()>
	}
    c2aa:	4770      	bx	lr
		if (f) f->flush();
    c2ac:	4618      	mov	r0, r3
    c2ae:	4710      	bx	r2
    c2b0:	0000c471 	.word	0x0000c471

0000c2b4 <File::peek()>:
		return (f) ? f->peek() : -1;
    c2b4:	6903      	ldr	r3, [r0, #16]
    c2b6:	b173      	cbz	r3, c2d6 <File::peek()+0x22>
    c2b8:	681a      	ldr	r2, [r3, #0]
    c2ba:	4908      	ldr	r1, [pc, #32]	; (c2dc <File::peek()+0x28>)
    c2bc:	6952      	ldr	r2, [r2, #20]
    c2be:	428a      	cmp	r2, r1
    c2c0:	d107      	bne.n	c2d2 <File::peek()+0x1e>
    return m_fFile ? m_fFile->peek() :
    c2c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
    c2c4:	b108      	cbz	r0, c2ca <File::peek()+0x16>
    c2c6:	f003 be7b 	b.w	ffc0 <FatFile::peek()>
    c2ca:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
    c2cc:	b118      	cbz	r0, c2d6 <File::peek()+0x22>
    c2ce:	f001 bb99 	b.w	da04 <ExFatFile::peek()>
    c2d2:	4618      	mov	r0, r3
    c2d4:	4710      	bx	r2
	}
    c2d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c2da:	4770      	bx	lr
    c2dc:	0000c3c9 	.word	0x0000c3c9

0000c2e0 <SDFile::position()>:
    return m_fFile ? m_fFile->curPosition() :
    c2e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c2e2:	b113      	cbz	r3, c2ea <SDFile::position()+0xa>
    c2e4:	6958      	ldr	r0, [r3, #20]
    c2e6:	2100      	movs	r1, #0
    c2e8:	4770      	bx	lr
    c2ea:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
    c2ec:	b113      	cbz	r3, c2f4 <SDFile::position()+0x14>
  uint64_t curPosition() const {return m_curPosition;}
    c2ee:	e9d3 0100 	ldrd	r0, r1, [r3]
    c2f2:	4770      	bx	lr
    c2f4:	4618      	mov	r0, r3
    c2f6:	4619      	mov	r1, r3
	}
    c2f8:	4770      	bx	lr
    c2fa:	bf00      	nop

0000c2fc <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() :
    c2fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c2fe:	b113      	cbz	r3, c306 <SDFile::size()+0xa>
    c300:	69d8      	ldr	r0, [r3, #28]
    c302:	2100      	movs	r1, #0
    c304:	4770      	bx	lr
    c306:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
    c308:	b113      	cbz	r3, c310 <SDFile::size()+0x14>
  uint64_t fileSize() const {return m_validLength;}
    c30a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    c30e:	4770      	bx	lr
    c310:	4618      	mov	r0, r3
    c312:	4619      	mov	r1, r3
	}
    c314:	4770      	bx	lr
    c316:	bf00      	nop

0000c318 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
    c318:	b5f0      	push	{r4, r5, r6, r7, lr}
    c31a:	b095      	sub	sp, #84	; 0x54
	constexpr Print() : write_error(0) {}
    c31c:	2200      	movs	r2, #0
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    c31e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c322:	4f24      	ldr	r7, [pc, #144]	; (c3b4 <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    c324:	3118      	adds	r1, #24
    c326:	4605      	mov	r5, r0
    c328:	a804      	add	r0, sp, #16
    c32a:	f88d 200c 	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c32e:	9700      	str	r7, [sp, #0]
    c330:	e9cd 2401 	strd	r2, r4, [sp, #4]
  FsBaseFile() {}
    c334:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
    c338:	f005 fe96 	bl	12068 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    c33c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c33e:	2b00      	cmp	r3, #0
    c340:	d02d      	beq.n	c39e <SDFile::openNextFile(unsigned char)+0x86>
		if (file) return File(new SDFile(file));
    c342:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    c344:	2600      	movs	r6, #0
    c346:	f00f fd09 	bl	1bd5c <operator new(unsigned int)>
class Print
    c34a:	9b01      	ldr	r3, [sp, #4]
    c34c:	4604      	mov	r4, r0
    c34e:	6046      	str	r6, [r0, #4]
    c350:	60c3      	str	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
    c352:	a904      	add	r1, sp, #16
class Stream : public Print
    c354:	9b02      	ldr	r3, [sp, #8]
    c356:	3018      	adds	r0, #24
    c358:	f840 3c08 	str.w	r3, [r0, #-8]
    c35c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c360:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    c364:	4b14      	ldr	r3, [pc, #80]	; (c3b8 <SDFile::openNextFile(unsigned char)+0xa0>)
    c366:	f840 3c18 	str.w	r3, [r0, #-24]
    c36a:	4b14      	ldr	r3, [pc, #80]	; (c3bc <SDFile::openNextFile(unsigned char)+0xa4>)
    c36c:	f840 3c10 	str.w	r3, [r0, #-16]
    c370:	f005 fdcc 	bl	11f0c <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
    c374:	4b12      	ldr	r3, [pc, #72]	; (c3c0 <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    c376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    c37a:	60a7      	str	r7, [r4, #8]
    c37c:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
    c37e:	6863      	ldr	r3, [r4, #4]
    c380:	65a6      	str	r6, [r4, #88]	; 0x58
    c382:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
    c384:	606e      	str	r6, [r5, #4]
    c386:	732e      	strb	r6, [r5, #12]
    c388:	60aa      	str	r2, [r5, #8]
		f = file;
    c38a:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    c38c:	6063      	str	r3, [r4, #4]
    c38e:	4b0d      	ldr	r3, [pc, #52]	; (c3c4 <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() {close();}
    c390:	a804      	add	r0, sp, #16
    c392:	9300      	str	r3, [sp, #0]
    c394:	f005 fdfc 	bl	11f90 <FsBaseFile::close()>
	}
    c398:	4628      	mov	r0, r5
    c39a:	b015      	add	sp, #84	; 0x54
    c39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    c39e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c3a0:	2b00      	cmp	r3, #0
    c3a2:	d1ce      	bne.n	c342 <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
    c3a4:	4a06      	ldr	r2, [pc, #24]	; (c3c0 <SDFile::openNextFile(unsigned char)+0xa8>)
    c3a6:	732b      	strb	r3, [r5, #12]
    c3a8:	602a      	str	r2, [r5, #0]
    c3aa:	612b      	str	r3, [r5, #16]
    c3ac:	e9c5 3401 	strd	r3, r4, [r5, #4]
    c3b0:	e7ed      	b.n	c38e <SDFile::openNextFile(unsigned char)+0x76>
    c3b2:	bf00      	nop
    c3b4:	20003df8 	.word	0x20003df8
    c3b8:	20003e1c 	.word	0x20003e1c
    c3bc:	20003e78 	.word	0x20003e78
    c3c0:	20003dbc 	.word	0x20003dbc
    c3c4:	20003c3c 	.word	0x20003c3c

0000c3c8 <SDFile::peek()>:
    return m_fFile ? m_fFile->peek() :
    c3c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c3ca:	b113      	cbz	r3, c3d2 <SDFile::peek()+0xa>
    c3cc:	4618      	mov	r0, r3
    c3ce:	f003 bdf7 	b.w	ffc0 <FatFile::peek()>
    c3d2:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
    c3d4:	b108      	cbz	r0, c3da <SDFile::peek()+0x12>
    c3d6:	f001 bb15 	b.w	da04 <ExFatFile::peek()>
	}
    c3da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c3de:	4770      	bx	lr

0000c3e0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
    c3e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
    c3e2:	b113      	cbz	r3, c3ea <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
    c3e4:	4618      	mov	r0, r3
    c3e6:	f003 bdeb 	b.w	ffc0 <FatFile::peek()>
    c3ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
    c3ec:	b108      	cbz	r0, c3f2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
    c3ee:	f001 bb09 	b.w	da04 <ExFatFile::peek()>
  }
    c3f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c3f6:	4770      	bx	lr

0000c3f8 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
    c3f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c3fa:	b133      	cbz	r3, c40a <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    c3fc:	781b      	ldrb	r3, [r3, #0]
    c3fe:	f013 0f70 	tst.w	r3, #112	; 0x70
    c402:	bf14      	ite	ne
    c404:	2001      	movne	r0, #1
    c406:	2000      	moveq	r0, #0
    c408:	4770      	bx	lr
    c40a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
    c40c:	b130      	cbz	r0, c41c <SDFile::isDirectory()+0x24>
    c40e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    c412:	f013 0f50 	tst.w	r3, #80	; 0x50
    c416:	bf14      	ite	ne
    c418:	2001      	movne	r0, #1
    c41a:	2000      	moveq	r0, #0
	}
    c41c:	4770      	bx	lr
    c41e:	bf00      	nop

0000c420 <SDFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
    c420:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c422:	b113      	cbz	r3, c42a <SDFile::read(void*, unsigned int)+0xa>
    c424:	4618      	mov	r0, r3
    c426:	f003 bcf7 	b.w	fe18 <FatFile::read(void*, unsigned int)>
    c42a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
    c42c:	b108      	cbz	r0, c432 <SDFile::read(void*, unsigned int)+0x12>
    c42e:	f001 ba19 	b.w	d864 <ExFatFile::read(void*, unsigned int)>
	}
    c432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c436:	4770      	bx	lr

0000c438 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
    c438:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
    c43a:	b500      	push	{lr}
    c43c:	b083      	sub	sp, #12
    c43e:	b163      	cbz	r3, c45a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
    c440:	2201      	movs	r2, #1
    c442:	f10d 0107 	add.w	r1, sp, #7
    c446:	4618      	mov	r0, r3
    c448:	f003 fce6 	bl	fe18 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
    c44c:	2801      	cmp	r0, #1
    c44e:	d10c      	bne.n	c46a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
    c450:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
    c454:	b003      	add	sp, #12
    c456:	f85d fb04 	ldr.w	pc, [sp], #4
    c45a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
    c45c:	b128      	cbz	r0, c46a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
    c45e:	2201      	movs	r2, #1
    c460:	f10d 0107 	add.w	r1, sp, #7
    c464:	f001 f9fe 	bl	d864 <ExFatFile::read(void*, unsigned int)>
    c468:	e7f0      	b.n	c44c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
    c46a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c46e:	e7f1      	b.n	c454 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

0000c470 <SDFile::flush()>:
    return m_fFile ? m_fFile->sync() :
    c470:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c472:	b113      	cbz	r3, c47a <SDFile::flush()+0xa>
    c474:	4618      	mov	r0, r3
    c476:	f004 b847 	b.w	10508 <FatFile::sync()>
    c47a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
    c47c:	b108      	cbz	r0, c482 <SDFile::flush()+0x12>
    c47e:	f001 bf1f 	b.w	e2c0 <ExFatFile::sync()>
	}
    c482:	4770      	bx	lr

0000c484 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
    c484:	6c83      	ldr	r3, [r0, #72]	; 0x48
    c486:	b113      	cbz	r3, c48e <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
    c488:	4618      	mov	r0, r3
    c48a:	f004 b83d 	b.w	10508 <FatFile::sync()>
    c48e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
    c490:	b108      	cbz	r0, c496 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
    c492:	f001 bf15 	b.w	e2c0 <ExFatFile::sync()>
  }
    c496:	4770      	bx	lr

0000c498 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
    c498:	6903      	ldr	r3, [r0, #16]
    c49a:	b323      	cbz	r3, c4e6 <File::read()+0x4e>
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
    c49c:	6819      	ldr	r1, [r3, #0]
    c49e:	4a13      	ldr	r2, [pc, #76]	; (c4ec <File::read()+0x54>)
	int read() {
    c4a0:	b510      	push	{r4, lr}
		if (f->read(&b, 1) < 1) return -1;
    c4a2:	688c      	ldr	r4, [r1, #8]
	int read() {
    c4a4:	b082      	sub	sp, #8
    c4a6:	4294      	cmp	r4, r2
    c4a8:	d114      	bne.n	c4d4 <File::read()+0x3c>
    return m_fFile ? m_fFile->read(buf, count) :
    c4aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
    c4ac:	b148      	cbz	r0, c4c2 <File::read()+0x2a>
    c4ae:	2201      	movs	r2, #1
    c4b0:	f10d 0107 	add.w	r1, sp, #7
    c4b4:	f003 fcb0 	bl	fe18 <FatFile::read(void*, unsigned int)>
		if (f->read(&b, 1) < 1) return -1;
    c4b8:	b190      	cbz	r0, c4e0 <File::read()+0x48>
		return b;
    c4ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
    c4be:	b002      	add	sp, #8
    c4c0:	bd10      	pop	{r4, pc}
    c4c2:	6d58      	ldr	r0, [r3, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
    c4c4:	2800      	cmp	r0, #0
    c4c6:	d0f8      	beq.n	c4ba <File::read()+0x22>
    c4c8:	2201      	movs	r2, #1
    c4ca:	f10d 0107 	add.w	r1, sp, #7
    c4ce:	f001 f9c9 	bl	d864 <ExFatFile::read(void*, unsigned int)>
    c4d2:	e7f1      	b.n	c4b8 <File::read()+0x20>
		if (f->read(&b, 1) < 1) return -1;
    c4d4:	2201      	movs	r2, #1
    c4d6:	f10d 0107 	add.w	r1, sp, #7
    c4da:	4618      	mov	r0, r3
    c4dc:	47a0      	blx	r4
    c4de:	e7eb      	b.n	c4b8 <File::read()+0x20>
		if (!f) return -1;
    c4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c4e4:	e7eb      	b.n	c4be <File::read()+0x26>
    c4e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    c4ea:	4770      	bx	lr
    c4ec:	0000c421 	.word	0x0000c421

0000c4f0 <SDFile::write(void const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
    c4f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c4f2:	b113      	cbz	r3, c4fa <SDFile::write(void const*, unsigned int)+0xa>
    c4f4:	4618      	mov	r0, r3
    c4f6:	f004 b8b3 	b.w	10660 <FatFile::write(void const*, unsigned int)>
    c4fa:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
    c4fc:	b108      	cbz	r0, c502 <SDFile::write(void const*, unsigned int)+0x12>
    c4fe:	f002 b983 	b.w	e808 <ExFatFile::write(void const*, unsigned int)>
	}
    c502:	4770      	bx	lr

0000c504 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
    c504:	6c83      	ldr	r3, [r0, #72]	; 0x48
    c506:	b113      	cbz	r3, c50e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
    c508:	4618      	mov	r0, r3
    c50a:	f004 b8a9 	b.w	10660 <FatFile::write(void const*, unsigned int)>
    c50e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    c510:	b108      	cbz	r0, c516 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
    c512:	f002 b979 	b.w	e808 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
    c516:	4770      	bx	lr

0000c518 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
    c518:	b500      	push	{lr}
    return m_fFile ? m_fFile->write(buf, count) :
    c51a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    c51c:	b083      	sub	sp, #12
    c51e:	f88d 1007 	strb.w	r1, [sp, #7]
    c522:	b143      	cbz	r3, c536 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
    c524:	2201      	movs	r2, #1
    c526:	f10d 0107 	add.w	r1, sp, #7
    c52a:	4618      	mov	r0, r3
    c52c:	f004 f898 	bl	10660 <FatFile::write(void const*, unsigned int)>
  }
    c530:	b003      	add	sp, #12
    c532:	f85d fb04 	ldr.w	pc, [sp], #4
    c536:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    c538:	2800      	cmp	r0, #0
    c53a:	d0f9      	beq.n	c530 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
    c53c:	2201      	movs	r2, #1
    c53e:	f10d 0107 	add.w	r1, sp, #7
    c542:	f002 f961 	bl	e808 <ExFatFile::write(void const*, unsigned int)>
    c546:	b003      	add	sp, #12
    c548:	f85d fb04 	ldr.w	pc, [sp], #4

0000c54c <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
    c54c:	798a      	ldrb	r2, [r1, #6]
    c54e:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
    c552:	061b      	lsls	r3, r3, #24
    c554:	d422      	bmi.n	c59c <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    c556:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
    c55a:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    c55c:	794b      	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
    c55e:	b085      	sub	sp, #20
    return m_fFile ?
    c560:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    c562:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
    c564:	790d      	ldrb	r5, [r1, #4]
    c566:	788e      	ldrb	r6, [r1, #2]
    c568:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
    c56a:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
    c56c:	7809      	ldrb	r1, [r1, #0]
    c56e:	b14c      	cbz	r4, c584 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
    c570:	4620      	mov	r0, r4
    c572:	9601      	str	r6, [sp, #4]
    c574:	9500      	str	r5, [sp, #0]
    c576:	e9cd 7102 	strd	r7, r1, [sp, #8]
    c57a:	2102      	movs	r1, #2
    c57c:	f003 ffca 	bl	10514 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
    c580:	b005      	add	sp, #20
    c582:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c584:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
    c586:	2800      	cmp	r0, #0
    c588:	d0fa      	beq.n	c580 <SDFile::setCreateTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
    c58a:	9601      	str	r6, [sp, #4]
    c58c:	9500      	str	r5, [sp, #0]
    c58e:	e9cd 7102 	strd	r7, r1, [sp, #8]
    c592:	2102      	movs	r1, #2
    c594:	f002 f80a 	bl	e5ac <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    c598:	b005      	add	sp, #20
    c59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
    c59c:	2000      	movs	r0, #0
	}
    c59e:	4770      	bx	lr

0000c5a0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
    c5a0:	6c83      	ldr	r3, [r0, #72]	; 0x48
    c5a2:	b153      	cbz	r3, c5ba <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
    c5a4:	7818      	ldrb	r0, [r3, #0]
    c5a6:	f010 0008 	ands.w	r0, r0, #8
    c5aa:	d00d      	beq.n	c5c8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
    c5ac:	69d8      	ldr	r0, [r3, #28]
    c5ae:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
    c5b0:	1ac0      	subs	r0, r0, r3
    c5b2:	bf48      	it	mi
    c5b4:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
    c5b8:	4770      	bx	lr
    c5ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    c5bc:	b1a3      	cbz	r3, c5e8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
    c5be:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
    c5c2:	f010 0008 	ands.w	r0, r0, #8
    c5c6:	d100      	bne.n	c5ca <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
    c5c8:	4770      	bx	lr
    c5ca:	6918      	ldr	r0, [r3, #16]
    c5cc:	6819      	ldr	r1, [r3, #0]
    c5ce:	695a      	ldr	r2, [r3, #20]
    c5d0:	1a40      	subs	r0, r0, r1
    c5d2:	685b      	ldr	r3, [r3, #4]
    c5d4:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    c5d8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    c5dc:	f173 0300 	sbcs.w	r3, r3, #0
    c5e0:	d3f2      	bcc.n	c5c8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
    c5e2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c5e6:	4770      	bx	lr
    c5e8:	4618      	mov	r0, r3
    return BaseFile::available();
    c5ea:	e7ed      	b.n	c5c8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

0000c5ec <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
    c5ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c5ee:	b153      	cbz	r3, c606 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
    c5f0:	7818      	ldrb	r0, [r3, #0]
    c5f2:	f010 0008 	ands.w	r0, r0, #8
    c5f6:	d00d      	beq.n	c614 <SDFile::available()+0x28>
    c5f8:	69d8      	ldr	r0, [r3, #28]
    c5fa:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
    c5fc:	1ac0      	subs	r0, r0, r3
    c5fe:	bf48      	it	mi
    c600:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
    c604:	4770      	bx	lr
    c606:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
    c608:	b1a3      	cbz	r3, c634 <SDFile::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
    c60a:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
    c60e:	f010 0008 	ands.w	r0, r0, #8
    c612:	d100      	bne.n	c616 <SDFile::available()+0x2a>
	}
    c614:	4770      	bx	lr
    c616:	6918      	ldr	r0, [r3, #16]
    c618:	6819      	ldr	r1, [r3, #0]
    c61a:	695a      	ldr	r2, [r3, #20]
    c61c:	1a40      	subs	r0, r0, r1
    c61e:	685b      	ldr	r3, [r3, #4]
    c620:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
    c624:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    c628:	f173 0300 	sbcs.w	r3, r3, #0
    c62c:	d3f2      	bcc.n	c614 <SDFile::available()+0x28>
    c62e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c632:	4770      	bx	lr
    c634:	4618      	mov	r0, r3
		return sdfatfile.available();
    c636:	e7ed      	b.n	c614 <SDFile::available()+0x28>

0000c638 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
    c638:	b500      	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
    c63a:	6900      	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
    c63c:	b083      	sub	sp, #12
    c63e:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
    c642:	b160      	cbz	r0, c65e <File::write(unsigned char)+0x26>
    c644:	6803      	ldr	r3, [r0, #0]
    c646:	4a10      	ldr	r2, [pc, #64]	; (c688 <File::write(unsigned char)+0x50>)
    c648:	68db      	ldr	r3, [r3, #12]
    c64a:	4293      	cmp	r3, r2
    c64c:	d115      	bne.n	c67a <File::write(unsigned char)+0x42>
    return m_fFile ? m_fFile->write(buf, count) :
    c64e:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c650:	b143      	cbz	r3, c664 <File::write(unsigned char)+0x2c>
    c652:	2201      	movs	r2, #1
    c654:	f10d 0107 	add.w	r1, sp, #7
    c658:	4618      	mov	r0, r3
    c65a:	f004 f801 	bl	10660 <FatFile::write(void const*, unsigned int)>
	}
    c65e:	b003      	add	sp, #12
    c660:	f85d fb04 	ldr.w	pc, [sp], #4
    c664:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
    c666:	2800      	cmp	r0, #0
    c668:	d0f9      	beq.n	c65e <File::write(unsigned char)+0x26>
    c66a:	2201      	movs	r2, #1
    c66c:	f10d 0107 	add.w	r1, sp, #7
    c670:	f002 f8ca 	bl	e808 <ExFatFile::write(void const*, unsigned int)>
    c674:	b003      	add	sp, #12
    c676:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
    c67a:	2201      	movs	r2, #1
    c67c:	f10d 0107 	add.w	r1, sp, #7
    c680:	4798      	blx	r3
	}
    c682:	b003      	add	sp, #12
    c684:	f85d fb04 	ldr.w	pc, [sp], #4
    c688:	0000c4f1 	.word	0x0000c4f1

0000c68c <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
    c68c:	b538      	push	{r3, r4, r5, lr}
    c68e:	4604      	mov	r4, r0
    c690:	4b0c      	ldr	r3, [pc, #48]	; (c6c4 <SDFile::~SDFile()+0x38>)
		if (filename) {
    c692:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
    c694:	6023      	str	r3, [r4, #0]
		if (filename) {
    c696:	b118      	cbz	r0, c6a0 <SDFile::~SDFile()+0x14>
			free(filename);
    c698:	f013 ff28 	bl	204ec <free>
			filename = nullptr;
    c69c:	2300      	movs	r3, #0
    c69e:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    c6a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    c6a2:	f104 0518 	add.w	r5, r4, #24
    c6a6:	b14b      	cbz	r3, c6bc <SDFile::~SDFile()+0x30>
    c6a8:	4628      	mov	r0, r5
    c6aa:	f005 fc71 	bl	11f90 <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
    c6ae:	4b06      	ldr	r3, [pc, #24]	; (c6c8 <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() {close();}
    c6b0:	4628      	mov	r0, r5
    c6b2:	60a3      	str	r3, [r4, #8]
    c6b4:	f005 fc6c 	bl	11f90 <FsBaseFile::close()>
	}
    c6b8:	4620      	mov	r0, r4
    c6ba:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    c6bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d1f2      	bne.n	c6a8 <SDFile::~SDFile()+0x1c>
    c6c2:	e7f4      	b.n	c6ae <SDFile::~SDFile()+0x22>
    c6c4:	20003e1c 	.word	0x20003e1c
    c6c8:	20003c3c 	.word	0x20003c3c

0000c6cc <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
    c6cc:	b538      	push	{r3, r4, r5, lr}
    c6ce:	4604      	mov	r4, r0
    c6d0:	4b0e      	ldr	r3, [pc, #56]	; (c70c <SDFile::~SDFile()+0x40>)
		if (filename) {
    c6d2:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
    c6d4:	6023      	str	r3, [r4, #0]
		if (filename) {
    c6d6:	b118      	cbz	r0, c6e0 <SDFile::~SDFile()+0x14>
			free(filename);
    c6d8:	f013 ff08 	bl	204ec <free>
			filename = nullptr;
    c6dc:	2300      	movs	r3, #0
    c6de:	65a3      	str	r3, [r4, #88]	; 0x58
    c6e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
    c6e2:	f104 0518 	add.w	r5, r4, #24
    c6e6:	b16b      	cbz	r3, c704 <SDFile::~SDFile()+0x38>
    c6e8:	4628      	mov	r0, r5
    c6ea:	f005 fc51 	bl	11f90 <FsBaseFile::close()>
    c6ee:	4b08      	ldr	r3, [pc, #32]	; (c710 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() {close();}
    c6f0:	4628      	mov	r0, r5
    c6f2:	60a3      	str	r3, [r4, #8]
    c6f4:	f005 fc4c 	bl	11f90 <FsBaseFile::close()>
	}
    c6f8:	4620      	mov	r0, r4
    c6fa:	215c      	movs	r1, #92	; 0x5c
    c6fc:	f00f fb30 	bl	1bd60 <operator delete(void*, unsigned int)>
    c700:	4620      	mov	r0, r4
    c702:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    c704:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c706:	2b00      	cmp	r3, #0
    c708:	d1ee      	bne.n	c6e8 <SDFile::~SDFile()+0x1c>
    c70a:	e7f0      	b.n	c6ee <SDFile::~SDFile()+0x22>
    c70c:	20003e1c 	.word	0x20003e1c
    c710:	20003c3c 	.word	0x20003c3c

0000c714 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
    c714:	b430      	push	{r4, r5}
    c716:	9c02      	ldr	r4, [sp, #8]
    c718:	4611      	mov	r1, r2
    c71a:	469c      	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
    c71c:	b134      	cbz	r4, c72c <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
    c71e:	2c01      	cmp	r4, #1
    c720:	d01c      	beq.n	c75c <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
    c722:	2c02      	cmp	r4, #2
    c724:	d00e      	beq.n	c744 <SDFile::seek(unsigned long long, int)+0x30>
	}
    c726:	2000      	movs	r0, #0
    c728:	bc30      	pop	{r4, r5}
    c72a:	4770      	bx	lr
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    c72c:	6d05      	ldr	r5, [r0, #80]	; 0x50
    c72e:	b1f5      	cbz	r5, c76e <SDFile::seek(unsigned long long, int)+0x5a>
    c730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c734:	4293      	cmp	r3, r2
    c736:	eb74 040c 	sbcs.w	r4, r4, ip
    c73a:	d3f4      	bcc.n	c726 <SDFile::seek(unsigned long long, int)+0x12>
    c73c:	4628      	mov	r0, r5
    c73e:	bc30      	pop	{r4, r5}
    c740:	f003 bdb2 	b.w	102a8 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() :
    c744:	6d02      	ldr	r2, [r0, #80]	; 0x50
    c746:	b30a      	cbz	r2, c78c <SDFile::seek(unsigned long long, int)+0x78>
    c748:	69d3      	ldr	r3, [r2, #28]
    return seekSet(fileSize() + offset);
    c74a:	1859      	adds	r1, r3, r1
    c74c:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    c750:	2b00      	cmp	r3, #0
    c752:	d1e8      	bne.n	c726 <SDFile::seek(unsigned long long, int)+0x12>
    c754:	4610      	mov	r0, r2
    c756:	bc30      	pop	{r4, r5}
    c758:	f003 bda6 	b.w	102a8 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->curPosition() :
    c75c:	6d02      	ldr	r2, [r0, #80]	; 0x50
    c75e:	b162      	cbz	r2, c77a <SDFile::seek(unsigned long long, int)+0x66>
    c760:	6953      	ldr	r3, [r2, #20]
    return seekSet(curPosition() + offset);
    c762:	1859      	adds	r1, r3, r1
    c764:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    c768:	2b00      	cmp	r3, #0
    c76a:	d1dc      	bne.n	c726 <SDFile::seek(unsigned long long, int)+0x12>
    c76c:	e7f2      	b.n	c754 <SDFile::seek(unsigned long long, int)+0x40>
    c76e:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->seekSet(pos) : false;
    c770:	2800      	cmp	r0, #0
    c772:	d0d8      	beq.n	c726 <SDFile::seek(unsigned long long, int)+0x12>
    c774:	bc30      	pop	{r4, r5}
    c776:	f001 b95b 	b.w	da30 <ExFatFile::seekSet(unsigned long long)>
    c77a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
    c77c:	2800      	cmp	r0, #0
    c77e:	d0d2      	beq.n	c726 <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(curPosition() + offset);
    c780:	e9d0 2300 	ldrd	r2, r3, [r0]
    c784:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
    c786:	eb4c 0303 	adc.w	r3, ip, r3
    c78a:	e7f3      	b.n	c774 <SDFile::seek(unsigned long long, int)+0x60>
    c78c:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
    c78e:	2800      	cmp	r0, #0
    c790:	d0c9      	beq.n	c726 <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(fileSize() + offset);
    c792:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    c796:	bc30      	pop	{r4, r5}
    c798:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
    c79a:	eb4c 0303 	adc.w	r3, ip, r3
    c79e:	f001 b947 	b.w	da30 <ExFatFile::seekSet(unsigned long long)>
    c7a2:	bf00      	nop

0000c7a4 <File::~File()>:
	virtual ~File() {
    c7a4:	b570      	push	{r4, r5, r6, lr}
    c7a6:	4b24      	ldr	r3, [pc, #144]	; (c838 <File::~File()+0x94>)
    c7a8:	4604      	mov	r4, r0
		if (f) dec_refcount();
    c7aa:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
    c7ac:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
    c7ae:	2d00      	cmp	r5, #0
    c7b0:	d032      	beq.n	c818 <File::~File()+0x74>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
    c7b2:	686e      	ldr	r6, [r5, #4]
    c7b4:	3e01      	subs	r6, #1
    c7b6:	606e      	str	r6, [r5, #4]
    c7b8:	bb76      	cbnz	r6, c818 <File::~File()+0x74>
			f->close();
    c7ba:	682b      	ldr	r3, [r5, #0]
    c7bc:	4a1f      	ldr	r2, [pc, #124]	; (c83c <File::~File()+0x98>)
    c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c7c0:	4293      	cmp	r3, r2
    c7c2:	d12f      	bne.n	c824 <File::~File()+0x80>
		if (filename) {
    c7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c7c6:	b110      	cbz	r0, c7ce <File::~File()+0x2a>
			free(filename);
    c7c8:	f013 fe90 	bl	204ec <free>
			filename = nullptr;
    c7cc:	65ae      	str	r6, [r5, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
    c7ce:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    c7d0:	b323      	cbz	r3, c81c <File::~File()+0x78>
			sdfatfile.close();
    c7d2:	f105 0018 	add.w	r0, r5, #24
    c7d6:	f005 fbdb 	bl	11f90 <FsBaseFile::close()>
			delete f;
    c7da:	6925      	ldr	r5, [r4, #16]
    c7dc:	b1e5      	cbz	r5, c818 <File::~File()+0x74>
    c7de:	682b      	ldr	r3, [r5, #0]
    c7e0:	4a17      	ldr	r2, [pc, #92]	; (c840 <File::~File()+0x9c>)
    c7e2:	685b      	ldr	r3, [r3, #4]
    c7e4:	4293      	cmp	r3, r2
    c7e6:	d124      	bne.n	c832 <File::~File()+0x8e>
	virtual ~SDFile(void) {
    c7e8:	4b16      	ldr	r3, [pc, #88]	; (c844 <File::~File()+0xa0>)
		if (filename) {
    c7ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    c7ec:	602b      	str	r3, [r5, #0]
		if (filename) {
    c7ee:	b118      	cbz	r0, c7f8 <File::~File()+0x54>
			free(filename);
    c7f0:	f013 fe7c 	bl	204ec <free>
			filename = nullptr;
    c7f4:	2300      	movs	r3, #0
    c7f6:	65ab      	str	r3, [r5, #88]	; 0x58
    c7f8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    c7fa:	f105 0618 	add.w	r6, r5, #24
    c7fe:	b1a3      	cbz	r3, c82a <File::~File()+0x86>
    c800:	4630      	mov	r0, r6
    c802:	f005 fbc5 	bl	11f90 <FsBaseFile::close()>
    c806:	4b10      	ldr	r3, [pc, #64]	; (c848 <File::~File()+0xa4>)
  ~FsBaseFile() {close();}
    c808:	4630      	mov	r0, r6
    c80a:	60ab      	str	r3, [r5, #8]
    c80c:	f005 fbc0 	bl	11f90 <FsBaseFile::close()>
	}
    c810:	215c      	movs	r1, #92	; 0x5c
    c812:	4628      	mov	r0, r5
    c814:	f00f faa4 	bl	1bd60 <operator delete(void*, unsigned int)>
	}
    c818:	4620      	mov	r0, r4
    c81a:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    c81c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    c81e:	2b00      	cmp	r3, #0
    c820:	d1d7      	bne.n	c7d2 <File::~File()+0x2e>
    c822:	e7da      	b.n	c7da <File::~File()+0x36>
			f->close();
    c824:	4628      	mov	r0, r5
    c826:	4798      	blx	r3
    c828:	e7d7      	b.n	c7da <File::~File()+0x36>
    c82a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    c82c:	2b00      	cmp	r3, #0
    c82e:	d1e7      	bne.n	c800 <File::~File()+0x5c>
    c830:	e7e9      	b.n	c806 <File::~File()+0x62>
			delete f;
    c832:	4628      	mov	r0, r5
    c834:	4798      	blx	r3
    c836:	e7ef      	b.n	c818 <File::~File()+0x74>
    c838:	20003dbc 	.word	0x20003dbc
    c83c:	0000bfb9 	.word	0x0000bfb9
    c840:	0000c6cd 	.word	0x0000c6cd
    c844:	20003e1c 	.word	0x20003e1c
    c848:	20003c3c 	.word	0x20003c3c

0000c84c <File::~File()>:
	virtual ~File() {
    c84c:	b570      	push	{r4, r5, r6, lr}
    c84e:	4b26      	ldr	r3, [pc, #152]	; (c8e8 <File::~File()+0x9c>)
    c850:	4604      	mov	r4, r0
		if (f) dec_refcount();
    c852:	6905      	ldr	r5, [r0, #16]
	virtual ~File() {
    c854:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
    c856:	2d00      	cmp	r5, #0
    c858:	d032      	beq.n	c8c0 <File::~File()+0x74>
		if (--(f->refcount) == 0) {
    c85a:	686e      	ldr	r6, [r5, #4]
    c85c:	3e01      	subs	r6, #1
    c85e:	606e      	str	r6, [r5, #4]
    c860:	bb76      	cbnz	r6, c8c0 <File::~File()+0x74>
			f->close();
    c862:	682b      	ldr	r3, [r5, #0]
    c864:	4a21      	ldr	r2, [pc, #132]	; (c8ec <File::~File()+0xa0>)
    c866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c868:	4293      	cmp	r3, r2
    c86a:	d133      	bne.n	c8d4 <File::~File()+0x88>
		if (filename) {
    c86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c86e:	b110      	cbz	r0, c876 <File::~File()+0x2a>
			free(filename);
    c870:	f013 fe3c 	bl	204ec <free>
			filename = nullptr;
    c874:	65ae      	str	r6, [r5, #88]	; 0x58
    c876:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    c878:	b343      	cbz	r3, c8cc <File::~File()+0x80>
			sdfatfile.close();
    c87a:	f105 0018 	add.w	r0, r5, #24
    c87e:	f005 fb87 	bl	11f90 <FsBaseFile::close()>
			delete f;
    c882:	6925      	ldr	r5, [r4, #16]
    c884:	b1e5      	cbz	r5, c8c0 <File::~File()+0x74>
    c886:	682b      	ldr	r3, [r5, #0]
    c888:	4a19      	ldr	r2, [pc, #100]	; (c8f0 <File::~File()+0xa4>)
    c88a:	685b      	ldr	r3, [r3, #4]
    c88c:	4293      	cmp	r3, r2
    c88e:	d128      	bne.n	c8e2 <File::~File()+0x96>
	virtual ~SDFile(void) {
    c890:	4b18      	ldr	r3, [pc, #96]	; (c8f4 <File::~File()+0xa8>)
		if (filename) {
    c892:	6da8      	ldr	r0, [r5, #88]	; 0x58
	virtual ~SDFile(void) {
    c894:	602b      	str	r3, [r5, #0]
		if (filename) {
    c896:	b118      	cbz	r0, c8a0 <File::~File()+0x54>
			free(filename);
    c898:	f013 fe28 	bl	204ec <free>
			filename = nullptr;
    c89c:	2300      	movs	r3, #0
    c89e:	65ab      	str	r3, [r5, #88]	; 0x58
    c8a0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
			sdfatfile.close();
    c8a2:	f105 0618 	add.w	r6, r5, #24
    c8a6:	b1c3      	cbz	r3, c8da <File::~File()+0x8e>
    c8a8:	4630      	mov	r0, r6
    c8aa:	f005 fb71 	bl	11f90 <FsBaseFile::close()>
    c8ae:	4b12      	ldr	r3, [pc, #72]	; (c8f8 <File::~File()+0xac>)
  ~FsBaseFile() {close();}
    c8b0:	4630      	mov	r0, r6
    c8b2:	60ab      	str	r3, [r5, #8]
    c8b4:	f005 fb6c 	bl	11f90 <FsBaseFile::close()>
	}
    c8b8:	215c      	movs	r1, #92	; 0x5c
    c8ba:	4628      	mov	r0, r5
    c8bc:	f00f fa50 	bl	1bd60 <operator delete(void*, unsigned int)>
	}
    c8c0:	4620      	mov	r0, r4
    c8c2:	2114      	movs	r1, #20
    c8c4:	f00f fa4c 	bl	1bd60 <operator delete(void*, unsigned int)>
    c8c8:	4620      	mov	r0, r4
    c8ca:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    c8cc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	d1d3      	bne.n	c87a <File::~File()+0x2e>
    c8d2:	e7d6      	b.n	c882 <File::~File()+0x36>
			f->close();
    c8d4:	4628      	mov	r0, r5
    c8d6:	4798      	blx	r3
    c8d8:	e7d3      	b.n	c882 <File::~File()+0x36>
    c8da:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    c8dc:	2b00      	cmp	r3, #0
    c8de:	d1e3      	bne.n	c8a8 <File::~File()+0x5c>
    c8e0:	e7e5      	b.n	c8ae <File::~File()+0x62>
			delete f;
    c8e2:	4628      	mov	r0, r5
    c8e4:	4798      	blx	r3
    c8e6:	e7eb      	b.n	c8c0 <File::~File()+0x74>
    c8e8:	20003dbc 	.word	0x20003dbc
    c8ec:	0000bfb9 	.word	0x0000bfb9
    c8f0:	0000c6cd 	.word	0x0000c6cd
    c8f4:	20003e1c 	.word	0x20003e1c
    c8f8:	20003c3c 	.word	0x20003c3c

0000c8fc <AudioSynthWaveformSine::update()>:
	if (magnitude) {
    c8fc:	6a03      	ldr	r3, [r0, #32]
{
    c8fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c902:	4605      	mov	r5, r0
	if (magnitude) {
    c904:	b933      	cbnz	r3, c914 <AudioSynthWaveformSine::update()+0x18>
	phase_accumulator += phase_increment * AUDIO_BLOCK_SAMPLES;
    c906:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
    c90a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
    c90e:	61ab      	str	r3, [r5, #24]
}
    c910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		block = allocate();
    c914:	f00d fd6e 	bl	1a3f4 <AudioStream::allocate()>
		if (block) {
    c918:	4606      	mov	r6, r0
    c91a:	2800      	cmp	r0, #0
    c91c:	d0f3      	beq.n	c906 <AudioSynthWaveformSine::update()+0xa>
			ph = phase_accumulator;
    c91e:	f100 0c02 	add.w	ip, r0, #2
				block->data[i] = multiply_32x32_rshift32(val1 + val2, magnitude);
    c922:	6a2f      	ldr	r7, [r5, #32]
    c924:	f500 7081 	add.w	r0, r0, #258	; 0x102
    c928:	4c13      	ldr	r4, [pc, #76]	; (c978 <AudioSynthWaveformSine::update()+0x7c>)
			inc = phase_increment;
    c92a:	e9d5 8106 	ldrd	r8, r1, [r5, #24]
			ph = phase_accumulator;
    c92e:	4642      	mov	r2, r8
				index = ph >> 24;
    c930:	ea4f 6912 	mov.w	r9, r2, lsr #24
				scale = (ph >> 8) & 0xFFFF;
    c934:	f3c2 2e0f 	ubfx	lr, r2, #8, #16
				val2 = AudioWaveformSine[index+1];
    c938:	f109 0a01 	add.w	sl, r9, #1
				val1 *= 0x10000 - scale;
    c93c:	f5ce 3380 	rsb	r3, lr, #65536	; 0x10000
    c940:	f934 9019 	ldrsh.w	r9, [r4, r9, lsl #1]
    c944:	fb09 f303 	mul.w	r3, r9, r3
				val2 *= scale;
    c948:	f934 901a 	ldrsh.w	r9, [r4, sl, lsl #1]
				block->data[i] = multiply_32x32_rshift32(val1 + val2, magnitude);
    c94c:	fb0e 3309 	mla	r3, lr, r9, r3
	asm volatile("smmul %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    c950:	fb53 f307 	smmul	r3, r3, r7
    c954:	f82c 3f02 	strh.w	r3, [ip, #2]!
			for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    c958:	4560      	cmp	r0, ip
				ph += inc;
    c95a:	440a      	add	r2, r1
			for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    c95c:	d1e8      	bne.n	c930 <AudioSynthWaveformSine::update()+0x34>
				ph += inc;
    c95e:	eb08 13c1 	add.w	r3, r8, r1, lsl #7
			transmit(block);
    c962:	4628      	mov	r0, r5
    c964:	4631      	mov	r1, r6
    c966:	2200      	movs	r2, #0
			phase_accumulator = ph;
    c968:	61ab      	str	r3, [r5, #24]
			transmit(block);
    c96a:	f00d fdc1 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
			release(block);
    c96e:	4630      	mov	r0, r6
}
    c970:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			release(block);
    c974:	f00d bd94 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
    c978:	20002a00 	.word	0x20002a00

0000c97c <AudioSynthWaveformSineModulated::update()>:


#if defined(__ARM_ARCH_7EM__)

void AudioSynthWaveformSineModulated::update(void)
{
    c97c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c980:	4607      	mov	r7, r0
	audio_block_t *block, *modinput;
	uint32_t i, ph, inc, index, scale;
	int32_t val1, val2;
	int16_t mod;

	modinput = receiveReadOnly();
    c982:	2100      	movs	r1, #0
    c984:	f00d fdd8 	bl	1a538 <AudioStream::receiveReadOnly(unsigned int)>
    c988:	4681      	mov	r9, r0
	ph = phase_accumulator;
	inc = phase_increment;
    c98a:	e9d7 4606 	ldrd	r4, r6, [r7, #24]
	block = allocate();
    c98e:	f00d fd31 	bl	1a3f4 <AudioStream::allocate()>
	if (!block) {
    c992:	2800      	cmp	r0, #0
    c994:	d058      	beq.n	ca48 <AudioSynthWaveformSineModulated::update()+0xcc>
			ph += phase_increment * AUDIO_BLOCK_SAMPLES;
		}
		phase_accumulator = ph;
		return;
	}
	if (modinput) {
    c996:	4680      	mov	r8, r0
    c998:	f1b9 0f00 	cmp.w	r9, #0
    c99c:	d032      	beq.n	ca04 <AudioSynthWaveformSineModulated::update()+0x88>
    c99e:	1c82      	adds	r2, r0, #2
			val2 = AudioWaveformSine[index+1];
			scale = (ph >> 8) & 0xFFFF;
			val2 *= scale;
			val1 *= 0x10000 - scale;
			//block->data[i] = (((val1 + val2) >> 16) * magnitude) >> 16;
			block->data[i] = multiply_32x32_rshift32(val1 + val2, magnitude);
    c9a0:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
    c9a4:	f109 0102 	add.w	r1, r9, #2
    c9a8:	f500 7081 	add.w	r0, r0, #258	; 0x102
    c9ac:	4d34      	ldr	r5, [pc, #208]	; (ca80 <AudioSynthWaveformSineModulated::update()+0x104>)
			index = ph >> 24;
    c9ae:	0e23      	lsrs	r3, r4, #24
			scale = (ph >> 8) & 0xFFFF;
    c9b0:	f3c4 2e0f 	ubfx	lr, r4, #8, #16
			val1 *= 0x10000 - scale;
    c9b4:	f935 b013 	ldrsh.w	fp, [r5, r3, lsl #1]
			val2 = AudioWaveformSine[index+1];
    c9b8:	f103 0a01 	add.w	sl, r3, #1
			val1 *= 0x10000 - scale;
    c9bc:	f5ce 3380 	rsb	r3, lr, #65536	; 0x10000
			val2 *= scale;
    c9c0:	f935 a01a 	ldrsh.w	sl, [r5, sl, lsl #1]
			val1 *= 0x10000 - scale;
    c9c4:	fb0b f303 	mul.w	r3, fp, r3
			block->data[i] = multiply_32x32_rshift32(val1 + val2, magnitude);
    c9c8:	fb0e 330a 	mla	r3, lr, sl, r3
    c9cc:	fb53 f30c 	smmul	r3, r3, ip
    c9d0:	f822 3f02 	strh.w	r3, [r2, #2]!
			// -32768 = no phase increment
			// 32767 = double phase increment
			mod = modinput->data[i];
			ph += inc + (multiply_32x32_rshift32(inc, mod << 16) << 1);
    c9d4:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
    c9d8:	041b      	lsls	r3, r3, #16
    c9da:	fb56 f303 	smmul	r3, r6, r3
    c9de:	eb06 0343 	add.w	r3, r6, r3, lsl #1
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    c9e2:	4290      	cmp	r0, r2
			ph += inc + (multiply_32x32_rshift32(inc, mod << 16) << 1);
    c9e4:	441c      	add	r4, r3
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    c9e6:	d1e2      	bne.n	c9ae <AudioSynthWaveformSineModulated::update()+0x32>
			//ph += inc + (((int64_t)inc * (mod << 16)) >> 31);
		}
		release(modinput);
    c9e8:	4648      	mov	r0, r9
    c9ea:	f00d fd59 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
			block->data[i] = multiply_32x32_rshift32(val1 + val2, magnitude);
			ph += inc;
		}
	}
	phase_accumulator = ph;
	transmit(block);
    c9ee:	4638      	mov	r0, r7
    c9f0:	4641      	mov	r1, r8
	phase_accumulator = ph;
    c9f2:	61bc      	str	r4, [r7, #24]
	transmit(block);
    c9f4:	2200      	movs	r2, #0
    c9f6:	f00d fd7b 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(block);
    c9fa:	4640      	mov	r0, r8
}
    c9fc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	release(block);
    ca00:	f00d bd4e 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
		inc = phase_increment;
    ca04:	e9d7 e606 	ldrd	lr, r6, [r7, #24]
			block->data[i] = multiply_32x32_rshift32(val1 + val2, magnitude);
    ca08:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    ca0a:	1c81      	adds	r1, r0, #2
    ca0c:	f500 7c81 	add.w	ip, r0, #258	; 0x102
		ph = phase_accumulator;
    ca10:	4672      	mov	r2, lr
    ca12:	4d1b      	ldr	r5, [pc, #108]	; (ca80 <AudioSynthWaveformSineModulated::update()+0x104>)
			index = ph >> 24;
    ca14:	ea4f 6912 	mov.w	r9, r2, lsr #24
			scale = (ph >> 8) & 0xFFFF;
    ca18:	f3c2 200f 	ubfx	r0, r2, #8, #16
			val2 = AudioWaveformSine[index+1];
    ca1c:	f109 0a01 	add.w	sl, r9, #1
			val1 *= 0x10000 - scale;
    ca20:	f5c0 3380 	rsb	r3, r0, #65536	; 0x10000
    ca24:	f935 9019 	ldrsh.w	r9, [r5, r9, lsl #1]
    ca28:	fb09 f303 	mul.w	r3, r9, r3
			val2 *= scale;
    ca2c:	f935 901a 	ldrsh.w	r9, [r5, sl, lsl #1]
			block->data[i] = multiply_32x32_rshift32(val1 + val2, magnitude);
    ca30:	fb00 3309 	mla	r3, r0, r9, r3
    ca34:	fb53 f304 	smmul	r3, r3, r4
    ca38:	f821 3f02 	strh.w	r3, [r1, #2]!
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ca3c:	458c      	cmp	ip, r1
			ph += inc;
    ca3e:	4432      	add	r2, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ca40:	d1e8      	bne.n	ca14 <AudioSynthWaveformSineModulated::update()+0x98>
			ph += inc;
    ca42:	eb0e 14c6 	add.w	r4, lr, r6, lsl #7
    ca46:	e7d2      	b.n	c9ee <AudioSynthWaveformSineModulated::update()+0x72>
		if (modinput) {
    ca48:	f1b9 0f00 	cmp.w	r9, #0
    ca4c:	d013      	beq.n	ca76 <AudioSynthWaveformSineModulated::update()+0xfa>
    ca4e:	f109 0202 	add.w	r2, r9, #2
    ca52:	f509 7181 	add.w	r1, r9, #258	; 0x102
				ph += inc + (multiply_32x32_rshift32(inc, mod << 16) << 1);
    ca56:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
    ca5a:	041b      	lsls	r3, r3, #16
    ca5c:	fb56 f303 	smmul	r3, r6, r3
    ca60:	eb06 0343 	add.w	r3, r6, r3, lsl #1
			for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ca64:	4291      	cmp	r1, r2
				ph += inc + (multiply_32x32_rshift32(inc, mod << 16) << 1);
    ca66:	441c      	add	r4, r3
			for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ca68:	d1f5      	bne.n	ca56 <AudioSynthWaveformSineModulated::update()+0xda>
			release(modinput);
    ca6a:	4648      	mov	r0, r9
    ca6c:	f00d fd18 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		phase_accumulator = ph;
    ca70:	61bc      	str	r4, [r7, #24]
}
    ca72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ph += phase_increment * AUDIO_BLOCK_SAMPLES;
    ca76:	69fb      	ldr	r3, [r7, #28]
    ca78:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
    ca7c:	e7f8      	b.n	ca70 <AudioSynthWaveformSineModulated::update()+0xf4>
    ca7e:	bf00      	nop
    ca80:	20002a00 	.word	0x20002a00

0000ca84 <AudioSynthNoiseWhite::update()>:

// Park-Miller-Carta Pseudo-Random Number Generator
// http://www.firstpr.com.au/dsp/rand31/

void AudioSynthNoiseWhite::update(void)
{
    ca84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *block;
	uint32_t *p, *end;
	int32_t n1, n2, gain;
	uint32_t lo, hi;

	gain = level;
    ca88:	6986      	ldr	r6, [r0, #24]
	if (gain == 0) return;
    ca8a:	b90e      	cbnz	r6, ca90 <AudioSynthNoiseWhite::update()+0xc>
#endif
	} while (p < end);
	seed = lo;
	transmit(block);
	release(block);
}
    ca8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	block = allocate();
    ca90:	4604      	mov	r4, r0
    ca92:	f00d fcaf 	bl	1a3f4 <AudioStream::allocate()>
	if (!block) return;
    ca96:	4605      	mov	r5, r0
    ca98:	2800      	cmp	r0, #0
    ca9a:	d0f7      	beq.n	ca8c <AudioSynthNoiseWhite::update()+0x8>
	lo = seed;
    ca9c:	f100 010c 	add.w	r1, r0, #12
    caa0:	f500 7c86 	add.w	ip, r0, #268	; 0x10c
    caa4:	69e3      	ldr	r3, [r4, #28]
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    caa6:	f244 12a7 	movw	r2, #16807	; 0x41a7
		lo += (hi & 0x7FFF) << 16;
    caaa:	4829      	ldr	r0, [pc, #164]	; (cb50 <AudioSynthNoiseWhite::update()+0xcc>)
    caac:	fb12 fe13 	smulbt	lr, r2, r3
		lo = 16807 * (lo & 0xFFFF);
    cab0:	b29b      	uxth	r3, r3
		lo += (hi & 0x7FFF) << 16;
    cab2:	ea00 470e 	and.w	r7, r0, lr, lsl #16
		lo = 16807 * (lo & 0xFFFF);
    cab6:	fb02 f303 	mul.w	r3, r2, r3
    caba:	eb03 33de 	add.w	r3, r3, lr, lsr #15
		lo += hi >> 15;
    cabe:	441f      	add	r7, r3
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    cac0:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
    cac4:	eb03 73d7 	add.w	r3, r3, r7, lsr #31
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cac8:	fb36 f703 	smulwb	r7, r6, r3
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cacc:	fb12 f813 	smulbt	r8, r2, r3
		lo += (hi & 0x7FFF) << 16;
    cad0:	ea00 4e08 	and.w	lr, r0, r8, lsl #16
		lo = 16807 * (lo & 0xFFFF);
    cad4:	b29b      	uxth	r3, r3
		lo += hi >> 15;
    cad6:	eb0e 3ed8 	add.w	lr, lr, r8, lsr #15
    cada:	fb02 ee03 	mla	lr, r2, r3, lr
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    cade:	f02e 4300 	bic.w	r3, lr, #2147483648	; 0x80000000
    cae2:	eb03 73de 	add.w	r3, r3, lr, lsr #31
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cae6:	fb36 fe03 	smulwb	lr, r6, r3
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    caea:	eac7 470e 	pkhbt	r7, r7, lr, lsl #16
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    caee:	fb12 f813 	smulbt	r8, r2, r3
		lo += (hi & 0x7FFF) << 16;
    caf2:	ea00 4e08 	and.w	lr, r0, r8, lsl #16
		lo = 16807 * (lo & 0xFFFF);
    caf6:	b29b      	uxth	r3, r3
		lo += hi >> 15;
    caf8:	eb0e 3ed8 	add.w	lr, lr, r8, lsr #15
    cafc:	fb02 ee03 	mla	lr, r2, r3, lr
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    cb00:	f02e 4300 	bic.w	r3, lr, #2147483648	; 0x80000000
    cb04:	eb03 73de 	add.w	r3, r3, lr, lsr #31
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cb08:	fb36 f803 	smulwb	r8, r6, r3
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cb0c:	fb12 f913 	smulbt	r9, r2, r3
		lo += (hi & 0x7FFF) << 16;
    cb10:	ea00 4e09 	and.w	lr, r0, r9, lsl #16
		lo = 16807 * (lo & 0xFFFF);
    cb14:	b29b      	uxth	r3, r3
		lo += hi >> 15;
    cb16:	eb0e 3ed9 	add.w	lr, lr, r9, lsr #15
    cb1a:	fb02 ee03 	mla	lr, r2, r3, lr
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    cb1e:	f02e 4300 	bic.w	r3, lr, #2147483648	; 0x80000000
    cb22:	eb03 73de 	add.w	r3, r3, lr, lsr #31
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cb26:	fb36 fe03 	smulwb	lr, r6, r3
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    cb2a:	eac8 480e 	pkhbt	r8, r8, lr, lsl #16
		*p++ = val2;
    cb2e:	e941 7802 	strd	r7, r8, [r1, #-8]
	} while (p < end);
    cb32:	3108      	adds	r1, #8
    cb34:	4561      	cmp	r1, ip
    cb36:	d1b9      	bne.n	caac <AudioSynthNoiseWhite::update()+0x28>
	transmit(block);
    cb38:	4620      	mov	r0, r4
    cb3a:	4629      	mov	r1, r5
	seed = lo;
    cb3c:	61e3      	str	r3, [r4, #28]
	transmit(block);
    cb3e:	2200      	movs	r2, #0
    cb40:	f00d fcd6 	bl	1a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(block);
    cb44:	4628      	mov	r0, r5
}
    cb46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	release(block);
    cb4a:	f00d bca9 	b.w	1a4a0 <AudioStream::release(audio_block_struct*)>
    cb4e:	bf00      	nop
    cb50:	7fff0000 	.word	0x7fff0000

0000cb54 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    cb54:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    cb58:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    cb5a:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    cb5e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    cb60:	d101      	bne.n	cb66 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    cb62:	6883      	ldr	r3, [r0, #8]
    cb64:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    cb66:	f00d be9f 	b.w	1a8a8 <EventResponder::triggerEventNotImmediate()>
    cb6a:	bf00      	nop

0000cb6c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    cb6c:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cb6e:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    cb70:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    cb74:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    cb76:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    cb78:	b1a3      	cbz	r3, cba4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    cb7a:	b321      	cbz	r1, cbc6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    cb7c:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    cb80:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    cb82:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    cb84:	6f25      	ldr	r5, [r4, #112]	; 0x70
    cb86:	07af      	lsls	r7, r5, #30
    cb88:	d407      	bmi.n	cb9a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    cb8a:	4615      	mov	r5, r2
				count_read--;
    cb8c:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    cb8e:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    cb90:	b11a      	cbz	r2, cb9a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    cb92:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    cb96:	462a      	mov	r2, r5
    cb98:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    cb9a:	6965      	ldr	r5, [r4, #20]
    cb9c:	07ed      	lsls	r5, r5, #31
    cb9e:	d5f1      	bpl.n	cb84 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    cba0:	2b00      	cmp	r3, #0
    cba2:	d1ea      	bne.n	cb7a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    cba4:	b16e      	cbz	r6, cbc2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    cba6:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    cba8:	6f19      	ldr	r1, [r3, #112]	; 0x70
    cbaa:	0789      	lsls	r1, r1, #30
    cbac:	d4fa      	bmi.n	cba4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    cbae:	4611      	mov	r1, r2
			count_read--;
    cbb0:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    cbb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    cbb4:	2a00      	cmp	r2, #0
    cbb6:	d0f5      	beq.n	cba4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    cbb8:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    cbbc:	460a      	mov	r2, r1
	while (count_read) {
    cbbe:	2e00      	cmp	r6, #0
    cbc0:	d1f1      	bne.n	cba6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    cbc2:	bcf0      	pop	{r4, r5, r6, r7}
    cbc4:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    cbc6:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    cbca:	e7d9      	b.n	cb80 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

0000cbcc <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    cbcc:	4b32      	ldr	r3, [pc, #200]	; (cc98 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    cbce:	4933      	ldr	r1, [pc, #204]	; (cc9c <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    cbd0:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    cbd2:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    cbd6:	7920      	ldrb	r0, [r4, #4]
    cbd8:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    cbda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    cbdc:	f895 c004 	ldrb.w	ip, [r5, #4]
    cbe0:	f881 c01c 	strb.w	ip, [r1, #28]
    cbe4:	7708      	strb	r0, [r1, #28]
    cbe6:	b152      	cbz	r2, cbfe <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    cbe8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    cbec:	d323      	bcc.n	cc36 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    cbee:	492c      	ldr	r1, [pc, #176]	; (cca0 <_spi_dma_rxISR0()+0xd4>)
    cbf0:	4411      	add	r1, r2
		DMA_SERQ = channel;
    cbf2:	4a2a      	ldr	r2, [pc, #168]	; (cc9c <_spi_dma_rxISR0()+0xd0>)
    cbf4:	6419      	str	r1, [r3, #64]	; 0x40
    cbf6:	76d0      	strb	r0, [r2, #27]
    cbf8:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    cbfc:	bd30      	pop	{r4, r5, pc}
    cbfe:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    cc00:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    cc02:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    cc04:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    cc06:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    cc0a:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    cc0c:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    cc0e:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    cc12:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    cc14:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    cc16:	6804      	ldr	r4, [r0, #0]
    cc18:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    cc1a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    cc1e:	4b21      	ldr	r3, [pc, #132]	; (cca4 <_spi_dma_rxISR0()+0xd8>)
    cc20:	429c      	cmp	r4, r3
    cc22:	d126      	bne.n	cc72 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    cc24:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    cc26:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    cc28:	2b02      	cmp	r3, #2
		_data = data;
    cc2a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    cc2c:	d126      	bne.n	cc7c <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    cc2e:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    cc30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    cc34:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    cc36:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    cc38:	8be9      	ldrh	r1, [r5, #30]
    cc3a:	0409      	lsls	r1, r1, #16
    cc3c:	d422      	bmi.n	cc84 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    cc3e:	b292      	uxth	r2, r2
    cc40:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    cc42:	6821      	ldr	r1, [r4, #0]
    cc44:	8bec      	ldrh	r4, [r5, #30]
    cc46:	b2a4      	uxth	r4, r4
    cc48:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    cc4a:	8bcc      	ldrh	r4, [r1, #30]
    cc4c:	0424      	lsls	r4, r4, #16
    cc4e:	d505      	bpl.n	cc5c <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    cc50:	8bcc      	ldrh	r4, [r1, #30]
    cc52:	f3c2 0208 	ubfx	r2, r2, #0, #9
    cc56:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    cc5a:	4322      	orrs	r2, r4
    cc5c:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    cc5e:	8bca      	ldrh	r2, [r1, #30]
    cc60:	b292      	uxth	r2, r2
    cc62:	82ca      	strh	r2, [r1, #22]
    cc64:	2100      	movs	r1, #0
    cc66:	4a0d      	ldr	r2, [pc, #52]	; (cc9c <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    cc68:	6419      	str	r1, [r3, #64]	; 0x40
    cc6a:	76d0      	strb	r0, [r2, #27]
    cc6c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    cc70:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    cc72:	4623      	mov	r3, r4
    cc74:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    cc76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    cc7a:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    cc7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    cc80:	f00d be12 	b.w	1a8a8 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    cc84:	8be9      	ldrh	r1, [r5, #30]
    cc86:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    cc8a:	b292      	uxth	r2, r2
    cc8c:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    cc90:	ea41 010e 	orr.w	r1, r1, lr
    cc94:	83e9      	strh	r1, [r5, #30]
    cc96:	e7d4      	b.n	cc42 <_spi_dma_rxISR0()+0x76>
    cc98:	20008ab0 	.word	0x20008ab0
    cc9c:	400e8000 	.word	0x400e8000
    cca0:	ffff8001 	.word	0xffff8001
    cca4:	0000cb55 	.word	0x0000cb55

0000cca8 <_spi_dma_rxISR1()>:
	_dmaRX->clearInterrupt();
    cca8:	4b32      	ldr	r3, [pc, #200]	; (cd74 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    ccaa:	4933      	ldr	r1, [pc, #204]	; (cd78 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    ccac:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    ccae:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    ccb2:	7920      	ldrb	r0, [r4, #4]
    ccb4:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    ccb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    ccb8:	f895 c004 	ldrb.w	ip, [r5, #4]
    ccbc:	f881 c01c 	strb.w	ip, [r1, #28]
    ccc0:	7708      	strb	r0, [r1, #28]
    ccc2:	b152      	cbz	r2, ccda <_spi_dma_rxISR1()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    ccc4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    ccc8:	d323      	bcc.n	cd12 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    ccca:	492c      	ldr	r1, [pc, #176]	; (cd7c <_spi_dma_rxISR1()+0xd4>)
    cccc:	4411      	add	r1, r2
		DMA_SERQ = channel;
    ccce:	4a2a      	ldr	r2, [pc, #168]	; (cd78 <_spi_dma_rxISR1()+0xd0>)
    ccd0:	6419      	str	r1, [r3, #64]	; 0x40
    ccd2:	76d0      	strb	r0, [r2, #27]
    ccd4:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    ccd8:	bd30      	pop	{r4, r5, pc}
    ccda:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    ccdc:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    ccde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    cce0:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    cce2:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    cce6:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    cce8:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    ccea:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    ccee:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    ccf0:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    ccf2:	6804      	ldr	r4, [r0, #0]
    ccf4:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    ccf6:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    ccfa:	4b21      	ldr	r3, [pc, #132]	; (cd80 <_spi_dma_rxISR1()+0xd8>)
    ccfc:	429c      	cmp	r4, r3
    ccfe:	d126      	bne.n	cd4e <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    cd00:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    cd02:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    cd04:	2b02      	cmp	r3, #2
		_data = data;
    cd06:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    cd08:	d126      	bne.n	cd58 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    cd0a:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    cd0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    cd10:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    cd12:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    cd14:	8be9      	ldrh	r1, [r5, #30]
    cd16:	0409      	lsls	r1, r1, #16
    cd18:	d422      	bmi.n	cd60 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    cd1a:	b292      	uxth	r2, r2
    cd1c:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    cd1e:	6821      	ldr	r1, [r4, #0]
    cd20:	8bec      	ldrh	r4, [r5, #30]
    cd22:	b2a4      	uxth	r4, r4
    cd24:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    cd26:	8bcc      	ldrh	r4, [r1, #30]
    cd28:	0424      	lsls	r4, r4, #16
    cd2a:	d505      	bpl.n	cd38 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    cd2c:	8bcc      	ldrh	r4, [r1, #30]
    cd2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    cd32:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    cd36:	4322      	orrs	r2, r4
    cd38:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    cd3a:	8bca      	ldrh	r2, [r1, #30]
    cd3c:	b292      	uxth	r2, r2
    cd3e:	82ca      	strh	r2, [r1, #22]
    cd40:	2100      	movs	r1, #0
    cd42:	4a0d      	ldr	r2, [pc, #52]	; (cd78 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    cd44:	6419      	str	r1, [r3, #64]	; 0x40
    cd46:	76d0      	strb	r0, [r2, #27]
    cd48:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    cd4c:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    cd4e:	4623      	mov	r3, r4
    cd50:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    cd52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    cd56:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    cd58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    cd5c:	f00d bda4 	b.w	1a8a8 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    cd60:	8be9      	ldrh	r1, [r5, #30]
    cd62:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    cd66:	b292      	uxth	r2, r2
    cd68:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    cd6c:	ea41 010e 	orr.w	r1, r1, lr
    cd70:	83e9      	strh	r1, [r5, #30]
    cd72:	e7d4      	b.n	cd1e <_spi_dma_rxISR1()+0x76>
    cd74:	20008b00 	.word	0x20008b00
    cd78:	400e8000 	.word	0x400e8000
    cd7c:	ffff8001 	.word	0xffff8001
    cd80:	0000cb55 	.word	0x0000cb55

0000cd84 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    cd84:	6843      	ldr	r3, [r0, #4]
{
    cd86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    cd8a:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    cd8e:	4d81      	ldr	r5, [pc, #516]	; (cf94 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    cd90:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    cd94:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    cd96:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    cd9a:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    cd9e:	497e      	ldr	r1, [pc, #504]	; (cf98 <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    cda0:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    cda2:	69aa      	ldr	r2, [r5, #24]
    cda4:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    cda6:	4a7d      	ldr	r2, [pc, #500]	; (cf9c <SPIClass::begin()+0x218>)
    cda8:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    cdaa:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    cdac:	f890 e010 	ldrb.w	lr, [r0, #16]
    cdb0:	4a7b      	ldr	r2, [pc, #492]	; (cfa0 <SPIClass::begin()+0x21c>)
    cdb2:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    cdb6:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    cdba:	7c31      	ldrb	r1, [r6, #16]
    cdbc:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    cdc0:	6889      	ldr	r1, [r1, #8]
    cdc2:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    cdc6:	f890 c011 	ldrb.w	ip, [r0, #17]
    cdca:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    cdce:	f10c 0c0a 	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    cdd2:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    cdd6:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    cdda:	6889      	ldr	r1, [r1, #8]
    cddc:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    cde0:	7c81      	ldrb	r1, [r0, #18]
    cde2:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    cde6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    cdea:	f899 b038 	ldrb.w	fp, [r9, #56]	; 0x38
    cdee:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    cdf2:	f8db b008 	ldr.w	fp, [fp, #8]
    cdf6:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    cdfa:	f8d4 a000 	ldr.w	sl, [r4]
    cdfe:	685f      	ldr	r7, [r3, #4]
    ce00:	ea4a 0a07 	orr.w	sl, sl, r7
    ce04:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    ce08:	7c34      	ldrb	r4, [r6, #16]
    ce0a:	f8de e014 	ldr.w	lr, [lr, #20]
    ce0e:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    ce12:	6864      	ldr	r4, [r4, #4]
    ce14:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    ce18:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    ce1c:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
    ce20:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    ce24:	6864      	ldr	r4, [r4, #4]
    ce26:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    ce2a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    ce2c:	f899 4038 	ldrb.w	r4, [r9, #56]	; 0x38
    ce30:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    ce34:	6852      	ldr	r2, [r2, #4]
    ce36:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    ce38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    ce3a:	f899 1044 	ldrb.w	r1, [r9, #68]	; 0x44
    ce3e:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    ce40:	6a1a      	ldr	r2, [r3, #32]
    ce42:	7f31      	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    ce44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    ce46:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    ce48:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    ce4c:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    ce4e:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ce50:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    ce52:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    ce56:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    ce58:	7cc2      	ldrb	r2, [r0, #19]
    ce5a:	2a00      	cmp	r2, #0
    ce5c:	d031      	beq.n	cec2 <SPIClass::begin()+0x13e>
			__disable_irq();
    ce5e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    ce60:	7cc3      	ldrb	r3, [r0, #19]
    ce62:	07dc      	lsls	r4, r3, #31
    ce64:	d508      	bpl.n	ce78 <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    ce66:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ce6a:	6944      	ldr	r4, [r0, #20]
    ce6c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    ce70:	4022      	ands	r2, r4
    ce72:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    ce74:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    ce78:	0799      	lsls	r1, r3, #30
    ce7a:	d508      	bpl.n	ce8e <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    ce7c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ce80:	6984      	ldr	r4, [r0, #24]
    ce82:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    ce86:	4022      	ands	r2, r4
    ce88:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    ce8a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    ce8e:	075a      	lsls	r2, r3, #29
    ce90:	d508      	bpl.n	cea4 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    ce92:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ce96:	69c4      	ldr	r4, [r0, #28]
    ce98:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    ce9c:	4022      	ands	r2, r4
    ce9e:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    cea0:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    cea4:	071f      	lsls	r7, r3, #28
    cea6:	d508      	bpl.n	ceba <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    cea8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ceac:	6a04      	ldr	r4, [r0, #32]
    ceae:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    ceb2:	4022      	ands	r2, r4
    ceb4:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    ceb6:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    ceba:	06de      	lsls	r6, r3, #27
    cebc:	d455      	bmi.n	cf6a <SPIClass::begin()+0x1e6>
			__enable_irq();
    cebe:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cec0:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    cec2:	4c38      	ldr	r4, [pc, #224]	; (cfa4 <SPIClass::begin()+0x220>)
    cec4:	6882      	ldr	r2, [r0, #8]
    cec6:	42a2      	cmp	r2, r4
    cec8:	d059      	beq.n	cf7e <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    ceca:	4a32      	ldr	r2, [pc, #200]	; (cf94 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    cecc:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    cece:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    ced0:	4935      	ldr	r1, [pc, #212]	; (cfa8 <SPIClass::begin()+0x224>)
    ced2:	f3c2 1601 	ubfx	r6, r2, #4, #2
    ced6:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    ceda:	4d34      	ldr	r5, [pc, #208]	; (cfac <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    cedc:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    cee0:	3201      	adds	r2, #1
    cee2:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    cee6:	42aa      	cmp	r2, r5
    cee8:	d831      	bhi.n	cf4e <SPIClass::begin()+0x1ca>
    ceea:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    ceec:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    ceee:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    cef0:	2103      	movs	r1, #3
		port().CR = 0;
    cef2:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    cef4:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    cef6:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    cef8:	2101      	movs	r1, #1
		port().CCR = _ccr;
    cefa:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    cefc:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    cefe:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    cf00:	7cc3      	ldrb	r3, [r0, #19]
    cf02:	b313      	cbz	r3, cf4a <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    cf04:	07dd      	lsls	r5, r3, #31
    cf06:	d504      	bpl.n	cf12 <SPIClass::begin()+0x18e>
    cf08:	6a81      	ldr	r1, [r0, #40]	; 0x28
    cf0a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cf0e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    cf12:	079c      	lsls	r4, r3, #30
    cf14:	d504      	bpl.n	cf20 <SPIClass::begin()+0x19c>
    cf16:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    cf18:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cf1c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    cf20:	0759      	lsls	r1, r3, #29
    cf22:	d504      	bpl.n	cf2e <SPIClass::begin()+0x1aa>
    cf24:	6b01      	ldr	r1, [r0, #48]	; 0x30
    cf26:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cf2a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    cf2e:	071a      	lsls	r2, r3, #28
    cf30:	d504      	bpl.n	cf3c <SPIClass::begin()+0x1b8>
    cf32:	6b41      	ldr	r1, [r0, #52]	; 0x34
    cf34:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cf38:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    cf3c:	06db      	lsls	r3, r3, #27
    cf3e:	d504      	bpl.n	cf4a <SPIClass::begin()+0x1c6>
    cf40:	6b82      	ldr	r2, [r0, #56]	; 0x38
    cf42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cf46:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    cf4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    cf4e:	4918      	ldr	r1, [pc, #96]	; (cfb0 <SPIClass::begin()+0x22c>)
    cf50:	fba1 5102 	umull	r5, r1, r1, r2
    cf54:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    cf56:	fbb2 f2f1 	udiv	r2, r2, r1
    cf5a:	42a2      	cmp	r2, r4
    cf5c:	bf88      	it	hi
    cf5e:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    cf60:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    cf64:	d30d      	bcc.n	cf82 <SPIClass::begin()+0x1fe>
    cf66:	4a13      	ldr	r2, [pc, #76]	; (cfb4 <SPIClass::begin()+0x230>)
				div = d-2;
    cf68:	e7c0      	b.n	ceec <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    cf6a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cf6e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    cf70:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    cf74:	400b      	ands	r3, r1
    cf76:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    cf78:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    cf7c:	e79f      	b.n	cebe <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    cf7e:	68c2      	ldr	r2, [r0, #12]
    cf80:	e7b5      	b.n	ceee <SPIClass::begin()+0x16a>
			if (d > 2) {
    cf82:	2902      	cmp	r1, #2
    cf84:	d9b1      	bls.n	ceea <SPIClass::begin()+0x166>
				div = d-2;
    cf86:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    cf88:	084c      	lsrs	r4, r1, #1
    cf8a:	0222      	lsls	r2, r4, #8
    cf8c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    cf90:	430a      	orrs	r2, r1
    cf92:	e7ab      	b.n	ceec <SPIClass::begin()+0x168>
    cf94:	400fc000 	.word	0x400fc000
    cf98:	e3ffffcf 	.word	0xe3ffffcf
    cf9c:	08000010 	.word	0x08000010
    cfa0:	20004be8 	.word	0x20004be8
    cfa4:	003d0900 	.word	0x003d0900
    cfa8:	20003fac 	.word	0x20003fac
    cfac:	003d08ff 	.word	0x003d08ff
    cfb0:	431bde83 	.word	0x431bde83
    cfb4:	007f7fff 	.word	0x007f7fff

0000cfb8 <SPIClass::pinIsChipSelect(unsigned char)>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    cfb8:	6843      	ldr	r3, [r0, #4]
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    cfba:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
    cfbe:	428a      	cmp	r2, r1
    cfc0:	d009      	beq.n	cfd6 <SPIClass::pinIsChipSelect(unsigned char)+0x1e>
    cfc2:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
    cfc6:	428a      	cmp	r2, r1
    cfc8:	d00a      	beq.n	cfe0 <SPIClass::pinIsChipSelect(unsigned char)+0x28>
    cfca:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
    cfce:	428a      	cmp	r2, r1
    cfd0:	d008      	beq.n	cfe4 <SPIClass::pinIsChipSelect(unsigned char)+0x2c>
	return 0;
    cfd2:	2000      	movs	r0, #0
}
    cfd4:	4770      	bx	lr
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    cfd6:	2200      	movs	r2, #0
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    cfd8:	4413      	add	r3, r2
    cfda:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
    cfde:	4770      	bx	lr
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    cfe0:	2201      	movs	r2, #1
    cfe2:	e7f9      	b.n	cfd8 <SPIClass::pinIsChipSelect(unsigned char)+0x20>
    cfe4:	2202      	movs	r2, #2
    cfe6:	e7f7      	b.n	cfd8 <SPIClass::pinIsChipSelect(unsigned char)+0x20>

0000cfe8 <SPIClass::pinIsMOSI(unsigned char)>:
    cfe8:	6843      	ldr	r3, [r0, #4]
		if (pin == hardware().mosi_pin[i]) return true;
    cfea:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    cfee:	428a      	cmp	r2, r1
    cff0:	d006      	beq.n	d000 <SPIClass::pinIsMOSI(unsigned char)+0x18>
    cff2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
    cff6:	1a40      	subs	r0, r0, r1
    cff8:	fab0 f080 	clz	r0, r0
    cffc:	0940      	lsrs	r0, r0, #5
    cffe:	4770      	bx	lr
    d000:	2001      	movs	r0, #1
}
    d002:	4770      	bx	lr

0000d004 <SPIClass::pinIsSCK(unsigned char)>:
    d004:	6843      	ldr	r3, [r0, #4]
		if (pin == hardware().sck_pin[i]) return true;
    d006:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    d00a:	428a      	cmp	r2, r1
    d00c:	d006      	beq.n	d01c <SPIClass::pinIsSCK(unsigned char)+0x18>
    d00e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    d012:	1a40      	subs	r0, r0, r1
    d014:	fab0 f080 	clz	r0, r0
    d018:	0940      	lsrs	r0, r0, #5
    d01a:	4770      	bx	lr
    d01c:	2001      	movs	r0, #1
}
    d01e:	4770      	bx	lr

0000d020 <SPIClass::setCS(unsigned char)>:
    d020:	6843      	ldr	r3, [r0, #4]
		if (pin == hardware().cs_pin[i]) {
    d022:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
    d026:	428a      	cmp	r2, r1
    d028:	d009      	beq.n	d03e <SPIClass::setCS(unsigned char)+0x1e>
    d02a:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
    d02e:	428a      	cmp	r2, r1
    d030:	d019      	beq.n	d066 <SPIClass::setCS(unsigned char)+0x46>
    d032:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
    d036:	428a      	cmp	r2, r1
    d038:	d017      	beq.n	d06a <SPIClass::setCS(unsigned char)+0x4a>
	return 0;
    d03a:	2000      	movs	r0, #0
}
    d03c:	4770      	bx	lr
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    d03e:	2000      	movs	r0, #0
			*(portConfigRegister(pin)) = hardware().cs_mux[i];
    d040:	4a0b      	ldr	r2, [pc, #44]	; (d070 <SPIClass::setCS(unsigned char)+0x50>)
    d042:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
				*hardware().pcs_select_input_register[i] = hardware().pcs_select_val[i];
    d046:	4403      	add	r3, r0
			*(portConfigRegister(pin)) = hardware().cs_mux[i];
    d048:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    d04c:	f8dc 1050 	ldr.w	r1, [ip, #80]	; 0x50
    d050:	6852      	ldr	r2, [r2, #4]
    d052:	6011      	str	r1, [r2, #0]
			if (hardware().pcs_select_input_register[i])
    d054:	f8dc 2064 	ldr.w	r2, [ip, #100]	; 0x64
    d058:	b112      	cbz	r2, d060 <SPIClass::setCS(unsigned char)+0x40>
				*hardware().pcs_select_input_register[i] = hardware().pcs_select_val[i];
    d05a:	f893 105f 	ldrb.w	r1, [r3, #95]	; 0x5f
    d05e:	6011      	str	r1, [r2, #0]
			return hardware().cs_mask[i];
    d060:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
    d064:	4770      	bx	lr
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    d066:	2001      	movs	r0, #1
    d068:	e7ea      	b.n	d040 <SPIClass::setCS(unsigned char)+0x20>
    d06a:	2002      	movs	r0, #2
    d06c:	e7e8      	b.n	d040 <SPIClass::setCS(unsigned char)+0x20>
    d06e:	bf00      	nop
    d070:	20004be8 	.word	0x20004be8

0000d074 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    d074:	b10b      	cbz	r3, d07a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    d076:	f7ff bd79 	b.w	cb6c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    d07a:	4770      	bx	lr

0000d07c <SPIClass::end()>:
    d07c:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    d07e:	e9d3 1200 	ldrd	r1, r2, [r3]
    d082:	6809      	ldr	r1, [r1, #0]
    d084:	4211      	tst	r1, r2
    d086:	d100      	bne.n	d08a <SPIClass::end()+0xe>
    d088:	4770      	bx	lr
void SPIClass::end() {
    d08a:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    d08c:	6802      	ldr	r2, [r0, #0]
    d08e:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    d090:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    d092:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    d094:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    d096:	7c22      	ldrb	r2, [r4, #16]
    d098:	4413      	add	r3, r2
    d09a:	7c18      	ldrb	r0, [r3, #16]
    d09c:	f00e fb04 	bl	1b6a8 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    d0a0:	7c62      	ldrb	r2, [r4, #17]
    d0a2:	6863      	ldr	r3, [r4, #4]
    d0a4:	2105      	movs	r1, #5
    d0a6:	4413      	add	r3, r2
    d0a8:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    d0ac:	f00e fafc 	bl	1b6a8 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    d0b0:	6863      	ldr	r3, [r4, #4]
    d0b2:	7ca2      	ldrb	r2, [r4, #18]
    d0b4:	2105      	movs	r1, #5
    d0b6:	4413      	add	r3, r2
}
    d0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    d0bc:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    d0c0:	f00e baf2 	b.w	1b6a8 <pinMode>

0000d0c4 <FS::name()>:
	virtual bool mediaPresent() {
		return true;
	}
	virtual const char * name() {
		return nullptr;
	}
    d0c4:	2000      	movs	r0, #0
    d0c6:	4770      	bx	lr

0000d0c8 <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    d0c8:	4770      	bx	lr
    d0ca:	bf00      	nop

0000d0cc <SDClass::~SDClass()>:
    d0cc:	b510      	push	{r4, lr}
    d0ce:	4604      	mov	r4, r0
    d0d0:	f240 41d4 	movw	r1, #1236	; 0x4d4
    d0d4:	f00e fe44 	bl	1bd60 <operator delete(void*, unsigned int)>
    d0d8:	4620      	mov	r0, r4
    d0da:	bd10      	pop	{r4, pc}

0000d0dc <SDClass::open(char const*, unsigned char)>:
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    d0dc:	2b01      	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    d0de:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0e0:	4605      	mov	r5, r0
    d0e2:	b095      	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    d0e4:	d03d      	beq.n	d162 <SDClass::open(char const*, unsigned char)+0x86>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    d0e6:	2b02      	cmp	r3, #2
    d0e8:	f240 2002 	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    d0ec:	f101 0104 	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    d0f0:	bf0c      	ite	eq
    d0f2:	4603      	moveq	r3, r0
    d0f4:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    d0f6:	4668      	mov	r0, sp
    d0f8:	f005 f864 	bl	121c4 <FsVolume::open(char const*, int)>
    d0fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d0fe:	2b00      	cmp	r3, #0
    d100:	d038      	beq.n	d174 <SDClass::open(char const*, unsigned char)+0x98>
		if (file) return File(new SDFile(file));
    d102:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    d104:	2600      	movs	r6, #0
    d106:	f00e fe29 	bl	1bd5c <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    d10a:	4b21      	ldr	r3, [pc, #132]	; (d190 <SDClass::open(char const*, unsigned char)+0xb4>)
    d10c:	af04      	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    d10e:	4604      	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    d110:	e9c0 3600 	strd	r3, r6, [r0]
class Print
    d114:	9b01      	ldr	r3, [sp, #4]
    d116:	4639      	mov	r1, r7
    d118:	3018      	adds	r0, #24
    d11a:	f840 3c0c 	str.w	r3, [r0, #-12]
class Stream : public Print
    d11e:	4b1d      	ldr	r3, [pc, #116]	; (d194 <SDClass::open(char const*, unsigned char)+0xb8>)
    d120:	f840 3c10 	str.w	r3, [r0, #-16]
    d124:	9b02      	ldr	r3, [sp, #8]
    d126:	f840 3c08 	str.w	r3, [r0, #-8]
    d12a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    d12e:	f800 3c04 	strb.w	r3, [r0, #-4]
    d132:	f004 feeb 	bl	11f0c <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    d136:	4b18      	ldr	r3, [pc, #96]	; (d198 <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    d138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d13c:	65a6      	str	r6, [r4, #88]	; 0x58
    d13e:	60a3      	str	r3, [r4, #8]
	File(FileImpl *file) {
    d140:	4b16      	ldr	r3, [pc, #88]	; (d19c <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    d142:	606e      	str	r6, [r5, #4]
    d144:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
    d146:	6863      	ldr	r3, [r4, #4]
    d148:	732e      	strb	r6, [r5, #12]
    d14a:	3301      	adds	r3, #1
    d14c:	60aa      	str	r2, [r5, #8]
		f = file;
    d14e:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    d150:	6063      	str	r3, [r4, #4]
    d152:	4b13      	ldr	r3, [pc, #76]	; (d1a0 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() {close();}
    d154:	4638      	mov	r0, r7
    d156:	9300      	str	r3, [sp, #0]
    d158:	f004 ff1a 	bl	11f90 <FsBaseFile::close()>
		return File();
	}
    d15c:	4628      	mov	r0, r5
    d15e:	b015      	add	sp, #84	; 0x54
    d160:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    d162:	f244 2302 	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    d166:	3104      	adds	r1, #4
    d168:	4668      	mov	r0, sp
    d16a:	f005 f82b 	bl	121c4 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    d16e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d170:	2b00      	cmp	r3, #0
    d172:	d1c6      	bne.n	d102 <SDClass::open(char const*, unsigned char)+0x26>
    d174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d176:	2b00      	cmp	r3, #0
    d178:	d1c3      	bne.n	d102 <SDClass::open(char const*, unsigned char)+0x26>
    d17a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    d17e:	4a07      	ldr	r2, [pc, #28]	; (d19c <SDClass::open(char const*, unsigned char)+0xc0>)
    d180:	af04      	add	r7, sp, #16
    d182:	732b      	strb	r3, [r5, #12]
    d184:	602a      	str	r2, [r5, #0]
    d186:	612b      	str	r3, [r5, #16]
    d188:	e9c5 3101 	strd	r3, r1, [r5, #4]
    d18c:	e7e1      	b.n	d152 <SDClass::open(char const*, unsigned char)+0x76>
    d18e:	bf00      	nop
    d190:	20003e1c 	.word	0x20003e1c
    d194:	20003e78 	.word	0x20003e78
    d198:	20003df8 	.word	0x20003df8
    d19c:	20003dbc 	.word	0x20003dbc
    d1a0:	20003c3c 	.word	0x20003c3c

0000d1a4 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    d1a4:	b510      	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    d1a6:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    d1aa:	b08e      	sub	sp, #56	; 0x38
    d1ac:	460a      	mov	r2, r1
    d1ae:	b144      	cbz	r4, d1c2 <SDClass::rmdir(char const*)+0x1e>
  FatFile() {}
    d1b0:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    d1b2:	4621      	mov	r1, r4
    d1b4:	4668      	mov	r0, sp
    d1b6:	9300      	str	r3, [sp, #0]
    d1b8:	f002 fdda 	bl	fd70 <FatFile::open(FatVolume*, char const*, int)>
    d1bc:	b980      	cbnz	r0, d1e0 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    d1be:	b00e      	add	sp, #56	; 0x38
    d1c0:	bd10      	pop	{r4, pc}
    d1c2:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rmdir(path) : false;
    d1c6:	b141      	cbz	r1, d1da <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    d1c8:	4623      	mov	r3, r4
    d1ca:	4668      	mov	r0, sp
  ExFatFile() {}
    d1cc:	940c      	str	r4, [sp, #48]	; 0x30
    d1ce:	f000 feed 	bl	dfac <ExFatFile::open(ExFatVolume*, char const*, int)>
    d1d2:	b950      	cbnz	r0, d1ea <SDClass::rmdir(char const*)+0x46>
    d1d4:	2000      	movs	r0, #0
    d1d6:	b00e      	add	sp, #56	; 0x38
    d1d8:	bd10      	pop	{r4, pc}
    d1da:	4608      	mov	r0, r1
    d1dc:	b00e      	add	sp, #56	; 0x38
    d1de:	bd10      	pop	{r4, pc}
    d1e0:	4668      	mov	r0, sp
    d1e2:	f003 f819 	bl	10218 <FatFile::rmdir()>
    d1e6:	b00e      	add	sp, #56	; 0x38
    d1e8:	bd10      	pop	{r4, pc}
    d1ea:	4668      	mov	r0, sp
    d1ec:	f000 ff9c 	bl	e128 <ExFatFile::rmdir()>
    d1f0:	2800      	cmp	r0, #0
    d1f2:	d0ef      	beq.n	d1d4 <SDClass::rmdir(char const*)+0x30>
    d1f4:	e7e3      	b.n	d1be <SDClass::rmdir(char const*)+0x1a>
    d1f6:	bf00      	nop

0000d1f8 <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    d1f8:	b570      	push	{r4, r5, r6, lr}
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    d1fa:	f8d0 5484 	ldr.w	r5, [r0, #1156]	; 0x484
    d1fe:	b08e      	sub	sp, #56	; 0x38
    d200:	4616      	mov	r6, r2
    d202:	b15d      	cbz	r5, d21c <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    d204:	f505 6589 	add.w	r5, r5, #1096	; 0x448
    d208:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    d20a:	460a      	mov	r2, r1
    d20c:	4668      	mov	r0, sp
    d20e:	4629      	mov	r1, r5
    d210:	9300      	str	r3, [sp, #0]
    d212:	f002 fd2b 	bl	fc6c <FatFile::open(FatFile*, char const*, int)>
    d216:	b990      	cbnz	r0, d23e <SDClass::rename(char const*, char const*)+0x46>
	}
    d218:	b00e      	add	sp, #56	; 0x38
    d21a:	bd70      	pop	{r4, r5, r6, pc}
    d21c:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    d220:	2800      	cmp	r0, #0
    d222:	d0f9      	beq.n	d218 <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    d224:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    d228:	460a      	mov	r2, r1
    d22a:	462b      	mov	r3, r5
    d22c:	4668      	mov	r0, sp
    d22e:	4621      	mov	r1, r4
    d230:	950c      	str	r5, [sp, #48]	; 0x30
    d232:	f000 fe3f 	bl	deb4 <ExFatFile::open(ExFatFile*, char const*, int)>
    d236:	b948      	cbnz	r0, d24c <SDClass::rename(char const*, char const*)+0x54>
    d238:	2000      	movs	r0, #0
    d23a:	b00e      	add	sp, #56	; 0x38
    d23c:	bd70      	pop	{r4, r5, r6, pc}
    d23e:	4632      	mov	r2, r6
    d240:	4629      	mov	r1, r5
    d242:	4668      	mov	r0, sp
    d244:	f002 fef2 	bl	1002c <FatFile::rename(FatFile*, char const*)>
    d248:	b00e      	add	sp, #56	; 0x38
    d24a:	bd70      	pop	{r4, r5, r6, pc}
    d24c:	4632      	mov	r2, r6
    d24e:	4621      	mov	r1, r4
    d250:	4668      	mov	r0, sp
    d252:	f001 f8bd 	bl	e3d0 <ExFatFile::rename(ExFatFile*, char const*)>
    d256:	2800      	cmp	r0, #0
    d258:	d0ee      	beq.n	d238 <SDClass::rename(char const*, char const*)+0x40>
    d25a:	e7dd      	b.n	d218 <SDClass::rename(char const*, char const*)+0x20>

0000d25c <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    d25c:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->remove(path) :
    d25e:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    d262:	b08e      	sub	sp, #56	; 0x38
    d264:	460a      	mov	r2, r1
    d266:	b14c      	cbz	r4, d27c <SDClass::remove(char const*)+0x20>
    d268:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    d26a:	2301      	movs	r3, #1
    d26c:	4621      	mov	r1, r4
    d26e:	9000      	str	r0, [sp, #0]
    d270:	4668      	mov	r0, sp
    d272:	f002 fd7d 	bl	fd70 <FatFile::open(FatVolume*, char const*, int)>
    d276:	b980      	cbnz	r0, d29a <SDClass::remove(char const*)+0x3e>
	}
    d278:	b00e      	add	sp, #56	; 0x38
    d27a:	bd10      	pop	{r4, pc}
    d27c:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
    d280:	b141      	cbz	r1, d294 <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    d282:	2301      	movs	r3, #1
    d284:	4668      	mov	r0, sp
    d286:	940c      	str	r4, [sp, #48]	; 0x30
    d288:	f000 fe90 	bl	dfac <ExFatFile::open(ExFatVolume*, char const*, int)>
    d28c:	b950      	cbnz	r0, d2a4 <SDClass::remove(char const*)+0x48>
    d28e:	2000      	movs	r0, #0
    d290:	b00e      	add	sp, #56	; 0x38
    d292:	bd10      	pop	{r4, pc}
    d294:	4608      	mov	r0, r1
    d296:	b00e      	add	sp, #56	; 0x38
    d298:	bd10      	pop	{r4, pc}
    d29a:	4668      	mov	r0, sp
    d29c:	f003 fe6e 	bl	10f7c <FatFile::remove()>
    d2a0:	b00e      	add	sp, #56	; 0x38
    d2a2:	bd10      	pop	{r4, pc}
    d2a4:	4668      	mov	r0, sp
    d2a6:	f000 fee5 	bl	e074 <ExFatFile::remove()>
    d2aa:	2800      	cmp	r0, #0
    d2ac:	d0ef      	beq.n	d28e <SDClass::remove(char const*)+0x32>
    d2ae:	e7e3      	b.n	d278 <SDClass::remove(char const*)+0x1c>

0000d2b0 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    d2b0:	b530      	push	{r4, r5, lr}
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    d2b2:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    d2b6:	b08f      	sub	sp, #60	; 0x3c
    d2b8:	460a      	mov	r2, r1
    d2ba:	b14c      	cbz	r4, d2d0 <SDClass::mkdir(char const*)+0x20>
    d2bc:	2500      	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    d2be:	2301      	movs	r3, #1
    d2c0:	f504 6189 	add.w	r1, r4, #1096	; 0x448
    d2c4:	4668      	mov	r0, sp
    d2c6:	9500      	str	r5, [sp, #0]
    d2c8:	f002 fc5a 	bl	fb80 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    d2cc:	b00f      	add	sp, #60	; 0x3c
    d2ce:	bd30      	pop	{r4, r5, pc}
    d2d0:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    d2d4:	2800      	cmp	r0, #0
    d2d6:	d0f9      	beq.n	d2cc <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    d2d8:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    d2dc:	2301      	movs	r3, #1
    d2de:	4668      	mov	r0, sp
    d2e0:	940c      	str	r4, [sp, #48]	; 0x30
    d2e2:	f001 f8f7 	bl	e4d4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    d2e6:	b00f      	add	sp, #60	; 0x3c
    d2e8:	bd30      	pop	{r4, r5, pc}
    d2ea:	bf00      	nop

0000d2ec <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    d2ec:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->exists(path) :
    d2ee:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    d2f2:	b08e      	sub	sp, #56	; 0x38
    d2f4:	460a      	mov	r2, r1
    d2f6:	b13c      	cbz	r4, d308 <SDClass::exists(char const*)+0x1c>
    d2f8:	2300      	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    d2fa:	4621      	mov	r1, r4
    d2fc:	4668      	mov	r0, sp
    d2fe:	9300      	str	r3, [sp, #0]
    d300:	f002 fd36 	bl	fd70 <FatFile::open(FatVolume*, char const*, int)>
	}
    d304:	b00e      	add	sp, #56	; 0x38
    d306:	bd10      	pop	{r4, pc}
    d308:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    d30c:	b131      	cbz	r1, d31c <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    d30e:	4623      	mov	r3, r4
    d310:	4668      	mov	r0, sp
    d312:	940c      	str	r4, [sp, #48]	; 0x30
    d314:	f000 fe4a 	bl	dfac <ExFatFile::open(ExFatVolume*, char const*, int)>
    d318:	b00e      	add	sp, #56	; 0x38
    d31a:	bd10      	pop	{r4, pc}
    d31c:	4608      	mov	r0, r1
    d31e:	b00e      	add	sp, #56	; 0x38
    d320:	bd10      	pop	{r4, pc}
    d322:	bf00      	nop

0000d324 <SDClass::usedSize()>:
	uint64_t usedSize() {
    d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d326:	4605      	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    d328:	f890 04d0 	ldrb.w	r0, [r0, #1232]	; 0x4d0
    d32c:	b908      	cbnz	r0, d332 <SDClass::usedSize()+0xe>
    d32e:	4601      	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    d330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol ? m_fVol->clusterCount() :
    d332:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    d336:	2b00      	cmp	r3, #0
    d338:	d04c      	beq.n	d3d4 <SDClass::usedSize()+0xb0>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    d33a:	69dc      	ldr	r4, [r3, #28]
    d33c:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    d340:	3c01      	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    d342:	2800      	cmp	r0, #0
    d344:	d054      	beq.n	d3f0 <SDClass::usedSize()+0xcc>
    d346:	6803      	ldr	r3, [r0, #0]
    d348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d34a:	4798      	blx	r3
    d34c:	b1e0      	cbz	r0, d388 <SDClass::usedSize()+0x64>
    d34e:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    d352:	b378      	cbz	r0, d3b4 <SDClass::usedSize()+0x90>
    d354:	6803      	ldr	r3, [r0, #0]
    d356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d358:	4798      	blx	r3
    d35a:	b9a8      	cbnz	r0, d388 <SDClass::usedSize()+0x64>
    d35c:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    d360:	b340      	cbz	r0, d3b4 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    d362:	6803      	ldr	r3, [r0, #0]
    d364:	2101      	movs	r1, #1
    d366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d368:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    d36a:	4607      	mov	r7, r0
    d36c:	b310      	cbz	r0, d3b4 <SDClass::usedSize()+0x90>
    return m_fVol ? m_fVol->freeClusterCount() :
    d36e:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    d372:	bb58      	cbnz	r0, d3cc <SDClass::usedSize()+0xa8>
    d374:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
    d378:	4633      	mov	r3, r6
           m_xVol ? m_xVol->freeClusterCount() : 0;
    d37a:	b96e      	cbnz	r6, d398 <SDClass::usedSize()+0x74>
    d37c:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    d380:	b990      	cbnz	r0, d3a8 <SDClass::usedSize()+0x84>
  uint32_t bytesPerCluster() const {
    d382:	2000      	movs	r0, #0
    d384:	4601      	mov	r1, r0
    d386:	e7d3      	b.n	d330 <SDClass::usedSize()+0xc>
    return m_fVol ? m_fVol->freeClusterCount() :
    d388:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    d38c:	b9e8      	cbnz	r0, d3ca <SDClass::usedSize()+0xa6>
    d38e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->freeClusterCount() : 0;
    d392:	2b00      	cmp	r3, #0
    d394:	d0f5      	beq.n	d382 <SDClass::usedSize()+0x5e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    d396:	4607      	mov	r7, r0
    d398:	4618      	mov	r0, r3
    d39a:	f002 f96f 	bl	f67c <ExFatPartition::freeClusterCount()>
    d39e:	4606      	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    d3a0:	b13f      	cbz	r7, d3b2 <SDClass::usedSize()+0x8e>
    d3a2:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    d3a6:	b128      	cbz	r0, d3b4 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    d3a8:	6803      	ldr	r3, [r0, #0]
    d3aa:	2100      	movs	r1, #0
    d3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d3ae:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    d3b0:	b100      	cbz	r0, d3b4 <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    d3b2:	1ba4      	subs	r4, r4, r6
    return m_fVol ? m_fVol->bytesPerCluster() :
    d3b4:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    d3b8:	b1fb      	cbz	r3, d3fa <SDClass::usedSize()+0xd6>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    d3ba:	799b      	ldrb	r3, [r3, #6]
    d3bc:	f44f 7100 	mov.w	r1, #512	; 0x200
    d3c0:	4099      	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    d3c2:	b289      	uxth	r1, r1
    d3c4:	fba1 0104 	umull	r0, r1, r1, r4
	}
    d3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    d3ca:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    d3cc:	f004 fc28 	bl	11c20 <FatPartition::freeClusterCount()>
    d3d0:	4606      	mov	r6, r0
    d3d2:	e7e5      	b.n	d3a0 <SDClass::usedSize()+0x7c>
    d3d4:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    d3d8:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
           m_xVol ? m_xVol->clusterCount() : 0;
    d3dc:	b1b3      	cbz	r3, d40c <SDClass::usedSize()+0xe8>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    d3de:	f8d3 4430 	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    d3e2:	2800      	cmp	r0, #0
    d3e4:	d1af      	bne.n	d346 <SDClass::usedSize()+0x22>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    d3e6:	4618      	mov	r0, r3
    d3e8:	f002 f948 	bl	f67c <ExFatPartition::freeClusterCount()>
    d3ec:	4606      	mov	r6, r0
    d3ee:	e7e0      	b.n	d3b2 <SDClass::usedSize()+0x8e>
    return m_fVol ? m_fVol->freeClusterCount() :
    d3f0:	4618      	mov	r0, r3
    d3f2:	f004 fc15 	bl	11c20 <FatPartition::freeClusterCount()>
    d3f6:	4606      	mov	r6, r0
    d3f8:	e7db      	b.n	d3b2 <SDClass::usedSize()+0x8e>
    d3fa:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    d3fe:	2e00      	cmp	r6, #0
    d400:	d0bf      	beq.n	d382 <SDClass::usedSize()+0x5e>
		  * (uint64_t)sdfs.bytesPerCluster();
    d402:	f8d6 143c 	ldr.w	r1, [r6, #1084]	; 0x43c
    d406:	fba1 0104 	umull	r0, r1, r1, r4
	}
    d40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d40c:	2800      	cmp	r0, #0
    d40e:	d0b8      	beq.n	d382 <SDClass::usedSize()+0x5e>
           m_xVol ? m_xVol->clusterCount() : 0;
    d410:	461c      	mov	r4, r3
    d412:	e798      	b.n	d346 <SDClass::usedSize()+0x22>

0000d414 <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    d414:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    d418:	b163      	cbz	r3, d434 <SDClass::totalSize()+0x20>
    return m_fVol ? m_fVol->clusterCount() :
    d41a:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    d41e:	b163      	cbz	r3, d43a <SDClass::totalSize()+0x26>
    d420:	799a      	ldrb	r2, [r3, #6]
    d422:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    d426:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    d428:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    d42a:	3901      	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    d42c:	b280      	uxth	r0, r0
    d42e:	fba0 0101 	umull	r0, r1, r0, r1
    d432:	4770      	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    d434:	4618      	mov	r0, r3
    d436:	4601      	mov	r1, r0
	}
    d438:	4770      	bx	lr
    d43a:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->clusterCount() : 0;
    d43e:	2800      	cmp	r0, #0
    d440:	d0f9      	beq.n	d436 <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    d442:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    d446:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
    d44a:	fba1 0100 	umull	r0, r1, r1, r0
    d44e:	4770      	bx	lr

0000d450 <SDClass::format(int, char, Print&)>:
{
    d450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() {return m_card;}
    d454:	f8d0 5490 	ldr.w	r5, [r0, #1168]	; 0x490
    d458:	b08d      	sub	sp, #52	; 0x34
	if (!card) return false; // no SD card
    d45a:	b14d      	cbz	r5, d470 <SDClass::format(int, char, Print&)+0x20>
    d45c:	4698      	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    d45e:	682b      	ldr	r3, [r5, #0]
    d460:	4604      	mov	r4, r0
    d462:	4628      	mov	r0, r5
    d464:	69db      	ldr	r3, [r3, #28]
    d466:	4798      	blx	r3
	if (sectors <= 12288) return false; // card too small
    d468:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    d46c:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    d46e:	d804      	bhi.n	d47a <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    d470:	2600      	movs	r6, #0
}
    d472:	4630      	mov	r0, r6
    d474:	b00d      	add	sp, #52	; 0x34
    d476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    d47a:	f44f 7000 	mov.w	r0, #512	; 0x200
    d47e:	f013 f82d 	bl	204dc <malloc>
	if (!buf) return false; // unable to allocate memory
    d482:	4607      	mov	r7, r0
    d484:	2800      	cmp	r0, #0
    d486:	d0f3      	beq.n	d470 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    d488:	f10d 0904 	add.w	r9, sp, #4
	if (sectors > 67108864) {
    d48c:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    d490:	4602      	mov	r2, r0
    d492:	4643      	mov	r3, r8
    d494:	4629      	mov	r1, r5
    d496:	4648      	mov	r0, r9
	if (sectors > 67108864) {
    d498:	d92e      	bls.n	d4f8 <SDClass::format(int, char, Print&)+0xa8>
		ret = exFatFormatter.format(card, buf, &pr);
    d49a:	f001 fbbb 	bl	ec14 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    d49e:	4606      	mov	r6, r0
	free(buf);
    d4a0:	4638      	mov	r0, r7
    d4a2:	f013 f823 	bl	204ec <free>
	if (ret) {
    d4a6:	2e00      	cmp	r6, #0
    d4a8:	d0e2      	beq.n	d470 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    d4aa:	682b      	ldr	r3, [r5, #0]
    d4ac:	4628      	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    d4ae:	1d27      	adds	r7, r4, #4
		card->syncDevice();
    d4b0:	6a1b      	ldr	r3, [r3, #32]
    d4b2:	4798      	blx	r3
    if (spiConfigBackupPin == 255) {
    d4b4:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
    d4b8:	2bff      	cmp	r3, #255	; 0xff
    d4ba:	d021      	beq.n	d500 <SDClass::format(int, char, Print&)+0xb0>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    d4bc:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    d4c0:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    d4c4:	9302      	str	r3, [sp, #8]
    d4c6:	4628      	mov	r0, r5
    d4c8:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    d4cc:	9303      	str	r3, [sp, #12]
    d4ce:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    d4d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    d4d6:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
    d4da:	f005 fd39 	bl	12f50 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    d4de:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    d4e2:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d1c3      	bne.n	d472 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    d4ea:	2301      	movs	r3, #1
    d4ec:	4629      	mov	r1, r5
    d4ee:	4638      	mov	r0, r7
    d4f0:	461a      	mov	r2, r3
    d4f2:	f004 fdf5 	bl	120e0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    d4f6:	e7bc      	b.n	d472 <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    d4f8:	f004 f858 	bl	115ac <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    d4fc:	4606      	mov	r6, r0
    d4fe:	e7cf      	b.n	d4a0 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    d500:	f204 4594 	addw	r5, r4, #1172	; 0x494
    d504:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    d508:	4628      	mov	r0, r5
    d50a:	f006 fb69 	bl	13be0 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    d50e:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    d510:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    d514:	f005 fdc6 	bl	130a4 <SdioCard::errorCode() const>
    d518:	2800      	cmp	r0, #0
    d51a:	d1aa      	bne.n	d472 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    d51c:	2301      	movs	r3, #1
    d51e:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    d522:	4638      	mov	r0, r7
    d524:	461a      	mov	r2, r3
    d526:	f004 fddb 	bl	120e0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    d52a:	e7a2      	b.n	d472 <SDClass::format(int, char, Print&)+0x22>

0000d52c <SDClass::mediaPresent()>:
	}
	return false;
}

bool SDClass::mediaPresent()
{
    d52c:	b570      	push	{r4, r5, r6, lr}
  SdCard* card() {return m_card;}
    d52e:	f8d0 5490 	ldr.w	r5, [r0, #1168]	; 0x490
    d532:	b084      	sub	sp, #16
    d534:	4604      	mov	r4, r0
	//Serial.print("mediaPresent: ");
	bool ret;
	SdCard *card = sdfs.card();
//	Serial.printf("mediaPresent: card:%x cs:%u cd:%u\n", (uint32_t)card, csPin_, cdPin_);
	if (card) {
    d536:	2d00      	cmp	r5, #0
    d538:	d040      	beq.n	d5bc <SDClass::mediaPresent()+0x90>
		if (cardPreviouslyPresent) {
    d53a:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    d53e:	b183      	cbz	r3, d562 <SDClass::mediaPresent()+0x36>
			#ifdef BUILTIN_SDCARD
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
    d540:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    d544:	2bfe      	cmp	r3, #254	; 0xfe
    d546:	d06e      	beq.n	d626 <SDClass::mediaPresent()+0xfa>
			#else
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
				// see if we have digital pin to bypass...
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    d548:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    d54c:	2836      	cmp	r0, #54	; 0x36
    d54e:	d95a      	bls.n	d606 <SDClass::mediaPresent()+0xda>
				else {
					// SPI doesn't have 32 bit status, read CID register
					cid_t cid;
					ret = card->readCID(&cid);
    d550:	682b      	ldr	r3, [r5, #0]
    d552:	4669      	mov	r1, sp
    d554:	4628      	mov	r0, r5
    d556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    d558:	4798      	blx	r3
	} else {
		//Serial.print("no card");
		ret = false;
	}
	//Serial.println();
	cardPreviouslyPresent = ret;
    d55a:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
	return ret;
}
    d55e:	b004      	add	sp, #16
    d560:	bd70      	pop	{r4, r5, r6, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    d562:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    d566:	2bfe      	cmp	r3, #254	; 0xfe
    d568:	d058      	beq.n	d61c <SDClass::mediaPresent()+0xf0>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    d56a:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    d56e:	2836      	cmp	r0, #54	; 0x36
    d570:	d94f      	bls.n	d612 <SDClass::mediaPresent()+0xe6>
    if (spiConfigBackupPin == 255) {
    d572:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
				ret = sdfs.restart();
    d576:	1d26      	adds	r6, r4, #4
    d578:	2bff      	cmp	r3, #255	; 0xff
    d57a:	d124      	bne.n	d5c6 <SDClass::mediaPresent()+0x9a>
    d57c:	f204 4594 	addw	r5, r4, #1172	; 0x494
    d580:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    d584:	4628      	mov	r0, r5
    d586:	f006 fb2b 	bl	13be0 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    d58a:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    d58c:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    d590:	f005 fd88 	bl	130a4 <SdioCard::errorCode() const>
    d594:	2800      	cmp	r0, #0
    d596:	d064      	beq.n	d662 <SDClass::mediaPresent()+0x136>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    d598:	2103      	movs	r1, #3
    d59a:	202e      	movs	r0, #46	; 0x2e
    d59c:	f00e f884 	bl	1b6a8 <pinMode>
	uint32_t begin = ARM_DWT_CYCCNT;
    d5a0:	4935      	ldr	r1, [pc, #212]	; (d678 <SDClass::mediaPresent()+0x14c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d5a2:	4a36      	ldr	r2, [pc, #216]	; (d67c <SDClass::mediaPresent()+0x150>)
    d5a4:	4b36      	ldr	r3, [pc, #216]	; (d680 <SDClass::mediaPresent()+0x154>)
	uint32_t begin = ARM_DWT_CYCCNT;
    d5a6:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d5a8:	6812      	ldr	r2, [r2, #0]
    d5aa:	fba3 3202 	umull	r3, r2, r3, r2
    d5ae:	0c92      	lsrs	r2, r2, #18
    d5b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d5b4:	684b      	ldr	r3, [r1, #4]
    d5b6:	1a1b      	subs	r3, r3, r0
    d5b8:	429a      	cmp	r2, r3
    d5ba:	d8fb      	bhi.n	d5b4 <SDClass::mediaPresent()+0x88>
		ret = false;
    d5bc:	2000      	movs	r0, #0
	cardPreviouslyPresent = ret;
    d5be:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
}
    d5c2:	b004      	add	sp, #16
    d5c4:	bd70      	pop	{r4, r5, r6, pc}
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    d5c6:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
    m_spiCard.begin(config);
    d5ca:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    d5ce:	f8d4 14c4 	ldr.w	r1, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    d5d2:	f8b4 24c0 	ldrh.w	r2, [r4, #1216]	; 0x4c0
    d5d6:	4628      	mov	r0, r5
    d5d8:	9302      	str	r3, [sp, #8]
    d5da:	466b      	mov	r3, sp
    d5dc:	9101      	str	r1, [sp, #4]
    d5de:	f8ad 2000 	strh.w	r2, [sp]
    d5e2:	cb0e      	ldmia	r3, {r1, r2, r3}
    d5e4:	f005 fcb4 	bl	12f50 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    d5e8:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    d5ec:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    d5f0:	2b00      	cmp	r3, #0
    d5f2:	d1d1      	bne.n	d598 <SDClass::mediaPresent()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    d5f4:	2301      	movs	r3, #1
    d5f6:	4629      	mov	r1, r5
    d5f8:	4630      	mov	r0, r6
    d5fa:	461a      	mov	r2, r3
    d5fc:	f004 fd70 	bl	120e0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    d600:	2800      	cmp	r0, #0
    d602:	d1dc      	bne.n	d5be <SDClass::mediaPresent()+0x92>
    d604:	e7c8      	b.n	d598 <SDClass::mediaPresent()+0x6c>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    d606:	f00e f83d 	bl	1b684 <digitalRead>
    d60a:	3800      	subs	r0, #0
    d60c:	bf18      	it	ne
    d60e:	2001      	movne	r0, #1
    d610:	e7d5      	b.n	d5be <SDClass::mediaPresent()+0x92>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    d612:	f00e f837 	bl	1b684 <digitalRead>
			if (ret) {
    d616:	2800      	cmp	r0, #0
    d618:	d1ab      	bne.n	d572 <SDClass::mediaPresent()+0x46>
    d61a:	e7cf      	b.n	d5bc <SDClass::mediaPresent()+0x90>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    d61c:	4b19      	ldr	r3, [pc, #100]	; (d684 <SDClass::mediaPresent()+0x158>)
    d61e:	689b      	ldr	r3, [r3, #8]
    d620:	039b      	lsls	r3, r3, #14
    d622:	d5cb      	bpl.n	d5bc <SDClass::mediaPresent()+0x90>
    d624:	e7a5      	b.n	d572 <SDClass::mediaPresent()+0x46>
				s = card->status();
    d626:	682b      	ldr	r3, [r5, #0]
    d628:	4628      	mov	r0, r5
    d62a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d62c:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    d62e:	1c42      	adds	r2, r0, #1
    d630:	d08a      	beq.n	d548 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    d632:	b9f8      	cbnz	r0, d674 <SDClass::mediaPresent()+0x148>
				if (csPin_ == BUILTIN_SDCARD) {
    d634:	f894 34d1 	ldrb.w	r3, [r4, #1233]	; 0x4d1
    d638:	2bfe      	cmp	r3, #254	; 0xfe
    d63a:	d1bf      	bne.n	d5bc <SDClass::mediaPresent()+0x90>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    d63c:	2103      	movs	r1, #3
    d63e:	202e      	movs	r0, #46	; 0x2e
    d640:	f00e f832 	bl	1b6a8 <pinMode>
	uint32_t begin = ARM_DWT_CYCCNT;
    d644:	490c      	ldr	r1, [pc, #48]	; (d678 <SDClass::mediaPresent()+0x14c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d646:	4a0d      	ldr	r2, [pc, #52]	; (d67c <SDClass::mediaPresent()+0x150>)
    d648:	4b0d      	ldr	r3, [pc, #52]	; (d680 <SDClass::mediaPresent()+0x154>)
	uint32_t begin = ARM_DWT_CYCCNT;
    d64a:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d64c:	6812      	ldr	r2, [r2, #0]
    d64e:	fba3 3202 	umull	r3, r2, r3, r2
    d652:	0c92      	lsrs	r2, r2, #18
    d654:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d658:	684b      	ldr	r3, [r1, #4]
    d65a:	1a1b      	subs	r3, r3, r0
    d65c:	429a      	cmp	r2, r3
    d65e:	d8fb      	bhi.n	d658 <SDClass::mediaPresent()+0x12c>
    d660:	e7ac      	b.n	d5bc <SDClass::mediaPresent()+0x90>
    d662:	2301      	movs	r3, #1
    d664:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    d668:	4630      	mov	r0, r6
    d66a:	461a      	mov	r2, r3
    d66c:	f004 fd38 	bl	120e0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    d670:	2800      	cmp	r0, #0
    d672:	d091      	beq.n	d598 <SDClass::mediaPresent()+0x6c>
				ret = true;
    d674:	2001      	movs	r0, #1
    d676:	e7a2      	b.n	d5be <SDClass::mediaPresent()+0x92>
    d678:	e0001000 	.word	0xe0001000
    d67c:	20008aac 	.word	0x20008aac
    d680:	431bde83 	.word	0x431bde83
    d684:	42008000 	.word	0x42008000

0000d688 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    d688:	4818      	ldr	r0, [pc, #96]	; (d6ec <_GLOBAL__sub_I_SD+0x64>)
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    d68a:	f04f 0c29 	mov.w	ip, #41	; 0x29
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    d68e:	4a18      	ldr	r2, [pc, #96]	; (d6f0 <_GLOBAL__sub_I_SD+0x68>)
  FsVolume() {}
    d690:	2300      	movs	r3, #0
	SPISettings() : _clock(4000000) {
    d692:	4918      	ldr	r1, [pc, #96]	; (d6f4 <_GLOBAL__sub_I_SD+0x6c>)
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    d694:	b410      	push	{r4}
    d696:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    d69a:	2207      	movs	r2, #7
    d69c:	f880 c4b1 	strb.w	ip, [r0, #1201]	; 0x4b1
    d6a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    d6a4:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    d6a8:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    d6ac:	4c12      	ldr	r4, [pc, #72]	; (d6f8 <_GLOBAL__sub_I_SD+0x70>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    d6ae:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    d6b2:	4a12      	ldr	r2, [pc, #72]	; (d6fc <_GLOBAL__sub_I_SD+0x74>)
    d6b4:	f8a0 14d0 	strh.w	r1, [r0, #1232]	; 0x4d0
  SdioConfig() {}
    d6b8:	f8a0 349c 	strh.w	r3, [r0, #1180]	; 0x49c
  SharedSpiCard() {}
    d6bc:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
    d6c0:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    d6c4:	f880 c4d2 	strb.w	ip, [r0, #1234]	; 0x4d2
    d6c8:	6004      	str	r4, [r0, #0]
  DedicatedSpiCard() {}
    d6ca:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
SDClass SD;
    d6ce:	490c      	ldr	r1, [pc, #48]	; (d700 <_GLOBAL__sub_I_SD+0x78>)
    d6d0:	4a0c      	ldr	r2, [pc, #48]	; (d704 <_GLOBAL__sub_I_SD+0x7c>)
}
    d6d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    d6d6:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    d6da:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    d6de:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
    d6e2:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
SDClass SD;
    d6e6:	f012 ba4f 	b.w	1fb88 <__aeabi_atexit>
    d6ea:	bf00      	nop
    d6ec:	2000a8ac 	.word	0x2000a8ac
    d6f0:	20003efc 	.word	0x20003efc
    d6f4:	003d0900 	.word	0x003d0900
    d6f8:	20003e9c 	.word	0x20003e9c
    d6fc:	20003ccc 	.word	0x20003ccc
    d700:	0000d0c9 	.word	0x0000d0c9
    d704:	20009460 	.word	0x20009460

0000d708 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    d708:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    d70a:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    d70e:	b084      	sub	sp, #16
    d710:	468c      	mov	ip, r1
    d712:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    d714:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    d716:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    d718:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    d71c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    d720:	ea4f 124c 	mov.w	r2, ip, lsl #5
    d724:	4629      	mov	r1, r5
    d726:	6a20      	ldr	r0, [r4, #32]
    d728:	f001 fec4 	bl	f4b4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    d72c:	2801      	cmp	r0, #1
    d72e:	d106      	bne.n	d73e <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    d730:	4632      	mov	r2, r6
    d732:	4629      	mov	r1, r5
    d734:	6a20      	ldr	r0, [r4, #32]
    d736:	f001 fea1 	bl	f47c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    d73a:	b004      	add	sp, #16
    d73c:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    d73e:	2000      	movs	r0, #0
}
    d740:	b004      	add	sp, #16
    d742:	bd70      	pop	{r4, r5, r6, pc}

0000d744 <ExFatFile::close()>:
bool ExFatFile::close() {
    d744:	b510      	push	{r4, lr}
    d746:	4604      	mov	r4, r0
  bool rtn = sync();
    d748:	f000 fdba 	bl	e2c0 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    d74c:	2300      	movs	r3, #0
    d74e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    d752:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    d756:	bd10      	pop	{r4, pc}

0000d758 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    d758:	b538      	push	{r3, r4, r5, lr}
    d75a:	4614      	mov	r4, r2
    d75c:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    d75e:	2200      	movs	r2, #0
    d760:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d764:	6a00      	ldr	r0, [r0, #32]
    d766:	f001 fe89 	bl	f47c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    d76a:	4603      	mov	r3, r0
    d76c:	b120      	cbz	r0, d778 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    d76e:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    d770:	2001      	movs	r0, #1
  *pdate = getLe16(df->createDate);
    d772:	802a      	strh	r2, [r5, #0]
    d774:	891b      	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    d776:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    d778:	bd38      	pop	{r3, r4, r5, pc}
    d77a:	bf00      	nop

0000d77c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    d77c:	b538      	push	{r3, r4, r5, lr}
    d77e:	4614      	mov	r4, r2
    d780:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    d782:	2200      	movs	r2, #0
    d784:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d788:	6a00      	ldr	r0, [r0, #32]
    d78a:	f001 fe77 	bl	f47c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    d78e:	4603      	mov	r3, r0
    d790:	b120      	cbz	r0, d79c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    d792:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    d794:	2001      	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    d796:	802a      	strh	r2, [r5, #0]
    d798:	899b      	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    d79a:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    d79c:	bd38      	pop	{r3, r4, r5, pc}
    d79e:	bf00      	nop

0000d7a0 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    d7a0:	b538      	push	{r3, r4, r5, lr}
    d7a2:	460d      	mov	r5, r1
  if (isOpen()) {
    d7a4:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    d7a8:	b109      	cbz	r1, d7ae <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    d7aa:	2000      	movs	r0, #0
}
    d7ac:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    d7ae:	2238      	movs	r2, #56	; 0x38
    d7b0:	4604      	mov	r4, r0
    d7b2:	f014 fda5 	bl	22300 <memset>
  m_flags = FILE_FLAG_READ;
    d7b6:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    d7b8:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    d7ba:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    d7bc:	4618      	mov	r0, r3
    d7be:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    d7c2:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    d7c6:	bd38      	pop	{r3, r4, r5, pc}

0000d7c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    d7c8:	b4f0      	push	{r4, r5, r6, r7}
    d7ca:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    d7cc:	7809      	ldrb	r1, [r1, #0]
    d7ce:	2920      	cmp	r1, #32
    d7d0:	d103      	bne.n	d7da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    d7d2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    d7d6:	2c20      	cmp	r4, #32
    d7d8:	d0fb      	beq.n	d7d2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    d7da:	6015      	str	r5, [r2, #0]
  fname->end = path;
    d7dc:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    d7de:	782c      	ldrb	r4, [r5, #0]
    d7e0:	2c2f      	cmp	r4, #47	; 0x2f
    d7e2:	d011      	beq.n	d808 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    d7e4:	b184      	cbz	r4, d808 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    d7e6:	1c6e      	adds	r6, r5, #1
    d7e8:	2c3c      	cmp	r4, #60	; 0x3c
    d7ea:	4f1d      	ldr	r7, [pc, #116]	; (d860 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    d7ec:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    d7ee:	d82a      	bhi.n	d846 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    d7f0:	2c21      	cmp	r4, #33	; 0x21
    d7f2:	d812      	bhi.n	d81a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    d7f4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    d7f8:	f1bc 0f1e 	cmp.w	ip, #30
    d7fc:	d816      	bhi.n	d82c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    d7fe:	2000      	movs	r0, #0
    d800:	bcf0      	pop	{r4, r5, r6, r7}
    d802:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    d804:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    d808:	2c20      	cmp	r4, #32
    d80a:	d0fb      	beq.n	d804 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    d80c:	2c2f      	cmp	r4, #47	; 0x2f
    d80e:	d0f9      	beq.n	d804 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    d810:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    d812:	4611      	mov	r1, r2
}
    d814:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    d816:	f001 bd1f 	b.w	f258 <ExFatFile::hashName(ExName_t*)>
    d81a:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    d81e:	fa5f fc8c 	uxtb.w	ip, ip
    d822:	fa27 fc0c 	lsr.w	ip, r7, ip
    d826:	f01c 0f01 	tst.w	ip, #1
    d82a:	d1e8      	bne.n	d7fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    d82c:	2c2e      	cmp	r4, #46	; 0x2e
    d82e:	d001      	beq.n	d834 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    d830:	2c20      	cmp	r4, #32
    d832:	d10d      	bne.n	d850 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    d834:	f816 4b01 	ldrb.w	r4, [r6], #1
    d838:	2c00      	cmp	r4, #0
    d83a:	d0e5      	beq.n	d808 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    d83c:	2c2f      	cmp	r4, #47	; 0x2f
    d83e:	d0e3      	beq.n	d808 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    d840:	2c3c      	cmp	r4, #60	; 0x3c
    d842:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    d844:	d9d4      	bls.n	d7f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    d846:	2c5c      	cmp	r4, #92	; 0x5c
    d848:	d0d9      	beq.n	d7fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    d84a:	d903      	bls.n	d854 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    d84c:	2c7c      	cmp	r4, #124	; 0x7c
    d84e:	d0d6      	beq.n	d7fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    d850:	6096      	str	r6, [r2, #8]
    d852:	e7ef      	b.n	d834 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    d854:	3c3e      	subs	r4, #62	; 0x3e
    d856:	2c01      	cmp	r4, #1
    d858:	d8fa      	bhi.n	d850 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    d85a:	2000      	movs	r0, #0
    d85c:	bcf0      	pop	{r4, r5, r6, r7}
    d85e:	4770      	bx	lr
    d860:	05002101 	.word	0x05002101

0000d864 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    d868:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    d86c:	b083      	sub	sp, #12
    d86e:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    d870:	07dc      	lsls	r4, r3, #31
    d872:	d574      	bpl.n	d95e <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    d874:	0658      	lsls	r0, r3, #25
    d876:	460f      	mov	r7, r1
    d878:	4690      	mov	r8, r2
    d87a:	f140 80b0 	bpl.w	d9de <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    d87e:	e9d5 2300 	ldrd	r2, r3, [r5]
    d882:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    d886:	eb18 0402 	adds.w	r4, r8, r2
    d88a:	f143 0300 	adc.w	r3, r3, #0
    d88e:	42a1      	cmp	r1, r4
    d890:	eb70 0303 	sbcs.w	r3, r0, r3
    d894:	f0c0 80a9 	bcc.w	d9ea <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    d898:	f1b8 0f00 	cmp.w	r8, #0
    d89c:	d05b      	beq.n	d956 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    d89e:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    d8a0:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    d8a4:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    d8a8:	f8d5 a020 	ldr.w	sl, [r5, #32]
    d8ac:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    d8b0:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    d8b2:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    d8b6:	2c00      	cmp	r4, #0
    d8b8:	d170      	bne.n	d99c <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    d8ba:	4313      	orrs	r3, r2
    d8bc:	d170      	bne.n	d9a0 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    d8be:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    d8c2:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    d8c4:	bf4c      	ite	mi
    d8c6:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    d8ca:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    d8cc:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    d8ce:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    d8d2:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    d8d4:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    d8d8:	0a63      	lsrs	r3, r4, #9
    d8da:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    d8dc:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    d8e0:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    d8e2:	f1bb 0f00 	cmp.w	fp, #0
    d8e6:	d145      	bne.n	d974 <ExFatFile::read(void*, unsigned int)+0x110>
    d8e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    d8ec:	d342      	bcc.n	d974 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    d8ee:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    d8f2:	4291      	cmp	r1, r2
    d8f4:	d03e      	beq.n	d974 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    d8f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    d8fa:	d358      	bcc.n	d9ae <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    d8fc:	f04f 0b01 	mov.w	fp, #1
    d900:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    d904:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    d908:	0a73      	lsrs	r3, r6, #9
    d90a:	459b      	cmp	fp, r3
    d90c:	bf28      	it	cs
    d90e:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    d910:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    d912:	ea4f 244b 	mov.w	r4, fp, lsl #9
    d916:	d80a      	bhi.n	d92e <ExFatFile::read(void*, unsigned int)+0xca>
    d918:	eb01 030b 	add.w	r3, r1, fp
    d91c:	429a      	cmp	r2, r3
    d91e:	d206      	bcs.n	d92e <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    d920:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    d924:	9101      	str	r1, [sp, #4]
    d926:	f006 fd8f 	bl	14448 <FsCache::sync()>
    d92a:	9901      	ldr	r1, [sp, #4]
    d92c:	b1b8      	cbz	r0, d95e <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    d92e:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    d932:	465b      	mov	r3, fp
    d934:	6802      	ldr	r2, [r0, #0]
    d936:	f8d2 a014 	ldr.w	sl, [r2, #20]
    d93a:	463a      	mov	r2, r7
    d93c:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    d93e:	b170      	cbz	r0, d95e <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    d940:	4623      	mov	r3, r4
    dst += n;
    d942:	4427      	add	r7, r4
    m_curPosition += n;
    d944:	e9d5 1200 	ldrd	r1, r2, [r5]
    d948:	185b      	adds	r3, r3, r1
    d94a:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    d94e:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    d950:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    d954:	d1a8      	bne.n	d8a8 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    d956:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    d958:	b003      	add	sp, #12
    d95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    d95e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    d962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    d966:	f043 0302 	orr.w	r3, r3, #2
    d96a:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    d96e:	b003      	add	sp, #12
    d970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    d974:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    d978:	2200      	movs	r2, #0
    d97a:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    d97e:	42b4      	cmp	r4, r6
    d980:	bf28      	it	cs
    d982:	4634      	movcs	r4, r6
    d984:	f006 fd8c 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    d988:	2800      	cmp	r0, #0
    d98a:	d0e8      	beq.n	d95e <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    d98c:	eb00 010b 	add.w	r1, r0, fp
    d990:	4622      	mov	r2, r4
    d992:	4638      	mov	r0, r7
    d994:	f00e f948 	bl	1bc28 <memcpy>
    m_curPosition += n;
    d998:	4623      	mov	r3, r4
    d99a:	e7d2      	b.n	d942 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    d99c:	69aa      	ldr	r2, [r5, #24]
    d99e:	e796      	b.n	d8ce <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    d9a0:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    d9a4:	065b      	lsls	r3, r3, #25
    d9a6:	d50e      	bpl.n	d9c6 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    d9a8:	69aa      	ldr	r2, [r5, #24]
    d9aa:	3201      	adds	r2, #1
    d9ac:	e78e      	b.n	d8cc <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    d9ae:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    d9b2:	463a      	mov	r2, r7
    d9b4:	6803      	ldr	r3, [r0, #0]
    d9b6:	691b      	ldr	r3, [r3, #16]
    d9b8:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    d9ba:	2800      	cmp	r0, #0
    d9bc:	d0cf      	beq.n	d95e <ExFatFile::read(void*, unsigned int)+0xfa>
    d9be:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    d9c2:	461c      	mov	r4, r3
    d9c4:	e7bd      	b.n	d942 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    d9c6:	464a      	mov	r2, r9
    d9c8:	4650      	mov	r0, sl
    d9ca:	69a9      	ldr	r1, [r5, #24]
    d9cc:	f001 fdb4 	bl	f538 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    d9d0:	2800      	cmp	r0, #0
    d9d2:	dbc4      	blt.n	d95e <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    d9d4:	d00c      	beq.n	d9f0 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    d9d6:	f8d5 a020 	ldr.w	sl, [r5, #32]
    d9da:	69aa      	ldr	r2, [r5, #24]
    d9dc:	e777      	b.n	d8ce <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    d9de:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    d9e2:	0719      	lsls	r1, r3, #28
    d9e4:	f57f af58 	bpl.w	d898 <ExFatFile::read(void*, unsigned int)+0x34>
    d9e8:	e749      	b.n	d87e <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    d9ea:	eba1 0802 	sub.w	r8, r1, r2
    d9ee:	e753      	b.n	d898 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    d9f0:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    d9f4:	f013 0f50 	tst.w	r3, #80	; 0x50
    d9f8:	d0b1      	beq.n	d95e <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    d9fa:	eba8 0806 	sub.w	r8, r8, r6
    d9fe:	4640      	mov	r0, r8
    da00:	e7aa      	b.n	d958 <ExFatFile::read(void*, unsigned int)+0xf4>
    da02:	bf00      	nop

0000da04 <ExFatFile::peek()>:
int ExFatFile::peek() {
    da04:	b5f0      	push	{r4, r5, r6, r7, lr}
    da06:	b083      	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    da08:	2201      	movs	r2, #1
    da0a:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    da0c:	6985      	ldr	r5, [r0, #24]
    da0e:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    da12:	e9d0 6700 	ldrd	r6, r7, [r0]
    da16:	f7ff ff25 	bl	d864 <ExFatFile::read(void*, unsigned int)>
    da1a:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    da1c:	61a5      	str	r5, [r4, #24]
    da1e:	bf0c      	ite	eq
    da20:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    da24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    da28:	e9c4 6700 	strd	r6, r7, [r4]
}
    da2c:	b003      	add	sp, #12
    da2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000da30 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da34:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    da36:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    da3a:	b083      	sub	sp, #12
    da3c:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    da3e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    da42:	2b00      	cmp	r3, #0
    da44:	d051      	beq.n	daea <ExFatFile::seekSet(unsigned long long)+0xba>
    da46:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    da48:	e9d0 1c00 	ldrd	r1, ip, [r0]
    da4c:	45bc      	cmp	ip, r7
    da4e:	bf08      	it	eq
    da50:	4291      	cmpeq	r1, r2
    da52:	d05c      	beq.n	db0e <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    da54:	ea56 0207 	orrs.w	r2, r6, r7
    da58:	d04d      	beq.n	daf6 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    da5a:	071d      	lsls	r5, r3, #28
    da5c:	d504      	bpl.n	da68 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    da5e:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    da62:	42b0      	cmp	r0, r6
    da64:	41ba      	sbcs	r2, r7
    da66:	d340      	bcc.n	daea <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    da68:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    da6c:	1e75      	subs	r5, r6, #1
    da6e:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    da72:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    da74:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    da78:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    da7c:	3209      	adds	r2, #9
    da7e:	b2d2      	uxtb	r2, r2
    da80:	f1c2 0e20 	rsb	lr, r2, #32
    da84:	40d5      	lsrs	r5, r2
    da86:	f1a2 0920 	sub.w	r9, r2, #32
    da8a:	fa00 fb0e 	lsl.w	fp, r0, lr
    da8e:	fa20 f009 	lsr.w	r0, r0, r9
    da92:	ea45 050b 	orr.w	r5, r5, fp
    da96:	4305      	orrs	r5, r0
  if (isContiguous()) {
    da98:	9801      	ldr	r0, [sp, #4]
    da9a:	0640      	lsls	r0, r0, #25
    da9c:	d433      	bmi.n	db06 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    da9e:	1e48      	subs	r0, r1, #1
    daa0:	fa20 f202 	lsr.w	r2, r0, r2
    daa4:	f14c 30ff 	adc.w	r0, ip, #4294967295	; 0xffffffff
  if (nNew < nCur || m_curPosition == 0) {
    daa8:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    daac:	fa00 fe0e 	lsl.w	lr, r0, lr
    dab0:	fa20 f009 	lsr.w	r0, r0, r9
    dab4:	ea42 020e 	orr.w	r2, r2, lr
    dab8:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    dabc:	d001      	beq.n	dac2 <ExFatFile::seekSet(unsigned long long)+0x92>
    dabe:	4295      	cmp	r5, r2
    dac0:	d229      	bcs.n	db16 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    dac2:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    dac4:	bf4c      	ite	mi
    dac6:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    daca:	69e3      	ldrpl	r3, [r4, #28]
    dacc:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    dace:	f104 0918 	add.w	r9, r4, #24
    dad2:	e006      	b.n	dae2 <ExFatFile::seekSet(unsigned long long)+0xb2>
    dad4:	69a1      	ldr	r1, [r4, #24]
    dad6:	3d01      	subs	r5, #1
    dad8:	6a20      	ldr	r0, [r4, #32]
    dada:	f001 fd2d 	bl	f538 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    dade:	2800      	cmp	r0, #0
    dae0:	dd03      	ble.n	daea <ExFatFile::seekSet(unsigned long long)+0xba>
    dae2:	464a      	mov	r2, r9
  while (nNew--) {
    dae4:	2d00      	cmp	r5, #0
    dae6:	d1f5      	bne.n	dad4 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    dae8:	e007      	b.n	dafa <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    daea:	2000      	movs	r0, #0
  m_curCluster = tmp;
    daec:	f8c4 8018 	str.w	r8, [r4, #24]
}
    daf0:	b003      	add	sp, #12
    daf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    daf6:	2300      	movs	r3, #0
    daf8:	6183      	str	r3, [r0, #24]
  return true;
    dafa:	2001      	movs	r0, #1
  m_curPosition = pos;
    dafc:	e9c4 6700 	strd	r6, r7, [r4]
}
    db00:	b003      	add	sp, #12
    db02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    db06:	69e3      	ldr	r3, [r4, #28]
    db08:	442b      	add	r3, r5
    db0a:	61a3      	str	r3, [r4, #24]
    goto done;
    db0c:	e7f5      	b.n	dafa <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    db0e:	2001      	movs	r0, #1
}
    db10:	b003      	add	sp, #12
    db12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    db16:	1aad      	subs	r5, r5, r2
    db18:	e7d9      	b.n	dace <ExFatFile::seekSet(unsigned long long)+0x9e>
    db1a:	bf00      	nop

0000db1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    db1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db20:	4617      	mov	r7, r2
    db22:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    db26:	b08f      	sub	sp, #60	; 0x3c
    db28:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    db2a:	2a00      	cmp	r2, #0
    db2c:	f040 80d7 	bne.w	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    db30:	468b      	mov	fp, r1
    db32:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    db36:	f011 0f50 	tst.w	r1, #80	; 0x50
    db3a:	f000 80d0 	beq.w	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    db3e:	f003 0103 	and.w	r1, r3, #3
    db42:	469a      	mov	sl, r3
    db44:	2903      	cmp	r1, #3
    db46:	f000 80ca 	beq.w	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    db4a:	3101      	adds	r1, #1
    db4c:	f003 0008 	and.w	r0, r3, #8
    db50:	ea41 0300 	orr.w	r3, r1, r0
    db54:	9302      	str	r3, [sp, #8]
  if (fname) {
    db56:	2f00      	cmp	r7, #0
    db58:	f000 80cb 	beq.w	dcf2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    db5c:	6939      	ldr	r1, [r7, #16]
    db5e:	f101 080e 	add.w	r8, r1, #14
    db62:	49b6      	ldr	r1, [pc, #728]	; (de3c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    db64:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    db68:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    db6c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    db70:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    db72:	f108 0802 	add.w	r8, r8, #2
    db76:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    db7a:	d005      	beq.n	db88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    db7c:	2000      	movs	r0, #0
    db7e:	2100      	movs	r1, #0
    m_curCluster = 0;
    db80:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    db84:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    db88:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    db8a:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    db8c:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    db8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    db92:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    db94:	2220      	movs	r2, #32
    db96:	a906      	add	r1, sp, #24
    db98:	4658      	mov	r0, fp
    db9a:	f7ff fe63 	bl	d864 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    db9e:	b300      	cbz	r0, dbe2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    dba0:	2820      	cmp	r0, #32
    dba2:	f040 809c 	bne.w	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    dba6:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    dbaa:	f89d 3018 	ldrb.w	r3, [sp, #24]
    dbae:	2a00      	cmp	r2, #0
    dbb0:	f2c0 80a2 	blt.w	dcf8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    dbb4:	b934      	cbnz	r4, dbc4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    dbb6:	f8db 2000 	ldr.w	r2, [fp]
    dbba:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    dbbe:	f8db 2018 	ldr.w	r2, [fp, #24]
    dbc2:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    dbc4:	4544      	cmp	r4, r8
    dbc6:	d201      	bcs.n	dbcc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    dbc8:	3401      	adds	r4, #1
    dbca:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    dbcc:	2b00      	cmp	r3, #0
    dbce:	f000 8113 	beq.w	ddf8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    dbd2:	2220      	movs	r2, #32
    dbd4:	a906      	add	r1, sp, #24
    dbd6:	4658      	mov	r0, fp
      inSet = false;
    dbd8:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    dbda:	f7ff fe43 	bl	d864 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    dbde:	2800      	cmp	r0, #0
    dbe0:	d1de      	bne.n	dba0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    dbe2:	f41a 7f00 	tst.w	sl, #512	; 0x200
    dbe6:	d07a      	beq.n	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    dbe8:	9b02      	ldr	r3, [sp, #8]
    dbea:	079b      	lsls	r3, r3, #30
    dbec:	d577      	bpl.n	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    dbee:	2f00      	cmp	r7, #0
    dbf0:	d075      	beq.n	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    dbf2:	4544      	cmp	r4, r8
    dbf4:	d217      	bcs.n	dc26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    dbf6:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    dbfa:	2220      	movs	r2, #32
    dbfc:	a906      	add	r1, sp, #24
    dbfe:	4658      	mov	r0, fp
    dc00:	f7ff fe30 	bl	d864 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    dc04:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    dc06:	2800      	cmp	r0, #0
    dc08:	d061      	beq.n	dcce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    dc0a:	2820      	cmp	r0, #32
    dc0c:	d167      	bne.n	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    dc0e:	b92c      	cbnz	r4, dc1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    dc10:	f8db 2000 	ldr.w	r2, [fp]
    dc14:	f8db a018 	ldr.w	sl, [fp, #24]
    dc18:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    dc1c:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    dc1e:	45a0      	cmp	r8, r4
    dc20:	d8eb      	bhi.n	dbfa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    dc22:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    dc26:	2238      	movs	r2, #56	; 0x38
    dc28:	2100      	movs	r1, #0
    dc2a:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    dc2c:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    dc30:	f014 fb66 	bl	22300 <memset>
  ExFatVolume* volume() const {return m_vol;}
    dc34:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    dc38:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    dc3c:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    dc3e:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    dc40:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    dc42:	2600      	movs	r6, #0
  m_dirPos = freePos;
    dc44:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    dc48:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    dc4c:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    dc4e:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    dc52:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    dc54:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    dc56:	f1b8 0f00 	cmp.w	r8, #0
    dc5a:	d033      	beq.n	dcc4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    dc5c:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
    dc60:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    dc62:	f8df a1dc 	ldr.w	sl, [pc, #476]	; de40 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    dc66:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    dc6a:	2201      	movs	r2, #1
    dc6c:	4659      	mov	r1, fp
    dc6e:	4628      	mov	r0, r5
    dc70:	f7ff fd4a 	bl	d708 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    dc74:	4604      	mov	r4, r0
    dc76:	b390      	cbz	r0, dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    dc78:	f990 2000 	ldrsb.w	r2, [r0]
    dc7c:	2a00      	cmp	r2, #0
    dc7e:	db2e      	blt.n	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    dc80:	2220      	movs	r2, #32
    dc82:	2100      	movs	r1, #0
    dc84:	f014 fb3c 	bl	22300 <memset>
    if (i == 0) {
    dc88:	2e00      	cmp	r6, #0
    dc8a:	f000 80bc 	beq.w	de06 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    dc8e:	f1bb 0f01 	cmp.w	fp, #1
    dc92:	f000 80d7 	beq.w	de44 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    dc96:	23c1      	movs	r3, #193	; 0xc1
    dc98:	46a3      	mov	fp, r4
    dc9a:	341e      	adds	r4, #30
    dc9c:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    dca0:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    dca2:	4638      	mov	r0, r7
    dca4:	b91b      	cbnz	r3, dcae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    dca6:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    dcaa:	429a      	cmp	r2, r3
    dcac:	d005      	beq.n	dcba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    dcae:	f006 fc1f 	bl	144f0 <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    dcb2:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    dcb6:	45a3      	cmp	fp, r4
    dcb8:	d1f2      	bne.n	dca0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    dcba:	3601      	adds	r6, #1
    dcbc:	fa5f fb86 	uxtb.w	fp, r6
    dcc0:	45d8      	cmp	r8, fp
    dcc2:	d8d2      	bhi.n	dc6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    dcc4:	4628      	mov	r0, r5
    dcc6:	f000 fafb 	bl	e2c0 <ExFatFile::sync()>
    dcca:	4606      	mov	r6, r0
    dccc:	e00d      	b.n	dcea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    dcce:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    dcd0:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    dcd4:	f000 fb24 	bl	e320 <ExFatFile::addDirCluster()>
    dcd8:	2800      	cmp	r0, #0
    dcda:	f040 8091 	bne.w	de00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    dcde:	2300      	movs	r3, #0
  return false;
    dce0:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    dce2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    dce6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    dcea:	4630      	mov	r0, r6
    dcec:	b00f      	add	sp, #60	; 0x3c
    dcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    dcf2:	f04f 0803 	mov.w	r8, #3
    dcf6:	e747      	b.n	db88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    dcf8:	bb56      	cbnz	r6, dd50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    dcfa:	4544      	cmp	r4, r8
    dcfc:	bf38      	it	cc
    dcfe:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    dd00:	2b85      	cmp	r3, #133	; 0x85
    dd02:	f47f af47 	bne.w	db94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    dd06:	4631      	mov	r1, r6
    dd08:	2238      	movs	r2, #56	; 0x38
    dd0a:	4628      	mov	r0, r5
      inSet = true;
    dd0c:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    dd0e:	f014 faf7 	bl	22300 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    dd12:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    dd16:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dd1a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    dd1e:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    dd22:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    dd24:	bf58      	it	pl
    dd26:	f043 0308 	orrpl.w	r3, r3, #8
    dd2a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    dd2e:	f8db 3000 	ldr.w	r3, [fp]
    dd32:	f8db 2020 	ldr.w	r2, [fp, #32]
    dd36:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    dd38:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    dd3a:	f8db 2018 	ldr.w	r2, [fp, #24]
    dd3e:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    dd42:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    dd46:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    dd4a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    dd4e:	e721      	b.n	db94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    dd50:	2bc0      	cmp	r3, #192	; 0xc0
    dd52:	d028      	beq.n	dda6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    dd54:	2bc1      	cmp	r3, #193	; 0xc1
    dd56:	f47f af3c 	bne.w	dbd2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    dd5a:	463a      	mov	r2, r7
    dd5c:	a906      	add	r1, sp, #24
    dd5e:	4628      	mov	r0, r5
    dd60:	f001 f9ee 	bl	f140 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    dd64:	b1e8      	cbz	r0, dda2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    dd66:	89bb      	ldrh	r3, [r7, #12]
    dd68:	b9db      	cbnz	r3, dda2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    dd6a:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    dd6e:	429a      	cmp	r2, r3
    dd70:	d117      	bne.n	dda2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    dd72:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    dd76:	d1b2      	bne.n	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    dd78:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    dd7c:	d170      	bne.n	de60 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    dd7e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    dd82:	0798      	lsls	r0, r3, #30
    dd84:	d46c      	bmi.n	de60 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    dd86:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    dd8a:	d1a8      	bne.n	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    dd8c:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    dd90:	d0ab      	beq.n	dcea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    dd92:	4628      	mov	r0, r5
    dd94:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    dd98:	f7ff fe4a 	bl	da30 <ExFatFile::seekSet(unsigned long long)>
    dd9c:	2800      	cmp	r0, #0
    dd9e:	d1a4      	bne.n	dcea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    dda0:	e79d      	b.n	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    dda2:	4606      	mov	r6, r0
    dda4:	e6f6      	b.n	db94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    dda6:	9b02      	ldr	r3, [sp, #8]
    dda8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    ddac:	f89d 3019 	ldrb.w	r3, [sp, #25]
    ddb0:	079b      	lsls	r3, r3, #30
    ddb2:	d502      	bpl.n	ddba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    ddb4:	9b03      	ldr	r3, [sp, #12]
    ddb6:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    ddba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ddbc:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    ddbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ddc2:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    ddc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ddca:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    ddce:	2f00      	cmp	r7, #0
    ddd0:	d0cf      	beq.n	dd72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    ddd2:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    ddd6:	693a      	ldr	r2, [r7, #16]
    ddd8:	81bb      	strh	r3, [r7, #12]
    next = begin;
    ddda:	683b      	ldr	r3, [r7, #0]
    dddc:	607b      	str	r3, [r7, #4]
    ddde:	f89d 301b 	ldrb.w	r3, [sp, #27]
    dde2:	429a      	cmp	r2, r3
    dde4:	f47f aef5 	bne.w	dbd2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    dde8:	8abe      	ldrh	r6, [r7, #20]
    ddea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    ddee:	1af6      	subs	r6, r6, r3
    ddf0:	fab6 f686 	clz	r6, r6
    ddf4:	0976      	lsrs	r6, r6, #5
    ddf6:	e6cd      	b.n	db94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    ddf8:	2f00      	cmp	r7, #0
    ddfa:	f47f aef2 	bne.w	dbe2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    ddfe:	e76e      	b.n	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    de00:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    de04:	e70b      	b.n	dc1e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    de06:	2385      	movs	r3, #133	; 0x85
    de08:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    de0a:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    de0e:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    de12:	f8da 3000 	ldr.w	r3, [sl]
    de16:	2b00      	cmp	r3, #0
    de18:	d046      	beq.n	dea8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    de1a:	f10d 0213 	add.w	r2, sp, #19
    de1e:	f10d 0116 	add.w	r1, sp, #22
    de22:	a805      	add	r0, sp, #20
    de24:	4798      	blx	r3
    de26:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    de2a:	8163      	strh	r3, [r4, #10]
    de2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    de30:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    de32:	f89d 3013 	ldrb.w	r3, [sp, #19]
    de36:	7523      	strb	r3, [r4, #20]
    de38:	e73f      	b.n	dcba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    de3a:	bf00      	nop
    de3c:	88888889 	.word	0x88888889
    de40:	2000adbc 	.word	0x2000adbc
      dirStream->type = EXFAT_TYPE_STREAM;
    de44:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    de46:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    de4a:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    de4c:	9b02      	ldr	r3, [sp, #8]
    de4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    de52:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    de56:	693b      	ldr	r3, [r7, #16]
    de58:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    de5a:	8abb      	ldrh	r3, [r7, #20]
    de5c:	80a3      	strh	r3, [r4, #4]
}
    de5e:	e72c      	b.n	dcba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    de60:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    de64:	06d9      	lsls	r1, r3, #27
    de66:	f53f af3a 	bmi.w	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    de6a:	f013 0101 	ands.w	r1, r3, #1
    de6e:	f47f af36 	bne.w	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    de72:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    de76:	d089      	beq.n	dd8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    de78:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    de7c:	0792      	lsls	r2, r2, #30
    de7e:	f57f af2e 	bpl.w	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    de82:	2b00      	cmp	r3, #0
    de84:	f43f af2b 	beq.w	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    de88:	e9d5 3200 	ldrd	r3, r2, [r5]
    de8c:	4313      	orrs	r3, r2
    de8e:	d004      	beq.n	de9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    de90:	2200      	movs	r2, #0
    de92:	2300      	movs	r3, #0
    m_curCluster = 0;
    de94:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    de96:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    de9a:	4628      	mov	r0, r5
    de9c:	f000 fc42 	bl	e724 <ExFatFile::truncate()>
    dea0:	2800      	cmp	r0, #0
    dea2:	f43f af1c 	beq.w	dcde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    dea6:	e720      	b.n	dcea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    dea8:	f645 2321 	movw	r3, #23073	; 0x5a21
    deac:	8163      	strh	r3, [r4, #10]
    deae:	81e3      	strh	r3, [r4, #14]
    deb0:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    deb2:	e702      	b.n	dcba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

0000deb4 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    deb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    deb8:	2500      	movs	r5, #0
    deba:	b097      	sub	sp, #92	; 0x5c
    debc:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    debe:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    dec2:	9201      	str	r2, [sp, #4]
    dec4:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    dec6:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    deca:	2b00      	cmp	r3, #0
    decc:	d13e      	bne.n	df4c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    dece:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    ded2:	460f      	mov	r7, r1
    ded4:	f013 0f50 	tst.w	r3, #80	; 0x50
    ded8:	d038      	beq.n	df4c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    deda:	7813      	ldrb	r3, [r2, #0]
    dedc:	4604      	mov	r4, r0
    dede:	4616      	mov	r6, r2
    dee0:	2b2f      	cmp	r3, #47	; 0x2f
    dee2:	d037      	beq.n	df54 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    dee4:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    dee8:	ab01      	add	r3, sp, #4
    deea:	aa02      	add	r2, sp, #8
    deec:	4631      	mov	r1, r6
    deee:	4620      	mov	r0, r4
    def0:	f7ff fc6a 	bl	d7c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    def4:	b350      	cbz	r0, df4c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    def6:	9e01      	ldr	r6, [sp, #4]
    def8:	7833      	ldrb	r3, [r6, #0]
    defa:	2b00      	cmp	r3, #0
    defc:	d03e      	beq.n	df7c <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    defe:	2300      	movs	r3, #0
    df00:	aa02      	add	r2, sp, #8
    df02:	4639      	mov	r1, r7
    df04:	4620      	mov	r0, r4
    df06:	f7ff fe09 	bl	db1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    df0a:	b1f8      	cbz	r0, df4c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    df0c:	46a4      	mov	ip, r4
    df0e:	ad08      	add	r5, sp, #32
    df10:	f104 0730 	add.w	r7, r4, #48	; 0x30
    df14:	f8dc 0000 	ldr.w	r0, [ip]
    df18:	f10c 0c10 	add.w	ip, ip, #16
    df1c:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    df20:	46ae      	mov	lr, r5
    df22:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    df26:	3510      	adds	r5, #16
    df28:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    df2c:	45bc      	cmp	ip, r7
    df2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    df32:	d1ef      	bne.n	df14 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    df34:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    df38:	af08      	add	r7, sp, #32
    tmpDir = *this;
    df3a:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    df3c:	4620      	mov	r0, r4
    df3e:	f000 f9bf 	bl	e2c0 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    df42:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    df46:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    df4a:	e7cd      	b.n	dee8 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    df4c:	2000      	movs	r0, #0
}
    df4e:	b017      	add	sp, #92	; 0x5c
    df50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    df54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    df58:	292f      	cmp	r1, #47	; 0x2f
    df5a:	d0fb      	beq.n	df54 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    df5c:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    df5e:	b9b1      	cbnz	r1, df8e <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    df60:	2238      	movs	r2, #56	; 0x38
    df62:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    df64:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    df66:	f014 f9cb 	bl	22300 <memset>
  m_flags = FILE_FLAG_READ;
    df6a:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    df6c:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    df6e:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    df70:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    df72:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    df76:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    df7a:	e7e8      	b.n	df4e <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    df7c:	464b      	mov	r3, r9
    df7e:	aa02      	add	r2, sp, #8
    df80:	4639      	mov	r1, r7
    df82:	4620      	mov	r0, r4
    df84:	f7ff fdca 	bl	db1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    df88:	b017      	add	sp, #92	; 0x5c
    df8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    df8e:	2238      	movs	r2, #56	; 0x38
    df90:	2100      	movs	r1, #0
    df92:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    df94:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    df96:	f014 f9b3 	bl	22300 <memset>
  m_flags = FILE_FLAG_READ;
    df9a:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    df9c:	af08      	add	r7, sp, #32
  m_vol = vol;
    df9e:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    dfa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    dfa4:	2340      	movs	r3, #64	; 0x40
    dfa6:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    dfaa:	e79b      	b.n	dee4 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

0000dfac <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    dfac:	b119      	cbz	r1, dfb6 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    dfae:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    dfb2:	f7ff bf7f 	b.w	deb4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    dfb6:	4608      	mov	r0, r1
    dfb8:	4770      	bx	lr
    dfba:	bf00      	nop

0000dfbc <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    dfbc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    dfc0:	b963      	cbnz	r3, dfdc <ExFatFile::openNext(ExFatFile*, int)+0x20>
    dfc2:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    dfc6:	f013 0f50 	tst.w	r3, #80	; 0x50
    dfca:	d007      	beq.n	dfdc <ExFatFile::openNext(ExFatFile*, int)+0x20>
    dfcc:	680b      	ldr	r3, [r1, #0]
    dfce:	f013 0c1f 	ands.w	ip, r3, #31
    dfd2:	d103      	bne.n	dfdc <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    dfd4:	4613      	mov	r3, r2
    dfd6:	4662      	mov	r2, ip
    dfd8:	f7ff bda0 	b.w	db1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    dfdc:	2000      	movs	r0, #0
    dfde:	4770      	bx	lr

0000dfe0 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    dfe0:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    dfe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dfe4:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    dfe6:	6a00      	ldr	r0, [r0, #32]
    dfe8:	b101      	cbz	r1, dfec <ExFatFile::addCluster()+0xc>
    dfea:	3101      	adds	r1, #1
    dfec:	2201      	movs	r2, #1
    dfee:	f001 f969 	bl	f2c4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    dff2:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    dff4:	4605      	mov	r5, r0
  if (find < 2) {
    dff6:	d932      	bls.n	e05e <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    dff8:	2301      	movs	r3, #1
    dffa:	4601      	mov	r1, r0
    dffc:	6a20      	ldr	r0, [r4, #32]
    dffe:	461a      	mov	r2, r3
    e000:	f001 f9c0 	bl	f384 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    e004:	4606      	mov	r6, r0
    e006:	b350      	cbz	r0, e05e <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    e008:	69a3      	ldr	r3, [r4, #24]
    e00a:	b35b      	cbz	r3, e064 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    e00c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    e010:	0651      	lsls	r1, r2, #25
    e012:	d512      	bpl.n	e03a <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    e014:	1c59      	adds	r1, r3, #1
    e016:	42a9      	cmp	r1, r5
    e018:	d018      	beq.n	e04c <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    e01a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    e01e:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    e020:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    e024:	e005      	b.n	e032 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    e026:	6a20      	ldr	r0, [r4, #32]
    e028:	f001 faa8 	bl	f57c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    e02c:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    e02e:	b1b0      	cbz	r0, e05e <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    e030:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    e032:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    e034:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    e036:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    e038:	d3f5      	bcc.n	e026 <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    e03a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e03e:	4629      	mov	r1, r5
    e040:	6a20      	ldr	r0, [r4, #32]
    e042:	f001 fa9b 	bl	f57c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    e046:	b150      	cbz	r0, e05e <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    e048:	69a1      	ldr	r1, [r4, #24]
    e04a:	b911      	cbnz	r1, e052 <ExFatFile::addCluster()+0x72>
}
    e04c:	4630      	mov	r0, r6
  m_curCluster = find;
    e04e:	61a5      	str	r5, [r4, #24]
}
    e050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    e052:	462a      	mov	r2, r5
    e054:	6a20      	ldr	r0, [r4, #32]
    e056:	f001 fa91 	bl	f57c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    e05a:	2800      	cmp	r0, #0
    e05c:	d1f6      	bne.n	e04c <ExFatFile::addCluster()+0x6c>
  return false;
    e05e:	2600      	movs	r6, #0
}
    e060:	4630      	mov	r0, r6
    e062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    e064:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e06c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    e070:	e7ec      	b.n	e04c <ExFatFile::addCluster()+0x6c>
    e072:	bf00      	nop

0000e074 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    e074:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    e078:	079a      	lsls	r2, r3, #30
    e07a:	d536      	bpl.n	e0ea <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    e07c:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    e07e:	b570      	push	{r4, r5, r6, lr}
    e080:	4605      	mov	r5, r0
  if (m_firstCluster) {
    e082:	b9a1      	cbnz	r1, e0ae <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    e084:	2400      	movs	r4, #0
    e086:	4621      	mov	r1, r4
    e088:	e007      	b.n	e09a <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    e08a:	7803      	ldrb	r3, [r0, #0]
    e08c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e090:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    e092:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    e096:	428b      	cmp	r3, r1
    e098:	d329      	bcc.n	e0ee <ExFatFile::remove()+0x7a>
    e09a:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    e09c:	2201      	movs	r2, #1
    e09e:	4628      	mov	r0, r5
    e0a0:	f7ff fb32 	bl	d708 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    e0a4:	b2e1      	uxtb	r1, r4
    if (!cache) {
    e0a6:	2800      	cmp	r0, #0
    e0a8:	d1ef      	bne.n	e08a <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    e0aa:	2000      	movs	r0, #0
    e0ac:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    e0ae:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    e0b0:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    e0b2:	d534      	bpl.n	e11e <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    e0b4:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    e0b8:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    e0bc:	3309      	adds	r3, #9
    e0be:	3a01      	subs	r2, #1
    e0c0:	b2db      	uxtb	r3, r3
    e0c2:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    e0c6:	f1c3 0c20 	rsb	ip, r3, #32
    e0ca:	40da      	lsrs	r2, r3
    e0cc:	3b20      	subs	r3, #32
    e0ce:	fa04 fc0c 	lsl.w	ip, r4, ip
    e0d2:	fa24 f303 	lsr.w	r3, r4, r3
    e0d6:	ea42 020c 	orr.w	r2, r2, ip
    e0da:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    e0dc:	2300      	movs	r3, #0
    e0de:	3201      	adds	r2, #1
    e0e0:	f001 f950 	bl	f384 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    e0e4:	2800      	cmp	r0, #0
    e0e6:	d1cd      	bne.n	e084 <ExFatFile::remove()+0x10>
    e0e8:	e7df      	b.n	e0aa <ExFatFile::remove()+0x36>
}
    e0ea:	2000      	movs	r0, #0
    e0ec:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    e0ee:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    e0f0:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    e0f2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    e0f6:	4620      	mov	r0, r4
  m_flags = 0;
    e0f8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    e0fc:	f006 f9a4 	bl	14448 <FsCache::sync()>
    e100:	2800      	cmp	r0, #0
    e102:	d0d2      	beq.n	e0aa <ExFatFile::remove()+0x36>
    e104:	f504 7004 	add.w	r0, r4, #528	; 0x210
    e108:	f006 f99e 	bl	14448 <FsCache::sync()>
    e10c:	2800      	cmp	r0, #0
    e10e:	d0cc      	beq.n	e0aa <ExFatFile::remove()+0x36>
    e110:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    e114:	6803      	ldr	r3, [r0, #0]
}
    e116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e11a:	6a1b      	ldr	r3, [r3, #32]
    e11c:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    e11e:	f001 fa4d 	bl	f5bc <ExFatPartition::freeChain(unsigned long)>
    e122:	2800      	cmp	r0, #0
    e124:	d1ae      	bne.n	e084 <ExFatFile::remove()+0x10>
    e126:	e7c0      	b.n	e0aa <ExFatFile::remove()+0x36>

0000e128 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    e128:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    e12c:	06db      	lsls	r3, r3, #27
    e12e:	d401      	bmi.n	e134 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    e130:	2000      	movs	r0, #0
}
    e132:	4770      	bx	lr
bool ExFatFile::rmdir() {
    e134:	b510      	push	{r4, lr}
    seekSet(0);
    e136:	2200      	movs	r2, #0
    e138:	b088      	sub	sp, #32
    e13a:	2300      	movs	r3, #0
    e13c:	4604      	mov	r4, r0
    e13e:	f7ff fc77 	bl	da30 <ExFatFile::seekSet(unsigned long long)>
  }
    e142:	e008      	b.n	e156 <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    e144:	2820      	cmp	r0, #32
    e146:	d11b      	bne.n	e180 <ExFatFile::rmdir()+0x58>
    e148:	f99d 3000 	ldrsb.w	r3, [sp]
    e14c:	f89d 2000 	ldrb.w	r2, [sp]
    e150:	2b00      	cmp	r3, #0
    e152:	db15      	blt.n	e180 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    e154:	b132      	cbz	r2, e164 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    e156:	2220      	movs	r2, #32
    e158:	4669      	mov	r1, sp
    e15a:	4620      	mov	r0, r4
    e15c:	f7ff fb82 	bl	d864 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    e160:	2800      	cmp	r0, #0
    e162:	d1ef      	bne.n	e144 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    e164:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    e168:	2208      	movs	r2, #8
  return remove();
    e16a:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    e16c:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    e170:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    e174:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    e178:	f7ff ff7c 	bl	e074 <ExFatFile::remove()>
}
    e17c:	b008      	add	sp, #32
    e17e:	bd10      	pop	{r4, pc}
  return false;
    e180:	2000      	movs	r0, #0
}
    e182:	b008      	add	sp, #32
    e184:	bd10      	pop	{r4, pc}
    e186:	bf00      	nop

0000e188 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    e188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e18c:	f04f 0800 	mov.w	r8, #0
    e190:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    e192:	4f4a      	ldr	r7, [pc, #296]	; (e2bc <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    e194:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    e196:	4644      	mov	r4, r8
    e198:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    e19a:	2200      	movs	r2, #0
    e19c:	4630      	mov	r0, r6
    e19e:	f7ff fab3 	bl	d708 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    e1a2:	4605      	mov	r5, r0
    e1a4:	b130      	cbz	r0, e1b4 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    e1a6:	7801      	ldrb	r1, [r0, #0]
    e1a8:	29c0      	cmp	r1, #192	; 0xc0
    e1aa:	d069      	beq.n	e280 <ExFatFile::syncDir()+0xf8>
    e1ac:	29c1      	cmp	r1, #193	; 0xc1
    e1ae:	d02b      	beq.n	e208 <ExFatFile::syncDir()+0x80>
    e1b0:	2985      	cmp	r1, #133	; 0x85
    e1b2:	d009      	beq.n	e1c8 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    e1b4:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    e1b8:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    e1ba:	f043 0301 	orr.w	r3, r3, #1
    e1be:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    e1c2:	b002      	add	sp, #8
    e1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    e1c8:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    e1cc:	f003 0337 	and.w	r3, r3, #55	; 0x37
    e1d0:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    e1d2:	683b      	ldr	r3, [r7, #0]
    e1d4:	b183      	cbz	r3, e1f8 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    e1d6:	f10d 0203 	add.w	r2, sp, #3
    e1da:	f10d 0106 	add.w	r1, sp, #6
    e1de:	a801      	add	r0, sp, #4
    e1e0:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    e1e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e1e6:	81ab      	strh	r3, [r5, #12]
    e1e8:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    e1ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e1ee:	81eb      	strh	r3, [r5, #14]
    e1f0:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    e1f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e1f6:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    e1f8:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    e1fa:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    e1fe:	f043 0301 	orr.w	r3, r3, #1
    e202:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    e206:	7829      	ldrb	r1, [r5, #0]
    e208:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e20c:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    e20e:	fab0 f080 	clz	r0, r0
    e212:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e214:	e001      	b.n	e21a <ExFatFile::syncDir()+0x92>
    e216:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    e218:	5ca9      	ldrb	r1, [r5, r2]
    e21a:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e21c:	2a01      	cmp	r2, #1
    e21e:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    e222:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    e226:	fa11 f383 	uxtah	r3, r1, r3
    e22a:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e22c:	d101      	bne.n	e232 <ExFatFile::syncDir()+0xaa>
    e22e:	2800      	cmp	r0, #0
    e230:	d1f1      	bne.n	e216 <ExFatFile::syncDir()+0x8e>
    e232:	2a1f      	cmp	r2, #31
    e234:	d9f0      	bls.n	e218 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    e236:	f108 0801 	add.w	r8, r8, #1
    e23a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    e23e:	fa5f f188 	uxtb.w	r1, r8
    e242:	428b      	cmp	r3, r1
    e244:	d2a9      	bcs.n	e19a <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    e246:	2201      	movs	r2, #1
    e248:	f106 0124 	add.w	r1, r6, #36	; 0x24
    e24c:	6a30      	ldr	r0, [r6, #32]
    e24e:	f001 f915 	bl	f47c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    e252:	2800      	cmp	r0, #0
    e254:	d0ae      	beq.n	e1b4 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    e256:	6a35      	ldr	r5, [r6, #32]
    e258:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    e25a:	4628      	mov	r0, r5
    e25c:	f006 f8f4 	bl	14448 <FsCache::sync()>
    e260:	2800      	cmp	r0, #0
    e262:	d0a7      	beq.n	e1b4 <ExFatFile::syncDir()+0x2c>
    e264:	f505 7004 	add.w	r0, r5, #528	; 0x210
    e268:	f006 f8ee 	bl	14448 <FsCache::sync()>
    e26c:	2800      	cmp	r0, #0
    e26e:	d0a1      	beq.n	e1b4 <ExFatFile::syncDir()+0x2c>
    e270:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    e274:	6803      	ldr	r3, [r0, #0]
    e276:	6a1b      	ldr	r3, [r3, #32]
    e278:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    e27a:	2800      	cmp	r0, #0
    e27c:	d1a1      	bne.n	e1c2 <ExFatFile::syncDir()+0x3a>
    e27e:	e799      	b.n	e1b4 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    e280:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    e284:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    e288:	7843      	ldrb	r3, [r0, #1]
    e28a:	bf14      	ite	ne
    e28c:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    e290:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    e294:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    e296:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    e29a:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    e29e:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    e2a2:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    e2a6:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    e2a8:	e9c5 0106 	strd	r0, r1, [r5, #24]
    e2ac:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    e2b0:	f043 0301 	orr.w	r3, r3, #1
    e2b4:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    e2b8:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    e2ba:	e7a5      	b.n	e208 <ExFatFile::syncDir()+0x80>
    e2bc:	2000adbc 	.word	0x2000adbc

0000e2c0 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    e2c0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    e2c2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    e2c6:	b343      	cbz	r3, e31a <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    e2c8:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    e2cc:	4604      	mov	r4, r0
    e2ce:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    e2d2:	2a00      	cmp	r2, #0
    e2d4:	db0c      	blt.n	e2f0 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    e2d6:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    e2d8:	4628      	mov	r0, r5
    e2da:	f006 f8b5 	bl	14448 <FsCache::sync()>
    e2de:	b978      	cbnz	r0, e300 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    e2e0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    e2e4:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    e2e6:	f043 0301 	orr.w	r3, r3, #1
    e2ea:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    e2ee:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    e2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e2f4:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    e2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    e2fc:	f7ff bf44 	b.w	e188 <ExFatFile::syncDir()>
    e300:	f505 7004 	add.w	r0, r5, #528	; 0x210
    e304:	f006 f8a0 	bl	14448 <FsCache::sync()>
    e308:	2800      	cmp	r0, #0
    e30a:	d0e9      	beq.n	e2e0 <ExFatFile::sync()+0x20>
    e30c:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    e310:	6803      	ldr	r3, [r0, #0]
    e312:	6a1b      	ldr	r3, [r3, #32]
    e314:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    e316:	2800      	cmp	r0, #0
    e318:	d0e2      	beq.n	e2e0 <ExFatFile::sync()+0x20>
    return true;
    e31a:	2001      	movs	r0, #1
}
    e31c:	bd38      	pop	{r3, r4, r5, pc}
    e31e:	bf00      	nop

0000e320 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    e320:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    e322:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    e326:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    e328:	065a      	lsls	r2, r3, #25
    e32a:	d44c      	bmi.n	e3c6 <ExFatFile::addDirCluster()+0xa6>
    e32c:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    e32e:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    e330:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    e334:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    e336:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    e33a:	d301      	bcc.n	e340 <ExFatFile::addDirCluster()+0x20>
}
    e33c:	2000      	movs	r0, #0
    e33e:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    e340:	4628      	mov	r0, r5
    e342:	f7ff fe4d 	bl	dfe0 <ExFatFile::addCluster()>
    e346:	2800      	cmp	r0, #0
    e348:	d0f8      	beq.n	e33c <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    e34a:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    e34c:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    e34e:	69ae      	ldr	r6, [r5, #24]
    e350:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    e354:	3e02      	subs	r6, #2
    e356:	409e      	lsls	r6, r3
    e358:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    e35c:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    e35e:	1931      	adds	r1, r6, r4
    e360:	2205      	movs	r2, #5
    e362:	f500 7004 	add.w	r0, r0, #528	; 0x210
    e366:	3401      	adds	r4, #1
    e368:	f006 f89a 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    e36c:	f44f 7200 	mov.w	r2, #512	; 0x200
    e370:	2100      	movs	r1, #0
    if (!cache) {
    e372:	2800      	cmp	r0, #0
    e374:	d0e2      	beq.n	e33c <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    e376:	f013 ffc3 	bl	22300 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    e37a:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    e37c:	2301      	movs	r3, #1
    e37e:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    e382:	4093      	lsls	r3, r2
    e384:	429c      	cmp	r4, r3
    e386:	d3ea      	bcc.n	e35e <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    e388:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    e38c:	065b      	lsls	r3, r3, #25
    e38e:	d415      	bmi.n	e3bc <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    e390:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    e394:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    e398:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    e39c:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    e3a0:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    e3a4:	189b      	adds	r3, r3, r2
    e3a6:	f141 0000 	adc.w	r0, r1, #0
    e3aa:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    e3ac:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    e3b0:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    e3b2:	189b      	adds	r3, r3, r2
    e3b4:	f141 0100 	adc.w	r1, r1, #0
    e3b8:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    e3bc:	4628      	mov	r0, r5
}
    e3be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    e3c2:	f7ff bf7d 	b.w	e2c0 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    e3c6:	6a00      	ldr	r0, [r0, #32]
    e3c8:	f001 f9fe 	bl	f7c8 <ExFatPartition::rootLength()>
    e3cc:	e7af      	b.n	e32e <ExFatFile::addDirCluster()+0xe>
    e3ce:	bf00      	nop

0000e3d0 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    e3d0:	b570      	push	{r4, r5, r6, lr}
    e3d2:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    e3d4:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    e3d8:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    e3da:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    e3dc:	f010 0f18 	tst.w	r0, #24
    e3e0:	930c      	str	r3, [sp, #48]	; 0x30
    e3e2:	931a      	str	r3, [sp, #104]	; 0x68
    e3e4:	d003      	beq.n	e3ee <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    e3e6:	6a20      	ldr	r0, [r4, #32]
    e3e8:	6a0b      	ldr	r3, [r1, #32]
    e3ea:	4298      	cmp	r0, r3
    e3ec:	d002      	beq.n	e3f4 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    e3ee:	2000      	movs	r0, #0
}
    e3f0:	b01c      	add	sp, #112	; 0x70
    e3f2:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    e3f4:	f640 2301 	movw	r3, #2561	; 0xa01
    e3f8:	4668      	mov	r0, sp
    e3fa:	f7ff fd5b 	bl	deb4 <ExFatFile::open(ExFatFile*, char const*, int)>
    e3fe:	2800      	cmp	r0, #0
    e400:	d0f5      	beq.n	e3ee <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    e402:	46a4      	mov	ip, r4
    e404:	f104 0630 	add.w	r6, r4, #48	; 0x30
    e408:	ad0e      	add	r5, sp, #56	; 0x38
    e40a:	f8dc 0000 	ldr.w	r0, [ip]
    e40e:	f10c 0c10 	add.w	ip, ip, #16
    e412:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    e416:	46ae      	mov	lr, r5
    e418:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    e41c:	3510      	adds	r5, #16
    e41e:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    e422:	45b4      	cmp	ip, r6
    e424:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    e428:	d1ef      	bne.n	e40a <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    e42a:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    e42e:	aa09      	add	r2, sp, #36	; 0x24
    e430:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    e434:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    e436:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    e43a:	ca07      	ldmia	r2, {r0, r1, r2}
    e43c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e440:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    e444:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    e446:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e44a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e44e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    e452:	f7ff ff35 	bl	e2c0 <ExFatFile::sync()>
    e456:	2800      	cmp	r0, #0
    e458:	d0c9      	beq.n	e3ee <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    e45a:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    e45c:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    e45e:	2308      	movs	r3, #8
  return oldFile.remove();
    e460:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    e462:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    e464:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    e468:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    e46c:	f7ff fe02 	bl	e074 <ExFatFile::remove()>
    e470:	e7be      	b.n	e3f0 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    e472:	bf00      	nop

0000e474 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    e474:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    e476:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    e47a:	f013 0f50 	tst.w	r3, #80	; 0x50
    e47e:	d102      	bne.n	e486 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    e480:	2500      	movs	r5, #0
}
    e482:	4628      	mov	r0, r5
    e484:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    e486:	f640 2302 	movw	r3, #2562	; 0xa02
    e48a:	4604      	mov	r4, r0
    e48c:	f7ff fb46 	bl	db1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    e490:	2800      	cmp	r0, #0
    e492:	d0f5      	beq.n	e480 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    e494:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    e496:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    e498:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    e49c:	f7ff ff40 	bl	e320 <ExFatFile::addDirCluster()>
    e4a0:	4605      	mov	r5, r0
    e4a2:	2800      	cmp	r0, #0
    e4a4:	d0ec      	beq.n	e480 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    e4a6:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    e4a8:	2200      	movs	r2, #0
    e4aa:	2300      	movs	r3, #0
    e4ac:	4620      	mov	r0, r4
    e4ae:	61e1      	str	r1, [r4, #28]
    e4b0:	f7ff fabe 	bl	da30 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    e4b4:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    e4b6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    e4ba:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    e4be:	2b00      	cmp	r3, #0
    e4c0:	d0df      	beq.n	e482 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    e4c2:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    e4c4:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    e4c6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    e4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    e4ce:	f7ff be5b 	b.w	e188 <ExFatFile::syncDir()>
    e4d2:	bf00      	nop

0000e4d4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    e4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4d6:	2500      	movs	r5, #0
    e4d8:	b097      	sub	sp, #92	; 0x5c
    e4da:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    e4dc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    e4e0:	9201      	str	r2, [sp, #4]
    e4e2:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    e4e6:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    e4e8:	2b00      	cmp	r3, #0
    e4ea:	d146      	bne.n	e57a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    e4ec:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    e4f0:	460e      	mov	r6, r1
    e4f2:	f013 0f50 	tst.w	r3, #80	; 0x50
    e4f6:	d040      	beq.n	e57a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    e4f8:	7813      	ldrb	r3, [r2, #0]
    e4fa:	4604      	mov	r4, r0
    e4fc:	4611      	mov	r1, r2
    e4fe:	2b2f      	cmp	r3, #47	; 0x2f
    e500:	d03e      	beq.n	e580 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    e502:	ab01      	add	r3, sp, #4
    e504:	aa02      	add	r2, sp, #8
    e506:	4620      	mov	r0, r4
    e508:	f7ff f95e 	bl	d7c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    e50c:	2800      	cmp	r0, #0
    e50e:	d034      	beq.n	e57a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    e510:	9b01      	ldr	r3, [sp, #4]
    e512:	781b      	ldrb	r3, [r3, #0]
    e514:	2b00      	cmp	r3, #0
    e516:	d041      	beq.n	e59c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    e518:	2300      	movs	r3, #0
    e51a:	aa02      	add	r2, sp, #8
    e51c:	4631      	mov	r1, r6
    e51e:	4620      	mov	r0, r4
    e520:	f7ff fafc 	bl	db1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    e524:	b930      	cbnz	r0, e534 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    e526:	b347      	cbz	r7, e57a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    e528:	aa02      	add	r2, sp, #8
    e52a:	4631      	mov	r1, r6
    e52c:	4620      	mov	r0, r4
    e52e:	f7ff ffa1 	bl	e474 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    e532:	b310      	cbz	r0, e57a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    e534:	46a4      	mov	ip, r4
    e536:	ad08      	add	r5, sp, #32
    e538:	f104 0630 	add.w	r6, r4, #48	; 0x30
    e53c:	f8dc 0000 	ldr.w	r0, [ip]
    e540:	f10c 0c10 	add.w	ip, ip, #16
    e544:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    e548:	46ae      	mov	lr, r5
    e54a:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    e54e:	3510      	adds	r5, #16
    e550:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    e554:	45b4      	cmp	ip, r6
    e556:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    e55a:	d1ef      	bne.n	e53c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    e55c:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    e560:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    e562:	6028      	str	r0, [r5, #0]
    close();
    e564:	4620      	mov	r0, r4
    e566:	f7ff f8ed 	bl	d744 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    e56a:	9901      	ldr	r1, [sp, #4]
    e56c:	ab01      	add	r3, sp, #4
    e56e:	aa02      	add	r2, sp, #8
    e570:	4620      	mov	r0, r4
    e572:	f7ff f929 	bl	d7c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    e576:	2800      	cmp	r0, #0
    e578:	d1ca      	bne.n	e510 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    e57a:	2000      	movs	r0, #0
}
    e57c:	b017      	add	sp, #92	; 0x5c
    e57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    e580:	3101      	adds	r1, #1
    e582:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    e584:	780b      	ldrb	r3, [r1, #0]
    e586:	2b2f      	cmp	r3, #47	; 0x2f
    e588:	d0fa      	beq.n	e580 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    e58a:	6a31      	ldr	r1, [r6, #32]
    e58c:	a808      	add	r0, sp, #32
    e58e:	f7ff f907 	bl	d7a0 <ExFatFile::openRoot(ExFatVolume*)>
    e592:	2800      	cmp	r0, #0
    e594:	d0f1      	beq.n	e57a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    e596:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    e598:	ae08      	add	r6, sp, #32
    e59a:	e7b2      	b.n	e502 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    e59c:	aa02      	add	r2, sp, #8
    e59e:	4631      	mov	r1, r6
    e5a0:	4620      	mov	r0, r4
    e5a2:	f7ff ff67 	bl	e474 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    e5a6:	b017      	add	sp, #92	; 0x5c
    e5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5aa:	bf00      	nop

0000e5ac <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    e5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5b0:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    e5b2:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    e5b6:	b083      	sub	sp, #12
      || second > 59) {
    e5b8:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    e5ba:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    e5be:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    e5c2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    e5c6:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
      || second > 59) {
    e5ca:	f140 8085 	bpl.w	e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || year > 2107
    e5ce:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    e5d2:	b294      	uxth	r4, r2
    e5d4:	2c7f      	cmp	r4, #127	; 0x7f
    e5d6:	d87f      	bhi.n	e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || month > 12
    e5d8:	1e5a      	subs	r2, r3, #1
    e5da:	2a0b      	cmp	r2, #11
    e5dc:	d87c      	bhi.n	e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || day > 31
    e5de:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    e5e2:	2a1e      	cmp	r2, #30
    e5e4:	d878      	bhi.n	e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || minute > 59
    e5e6:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    e5ea:	bf98      	it	ls
    e5ec:	f1b9 0f17 	cmpls.w	r9, #23
    e5f0:	bf8c      	ite	hi
    e5f2:	f04f 0a01 	movhi.w	sl, #1
    e5f6:	f04f 0a00 	movls.w	sl, #0
    e5fa:	2f3b      	cmp	r7, #59	; 0x3b
    e5fc:	bf88      	it	hi
    e5fe:	f04a 0a01 	orrhi.w	sl, sl, #1
      || second > 59) {
    e602:	f1ba 0f00 	cmp.w	sl, #0
    e606:	d167      	bne.n	e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    e608:	4605      	mov	r5, r0
    e60a:	9301      	str	r3, [sp, #4]
    e60c:	f7ff fe58 	bl	e2c0 <ExFatFile::sync()>
    e610:	2800      	cmp	r0, #0
    e612:	d061      	beq.n	e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
         year << 9 | month << 5 | day;
    e614:	9b01      	ldr	r3, [sp, #4]
    e616:	4651      	mov	r1, sl
    e618:	ea4b 1b43 	orr.w	fp, fp, r3, lsl #5
         hour << 11 | minute << 5 | second >> 1;
    e61c:	087b      	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    e61e:	f017 0701 	ands.w	r7, r7, #1
         year << 9 | month << 5 | day;
    e622:	ea4b 2444 	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    e626:	46d3      	mov	fp, sl
         hour << 11 | minute << 5 | second >> 1;
    e628:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    e62c:	bf18      	it	ne
    e62e:	2764      	movne	r7, #100	; 0x64
         year << 9 | month << 5 | day;
    e630:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    e632:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    e636:	f006 0901 	and.w	r9, r6, #1
    e63a:	fa1f f888 	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    e63e:	2200      	movs	r2, #0
    e640:	4628      	mov	r0, r5
    e642:	f7ff f861 	bl	d708 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    e646:	2800      	cmp	r0, #0
    e648:	d046      	beq.n	e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    e64a:	f890 c000 	ldrb.w	ip, [r0]
    e64e:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
    e652:	d045      	beq.n	e6e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    e654:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    e658:	b2db      	uxtb	r3, r3
    e65a:	2b01      	cmp	r3, #1
    e65c:	d83c      	bhi.n	e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    e65e:	f1ac 0185 	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e662:	2300      	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    e664:	fab1 f181 	clz	r1, r1
    e668:	0949      	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e66a:	e002      	b.n	e672 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    e66c:	2304      	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    e66e:	f810 c003 	ldrb.w	ip, [r0, r3]
    e672:	ea4f 32cb 	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e676:	2b01      	cmp	r3, #1
    e678:	f103 0301 	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    e67c:	ea42 025b 	orr.w	r2, r2, fp, lsr #1
    e680:	fa1c f282 	uxtah	r2, ip, r2
    e684:	fa1f fb82 	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e688:	d101      	bne.n	e68e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    e68a:	2900      	cmp	r1, #0
    e68c:	d1ee      	bne.n	e66c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    e68e:	2b1f      	cmp	r3, #31
    e690:	d9ed      	bls.n	e66e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    e692:	f10a 0a01 	add.w	sl, sl, #1
    e696:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    e69a:	fa5f f18a 	uxtb.w	r1, sl
    e69e:	428b      	cmp	r3, r1
    e6a0:	d2cd      	bcs.n	e63e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    e6a2:	2201      	movs	r2, #1
    e6a4:	f105 0124 	add.w	r1, r5, #36	; 0x24
    e6a8:	6a28      	ldr	r0, [r5, #32]
    e6aa:	f000 fee7 	bl	f47c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    e6ae:	b198      	cbz	r0, e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    e6b0:	6a2c      	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    e6b2:	f8a0 b002 	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    e6b6:	4620      	mov	r0, r4
    e6b8:	f005 fec6 	bl	14448 <FsCache::sync()>
    e6bc:	b160      	cbz	r0, e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    e6be:	f504 7004 	add.w	r0, r4, #528	; 0x210
    e6c2:	f005 fec1 	bl	14448 <FsCache::sync()>
    e6c6:	b138      	cbz	r0, e6d8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    e6c8:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    return m_blockDev->syncDevice();
    e6cc:	6803      	ldr	r3, [r0, #0]
    e6ce:	6a1b      	ldr	r3, [r3, #32]
  }
  return true;

 fail:
  return false;
}
    e6d0:	b003      	add	sp, #12
    e6d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6d6:	4718      	bx	r3
    e6d8:	2000      	movs	r0, #0
    e6da:	b003      	add	sp, #12
    e6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    e6e0:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    e6e4:	6a2a      	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    e6e6:	f003 0337 	and.w	r3, r3, #55	; 0x37
    e6ea:	8083      	strh	r3, [r0, #4]
    e6ec:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    e6f0:	f043 0301 	orr.w	r3, r3, #1
    e6f4:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    e6f8:	f1b9 0f00 	cmp.w	r9, #0
    e6fc:	d002      	beq.n	e704 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    e6fe:	f8a0 8010 	strh.w	r8, [r0, #16]
    e702:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    e704:	07b2      	lsls	r2, r6, #30
    e706:	d503      	bpl.n	e710 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    e708:	7507      	strb	r7, [r0, #20]
    e70a:	f8a0 8008 	strh.w	r8, [r0, #8]
    e70e:	8144      	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    e710:	0773      	lsls	r3, r6, #29
    e712:	d503      	bpl.n	e71c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    e714:	7547      	strb	r7, [r0, #21]
    e716:	f8a0 800c 	strh.w	r8, [r0, #12]
    e71a:	81c4      	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    e71c:	f890 c000 	ldrb.w	ip, [r0]
}
    e720:	e79d      	b.n	e65e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    e722:	bf00      	nop

0000e724 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    e724:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    e728:	079a      	lsls	r2, r3, #30
    e72a:	d562      	bpl.n	e7f2 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    e72c:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    e72e:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    e730:	b082      	sub	sp, #8
    e732:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    e734:	b3a5      	cbz	r5, e7a0 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    e736:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    e73a:	d034      	beq.n	e7a6 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    e73c:	6a00      	ldr	r0, [r0, #32]
    e73e:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    e740:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    e744:	3a01      	subs	r2, #1
    e746:	68e1      	ldr	r1, [r4, #12]
    e748:	f10c 0c09 	add.w	ip, ip, #9
    e74c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    e750:	fa5f fc8c 	uxtb.w	ip, ip
    e754:	f1cc 0e20 	rsb	lr, ip, #32
    e758:	fa22 f20c 	lsr.w	r2, r2, ip
    e75c:	f1ac 0c20 	sub.w	ip, ip, #32
    e760:	fa01 fe0e 	lsl.w	lr, r1, lr
    e764:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    e768:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    e76a:	ea42 020e 	orr.w	r2, r2, lr
    e76e:	ea42 020c 	orr.w	r2, r2, ip
    e772:	3201      	adds	r2, #1
    if (m_curCluster) {
    e774:	b319      	cbz	r1, e7be <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    e776:	3d01      	subs	r5, #1
    e778:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    e77a:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    e77c:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    e77e:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    e780:	bb72      	cbnz	r2, e7e0 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e782:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    e786:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    e788:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e78c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    e790:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    e794:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    e798:	f7ff fd92 	bl	e2c0 <ExFatFile::sync()>

 fail:
  return false;
}
    e79c:	b002      	add	sp, #8
    e79e:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    e7a0:	2001      	movs	r0, #1
}
    e7a2:	b002      	add	sp, #8
    e7a4:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    e7a6:	6981      	ldr	r1, [r0, #24]
    e7a8:	b961      	cbnz	r1, e7c4 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    e7aa:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    e7ac:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    e7ae:	4629      	mov	r1, r5
    e7b0:	6a20      	ldr	r0, [r4, #32]
    e7b2:	f000 ff03 	bl	f5bc <ExFatPartition::freeChain(unsigned long)>
    e7b6:	b1c8      	cbz	r0, e7ec <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e7b8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e7bc:	e7e1      	b.n	e782 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    e7be:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    e7c0:	61e1      	str	r1, [r4, #28]
    e7c2:	e7dd      	b.n	e780 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    e7c4:	aa01      	add	r2, sp, #4
    e7c6:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    e7c8:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    e7ca:	f000 feb5 	bl	f538 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    e7ce:	2800      	cmp	r0, #0
    e7d0:	db0c      	blt.n	e7ec <ExFatFile::truncate()+0xc8>
      if (fg) {
    e7d2:	d110      	bne.n	e7f6 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    e7d4:	9d01      	ldr	r5, [sp, #4]
    e7d6:	2d00      	cmp	r5, #0
    e7d8:	d1e9      	bne.n	e7ae <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e7da:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e7de:	e7d0      	b.n	e782 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    e7e0:	2300      	movs	r3, #0
    e7e2:	9901      	ldr	r1, [sp, #4]
    e7e4:	f000 fdce 	bl	f384 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    e7e8:	2800      	cmp	r0, #0
    e7ea:	d1e5      	bne.n	e7b8 <ExFatFile::truncate()+0x94>
  return false;
    e7ec:	2000      	movs	r0, #0
}
    e7ee:	b002      	add	sp, #8
    e7f0:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    e7f2:	2000      	movs	r0, #0
}
    e7f4:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    e7f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e7fa:	69a1      	ldr	r1, [r4, #24]
    e7fc:	6a20      	ldr	r0, [r4, #32]
    e7fe:	f000 febd 	bl	f57c <ExFatPartition::fatPut(unsigned long, unsigned long)>
    e802:	2800      	cmp	r0, #0
    e804:	d1e6      	bne.n	e7d4 <ExFatFile::truncate()+0xb0>
    e806:	e7f1      	b.n	e7ec <ExFatFile::truncate()+0xc8>

0000e808 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    e808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e80c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    e810:	b083      	sub	sp, #12
    e812:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    e814:	079d      	lsls	r5, r3, #30
    e816:	f140 80a1 	bpl.w	e95c <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    e81a:	4691      	mov	r9, r2
    e81c:	071a      	lsls	r2, r3, #28
    e81e:	460e      	mov	r6, r1
    e820:	f100 8095 	bmi.w	e94e <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    e824:	f1b9 0f00 	cmp.w	r9, #0
    e828:	f000 8128 	beq.w	ea7c <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    e82c:	6823      	ldr	r3, [r4, #0]
    e82e:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    e830:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    e832:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    e834:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    e838:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    e83c:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    e840:	f1b8 0f00 	cmp.w	r8, #0
    e844:	f040 8094 	bne.w	e970 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    e848:	2900      	cmp	r1, #0
    e84a:	f000 80d4 	beq.w	e9f6 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    e84e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e852:	065b      	lsls	r3, r3, #25
    e854:	f140 80ec 	bpl.w	ea30 <ExFatFile::write(void const*, unsigned int)+0x228>
    e858:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    e85c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    e860:	f10c 0c09 	add.w	ip, ip, #9
    e864:	3b01      	subs	r3, #1
    e866:	fa5f fc8c 	uxtb.w	ip, ip
    e86a:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    e86e:	f1cc 0e20 	rsb	lr, ip, #32
    e872:	fa23 f30c 	lsr.w	r3, r3, ip
    e876:	f1ac 0c20 	sub.w	ip, ip, #32
    e87a:	fa02 fe0e 	lsl.w	lr, r2, lr
    e87e:	fa22 fc0c 	lsr.w	ip, r2, ip
    e882:	69e2      	ldr	r2, [r4, #28]
    e884:	ea43 030e 	orr.w	r3, r3, lr
    e888:	ea43 030c 	orr.w	r3, r3, ip
    e88c:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    e88e:	4299      	cmp	r1, r3
    e890:	f080 80d5 	bcs.w	ea3e <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    e894:	3101      	adds	r1, #1
    e896:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    e898:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    e89c:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    e89e:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    e8a2:	4091      	lsls	r1, r2
    e8a4:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    e8a6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    e8aa:	f0c0 808a 	bcc.w	e9c2 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    e8ae:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    e8b2:	f0c0 80a6 	bcc.w	ea02 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    e8b6:	2301      	movs	r3, #1
    e8b8:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    e8ba:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    e8bc:	eba3 0308 	sub.w	r3, r3, r8
    e8c0:	4293      	cmp	r3, r2
    e8c2:	bf28      	it	cs
    e8c4:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    e8c6:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    e8ca:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    e8cc:	ea4f 2843 	mov.w	r8, r3, lsl #9
    e8d0:	d309      	bcc.n	e8e6 <ExFatFile::write(void const*, unsigned int)+0xde>
    e8d2:	185f      	adds	r7, r3, r1
    e8d4:	42ba      	cmp	r2, r7
    e8d6:	d206      	bcs.n	e8e6 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    e8d8:	2200      	movs	r2, #0
    e8da:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    e8de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e8e2:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    e8e6:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    e8ea:	4632      	mov	r2, r6
    e8ec:	6807      	ldr	r7, [r0, #0]
    e8ee:	6abf      	ldr	r7, [r7, #40]	; 0x28
    e8f0:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    e8f2:	b398      	cbz	r0, e95c <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    e8f4:	4643      	mov	r3, r8
    src += n;
    e8f6:	4446      	add	r6, r8
    toWrite -= n;
    e8f8:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    e8fc:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    e900:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    e904:	19db      	adds	r3, r3, r7
    e906:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    e90a:	4298      	cmp	r0, r3
    e90c:	4191      	sbcs	r1, r2
    m_curPosition += n;
    e90e:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    e912:	d207      	bcs.n	e924 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    e914:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    e918:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    e91c:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    e920:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    e924:	2d00      	cmp	r5, #0
    e926:	d183      	bne.n	e830 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    e928:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    e92c:	4298      	cmp	r0, r3
    e92e:	4191      	sbcs	r1, r2
    e930:	f0c0 8096 	bcc.w	ea60 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    e934:	4b53      	ldr	r3, [pc, #332]	; (ea84 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    e936:	681b      	ldr	r3, [r3, #0]
    e938:	2b00      	cmp	r3, #0
    e93a:	f000 809d 	beq.w	ea78 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    e93e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e942:	4648      	mov	r0, r9
    e944:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e948:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    e94c:	e00d      	b.n	e96a <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    e94e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    e952:	f7ff f86d 	bl	da30 <ExFatFile::seekSet(unsigned long long)>
    e956:	2800      	cmp	r0, #0
    e958:	f47f af64 	bne.w	e824 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    e95c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    e960:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    e962:	f043 0301 	orr.w	r3, r3, #1
    e966:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    e96a:	b003      	add	sp, #12
    e96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    e970:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    e974:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    e976:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    e97a:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    e97e:	4091      	lsls	r1, r2
    e980:	4441      	add	r1, r8
    e982:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    e984:	2f00      	cmp	r7, #0
    e986:	d08e      	beq.n	e8a6 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    e988:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    e98c:	2201      	movs	r2, #1
    e98e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    e992:	45a8      	cmp	r8, r5
    e994:	bf28      	it	cs
    e996:	46a8      	movcs	r8, r5
    e998:	f005 fd82 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    e99c:	2800      	cmp	r0, #0
    e99e:	d0dd      	beq.n	e95c <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    e9a0:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    e9a2:	4447      	add	r7, r8
      memcpy(dst, src, n);
    e9a4:	4642      	mov	r2, r8
    e9a6:	4631      	mov	r1, r6
    e9a8:	f00d f93e 	bl	1bc28 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    e9ac:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    e9b0:	6a20      	ldr	r0, [r4, #32]
    e9b2:	d19f      	bne.n	e8f4 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    e9b4:	f500 7004 	add.w	r0, r0, #528	; 0x210
    e9b8:	f005 fd46 	bl	14448 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    e9bc:	2800      	cmp	r0, #0
    e9be:	d199      	bne.n	e8f4 <ExFatFile::write(void const*, unsigned int)+0xec>
    e9c0:	e7cc      	b.n	e95c <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    e9c2:	6862      	ldr	r2, [r4, #4]
    e9c4:	6963      	ldr	r3, [r4, #20]
    e9c6:	9200      	str	r2, [sp, #0]
    e9c8:	9301      	str	r3, [sp, #4]
    e9ca:	6922      	ldr	r2, [r4, #16]
    e9cc:	6823      	ldr	r3, [r4, #0]
    e9ce:	4293      	cmp	r3, r2
    e9d0:	e9dd 2300 	ldrd	r2, r3, [sp]
    e9d4:	419a      	sbcs	r2, r3
    e9d6:	d212      	bcs.n	e9fe <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    e9d8:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    e9da:	f500 7004 	add.w	r0, r0, #528	; 0x210
    e9de:	f005 fd5f 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    e9e2:	2800      	cmp	r0, #0
    e9e4:	d0ba      	beq.n	e95c <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    e9e6:	462a      	mov	r2, r5
    e9e8:	4631      	mov	r1, r6
    e9ea:	4438      	add	r0, r7
    m_curPosition += n;
    e9ec:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    e9ee:	f00d f91b 	bl	1bc28 <memcpy>
    m_curPosition += n;
    e9f2:	462b      	mov	r3, r5
    e9f4:	e77f      	b.n	e8f6 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    e9f6:	69e1      	ldr	r1, [r4, #28]
    e9f8:	b349      	cbz	r1, ea4e <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    e9fa:	61a1      	str	r1, [r4, #24]
    e9fc:	e74c      	b.n	e898 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    e9fe:	2205      	movs	r2, #5
    ea00:	e7eb      	b.n	e9da <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    ea02:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    ea06:	428b      	cmp	r3, r1
    ea08:	d106      	bne.n	ea18 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    ea0a:	2300      	movs	r3, #0
    ea0c:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    ea10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea14:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    ea18:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    ea1c:	4632      	mov	r2, r6
    ea1e:	6803      	ldr	r3, [r0, #0]
    ea20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea22:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    ea24:	2800      	cmp	r0, #0
    ea26:	d099      	beq.n	e95c <ExFatFile::write(void const*, unsigned int)+0x154>
    ea28:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    ea2c:	4698      	mov	r8, r3
    ea2e:	e762      	b.n	e8f6 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    ea30:	f104 0218 	add.w	r2, r4, #24
    ea34:	f000 fd80 	bl	f538 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    ea38:	2800      	cmp	r0, #0
    ea3a:	db8f      	blt.n	e95c <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    ea3c:	d104      	bne.n	ea48 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    ea3e:	4620      	mov	r0, r4
    ea40:	f7ff face 	bl	dfe0 <ExFatFile::addCluster()>
    ea44:	2800      	cmp	r0, #0
    ea46:	d089      	beq.n	e95c <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    ea48:	69a1      	ldr	r1, [r4, #24]
    ea4a:	6a20      	ldr	r0, [r4, #32]
    ea4c:	e724      	b.n	e898 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    ea4e:	4620      	mov	r0, r4
    ea50:	f7ff fac6 	bl	dfe0 <ExFatFile::addCluster()>
    ea54:	2800      	cmp	r0, #0
    ea56:	d081      	beq.n	e95c <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    ea58:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    ea5a:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    ea5c:	61e1      	str	r1, [r4, #28]
    ea5e:	e71b      	b.n	e898 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    ea60:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    ea64:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    ea66:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    ea6a:	f061 037f 	orn	r3, r1, #127	; 0x7f
    ea6e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    ea72:	b003      	add	sp, #12
    ea74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ea78:	4648      	mov	r0, r9
    ea7a:	e776      	b.n	e96a <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    ea7c:	e9d4 3200 	ldrd	r3, r2, [r4]
    ea80:	e752      	b.n	e928 <ExFatFile::write(void const*, unsigned int)+0x120>
    ea82:	bf00      	nop
    ea84:	2000adbc 	.word	0x2000adbc

0000ea88 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    ea88:	b169      	cbz	r1, eaa6 <Print::write(char const*) [clone .isra.0]+0x1e>
    ea8a:	b570      	push	{r4, r5, r6, lr}
    ea8c:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    ea8e:	4608      	mov	r0, r1
    ea90:	460c      	mov	r4, r1
    ea92:	f013 fe55 	bl	22740 <strlen>
    ea96:	682b      	ldr	r3, [r5, #0]
    ea98:	4602      	mov	r2, r0
    ea9a:	4621      	mov	r1, r4
    ea9c:	4628      	mov	r0, r5
    ea9e:	685b      	ldr	r3, [r3, #4]
    eaa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eaa4:	4718      	bx	r3
    eaa6:	4770      	bx	lr

0000eaa8 <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    eaa8:	6883      	ldr	r3, [r0, #8]
    eaaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    eaae:	b183      	cbz	r3, ead2 <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    eab0:	2100      	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    eab2:	b410      	push	{r4}
    m_secBuf[i] = 0;
    eab4:	6902      	ldr	r2, [r0, #16]
    eab6:	54d1      	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    eab8:	3301      	adds	r3, #1
    eaba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    eabe:	d1f9      	bne.n	eab4 <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    eac0:	6801      	ldr	r1, [r0, #0]
    eac2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    eac6:	681c      	ldr	r4, [r3, #0]
    eac8:	4618      	mov	r0, r3
    eaca:	6a63      	ldr	r3, [r4, #36]	; 0x24
}
    eacc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    ead0:	4718      	bx	r3
}
    ead2:	2001      	movs	r0, #1
    ead4:	4770      	bx	lr
    ead6:	bf00      	nop

0000ead8 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    ead8:	6882      	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    eada:	4603      	mov	r3, r0
  m_secBuf[index] = b;
    eadc:	6900      	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    eade:	f240 1cff 	movw	ip, #511	; 0x1ff
    eae2:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    eae6:	5481      	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    eae8:	4562      	cmp	r2, ip
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    eaea:	6858      	ldr	r0, [r3, #4]
    eaec:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    eaf0:	6898      	ldr	r0, [r3, #8]
    eaf2:	f100 0001 	add.w	r0, r0, #1
    eaf6:	e9c3 1001 	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    eafa:	d001      	beq.n	eb00 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    eafc:	2001      	movs	r0, #1
    eafe:	4770      	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    eb00:	68d8      	ldr	r0, [r3, #12]
    eb02:	6819      	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    eb04:	b410      	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    eb06:	6804      	ldr	r4, [r0, #0]
    eb08:	1c4a      	adds	r2, r1, #1
    eb0a:	6a64      	ldr	r4, [r4, #36]	; 0x24
    eb0c:	601a      	str	r2, [r3, #0]
    eb0e:	691a      	ldr	r2, [r3, #16]
    eb10:	4623      	mov	r3, r4
}
    eb12:	f85d 4b04 	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    eb16:	4718      	bx	r3

0000eb18 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    eb18:	b538      	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    eb1a:	6883      	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    eb1c:	b2ca      	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    eb1e:	460d      	mov	r5, r1
  m_secBuf[index] = b;
    eb20:	6901      	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    eb22:	f3c3 0308 	ubfx	r3, r3, #0, #9
    eb26:	f240 1cff 	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    eb2a:	4604      	mov	r4, r0
  m_secBuf[index] = b;
    eb2c:	54ca      	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    eb2e:	4563      	cmp	r3, ip
    eb30:	6841      	ldr	r1, [r0, #4]
    eb32:	eb02 0271 	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    eb36:	6042      	str	r2, [r0, #4]
  m_upcaseSize++;
    eb38:	6882      	ldr	r2, [r0, #8]
    eb3a:	f102 0201 	add.w	r2, r2, #1
    eb3e:	6082      	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    eb40:	d005      	beq.n	eb4e <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    eb42:	0a29      	lsrs	r1, r5, #8
    eb44:	4620      	mov	r0, r4
}
    eb46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    eb4a:	f7ff bfc5 	b.w	ead8 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    eb4e:	6801      	ldr	r1, [r0, #0]
    eb50:	68c0      	ldr	r0, [r0, #12]
    eb52:	1c4a      	adds	r2, r1, #1
    eb54:	6803      	ldr	r3, [r0, #0]
    eb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eb58:	6022      	str	r2, [r4, #0]
    eb5a:	6922      	ldr	r2, [r4, #16]
    eb5c:	4798      	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    eb5e:	2800      	cmp	r0, #0
    eb60:	d1ef      	bne.n	eb42 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    eb62:	bd38      	pop	{r3, r4, r5, pc}

0000eb64 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    eb66:	2300      	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    eb68:	4606      	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    eb6a:	6001      	str	r1, [r0, #0]
  uint32_t ch = 0;
    eb6c:	461d      	mov	r5, r3
  m_upcaseChecksum = 0;
    eb6e:	e9c0 3301 	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    eb72:	b2a8      	uxth	r0, r5
    eb74:	f005 fdd0 	bl	14718 <toUpcase(unsigned short)>
    if (uc != ch) {
    eb78:	42a8      	cmp	r0, r5
    uc = toUpcase(ch);
    eb7a:	4604      	mov	r4, r0
    if (uc != ch) {
    eb7c:	d007      	beq.n	eb8e <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    eb7e:	b2c1      	uxtb	r1, r0
    eb80:	4630      	mov	r0, r6
    eb82:	f7ff ffa9 	bl	ead8 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    eb86:	2800      	cmp	r0, #0
    eb88:	d13b      	bne.n	ec02 <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

 fail:
  return false;
}
    eb8a:	2000      	movs	r0, #0
    eb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    eb8e:	1c6c      	adds	r4, r5, #1
    eb90:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    eb94:	d104      	bne.n	eba0 <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    eb96:	e02a      	b.n	ebee <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    eb98:	3401      	adds	r4, #1
    eb9a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    eb9e:	d004      	beq.n	ebaa <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    eba0:	b2a0      	uxth	r0, r4
    eba2:	f005 fdb9 	bl	14718 <toUpcase(unsigned short)>
    eba6:	42a0      	cmp	r0, r4
    eba8:	d0f6      	beq.n	eb98 <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    ebaa:	1b67      	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    ebac:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    ebb0:	d31d      	bcc.n	ebee <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    ebb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ebb6:	4630      	mov	r0, r6
    ebb8:	f7ff ffae 	bl	eb18 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    ebbc:	2800      	cmp	r0, #0
    ebbe:	d0e4      	beq.n	eb8a <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    ebc0:	b2b9      	uxth	r1, r7
    ebc2:	4630      	mov	r0, r6
    ebc4:	f7ff ffa8 	bl	eb18 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    ebc8:	2800      	cmp	r0, #0
    ebca:	d0de      	beq.n	eb8a <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    ebcc:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    ebce:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    ebd2:	d1ce      	bne.n	eb72 <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    ebd4:	4630      	mov	r0, r6
}
    ebd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    ebda:	f7ff bf65 	b.w	eaa8 <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    ebde:	f3c5 2107 	ubfx	r1, r5, #8, #8
    ebe2:	4630      	mov	r0, r6
    ebe4:	3501      	adds	r5, #1
    ebe6:	f7ff ff77 	bl	ead8 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    ebea:	2800      	cmp	r0, #0
    ebec:	d0cd      	beq.n	eb8a <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    ebee:	42a5      	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    ebf0:	b2e9      	uxtb	r1, r5
    ebf2:	4630      	mov	r0, r6
        while (ch < n) {
    ebf4:	d2eb      	bcs.n	ebce <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    ebf6:	f7ff ff6f 	bl	ead8 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    ebfa:	2800      	cmp	r0, #0
    ebfc:	d1ef      	bne.n	ebde <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    ebfe:	2000      	movs	r0, #0
    ec00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    ec02:	f3c4 2107 	ubfx	r1, r4, #8, #8
    ec06:	4630      	mov	r0, r6
    ec08:	f7ff ff66 	bl	ead8 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    ec0c:	2800      	cmp	r0, #0
    ec0e:	d0bc      	beq.n	eb8a <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    ec10:	3501      	adds	r5, #1
    ec12:	e7dc      	b.n	ebce <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

0000ec14 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    ec14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec18:	461f      	mov	r7, r3
    ec1a:	b089      	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    ec1c:	680b      	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    ec1e:	460d      	mov	r5, r1
    ec20:	9004      	str	r0, [sp, #16]
    ec22:	4614      	mov	r4, r2
  m_dev = dev;
    ec24:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    ec26:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    ec28:	4608      	mov	r0, r1
    ec2a:	69db      	ldr	r3, [r3, #28]
    ec2c:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    ec2e:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    ec32:	9000      	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    ec34:	f0c0 80d8 	bcc.w	ede8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    ec38:	2300      	movs	r3, #0
    ec3a:	2201      	movs	r2, #1
    ec3c:	9e00      	ldr	r6, [sp, #0]
    ec3e:	3301      	adds	r3, #1
    ec40:	0052      	lsls	r2, r2, #1
    ec42:	b2db      	uxtb	r3, r3
    ec44:	d001      	beq.n	ec4a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    ec46:	4296      	cmp	r6, r2
    ec48:	d8f9      	bhi.n	ec3e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    ec4a:	2b1c      	cmp	r3, #28
    ec4c:	9600      	str	r6, [sp, #0]
    ec4e:	f240 80b7 	bls.w	edc0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    ec52:	f1a3 080b 	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    ec56:	2201      	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    ec58:	fa48 f102 	asr.w	r1, r8, r2
    ec5c:	f3c8 0847 	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    ec60:	408a      	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    ec62:	9102      	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    ec64:	9207      	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    ec66:	3301      	adds	r3, #1
    ec68:	2201      	movs	r2, #1
    ec6a:	105b      	asrs	r3, r3, #1
    ec6c:	409a      	lsls	r2, r3
    ec6e:	9206      	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    ec70:	2204      	movs	r2, #4
    ec72:	409a      	lsls	r2, r3
    ec74:	9203      	str	r2, [sp, #12]
  partitionOffset = 2*fatLength;
    ec76:	2202      	movs	r2, #2
    ec78:	fa02 f303 	lsl.w	r3, r2, r3
    ec7c:	9301      	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    ec7e:	9a00      	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ec80:	2100      	movs	r1, #0
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    ec82:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ec84:	4620      	mov	r0, r4
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    ec86:	9e02      	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    ec88:	f04f 0a01 	mov.w	sl, #1
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    ec8c:	1ad3      	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ec8e:	f44f 7200 	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    ec92:	f64a 2b55 	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    ec96:	40f3      	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    ec98:	fa03 f906 	lsl.w	r9, r3, r6
    ec9c:	9305      	str	r3, [sp, #20]
    ec9e:	9e01      	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    eca0:	f013 fb2e 	bl	22300 <memset>
  mbr->part->endCHS[1] = 0XFF;
    eca4:	23ff      	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    eca6:	f884 a1bf 	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    ecaa:	f884 a1c0 	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    ecae:	44b1      	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    ecb0:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    ecb4:	4622      	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    ecb6:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    ecba:	2307      	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    ecbc:	2100      	movs	r1, #0
    ecbe:	4628      	mov	r0, r5
  mbr->part->type = 7;
    ecc0:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    ecc4:	23fe      	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    ecc6:	f8c4 61c6 	str.w	r6, [r4, #454]	; 0x1c6
    ecca:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    ecce:	682b      	ldr	r3, [r5, #0]
    ecd0:	f8c4 91ca 	str.w	r9, [r4, #458]	; 0x1ca
    ecd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  *reinterpret_cast<uint16_t*>(dst) = src;
    ecd6:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    ecda:	4798      	blx	r3
    ecdc:	2800      	cmp	r0, #0
    ecde:	d063      	beq.n	eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ece0:	f44f 7200 	mov.w	r2, #512	; 0x200
    ece4:	2100      	movs	r1, #0
    ece6:	4620      	mov	r0, r4
    ece8:	f013 fb0a 	bl	22300 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    ecec:	9b00      	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    ecee:	f884 806d 	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    ecf2:	f04f 0800 	mov.w	r8, #0
    ecf6:	6663      	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    ecf8:	21f4      	movs	r1, #244	; 0xf4
    ecfa:	9b05      	ldr	r3, [sp, #20]
    ecfc:	f104 0078 	add.w	r0, r4, #120	; 0x78
    ed00:	9a06      	ldr	r2, [sp, #24]
    ed02:	65e3      	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    ed04:	2320      	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    ed06:	6426      	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    ed08:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    ed0a:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    ed0c:	72a3      	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    ed0e:	23eb      	movs	r3, #235	; 0xeb
    ed10:	65a6      	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    ed12:	4646      	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    ed14:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    ed16:	2376      	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    ed18:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    ed1c:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    ed1e:	2390      	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    ed20:	f884 a06e 	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    ed24:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    ed26:	2345      	movs	r3, #69	; 0x45
    ed28:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    ed2a:	2358      	movs	r3, #88	; 0x58
    ed2c:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    ed2e:	2346      	movs	r3, #70	; 0x46
    ed30:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    ed32:	2341      	movs	r3, #65	; 0x41
    ed34:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    ed36:	2354      	movs	r3, #84	; 0x54
    ed38:	71e3      	strb	r3, [r4, #7]
    ed3a:	2304      	movs	r3, #4
    ed3c:	6623      	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    ed3e:	f44f 7380 	mov.w	r3, #256	; 0x100
    ed42:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    ed46:	2309      	movs	r3, #9
    ed48:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    ed4c:	2380      	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    ed4e:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
    ed52:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    ed56:	f44f 72c3 	mov.w	r2, #390	; 0x186
    ed5a:	f013 fad1 	bl	22300 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    ed5e:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    ed62:	f1a8 036a 	sub.w	r3, r8, #106	; 0x6a
    ed66:	2b01      	cmp	r3, #1
    ed68:	d906      	bls.n	ed78 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    ed6a:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
    ed6e:	d003      	beq.n	ed78 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    ed70:	f814 3008 	ldrb.w	r3, [r4, r8]
    ed74:	eb03 0676 	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    ed78:	f108 0801 	add.w	r8, r8, #1
    ed7c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    ed80:	d1ef      	bne.n	ed62 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf)  ||
    ed82:	682b      	ldr	r3, [r5, #0]
    ed84:	4622      	mov	r2, r4
    ed86:	f8dd 9004 	ldr.w	r9, [sp, #4]
    ed8a:	4628      	mov	r0, r5
    ed8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ed8e:	4649      	mov	r1, r9
    ed90:	4798      	blx	r3
    ed92:	b148      	cbz	r0, eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    ed94:	682b      	ldr	r3, [r5, #0]
    ed96:	4649      	mov	r1, r9
    ed98:	4622      	mov	r2, r4
    ed9a:	4628      	mov	r0, r5
    ed9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ed9e:	310c      	adds	r1, #12
    eda0:	f8cd 9004 	str.w	r9, [sp, #4]
    eda4:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    eda6:	bb40      	cbnz	r0, edfa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    eda8:	b12f      	cbz	r7, edb6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    edaa:	683b      	ldr	r3, [r7, #0]
    edac:	220f      	movs	r2, #15
    edae:	49b8      	ldr	r1, [pc, #736]	; (f090 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    edb0:	4638      	mov	r0, r7
    edb2:	685b      	ldr	r3, [r3, #4]
    edb4:	4798      	blx	r3
  return false;
    edb6:	2600      	movs	r6, #0
}
    edb8:	4630      	mov	r0, r6
    edba:	b009      	add	sp, #36	; 0x24
    edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    edc0:	2b1a      	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    edc2:	f04f 0808 	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    edc6:	f200 81a6 	bhi.w	f116 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    edca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    edce:	f8cd 8008 	str.w	r8, [sp, #8]
    edd2:	9301      	str	r3, [sp, #4]
    edd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    edd8:	9303      	str	r3, [sp, #12]
    edda:	f44f 7380 	mov.w	r3, #256	; 0x100
    edde:	9307      	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    ede0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ede4:	9306      	str	r3, [sp, #24]
    ede6:	e74a      	b.n	ec7e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    ede8:	2f00      	cmp	r7, #0
    edea:	d0e4      	beq.n	edb6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    edec:	683b      	ldr	r3, [r7, #0]
    edee:	2215      	movs	r2, #21
    edf0:	49a8      	ldr	r1, [pc, #672]	; (f094 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    edf2:	4638      	mov	r0, r7
    edf4:	685b      	ldr	r3, [r3, #4]
    edf6:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    edf8:	e7d7      	b.n	edaa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    edfa:	4642      	mov	r2, r8
    edfc:	2100      	movs	r1, #0
    edfe:	4620      	mov	r0, r4
  sector++;
    ee00:	f109 0a01 	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ee04:	f013 fa7c 	bl	22300 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    ee08:	f64a 2355 	movw	r3, #43605	; 0xaa55
    ee0c:	f109 0209 	add.w	r2, r9, #9
    ee10:	f204 19ff 	addw	r9, r4, #511	; 0x1ff
    ee14:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
    ee18:	2300      	movs	r3, #0
    ee1a:	4693      	mov	fp, r2
  uint32_t checksum = 0;
    ee1c:	46a0      	mov	r8, r4
    ee1e:	e001      	b.n	ee24 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    ee20:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    ee24:	45c1      	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    ee26:	eb03 0676 	add.w	r6, r3, r6, ror #1
    ee2a:	d1f9      	bne.n	ee20 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf)  ||
    ee2c:	682b      	ldr	r3, [r5, #0]
    ee2e:	4622      	mov	r2, r4
    ee30:	4651      	mov	r1, sl
    ee32:	4628      	mov	r0, r5
    ee34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ee36:	4798      	blx	r3
    ee38:	2800      	cmp	r0, #0
    ee3a:	d0b5      	beq.n	eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    ee3c:	682b      	ldr	r3, [r5, #0]
    ee3e:	4622      	mov	r2, r4
    ee40:	f10a 010c 	add.w	r1, sl, #12
    ee44:	4628      	mov	r0, r5
    ee46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ee48:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    ee4a:	2800      	cmp	r0, #0
    ee4c:	d0ac      	beq.n	eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    ee4e:	f10a 0301 	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    ee52:	459b      	cmp	fp, r3
    ee54:	d002      	beq.n	ee5c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    ee56:	469a      	mov	sl, r3
    ee58:	7823      	ldrb	r3, [r4, #0]
    ee5a:	e7df      	b.n	ee1c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ee5c:	f44f 7200 	mov.w	r2, #512	; 0x200
    ee60:	2100      	movs	r1, #0
    ee62:	4620      	mov	r0, r4
    ee64:	469b      	mov	fp, r3
    ee66:	f013 fa4b 	bl	22300 <memset>
    ee6a:	2200      	movs	r2, #0
    ee6c:	f10a 0a03 	add.w	sl, sl, #3
    ee70:	4611      	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    ee72:	4623      	mov	r3, r4
    ee74:	e001      	b.n	ee7a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    ee76:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    ee7a:	4598      	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    ee7c:	eb01 0676 	add.w	r6, r1, r6, ror #1
    ee80:	d1f9      	bne.n	ee76 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf)  ||
    ee82:	682b      	ldr	r3, [r5, #0]
    ee84:	4622      	mov	r2, r4
    ee86:	4659      	mov	r1, fp
    ee88:	4628      	mov	r0, r5
    ee8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ee8c:	4798      	blx	r3
    ee8e:	2800      	cmp	r0, #0
    ee90:	d08a      	beq.n	eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    ee92:	682b      	ldr	r3, [r5, #0]
    ee94:	4622      	mov	r2, r4
    ee96:	f10b 010c 	add.w	r1, fp, #12
    ee9a:	4628      	mov	r0, r5
    ee9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ee9e:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    eea0:	2800      	cmp	r0, #0
    eea2:	d081      	beq.n	eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    eea4:	f10b 0101 	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    eea8:	458a      	cmp	sl, r1
    eeaa:	d16a      	bne.n	ef82 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    eeac:	1f23      	subs	r3, r4, #4
    eeae:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    eeb2:	f843 6f04 	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    eeb6:	429a      	cmp	r2, r3
    eeb8:	d1fb      	bne.n	eeb2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf)  ||
    eeba:	682b      	ldr	r3, [r5, #0]
    eebc:	4622      	mov	r2, r4
    eebe:	4628      	mov	r0, r5
    eec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eec2:	4798      	blx	r3
    eec4:	2800      	cmp	r0, #0
    eec6:	f43f af6f 	beq.w	eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    eeca:	682b      	ldr	r3, [r5, #0]
    eecc:	f10b 010d 	add.w	r1, fp, #13
    eed0:	4622      	mov	r2, r4
    eed2:	4628      	mov	r0, r5
    eed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eed6:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    eed8:	2800      	cmp	r0, #0
    eeda:	f43f af65 	beq.w	eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    eede:	b12f      	cbz	r7, eeec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    eee0:	683b      	ldr	r3, [r7, #0]
    eee2:	220c      	movs	r2, #12
    eee4:	496c      	ldr	r1, [pc, #432]	; (f098 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    eee6:	4638      	mov	r0, r7
    eee8:	685b      	ldr	r3, [r3, #4]
    eeea:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    eeec:	9a06      	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    eeee:	2100      	movs	r1, #0
  sector = partitionOffset + fatOffset;
    eef0:	9b01      	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    eef2:	4620      	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    eef4:	2600      	movs	r6, #0
  sector = partitionOffset + fatOffset;
    eef6:	4413      	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    eef8:	f44f 7200 	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    eefc:	4699      	mov	r9, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    eefe:	9b05      	ldr	r3, [sp, #20]
    ef00:	ea4f 0883 	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ef04:	f013 f9fc 	bl	22300 <memset>
  secBuf[0] = 0XF8;
    ef08:	4623      	mov	r3, r4
    secBuf[i] = 0XFF;
    ef0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    ef0e:	f208 2807 	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    ef12:	21f8      	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    ef14:	f1b7 0b00 	subs.w	fp, r7, #0
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    ef18:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    ef1c:	f803 1b01 	strb.w	r1, [r3], #1
    if (i%(ns/32) == 0) {
    ef20:	ea4f 3898 	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    ef24:	f8c4 2001 	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    ef28:	bf18      	it	ne
    ef2a:	f04f 0b01 	movne.w	fp, #1
    secBuf[i] = 0XFF;
    ef2e:	60da      	str	r2, [r3, #12]
    ef30:	605a      	str	r2, [r3, #4]
    ef32:	609a      	str	r2, [r3, #8]
    ef34:	f8c3 200f 	str.w	r2, [r3, #15]
    ef38:	e002      	b.n	ef40 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    ef3a:	3601      	adds	r6, #1
    ef3c:	45b2      	cmp	sl, r6
    ef3e:	d023      	beq.n	ef88 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i%(ns/32) == 0) {
    ef40:	fbb6 f3f8 	udiv	r3, r6, r8
    ef44:	fb08 6313 	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    ef48:	b943      	cbnz	r3, ef5c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    ef4a:	f1bb 0f00 	cmp.w	fp, #0
    ef4e:	d005      	beq.n	ef5c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    ef50:	683b      	ldr	r3, [r7, #0]
    ef52:	2201      	movs	r2, #1
    ef54:	4951      	ldr	r1, [pc, #324]	; (f09c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    ef56:	4638      	mov	r0, r7
    ef58:	685b      	ldr	r3, [r3, #4]
    ef5a:	4798      	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    ef5c:	682b      	ldr	r3, [r5, #0]
    ef5e:	eb09 0106 	add.w	r1, r9, r6
    ef62:	4622      	mov	r2, r4
    ef64:	4628      	mov	r0, r5
    ef66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ef68:	4798      	blx	r3
    ef6a:	2800      	cmp	r0, #0
    ef6c:	f43f af1c 	beq.w	eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    ef70:	2e00      	cmp	r6, #0
    ef72:	d1e2      	bne.n	ef3a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    ef74:	4631      	mov	r1, r6
    ef76:	f44f 7200 	mov.w	r2, #512	; 0x200
    ef7a:	4620      	mov	r0, r4
    ef7c:	f013 f9c0 	bl	22300 <memset>
    ef80:	e7db      	b.n	ef3a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    ef82:	468b      	mov	fp, r1
    ef84:	7821      	ldrb	r1, [r4, #0]
    ef86:	e774      	b.n	ee72 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    ef88:	2f00      	cmp	r7, #0
    ef8a:	d034      	beq.n	eff6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    ef8c:	683b      	ldr	r3, [r7, #0]
    ef8e:	2202      	movs	r2, #2
    ef90:	4943      	ldr	r1, [pc, #268]	; (f0a0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    ef92:	4638      	mov	r0, r7
    ef94:	685b      	ldr	r3, [r3, #4]
    ef96:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    ef98:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    ef9a:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    ef9c:	3607      	adds	r6, #7
    ef9e:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    efa0:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    efa4:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    efa8:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    efac:	f4ff aefd 	bcc.w	edaa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    efb0:	f44f 7200 	mov.w	r2, #512	; 0x200
    efb4:	2100      	movs	r1, #0
    efb6:	4620      	mov	r0, r4
    efb8:	f013 f9a2 	bl	22300 <memset>
  secBuf[0] = 0X7;
    efbc:	2307      	movs	r3, #7
    efbe:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    efc0:	f1b9 0f00 	cmp.w	r9, #0
    efc4:	f000 808a 	beq.w	f0dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    efc8:	f04f 0800 	mov.w	r8, #0
    efcc:	e008      	b.n	efe0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    efce:	f1b8 0f00 	cmp.w	r8, #0
    efd2:	d101      	bne.n	efd8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    efd4:	f884 8000 	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    efd8:	f108 0801 	add.w	r8, r8, #1
    efdc:	45c1      	cmp	r9, r8
    efde:	d97b      	bls.n	f0d8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    efe0:	9a03      	ldr	r2, [sp, #12]
    efe2:	4628      	mov	r0, r5
    efe4:	682b      	ldr	r3, [r5, #0]
    efe6:	eb02 0108 	add.w	r1, r2, r8
    efea:	4622      	mov	r2, r4
    efec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    efee:	4798      	blx	r3
    eff0:	2800      	cmp	r0, #0
    eff2:	d1ec      	bne.n	efce <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    eff4:	e6d8      	b.n	eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7)/8;
    eff6:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    eff8:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    effa:	3607      	adds	r6, #7
    effc:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    effe:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    f002:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    f006:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    f00a:	f4ff aed4 	bcc.w	edb6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    f00e:	f44f 7200 	mov.w	r2, #512	; 0x200
    f012:	4639      	mov	r1, r7
    f014:	4620      	mov	r0, r4
    f016:	f013 f973 	bl	22300 <memset>
  secBuf[0] = 0X7;
    f01a:	2307      	movs	r3, #7
    f01c:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    f01e:	f1b9 0f00 	cmp.w	r9, #0
    f022:	d1d1      	bne.n	efc8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    f024:	9b03      	ldr	r3, [sp, #12]
    f026:	9a07      	ldr	r2, [sp, #28]
    f028:	9804      	ldr	r0, [sp, #16]
    f02a:	1899      	adds	r1, r3, r2
    f02c:	f7ff fd9a 	bl	eb64 <ExFatFormatter::writeUpcase(unsigned long)>
    f030:	2800      	cmp	r0, #0
    f032:	f43f aec0 	beq.w	edb6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    f036:	9a02      	ldr	r2, [sp, #8]
    f038:	f44f 7300 	mov.w	r3, #512	; 0x200
    f03c:	4093      	lsls	r3, r2
    f03e:	9a04      	ldr	r2, [sp, #16]
    f040:	6892      	ldr	r2, [r2, #8]
    f042:	429a      	cmp	r2, r3
    f044:	f63f aeb7 	bhi.w	edb6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    f048:	f04f 0802 	mov.w	r8, #2
    f04c:	9b02      	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    f04e:	f44f 7200 	mov.w	r2, #512	; 0x200
    f052:	2100      	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    f054:	fa08 f903 	lsl.w	r9, r8, r3
    f058:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    f05a:	4620      	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    f05c:	4499      	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    f05e:	f013 f94f 	bl	22300 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    f062:	2281      	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    f064:	2303      	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    f066:	9904      	ldr	r1, [sp, #16]
    f068:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  dbm->type = EXFAT_TYPE_BITMAP;
    f06c:	f884 2020 	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    f070:	2282      	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    f072:	7023      	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    f074:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    f078:	e9c4 860d 	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    f07c:	684a      	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    f07e:	f04f 0801 	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    f082:	6563      	str	r3, [r4, #84]	; 0x54
    f084:	6462      	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    f086:	688b      	ldr	r3, [r1, #8]
    f088:	65a3      	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    f08a:	2300      	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    f08c:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    f08e:	e00e      	b.n	f0ae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    f090:	20003a94 	.word	0x20003a94
    f094:	20003a30 	.word	0x20003a30
    f098:	20003a48 	.word	0x20003a48
    f09c:	20003a58 	.word	0x20003a58
    f0a0:	20003a70 	.word	0x20003a70
    f0a4:	9b07      	ldr	r3, [sp, #28]
    f0a6:	4598      	cmp	r8, r3
    f0a8:	d23b      	bcs.n	f122 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    f0aa:	f108 0801 	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    f0ae:	682b      	ldr	r3, [r5, #0]
    f0b0:	eb09 0108 	add.w	r1, r9, r8
    f0b4:	4622      	mov	r2, r4
    f0b6:	4628      	mov	r0, r5
    f0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f0ba:	4798      	blx	r3
    f0bc:	4606      	mov	r6, r0
    f0be:	2800      	cmp	r0, #0
    f0c0:	f43f ae72 	beq.w	eda8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    f0c4:	f1b8 0f01 	cmp.w	r8, #1
    f0c8:	d1ec      	bne.n	f0a4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    f0ca:	f44f 7200 	mov.w	r2, #512	; 0x200
    f0ce:	2100      	movs	r1, #0
    f0d0:	4620      	mov	r0, r4
    f0d2:	f013 f915 	bl	22300 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    f0d6:	e7e8      	b.n	f0aa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    f0d8:	2f00      	cmp	r7, #0
    f0da:	d0a3      	beq.n	f024 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    f0dc:	683b      	ldr	r3, [r7, #0]
    f0de:	2216      	movs	r2, #22
    f0e0:	4914      	ldr	r1, [pc, #80]	; (f134 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    f0e2:	4638      	mov	r0, r7
    f0e4:	685b      	ldr	r3, [r3, #4]
    f0e6:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    f0e8:	9b03      	ldr	r3, [sp, #12]
    f0ea:	9a07      	ldr	r2, [sp, #28]
    f0ec:	9804      	ldr	r0, [sp, #16]
    f0ee:	1899      	adds	r1, r3, r2
    f0f0:	f7ff fd38 	bl	eb64 <ExFatFormatter::writeUpcase(unsigned long)>
    f0f4:	2800      	cmp	r0, #0
    f0f6:	f43f ae58 	beq.w	edaa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    f0fa:	9a02      	ldr	r2, [sp, #8]
    f0fc:	f44f 7300 	mov.w	r3, #512	; 0x200
    f100:	4093      	lsls	r3, r2
    f102:	9a04      	ldr	r2, [sp, #16]
    f104:	6892      	ldr	r2, [r2, #8]
    f106:	429a      	cmp	r2, r3
    f108:	f63f ae4f 	bhi.w	edaa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    f10c:	490a      	ldr	r1, [pc, #40]	; (f138 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    f10e:	4638      	mov	r0, r7
    f110:	f7ff fcba 	bl	ea88 <Print::write(char const*) [clone .isra.0]>
    f114:	e798      	b.n	f048 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    f116:	f44f 7280 	mov.w	r2, #256	; 0x100
    f11a:	f8cd 8008 	str.w	r8, [sp, #8]
    f11e:	9207      	str	r2, [sp, #28]
    f120:	e5a1      	b.n	ec66 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    f122:	2f00      	cmp	r7, #0
    f124:	f43f ae48 	beq.w	edb8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    f128:	4904      	ldr	r1, [pc, #16]	; (f13c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    f12a:	4638      	mov	r0, r7
    f12c:	f7ff fcac 	bl	ea88 <Print::write(char const*) [clone .isra.0]>
    f130:	e642      	b.n	edb8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    f132:	bf00      	nop
    f134:	20003a5c 	.word	0x20003a5c
    f138:	20003a74 	.word	0x20003a74
    f13c:	20003a84 	.word	0x20003a84

0000f140 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    f140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f144:	460c      	mov	r4, r1
    f146:	4615      	mov	r5, r2
    f148:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    f14c:	89ab      	ldrh	r3, [r5, #12]
    uint16_t cp = fname->get16();
    f14e:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    f150:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    f154:	b91b      	cbnz	r3, f15e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    f156:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    f15a:	429a      	cmp	r2, r3
    f15c:	d00e      	beq.n	f17c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    f15e:	f005 f9c7 	bl	144f0 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    f162:	f005 fad9 	bl	14718 <toUpcase(unsigned short)>
    f166:	4606      	mov	r6, r0
    f168:	4638      	mov	r0, r7
    f16a:	f005 fad5 	bl	14718 <toUpcase(unsigned short)>
    f16e:	4286      	cmp	r6, r0
    f170:	d109      	bne.n	f186 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    f172:	4544      	cmp	r4, r8
    f174:	d1ea      	bne.n	f14c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    f176:	2001      	movs	r0, #1
}
    f178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    f17c:	fab7 f087 	clz	r0, r7
    f180:	0940      	lsrs	r0, r0, #5
}
    f182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    f186:	2000      	movs	r0, #0
}
    f188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f18c <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    f18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    f190:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    f194:	b083      	sub	sp, #12
    f196:	4688      	mov	r8, r1
  if (!isOpen()) {
    f198:	2b00      	cmp	r3, #0
    f19a:	d04f      	beq.n	f23c <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    f19c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    f1a0:	4607      	mov	r7, r0
    f1a2:	2b01      	cmp	r3, #1
    f1a4:	d953      	bls.n	f24e <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    f1a6:	3a01      	subs	r2, #1
  char* str = name;
    f1a8:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    f1aa:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    f1ae:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    f1b0:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    f1b2:	f8df b0a0 	ldr.w	fp, [pc, #160]	; f254 <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    f1b6:	2200      	movs	r2, #0
    f1b8:	4651      	mov	r1, sl
    f1ba:	4638      	mov	r0, r7
    f1bc:	9301      	str	r3, [sp, #4]
    f1be:	f7fe faa3 	bl	d708 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    f1c2:	2800      	cmp	r0, #0
    f1c4:	d03a      	beq.n	f23c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    f1c6:	7802      	ldrb	r2, [r0, #0]
    f1c8:	2ac1      	cmp	r2, #193	; 0xc1
    f1ca:	d137      	bne.n	f23c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    f1cc:	4605      	mov	r5, r0
    f1ce:	f100 091e 	add.w	r9, r0, #30
    f1d2:	9b01      	ldr	r3, [sp, #4]
    f1d4:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    f1d8:	b324      	cbz	r4, f224 <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    f1da:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    f1de:	b292      	uxth	r2, r2
    f1e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    f1e4:	d22a      	bcs.n	f23c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    f1e6:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    f1ea:	f3c0 0009 	ubfx	r0, r0, #0, #10
    f1ee:	4320      	orrs	r0, r4
    f1f0:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    f1f4:	4619      	mov	r1, r3
    f1f6:	4632      	mov	r2, r6
    f1f8:	f005 f9f0 	bl	145dc <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    f1fc:	4603      	mov	r3, r0
    f1fe:	b1e8      	cbz	r0, f23c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    f200:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    f202:	454d      	cmp	r5, r9
    f204:	d1e6      	bne.n	f1d4 <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    f206:	f10a 0a01 	add.w	sl, sl, #1
    f20a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    f20e:	fa5f fa8a 	uxtb.w	sl, sl
    f212:	4552      	cmp	r2, sl
    f214:	d2cf      	bcs.n	f1b6 <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    f216:	eba3 0008 	sub.w	r0, r3, r8
    f21a:	4698      	mov	r8, r3
  *str = '\0';
    f21c:	2300      	movs	r3, #0
    f21e:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    f222:	e00f      	b.n	f244 <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    f224:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    f228:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    f22a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    f22e:	d302      	bcc.n	f236 <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    f230:	2800      	cmp	r0, #0
    f232:	d1df      	bne.n	f1f4 <ExFatFile::getName8(char*, unsigned int)+0x68>
    f234:	e7ef      	b.n	f216 <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    f236:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    f23a:	d306      	bcc.n	f24a <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    f23c:	2300      	movs	r3, #0
  return 0;
    f23e:	4618      	mov	r0, r3
  *name = 0;
    f240:	f888 3000 	strb.w	r3, [r8]
}
    f244:	b003      	add	sp, #12
    f246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f24a:	4604      	mov	r4, r0
    f24c:	e7d9      	b.n	f202 <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    f24e:	2000      	movs	r0, #0
    f250:	e7e4      	b.n	f21c <ExFatFile::getName8(char*, unsigned int)+0x90>
    f252:	bf00      	nop
    f254:	000ffc00 	.word	0x000ffc00

0000f258 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    f258:	b570      	push	{r4, r5, r6, lr}
    f25a:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    f25c:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    f25e:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    f262:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    f264:	4619      	mov	r1, r3
  uint16_t hash = 0;
    f266:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    f268:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    f26a:	6123      	str	r3, [r4, #16]
    next = begin;
    f26c:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    f26e:	e017      	b.n	f2a0 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    f270:	f005 f93e 	bl	144f0 <FsName::get16()>
    if (u == 0XFFFF) {
    f274:	42a8      	cmp	r0, r5
    f276:	d022      	beq.n	f2be <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    f278:	f005 fa4e 	bl	14718 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    f27c:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    f27e:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    f280:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    f282:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    f284:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    f288:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    f28a:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    f28c:	fa52 f080 	uxtab	r0, r2, r0
    f290:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    f292:	f3c0 004e 	ubfx	r0, r0, #1, #15
    f296:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    f29a:	fa16 f080 	uxtah	r0, r6, r0
    f29e:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    f2a0:	4620      	mov	r0, r4
    f2a2:	2900      	cmp	r1, #0
    f2a4:	d1e4      	bne.n	f270 <ExFatFile::hashName(ExName_t*)+0x18>
    f2a6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    f2aa:	429a      	cmp	r2, r3
    f2ac:	d1e0      	bne.n	f270 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    f2ae:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    f2b0:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    f2b2:	3801      	subs	r0, #1
    f2b4:	28fe      	cmp	r0, #254	; 0xfe
    f2b6:	bf8c      	ite	hi
    f2b8:	2000      	movhi	r0, #0
    f2ba:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    f2bc:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    f2be:	2000      	movs	r0, #0
}
    f2c0:	bd70      	pop	{r4, r5, r6, pc}
    f2c2:	bf00      	nop

0000f2c4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    f2c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2c8:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    f2ca:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    f2cc:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    f2ce:	2900      	cmp	r1, #0
    f2d0:	d042      	beq.n	f358 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    f2d2:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    f2d6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    f2da:	4543      	cmp	r3, r8
    f2dc:	d942      	bls.n	f364 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint8_t mask = 1 << (start & 7);
    f2de:	f008 0307 	and.w	r3, r8, #7
    f2e2:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    f2e4:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    f2e8:	409d      	lsls	r5, r3
    f2ea:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    f2ec:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    f2ee:	4644      	mov	r4, r8
    uint32_t sector = m_clusterHeapStartSector +
    f2f0:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    f2f4:	2200      	movs	r2, #0
    f2f6:	4638      	mov	r0, r7
    f2f8:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    f2fc:	f005 f8d0 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    f300:	b1e8      	cbz	r0, f33e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    f302:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    f306:	4483      	add	fp, r0
    f308:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
        if (!(mask & cache[i])) {
    f30c:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    f310:	e00a      	b.n	f328 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    f312:	454a      	cmp	r2, r9
    f314:	d02b      	beq.n	f36e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
        if (endAlloc == start) {
    f316:	45a0      	cmp	r8, r4
    f318:	d010      	beq.n	f33c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
        if (endAlloc >= m_clusterCount) {
    f31a:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    f31e:	42a5      	cmp	r5, r4
    f320:	d914      	bls.n	f34c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    f322:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    f326:	d00c      	beq.n	f342 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    f328:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    f32a:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    f32c:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    f330:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    f334:	d0ed      	beq.n	f312 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    f336:	45a0      	cmp	r8, r4
        endAlloc++;
    f338:	4626      	mov	r6, r4
        if (endAlloc == start) {
    f33a:	d1ee      	bne.n	f31a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    f33c:	2001      	movs	r0, #1
}
    f33e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    f342:	4558      	cmp	r0, fp
      mask = 1;
    f344:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    f348:	d1e0      	bne.n	f30c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    f34a:	e001      	b.n	f350 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    f34c:	2600      	movs	r6, #0
    f34e:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    f350:	2501      	movs	r5, #1
    i = 0;
    f352:	f04f 0b00 	mov.w	fp, #0
    f356:	e7cb      	b.n	f2f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    f358:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    f35c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    f360:	4543      	cmp	r3, r8
    f362:	d8bc      	bhi.n	f2de <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    f364:	f04f 0800 	mov.w	r8, #0
    f368:	2501      	movs	r5, #1
    start = 0;
    f36a:	46c3      	mov	fp, r8
    f36c:	e7be      	b.n	f2ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    f36e:	f1ba 0f00 	cmp.w	sl, #0
    f372:	d104      	bne.n	f37e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    f374:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    f378:	bf08      	it	eq
    f37a:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    f37e:	1cb0      	adds	r0, r6, #2
}
    f380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f384 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
                                  uint32_t count, bool value) {
    f384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f388:	4680      	mov	r8, r0
  uint32_t start = cluster - 2;
    f38a:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    f38c:	4615      	mov	r5, r2
    f38e:	461e      	mov	r6, r3
  if ((start + count) > m_clusterCount) {
    f390:	1883      	adds	r3, r0, r2
    f392:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    f396:	4293      	cmp	r3, r2
    f398:	d837      	bhi.n	f40a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
  if (value) {
    f39a:	bbce      	cbnz	r6, f410 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start < m_bitmapStart) {
    f39c:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    f3a0:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    f3a2:	bf88      	it	hi
    f3a4:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
  mask = 1 << (start & 7);
    f3a8:	f000 0307 	and.w	r3, r0, #7
    f3ac:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    f3ae:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    f3b2:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    f3b6:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    f3b8:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    f3bc:	b2e4      	uxtb	r4, r4
    f3be:	2201      	movs	r2, #1
    f3c0:	4640      	mov	r0, r8
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    f3c2:	188f      	adds	r7, r1, r2
    f3c4:	f005 f86c 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    f3c8:	b1f8      	cbz	r0, f40a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    f3ca:	f109 3eff 	add.w	lr, r9, #4294967295	; 0xffffffff
    f3ce:	4486      	add	lr, r0
    f3d0:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
        if (value == static_cast<bool>(cache[i] & mask)) {
    f3d4:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    f3d8:	ea1c 0f04 	tst.w	ip, r4
        cache[i] ^= mask;
    f3dc:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    f3e0:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    f3e4:	bf14      	ite	ne
    f3e6:	2201      	movne	r2, #1
    f3e8:	2200      	moveq	r2, #0
    f3ea:	42b2      	cmp	r2, r6
    f3ec:	d00d      	beq.n	f40a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    f3ee:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    f3f0:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    f3f4:	d018      	beq.n	f428 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    f3f6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    f3fa:	d1ed      	bne.n	f3d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    f3fc:	4570      	cmp	r0, lr
    i = 0;
    f3fe:	46a1      	mov	r9, r4
    f400:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    f404:	d1e6      	bne.n	f3d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    f406:	4639      	mov	r1, r7
    f408:	e7d9      	b.n	f3be <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  return false;
    f40a:	2000      	movs	r0, #0
}
    f40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    f410:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    f414:	428b      	cmp	r3, r1
    f416:	d9c7      	bls.n	f3a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    f418:	4281      	cmp	r1, r0
    f41a:	d3c5      	bcc.n	f3a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    f41c:	4293      	cmp	r3, r2
    f41e:	bf28      	it	cs
    f420:	2300      	movcs	r3, #0
    f422:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    f426:	e7bf      	b.n	f3a8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    f428:	2001      	movs	r0, #1
}
    f42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f42e:	bf00      	nop

0000f430 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    f430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cluster > (m_clusterCount + 1)) {
    f432:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    f436:	3301      	adds	r3, #1
    f438:	428b      	cmp	r3, r1
    f43a:	d201      	bcs.n	f440 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    f43c:	2000      	movs	r0, #0
}
    f43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f440:	4607      	mov	r7, r0
    f442:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    f444:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    f448:	2500      	movs	r5, #0
    f44a:	e005      	b.n	f458 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    f44c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    f450:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    f452:	3301      	adds	r3, #1
    f454:	42a3      	cmp	r3, r4
    f456:	d3f1      	bcc.n	f43c <ExFatPartition::chainSize(unsigned long)+0xc>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f458:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    f45c:	2200      	movs	r2, #0
    f45e:	4630      	mov	r0, r6
    f460:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    f464:	f005 f81c 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f468:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    f46a:	2800      	cmp	r0, #0
    f46c:	d0e6      	beq.n	f43c <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f46e:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    f472:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    f474:	1c63      	adds	r3, r4, #1
    f476:	d1e9      	bne.n	f44c <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    f478:	1c68      	adds	r0, r5, #1
}
    f47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f47c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    f47c:	b538      	push	{r3, r4, r5, lr}
    f47e:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    f480:	680b      	ldr	r3, [r1, #0]
    f482:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    f486:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    f48a:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    f48e:	3b02      	subs	r3, #2
    f490:	6865      	ldr	r5, [r4, #4]
    f492:	fa03 f30c 	lsl.w	r3, r3, ip
    f496:	4029      	ands	r1, r5
    f498:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    f49c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    f4a0:	4419      	add	r1, r3
    f4a2:	f004 fffd 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    f4a6:	b118      	cbz	r0, f4b0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    f4a8:	6863      	ldr	r3, [r4, #4]
    f4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    f4ae:	4418      	add	r0, r3
}
    f4b0:	bd38      	pop	{r3, r4, r5, pc}
    f4b2:	bf00      	nop

0000f4b4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    f4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f4b8:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    f4ba:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    f4be:	6849      	ldr	r1, [r1, #4]
    f4c0:	400b      	ands	r3, r1
  pos->position += offset;
    f4c2:	4411      	add	r1, r2
    f4c4:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    f4c6:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    f4c8:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    f4cc:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    f4d0:	b2d2      	uxtb	r2, r2
    f4d2:	40d3      	lsrs	r3, r2
  while (tmp--) {
    f4d4:	b32b      	cbz	r3, f522 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    f4d6:	4680      	mov	r8, r0
    f4d8:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    f4da:	f500 7904 	add.w	r9, r0, #528	; 0x210
    f4de:	e005      	b.n	f4ec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    f4e0:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    f4e2:	3d01      	subs	r5, #1
      pos->cluster++;
    f4e4:	f103 0301 	add.w	r3, r3, #1
    f4e8:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    f4ea:	d31a      	bcc.n	f522 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    f4ec:	7a26      	ldrb	r6, [r4, #8]
    f4ee:	2e00      	cmp	r6, #0
    f4f0:	d1f6      	bne.n	f4e0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    f4f2:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    f4f6:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    f4f8:	6827      	ldr	r7, [r4, #0]
    f4fa:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    f4fc:	3301      	adds	r3, #1
    f4fe:	429f      	cmp	r7, r3
    f500:	d812      	bhi.n	f528 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f502:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    f506:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    f50a:	f004 ffc9 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f50e:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    f510:	b150      	cbz	r0, f528 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f512:	f3c7 0708 	ubfx	r7, r7, #0, #9
    f516:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    f518:	1c5a      	adds	r2, r3, #1
    f51a:	d009      	beq.n	f530 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    f51c:	3d01      	subs	r5, #1
  *value = next;
    f51e:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    f520:	d2e4      	bcs.n	f4ec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    f522:	2001      	movs	r0, #1
}
    f524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    f528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f52c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    f530:	4630      	mov	r0, r6
}
    f532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f536:	bf00      	nop

0000f538 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    f538:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    f53a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    f53e:	3301      	adds	r3, #1
    f540:	428b      	cmp	r3, r1
    f542:	d202      	bcs.n	f54a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    f544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f548:	bd38      	pop	{r3, r4, r5, pc}
    f54a:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f54c:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    f550:	4615      	mov	r5, r2
    f552:	f500 7004 	add.w	r0, r0, #528	; 0x210
    f556:	2200      	movs	r2, #0
    f558:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    f55c:	f004 ffa0 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    f560:	2800      	cmp	r0, #0
    f562:	d0ef      	beq.n	f544 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f564:	00a4      	lsls	r4, r4, #2
    f566:	f3c4 0408 	ubfx	r4, r4, #0, #9
    f56a:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    f56c:	1c5a      	adds	r2, r3, #1
    f56e:	d002      	beq.n	f576 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    f570:	2001      	movs	r0, #1
  *value = next;
    f572:	602b      	str	r3, [r5, #0]
}
    f574:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    f576:	2000      	movs	r0, #0
}
    f578:	bd38      	pop	{r3, r4, r5, pc}
    f57a:	bf00      	nop

0000f57c <ExFatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    f57c:	2901      	cmp	r1, #1
    f57e:	d91b      	bls.n	f5b8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    f580:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    f582:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    f586:	460c      	mov	r4, r1
    f588:	3301      	adds	r3, #1
    f58a:	428b      	cmp	r3, r1
    f58c:	d201      	bcs.n	f592 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
    f58e:	2000      	movs	r0, #0
}
    f590:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f592:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    f596:	4615      	mov	r5, r2
    f598:	f500 7004 	add.w	r0, r0, #528	; 0x210
    f59c:	2201      	movs	r2, #1
    f59e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    f5a2:	f004 ff7d 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    f5a6:	4603      	mov	r3, r0
    f5a8:	2800      	cmp	r0, #0
    f5aa:	d0f0      	beq.n	f58e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    f5ac:	00a4      	lsls	r4, r4, #2
  return true;
    f5ae:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    f5b0:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    f5b4:	511d      	str	r5, [r3, r4]
}
    f5b6:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    f5b8:	2000      	movs	r0, #0
}
    f5ba:	4770      	bx	lr

0000f5bc <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    f5bc:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    f5c0:	3301      	adds	r3, #1
    f5c2:	4299      	cmp	r1, r3
    f5c4:	d901      	bls.n	f5ca <ExFatPartition::freeChain(unsigned long)+0xe>
}
    f5c6:	2000      	movs	r0, #0
    f5c8:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    f5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5ce:	4605      	mov	r5, r0
    f5d0:	b083      	sub	sp, #12
    f5d2:	460c      	mov	r4, r1
    f5d4:	f500 7904 	add.w	r9, r0, #528	; 0x210
    f5d8:	460f      	mov	r7, r1
    f5da:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f5de:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    f5e2:	2200      	movs	r2, #0
    f5e4:	4648      	mov	r0, r9
    f5e6:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    f5ea:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    f5ee:	f004 ff57 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    f5f2:	b190      	cbz	r0, f61a <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f5f4:	00a3      	lsls	r3, r4, #2
    f5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    f5fa:	58c2      	ldr	r2, [r0, r3]
    f5fc:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    f5fe:	1c53      	adds	r3, r2, #1
    f600:	bf16      	itet	ne
    f602:	4616      	movne	r6, r2
    f604:	f04f 0a00 	moveq.w	sl, #0
    f608:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    f60c:	2c01      	cmp	r4, #1
    f60e:	d904      	bls.n	f61a <ExFatPartition::freeChain(unsigned long)+0x5e>
    f610:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    f614:	3201      	adds	r2, #1
    f616:	4294      	cmp	r4, r2
    f618:	d903      	bls.n	f622 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    f61a:	2000      	movs	r0, #0
    f61c:	b003      	add	sp, #12
    f61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f622:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    f626:	2201      	movs	r2, #1
    f628:	4648      	mov	r0, r9
    f62a:	4459      	add	r1, fp
    f62c:	f004 ff38 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    f630:	2800      	cmp	r0, #0
    f632:	d0f2      	beq.n	f61a <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    f634:	9b01      	ldr	r3, [sp, #4]
    f636:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    f63a:	f1ba 0f00 	cmp.w	sl, #0
    f63e:	d012      	beq.n	f666 <ExFatPartition::freeChain(unsigned long)+0xaa>
    f640:	3401      	adds	r4, #1
    f642:	42b4      	cmp	r4, r6
    f644:	d008      	beq.n	f658 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    f646:	2300      	movs	r3, #0
    f648:	1be2      	subs	r2, r4, r7
    f64a:	4639      	mov	r1, r7
    f64c:	4628      	mov	r0, r5
    f64e:	f7ff fe99 	bl	f384 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    f652:	2800      	cmp	r0, #0
    f654:	d0e1      	beq.n	f61a <ExFatPartition::freeChain(unsigned long)+0x5e>
    f656:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    f658:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    f65c:	3301      	adds	r3, #1
    f65e:	42b3      	cmp	r3, r6
    f660:	d3db      	bcc.n	f61a <ExFatPartition::freeChain(unsigned long)+0x5e>
    f662:	4634      	mov	r4, r6
    f664:	e7bb      	b.n	f5de <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    f666:	1c62      	adds	r2, r4, #1
    f668:	4653      	mov	r3, sl
    f66a:	4639      	mov	r1, r7
    f66c:	4628      	mov	r0, r5
    f66e:	1bd2      	subs	r2, r2, r7
}
    f670:	b003      	add	sp, #12
    f672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    f676:	f7ff be85 	b.w	f384 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    f67a:	bf00      	nop

0000f67c <ExFatPartition::freeClusterCount()>:
uint32_t ExFatPartition::freeClusterCount() {
    f67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t usedCount = 0;
    f680:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    f682:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    f684:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    f688:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    f68c:	462c      	mov	r4, r5
    f68e:	2200      	movs	r2, #0
    f690:	4640      	mov	r0, r8
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    f692:	1c4f      	adds	r7, r1, #1
    f694:	f004 ff04 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    f698:	b1a8      	cbz	r0, f6c6 <ExFatPartition::freeClusterCount()+0x4a>
    f69a:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
    f69e:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
      if (nc >= m_clusterCount) {
    f6a2:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    f6a6:	e005      	b.n	f6b4 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    f6a8:	b979      	cbnz	r1, f6ca <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    f6aa:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    f6ac:	4284      	cmp	r4, r0
    f6ae:	d209      	bcs.n	f6c4 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    f6b0:	454c      	cmp	r4, r9
    f6b2:	d016      	beq.n	f6e2 <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    f6b4:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    f6b8:	29ff      	cmp	r1, #255	; 0xff
    f6ba:	d1f5      	bne.n	f6a8 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    f6bc:	3408      	adds	r4, #8
        usedCount+= 8;
    f6be:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    f6c0:	4284      	cmp	r4, r0
    f6c2:	d3f5      	bcc.n	f6b0 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    f6c4:	1b40      	subs	r0, r0, r5
}
    f6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f6ca:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    f6cc:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    f6ce:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    f6d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    f6d4:	bf18      	it	ne
    f6d6:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    f6d8:	3a01      	subs	r2, #1
    f6da:	fa5f f38c 	uxtb.w	r3, ip
    f6de:	d1f6      	bne.n	f6ce <ExFatPartition::freeClusterCount()+0x52>
    f6e0:	e7e3      	b.n	f6aa <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    f6e2:	4639      	mov	r1, r7
    f6e4:	e7d3      	b.n	f68e <ExFatPartition::freeClusterCount()+0x12>
    f6e6:	bf00      	nop

0000f6e8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    f6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  m_fatType = 0;
    f6ea:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    f6ec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    f6f0:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    f6f4:	4615      	mov	r5, r2
  m_blockDev = dev;
    f6f6:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    f6fa:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    f6fc:	6041      	str	r1, [r0, #4]
    f6fe:	461a      	mov	r2, r3
    f700:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    f704:	4619      	mov	r1, r3
  m_fatType = 0;
    f706:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    f70a:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    f70c:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    f70e:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    f712:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    f716:	4638      	mov	r0, r7
    f718:	f004 fec2 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (part > 4 || !cache) {
    f71c:	2d04      	cmp	r5, #4
    f71e:	d80d      	bhi.n	f73c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    f720:	4606      	mov	r6, r0
    f722:	b158      	cbz	r0, f73c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (part >= 1) {
    f724:	b1bd      	cbz	r5, f756 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mp = &mbr->part[part - 1];
    f726:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    f728:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    f72c:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    f730:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    f734:	d102      	bne.n	f73c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    f736:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    f73a:	b90b      	cbnz	r3, f740 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  return false;
    f73c:	2000      	movs	r0, #0
}
    f73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    f740:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    f744:	4638      	mov	r0, r7
    f746:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    f74a:	4629      	mov	r1, r5
    f74c:	f004 fea8 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    f750:	4606      	mov	r6, r0
    f752:	2800      	cmp	r0, #0
    f754:	d0f2      	beq.n	f73c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    f756:	2205      	movs	r2, #5
    f758:	491a      	ldr	r1, [pc, #104]	; (f7c4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    f75a:	1cf0      	adds	r0, r6, #3
    f75c:	f012 fe22 	bl	223a4 <strncmp>
    f760:	2800      	cmp	r0, #0
    f762:	d1eb      	bne.n	f73c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    f764:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    f768:	2b09      	cmp	r3, #9
    f76a:	d1e7      	bne.n	f73c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    f76c:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    f76e:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    f770:	442b      	add	r3, r5
    f772:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    f776:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    f778:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    f77c:	6db3      	ldr	r3, [r6, #88]	; 0x58
    f77e:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    f780:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    f782:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    f786:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    f788:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    f78c:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    f78e:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    f792:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    f796:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    f79a:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    f79c:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    f7a0:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    f7a4:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    f7a8:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    f7aa:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    f7ae:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    f7b2:	462a      	mov	r2, r5
    f7b4:	f7ff fd86 	bl	f2c4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    f7b8:	2340      	movs	r3, #64	; 0x40
  return true;
    f7ba:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    f7bc:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    f7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f7c2:	bf00      	nop
    f7c4:	20003aa4 	.word	0x20003aa4

0000f7c8 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    f7c8:	b510      	push	{r4, lr}
    f7ca:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    f7cc:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    f7d0:	f7ff fe2e 	bl	f430 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    f7d4:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    f7d8:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    f7da:	b2db      	uxtb	r3, r3
}
    f7dc:	4098      	lsls	r0, r3
    f7de:	bd10      	pop	{r4, pc}

0000f7e0 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    f7e0:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    f7e2:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    f7e6:	b082      	sub	sp, #8
    f7e8:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    f7ea:	2b00      	cmp	r3, #0
    f7ec:	db0d      	blt.n	f80a <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    f7ee:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    f7f0:	f105 0028 	add.w	r0, r5, #40	; 0x28
    f7f4:	f004 fe28 	bl	14448 <FsCache::sync()>
    f7f8:	2800      	cmp	r0, #0
    f7fa:	d13b      	bne.n	f874 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    f7fc:	7863      	ldrb	r3, [r4, #1]
  return false;
    f7fe:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    f800:	f043 0301 	orr.w	r3, r3, #1
    f804:	7063      	strb	r3, [r4, #1]
}
    f806:	b002      	add	sp, #8
    f808:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    f80a:	6880      	ldr	r0, [r0, #8]
    f80c:	2201      	movs	r2, #1
    f80e:	69a1      	ldr	r1, [r4, #24]
    f810:	3028      	adds	r0, #40	; 0x28
    f812:	f004 fe45 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    f816:	2800      	cmp	r0, #0
    f818:	d0f0      	beq.n	f7fc <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    f81a:	88a5      	ldrh	r5, [r4, #4]
    f81c:	f005 050f 	and.w	r5, r5, #15
    f820:	016b      	lsls	r3, r5, #5
    f822:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    f826:	5cc3      	ldrb	r3, [r0, r3]
    f828:	2be5      	cmp	r3, #229	; 0xe5
    f82a:	d0e7      	beq.n	f7fc <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    f82c:	7823      	ldrb	r3, [r4, #0]
    f82e:	071b      	lsls	r3, r3, #28
    f830:	d501      	bpl.n	f836 <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    f832:	69e3      	ldr	r3, [r4, #28]
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    f834:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    f836:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    f838:	4915      	ldr	r1, [pc, #84]	; (f890 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    f83a:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    f83c:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    f83e:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    f840:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    f842:	b166      	cbz	r6, f85e <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    f844:	f10d 0203 	add.w	r2, sp, #3
    f848:	f10d 0106 	add.w	r1, sp, #6
    f84c:	a801      	add	r0, sp, #4
    f84e:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    f850:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    f854:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f858:	832b      	strh	r3, [r5, #24]
    f85a:	826b      	strh	r3, [r5, #18]
    f85c:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    f85e:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    f860:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    f862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    f866:	f105 0028 	add.w	r0, r5, #40	; 0x28
    f86a:	70a3      	strb	r3, [r4, #2]
    f86c:	f004 fdec 	bl	14448 <FsCache::sync()>
    f870:	2800      	cmp	r0, #0
    f872:	d0c3      	beq.n	f7fc <FatFile::sync() [clone .part.0]+0x1c>
    f874:	f505 700e 	add.w	r0, r5, #568	; 0x238
    f878:	f004 fde6 	bl	14448 <FsCache::sync()>
    f87c:	2800      	cmp	r0, #0
    f87e:	d0bd      	beq.n	f7fc <FatFile::sync() [clone .part.0]+0x1c>
    f880:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    f882:	6803      	ldr	r3, [r0, #0]
    f884:	6a1b      	ldr	r3, [r3, #32]
    f886:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    f888:	2800      	cmp	r0, #0
    f88a:	d0b7      	beq.n	f7fc <FatFile::sync() [clone .part.0]+0x1c>
    f88c:	e7bb      	b.n	f806 <FatFile::sync() [clone .part.0]+0x26>
    f88e:	bf00      	nop
    f890:	2000adbc 	.word	0x2000adbc

0000f894 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    f894:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    f896:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    f898:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    f89c:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    f89e:	6880      	ldr	r0, [r0, #8]
    f8a0:	4629      	mov	r1, r5
    f8a2:	f002 f921 	bl	11ae8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    f8a6:	b150      	cbz	r0, f8be <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    f8a8:	b155      	cbz	r5, f8c0 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    f8aa:	6923      	ldr	r3, [r4, #16]
    f8ac:	3501      	adds	r5, #1
    f8ae:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    f8b0:	78a3      	ldrb	r3, [r4, #2]
    f8b2:	bf18      	it	ne
    f8b4:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    f8b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f8bc:	70a3      	strb	r3, [r4, #2]
}
    f8be:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    f8c0:	78a3      	ldrb	r3, [r4, #2]
    f8c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f8c6:	e7f7      	b.n	f8b8 <FatFile::addCluster()+0x24>

0000f8c8 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    f8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    f8ca:	7804      	ldrb	r4, [r0, #0]
    f8cc:	f014 0420 	ands.w	r4, r4, #32
    f8d0:	d104      	bne.n	f8dc <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    f8d2:	4b1a      	ldr	r3, [pc, #104]	; (f93c <FatFile::addDirCluster()+0x74>)
    f8d4:	4605      	mov	r5, r0
    f8d6:	6942      	ldr	r2, [r0, #20]
    f8d8:	429a      	cmp	r2, r3
    f8da:	d302      	bcc.n	f8e2 <FatFile::addDirCluster()+0x1a>
  return false;
    f8dc:	2700      	movs	r7, #0
}
    f8de:	4638      	mov	r0, r7
    f8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    f8e2:	f7ff ffd7 	bl	f894 <FatFile::addCluster()>
    f8e6:	4607      	mov	r7, r0
    f8e8:	2800      	cmp	r0, #0
    f8ea:	d0f7      	beq.n	f8dc <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    f8ec:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    f8ee:	692e      	ldr	r6, [r5, #16]
    f8f0:	7982      	ldrb	r2, [r0, #6]
    f8f2:	3e02      	subs	r6, #2
    f8f4:	6941      	ldr	r1, [r0, #20]
    f8f6:	4096      	lsls	r6, r2
    f8f8:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    f8fa:	7901      	ldrb	r1, [r0, #4]
    f8fc:	b1a9      	cbz	r1, f92a <FatFile::addDirCluster()+0x62>
    f8fe:	4621      	mov	r1, r4
    f900:	e006      	b.n	f910 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    f902:	f012 fcfd 	bl	22300 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    f906:	68a8      	ldr	r0, [r5, #8]
    f908:	b2e1      	uxtb	r1, r4
    f90a:	7902      	ldrb	r2, [r0, #4]
    f90c:	428a      	cmp	r2, r1
    f90e:	d90b      	bls.n	f928 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    f910:	4431      	add	r1, r6
    f912:	2205      	movs	r2, #5
    f914:	3028      	adds	r0, #40	; 0x28
    f916:	3401      	adds	r4, #1
    f918:	f004 fdc2 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    f91c:	f44f 7200 	mov.w	r2, #512	; 0x200
    f920:	2100      	movs	r1, #0
    if (!pc) {
    f922:	2800      	cmp	r0, #0
    f924:	d1ed      	bne.n	f902 <FatFile::addDirCluster()+0x3a>
    f926:	e7d9      	b.n	f8dc <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    f928:	7982      	ldrb	r2, [r0, #6]
    f92a:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    f92e:	6969      	ldr	r1, [r5, #20]
}
    f930:	4638      	mov	r0, r7
    f932:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    f934:	fa11 f383 	uxtah	r3, r1, r3
    f938:	616b      	str	r3, [r5, #20]
}
    f93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f93c:	001ffe00 	.word	0x001ffe00

0000f940 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    f940:	b510      	push	{r4, lr}
    f942:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    f944:	6880      	ldr	r0, [r0, #8]
    f946:	460a      	mov	r2, r1
    f948:	3028      	adds	r0, #40	; 0x28
    f94a:	69a1      	ldr	r1, [r4, #24]
    f94c:	f004 fda8 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    f950:	b120      	cbz	r0, f95c <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    f952:	88a3      	ldrh	r3, [r4, #4]
    f954:	f003 030f 	and.w	r3, r3, #15
    f958:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    f95c:	bd10      	pop	{r4, pc}
    f95e:	bf00      	nop

0000f960 <FatFile::close()>:
bool FatFile::close() {
    f960:	b510      	push	{r4, lr}
  if (!isOpen()) {
    f962:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    f964:	4604      	mov	r4, r0
  if (!isOpen()) {
    f966:	b12b      	cbz	r3, f974 <FatFile::close()+0x14>
    f968:	f7ff ff3a 	bl	f7e0 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    f96c:	2300      	movs	r3, #0
    f96e:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    f970:	70a3      	strb	r3, [r4, #2]
}
    f972:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    f974:	2300      	movs	r3, #0
    return true;
    f976:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    f978:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    f97a:	70a3      	strb	r3, [r4, #2]
}
    f97c:	bd10      	pop	{r4, pc}
    f97e:	bf00      	nop

0000f980 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    f980:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    f982:	7803      	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    f984:	4605      	mov	r5, r0
    f986:	460c      	mov	r4, r1
  if (!isOpen()) {
    f988:	b113      	cbz	r3, f990 <FatFile::dirEntry(DirFat_t*)+0x10>
    f98a:	f7ff ff29 	bl	f7e0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    f98e:	b1f0      	cbz	r0, f9ce <FatFile::dirEntry(DirFat_t*)+0x4e>
    f990:	68a8      	ldr	r0, [r5, #8]
    f992:	2200      	movs	r2, #0
    f994:	69a9      	ldr	r1, [r5, #24]
    f996:	3028      	adds	r0, #40	; 0x28
    f998:	f004 fd82 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    f99c:	b1b8      	cbz	r0, f9ce <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    f99e:	88aa      	ldrh	r2, [r5, #4]
    f9a0:	f002 020f 	and.w	r2, r2, #15
    f9a4:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    f9a8:	0152      	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    f9aa:	685d      	ldr	r5, [r3, #4]
    f9ac:	5880      	ldr	r0, [r0, r2]
    f9ae:	6899      	ldr	r1, [r3, #8]
    f9b0:	68da      	ldr	r2, [r3, #12]
    f9b2:	6020      	str	r0, [r4, #0]
    f9b4:	6065      	str	r5, [r4, #4]
    f9b6:	60a1      	str	r1, [r4, #8]
    f9b8:	60e2      	str	r2, [r4, #12]
    f9ba:	6918      	ldr	r0, [r3, #16]
    f9bc:	695d      	ldr	r5, [r3, #20]
    f9be:	6999      	ldr	r1, [r3, #24]
    f9c0:	69da      	ldr	r2, [r3, #28]
    f9c2:	6120      	str	r0, [r4, #16]
  return true;
    f9c4:	2001      	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    f9c6:	6165      	str	r5, [r4, #20]
    f9c8:	61a1      	str	r1, [r4, #24]
    f9ca:	61e2      	str	r2, [r4, #28]
}
    f9cc:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    f9ce:	2000      	movs	r0, #0
}
    f9d0:	bd38      	pop	{r3, r4, r5, pc}
    f9d2:	bf00      	nop

0000f9d4 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    f9d4:	b530      	push	{r4, r5, lr}
    f9d6:	b089      	sub	sp, #36	; 0x24
    f9d8:	460d      	mov	r5, r1
    f9da:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    f9dc:	4669      	mov	r1, sp
    f9de:	f7ff ffcf 	bl	f980 <FatFile::dirEntry(DirFat_t*)>
    f9e2:	b128      	cbz	r0, f9f0 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    f9e4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    f9e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    f9ec:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    f9ee:	8023      	strh	r3, [r4, #0]
}
    f9f0:	b009      	add	sp, #36	; 0x24
    f9f2:	bd30      	pop	{r4, r5, pc}

0000f9f4 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    f9f4:	b530      	push	{r4, r5, lr}
    f9f6:	b089      	sub	sp, #36	; 0x24
    f9f8:	460d      	mov	r5, r1
    f9fa:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    f9fc:	4669      	mov	r1, sp
    f9fe:	f7ff ffbf 	bl	f980 <FatFile::dirEntry(DirFat_t*)>
    fa02:	b128      	cbz	r0, fa10 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    fa04:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    fa08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    fa0c:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    fa0e:	8023      	strh	r3, [r4, #0]
}
    fa10:	b009      	add	sp, #36	; 0x24
    fa12:	bd30      	pop	{r4, r5, pc}

0000fa14 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    fa14:	780b      	ldrb	r3, [r1, #0]
    fa16:	f013 0f70 	tst.w	r3, #112	; 0x70
    fa1a:	d101      	bne.n	fa20 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    fa1c:	2000      	movs	r0, #0
    fa1e:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    fa20:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    fa22:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    fa26:	b089      	sub	sp, #36	; 0x24
    fa28:	460d      	mov	r5, r1
    fa2a:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    fa2c:	f001 f8f0 	bl	10c10 <FatFile::open(FatFile*, FatLfn_t*, int)>
    fa30:	b138      	cbz	r0, fa42 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    fa32:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    fa34:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    fa36:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    fa38:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    fa3a:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    fa3c:	f7ff ff44 	bl	f8c8 <FatFile::addDirCluster()>
    fa40:	b910      	cbnz	r0, fa48 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    fa42:	2000      	movs	r0, #0
    fa44:	b009      	add	sp, #36	; 0x24
    fa46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    fa48:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    fa4a:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    fa4c:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    fa4e:	b16b      	cbz	r3, fa6c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    fa50:	6963      	ldr	r3, [r4, #20]
    fa52:	b133      	cbz	r3, fa62 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    fa54:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    fa56:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    fa58:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    fa5c:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    fa60:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    fa62:	4620      	mov	r0, r4
    fa64:	f7ff febc 	bl	f7e0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    fa68:	2800      	cmp	r0, #0
    fa6a:	d0ea      	beq.n	fa42 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    fa6c:	68a0      	ldr	r0, [r4, #8]
    fa6e:	2201      	movs	r2, #1
    fa70:	69a1      	ldr	r1, [r4, #24]
    fa72:	3028      	adds	r0, #40	; 0x28
    fa74:	f004 fd14 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    fa78:	2800      	cmp	r0, #0
    fa7a:	d0e2      	beq.n	fa42 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    fa7c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    fa80:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    fa82:	f00c 0c0f 	and.w	ip, ip, #15
    fa86:	ea4f 134c 	mov.w	r3, ip, lsl #5
    fa8a:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    fa8e:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    fa92:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    fa94:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    fa96:	6a23      	ldr	r3, [r4, #32]
    fa98:	f897 e006 	ldrb.w	lr, [r7, #6]
    fa9c:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    fa9e:	f8dc 1004 	ldr.w	r1, [ip, #4]
    faa2:	f8dc 2008 	ldr.w	r2, [ip, #8]
    faa6:	f8dc 300c 	ldr.w	r3, [ip, #12]
    faaa:	fa06 f60e 	lsl.w	r6, r6, lr
    faae:	46ee      	mov	lr, sp
    fab0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    fab4:	f8dc 0010 	ldr.w	r0, [ip, #16]
    fab8:	f8dc 1014 	ldr.w	r1, [ip, #20]
    fabc:	f8dc 2018 	ldr.w	r2, [ip, #24]
    fac0:	f8dc 301c 	ldr.w	r3, [ip, #28]
    fac4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    fac8:	697b      	ldr	r3, [r7, #20]
    faca:	f107 0028 	add.w	r0, r7, #40	; 0x28
    face:	2201      	movs	r2, #1
    fad0:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    fad2:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    fad6:	f8cd 3001 	str.w	r3, [sp, #1]
    fada:	f8cd 3005 	str.w	r3, [sp, #5]
    fade:	f8ad 3009 	strh.w	r3, [sp, #9]
    fae2:	f004 fcdd 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    fae6:	4684      	mov	ip, r0
    fae8:	2800      	cmp	r0, #0
    faea:	d0aa      	beq.n	fa42 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    faec:	272e      	movs	r7, #46	; 0x2e
    faee:	46ee      	mov	lr, sp
    faf0:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    faf4:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    faf6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    fafa:	f8cc 0000 	str.w	r0, [ip]
    fafe:	f8cc 1004 	str.w	r1, [ip, #4]
    fb02:	f8cc 2008 	str.w	r2, [ip, #8]
    fb06:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    fb0a:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    fb0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    fb12:	f8cc 0010 	str.w	r0, [ip, #16]
    fb16:	f8cc 1014 	str.w	r1, [ip, #20]
    fb1a:	f8cc 2018 	str.w	r2, [ip, #24]
    fb1e:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    fb22:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    fb24:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    fb26:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    fb2a:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    fb2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fb30:	f8cc 0020 	str.w	r0, [ip, #32]
    fb34:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    fb38:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    fb3c:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    fb40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    fb42:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    fb46:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    fb4a:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    fb4e:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    fb52:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    fb54:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fb58:	f004 fc76 	bl	14448 <FsCache::sync()>
    fb5c:	2800      	cmp	r0, #0
    fb5e:	f43f af70 	beq.w	fa42 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    fb62:	f504 700e 	add.w	r0, r4, #568	; 0x238
    fb66:	f004 fc6f 	bl	14448 <FsCache::sync()>
    fb6a:	2800      	cmp	r0, #0
    fb6c:	f43f af69 	beq.w	fa42 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    fb70:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    fb72:	6803      	ldr	r3, [r0, #0]
    fb74:	6a1b      	ldr	r3, [r3, #32]
}
    fb76:	b009      	add	sp, #36	; 0x24
    fb78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    fb7c:	4718      	bx	r3
    fb7e:	bf00      	nop

0000fb80 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    fb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    fb84:	2600      	movs	r6, #0
    fb86:	b094      	sub	sp, #80	; 0x50
    fb88:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    fb8a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    fb8c:	9201      	str	r2, [sp, #4]
    fb8e:	f8ad 6014 	strh.w	r6, [sp, #20]
    fb92:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    fb94:	2b00      	cmp	r3, #0
    fb96:	d141      	bne.n	fc1c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    fb98:	780b      	ldrb	r3, [r1, #0]
    fb9a:	460d      	mov	r5, r1
    fb9c:	f013 0f70 	tst.w	r3, #112	; 0x70
    fba0:	d03c      	beq.n	fc1c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    fba2:	7813      	ldrb	r3, [r2, #0]
    fba4:	4604      	mov	r4, r0
    fba6:	4616      	mov	r6, r2
    fba8:	2b2f      	cmp	r3, #47	; 0x2f
    fbaa:	d03b      	beq.n	fc24 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    fbac:	2700      	movs	r7, #0
    fbae:	e028      	b.n	fc02 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    fbb0:	9e01      	ldr	r6, [sp, #4]
    fbb2:	7836      	ldrb	r6, [r6, #0]
    fbb4:	2e00      	cmp	r6, #0
    fbb6:	d050      	beq.n	fc5a <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    fbb8:	f001 f82a 	bl	10c10 <FatFile::open(FatFile*, FatLfn_t*, int)>
    fbbc:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    fbbe:	aa02      	add	r2, sp, #8
    fbc0:	4629      	mov	r1, r5
    fbc2:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    fbc4:	b92b      	cbnz	r3, fbd2 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    fbc6:	f1b8 0f00 	cmp.w	r8, #0
    fbca:	d027      	beq.n	fc1c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    fbcc:	f7ff ff22 	bl	fa14 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    fbd0:	b320      	cbz	r0, fc1c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    fbd2:	46a6      	mov	lr, r4
    fbd4:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    fbd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    fbdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    fbe0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    fbe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    fbe8:	f8de 5000 	ldr.w	r5, [lr]
    fbec:	4620      	mov	r0, r4
  if (!isOpen()) {
    fbee:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    fbf0:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    fbf4:	b10b      	cbz	r3, fbfa <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    fbf6:	f7ff fdf3 	bl	f7e0 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    fbfa:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    fbfc:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    fbfe:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    fc00:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    fc02:	4631      	mov	r1, r6
    fc04:	ab01      	add	r3, sp, #4
    fc06:	aa02      	add	r2, sp, #8
    fc08:	4620      	mov	r0, r4
    fc0a:	f001 f94d 	bl	10ea8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    fc0e:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    fc10:	aa02      	add	r2, sp, #8
    fc12:	4629      	mov	r1, r5
    fc14:	2300      	movs	r3, #0
    fc16:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    fc18:	2e00      	cmp	r6, #0
    fc1a:	d1c9      	bne.n	fbb0 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    fc1c:	2000      	movs	r0, #0
}
    fc1e:	b014      	add	sp, #80	; 0x50
    fc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    fc24:	3601      	adds	r6, #1
    fc26:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    fc28:	7833      	ldrb	r3, [r6, #0]
    fc2a:	2b2f      	cmp	r3, #47	; 0x2f
    fc2c:	d0fa      	beq.n	fc24 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    fc2e:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    fc30:	2224      	movs	r2, #36	; 0x24
    fc32:	2100      	movs	r1, #0
    fc34:	a80b      	add	r0, sp, #44	; 0x2c
    fc36:	f012 fb63 	bl	22300 <memset>
  m_vol = vol;
    fc3a:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    fc3c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    fc3e:	2b10      	cmp	r3, #16
    fc40:	d003      	beq.n	fc4a <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    fc42:	2b20      	cmp	r3, #32
    fc44:	d00f      	beq.n	fc66 <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    fc46:	2b0c      	cmp	r3, #12
    fc48:	d1e8      	bne.n	fc1c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    fc4a:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    fc4c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    fc50:	2301      	movs	r3, #1
    parent = &tmpDir;
    fc52:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    fc54:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    fc58:	e7a8      	b.n	fbac <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    fc5a:	aa02      	add	r2, sp, #8
    fc5c:	f7ff feda 	bl	fa14 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    fc60:	b014      	add	sp, #80	; 0x50
    fc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    fc66:	2340      	movs	r3, #64	; 0x40
    fc68:	e7f0      	b.n	fc4c <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    fc6a:	bf00      	nop

0000fc6c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    fc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc70:	2500      	movs	r5, #0
    fc72:	b094      	sub	sp, #80	; 0x50
    fc74:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    fc76:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    fc78:	9201      	str	r2, [sp, #4]
    fc7a:	9502      	str	r5, [sp, #8]
    fc7c:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    fc80:	2b00      	cmp	r3, #0
    fc82:	d137      	bne.n	fcf4 <FatFile::open(FatFile*, char const*, int)+0x88>
    fc84:	780b      	ldrb	r3, [r1, #0]
    fc86:	460e      	mov	r6, r1
    fc88:	f013 0f70 	tst.w	r3, #112	; 0x70
    fc8c:	d032      	beq.n	fcf4 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    fc8e:	7813      	ldrb	r3, [r2, #0]
    fc90:	4604      	mov	r4, r0
    fc92:	4615      	mov	r5, r2
    fc94:	2b2f      	cmp	r3, #47	; 0x2f
    fc96:	d031      	beq.n	fcfc <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    fc98:	2700      	movs	r7, #0
    fc9a:	e01e      	b.n	fcda <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    fc9c:	9d01      	ldr	r5, [sp, #4]
    fc9e:	782d      	ldrb	r5, [r5, #0]
    fca0:	2d00      	cmp	r5, #0
    fca2:	d040      	beq.n	fd26 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    fca4:	f000 ffb4 	bl	10c10 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    fca8:	46a6      	mov	lr, r4
    fcaa:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    fcae:	b308      	cbz	r0, fcf4 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    fcb0:	4666      	mov	r6, ip
  if (!isOpen()) {
    fcb2:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    fcb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    fcb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    fcbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    fcc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    fcc4:	f8de 3000 	ldr.w	r3, [lr]
    fcc8:	4620      	mov	r0, r4
    fcca:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    fcce:	b10d      	cbz	r5, fcd4 <FatFile::open(FatFile*, char const*, int)+0x68>
    fcd0:	f7ff fd86 	bl	f7e0 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    fcd4:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    fcd6:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    fcd8:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    fcda:	4629      	mov	r1, r5
    fcdc:	ab01      	add	r3, sp, #4
    fcde:	aa0b      	add	r2, sp, #44	; 0x2c
    fce0:	4620      	mov	r0, r4
    fce2:	f001 f8e1 	bl	10ea8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    fce6:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    fce8:	aa0b      	add	r2, sp, #44	; 0x2c
    fcea:	4631      	mov	r1, r6
    fcec:	2300      	movs	r3, #0
    fcee:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    fcf0:	2d00      	cmp	r5, #0
    fcf2:	d1d3      	bne.n	fc9c <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    fcf4:	2000      	movs	r0, #0
}
    fcf6:	b014      	add	sp, #80	; 0x50
    fcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    fcfc:	3501      	adds	r5, #1
    fcfe:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    fd00:	7829      	ldrb	r1, [r5, #0]
    fd02:	292f      	cmp	r1, #47	; 0x2f
    fd04:	d0fa      	beq.n	fcfc <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    fd06:	b9a9      	cbnz	r1, fd34 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    fd08:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    fd0a:	2224      	movs	r2, #36	; 0x24
    fd0c:	4620      	mov	r0, r4
    fd0e:	f012 faf7 	bl	22300 <memset>
  m_vol = vol;
    fd12:	60a5      	str	r5, [r4, #8]
    fd14:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    fd16:	2b10      	cmp	r3, #16
    fd18:	d003      	beq.n	fd22 <FatFile::open(FatFile*, char const*, int)+0xb6>
    fd1a:	2b20      	cmp	r3, #32
    fd1c:	d022      	beq.n	fd64 <FatFile::open(FatFile*, char const*, int)+0xf8>
    fd1e:	2b0c      	cmp	r3, #12
    fd20:	d1e8      	bne.n	fcf4 <FatFile::open(FatFile*, char const*, int)+0x88>
    fd22:	2220      	movs	r2, #32
    fd24:	e01f      	b.n	fd66 <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    fd26:	4643      	mov	r3, r8
    fd28:	aa0b      	add	r2, sp, #44	; 0x2c
    fd2a:	f000 ff71 	bl	10c10 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    fd2e:	b014      	add	sp, #80	; 0x50
    fd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    fd34:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    fd36:	2224      	movs	r2, #36	; 0x24
    fd38:	2100      	movs	r1, #0
    fd3a:	a802      	add	r0, sp, #8
    fd3c:	f012 fae0 	bl	22300 <memset>
  m_vol = vol;
    fd40:	9604      	str	r6, [sp, #16]
    fd42:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    fd44:	2b10      	cmp	r3, #16
    fd46:	d003      	beq.n	fd50 <FatFile::open(FatFile*, char const*, int)+0xe4>
    fd48:	2b20      	cmp	r3, #32
    fd4a:	d003      	beq.n	fd54 <FatFile::open(FatFile*, char const*, int)+0xe8>
    fd4c:	2b0c      	cmp	r3, #12
    fd4e:	d1d1      	bne.n	fcf4 <FatFile::open(FatFile*, char const*, int)+0x88>
    fd50:	2320      	movs	r3, #32
    fd52:	e000      	b.n	fd56 <FatFile::open(FatFile*, char const*, int)+0xea>
    fd54:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    fd56:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    fd5a:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    fd5c:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    fd5e:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    fd62:	e799      	b.n	fc98 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    fd64:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    fd66:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    fd68:	7022      	strb	r2, [r4, #0]
  return true;
    fd6a:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    fd6c:	70a3      	strb	r3, [r4, #2]
  return true;
    fd6e:	e7c2      	b.n	fcf6 <FatFile::open(FatFile*, char const*, int)+0x8a>

0000fd70 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    fd70:	b119      	cbz	r1, fd7a <FatFile::open(FatVolume*, char const*, int)+0xa>
    fd72:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    fd76:	f7ff bf79 	b.w	fc6c <FatFile::open(FatFile*, char const*, int)>
}
    fd7a:	4608      	mov	r0, r1
    fd7c:	4770      	bx	lr
    fd7e:	bf00      	nop

0000fd80 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    fd80:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    fd82:	b570      	push	{r4, r5, r6, lr}
    fd84:	460d      	mov	r5, r1
    fd86:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    fd88:	b993      	cbnz	r3, fdb0 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    fd8a:	7806      	ldrb	r6, [r0, #0]
    fd8c:	b10e      	cbz	r6, fd92 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    fd8e:	4618      	mov	r0, r3
}
    fd90:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    fd92:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    fd94:	2224      	movs	r2, #36	; 0x24
    fd96:	4631      	mov	r1, r6
    fd98:	f012 fab2 	bl	22300 <memset>
  m_vol = vol;
    fd9c:	60a5      	str	r5, [r4, #8]
    fd9e:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    fda0:	2b10      	cmp	r3, #16
    fda2:	d018      	beq.n	fdd6 <FatFile::openCluster(FatFile*)+0x56>
    fda4:	2b20      	cmp	r3, #32
    fda6:	d010      	beq.n	fdca <FatFile::openCluster(FatFile*)+0x4a>
    fda8:	2b0c      	cmp	r3, #12
    fdaa:	d014      	beq.n	fdd6 <FatFile::openCluster(FatFile*)+0x56>
    fdac:	4630      	mov	r0, r6
}
    fdae:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    fdb0:	2224      	movs	r2, #36	; 0x24
    fdb2:	2100      	movs	r1, #0
    fdb4:	f012 faa4 	bl	22300 <memset>
  m_flags = FILE_FLAG_READ;
    fdb8:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    fdba:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    fdbc:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    fdbe:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    fdc0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    fdc4:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    fdc6:	6223      	str	r3, [r4, #32]
}
    fdc8:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    fdca:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    fdcc:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    fdce:	7022      	strb	r2, [r4, #0]
  return true;
    fdd0:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    fdd2:	70a3      	strb	r3, [r4, #2]
}
    fdd4:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    fdd6:	2220      	movs	r2, #32
    fdd8:	e7f8      	b.n	fdcc <FatFile::openCluster(FatFile*)+0x4c>
    fdda:	bf00      	nop

0000fddc <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    fddc:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    fdde:	7805      	ldrb	r5, [r0, #0]
    fde0:	b10d      	cbz	r5, fde6 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    fde2:	2000      	movs	r0, #0
}
    fde4:	bd70      	pop	{r4, r5, r6, pc}
    fde6:	460e      	mov	r6, r1
    fde8:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    fdea:	2224      	movs	r2, #36	; 0x24
    fdec:	4629      	mov	r1, r5
    fdee:	f012 fa87 	bl	22300 <memset>
  m_vol = vol;
    fdf2:	60a6      	str	r6, [r4, #8]
    fdf4:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    fdf6:	2b10      	cmp	r3, #16
    fdf8:	d00b      	beq.n	fe12 <FatFile::openRoot(FatVolume*)+0x36>
    fdfa:	2b20      	cmp	r3, #32
    fdfc:	d003      	beq.n	fe06 <FatFile::openRoot(FatVolume*)+0x2a>
    fdfe:	2b0c      	cmp	r3, #12
    fe00:	d007      	beq.n	fe12 <FatFile::openRoot(FatVolume*)+0x36>
    fe02:	4628      	mov	r0, r5
}
    fe04:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    fe06:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    fe08:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    fe0a:	7022      	strb	r2, [r4, #0]
  return true;
    fe0c:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    fe0e:	70a3      	strb	r3, [r4, #2]
}
    fe10:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    fe12:	2220      	movs	r2, #32
    fe14:	e7f8      	b.n	fe08 <FatFile::openRoot(FatVolume*)+0x2c>
    fe16:	bf00      	nop

0000fe18 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe1c:	ed2d 8b02 	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    fe20:	7883      	ldrb	r3, [r0, #2]
    fe22:	b083      	sub	sp, #12
    fe24:	4605      	mov	r5, r0
  if (!isReadable()) {
    fe26:	07df      	lsls	r7, r3, #31
    fe28:	f140 808c 	bpl.w	ff44 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    fe2c:	4688      	mov	r8, r1
    fe2e:	7801      	ldrb	r1, [r0, #0]
    fe30:	4692      	mov	sl, r2
  if (isFile()) {
    fe32:	070e      	lsls	r6, r1, #28
    fe34:	f100 8091 	bmi.w	ff5a <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    fe38:	068c      	lsls	r4, r1, #26
    fe3a:	d508      	bpl.n	fe4e <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    fe3c:	6883      	ldr	r3, [r0, #8]
    fe3e:	895a      	ldrh	r2, [r3, #10]
    fe40:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    fe42:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    fe46:	b29b      	uxth	r3, r3
    fe48:	459a      	cmp	sl, r3
    fe4a:	bf28      	it	cs
    fe4c:	469a      	movcs	sl, r3
  while (toRead) {
    fe4e:	f1ba 0f00 	cmp.w	sl, #0
    fe52:	f000 80af 	beq.w	ffb4 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    fe56:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    fe58:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    fe5c:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    fe5e:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    fe60:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    fe64:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    fe68:	68af      	ldr	r7, [r5, #8]
    fe6a:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    fe6e:	d53d      	bpl.n	feec <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    fe70:	6a39      	ldr	r1, [r7, #32]
    fe72:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    fe76:	f1bb 0f00 	cmp.w	fp, #0
    fe7a:	d151      	bne.n	ff20 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    fe7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    fe80:	d34e      	bcc.n	ff20 <FatFile::read(void*, unsigned int)+0x108>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    fe82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    fe84:	4291      	cmp	r1, r2
    fe86:	d04b      	beq.n	ff20 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    fe88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    fe8c:	f0c0 8082 	bcc.w	ff94 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    fe90:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    fe92:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    fe94:	0680      	lsls	r0, r0, #26
    fe96:	d405      	bmi.n	fea4 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    fe98:	7938      	ldrb	r0, [r7, #4]
    fe9a:	eba0 0009 	sub.w	r0, r0, r9
    fe9e:	4283      	cmp	r3, r0
    fea0:	bf28      	it	cs
    fea2:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    fea4:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    fea6:	ea4f 2443 	mov.w	r4, r3, lsl #9
    feaa:	d80c      	bhi.n	fec6 <FatFile::read(void*, unsigned int)+0xae>
    feac:	18c8      	adds	r0, r1, r3
    feae:	4282      	cmp	r2, r0
    feb0:	d209      	bcs.n	fec6 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    feb2:	f107 0028 	add.w	r0, r7, #40	; 0x28
    feb6:	e9cd 1300 	strd	r1, r3, [sp]
    feba:	f004 fac5 	bl	14448 <FsCache::sync()>
    febe:	e9dd 1300 	ldrd	r1, r3, [sp]
    fec2:	2800      	cmp	r0, #0
    fec4:	d03e      	beq.n	ff44 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    fec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    fec8:	6802      	ldr	r2, [r0, #0]
    feca:	6957      	ldr	r7, [r2, #20]
    fecc:	4642      	mov	r2, r8
    fece:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    fed0:	2800      	cmp	r0, #0
    fed2:	d037      	beq.n	ff44 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    fed4:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    fed6:	1b36      	subs	r6, r6, r4
    dst += n;
    fed8:	44a0      	add	r8, r4
    m_curPosition += n;
    feda:	4422      	add	r2, r4
    fedc:	616a      	str	r2, [r5, #20]
  while (toRead) {
    fede:	d069      	beq.n	ffb4 <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    fee0:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    fee2:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    fee6:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    fee8:	0688      	lsls	r0, r1, #26
    feea:	d4c1      	bmi.n	fe70 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    feec:	f897 9005 	ldrb.w	r9, [r7, #5]
    fef0:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    fef4:	f1bb 0f00 	cmp.w	fp, #0
    fef8:	d136      	bne.n	ff68 <FatFile::read(void*, unsigned int)+0x150>
    fefa:	f1b9 0f00 	cmp.w	r9, #0
    fefe:	d133      	bne.n	ff68 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    ff00:	2a00      	cmp	r2, #0
    ff02:	d133      	bne.n	ff6c <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    ff04:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    ff06:	bf4c      	ite	mi
    ff08:	6a3a      	ldrmi	r2, [r7, #32]
    ff0a:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    ff0c:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    ff0e:	3a02      	subs	r2, #2
    ff10:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    ff12:	6979      	ldr	r1, [r7, #20]
    ff14:	4082      	lsls	r2, r0
    ff16:	4449      	add	r1, r9
    ff18:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    ff1a:	f1bb 0f00 	cmp.w	fp, #0
    ff1e:	d0ad      	beq.n	fe7c <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    ff20:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    ff24:	2200      	movs	r2, #0
    ff26:	f107 0028 	add.w	r0, r7, #40	; 0x28
    ff2a:	42b4      	cmp	r4, r6
    ff2c:	bf28      	it	cs
    ff2e:	4634      	movcs	r4, r6
    ff30:	f004 fab6 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    ff34:	b130      	cbz	r0, ff44 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    ff36:	eb00 010b 	add.w	r1, r0, fp
    ff3a:	4622      	mov	r2, r4
    ff3c:	4640      	mov	r0, r8
    ff3e:	f00b fe73 	bl	1bc28 <memcpy>
    ff42:	e7c7      	b.n	fed4 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    ff44:	786b      	ldrb	r3, [r5, #1]
  return -1;
    ff46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    ff4a:	f043 0302 	orr.w	r3, r3, #2
    ff4e:	706b      	strb	r3, [r5, #1]
}
    ff50:	b003      	add	sp, #12
    ff52:	ecbd 8b02 	vpop	{d8}
    ff56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    ff5a:	69c3      	ldr	r3, [r0, #28]
    ff5c:	6942      	ldr	r2, [r0, #20]
    ff5e:	1a9b      	subs	r3, r3, r2
    ff60:	459a      	cmp	sl, r3
    ff62:	bf28      	it	cs
    ff64:	469a      	movcs	sl, r3
    ff66:	e772      	b.n	fe4e <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    ff68:	692a      	ldr	r2, [r5, #16]
    ff6a:	e7d0      	b.n	ff0e <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    ff6c:	070b      	lsls	r3, r1, #28
    ff6e:	d505      	bpl.n	ff7c <FatFile::read(void*, unsigned int)+0x164>
    ff70:	78aa      	ldrb	r2, [r5, #2]
    ff72:	0654      	lsls	r4, r2, #25
    ff74:	d502      	bpl.n	ff7c <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    ff76:	692a      	ldr	r2, [r5, #16]
    ff78:	3201      	adds	r2, #1
    ff7a:	e7c7      	b.n	ff0c <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    ff7c:	ee18 2a10 	vmov	r2, s16
    ff80:	4638      	mov	r0, r7
    ff82:	6929      	ldr	r1, [r5, #16]
    ff84:	f001 fdfe 	bl	11b84 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    ff88:	2800      	cmp	r0, #0
    ff8a:	dbdb      	blt.n	ff44 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    ff8c:	d00c      	beq.n	ffa8 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    ff8e:	68af      	ldr	r7, [r5, #8]
    ff90:	692a      	ldr	r2, [r5, #16]
    ff92:	e7bc      	b.n	ff0e <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    ff94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ff96:	4642      	mov	r2, r8
    ff98:	6803      	ldr	r3, [r0, #0]
    ff9a:	691b      	ldr	r3, [r3, #16]
    ff9c:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    ff9e:	2800      	cmp	r0, #0
    ffa0:	d0d0      	beq.n	ff44 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    ffa2:	f44f 7400 	mov.w	r4, #512	; 0x200
    ffa6:	e795      	b.n	fed4 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    ffa8:	782b      	ldrb	r3, [r5, #0]
    ffaa:	f013 0f70 	tst.w	r3, #112	; 0x70
    ffae:	d0c9      	beq.n	ff44 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    ffb0:	ebaa 0a06 	sub.w	sl, sl, r6
    ffb4:	4650      	mov	r0, sl
}
    ffb6:	b003      	add	sp, #12
    ffb8:	ecbd 8b02 	vpop	{d8}
    ffbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ffc0 <FatFile::peek()>:
int FatFile::peek() {
    ffc0:	b570      	push	{r4, r5, r6, lr}
    ffc2:	b082      	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    ffc4:	2201      	movs	r2, #1
    ffc6:	4604      	mov	r4, r0
    ffc8:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    ffcc:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    ffd0:	f7ff ff22 	bl	fe18 <FatFile::read(void*, unsigned int)>
    ffd4:	2801      	cmp	r0, #1
    ffd6:	bf0c      	ite	eq
    ffd8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    ffdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = curCluster;
    ffe0:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    ffe4:	b002      	add	sp, #8
    ffe6:	bd70      	pop	{r4, r5, r6, pc}

0000ffe8 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    ffe8:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    ffea:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    ffee:	b530      	push	{r4, r5, lr}
    fff0:	4604      	mov	r4, r0
    fff2:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    fff4:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    fff8:	d009      	beq.n	1000e <FatFile::readDirCache(bool)+0x26>
    fffa:	2901      	cmp	r1, #1
    fffc:	d107      	bne.n	1000e <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    fffe:	3320      	adds	r3, #32
   10000:	6143      	str	r3, [r0, #20]
    return m_buffer;
   10002:	68a0      	ldr	r0, [r4, #8]
   10004:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
   10006:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
   1000a:	b003      	add	sp, #12
   1000c:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
   1000e:	2201      	movs	r2, #1
   10010:	f10d 0107 	add.w	r1, sp, #7
   10014:	4620      	mov	r0, r4
   10016:	f7ff feff 	bl	fe18 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
   1001a:	b240      	sxtb	r0, r0
   1001c:	2801      	cmp	r0, #1
   1001e:	d103      	bne.n	10028 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
   10020:	6963      	ldr	r3, [r4, #20]
   10022:	331f      	adds	r3, #31
   10024:	6163      	str	r3, [r4, #20]
   10026:	e7ec      	b.n	10002 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
   10028:	2000      	movs	r0, #0
   1002a:	e7ee      	b.n	1000a <FatFile::readDirCache(bool)+0x22>

0001002c <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
   1002c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
   10030:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
   10032:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
   10034:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
   10036:	f013 0f18 	tst.w	r3, #24
   1003a:	9608      	str	r6, [sp, #32]
   1003c:	9611      	str	r6, [sp, #68]	; 0x44
   1003e:	d006      	beq.n	1004e <FatFile::rename(FatFile*, char const*)+0x22>
   10040:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
   10042:	6883      	ldr	r3, [r0, #8]
   10044:	688a      	ldr	r2, [r1, #8]
   10046:	4604      	mov	r4, r0
   10048:	460d      	mov	r5, r1
   1004a:	429a      	cmp	r2, r3
   1004c:	d003      	beq.n	10056 <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
   1004e:	2000      	movs	r0, #0
}
   10050:	b01a      	add	sp, #104	; 0x68
   10052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10056:	f7ff fbc3 	bl	f7e0 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
   1005a:	46a6      	mov	lr, r4
   1005c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   10060:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   10064:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10068:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1006c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10070:	f8de 3000 	ldr.w	r3, [lr]
   10074:	4632      	mov	r2, r6
   10076:	69a1      	ldr	r1, [r4, #24]
   10078:	f8cc 3000 	str.w	r3, [ip]
   1007c:	68a3      	ldr	r3, [r4, #8]
   1007e:	f103 0028 	add.w	r0, r3, #40	; 0x28
   10082:	f004 fa0d 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
   10086:	2800      	cmp	r0, #0
   10088:	d0e1      	beq.n	1004e <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
   1008a:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
   1008c:	46ec      	mov	ip, sp
  if (isFile()) {
   1008e:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
   10092:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
   10096:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
   1009a:	0152      	lsls	r2, r2, #5
   1009c:	f8de 1004 	ldr.w	r1, [lr, #4]
   100a0:	5880      	ldr	r0, [r0, r2]
   100a2:	f8de 300c 	ldr.w	r3, [lr, #12]
   100a6:	f8de 2008 	ldr.w	r2, [lr, #8]
   100aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   100ae:	f8de 1014 	ldr.w	r1, [lr, #20]
   100b2:	f8de 2018 	ldr.w	r2, [lr, #24]
   100b6:	f8de 301c 	ldr.w	r3, [lr, #28]
   100ba:	f8de 0010 	ldr.w	r0, [lr, #16]
   100be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
   100c2:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
   100c6:	463a      	mov	r2, r7
   100c8:	4629      	mov	r1, r5
  if (isFile()) {
   100ca:	f040 809b 	bne.w	10204 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
   100ce:	a808      	add	r0, sp, #32
   100d0:	f7ff fd56 	bl	fb80 <FatFile::mkdir(FatFile*, char const*, bool)>
   100d4:	2800      	cmp	r0, #0
   100d6:	d0ba      	beq.n	1004e <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
   100d8:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
   100da:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
   100de:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
   100e0:	990e      	ldr	r1, [sp, #56]	; 0x38
   100e2:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
   100e4:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
   100e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   100ea:	68a0      	ldr	r0, [r4, #8]
   100ec:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
   100ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   100f0:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
   100f2:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
   100f4:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
   100f6:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
   100fa:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
   100fe:	f004 f9cf 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
   10102:	2800      	cmp	r0, #0
   10104:	d0a3      	beq.n	1004e <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
   10106:	88a3      	ldrh	r3, [r4, #4]
   10108:	f003 030f 	and.w	r3, r3, #15
   1010c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
   10110:	f8dd 300d 	ldr.w	r3, [sp, #13]
   10114:	f8c0 300d 	str.w	r3, [r0, #13]
   10118:	f8dd 3011 	ldr.w	r3, [sp, #17]
   1011c:	f8c0 3011 	str.w	r3, [r0, #17]
   10120:	f8dd 3015 	ldr.w	r3, [sp, #21]
   10124:	f8c0 3015 	str.w	r3, [r0, #21]
   10128:	f8dd 3019 	ldr.w	r3, [sp, #25]
   1012c:	f8c0 3019 	str.w	r3, [r0, #25]
   10130:	f8bd 301d 	ldrh.w	r3, [sp, #29]
   10134:	f8a0 301d 	strh.w	r3, [r0, #29]
   10138:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1013c:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
   1013e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10142:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
   10144:	2e00      	cmp	r6, #0
   10146:	d03b      	beq.n	101c0 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
   10148:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   1014a:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
   1014c:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   1014e:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
   10150:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   10152:	408b      	lsls	r3, r1
   10154:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
   10158:	4419      	add	r1, r3
   1015a:	f004 f9a1 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
   1015e:	4605      	mov	r5, r0
   10160:	2800      	cmp	r0, #0
   10162:	f43f af74 	beq.w	1004e <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
   10166:	6a00      	ldr	r0, [r0, #32]
   10168:	466f      	mov	r7, sp
   1016a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1016c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1016e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   10170:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   10172:	6b28      	ldr	r0, [r5, #48]	; 0x30
   10174:	6b69      	ldr	r1, [r5, #52]	; 0x34
   10176:	6baa      	ldr	r2, [r5, #56]	; 0x38
   10178:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1017a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
   1017c:	4631      	mov	r1, r6
   1017e:	68a0      	ldr	r0, [r4, #8]
   10180:	f001 fd22 	bl	11bc8 <FatPartition::freeChain(unsigned long)>
   10184:	2800      	cmp	r0, #0
   10186:	f43f af62 	beq.w	1004e <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
   1018a:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   1018c:	6a23      	ldr	r3, [r4, #32]
   1018e:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
   10190:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   10192:	3b02      	subs	r3, #2
   10194:	f850 1c14 	ldr.w	r1, [r0, #-20]
   10198:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
   1019a:	2201      	movs	r2, #1
   1019c:	4419      	add	r1, r3
   1019e:	f004 f97f 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
   101a2:	4606      	mov	r6, r0
   101a4:	2800      	cmp	r0, #0
   101a6:	f43f af52 	beq.w	1004e <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
   101aa:	466d      	mov	r5, sp
   101ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   101ae:	6230      	str	r0, [r6, #32]
   101b0:	6271      	str	r1, [r6, #36]	; 0x24
   101b2:	62b2      	str	r2, [r6, #40]	; 0x28
   101b4:	62f3      	str	r3, [r6, #44]	; 0x2c
   101b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   101b8:	6330      	str	r0, [r6, #48]	; 0x30
   101ba:	6371      	str	r1, [r6, #52]	; 0x34
   101bc:	63b2      	str	r2, [r6, #56]	; 0x38
   101be:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
   101c0:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
   101c2:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
   101c4:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
   101c6:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
   101c8:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
   101ca:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
   101ce:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
   101d2:	f000 fed3 	bl	10f7c <FatFile::remove()>
   101d6:	2800      	cmp	r0, #0
   101d8:	f43f af39 	beq.w	1004e <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
   101dc:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   101de:	f104 0028 	add.w	r0, r4, #40	; 0x28
   101e2:	f004 f931 	bl	14448 <FsCache::sync()>
   101e6:	2800      	cmp	r0, #0
   101e8:	f43f af31 	beq.w	1004e <FatFile::rename(FatFile*, char const*)+0x22>
   101ec:	f504 700e 	add.w	r0, r4, #568	; 0x238
   101f0:	f004 f92a 	bl	14448 <FsCache::sync()>
   101f4:	2800      	cmp	r0, #0
   101f6:	f43f af2a 	beq.w	1004e <FatFile::rename(FatFile*, char const*)+0x22>
   101fa:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
   101fc:	6803      	ldr	r3, [r0, #0]
   101fe:	6a1b      	ldr	r3, [r3, #32]
   10200:	4798      	blx	r3
   10202:	e725      	b.n	10050 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
   10204:	f640 2301 	movw	r3, #2561	; 0xa01
   10208:	4660      	mov	r0, ip
   1020a:	f7ff fd2f 	bl	fc6c <FatFile::open(FatFile*, char const*, int)>
   1020e:	2800      	cmp	r0, #0
   10210:	f47f af63 	bne.w	100da <FatFile::rename(FatFile*, char const*)+0xae>
   10214:	e71b      	b.n	1004e <FatFile::rename(FatFile*, char const*)+0x22>
   10216:	bf00      	nop

00010218 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
   10218:	7803      	ldrb	r3, [r0, #0]
   1021a:	06da      	lsls	r2, r3, #27
   1021c:	d401      	bmi.n	10222 <FatFile::rmdir()+0xa>
}
   1021e:	2000      	movs	r0, #0
   10220:	4770      	bx	lr
  if (pos == m_curPosition) {
   10222:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
   10224:	b530      	push	{r4, r5, lr}
   10226:	4604      	mov	r4, r0
   10228:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
   1022a:	b133      	cbz	r3, 1023a <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
   1022c:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
   1022e:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
   10230:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
   10234:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
   10238:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
   1023a:	2300      	movs	r3, #0
   1023c:	e00f      	b.n	1025e <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
   1023e:	6163      	str	r3, [r4, #20]
   10240:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
   10242:	016a      	lsls	r2, r5, #5
   10244:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
   10246:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
   10248:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
   1024c:	b1ea      	cbz	r2, 1028a <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
   1024e:	2ae5      	cmp	r2, #229	; 0xe5
   10250:	d004      	beq.n	1025c <FatFile::rmdir()+0x44>
   10252:	2a2e      	cmp	r2, #46	; 0x2e
   10254:	d002      	beq.n	1025c <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
   10256:	7adb      	ldrb	r3, [r3, #11]
   10258:	071b      	lsls	r3, r3, #28
   1025a:	d522      	bpl.n	102a2 <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
   1025c:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
   1025e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   10262:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
   10266:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
   1026a:	d1e8      	bne.n	1023e <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
   1026c:	2201      	movs	r2, #1
   1026e:	f10d 0107 	add.w	r1, sp, #7
   10272:	4620      	mov	r0, r4
   10274:	f7ff fdd0 	bl	fe18 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
   10278:	b240      	sxtb	r0, r0
   1027a:	2801      	cmp	r0, #1
   1027c:	d103      	bne.n	10286 <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
   1027e:	6963      	ldr	r3, [r4, #20]
   10280:	331f      	adds	r3, #31
   10282:	6163      	str	r3, [r4, #20]
   10284:	e7dc      	b.n	10240 <FatFile::rmdir()+0x28>
      if (!getError()) {
   10286:	7863      	ldrb	r3, [r4, #1]
   10288:	b95b      	cbnz	r3, 102a2 <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
   1028a:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
   1028c:	2208      	movs	r2, #8
  return remove();
   1028e:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
   10290:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
   10294:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
   10296:	70a3      	strb	r3, [r4, #2]
}
   10298:	b003      	add	sp, #12
   1029a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
   1029e:	f000 be6d 	b.w	10f7c <FatFile::remove()>
}
   102a2:	2000      	movs	r0, #0
   102a4:	b003      	add	sp, #12
   102a6:	bd30      	pop	{r4, r5, pc}

000102a8 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
   102a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
   102ac:	7803      	ldrb	r3, [r0, #0]
   102ae:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
   102b0:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
   102b2:	2b00      	cmp	r3, #0
   102b4:	d039      	beq.n	1032a <FatFile::seekSet(unsigned long)+0x82>
   102b6:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
   102b8:	6941      	ldr	r1, [r0, #20]
   102ba:	42a9      	cmp	r1, r5
   102bc:	d042      	beq.n	10344 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
   102be:	2d00      	cmp	r5, #0
   102c0:	d037      	beq.n	10332 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
   102c2:	0718      	lsls	r0, r3, #28
   102c4:	d52a      	bpl.n	1031c <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
   102c6:	69e2      	ldr	r2, [r4, #28]
   102c8:	42aa      	cmp	r2, r5
   102ca:	d32e      	bcc.n	1032a <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
   102cc:	f8d4 c008 	ldr.w	ip, [r4, #8]
   102d0:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
   102d2:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
   102d4:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
   102d8:	f012 0f40 	tst.w	r2, #64	; 0x40
   102dc:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
   102e0:	b2c0      	uxtb	r0, r0
   102e2:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
   102e6:	d130      	bne.n	1034a <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
   102e8:	1e4a      	subs	r2, r1, #1
   102ea:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
   102ec:	b109      	cbz	r1, 102f2 <FatFile::seekSet(unsigned long)+0x4a>
   102ee:	4296      	cmp	r6, r2
   102f0:	d22f      	bcs.n	10352 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   102f2:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
   102f4:	bf4c      	ite	mi
   102f6:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   102fa:	6a23      	ldrpl	r3, [r4, #32]
   102fc:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   102fe:	f104 0810 	add.w	r8, r4, #16
   10302:	e006      	b.n	10312 <FatFile::seekSet(unsigned long)+0x6a>
   10304:	6921      	ldr	r1, [r4, #16]
   10306:	3e01      	subs	r6, #1
   10308:	68a0      	ldr	r0, [r4, #8]
   1030a:	f001 fc3b 	bl	11b84 <FatPartition::fatGet(unsigned long, unsigned long*)>
   1030e:	2800      	cmp	r0, #0
   10310:	dd0b      	ble.n	1032a <FatFile::seekSet(unsigned long)+0x82>
   10312:	4642      	mov	r2, r8
  while (nNew--) {
   10314:	2e00      	cmp	r6, #0
   10316:	d1f5      	bne.n	10304 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
   10318:	78a2      	ldrb	r2, [r4, #2]
   1031a:	e00c      	b.n	10336 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
   1031c:	069a      	lsls	r2, r3, #26
   1031e:	d5d5      	bpl.n	102cc <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
   10320:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
   10322:	895b      	ldrh	r3, [r3, #10]
   10324:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   10328:	d9f6      	bls.n	10318 <FatFile::seekSet(unsigned long)+0x70>
  return false;
   1032a:	2000      	movs	r0, #0
  m_curCluster = tmp;
   1032c:	6127      	str	r7, [r4, #16]
}
   1032e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10332:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
   10334:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
   10336:	f022 0220 	bic.w	r2, r2, #32
  return true;
   1033a:	2001      	movs	r0, #1
  m_curPosition = pos;
   1033c:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
   1033e:	70a2      	strb	r2, [r4, #2]
}
   10340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
   10344:	2001      	movs	r0, #1
}
   10346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
   1034a:	6a23      	ldr	r3, [r4, #32]
   1034c:	4433      	add	r3, r6
   1034e:	6123      	str	r3, [r4, #16]
    goto done;
   10350:	e7f1      	b.n	10336 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
   10352:	1ab6      	subs	r6, r6, r2
   10354:	e7d3      	b.n	102fe <FatFile::seekSet(unsigned long)+0x56>
   10356:	bf00      	nop

00010358 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
   10358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1035c:	460e      	mov	r6, r1
   1035e:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   10360:	2100      	movs	r1, #0
   10362:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   10364:	4604      	mov	r4, r0
   10366:	4698      	mov	r8, r3
   10368:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
   1036c:	f011 ffc8 	bl	22300 <memset>
  m_vol = dirFile->m_vol;
   10370:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
   10372:	6a33      	ldr	r3, [r6, #32]
   10374:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
   10378:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
   1037a:	f005 050f 	and.w	r5, r5, #15
   1037e:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
   10382:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
   10386:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
   10388:	070b      	lsls	r3, r1, #28
   1038a:	d411      	bmi.n	103b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
   1038c:	f001 0117 	and.w	r1, r1, #23
   10390:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
   10392:	7ad3      	ldrb	r3, [r2, #11]
   10394:	f013 0f18 	tst.w	r3, #24
   10398:	d102      	bne.n	103a0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
   1039a:	f041 0108 	orr.w	r1, r1, #8
   1039e:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
   103a0:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
   103a4:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
   103a6:	2b01      	cmp	r3, #1
   103a8:	d038      	beq.n	1041c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
   103aa:	2b02      	cmp	r3, #2
   103ac:	d006      	beq.n	103bc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
   103ae:	b1f3      	cbz	r3, 103ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
   103b0:	2300      	movs	r3, #0
  return false;
   103b2:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
   103b4:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
   103b6:	70a3      	strb	r3, [r4, #2]
}
   103b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
   103bc:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
   103be:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   103c0:	06cd      	lsls	r5, r1, #27
   103c2:	d4f5      	bmi.n	103b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
   103c4:	07ce      	lsls	r6, r1, #31
   103c6:	d4f3      	bmi.n	103b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
   103c8:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
   103cc:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
   103d0:	ea43 0301 	orr.w	r3, r3, r1
   103d4:	70a3      	strb	r3, [r4, #2]
    return m_sector;
   103d6:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
   103d8:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
   103da:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
   103dc:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
   103de:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
   103e2:	d012      	beq.n	1040a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   103e4:	bb19      	cbnz	r1, 1042e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
   103e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   103ea:	70a3      	strb	r3, [r4, #2]
   103ec:	e010      	b.n	10410 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
   103ee:	f418 6f80 	tst.w	r8, #1024	; 0x400
   103f2:	d1dd      	bne.n	103b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
   103f4:	f008 0308 	and.w	r3, r8, #8
   103f8:	f043 0301 	orr.w	r3, r3, #1
   103fc:	70a3      	strb	r3, [r4, #2]
   103fe:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
   10400:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
   10402:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
   10404:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
   10406:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
   1040a:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
   1040c:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
   1040e:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   10410:	f418 4f80 	tst.w	r8, #16384	; 0x4000
   10414:	d104      	bne.n	10420 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
   10416:	2001      	movs	r0, #1
}
   10418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
   1041c:	2302      	movs	r3, #2
   1041e:	e7ce      	b.n	103be <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   10420:	69e1      	ldr	r1, [r4, #28]
   10422:	4620      	mov	r0, r4
   10424:	f7ff ff40 	bl	102a8 <FatFile::seekSet(unsigned long)>
   10428:	2800      	cmp	r0, #0
   1042a:	d1f4      	bne.n	10416 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
   1042c:	e7c0      	b.n	103b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   1042e:	f001 fbcb 	bl	11bc8 <FatPartition::freeChain(unsigned long)>
   10432:	2800      	cmp	r0, #0
   10434:	d0bc      	beq.n	103b0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
   10436:	78a3      	ldrb	r3, [r4, #2]
   10438:	e7d5      	b.n	103e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
   1043a:	bf00      	nop

0001043c <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
   1043c:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   1043e:	2b00      	cmp	r3, #0
   10440:	d145      	bne.n	104ce <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   10442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   10446:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   10448:	b084      	sub	sp, #16
   1044a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   1044c:	f013 0f70 	tst.w	r3, #112	; 0x70
   10450:	d030      	beq.n	104b4 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
   10452:	694b      	ldr	r3, [r1, #20]
   10454:	f013 051f 	ands.w	r5, r3, #31
   10458:	d12c      	bne.n	104b4 <FatFile::openNext(FatFile*, int)+0x78>
   1045a:	4606      	mov	r6, r0
   1045c:	4690      	mov	r8, r2
   1045e:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
   10460:	2201      	movs	r2, #1
   10462:	f10d 010f 	add.w	r1, sp, #15
   10466:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
   10468:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
   1046c:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
   1046e:	f7ff fcd3 	bl	fe18 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
   10472:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
   10474:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
   10478:	2801      	cmp	r0, #1
   1047a:	d11b      	bne.n	104b4 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
   1047c:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
   1047e:	68a1      	ldr	r1, [r4, #8]
   10480:	331f      	adds	r3, #31
   10482:	f101 0c38 	add.w	ip, r1, #56	; 0x38
   10486:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
   10488:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
   1048c:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
   10490:	b182      	cbz	r2, 104b4 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
   10492:	2a2e      	cmp	r2, #46	; 0x2e
   10494:	d012      	beq.n	104bc <FatFile::openNext(FatFile*, int)+0x80>
   10496:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
   1049a:	fab0 f080 	clz	r0, r0
   1049e:	0940      	lsrs	r0, r0, #5
   104a0:	b960      	cbnz	r0, 104bc <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
   104a2:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
   104a6:	f011 0e08 	ands.w	lr, r1, #8
   104aa:	d012      	beq.n	104d2 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
   104ac:	290f      	cmp	r1, #15
   104ae:	d007      	beq.n	104c0 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
   104b0:	4605      	mov	r5, r0
   104b2:	e7d5      	b.n	10460 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
   104b4:	2000      	movs	r0, #0
}
   104b6:	b004      	add	sp, #16
   104b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   104bc:	2500      	movs	r5, #0
   104be:	e7cf      	b.n	10460 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
   104c0:	0651      	lsls	r1, r2, #25
   104c2:	d5cd      	bpl.n	10460 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
   104c4:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
   104c8:	f89c 900d 	ldrb.w	r9, [ip, #13]
   104cc:	e7c8      	b.n	10460 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
   104ce:	2000      	movs	r0, #0
}
   104d0:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
   104d2:	b185      	cbz	r5, 104f6 <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
   104d4:	f10c 010a 	add.w	r1, ip, #10
   104d8:	e001      	b.n	104de <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   104da:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
   104de:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
   104e2:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   104e4:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
   104e8:	fa52 f383 	uxtab	r3, r2, r3
   104ec:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
   104f0:	d1f3      	bne.n	104da <FatFile::openNext(FatFile*, int)+0x9e>
   104f2:	45ce      	cmp	lr, r9
   104f4:	d1de      	bne.n	104b4 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   104f6:	4643      	mov	r3, r8
   104f8:	b2ba      	uxth	r2, r7
   104fa:	4621      	mov	r1, r4
   104fc:	4630      	mov	r0, r6
   104fe:	9500      	str	r5, [sp, #0]
   10500:	f7ff ff2a 	bl	10358 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
   10504:	e7d7      	b.n	104b6 <FatFile::openNext(FatFile*, int)+0x7a>
   10506:	bf00      	nop

00010508 <FatFile::sync()>:
  if (!isOpen()) {
   10508:	7803      	ldrb	r3, [r0, #0]
   1050a:	b10b      	cbz	r3, 10510 <FatFile::sync()+0x8>
   1050c:	f7ff b968 	b.w	f7e0 <FatFile::sync() [clone .part.0]>
}
   10510:	2001      	movs	r0, #1
   10512:	4770      	bx	lr

00010514 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
   10514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10518:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
   1051a:	7801      	ldrb	r1, [r0, #0]
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
   1051c:	b082      	sub	sp, #8
      || second > 59) {
   1051e:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
   10520:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   10524:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   10528:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
   1052c:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
      || second > 59) {
   10530:	d518      	bpl.n	10564 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || year > 2107
   10532:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
   10536:	b294      	uxth	r4, r2
   10538:	2c7f      	cmp	r4, #127	; 0x7f
   1053a:	d813      	bhi.n	10564 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || month > 12
   1053c:	1e5a      	subs	r2, r3, #1
   1053e:	9301      	str	r3, [sp, #4]
   10540:	2a0b      	cmp	r2, #11
   10542:	d80f      	bhi.n	10564 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || day > 31
   10544:	1e7a      	subs	r2, r7, #1
   10546:	2a1e      	cmp	r2, #30
   10548:	d80c      	bhi.n	10564 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || second > 59) {
   1054a:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
   1054e:	bf98      	it	ls
   10550:	f1b9 0f17 	cmpls.w	r9, #23
   10554:	d806      	bhi.n	10564 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
   10556:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
   1055a:	d803      	bhi.n	10564 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
   1055c:	4605      	mov	r5, r0
  if (!isOpen()) {
   1055e:	f7ff f93f 	bl	f7e0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
   10562:	b918      	cbnz	r0, 1056c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

 fail:
  return false;
}
   10564:	2000      	movs	r0, #0
   10566:	b002      	add	sp, #8
   10568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
   1056c:	68a8      	ldr	r0, [r5, #8]
   1056e:	2201      	movs	r2, #1
   10570:	69a9      	ldr	r1, [r5, #24]
   10572:	3028      	adds	r0, #40	; 0x28
   10574:	f003 ff94 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
   10578:	2800      	cmp	r0, #0
   1057a:	d0f3      	beq.n	10564 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
   1057c:	9b01      	ldr	r3, [sp, #4]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
   1057e:	ea4f 0258 	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
   10582:	88a9      	ldrh	r1, [r5, #4]
         year << 9 | month << 5 | day;
   10584:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
   10588:	07f7      	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
   1058a:	f001 010f 	and.w	r1, r1, #15
         hour << 11 | minute << 5 | second >> 1;
   1058e:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
         year << 9 | month << 5 | day;
   10592:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
   10596:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   1059a:	b29b      	uxth	r3, r3
         hour << 11 | minute << 5 | second >> 1;
   1059c:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
   105a0:	bf48      	it	mi
   105a2:	8243      	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
   105a4:	07b4      	lsls	r4, r6, #30
   105a6:	b292      	uxth	r2, r2
   105a8:	d508      	bpl.n	105bc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
   105aa:	f018 0801 	ands.w	r8, r8, #1
   105ae:	8203      	strh	r3, [r0, #16]
   105b0:	81c2      	strh	r2, [r0, #14]
   105b2:	bf18      	it	ne
   105b4:	f04f 0864 	movne.w	r8, #100	; 0x64
   105b8:	f880 800d 	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
   105bc:	0771      	lsls	r1, r6, #29
   105be:	d501      	bpl.n	105c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
   105c0:	8303      	strh	r3, [r0, #24]
   105c2:	82c2      	strh	r2, [r0, #22]
  return m_vol->cacheSync();
   105c4:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   105c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   105ca:	f003 ff3d 	bl	14448 <FsCache::sync()>
   105ce:	2800      	cmp	r0, #0
   105d0:	d0c8      	beq.n	10564 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
   105d2:	f504 700e 	add.w	r0, r4, #568	; 0x238
   105d6:	f003 ff37 	bl	14448 <FsCache::sync()>
   105da:	2800      	cmp	r0, #0
   105dc:	d0c2      	beq.n	10564 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
   105de:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
   105e0:	6803      	ldr	r3, [r0, #0]
   105e2:	6a1b      	ldr	r3, [r3, #32]
}
   105e4:	b002      	add	sp, #8
   105e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   105ea:	4718      	bx	r3

000105ec <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
   105ec:	7883      	ldrb	r3, [r0, #2]
   105ee:	079b      	lsls	r3, r3, #30
   105f0:	d527      	bpl.n	10642 <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
   105f2:	6a03      	ldr	r3, [r0, #32]
bool FatFile::truncate() {
   105f4:	b510      	push	{r4, lr}
   105f6:	4604      	mov	r4, r0
   105f8:	b082      	sub	sp, #8
  if (m_firstCluster == 0) {
   105fa:	b1ab      	cbz	r3, 10628 <FatFile::truncate()+0x3c>
      return true;
  }
  if (m_curCluster) {
   105fc:	6901      	ldr	r1, [r0, #16]
   105fe:	bb11      	cbnz	r1, 10646 <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
   10600:	9301      	str	r3, [sp, #4]
    m_firstCluster = 0;
   10602:	6201      	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
   10604:	4619      	mov	r1, r3
   10606:	68a0      	ldr	r0, [r4, #8]
   10608:	f001 fade 	bl	11bc8 <FatPartition::freeChain(unsigned long)>
   1060c:	b1b0      	cbz	r0, 1063c <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
   1060e:	78a3      	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
   10610:	6961      	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
   10612:	f063 037f 	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
   10616:	7822      	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
   10618:	61e1      	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
   1061a:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
   1061c:	b122      	cbz	r2, 10628 <FatFile::truncate()+0x3c>
   1061e:	4620      	mov	r0, r4
   10620:	f7ff f8de 	bl	f7e0 <FatFile::sync() [clone .part.0]>
  return sync();

 fail:
  return false;
}
   10624:	b002      	add	sp, #8
   10626:	bd10      	pop	{r4, pc}
      return true;
   10628:	2001      	movs	r0, #1
}
   1062a:	b002      	add	sp, #8
   1062c:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   1062e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   10632:	6921      	ldr	r1, [r4, #16]
   10634:	68a0      	ldr	r0, [r4, #8]
   10636:	f001 fab7 	bl	11ba8 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
   1063a:	b968      	cbnz	r0, 10658 <FatFile::truncate()+0x6c>
  return false;
   1063c:	2000      	movs	r0, #0
}
   1063e:	b002      	add	sp, #8
   10640:	bd10      	pop	{r4, pc}
  return false;
   10642:	2000      	movs	r0, #0
}
   10644:	4770      	bx	lr
    toFree = 0;
   10646:	2300      	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
   10648:	aa01      	add	r2, sp, #4
   1064a:	6880      	ldr	r0, [r0, #8]
    toFree = 0;
   1064c:	9301      	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
   1064e:	f001 fa99 	bl	11b84 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
   10652:	2800      	cmp	r0, #0
   10654:	dbf2      	blt.n	1063c <FatFile::truncate()+0x50>
    if (fg) {
   10656:	d1ea      	bne.n	1062e <FatFile::truncate()+0x42>
  if (toFree) {
   10658:	9b01      	ldr	r3, [sp, #4]
   1065a:	2b00      	cmp	r3, #0
   1065c:	d0d7      	beq.n	1060e <FatFile::truncate()+0x22>
   1065e:	e7d1      	b.n	10604 <FatFile::truncate()+0x18>

00010660 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
   10660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
   10664:	7883      	ldrb	r3, [r0, #2]
   10666:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
   10668:	079c      	lsls	r4, r3, #30
   1066a:	d577      	bpl.n	1075c <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
   1066c:	4688      	mov	r8, r1
   1066e:	0719      	lsls	r1, r3, #28
   10670:	4691      	mov	r9, r2
   10672:	f100 80b5 	bmi.w	107e0 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   10676:	696b      	ldr	r3, [r5, #20]
   10678:	eb13 0209 	adds.w	r2, r3, r9
   1067c:	d26e      	bcs.n	1075c <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   1067e:	f1b9 0f00 	cmp.w	r9, #0
   10682:	d040      	beq.n	10706 <FatFile::write(void const*, unsigned int)+0xa6>
   10684:	464f      	mov	r7, r9
    m_status = 0;
   10686:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
   1068a:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
   1068c:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
   10690:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
   10692:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
   10694:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
   10698:	d13f      	bne.n	1071a <FatFile::write(void const*, unsigned int)+0xba>
   1069a:	2e00      	cmp	r6, #0
   1069c:	d13d      	bne.n	1071a <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
   1069e:	2900      	cmp	r1, #0
   106a0:	d06e      	beq.n	10780 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
   106a2:	78aa      	ldrb	r2, [r5, #2]
   106a4:	0652      	lsls	r2, r2, #25
   106a6:	d576      	bpl.n	10796 <FatFile::write(void const*, unsigned int)+0x136>
   106a8:	69ea      	ldr	r2, [r5, #28]
   106aa:	429a      	cmp	r2, r3
   106ac:	d973      	bls.n	10796 <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
   106ae:	3101      	adds	r1, #1
   106b0:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   106b2:	3902      	subs	r1, #2
   106b4:	7982      	ldrb	r2, [r0, #6]
   106b6:	6943      	ldr	r3, [r0, #20]
   106b8:	4091      	lsls	r1, r2
   106ba:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
   106bc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   106c0:	d353      	bcc.n	1076a <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
   106c2:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   106c6:	d370      	bcc.n	107aa <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
   106c8:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
   106ca:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
   106cc:	1b1b      	subs	r3, r3, r4
   106ce:	4293      	cmp	r3, r2
   106d0:	bf28      	it	cs
   106d2:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
   106d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
   106d6:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
   106d8:	ea4f 2443 	mov.w	r4, r3, lsl #9
   106dc:	d307      	bcc.n	106ee <FatFile::write(void const*, unsigned int)+0x8e>
   106de:	185e      	adds	r6, r3, r1
   106e0:	42b2      	cmp	r2, r6
   106e2:	d204      	bcs.n	106ee <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
   106e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   106e8:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
   106ec:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
   106ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   106f0:	4642      	mov	r2, r8
   106f2:	6806      	ldr	r6, [r0, #0]
   106f4:	6ab6      	ldr	r6, [r6, #40]	; 0x28
   106f6:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
   106f8:	b380      	cbz	r0, 1075c <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   106fa:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
   106fc:	1b3f      	subs	r7, r7, r4
    src += n;
   106fe:	44a0      	add	r8, r4
    m_curPosition += n;
   10700:	4423      	add	r3, r4
   10702:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
   10704:	d1c1      	bne.n	1068a <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   10706:	69ea      	ldr	r2, [r5, #28]
   10708:	429a      	cmp	r2, r3
   1070a:	d276      	bcs.n	107fa <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
   1070c:	78aa      	ldrb	r2, [r5, #2]
   1070e:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
   10710:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
   10712:	f062 037f 	orn	r3, r2, #127	; 0x7f
   10716:	70ab      	strb	r3, [r5, #2]
   10718:	e025      	b.n	10766 <FatFile::write(void const*, unsigned int)+0x106>
   1071a:	7982      	ldrb	r2, [r0, #6]
   1071c:	3902      	subs	r1, #2
   1071e:	6943      	ldr	r3, [r0, #20]
   10720:	4091      	lsls	r1, r2
   10722:	4419      	add	r1, r3
                      + sectorOfCluster;
   10724:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
   10726:	2e00      	cmp	r6, #0
   10728:	d0c8      	beq.n	106bc <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
   1072a:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
   1072e:	2201      	movs	r2, #1
   10730:	42bc      	cmp	r4, r7
   10732:	bf28      	it	cs
   10734:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
   10736:	3028      	adds	r0, #40	; 0x28
   10738:	f003 feb2 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
   1073c:	b170      	cbz	r0, 1075c <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
   1073e:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
   10740:	4426      	add	r6, r4
      memcpy(dst, src, n);
   10742:	4622      	mov	r2, r4
   10744:	4641      	mov	r1, r8
   10746:	f00b fa6f 	bl	1bc28 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
   1074a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1074e:	68a8      	ldr	r0, [r5, #8]
   10750:	d1d3      	bne.n	106fa <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
   10752:	3028      	adds	r0, #40	; 0x28
   10754:	f003 fe78 	bl	14448 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
   10758:	2800      	cmp	r0, #0
   1075a:	d1ce      	bne.n	106fa <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
   1075c:	786b      	ldrb	r3, [r5, #1]
  return 0;
   1075e:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
   10760:	f043 0301 	orr.w	r3, r3, #1
   10764:	706b      	strb	r3, [r5, #1]
}
   10766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
   1076a:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
   1076e:	696a      	ldr	r2, [r5, #20]
   10770:	69eb      	ldr	r3, [r5, #28]
   10772:	42bc      	cmp	r4, r7
   10774:	bf28      	it	cs
   10776:	463c      	movcs	r4, r7
   10778:	429a      	cmp	r2, r3
   1077a:	d305      	bcc.n	10788 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
   1077c:	2205      	movs	r2, #5
   1077e:	e7da      	b.n	10736 <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
   10780:	6a29      	ldr	r1, [r5, #32]
   10782:	b321      	cbz	r1, 107ce <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
   10784:	6129      	str	r1, [r5, #16]
   10786:	e794      	b.n	106b2 <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
   10788:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
   1078a:	f013 0f20 	tst.w	r3, #32
   1078e:	bf14      	ite	ne
   10790:	2205      	movne	r2, #5
   10792:	2201      	moveq	r2, #1
   10794:	e7cf      	b.n	10736 <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   10796:	f105 0210 	add.w	r2, r5, #16
   1079a:	f001 f9f3 	bl	11b84 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
   1079e:	2800      	cmp	r0, #0
   107a0:	dbdc      	blt.n	1075c <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
   107a2:	d024      	beq.n	107ee <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
   107a4:	68a8      	ldr	r0, [r5, #8]
   107a6:	6929      	ldr	r1, [r5, #16]
   107a8:	e783      	b.n	106b2 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
   107aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   107ac:	428b      	cmp	r3, r1
   107ae:	d104      	bne.n	107ba <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
   107b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   107b4:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
   107b8:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
   107ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   107bc:	4642      	mov	r2, r8
   107be:	6803      	ldr	r3, [r0, #0]
   107c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   107c2:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
   107c4:	2800      	cmp	r0, #0
   107c6:	d0c9      	beq.n	1075c <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
   107c8:	f44f 7400 	mov.w	r4, #512	; 0x200
   107cc:	e795      	b.n	106fa <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
   107ce:	4628      	mov	r0, r5
   107d0:	f7ff f860 	bl	f894 <FatFile::addCluster()>
   107d4:	2800      	cmp	r0, #0
   107d6:	d0c1      	beq.n	1075c <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
   107d8:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
   107da:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
   107dc:	6229      	str	r1, [r5, #32]
   107de:	e768      	b.n	106b2 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
   107e0:	69c1      	ldr	r1, [r0, #28]
   107e2:	f7ff fd61 	bl	102a8 <FatFile::seekSet(unsigned long)>
   107e6:	2800      	cmp	r0, #0
   107e8:	f47f af45 	bne.w	10676 <FatFile::write(void const*, unsigned int)+0x16>
   107ec:	e7b6      	b.n	1075c <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
   107ee:	4628      	mov	r0, r5
   107f0:	f7ff f850 	bl	f894 <FatFile::addCluster()>
   107f4:	2800      	cmp	r0, #0
   107f6:	d1d5      	bne.n	107a4 <FatFile::write(void const*, unsigned int)+0x144>
   107f8:	e7b0      	b.n	1075c <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
   107fa:	4b05      	ldr	r3, [pc, #20]	; (10810 <FatFile::write(void const*, unsigned int)+0x1b0>)
   107fc:	681b      	ldr	r3, [r3, #0]
   107fe:	b12b      	cbz	r3, 1080c <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
   10800:	78ab      	ldrb	r3, [r5, #2]
   10802:	4648      	mov	r0, r9
   10804:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10808:	70ab      	strb	r3, [r5, #2]
   1080a:	e7ac      	b.n	10766 <FatFile::write(void const*, unsigned int)+0x106>
   1080c:	4648      	mov	r0, r9
   1080e:	e7aa      	b.n	10766 <FatFile::write(void const*, unsigned int)+0x106>
   10810:	2000adbc 	.word	0x2000adbc

00010814 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   10814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
   10818:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   1081a:	b08d      	sub	sp, #52	; 0x34
   1081c:	4614      	mov	r4, r2
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
   1081e:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   10820:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   10822:	4606      	mov	r6, r0
   10824:	4689      	mov	r9, r1
  FatFile dir = *this;
   10826:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   10828:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
   1082a:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
   1082e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10832:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   10834:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10838:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1083a:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
   1083e:	6065      	str	r5, [r4, #4]
   10840:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   10842:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
   10844:	f8a4 e00c 	strh.w	lr, [r4, #12]
   10848:	2b00      	cmp	r3, #0
   1084a:	d03f      	beq.n	108cc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
   1084c:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
   10850:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   10854:	a803      	add	r0, sp, #12
   10856:	b289      	uxth	r1, r1
   10858:	0149      	lsls	r1, r1, #5
   1085a:	f7ff fd25 	bl	102a8 <FatFile::seekSet(unsigned long)>
   1085e:	b350      	cbz	r0, 108b6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
   10860:	2100      	movs	r1, #0
   10862:	a803      	add	r0, sp, #12
   10864:	f7ff fbc0 	bl	ffe8 <FatFile::readDirCache(bool)>
    if (!ldir) {
   10868:	4607      	mov	r7, r0
   1086a:	b320      	cbz	r0, 108b6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
   1086c:	2500      	movs	r5, #0
   1086e:	e00d      	b.n	1088c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
   10870:	f003 fe3e 	bl	144f0 <FsName::get16()>
   10874:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
   10876:	4658      	mov	r0, fp
   10878:	f003 ff4e 	bl	14718 <toUpcase(unsigned short)>
   1087c:	4683      	mov	fp, r0
   1087e:	4640      	mov	r0, r8
   10880:	f003 ff4a 	bl	14718 <toUpcase(unsigned short)>
   10884:	4583      	cmp	fp, r0
   10886:	d116      	bne.n	108b6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
   10888:	2d0d      	cmp	r5, #13
   1088a:	d018      	beq.n	108be <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
   1088c:	b2ea      	uxtb	r2, r5
   1088e:	4639      	mov	r1, r7
   10890:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
   10892:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
   10894:	f000 fee4 	bl	11660 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
   10898:	89a3      	ldrh	r3, [r4, #12]
   1089a:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
   1089c:	4620      	mov	r0, r4
   1089e:	2b00      	cmp	r3, #0
   108a0:	d1e6      	bne.n	10870 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
   108a2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   108a6:	4293      	cmp	r3, r2
   108a8:	d1e2      	bne.n	10870 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
   108aa:	fabb f08b 	clz	r0, fp
   108ae:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
   108b0:	b00d      	add	sp, #52	; 0x34
   108b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
   108b6:	2000      	movs	r0, #0
}
   108b8:	b00d      	add	sp, #52	; 0x34
   108ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   108be:	f10a 0a01 	add.w	sl, sl, #1
   108c2:	9b01      	ldr	r3, [sp, #4]
   108c4:	fa5f fa8a 	uxtb.w	sl, sl
   108c8:	4553      	cmp	r3, sl
   108ca:	d2c1      	bcs.n	10850 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
   108cc:	2001      	movs	r0, #1
   108ce:	e7ef      	b.n	108b0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

000108d0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
   108d4:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   108d6:	b08d      	sub	sp, #52	; 0x34
   108d8:	4616      	mov	r6, r2
   108da:	469a      	mov	sl, r3
  FatFile dir = *this;
   108dc:	f10d 0c0c 	add.w	ip, sp, #12
   108e0:	f102 0415 	add.w	r4, r2, #21
   108e4:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   108e8:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
   108ea:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
   108ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   108f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   108f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   108f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   108fa:	683b      	ldr	r3, [r7, #0]
   108fc:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10900:	ea4f 13c9 	mov.w	r3, r9, lsl #7
   10904:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   10908:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
   1090c:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   1090e:	fa52 f383 	uxtab	r3, r2, r3
   10912:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
   10916:	d1f3      	bne.n	10900 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
   10918:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
   1091a:	f04f 0800 	mov.w	r8, #0
    next = begin;
   1091e:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
   10920:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
   10924:	f1ba 0f00 	cmp.w	sl, #0
   10928:	d04e      	beq.n	109c8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
   1092a:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
   1092c:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   1092e:	a803      	add	r0, sp, #12
   10930:	1bd9      	subs	r1, r3, r7
   10932:	b289      	uxth	r1, r1
   10934:	0149      	lsls	r1, r1, #5
   10936:	f7ff fcb7 	bl	102a8 <FatFile::seekSet(unsigned long)>
   1093a:	2800      	cmp	r0, #0
   1093c:	d055      	beq.n	109ea <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
   1093e:	2100      	movs	r1, #0
   10940:	a803      	add	r0, sp, #12
   10942:	f7ff fb51 	bl	ffe8 <FatFile::readDirCache(bool)>
    if (!ldir) {
   10946:	2800      	cmp	r0, #0
   10948:	d04f      	beq.n	109ea <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
   1094a:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
   1094c:	4557      	cmp	r7, sl
   1094e:	f100 0b01 	add.w	fp, r0, #1
   10952:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
   10956:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
   1095a:	f04f 0500 	mov.w	r5, #0
   1095e:	f043 0301 	orr.w	r3, r3, #1
   10962:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
   10966:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
   1096a:	bf0c      	ite	eq
   1096c:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
   10970:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
   10972:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
   10974:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
   10978:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
   1097a:	7303      	strb	r3, [r0, #12]
   1097c:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
   10980:	f880 900d 	strb.w	r9, [r0, #13]
   10984:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
   10986:	e006      	b.n	10996 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
   10988:	f8ab 0000 	strh.w	r0, [fp]
   1098c:	3401      	adds	r4, #1
   1098e:	3501      	adds	r5, #1
   10990:	f10b 0b02 	add.w	fp, fp, #2
   10994:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
   10996:	89b0      	ldrh	r0, [r6, #12]
   10998:	b918      	cbnz	r0, 109a2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
   1099a:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
   1099e:	429a      	cmp	r2, r3
   109a0:	d016      	beq.n	109d0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
   109a2:	4630      	mov	r0, r6
   109a4:	f003 fda4 	bl	144f0 <FsName::get16()>
  if (i < 5) {
   109a8:	2d04      	cmp	r5, #4
   109aa:	b2eb      	uxtb	r3, r5
   109ac:	d9ec      	bls.n	10988 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
   109ae:	2b0a      	cmp	r3, #10
   109b0:	d802      	bhi.n	109b8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
   109b2:	f8ab 0003 	strh.w	r0, [fp, #3]
}
   109b6:	e7e9      	b.n	1098c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
   109b8:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
   109ba:	f8ab 0005 	strh.w	r0, [fp, #5]
   109be:	d1e5      	bne.n	1098c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   109c0:	3701      	adds	r7, #1
   109c2:	b2ff      	uxtb	r7, r7
   109c4:	45ba      	cmp	sl, r7
   109c6:	d2b1      	bcs.n	1092c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
   109c8:	2001      	movs	r0, #1

 fail:
  return false;
}
   109ca:	b00d      	add	sp, #52	; 0x34
   109cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
   109d0:	f1b8 0f00 	cmp.w	r8, #0
   109d4:	d006      	beq.n	109e4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
   109d6:	f108 0801 	add.w	r8, r8, #1
   109da:	f64f 70ff 	movw	r0, #65535	; 0xffff
   109de:	fa5f f888 	uxtb.w	r8, r8
   109e2:	e7e1      	b.n	109a8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
   109e4:	f04f 0801 	mov.w	r8, #1
   109e8:	e7de      	b.n	109a8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
   109ea:	2000      	movs	r0, #0
}
   109ec:	b00d      	add	sp, #52	; 0x34
   109ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109f2:	bf00      	nop

000109f4 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
   109f4:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   109f6:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
   109fa:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
   109fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
   10a02:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
   10a06:	4686      	mov	lr, r0
  const char* end = fname->end;
   10a08:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
   10a0a:	6051      	str	r1, [r2, #4]
   10a0c:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
   10a10:	781a      	ldrb	r2, [r3, #0]
   10a12:	2a2e      	cmp	r2, #46	; 0x2e
   10a14:	bf14      	ite	ne
   10a16:	2001      	movne	r0, #1
   10a18:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
   10a1a:	d103      	bne.n	10a24 <FatFile::makeSFN(FatLfn_t*)+0x30>
   10a1c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10a20:	2a2e      	cmp	r2, #46	; 0x2e
   10a22:	d0fb      	beq.n	10a1c <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
   10a24:	1e61      	subs	r1, r4, #1
   10a26:	4299      	cmp	r1, r3
   10a28:	d90b      	bls.n	10a42 <FatFile::makeSFN(FatLfn_t*)+0x4e>
   10a2a:	460a      	mov	r2, r1
   10a2c:	e002      	b.n	10a34 <FatFile::makeSFN(FatLfn_t*)+0x40>
   10a2e:	4293      	cmp	r3, r2
   10a30:	4611      	mov	r1, r2
   10a32:	d006      	beq.n	10a42 <FatFile::makeSFN(FatLfn_t*)+0x4e>
   10a34:	4611      	mov	r1, r2
   10a36:	3a01      	subs	r2, #1
   10a38:	f891 c000 	ldrb.w	ip, [r1]
   10a3c:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   10a40:	d1f5      	bne.n	10a2e <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
   10a42:	429c      	cmp	r4, r3
   10a44:	f04f 0500 	mov.w	r5, #0
   10a48:	f240 8086 	bls.w	10b58 <FatFile::makeSFN(FatLfn_t*)+0x164>
   10a4c:	2607      	movs	r6, #7
   10a4e:	2708      	movs	r7, #8
   10a50:	46a9      	mov	r9, r5
   10a52:	46a8      	mov	r8, r5
   10a54:	e006      	b.n	10a64 <FatFile::makeSFN(FatLfn_t*)+0x70>
   10a56:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
   10a58:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
   10a5a:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
   10a5e:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
   10a60:	429c      	cmp	r4, r3
   10a62:	d95b      	bls.n	10b1c <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
   10a64:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
   10a66:	2a2e      	cmp	r2, #46	; 0x2e
   10a68:	bf08      	it	eq
   10a6a:	4299      	cmpeq	r1, r3
   10a6c:	d0f3      	beq.n	10a56 <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
   10a6e:	2a22      	cmp	r2, #34	; 0x22
   10a70:	d00d      	beq.n	10a8e <FatFile::makeSFN(FatLfn_t*)+0x9a>
   10a72:	2a7c      	cmp	r2, #124	; 0x7c
   10a74:	d00b      	beq.n	10a8e <FatFile::makeSFN(FatLfn_t*)+0x9a>
   10a76:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
   10a7a:	f1bc 0f02 	cmp.w	ip, #2
   10a7e:	d906      	bls.n	10a8e <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
   10a80:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
   10a84:	f1bc 0f05 	cmp.w	ip, #5
   10a88:	d821      	bhi.n	10ace <FatFile::makeSFN(FatLfn_t*)+0xda>
   10a8a:	2a2d      	cmp	r2, #45	; 0x2d
   10a8c:	d01f      	beq.n	10ace <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
   10a8e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   10a92:	2a80      	cmp	r2, #128	; 0x80
   10a94:	d05d      	beq.n	10b52 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
   10a96:	454e      	cmp	r6, r9
   10a98:	d22f      	bcs.n	10afa <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
   10a9a:	4299      	cmp	r1, r3
   10a9c:	bf2c      	ite	cs
   10a9e:	2000      	movcs	r0, #0
   10aa0:	2001      	movcc	r0, #1
   10aa2:	2e0a      	cmp	r6, #10
   10aa4:	bf08      	it	eq
   10aa6:	f040 0001 	orreq.w	r0, r0, #1
   10aaa:	2800      	cmp	r0, #0
   10aac:	d047      	beq.n	10b3e <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   10aae:	f89e 3016 	ldrb.w	r3, [lr, #22]
   10ab2:	2b20      	cmp	r3, #32
   10ab4:	d040      	beq.n	10b38 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   10ab6:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   10aba:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
   10abc:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
   10abe:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
   10ac0:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
   10ac2:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
   10ac6:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
   10ac8:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
   10aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10ace:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
   10ad2:	f1bc 0f05 	cmp.w	ip, #5
   10ad6:	d9da      	bls.n	10a8e <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
   10ad8:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
   10adc:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   10ae0:	d8d5      	bhi.n	10a8e <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
   10ae2:	454e      	cmp	r6, r9
   10ae4:	d3d9      	bcc.n	10a9a <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
   10ae6:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
   10aea:	f1bc 0f19 	cmp.w	ip, #25
   10aee:	d828      	bhi.n	10b42 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
   10af0:	3a20      	subs	r2, #32
        lc |= bit;
   10af2:	433d      	orrs	r5, r7
        c += 'A' - 'a';
   10af4:	b2d2      	uxtb	r2, r2
        lc |= bit;
   10af6:	b2ed      	uxtb	r5, r5
   10af8:	e001      	b.n	10afe <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
   10afa:	2000      	movs	r0, #0
        c = '_';
   10afc:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
   10afe:	f109 0c01 	add.w	ip, r9, #1
   10b02:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
   10b04:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
   10b06:	f889 2016 	strb.w	r2, [r9, #22]
   10b0a:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
   10b0e:	2a06      	cmp	r2, #6
        fname->seqPos = i;
   10b10:	4691      	mov	r9, r2
   10b12:	bf98      	it	ls
   10b14:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
   10b18:	429c      	cmp	r4, r3
   10b1a:	d8a3      	bhi.n	10a64 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
   10b1c:	f89e 3016 	ldrb.w	r3, [lr, #22]
   10b20:	2b20      	cmp	r3, #32
   10b22:	d009      	beq.n	10b38 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
   10b24:	2800      	cmp	r0, #0
   10b26:	d0c6      	beq.n	10ab6 <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   10b28:	ea18 0f05 	tst.w	r8, r5
   10b2c:	bf18      	it	ne
   10b2e:	2502      	movne	r5, #2
   10b30:	f88e 5015 	strb.w	r5, [lr, #21]
}
   10b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
   10b38:	2000      	movs	r0, #0
}
   10b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10b3e:	460b      	mov	r3, r1
   10b40:	e78e      	b.n	10a60 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
   10b42:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
   10b46:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   10b4a:	bf98      	it	ls
   10b4c:	ea47 0808 	orrls.w	r8, r7, r8
   10b50:	e7d5      	b.n	10afe <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
   10b52:	3301      	adds	r3, #1
        is83 = false;
   10b54:	2000      	movs	r0, #0
   10b56:	e783      	b.n	10a60 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
   10b58:	46a8      	mov	r8, r5
   10b5a:	e7df      	b.n	10b1c <FatFile::makeSFN(FatLfn_t*)+0x128>

00010b5c <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
   10b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
   10b60:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
   10b64:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
   10b66:	460f      	mov	r7, r1
   10b68:	4604      	mov	r4, r0
   10b6a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 10c0c <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
   10b6e:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
   10b72:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   10b76:	f101 0616 	add.w	r6, r1, #22
	return systick_millis_count;
   10b7a:	f1b8 0f03 	cmp.w	r8, #3
   10b7e:	f8db 3000 	ldr.w	r3, [fp]
   10b82:	bf28      	it	cs
   10b84:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
   10b88:	442b      	add	r3, r5
   10b8a:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
   10b8c:	f108 0304 	add.w	r3, r8, #4
   10b90:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
   10b92:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
   10b96:	1e58      	subs	r0, r3, #1
      hex >>= 4;
   10b98:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   10b9a:	2a09      	cmp	r2, #9
   10b9c:	f102 0137 	add.w	r1, r2, #55	; 0x37
   10ba0:	bf98      	it	ls
   10ba2:	f102 0130 	addls.w	r1, r2, #48	; 0x30
   10ba6:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
   10ba8:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   10baa:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
   10bac:	4598      	cmp	r8, r3
   10bae:	d1f0      	bne.n	10b92 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
   10bb0:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
   10bb4:	2100      	movs	r1, #0
   10bb6:	4620      	mov	r0, r4
   10bb8:	f883 a016 	strb.w	sl, [r3, #22]
   10bbc:	f7ff fb74 	bl	102a8 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
   10bc0:	2101      	movs	r1, #1
   10bc2:	4620      	mov	r0, r4
   10bc4:	f7ff fa10 	bl	ffe8 <FatFile::readDirCache(bool)>
   10bc8:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   10bca:	220b      	movs	r2, #11
   10bcc:	4630      	mov	r0, r6
      if (!dir) {
   10bce:	b19b      	cbz	r3, 10bf8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
   10bd0:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   10bd4:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
   10bd6:	f1bc 0f00 	cmp.w	ip, #0
   10bda:	d013      	beq.n	10c04 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   10bdc:	7adb      	ldrb	r3, [r3, #11]
   10bde:	071b      	lsls	r3, r3, #28
   10be0:	d4ee      	bmi.n	10bc0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
   10be2:	f011 fae1 	bl	221a8 <memcmp>
   10be6:	2800      	cmp	r0, #0
   10be8:	d1ea      	bne.n	10bc0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
   10bea:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   10bee:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
   10bf2:	d1c2      	bne.n	10b7a <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
   10bf4:	4648      	mov	r0, r9
 fail:
   10bf6:	e003      	b.n	10c00 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
   10bf8:	7860      	ldrb	r0, [r4, #1]
   10bfa:	fab0 f080 	clz	r0, r0
   10bfe:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
   10c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
   10c04:	2001      	movs	r0, #1
}
   10c06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c0a:	bf00      	nop
   10c0c:	20013554 	.word	0x20013554

00010c10 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
   10c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c14:	ed2d 8b02 	vpush	{d8}
   10c18:	b08b      	sub	sp, #44	; 0x2c
   10c1a:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
   10c1e:	688b      	ldr	r3, [r1, #8]
   10c20:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
   10c22:	780b      	ldrb	r3, [r1, #0]
   10c24:	f013 0f70 	tst.w	r3, #112	; 0x70
   10c28:	d053      	beq.n	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
   10c2a:	9b02      	ldr	r3, [sp, #8]
   10c2c:	781b      	ldrb	r3, [r3, #0]
   10c2e:	2b00      	cmp	r3, #0
   10c30:	d14f      	bne.n	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
   10c32:	6913      	ldr	r3, [r2, #16]
   10c34:	4690      	mov	r8, r2
   10c36:	4a9a      	ldr	r2, [pc, #616]	; (10ea0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
   10c38:	460e      	mov	r6, r1
   10c3a:	330c      	adds	r3, #12
   10c3c:	fba2 2303 	umull	r2, r3, r2, r3
   10c40:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
   10c44:	f898 3015 	ldrb.w	r3, [r8, #21]
   10c48:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
   10c4a:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
   10c4c:	f000 80a7 	beq.w	10d9e <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
   10c50:	1c57      	adds	r7, r2, #1
   10c52:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
   10c54:	2300      	movs	r3, #0
    seekSet(0);
   10c56:	4630      	mov	r0, r6
   10c58:	4619      	mov	r1, r3
   10c5a:	461c      	mov	r4, r3
   10c5c:	9306      	str	r3, [sp, #24]
   10c5e:	f7ff fb23 	bl	102a8 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   10c62:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
   10c66:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
   10c68:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
   10c6a:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   10c6c:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
   10c70:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
   10c72:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
   10c74:	2100      	movs	r1, #0
   10c76:	4630      	mov	r0, r6
   10c78:	f7ff f9b6 	bl	ffe8 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
   10c7c:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
   10c80:	4603      	mov	r3, r0
   10c82:	b320      	cbz	r0, 10cce <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
   10c84:	7802      	ldrb	r2, [r0, #0]
   10c86:	2ae5      	cmp	r2, #229	; 0xe5
   10c88:	d029      	beq.n	10cde <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
   10c8a:	b342      	cbz	r2, 10cde <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
   10c8c:	42bc      	cmp	r4, r7
   10c8e:	bf38      	it	cc
   10c90:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
   10c92:	2a2e      	cmp	r2, #46	; 0x2e
   10c94:	d02b      	beq.n	10cee <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
   10c96:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
   10c9a:	f1bc 0f0f 	cmp.w	ip, #15
   10c9e:	d054      	beq.n	10d4a <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
   10ca0:	f01c 0c08 	ands.w	ip, ip, #8
   10ca4:	d123      	bne.n	10cee <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
   10ca6:	f1b9 0f00 	cmp.w	r9, #0
   10caa:	f040 80d5 	bne.w	10e58 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   10cae:	220b      	movs	r2, #11
   10cb0:	ee18 1a10 	vmov	r1, s16
   10cb4:	f011 fa78 	bl	221a8 <memcmp>
   10cb8:	2800      	cmp	r0, #0
   10cba:	d1da      	bne.n	10c72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   10cbc:	f898 3015 	ldrb.w	r3, [r8, #21]
   10cc0:	f013 0301 	ands.w	r3, r3, #1
   10cc4:	f000 80e4 	beq.w	10e90 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
   10cc8:	2301      	movs	r3, #1
   10cca:	9305      	str	r3, [sp, #20]
   10ccc:	e7d1      	b.n	10c72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
   10cce:	7873      	ldrb	r3, [r6, #1]
   10cd0:	b183      	cbz	r3, 10cf4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
   10cd2:	2000      	movs	r0, #0
}
   10cd4:	b00b      	add	sp, #44	; 0x2c
   10cd6:	ecbd 8b02 	vpop	{d8}
   10cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
   10cde:	2c00      	cmp	r4, #0
   10ce0:	bf08      	it	eq
   10ce2:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
   10ce4:	42bc      	cmp	r4, r7
   10ce6:	d201      	bcs.n	10cec <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
   10ce8:	3401      	adds	r4, #1
   10cea:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
   10cec:	b112      	cbz	r2, 10cf4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
   10cee:	f04f 0900 	mov.w	r9, #0
   10cf2:	e7be      	b.n	10c72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   10cf4:	9b03      	ldr	r3, [sp, #12]
   10cf6:	059a      	lsls	r2, r3, #22
   10cf8:	d5eb      	bpl.n	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   10cfa:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   10cfe:	3b01      	subs	r3, #1
   10d00:	2b01      	cmp	r3, #1
   10d02:	d8e6      	bhi.n	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
   10d04:	2c00      	cmp	r4, #0
   10d06:	bf08      	it	eq
   10d08:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
   10d0a:	42bc      	cmp	r4, r7
   10d0c:	d303      	bcc.n	10d16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
   10d0e:	e048      	b.n	10da2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
   10d10:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
   10d12:	42a7      	cmp	r7, r4
   10d14:	d045      	beq.n	10da2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
   10d16:	2100      	movs	r1, #0
   10d18:	4630      	mov	r0, r6
   10d1a:	f7ff f965 	bl	ffe8 <FatFile::readDirCache(bool)>
    freeFound++;
   10d1e:	1c63      	adds	r3, r4, #1
    if (!dir) {
   10d20:	2800      	cmp	r0, #0
   10d22:	d1f5      	bne.n	10d10 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
   10d24:	7873      	ldrb	r3, [r6, #1]
   10d26:	2b00      	cmp	r3, #0
   10d28:	d1d3      	bne.n	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
   10d2a:	42a7      	cmp	r7, r4
   10d2c:	d939      	bls.n	10da2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
   10d2e:	9d07      	ldr	r5, [sp, #28]
   10d30:	e005      	b.n	10d3e <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
   10d32:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
   10d34:	eb04 1403 	add.w	r4, r4, r3, lsl #4
   10d38:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   10d3a:	42a7      	cmp	r7, r4
   10d3c:	d931      	bls.n	10da2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
   10d3e:	4630      	mov	r0, r6
   10d40:	f7fe fdc2 	bl	f8c8 <FatFile::addDirCluster()>
   10d44:	2800      	cmp	r0, #0
   10d46:	d1f4      	bne.n	10d32 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
   10d48:	e7c3      	b.n	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
   10d4a:	f1b9 0f00 	cmp.w	r9, #0
   10d4e:	d119      	bne.n	10d84 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
   10d50:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
   10d54:	9904      	ldr	r1, [sp, #16]
   10d56:	4559      	cmp	r1, fp
   10d58:	d18b      	bne.n	10c72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
   10d5a:	f012 0940 	ands.w	r9, r2, #64	; 0x40
   10d5e:	d088      	beq.n	10c72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
   10d60:	7b43      	ldrb	r3, [r0, #13]
   10d62:	4689      	mov	r9, r1
   10d64:	9306      	str	r3, [sp, #24]
      if (order == 1) {
   10d66:	f1bb 0f01 	cmp.w	fp, #1
   10d6a:	d182      	bne.n	10c72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
   10d6c:	1c69      	adds	r1, r5, #1
   10d6e:	464b      	mov	r3, r9
   10d70:	4642      	mov	r2, r8
   10d72:	4630      	mov	r0, r6
   10d74:	b289      	uxth	r1, r1
   10d76:	f7ff fd4d 	bl	10814 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
   10d7a:	2800      	cmp	r0, #0
   10d7c:	bf08      	it	eq
   10d7e:	f04f 0900 	moveq.w	r9, #0
   10d82:	e776      	b.n	10c72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
   10d84:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   10d88:	fa5f fb8b 	uxtb.w	fp, fp
   10d8c:	455a      	cmp	r2, fp
   10d8e:	d1ae      	bne.n	10cee <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
   10d90:	7b43      	ldrb	r3, [r0, #13]
   10d92:	9a06      	ldr	r2, [sp, #24]
   10d94:	4293      	cmp	r3, r2
   10d96:	d0e6      	beq.n	10d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
   10d98:	f04f 0900 	mov.w	r9, #0
   10d9c:	e769      	b.n	10c72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
   10d9e:	2701      	movs	r7, #1
   10da0:	e758      	b.n	10c54 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
   10da2:	9b05      	ldr	r3, [sp, #20]
   10da4:	b12b      	cbz	r3, 10db2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
   10da6:	4641      	mov	r1, r8
   10da8:	4630      	mov	r0, r6
   10daa:	f7ff fed7 	bl	10b5c <FatFile::makeUniqueSfn(FatLfn_t*)>
   10dae:	2800      	cmp	r0, #0
   10db0:	d08f      	beq.n	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
   10db2:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
   10db4:	4642      	mov	r2, r8
   10db6:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
   10db8:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
   10dba:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
   10dbe:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
   10dc0:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
   10dc2:	4629      	mov	r1, r5
   10dc4:	f7ff fd84 	bl	108d0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
   10dc8:	2800      	cmp	r0, #0
   10dca:	d082      	beq.n	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   10dcc:	0169      	lsls	r1, r5, #5
   10dce:	4630      	mov	r0, r6
   10dd0:	f7ff fa6a 	bl	102a8 <FatFile::seekSet(unsigned long)>
   10dd4:	2800      	cmp	r0, #0
   10dd6:	f43f af7c 	beq.w	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
   10dda:	2100      	movs	r1, #0
   10ddc:	4630      	mov	r0, r6
   10dde:	f7ff f903 	bl	ffe8 <FatFile::readDirCache(bool)>
  if (!dir) {
   10de2:	4604      	mov	r4, r0
   10de4:	2800      	cmp	r0, #0
   10de6:	f43f af74 	beq.w	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
   10dea:	2220      	movs	r2, #32
   10dec:	2100      	movs	r1, #0
   10dee:	f011 fa87 	bl	22300 <memset>
  memcpy(dir->name, fname->sfn, 11);
   10df2:	f8d8 2016 	ldr.w	r2, [r8, #22]
   10df6:	f8d8 301a 	ldr.w	r3, [r8, #26]
   10dfa:	6022      	str	r2, [r4, #0]
   10dfc:	6063      	str	r3, [r4, #4]
   10dfe:	f898 3020 	ldrb.w	r3, [r8, #32]
   10e02:	f8b8 201e 	ldrh.w	r2, [r8, #30]
   10e06:	72a3      	strb	r3, [r4, #10]
   10e08:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
   10e0a:	f898 3015 	ldrb.w	r3, [r8, #21]
   10e0e:	f003 0318 	and.w	r3, r3, #24
   10e12:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
   10e14:	4b23      	ldr	r3, [pc, #140]	; (10ea4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
   10e16:	681b      	ldr	r3, [r3, #0]
   10e18:	2b00      	cmp	r3, #0
   10e1a:	d03b      	beq.n	10e94 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
   10e1c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   10e20:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   10e24:	a809      	add	r0, sp, #36	; 0x24
   10e26:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
   10e28:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10e2c:	8223      	strh	r3, [r4, #16]
   10e2e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   10e32:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
   10e34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   10e38:	7363      	strb	r3, [r4, #13]
   10e3a:	9a07      	ldr	r2, [sp, #28]
   10e3c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
   10e40:	f043 0301 	orr.w	r3, r3, #1
   10e44:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   10e48:	9b03      	ldr	r3, [sp, #12]
   10e4a:	462a      	mov	r2, r5
   10e4c:	4631      	mov	r1, r6
   10e4e:	9802      	ldr	r0, [sp, #8]
   10e50:	9700      	str	r7, [sp, #0]
   10e52:	f7ff fa81 	bl	10358 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
   10e56:	e73d      	b.n	10cd4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
   10e58:	f1bb 0f01 	cmp.w	fp, #1
   10e5c:	f47f af39 	bne.w	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
   10e60:	300a      	adds	r0, #10
   10e62:	e001      	b.n	10e68 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10e64:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10e68:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
   10e6c:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10e6e:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
   10e72:	fa52 f281 	uxtab	r2, r2, r1
   10e76:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
   10e7a:	d1f3      	bne.n	10e64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
   10e7c:	9b06      	ldr	r3, [sp, #24]
   10e7e:	4563      	cmp	r3, ip
   10e80:	f47f af27 	bne.w	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
   10e84:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
   10e86:	9b03      	ldr	r3, [sp, #12]
   10e88:	0519      	lsls	r1, r3, #20
   10e8a:	f53f af22 	bmi.w	10cd2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
   10e8e:	e7db      	b.n	10e48 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
   10e90:	461f      	mov	r7, r3
   10e92:	e7f8      	b.n	10e86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
   10e94:	f645 2321 	movw	r3, #23073	; 0x5a21
   10e98:	8223      	strh	r3, [r4, #16]
   10e9a:	8323      	strh	r3, [r4, #24]
   10e9c:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
   10e9e:	e7cc      	b.n	10e3a <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
   10ea0:	4ec4ec4f 	.word	0x4ec4ec4f
   10ea4:	2000adbc 	.word	0x2000adbc

00010ea8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
   10ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10eac:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
   10eae:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
   10eb0:	b082      	sub	sp, #8
   10eb2:	460c      	mov	r4, r1
  while (*path == ' ') {
   10eb4:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
   10eb6:	4615      	mov	r5, r2
  while (*path == ' ') {
   10eb8:	d103      	bne.n	10ec2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
   10eba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   10ebe:	2b20      	cmp	r3, #32
   10ec0:	d0fb      	beq.n	10eba <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
   10ec2:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
   10ec4:	7823      	ldrb	r3, [r4, #0]
   10ec6:	b363      	cbz	r3, 10f22 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
   10ec8:	2b2f      	cmp	r3, #47	; 0x2f
   10eca:	d02a      	beq.n	10f22 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
   10ecc:	f04f 0800 	mov.w	r8, #0
   10ed0:	4e29      	ldr	r6, [pc, #164]	; (10f78 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
   10ed2:	1d21      	adds	r1, r4, #4
   10ed4:	4620      	mov	r0, r4
   10ed6:	aa01      	add	r2, sp, #4
   10ed8:	f003 fbd2 	bl	14680 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
   10edc:	4604      	mov	r4, r0
   10ede:	b170      	cbz	r0, 10efe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
   10ee0:	9b01      	ldr	r3, [sp, #4]
   10ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   10ee6:	d240      	bcs.n	10f6a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
   10ee8:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
   10eea:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
   10eee:	d831      	bhi.n	10f54 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
   10ef0:	2b3c      	cmp	r3, #60	; 0x3c
   10ef2:	b2d9      	uxtb	r1, r3
   10ef4:	d829      	bhi.n	10f4a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
   10ef6:	2921      	cmp	r1, #33	; 0x21
   10ef8:	d805      	bhi.n	10f06 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
   10efa:	291f      	cmp	r1, #31
   10efc:	d809      	bhi.n	10f12 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
   10efe:	2000      	movs	r0, #0
   10f00:	b002      	add	sp, #8
   10f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f06:	3922      	subs	r1, #34	; 0x22
   10f08:	b2c9      	uxtb	r1, r1
   10f0a:	fa26 f101 	lsr.w	r1, r6, r1
   10f0e:	07ca      	lsls	r2, r1, #31
   10f10:	d4f5      	bmi.n	10efe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
   10f12:	2b2e      	cmp	r3, #46	; 0x2e
   10f14:	d001      	beq.n	10f1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
   10f16:	2b20      	cmp	r3, #32
   10f18:	d11c      	bne.n	10f54 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
   10f1a:	7823      	ldrb	r3, [r4, #0]
   10f1c:	b10b      	cbz	r3, 10f22 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
   10f1e:	2b2f      	cmp	r3, #47	; 0x2f
   10f20:	d1d7      	bne.n	10ed2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
   10f22:	692b      	ldr	r3, [r5, #16]
   10f24:	3b01      	subs	r3, #1
   10f26:	2bfe      	cmp	r3, #254	; 0xfe
   10f28:	d8e9      	bhi.n	10efe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
   10f2a:	7823      	ldrb	r3, [r4, #0]
   10f2c:	2b20      	cmp	r3, #32
   10f2e:	d103      	bne.n	10f38 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
   10f30:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   10f34:	2b20      	cmp	r3, #32
   10f36:	d0fb      	beq.n	10f30 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
   10f38:	2b2f      	cmp	r3, #47	; 0x2f
   10f3a:	d0f9      	beq.n	10f30 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
   10f3c:	4628      	mov	r0, r5
  *ptr = path;
   10f3e:	603c      	str	r4, [r7, #0]
}
   10f40:	b002      	add	sp, #8
   10f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
   10f46:	f7ff bd55 	b.w	109f4 <FatFile::makeSFN(FatLfn_t*)>
   10f4a:	295c      	cmp	r1, #92	; 0x5c
   10f4c:	d0d7      	beq.n	10efe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
   10f4e:	d905      	bls.n	10f5c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
   10f50:	297c      	cmp	r1, #124	; 0x7c
   10f52:	d0d4      	beq.n	10efe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
   10f54:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
   10f58:	60ac      	str	r4, [r5, #8]
   10f5a:	e7de      	b.n	10f1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
   10f5c:	393e      	subs	r1, #62	; 0x3e
   10f5e:	2901      	cmp	r1, #1
   10f60:	d8f8      	bhi.n	10f54 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
   10f62:	2000      	movs	r0, #0
   10f64:	b002      	add	sp, #8
   10f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
   10f6a:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
   10f6e:	60ac      	str	r4, [r5, #8]
      fname->len = len;
   10f70:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
   10f74:	e7d1      	b.n	10f1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
   10f76:	bf00      	nop
   10f78:	05002101 	.word	0x05002101

00010f7c <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
   10f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
   10f7e:	2300      	movs	r3, #0
   10f80:	b08b      	sub	sp, #44	; 0x2c
   10f82:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
   10f84:	7883      	ldrb	r3, [r0, #2]
   10f86:	079a      	lsls	r2, r3, #30
   10f88:	d524      	bpl.n	10fd4 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   10f8a:	6a01      	ldr	r1, [r0, #32]
   10f8c:	4605      	mov	r5, r0
   10f8e:	b119      	cbz	r1, 10f98 <FatFile::remove()+0x1c>
   10f90:	6880      	ldr	r0, [r0, #8]
   10f92:	f000 fe19 	bl	11bc8 <FatPartition::freeChain(unsigned long)>
   10f96:	b1e8      	cbz	r0, 10fd4 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
   10f98:	2101      	movs	r1, #1
   10f9a:	4628      	mov	r0, r5
   10f9c:	f7fe fcd0 	bl	f940 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   10fa0:	b1c0      	cbz	r0, 10fd4 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
   10fa2:	1e42      	subs	r2, r0, #1
   10fa4:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
   10fa8:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10faa:	01e3      	lsls	r3, r4, #7
   10fac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   10fb0:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
   10fb4:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10fb6:	fa51 f383 	uxtab	r3, r1, r3
   10fba:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
   10fbc:	d1f5      	bne.n	10faa <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
   10fbe:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
   10fc0:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
   10fc2:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   10fc4:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
   10fc6:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   10fc8:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
   10fcc:	70ab      	strb	r3, [r5, #2]
   10fce:	f003 fa3b 	bl	14448 <FsCache::sync()>
   10fd2:	b910      	cbnz	r0, 10fda <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
   10fd4:	2000      	movs	r0, #0
}
   10fd6:	b00b      	add	sp, #44	; 0x2c
   10fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fda:	f507 700e 	add.w	r0, r7, #568	; 0x238
   10fde:	f003 fa33 	bl	14448 <FsCache::sync()>
   10fe2:	2800      	cmp	r0, #0
   10fe4:	d0f6      	beq.n	10fd4 <FatFile::remove()+0x58>
   10fe6:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
   10fe8:	6803      	ldr	r3, [r0, #0]
   10fea:	6a1b      	ldr	r3, [r3, #32]
   10fec:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   10fee:	2800      	cmp	r0, #0
   10ff0:	d0f0      	beq.n	10fd4 <FatFile::remove()+0x58>
  if (!isLFN()) {
   10ff2:	78eb      	ldrb	r3, [r5, #3]
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	d0ee      	beq.n	10fd6 <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
   10ff8:	4629      	mov	r1, r5
   10ffa:	a801      	add	r0, sp, #4
   10ffc:	f7fe fec0 	bl	fd80 <FatFile::openCluster(FatFile*)>
   11000:	2800      	cmp	r0, #0
   11002:	d0e7      	beq.n	10fd4 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   11004:	78eb      	ldrb	r3, [r5, #3]
   11006:	2b00      	cmp	r3, #0
   11008:	d0e4      	beq.n	10fd4 <FatFile::remove()+0x58>
   1100a:	2701      	movs	r7, #1
   1100c:	e021      	b.n	11052 <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   1100e:	a801      	add	r0, sp, #4
   11010:	f7fe ffea 	bl	ffe8 <FatFile::readDirCache(bool)>
   11014:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   11016:	b2f9      	uxtb	r1, r7
    if (!ldir) {
   11018:	2800      	cmp	r0, #0
   1101a:	d0db      	beq.n	10fd4 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   1101c:	7ac2      	ldrb	r2, [r0, #11]
   1101e:	2a0f      	cmp	r2, #15
   11020:	d1d8      	bne.n	10fd4 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
   11022:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   11024:	fa5f fc83 	uxtb.w	ip, r3
   11028:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   1102a:	f002 031f 	and.w	r3, r2, #31
   1102e:	428b      	cmp	r3, r1
   11030:	d1d0      	bne.n	10fd4 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
   11032:	7b43      	ldrb	r3, [r0, #13]
   11034:	42a3      	cmp	r3, r4
   11036:	d1cd      	bne.n	10fd4 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
   11038:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   1103a:	68a9      	ldr	r1, [r5, #8]
   1103c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
   11040:	f043 0301 	orr.w	r3, r3, #1
   11044:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
   11048:	0653      	lsls	r3, r2, #25
   1104a:	d40d      	bmi.n	11068 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   1104c:	78eb      	ldrb	r3, [r5, #3]
   1104e:	4563      	cmp	r3, ip
   11050:	d3c0      	bcc.n	10fd4 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
   11052:	88a9      	ldrh	r1, [r5, #4]
   11054:	a801      	add	r0, sp, #4
   11056:	1bc9      	subs	r1, r1, r7
   11058:	b289      	uxth	r1, r1
   1105a:	0149      	lsls	r1, r1, #5
   1105c:	f7ff f924 	bl	102a8 <FatFile::seekSet(unsigned long)>
   11060:	2100      	movs	r1, #0
   11062:	2800      	cmp	r0, #0
   11064:	d1d3      	bne.n	1100e <FatFile::remove()+0x92>
   11066:	e7b5      	b.n	10fd4 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
   11068:	68ac      	ldr	r4, [r5, #8]
   1106a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1106e:	f003 f9eb 	bl	14448 <FsCache::sync()>
   11072:	2800      	cmp	r0, #0
   11074:	d0ae      	beq.n	10fd4 <FatFile::remove()+0x58>
   11076:	f504 700e 	add.w	r0, r4, #568	; 0x238
   1107a:	f003 f9e5 	bl	14448 <FsCache::sync()>
   1107e:	2800      	cmp	r0, #0
   11080:	d0a8      	beq.n	10fd4 <FatFile::remove()+0x58>
   11082:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
   11084:	6803      	ldr	r3, [r0, #0]
   11086:	6a1b      	ldr	r3, [r3, #32]
   11088:	4798      	blx	r3
   1108a:	e7a4      	b.n	10fd6 <FatFile::remove()+0x5a>

0001108c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
   1108c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11090:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
   11094:	b1a2      	cbz	r2, 110c0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
   11096:	4605      	mov	r5, r0
   11098:	460c      	mov	r4, r1
   1109a:	4698      	mov	r8, r3
   1109c:	1857      	adds	r7, r2, r1
   1109e:	e001      	b.n	110a4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
   110a0:	42bc      	cmp	r4, r7
   110a2:	d00d      	beq.n	110c0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   110a4:	682b      	ldr	r3, [r5, #0]
   110a6:	4620      	mov	r0, r4
   110a8:	4649      	mov	r1, r9
   110aa:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   110ac:	47c0      	blx	r8
   110ae:	4621      	mov	r1, r4
   110b0:	4602      	mov	r2, r0
   110b2:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
   110b4:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   110b6:	47b0      	blx	r6
   110b8:	2800      	cmp	r0, #0
   110ba:	d1f1      	bne.n	110a0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
   110bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
   110c0:	2001      	movs	r0, #1
  }
   110c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   110c6:	bf00      	nop

000110c8 <initFatDirCallback(unsigned long, void*)>:
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
   110c8:	6848      	ldr	r0, [r1, #4]
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
   110ca:	b510      	push	{r4, lr}
   110cc:	460c      	mov	r4, r1
  if (state->pr && ++state->count >= state->dotcount) {
   110ce:	b130      	cbz	r0, 110de <initFatDirCallback(unsigned long, void*)+0x16>
   110d0:	890b      	ldrh	r3, [r1, #8]
   110d2:	894a      	ldrh	r2, [r1, #10]
   110d4:	3301      	adds	r3, #1
   110d6:	b29b      	uxth	r3, r3
   110d8:	429a      	cmp	r2, r3
   110da:	810b      	strh	r3, [r1, #8]
   110dc:	d901      	bls.n	110e2 <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
   110de:	6820      	ldr	r0, [r4, #0]
   110e0:	bd10      	pop	{r4, pc}
   110e2:	6803      	ldr	r3, [r0, #0]
   110e4:	2201      	movs	r2, #1
   110e6:	4903      	ldr	r1, [pc, #12]	; (110f4 <initFatDirCallback(unsigned long, void*)+0x2c>)
   110e8:	685b      	ldr	r3, [r3, #4]
   110ea:	4798      	blx	r3
    state->count = 0;
   110ec:	2300      	movs	r3, #0
}
   110ee:	6820      	ldr	r0, [r4, #0]
    state->count = 0;
   110f0:	8123      	strh	r3, [r4, #8]
}
   110f2:	bd10      	pop	{r4, pc}
   110f4:	20003a58 	.word	0x20003a58

000110f8 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
   110f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110fc:	4605      	mov	r5, r0
   110fe:	b087      	sub	sp, #28
   11100:	4688      	mov	r8, r1
   11102:	4692      	mov	sl, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   11104:	2100      	movs	r1, #0
   11106:	f44f 7200 	mov.w	r2, #512	; 0x200
   1110a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1110c:	f011 f8f8 	bl	22300 <memset>
  writeMsg("Writing FAT ");
   11110:	6a28      	ldr	r0, [r5, #32]
   11112:	b128      	cbz	r0, 11120 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x28>
   11114:	6803      	ldr	r3, [r0, #0]
   11116:	220c      	movs	r2, #12
   11118:	493a      	ldr	r1, [pc, #232]	; (11204 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x10c>)
   1111a:	685b      	ldr	r3, [r3, #4]
   1111c:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
   1111e:	6a28      	ldr	r0, [r5, #32]
  state.buffer = m_secBuf;
   11120:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  state.count = 0;
   11122:	f04f 0900 	mov.w	r9, #0
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
   11126:	69ee      	ldr	r6, [r5, #28]
   11128:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   1112c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 11210 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x118>
   11130:	68e9      	ldr	r1, [r5, #12]
  state.count = 0;
   11132:	f8ad 9014 	strh.w	r9, [sp, #20]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
   11136:	1c4c      	adds	r4, r1, #1
  state.buffer = m_secBuf;
   11138:	e9cd 3003 	strd	r3, r0, [sp, #12]
  state.dotcount = sectorCount/32;
   1113c:	ea4f 135a 	mov.w	r3, sl, lsr #5
   11140:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
   11144:	6833      	ldr	r3, [r6, #0]
   11146:	6adf      	ldr	r7, [r3, #44]	; 0x2c
   11148:	4567      	cmp	r7, ip
   1114a:	d126      	bne.n	1119a <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa2>
     for (size_t i = 0; i < ns; i++) {
   1114c:	b36a      	cbz	r2, 111aa <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb2>
   1114e:	eb01 070a 	add.w	r7, r1, sl
   11152:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 11214 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x11c>
   11156:	e00a      	b.n	1116e <FatFormatter::initFatDir(unsigned char, unsigned long)+0x76>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   11158:	4621      	mov	r1, r4
   1115a:	9a03      	ldr	r2, [sp, #12]
   1115c:	4630      	mov	r0, r6
     for (size_t i = 0; i < ns; i++) {
   1115e:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   11160:	47d8      	blx	fp
   11162:	2800      	cmp	r0, #0
   11164:	d03f      	beq.n	111e6 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     for (size_t i = 0; i < ns; i++) {
   11166:	42a7      	cmp	r7, r4
   11168:	d01e      	beq.n	111a8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb0>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   1116a:	6833      	ldr	r3, [r6, #0]
  if (state->pr && ++state->count >= state->dotcount) {
   1116c:	9804      	ldr	r0, [sp, #16]
   1116e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   11172:	2800      	cmp	r0, #0
   11174:	d0f0      	beq.n	11158 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
   11176:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1117a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1117e:	3301      	adds	r3, #1
   11180:	b29b      	uxth	r3, r3
   11182:	429a      	cmp	r2, r3
   11184:	f8ad 3014 	strh.w	r3, [sp, #20]
   11188:	d8e6      	bhi.n	11158 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
   1118a:	6803      	ldr	r3, [r0, #0]
   1118c:	4651      	mov	r1, sl
   1118e:	2201      	movs	r2, #1
   11190:	685b      	ldr	r3, [r3, #4]
   11192:	4798      	blx	r3
    state->count = 0;
   11194:	f8ad 9014 	strh.w	r9, [sp, #20]
   11198:	e7de      	b.n	11158 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
   1119a:	ab03      	add	r3, sp, #12
   1119c:	4621      	mov	r1, r4
   1119e:	4630      	mov	r0, r6
   111a0:	9300      	str	r3, [sp, #0]
   111a2:	4b19      	ldr	r3, [pc, #100]	; (11208 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x110>)
   111a4:	47b8      	blx	r7
   111a6:	b1f0      	cbz	r0, 111e6 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     return false;
  }
  writeMsg("\r\n");
   111a8:	6a28      	ldr	r0, [r5, #32]
   111aa:	b120      	cbz	r0, 111b6 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xbe>
   111ac:	6803      	ldr	r3, [r0, #0]
   111ae:	2202      	movs	r2, #2
   111b0:	4916      	ldr	r1, [pc, #88]	; (1120c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x114>)
   111b2:	685b      	ldr	r3, [r3, #4]
   111b4:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
   111b6:	f1b8 0f10 	cmp.w	r8, #16
  m_secBuf[0] = 0XF8;
   111ba:	f04f 01f8 	mov.w	r1, #248	; 0xf8
   111be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
   111c0:	f04f 0301 	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
   111c4:	bf0c      	ite	eq
   111c6:	2004      	moveq	r0, #4
   111c8:	200c      	movne	r0, #12
  m_secBuf[0] = 0XF8;
   111ca:	7011      	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
   111cc:	21ff      	movs	r1, #255	; 0xff
   111ce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   111d0:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
   111d2:	3301      	adds	r3, #1
   111d4:	4298      	cmp	r0, r3
   111d6:	d1fa      	bne.n	111ce <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd6>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
   111d8:	69e8      	ldr	r0, [r5, #28]
   111da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   111dc:	6803      	ldr	r3, [r0, #0]
   111de:	68e9      	ldr	r1, [r5, #12]
   111e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   111e2:	4798      	blx	r3
   111e4:	b918      	cbnz	r0, 111ee <FatFormatter::initFatDir(unsigned char, unsigned long)+0xf6>
     return false;
   111e6:	2000      	movs	r0, #0
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
   111e8:	b007      	add	sp, #28
   111ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
   111ee:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
   111f2:	69e8      	ldr	r0, [r5, #28]
   111f4:	4419      	add	r1, r3
   111f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   111f8:	6803      	ldr	r3, [r0, #0]
   111fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   111fc:	4798      	blx	r3
}
   111fe:	b007      	add	sp, #28
   11200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11204:	20003a48 	.word	0x20003a48
   11208:	000110c9 	.word	0x000110c9
   1120c:	20003a70 	.word	0x20003a70
   11210:	0001108d 	.word	0x0001108d
   11214:	20003a58 	.word	0x20003a58

00011218 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
   11218:	b538      	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
   1121a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   1121c:	f44f 7500 	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
   11220:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   11222:	2100      	movs	r1, #0
   11224:	462a      	mov	r2, r5
   11226:	4618      	mov	r0, r3
   11228:	f011 f86a 	bl	22300 <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
   1122c:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
   11230:	22eb      	movs	r2, #235	; 0xeb
   11232:	f8a0 500b 	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
   11236:	f8c0 1003 	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   1123a:	4603      	mov	r3, r0
    pbs->oemName[i] = ' ';
   1123c:	f8c0 1007 	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
   11240:	2190      	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
   11242:	7002      	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
   11244:	2076      	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
   11246:	7099      	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
   11248:	2202      	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
   1124a:	7058      	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
   1124c:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
   11250:	7359      	strb	r1, [r3, #13]
   11252:	f64a 2155 	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
   11256:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
   11258:	741a      	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
   1125a:	22f8      	movs	r2, #248	; 0xf8
   1125c:	81d8      	strh	r0, [r3, #14]
   1125e:	755a      	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
   11260:	6922      	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
   11262:	61da      	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
   11264:	69a2      	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
   11266:	f8a3 11fe 	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
   1126a:	621a      	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
   1126c:	bd38      	pop	{r3, r4, r5, pc}
   1126e:	bf00      	nop

00011270 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
   11270:	b570      	push	{r4, r5, r6, lr}
   11272:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   11274:	f44f 7200 	mov.w	r2, #512	; 0x200
   11278:	2100      	movs	r1, #0
   1127a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1127c:	f011 f840 	bl	22300 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
   11280:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
   11282:	6922      	ldr	r2, [r4, #16]
   11284:	6821      	ldr	r1, [r4, #0]
   11286:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
   1128a:	f003 f957 	bl	1453c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
   1128e:	69a3      	ldr	r3, [r4, #24]
   11290:	6922      	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
   11292:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
   11296:	6821      	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors -1);
   11298:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
   1129a:	3a01      	subs	r2, #1
   1129c:	f003 f94e 	bl	1453c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
   112a0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
   112a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
   112a8:	f885 21c2 	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
   112ac:	6922      	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
   112ae:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
   112b0:	f8c5 21c6 	str.w	r2, [r5, #454]	; 0x1c6
   112b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
   112b6:	69a1      	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
   112b8:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
   112bc:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
   112be:	f8c5 11ca 	str.w	r1, [r5, #458]	; 0x1ca
   112c2:	2100      	movs	r1, #0
   112c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   112c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
   112ca:	4718      	bx	r3

000112cc <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
   112cc:	b570      	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   112ce:	6946      	ldr	r6, [r0, #20]
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
   112d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   112d4:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
   112d8:	4604      	mov	r4, r0
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   112da:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
   112de:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
   112e0:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   112e2:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
   112e6:	f202 1c01 	addw	ip, r2, #257	; 0x101
   112ea:	ea4f 211c 	mov.w	r1, ip, lsr #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
   112ee:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
   112f2:	6081      	str	r1, [r0, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
   112f4:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
   112f8:	4298      	cmp	r0, r3
   112fa:	d90e      	bls.n	1131a <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
   112fc:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   112fe:	1af2      	subs	r2, r6, r3
   11300:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
   11304:	f202 1101 	addw	r1, r2, #257	; 0x101
   11308:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
   1130a:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1130e:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
   11312:	4283      	cmp	r3, r0
   11314:	d3f2      	bcc.n	112fc <FatFormatter::makeFat16()+0x30>
   11316:	e9c4 3101 	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
   1131a:	1a1b      	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
   1131c:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
   11320:	f103 0080 	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
   11324:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
   11328:	6120      	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
   1132a:	d24f      	bcs.n	113cc <FatFormatter::makeFat16()+0x100>
                   + 2*m_fatSize + m_reservedSectorCount + 32;
   1132c:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
   11330:	3381      	adds	r3, #129	; 0x81
  if (!writeMbr()) {
   11332:	4620      	mov	r0, r4
                   + 2*m_fatSize + m_reservedSectorCount + 32;
   11334:	fb02 c20e 	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
   11338:	60e3      	str	r3, [r4, #12]
    m_partType = 0X06;
   1133a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  m_totalSectors = nc*m_sectorsPerCluster
   1133e:	61a2      	str	r2, [r4, #24]
    m_partType = 0X06;
   11340:	bf34      	ite	cc
   11342:	2304      	movcc	r3, #4
   11344:	2306      	movcs	r3, #6
   11346:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
   1134a:	2301      	movs	r3, #1
   1134c:	8523      	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
   1134e:	f7ff ff8f 	bl	11270 <FatFormatter::writeMbr()>
   11352:	b908      	cbnz	r0, 11358 <FatFormatter::makeFat16()+0x8c>
}
   11354:	2000      	movs	r0, #0
   11356:	bd70      	pop	{r4, r5, r6, pc}
  initPbs();
   11358:	4620      	mov	r0, r4
   1135a:	f7ff ff5d 	bl	11218 <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
   1135e:	2229      	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
   11360:	68a1      	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
   11362:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
   11366:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
   1136a:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
   1136c:	f8c5 302f 	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
   11370:	2080      	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
   11372:	f885 2036 	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
   11376:	2254      	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
   11378:	f8c5 302b 	str.w	r3, [r5, #43]	; 0x2b
   1137c:	f8c5 3032 	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
   11380:	2331      	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
   11382:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
   11386:	2236      	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
   11388:	82e9      	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
   1138a:	2141      	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
   1138c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
   11390:	f885 1037 	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
   11394:	f44f 7100 	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
   11398:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
   1139c:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
   113a0:	4b0f      	ldr	r3, [pc, #60]	; (113e0 <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
   113a2:	69e0      	ldr	r0, [r4, #28]
   113a4:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
   113a8:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
   113aa:	f8a5 1011 	strh.w	r1, [r5, #17]
   113ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
   113b0:	6921      	ldr	r1, [r4, #16]
   113b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   113b4:	4798      	blx	r3
   113b6:	2800      	cmp	r0, #0
   113b8:	d0cc      	beq.n	11354 <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
   113ba:	6862      	ldr	r2, [r4, #4]
   113bc:	4620      	mov	r0, r4
   113be:	68e3      	ldr	r3, [r4, #12]
   113c0:	2110      	movs	r1, #16
   113c2:	1ad2      	subs	r2, r2, r3
}
   113c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
   113c8:	f7ff be96 	b.w	110f8 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
   113cc:	6a20      	ldr	r0, [r4, #32]
   113ce:	2800      	cmp	r0, #0
   113d0:	d0c0      	beq.n	11354 <FatFormatter::makeFat16()+0x88>
   113d2:	6803      	ldr	r3, [r0, #0]
   113d4:	2213      	movs	r2, #19
   113d6:	4903      	ldr	r1, [pc, #12]	; (113e4 <FatFormatter::makeFat16()+0x118>)
   113d8:	685b      	ldr	r3, [r3, #4]
   113da:	4798      	blx	r3
}
   113dc:	2000      	movs	r0, #0
   113de:	bd70      	pop	{r4, r5, r6, pc}
   113e0:	0012d687 	.word	0x0012d687
   113e4:	20003a1c 	.word	0x20003a1c

000113e8 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
   113e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   113ea:	6946      	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
   113ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   113f0:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
   113f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   113f8:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
   113fc:	6103      	str	r3, [r0, #16]
    r = m_relativeSectors + 9 + 2*m_fatSize;
   113fe:	f242 0e09 	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
   11402:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
   11404:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
   11406:	6042      	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   11408:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
   1140c:	f101 0381 	add.w	r3, r1, #129	; 0x81
   11410:	09db      	lsrs	r3, r3, #7
   11412:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
   11414:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
   11418:	4290      	cmp	r0, r2
   1141a:	f240 80b6 	bls.w	1158a <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
   1141e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   11422:	1ab1      	subs	r1, r6, r2
   11424:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
   11428:	f101 0381 	add.w	r3, r1, #129	; 0x81
   1142c:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
   1142e:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
   11432:	005f      	lsls	r7, r3, #1
    if (m_dataStart >= r) {
   11434:	4282      	cmp	r2, r0
   11436:	d3f2      	bcc.n	1141e <FatFormatter::makeFat32()+0x36>
   11438:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
   1143c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   11440:	4299      	cmp	r1, r3
   11442:	f240 8097 	bls.w	11574 <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
   11446:	fb01 2c0c 	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
   1144a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
   1144e:	4620      	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
   11450:	1bd2      	subs	r2, r2, r7
   11452:	b292      	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
   11454:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
   11458:	8522      	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
   1145a:	4a4d      	ldr	r2, [pc, #308]	; (11590 <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
   1145c:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
   1145e:	f5ac 5300 	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
   11462:	4594      	cmp	ip, r2
   11464:	bf94      	ite	ls
   11466:	f04f 0c0b 	movls.w	ip, #11
   1146a:	f04f 0c0c 	movhi.w	ip, #12
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
   1146e:	61a3      	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
   11470:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
   11474:	f7ff fefc 	bl	11270 <FatFormatter::writeMbr()>
   11478:	b908      	cbnz	r0, 1147e <FatFormatter::makeFat32()+0x96>
}
   1147a:	2000      	movs	r0, #0
   1147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
   1147e:	4620      	mov	r0, r4
   11480:	f7ff feca 	bl	11218 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
   11484:	68a1      	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
   11486:	2229      	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
   11488:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
   1148c:	2080      	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
   1148e:	6269      	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
   11490:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
   11494:	2154      	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
   11496:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
   11498:	f8c5 304b 	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
   1149c:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
   114a0:	2041      	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
   114a2:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
   114a6:	f8c5 304e 	str.w	r3, [r5, #78]	; 0x4e
   114aa:	2302      	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
   114ac:	f885 2052 	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
   114b0:	2233      	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
   114b2:	f885 1054 	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
   114b6:	2132      	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
   114b8:	f885 2055 	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
   114bc:	f885 0053 	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
   114c0:	f885 1056 	strb.w	r1, [r5, #86]	; 0x56
   114c4:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
   114c6:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
   114c8:	4b32      	ldr	r3, [pc, #200]	; (11594 <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
   114ca:	4a33      	ldr	r2, [pc, #204]	; (11598 <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
   114cc:	632b      	str	r3, [r5, #48]	; 0x30
   114ce:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
   114d0:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
   114d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   114d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   114d8:	6921      	ldr	r1, [r4, #16]
   114da:	4798      	blx	r3
   114dc:	2800      	cmp	r0, #0
   114de:	d0cc      	beq.n	1147a <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
   114e0:	69e0      	ldr	r0, [r4, #28]
   114e2:	6921      	ldr	r1, [r4, #16]
   114e4:	6803      	ldr	r3, [r0, #0]
   114e6:	3106      	adds	r1, #6
   114e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   114ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   114ec:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
   114ee:	2800      	cmp	r0, #0
   114f0:	d0c3      	beq.n	1147a <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
   114f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   114f6:	2100      	movs	r1, #0
   114f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   114fa:	f010 ff01 	bl	22300 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
   114fe:	69e0      	ldr	r0, [r4, #28]
   11500:	4a26      	ldr	r2, [pc, #152]	; (1159c <FatFormatter::makeFat32()+0x1b4>)
   11502:	6803      	ldr	r3, [r0, #0]
   11504:	f8c5 21fc 	str.w	r2, [r5, #508]	; 0x1fc
   11508:	6921      	ldr	r1, [r4, #16]
   1150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1150c:	3102      	adds	r1, #2
   1150e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11510:	4798      	blx	r3
   11512:	2800      	cmp	r0, #0
   11514:	d0b1      	beq.n	1147a <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
   11516:	69e0      	ldr	r0, [r4, #28]
   11518:	6921      	ldr	r1, [r4, #16]
   1151a:	6803      	ldr	r3, [r0, #0]
   1151c:	3108      	adds	r1, #8
   1151e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11522:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
   11524:	2800      	cmp	r0, #0
   11526:	d0a8      	beq.n	1147a <FatFormatter::makeFat32()+0x92>
   11528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
   1152c:	69e0      	ldr	r0, [r4, #28]
   1152e:	4a1c      	ldr	r2, [pc, #112]	; (115a0 <FatFormatter::makeFat32()+0x1b8>)
   11530:	e9c5 337a 	strd	r3, r3, [r5, #488]	; 0x1e8
   11534:	4b1b      	ldr	r3, [pc, #108]	; (115a4 <FatFormatter::makeFat32()+0x1bc>)
   11536:	602a      	str	r2, [r5, #0]
   11538:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
   1153c:	6803      	ldr	r3, [r0, #0]
   1153e:	6921      	ldr	r1, [r4, #16]
   11540:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11544:	3101      	adds	r1, #1
   11546:	4798      	blx	r3
   11548:	2800      	cmp	r0, #0
   1154a:	d096      	beq.n	1147a <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
   1154c:	69e0      	ldr	r0, [r4, #28]
   1154e:	6921      	ldr	r1, [r4, #16]
   11550:	6803      	ldr	r3, [r0, #0]
   11552:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11554:	3107      	adds	r1, #7
   11556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11558:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
   1155a:	2800      	cmp	r0, #0
   1155c:	d08d      	beq.n	1147a <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
   1155e:	68a2      	ldr	r2, [r4, #8]
   11560:	4620      	mov	r0, r4
   11562:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   11566:	2120      	movs	r1, #32
   11568:	eb03 0242 	add.w	r2, r3, r2, lsl #1
}
   1156c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
   11570:	f7ff bdc2 	b.w	110f8 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
   11574:	6a20      	ldr	r0, [r4, #32]
   11576:	2800      	cmp	r0, #0
   11578:	f43f af7f 	beq.w	1147a <FatFormatter::makeFat32()+0x92>
   1157c:	6803      	ldr	r3, [r0, #0]
   1157e:	2213      	movs	r2, #19
   11580:	4909      	ldr	r1, [pc, #36]	; (115a8 <FatFormatter::makeFat32()+0x1c0>)
   11582:	685b      	ldr	r3, [r3, #4]
   11584:	4798      	blx	r3
}
   11586:	2000      	movs	r0, #0
   11588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1158a:	005f      	lsls	r7, r3, #1
   1158c:	e756      	b.n	1143c <FatFormatter::makeFat32()+0x54>
   1158e:	bf00      	nop
   11590:	00fb0400 	.word	0x00fb0400
   11594:	00060001 	.word	0x00060001
   11598:	0012d687 	.word	0x0012d687
   1159c:	aa550000 	.word	0xaa550000
   115a0:	41615252 	.word	0x41615252
   115a4:	61417272 	.word	0x61417272
   115a8:	20003a1c 	.word	0x20003a1c

000115ac <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
   115ac:	b538      	push	{r3, r4, r5, lr}
   115ae:	4604      	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
   115b0:	680d      	ldr	r5, [r1, #0]
  m_dev = dev;
   115b2:	61c1      	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
   115b4:	4608      	mov	r0, r1
  m_secBuf = secBuf;
   115b6:	6262      	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
   115b8:	69ea      	ldr	r2, [r5, #28]
  m_pr = pr;
   115ba:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
   115bc:	4790      	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
   115be:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
   115c2:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
   115c4:	0adb      	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
   115c6:	2b06      	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
   115c8:	6023      	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
   115ca:	d924      	bls.n	11616 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
   115cc:	2b10      	cmp	r3, #16
   115ce:	d813      	bhi.n	115f8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
   115d0:	2302      	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
   115d2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
   115d6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
   115da:	4620      	mov	r0, r4
   115dc:	d22e      	bcs.n	1163c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
   115de:	f7ff fe75 	bl	112cc <FatFormatter::makeFat16()>
   115e2:	4605      	mov	r5, r0
    writeMsg("Format Done\r\n");
   115e4:	6a20      	ldr	r0, [r4, #32]
  if (rtn) {
   115e6:	b305      	cbz	r5, 1162a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
   115e8:	b120      	cbz	r0, 115f4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
   115ea:	6803      	ldr	r3, [r0, #0]
   115ec:	220d      	movs	r2, #13
   115ee:	4919      	ldr	r1, [pc, #100]	; (11654 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
   115f0:	685b      	ldr	r3, [r3, #4]
   115f2:	4798      	blx	r3
}
   115f4:	4628      	mov	r0, r5
   115f6:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
   115f8:	2b20      	cmp	r3, #32
   115fa:	d923      	bls.n	11644 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
   115fc:	2b40      	cmp	r3, #64	; 0x40
   115fe:	d923      	bls.n	11648 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
   11600:	2b80      	cmp	r3, #128	; 0x80
   11602:	d923      	bls.n	1164c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
   11604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11608:	d922      	bls.n	11650 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
   1160a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1160e:	bf8c      	ite	hi
   11610:	2380      	movhi	r3, #128	; 0x80
   11612:	2340      	movls	r3, #64	; 0x40
   11614:	e7dd      	b.n	115d2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
   11616:	6a20      	ldr	r0, [r4, #32]
   11618:	b120      	cbz	r0, 11624 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
   1161a:	6803      	ldr	r3, [r0, #0]
   1161c:	2214      	movs	r2, #20
   1161e:	490e      	ldr	r1, [pc, #56]	; (11658 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
   11620:	685b      	ldr	r3, [r3, #4]
   11622:	4798      	blx	r3
    return false;
   11624:	2500      	movs	r5, #0
}
   11626:	4628      	mov	r0, r5
   11628:	bd38      	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
   1162a:	2800      	cmp	r0, #0
   1162c:	d0fa      	beq.n	11624 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
   1162e:	6803      	ldr	r3, [r0, #0]
   11630:	220f      	movs	r2, #15
   11632:	490a      	ldr	r1, [pc, #40]	; (1165c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
   11634:	685b      	ldr	r3, [r3, #4]
   11636:	4798      	blx	r3
}
   11638:	4628      	mov	r0, r5
   1163a:	bd38      	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
   1163c:	f7ff fed4 	bl	113e8 <FatFormatter::makeFat32()>
   11640:	4605      	mov	r5, r0
   11642:	e7cf      	b.n	115e4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
   11644:	2304      	movs	r3, #4
   11646:	e7c4      	b.n	115d2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
   11648:	2308      	movs	r3, #8
   1164a:	e7c2      	b.n	115d2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
   1164c:	2310      	movs	r3, #16
   1164e:	e7c0      	b.n	115d2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
   11650:	2320      	movs	r3, #32
   11652:	e7be      	b.n	115d2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
   11654:	200039fc 	.word	0x200039fc
   11658:	200039e4 	.word	0x200039e4
   1165c:	20003a0c 	.word	0x20003a0c

00011660 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
   11660:	2a04      	cmp	r2, #4
   11662:	d804      	bhi.n	1166e <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
   11664:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   11668:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
   1166c:	4770      	bx	lr
  } else if (i < 11) {
   1166e:	2a0a      	cmp	r2, #10
   11670:	d803      	bhi.n	1167a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
   11672:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   11676:	8890      	ldrh	r0, [r2, #4]
   11678:	4770      	bx	lr
  } else if (i < 13) {
   1167a:	2a0c      	cmp	r2, #12
   1167c:	d803      	bhi.n	11686 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
   1167e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
   11682:	88c8      	ldrh	r0, [r1, #6]
   11684:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
   11686:	2000      	movs	r0, #0
}
   11688:	4770      	bx	lr
   1168a:	bf00      	nop

0001168c <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
   1168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
   1168e:	7804      	ldrb	r4, [r0, #0]
   11690:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
   11692:	b17c      	cbz	r4, 116b4 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   11694:	f014 0460 	ands.w	r4, r4, #96	; 0x60
   11698:	4617      	mov	r7, r2
   1169a:	d007      	beq.n	116ac <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
   1169c:	2a01      	cmp	r2, #1
   1169e:	d909      	bls.n	116b4 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
   116a0:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
   116a2:	2300      	movs	r3, #0
    return 1;
   116a4:	2001      	movs	r0, #1
    name[0] = '/';
   116a6:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
   116a8:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
   116aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
   116ac:	4621      	mov	r1, r4
   116ae:	f7fe f947 	bl	f940 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   116b2:	b918      	cbnz	r0, 116bc <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
   116b4:	2300      	movs	r3, #0
  return 0;
   116b6:	4618      	mov	r0, r3
  name[0] = '\0';
   116b8:	7033      	strb	r3, [r6, #0]
}
   116ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
   116bc:	4603      	mov	r3, r0
   116be:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
   116c0:	2108      	movs	r1, #8
   116c2:	e011      	b.n	116e8 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
   116c4:	7b02      	ldrb	r2, [r0, #12]
   116c6:	4211      	tst	r1, r2
   116c8:	d003      	beq.n	116d2 <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
   116ca:	f10e 0e20 	add.w	lr, lr, #32
   116ce:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
   116d2:	1c65      	adds	r5, r4, #1
   116d4:	42bd      	cmp	r5, r7
   116d6:	d2ed      	bcs.n	116b4 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
   116d8:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
   116dc:	f806 e004 	strb.w	lr, [r6, r4]
   116e0:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
   116e2:	f1bc 0f0c 	cmp.w	ip, #12
   116e6:	d010      	beq.n	1170a <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
   116e8:	f1bc 0f08 	cmp.w	ip, #8
   116ec:	d011      	beq.n	11712 <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
   116ee:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
   116f2:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
   116f6:	2a19      	cmp	r2, #25
   116f8:	d9e4      	bls.n	116c4 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
   116fa:	f1be 0f20 	cmp.w	lr, #32
   116fe:	d1e8      	bne.n	116d2 <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
   11700:	f10c 0c01 	add.w	ip, ip, #1
   11704:	f1bc 0f0c 	cmp.w	ip, #12
   11708:	d1ee      	bne.n	116e8 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
   1170a:	2300      	movs	r3, #0
   1170c:	4620      	mov	r0, r4
   1170e:	5533      	strb	r3, [r6, r4]
}
   11710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
   11712:	781a      	ldrb	r2, [r3, #0]
   11714:	2a20      	cmp	r2, #32
   11716:	d0f8      	beq.n	1170a <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
   11718:	2110      	movs	r1, #16
      c = '.';
   1171a:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
   1171e:	e7d8      	b.n	116d2 <FatFile::getSFN(char*, unsigned int)+0x46>

00011720 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
   11720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
   11724:	2400      	movs	r4, #0
   11726:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
   11728:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
   1172a:	4689      	mov	r9, r1
   1172c:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
   1172e:	2b00      	cmp	r3, #0
   11730:	d055      	beq.n	117de <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
   11732:	78c3      	ldrb	r3, [r0, #3]
   11734:	4606      	mov	r6, r0
   11736:	2b00      	cmp	r3, #0
   11738:	d058      	beq.n	117ec <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
   1173a:	4601      	mov	r1, r0
   1173c:	a801      	add	r0, sp, #4
   1173e:	4690      	mov	r8, r2
   11740:	f7fe fb1e 	bl	fd80 <FatFile::openCluster(FatFile*)>
   11744:	2800      	cmp	r0, #0
   11746:	d04a      	beq.n	117de <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   11748:	78f0      	ldrb	r0, [r6, #3]
   1174a:	2800      	cmp	r0, #0
   1174c:	d043      	beq.n	117d6 <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
   1174e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  char* str = name;
   11752:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   11754:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
   11758:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
   1175a:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   1175c:	a801      	add	r0, sp, #4
   1175e:	eba1 010a 	sub.w	r1, r1, sl
   11762:	b289      	uxth	r1, r1
   11764:	0149      	lsls	r1, r1, #5
   11766:	f7fe fd9f 	bl	102a8 <FatFile::seekSet(unsigned long)>
   1176a:	b3c0      	cbz	r0, 117de <FatFile::getName8(char*, unsigned int)+0xbe>
   1176c:	2100      	movs	r1, #0
   1176e:	a801      	add	r0, sp, #4
   11770:	f7fe fc3a 	bl	ffe8 <FatFile::readDirCache(bool)>
    if (!ldir) {
   11774:	b398      	cbz	r0, 117de <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   11776:	7ac3      	ldrb	r3, [r0, #11]
   11778:	2b0f      	cmp	r3, #15
   1177a:	d130      	bne.n	117de <FatFile::getName8(char*, unsigned int)+0xbe>
   1177c:	7803      	ldrb	r3, [r0, #0]
   1177e:	fa5f f18a 	uxtb.w	r1, sl
   11782:	f003 031f 	and.w	r3, r3, #31
   11786:	428b      	cmp	r3, r1
   11788:	d129      	bne.n	117de <FatFile::getName8(char*, unsigned int)+0xbe>
   1178a:	1c47      	adds	r7, r0, #1
   1178c:	2500      	movs	r5, #0
  if (i < 5) {
   1178e:	2d04      	cmp	r5, #4
   11790:	b2eb      	uxtb	r3, r5
   11792:	d83f      	bhi.n	11814 <FatFile::getName8(char*, unsigned int)+0xf4>
   11794:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
   11796:	bb74      	cbnz	r4, 117f6 <FatFile::getName8(char*, unsigned int)+0xd6>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
   11798:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
   1179c:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
   1179e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   117a2:	d33e      	bcc.n	11822 <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
   117a4:	b1a3      	cbz	r3, 117d0 <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
   117a6:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
   117a8:	4659      	mov	r1, fp
   117aa:	4642      	mov	r2, r8
   117ac:	f002 ff16 	bl	145dc <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
   117b0:	4683      	mov	fp, r0
   117b2:	b1a0      	cbz	r0, 117de <FatFile::getName8(char*, unsigned int)+0xbe>
   117b4:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
   117b6:	3501      	adds	r5, #1
   117b8:	3702      	adds	r7, #2
   117ba:	2d0d      	cmp	r5, #13
   117bc:	d1e7      	bne.n	1178e <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   117be:	f10a 0a01 	add.w	sl, sl, #1
   117c2:	78f1      	ldrb	r1, [r6, #3]
   117c4:	fa5f f38a 	uxtb.w	r3, sl
   117c8:	fa1f fa8a 	uxth.w	sl, sl
   117cc:	4299      	cmp	r1, r3
   117ce:	d2c4      	bcs.n	1175a <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
   117d0:	ebab 0009 	sub.w	r0, fp, r9
   117d4:	46d9      	mov	r9, fp
  *str = '\0';
   117d6:	2300      	movs	r3, #0
   117d8:	f889 3000 	strb.w	r3, [r9]
  return str - name;
   117dc:	e003      	b.n	117e6 <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
   117de:	2300      	movs	r3, #0
  return 0;
   117e0:	4618      	mov	r0, r3
  *name = 0;
   117e2:	f889 3000 	strb.w	r3, [r9]
}
   117e6:	b00b      	add	sp, #44	; 0x2c
   117e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
   117ec:	f7ff ff4e 	bl	1168c <FatFile::getSFN(char*, unsigned int)>
}
   117f0:	b00b      	add	sp, #44	; 0x2c
   117f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
   117f6:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
   117fa:	b289      	uxth	r1, r1
   117fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   11800:	d2ed      	bcs.n	117de <FatFile::getName8(char*, unsigned int)+0xbe>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
   11802:	4a0a      	ldr	r2, [pc, #40]	; (1182c <FatFile::getName8(char*, unsigned int)+0x10c>)
   11804:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11808:	ea02 2084 	and.w	r0, r2, r4, lsl #10
   1180c:	4318      	orrs	r0, r3
   1180e:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
   11812:	e7c9      	b.n	117a8 <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
   11814:	2b0a      	cmp	r3, #10
   11816:	bf94      	ite	ls
   11818:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
   1181c:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
   11820:	e7b9      	b.n	11796 <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
   11822:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   11826:	d2da      	bcs.n	117de <FatFile::getName8(char*, unsigned int)+0xbe>
   11828:	461c      	mov	r4, r3
   1182a:	e7c4      	b.n	117b6 <FatFile::getName8(char*, unsigned int)+0x96>
   1182c:	000ffc00 	.word	0x000ffc00

00011830 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
   11830:	f7ff bf76 	b.w	11720 <FatFile::getName8(char*, unsigned int)>

00011834 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
   11834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11838:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
   1183c:	b1c3      	cbz	r3, 11870 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
   1183e:	4681      	mov	r9, r0
   11840:	460c      	mov	r4, r1
   11842:	4615      	mov	r5, r2
   11844:	185e      	adds	r6, r3, r1
   11846:	e002      	b.n	1184e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
   11848:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
   1184a:	42b4      	cmp	r4, r6
   1184c:	d010      	beq.n	11870 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
   1184e:	f8d9 3000 	ldr.w	r3, [r9]
   11852:	4621      	mov	r1, r4
   11854:	462a      	mov	r2, r5
   11856:	4648      	mov	r0, r9
   11858:	691b      	ldr	r3, [r3, #16]
   1185a:	4798      	blx	r3
   1185c:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
   1185e:	463a      	mov	r2, r7
   11860:	4620      	mov	r0, r4
   11862:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
   11864:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
   11866:	2b00      	cmp	r3, #0
   11868:	d1ee      	bne.n	11848 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
   1186a:	4618      	mov	r0, r3
   1186c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
   11870:	2301      	movs	r3, #1
  }
   11872:	4618      	mov	r0, r3
   11874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011878 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   11878:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
   1187a:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
   1187c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   11880:	46a4      	mov	ip, r4
   11882:	bf28      	it	cs
   11884:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
   11888:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
   1188c:	4281      	cmp	r1, r0
   1188e:	d207      	bcs.n	118a0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
   11890:	f831 3b02 	ldrh.w	r3, [r1], #2
   11894:	b913      	cbnz	r3, 1189c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
   11896:	6853      	ldr	r3, [r2, #4]
   11898:	3301      	adds	r3, #1
   1189a:	6053      	str	r3, [r2, #4]
  while (p < e) {
   1189c:	4288      	cmp	r0, r1
   1189e:	d8f7      	bhi.n	11890 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
   118a0:	eba4 040c 	sub.w	r4, r4, ip
   118a4:	6014      	str	r4, [r2, #0]
}
   118a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   118aa:	4770      	bx	lr

000118ac <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
   118ac:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
   118ae:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
   118b0:	2c80      	cmp	r4, #128	; 0x80
   118b2:	46a4      	mov	ip, r4
   118b4:	bf28      	it	cs
   118b6:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
   118ba:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
   118be:	4281      	cmp	r1, r0
   118c0:	d207      	bcs.n	118d2 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
   118c2:	f851 3b04 	ldr.w	r3, [r1], #4
   118c6:	b913      	cbnz	r3, 118ce <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
   118c8:	6853      	ldr	r3, [r2, #4]
   118ca:	3301      	adds	r3, #1
   118cc:	6053      	str	r3, [r2, #4]
  while (p < e) {
   118ce:	4288      	cmp	r0, r1
   118d0:	d8f7      	bhi.n	118c2 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
   118d2:	eba4 040c 	sub.w	r4, r4, ip
   118d6:	6014      	str	r4, [r2, #0]
}
   118d8:	f85d 4b04 	ldr.w	r4, [sp], #4
   118dc:	4770      	bx	lr
   118de:	bf00      	nop

000118e0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
   118e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
   118e4:	79c3      	ldrb	r3, [r0, #7]
   118e6:	4604      	mov	r4, r0
   118e8:	460d      	mov	r5, r1
   118ea:	4617      	mov	r7, r2
  if (fatType() == 32) {
   118ec:	2b20      	cmp	r3, #32
   118ee:	d059      	beq.n	119a4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
   118f0:	2b10      	cmp	r3, #16
   118f2:	d030      	beq.n	11956 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
   118f4:	2b0c      	cmp	r3, #12
   118f6:	d151      	bne.n	1199c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   118f8:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
   118fa:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
   118fe:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
   11900:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
   11904:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11908:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
   1190c:	4648      	mov	r0, r9
   1190e:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11910:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
   11914:	f3c1 2146 	ubfx	r1, r1, #9, #7
   11918:	0952      	lsrs	r2, r2, #5
   1191a:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
   1191e:	0052      	lsls	r2, r2, #1
   11920:	4641      	mov	r1, r8
   11922:	f002 fdbd 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   11926:	2800      	cmp	r0, #0
   11928:	d038      	beq.n	1199c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
   1192a:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
   1192e:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
   11930:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
   11932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11936:	d023      	beq.n	11980 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
   11938:	4418      	add	r0, r3
   1193a:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
   1193c:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
   1193e:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
   11940:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
   11944:	bf4c      	ite	mi
   11946:	091b      	lsrmi	r3, r3, #4
   11948:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
   1194c:	429a      	cmp	r2, r3
   1194e:	d240      	bcs.n	119d2 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
   11950:	2000      	movs	r0, #0
}
   11952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11956:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
   11958:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1195c:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
   1195e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11962:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
   11966:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11968:	fab2 f282 	clz	r2, r2
   1196c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
   1196e:	0052      	lsls	r2, r2, #1
   11970:	f002 fd96 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   11974:	b190      	cbz	r0, 1199c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
   11976:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
   11978:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
   1197c:	5b43      	ldrh	r3, [r0, r5]
   1197e:	e025      	b.n	119cc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11980:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
   11982:	f108 0101 	add.w	r1, r8, #1
   11986:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11988:	f1a2 0202 	sub.w	r2, r2, #2
   1198c:	fab2 f282 	clz	r2, r2
   11990:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
   11992:	0052      	lsls	r2, r2, #1
   11994:	f002 fd84 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
   11998:	2800      	cmp	r0, #0
   1199a:	d1ce      	bne.n	1193a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
   1199c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   119a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   119a4:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
   119a6:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
   119a8:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   119ac:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
   119b0:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   119b4:	fab2 f282 	clz	r2, r2
   119b8:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
   119ba:	0052      	lsls	r2, r2, #1
   119bc:	f002 fd70 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   119c0:	2800      	cmp	r0, #0
   119c2:	d0eb      	beq.n	1199c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
   119c4:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
   119c6:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
   119ca:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
   119cc:	69e2      	ldr	r2, [r4, #28]
   119ce:	429a      	cmp	r2, r3
   119d0:	d3be      	bcc.n	11950 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
   119d2:	2001      	movs	r0, #1
  *value = next;
   119d4:	603b      	str	r3, [r7, #0]
}
   119d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   119da:	bf00      	nop

000119dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
   119dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
   119e0:	79c3      	ldrb	r3, [r0, #7]
   119e2:	4605      	mov	r5, r0
   119e4:	460c      	mov	r4, r1
   119e6:	4616      	mov	r6, r2
  if (fatType() == 32) {
   119e8:	2b20      	cmp	r3, #32
   119ea:	d048      	beq.n	11a7e <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
   119ec:	2b10      	cmp	r3, #16
   119ee:	d02d      	beq.n	11a4c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
   119f0:	2b0c      	cmp	r3, #12
   119f2:	d141      	bne.n	11a78 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
   119f4:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
   119f8:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
   119fa:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
   119fe:	fa11 f184 	uxtah	r1, r1, r4
   11a02:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
   11a06:	f3c1 2146 	ubfx	r1, r1, #9, #7
   11a0a:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11a0c:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
   11a0e:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11a10:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
   11a12:	4639      	mov	r1, r7
   11a14:	bf14      	ite	ne
   11a16:	2201      	movne	r2, #1
   11a18:	2203      	moveq	r2, #3
   11a1a:	f002 fd41 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   11a1e:	b358      	cbz	r0, 11a78 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
   11a20:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
   11a24:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
   11a28:	d03f      	beq.n	11aaa <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
   11a2a:	5cc2      	ldrb	r2, [r0, r3]
   11a2c:	f002 020f 	and.w	r2, r2, #15
   11a30:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
   11a34:	54c2      	strb	r2, [r0, r3]
    index++;
   11a36:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
   11a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11a3c:	d03a      	beq.n	11ab4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
   11a3e:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
   11a42:	4403      	add	r3, r0
    return true;
   11a44:	2001      	movs	r0, #1
    pc[index] = tmp;
   11a46:	701a      	strb	r2, [r3, #0]
}
   11a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11a4c:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
   11a4e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   11a52:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
   11a54:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11a58:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
   11a5a:	4419      	add	r1, r3
   11a5c:	bf14      	ite	ne
   11a5e:	2201      	movne	r2, #1
   11a60:	2203      	moveq	r2, #3
   11a62:	f002 fd1d 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   11a66:	4603      	mov	r3, r0
   11a68:	b130      	cbz	r0, 11a78 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
   11a6a:	0064      	lsls	r4, r4, #1
    return true;
   11a6c:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
   11a6e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   11a72:	531e      	strh	r6, [r3, r4]
}
   11a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
   11a78:	2000      	movs	r0, #0
}
   11a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11a7e:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
   11a80:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
   11a82:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11a86:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
   11a88:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   11a8c:	bf14      	ite	ne
   11a8e:	2201      	movne	r2, #1
   11a90:	2203      	moveq	r2, #3
   11a92:	f002 fd05 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   11a96:	4603      	mov	r3, r0
   11a98:	2800      	cmp	r0, #0
   11a9a:	d0ed      	beq.n	11a78 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
   11a9c:	00a4      	lsls	r4, r4, #2
    return true;
   11a9e:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
   11aa0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
   11aa4:	511e      	str	r6, [r3, r4]
}
   11aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
   11aaa:	54c6      	strb	r6, [r0, r3]
    index++;
   11aac:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
   11aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11ab2:	d115      	bne.n	11ae0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11ab4:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
   11ab6:	1c79      	adds	r1, r7, #1
   11ab8:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11aba:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
   11abc:	bf14      	ite	ne
   11abe:	2201      	movne	r2, #1
   11ac0:	2203      	moveq	r2, #3
   11ac2:	f002 fced 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
   11ac6:	4603      	mov	r3, r0
   11ac8:	2800      	cmp	r0, #0
   11aca:	d0d5      	beq.n	11a78 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
   11acc:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
   11ad0:	2c00      	cmp	r4, #0
   11ad2:	d1b7      	bne.n	11a44 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
   11ad4:	7819      	ldrb	r1, [r3, #0]
   11ad6:	f021 010f 	bic.w	r1, r1, #15
   11ada:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
   11ade:	e7b1      	b.n	11a44 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
   11ae0:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
   11ae4:	4403      	add	r3, r0
   11ae6:	e7f5      	b.n	11ad4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

00011ae8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
   11ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   11aec:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
   11aee:	b082      	sub	sp, #8
   11af0:	4605      	mov	r5, r0
   11af2:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
   11af4:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
   11af6:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   11af8:	d340      	bcc.n	11b7c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
   11afa:	2701      	movs	r7, #1
    find++;
   11afc:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   11afe:	69eb      	ldr	r3, [r5, #28]
   11b00:	aa01      	add	r2, sp, #4
   11b02:	4628      	mov	r0, r5
   11b04:	42a3      	cmp	r3, r4
   11b06:	d205      	bcs.n	11b14 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
   11b08:	bb9f      	cbnz	r7, 11b72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
   11b0a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   11b0c:	2701      	movs	r7, #1
    find++;
   11b0e:	443c      	add	r4, r7
    if (find > m_lastCluster) {
   11b10:	42a3      	cmp	r3, r4
   11b12:	d32e      	bcc.n	11b72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
   11b14:	42a6      	cmp	r6, r4
   11b16:	bf18      	it	ne
   11b18:	2c01      	cmpne	r4, #1
   11b1a:	4621      	mov	r1, r4
   11b1c:	d929      	bls.n	11b72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
   11b1e:	f7ff fedf 	bl	118e0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
   11b22:	2800      	cmp	r0, #0
   11b24:	db25      	blt.n	11b72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
   11b26:	d0e9      	beq.n	11afc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
   11b28:	9b01      	ldr	r3, [sp, #4]
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	d1e6      	bne.n	11afc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
   11b2e:	b107      	cbz	r7, 11b32 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
   11b30:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
   11b32:	69eb      	ldr	r3, [r5, #28]
   11b34:	42a3      	cmp	r3, r4
   11b36:	d31c      	bcc.n	11b72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
   11b38:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   11b3c:	4621      	mov	r1, r4
   11b3e:	4628      	mov	r0, r5
   11b40:	f7ff ff4c 	bl	119dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
   11b44:	4607      	mov	r7, r0
   11b46:	b1a0      	cbz	r0, 11b72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
   11b48:	b93e      	cbnz	r6, 11b5a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
   11b4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11b4c:	2b00      	cmp	r3, #0
   11b4e:	db01      	blt.n	11b54 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
   11b50:	3b01      	subs	r3, #1
   11b52:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
   11b54:	f8c8 4000 	str.w	r4, [r8]
  return true;
   11b58:	e00c      	b.n	11b74 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
   11b5a:	2e01      	cmp	r6, #1
   11b5c:	d009      	beq.n	11b72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
   11b5e:	69eb      	ldr	r3, [r5, #28]
   11b60:	429e      	cmp	r6, r3
   11b62:	d806      	bhi.n	11b72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
   11b64:	4631      	mov	r1, r6
   11b66:	4622      	mov	r2, r4
   11b68:	4628      	mov	r0, r5
   11b6a:	f7ff ff37 	bl	119dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
   11b6e:	2800      	cmp	r0, #0
   11b70:	d1eb      	bne.n	11b4a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
   11b72:	2700      	movs	r7, #0
}
   11b74:	4638      	mov	r0, r7
   11b76:	b002      	add	sp, #8
   11b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b7c:	460c      	mov	r4, r1
    setStart = false;
   11b7e:	2700      	movs	r7, #0
   11b80:	e7bc      	b.n	11afc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
   11b82:	bf00      	nop

00011b84 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
   11b84:	2901      	cmp	r1, #1
   11b86:	d90c      	bls.n	11ba2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
   11b88:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
   11b8a:	69c4      	ldr	r4, [r0, #28]
   11b8c:	428c      	cmp	r4, r1
   11b8e:	d303      	bcc.n	11b98 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
   11b90:	f85d 4b04 	ldr.w	r4, [sp], #4
   11b94:	f7ff bea4 	b.w	118e0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
   11b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
   11ba0:	4770      	bx	lr
   11ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11ba6:	4770      	bx	lr

00011ba8 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
   11ba8:	2901      	cmp	r1, #1
   11baa:	d90b      	bls.n	11bc4 <FatPartition::fatPut(unsigned long, unsigned long)+0x1c>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
   11bac:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
   11bae:	69c4      	ldr	r4, [r0, #28]
   11bb0:	428c      	cmp	r4, r1
   11bb2:	d303      	bcc.n	11bbc <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
}
   11bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
   11bb8:	f7ff bf10 	b.w	119dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
   11bbc:	2000      	movs	r0, #0
   11bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
   11bc2:	4770      	bx	lr
   11bc4:	2000      	movs	r0, #0
   11bc6:	4770      	bx	lr

00011bc8 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
   11bc8:	b570      	push	{r4, r5, r6, lr}
   11bca:	4605      	mov	r5, r0
   11bcc:	b082      	sub	sp, #8
   11bce:	460c      	mov	r4, r1
   11bd0:	e01d      	b.n	11c0e <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
   11bd2:	69eb      	ldr	r3, [r5, #28]
   11bd4:	429c      	cmp	r4, r3
   11bd6:	d81f      	bhi.n	11c18 <FatPartition::freeChain(unsigned long)+0x50>
   11bd8:	f7ff fe82 	bl	118e0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
   11bdc:	4606      	mov	r6, r0
    if (fg < 0) {
   11bde:	4621      	mov	r1, r4
   11be0:	2200      	movs	r2, #0
   11be2:	2e00      	cmp	r6, #0
   11be4:	4628      	mov	r0, r5
   11be6:	db17      	blt.n	11c18 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
   11be8:	69eb      	ldr	r3, [r5, #28]
   11bea:	429c      	cmp	r4, r3
   11bec:	d814      	bhi.n	11c18 <FatPartition::freeChain(unsigned long)+0x50>
   11bee:	f7ff fef5 	bl	119dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
   11bf2:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
   11bf4:	b180      	cbz	r0, 11c18 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
   11bf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11bf8:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
   11bfa:	f103 0301 	add.w	r3, r3, #1
   11bfe:	bfa8      	it	ge
   11c00:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
   11c02:	68eb      	ldr	r3, [r5, #12]
   11c04:	42a3      	cmp	r3, r4
    cluster = next;
   11c06:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
   11c08:	bf88      	it	hi
   11c0a:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
   11c0c:	b12e      	cbz	r6, 11c1a <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
   11c0e:	2c01      	cmp	r4, #1
   11c10:	4621      	mov	r1, r4
   11c12:	aa01      	add	r2, sp, #4
   11c14:	4628      	mov	r0, r5
   11c16:	d8dc      	bhi.n	11bd2 <FatPartition::freeChain(unsigned long)+0xa>
  return false;
   11c18:	2000      	movs	r0, #0
}
   11c1a:	b002      	add	sp, #8
   11c1c:	bd70      	pop	{r4, r5, r6, pc}
   11c1e:	bf00      	nop

00011c20 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
   11c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c24:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
   11c26:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
   11c28:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
   11c2a:	2800      	cmp	r0, #0
   11c2c:	da1b      	bge.n	11c66 <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
   11c2e:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
   11c30:	2a0c      	cmp	r2, #12
   11c32:	d11b      	bne.n	11c6c <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
   11c34:	69f7      	ldr	r7, [r6, #28]
   11c36:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
   11c38:	2b02      	cmp	r3, #2
   11c3a:	f240 80cd 	bls.w	11dd8 <FatPartition::freeClusterCount()+0x1b8>
   11c3e:	2402      	movs	r4, #2
    uint32_t free = 0;
   11c40:	2500      	movs	r5, #0
   11c42:	4621      	mov	r1, r4
   11c44:	aa02      	add	r2, sp, #8
   11c46:	4630      	mov	r0, r6
   11c48:	f7ff fe4a 	bl	118e0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
   11c4c:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
   11c4e:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
   11c52:	db06      	blt.n	11c62 <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
   11c54:	d157      	bne.n	11d06 <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
   11c56:	42a7      	cmp	r7, r4
   11c58:	461c      	mov	r4, r3
   11c5a:	d05c      	beq.n	11d16 <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
   11c5c:	69f2      	ldr	r2, [r6, #28]
   11c5e:	4293      	cmp	r3, r2
   11c60:	d9ef      	bls.n	11c42 <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
   11c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
   11c66:	b004      	add	sp, #16
   11c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
   11c6c:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
   11c6e:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
   11c70:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
   11c74:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
   11c76:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
   11c78:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
   11c7a:	e9cd 1002 	strd	r1, r0, [sp, #8]
   11c7e:	f100 8085 	bmi.w	11d8c <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
   11c82:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
   11c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (fatType() == FAT_TYPE_FAT32) {
   11c88:	2a20      	cmp	r2, #32
    return m_buffer;
   11c8a:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
   11c8e:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
   11c92:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
   11c96:	d042      	beq.n	11d1e <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
   11c98:	f8d6 8000 	ldr.w	r8, [r6]
   11c9c:	4b4f      	ldr	r3, [pc, #316]	; (11ddc <FatPartition::freeClusterCount()+0x1bc>)
   11c9e:	f8d8 2000 	ldr.w	r2, [r8]
   11ca2:	f8d6 a018 	ldr.w	sl, [r6, #24]
   11ca6:	6995      	ldr	r5, [r2, #24]
   11ca8:	429d      	cmp	r5, r3
   11caa:	d178      	bne.n	11d9e <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
   11cac:	2c00      	cmp	r4, #0
   11cae:	f000 8082 	beq.w	11db6 <FatPartition::freeClusterCount()+0x196>
   11cb2:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
   11cb6:	6913      	ldr	r3, [r2, #16]
   11cb8:	4651      	mov	r1, sl
   11cba:	463a      	mov	r2, r7
   11cbc:	4640      	mov	r0, r8
   11cbe:	4798      	blx	r3
   11cc0:	2800      	cmp	r0, #0
   11cc2:	d0ce      	beq.n	11c62 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
   11cc4:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
   11cc6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   11cca:	468e      	mov	lr, r1
   11ccc:	bf28      	it	cs
   11cce:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
   11cd2:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
   11cd6:	45bc      	cmp	ip, r7
   11cd8:	d90b      	bls.n	11cf2 <FatPartition::freeClusterCount()+0xd2>
   11cda:	9d03      	ldr	r5, [sp, #12]
   11cdc:	463b      	mov	r3, r7
   11cde:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
   11ce0:	f833 4b02 	ldrh.w	r4, [r3], #2
   11ce4:	b90c      	cbnz	r4, 11cea <FatPartition::freeClusterCount()+0xca>
   11ce6:	3501      	adds	r5, #1
   11ce8:	4602      	mov	r2, r0
  while (p < e) {
   11cea:	459c      	cmp	ip, r3
   11cec:	d8f8      	bhi.n	11ce0 <FatPartition::freeClusterCount()+0xc0>
   11cee:	b102      	cbz	r2, 11cf2 <FatPartition::freeClusterCount()+0xd2>
   11cf0:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
   11cf2:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
   11cf6:	eba1 010e 	sub.w	r1, r1, lr
   11cfa:	45d1      	cmp	r9, sl
   11cfc:	9102      	str	r1, [sp, #8]
   11cfe:	d05a      	beq.n	11db6 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
   11d00:	f8d8 2000 	ldr.w	r2, [r8]
   11d04:	e7d7      	b.n	11cb6 <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
   11d06:	9a02      	ldr	r2, [sp, #8]
   11d08:	2a00      	cmp	r2, #0
   11d0a:	d1a4      	bne.n	11c56 <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
   11d0c:	42a7      	cmp	r7, r4
        free++;
   11d0e:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
   11d12:	461c      	mov	r4, r3
   11d14:	d1a2      	bne.n	11c5c <FatPartition::freeClusterCount()+0x3c>
    return free;
   11d16:	4628      	mov	r0, r5
}
   11d18:	b004      	add	sp, #16
   11d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
   11d1e:	f8d6 a000 	ldr.w	sl, [r6]
   11d22:	4b2e      	ldr	r3, [pc, #184]	; (11ddc <FatPartition::freeClusterCount()+0x1bc>)
   11d24:	f8da 2000 	ldr.w	r2, [sl]
   11d28:	f8d6 9018 	ldr.w	r9, [r6, #24]
   11d2c:	6995      	ldr	r5, [r2, #24]
   11d2e:	429d      	cmp	r5, r3
   11d30:	d146      	bne.n	11dc0 <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
   11d32:	2c00      	cmp	r4, #0
   11d34:	d03f      	beq.n	11db6 <FatPartition::freeClusterCount()+0x196>
   11d36:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
   11d3a:	6913      	ldr	r3, [r2, #16]
   11d3c:	4649      	mov	r1, r9
   11d3e:	463a      	mov	r2, r7
   11d40:	4650      	mov	r0, sl
   11d42:	4798      	blx	r3
   11d44:	2800      	cmp	r0, #0
   11d46:	d08c      	beq.n	11c62 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
   11d48:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
   11d4c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   11d50:	46e6      	mov	lr, ip
   11d52:	bf28      	it	cs
   11d54:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
   11d58:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
   11d5c:	42ba      	cmp	r2, r7
   11d5e:	d90b      	bls.n	11d78 <FatPartition::freeClusterCount()+0x158>
   11d60:	9d03      	ldr	r5, [sp, #12]
   11d62:	463b      	mov	r3, r7
   11d64:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
   11d66:	f853 4b04 	ldr.w	r4, [r3], #4
   11d6a:	b90c      	cbnz	r4, 11d70 <FatPartition::freeClusterCount()+0x150>
   11d6c:	3501      	adds	r5, #1
   11d6e:	4601      	mov	r1, r0
  while (p < e) {
   11d70:	429a      	cmp	r2, r3
   11d72:	d8f8      	bhi.n	11d66 <FatPartition::freeClusterCount()+0x146>
   11d74:	b101      	cbz	r1, 11d78 <FatPartition::freeClusterCount()+0x158>
   11d76:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
   11d78:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
   11d7c:	ebac 030e 	sub.w	r3, ip, lr
   11d80:	45c8      	cmp	r8, r9
   11d82:	9302      	str	r3, [sp, #8]
   11d84:	d017      	beq.n	11db6 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
   11d86:	f8da 2000 	ldr.w	r2, [sl]
   11d8a:	e7d6      	b.n	11d3a <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
   11d8c:	f506 700e 	add.w	r0, r6, #568	; 0x238
   11d90:	f002 fb5a 	bl	14448 <FsCache::sync()>
   11d94:	2800      	cmp	r0, #0
   11d96:	f43f af64 	beq.w	11c62 <FatPartition::freeClusterCount()+0x42>
   11d9a:	79f2      	ldrb	r2, [r6, #7]
   11d9c:	e771      	b.n	11c82 <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
   11d9e:	4623      	mov	r3, r4
   11da0:	ac02      	add	r4, sp, #8
   11da2:	463a      	mov	r2, r7
   11da4:	4651      	mov	r1, sl
   11da6:	9401      	str	r4, [sp, #4]
   11da8:	4640      	mov	r0, r8
   11daa:	4c0d      	ldr	r4, [pc, #52]	; (11de0 <FatPartition::freeClusterCount()+0x1c0>)
   11dac:	9400      	str	r4, [sp, #0]
   11dae:	47a8      	blx	r5
   11db0:	2800      	cmp	r0, #0
   11db2:	f43f af56 	beq.w	11c62 <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
   11db6:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
   11db8:	6270      	str	r0, [r6, #36]	; 0x24
}
   11dba:	b004      	add	sp, #16
   11dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
   11dc0:	4623      	mov	r3, r4
   11dc2:	ac02      	add	r4, sp, #8
   11dc4:	463a      	mov	r2, r7
   11dc6:	4649      	mov	r1, r9
   11dc8:	9401      	str	r4, [sp, #4]
   11dca:	4650      	mov	r0, sl
   11dcc:	4c05      	ldr	r4, [pc, #20]	; (11de4 <FatPartition::freeClusterCount()+0x1c4>)
   11dce:	9400      	str	r4, [sp, #0]
   11dd0:	47a8      	blx	r5
   11dd2:	2800      	cmp	r0, #0
   11dd4:	d1ef      	bne.n	11db6 <FatPartition::freeClusterCount()+0x196>
   11dd6:	e744      	b.n	11c62 <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
   11dd8:	2000      	movs	r0, #0
   11dda:	e744      	b.n	11c66 <FatPartition::freeClusterCount()+0x46>
   11ddc:	00011835 	.word	0x00011835
   11de0:	00011879 	.word	0x00011879
   11de4:	000118ad 	.word	0x000118ad

00011de8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
   11de8:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
   11dea:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
   11dec:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   11dee:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
   11df0:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
   11df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  m_cache.init(dev);
   11df6:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
   11dfa:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
   11dfc:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
   11dfe:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
   11e00:	62e1      	str	r1, [r4, #44]	; 0x2c
   11e02:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
   11e06:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   11e0a:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
   11e0e:	6362      	str	r2, [r4, #52]	; 0x34
   11e10:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
   11e14:	b1cd      	cbz	r5, 11e4a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
   11e16:	2d04      	cmp	r5, #4
   11e18:	d901      	bls.n	11e1e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
   11e1a:	2000      	movs	r0, #0
}
   11e1c:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
   11e1e:	461a      	mov	r2, r3
   11e20:	4619      	mov	r1, r3
   11e22:	4630      	mov	r0, r6
   11e24:	f002 fb3c 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
   11e28:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
   11e2c:	f500 72df 	add.w	r2, r0, #446	; 0x1be
   11e30:	442b      	add	r3, r5
   11e32:	011d      	lsls	r5, r3, #4
   11e34:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
   11e38:	2800      	cmp	r0, #0
   11e3a:	d0ee      	beq.n	11e1a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
   11e3c:	7919      	ldrb	r1, [r3, #4]
   11e3e:	2900      	cmp	r1, #0
   11e40:	d0eb      	beq.n	11e1a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
   11e42:	5d52      	ldrb	r2, [r2, r5]
   11e44:	0652      	lsls	r2, r2, #25
   11e46:	d1e8      	bne.n	11e1a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
   11e48:	689d      	ldr	r5, [r3, #8]
   11e4a:	2200      	movs	r2, #0
   11e4c:	4629      	mov	r1, r5
   11e4e:	4630      	mov	r0, r6
   11e50:	f002 fb26 	bl	144a0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
   11e54:	2800      	cmp	r0, #0
   11e56:	d0e0      	beq.n	11e1a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
   11e58:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   11e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11e60:	d1db      	bne.n	11e1a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
   11e62:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
   11e64:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
   11e66:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
   11e68:	2a01      	cmp	r2, #1
   11e6a:	d8d6      	bhi.n	11e1a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
   11e6c:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
   11e6e:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   11e70:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
   11e72:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
   11e74:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
   11e76:	f04f 0300 	mov.w	r3, #0
   11e7a:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   11e7c:	d044      	beq.n	11f08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
   11e7e:	2201      	movs	r2, #1
   11e80:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
   11e82:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   11e84:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
   11e86:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   11e88:	4291      	cmp	r1, r2
   11e8a:	d004      	beq.n	11e96 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
   11e8c:	2b08      	cmp	r3, #8
   11e8e:	d1f7      	bne.n	11e80 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
   11e90:	2000      	movs	r0, #0
   11e92:	71a3      	strb	r3, [r4, #6]
}
   11e94:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
   11e96:	461e      	mov	r6, r3
   11e98:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
   11e9a:	8ac1      	ldrh	r1, [r0, #22]
   11e9c:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
   11e9e:	b909      	cbnz	r1, 11ea4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
   11ea0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
   11ea2:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
   11ea4:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
   11ea6:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   11eaa:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
   11eac:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
   11eae:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
   11eb0:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
   11eb2:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
   11eb6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
   11eba:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
   11ebe:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
   11ec2:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
   11ec4:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
   11ec8:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
   11eca:	b902      	cbnz	r2, 11ece <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
   11ecc:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
   11ece:	1aed      	subs	r5, r5, r3
   11ed0:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
   11ed2:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
   11ed4:	1c5a      	adds	r2, r3, #1
   11ed6:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
   11ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11edc:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
   11ede:	f640 72f4 	movw	r2, #4084	; 0xff4
   11ee2:	4293      	cmp	r3, r2
   11ee4:	d90c      	bls.n	11f00 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
   11ee6:	f64f 72f4 	movw	r2, #65524	; 0xfff4
   11eea:	4293      	cmp	r3, r2
   11eec:	d90a      	bls.n	11f04 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
   11eee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
   11ef0:	2320      	movs	r3, #32
   11ef2:	6222      	str	r2, [r4, #32]
  return true;
   11ef4:	2001      	movs	r0, #1
    m_fatType = 12;
   11ef6:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
   11ef8:	6321      	str	r1, [r4, #48]	; 0x30
   11efa:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
   11efe:	bd70      	pop	{r4, r5, r6, pc}
   11f00:	230c      	movs	r3, #12
   11f02:	e7f7      	b.n	11ef4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
   11f04:	2310      	movs	r3, #16
   11f06:	e7f5      	b.n	11ef4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   11f08:	461e      	mov	r6, r3
   11f0a:	e7c6      	b.n	11e9a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

00011f0c <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
   11f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f0e:	2600      	movs	r6, #0
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
   11f10:	6b8f      	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
   11f12:	460d      	mov	r5, r1
   11f14:	4604      	mov	r4, r0
   11f16:	e9c0 660e 	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
   11f1a:	b19f      	cbz	r7, 11f44 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
   11f1c:	4601      	mov	r1, r0
   11f1e:	2024      	movs	r0, #36	; 0x24
   11f20:	f000 f8dc 	bl	120dc <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
   11f24:	8006      	strh	r6, [r0, #0]
   11f26:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
   11f28:	4684      	mov	ip, r0
   11f2a:	6bad      	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
   11f2c:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
   11f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11f30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   11f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11f36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   11f3a:	682b      	ldr	r3, [r5, #0]
   11f3c:	f8cc 3000 	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
   11f40:	4620      	mov	r0, r4
   11f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
   11f44:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   11f46:	2b00      	cmp	r3, #0
   11f48:	d0fa      	beq.n	11f40 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
   11f4a:	4601      	mov	r1, r0
   11f4c:	2038      	movs	r0, #56	; 0x38
   11f4e:	f000 f8c5 	bl	120dc <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
   11f52:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
   11f56:	8647      	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
   11f58:	4602      	mov	r2, r0
   11f5a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
   11f5c:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
   11f5e:	f103 0730 	add.w	r7, r3, #48	; 0x30
   11f62:	681e      	ldr	r6, [r3, #0]
   11f64:	3310      	adds	r3, #16
   11f66:	f853 5c0c 	ldr.w	r5, [r3, #-12]
   11f6a:	3210      	adds	r2, #16
   11f6c:	f853 0c08 	ldr.w	r0, [r3, #-8]
   11f70:	f853 1c04 	ldr.w	r1, [r3, #-4]
   11f74:	42bb      	cmp	r3, r7
   11f76:	f842 6c10 	str.w	r6, [r2, #-16]
   11f7a:	f842 5c0c 	str.w	r5, [r2, #-12]
   11f7e:	f842 0c08 	str.w	r0, [r2, #-8]
   11f82:	f842 1c04 	str.w	r1, [r2, #-4]
   11f86:	d1ec      	bne.n	11f62 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
   11f88:	681b      	ldr	r3, [r3, #0]
}
   11f8a:	4620      	mov	r0, r4
    *m_xFile = *from.m_xFile;
   11f8c:	6013      	str	r3, [r2, #0]
}
   11f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011f90 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
   11f90:	b510      	push	{r4, lr}
   11f92:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
   11f94:	6b80      	ldr	r0, [r0, #56]	; 0x38
   11f96:	b110      	cbz	r0, 11f9e <FsBaseFile::close()+0xe>
   11f98:	f7fd fce2 	bl	f960 <FatFile::close()>
   11f9c:	b930      	cbnz	r0, 11fac <FsBaseFile::close()+0x1c>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
   11f9e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   11fa0:	b110      	cbz	r0, 11fa8 <FsBaseFile::close()+0x18>
   11fa2:	f7fb fbcf 	bl	d744 <ExFatFile::close()>
   11fa6:	b920      	cbnz	r0, 11fb2 <FsBaseFile::close()+0x22>
    m_xFile = nullptr;
    return true;
  }
  return false;
   11fa8:	2000      	movs	r0, #0
}
   11faa:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
   11fac:	2300      	movs	r3, #0
   11fae:	63a3      	str	r3, [r4, #56]	; 0x38
}
   11fb0:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
   11fb2:	2300      	movs	r3, #0
   11fb4:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   11fb6:	bd10      	pop	{r4, pc}

00011fb8 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
   11fb8:	2900      	cmp	r1, #0
   11fba:	d052      	beq.n	12062 <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
   11fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fc0:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
   11fc2:	6b80      	ldr	r0, [r0, #56]	; 0x38
   11fc4:	460d      	mov	r5, r1
   11fc6:	4617      	mov	r7, r2
   11fc8:	461e      	mov	r6, r3
   11fca:	b110      	cbz	r0, 11fd2 <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
   11fcc:	f7fd fcc8 	bl	f960 <FatFile::close()>
   11fd0:	bba0      	cbnz	r0, 1203c <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
   11fd2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   11fd4:	b110      	cbz	r0, 11fdc <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
   11fd6:	f7fb fbb5 	bl	d744 <ExFatFile::close()>
   11fda:	bbb8      	cbnz	r0, 1204c <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
   11fdc:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
   11fe0:	f1b8 0f00 	cmp.w	r8, #0
   11fe4:	d011      	beq.n	1200a <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
   11fe6:	4621      	mov	r1, r4
   11fe8:	2024      	movs	r0, #36	; 0x24
   11fea:	f000 f877 	bl	120dc <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
   11fee:	4633      	mov	r3, r6
   11ff0:	2600      	movs	r6, #0
   11ff2:	463a      	mov	r2, r7
   11ff4:	8006      	strh	r6, [r0, #0]
   11ff6:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
   11ff8:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
   11ffa:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
   11ffe:	f7fd feb7 	bl	fd70 <FatFile::open(FatVolume*, char const*, int)>
   12002:	bb58      	cbnz	r0, 1205c <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
   12004:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
   12006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
   1200a:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
   1200e:	b193      	cbz	r3, 12036 <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
   12010:	4621      	mov	r1, r4
   12012:	2038      	movs	r0, #56	; 0x38
   12014:	f000 f862 	bl	120dc <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
   12018:	4633      	mov	r3, r6
   1201a:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
   1201e:	463a      	mov	r2, r7
   12020:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
   12024:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
   12026:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
   1202a:	f7fb ffbf 	bl	dfac <ExFatFile::open(ExFatVolume*, char const*, int)>
   1202e:	b9a8      	cbnz	r0, 1205c <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
   12030:	63e0      	str	r0, [r4, #60]	; 0x3c
}
   12032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
   12036:	2000      	movs	r0, #0
}
   12038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
   1203c:	2300      	movs	r3, #0
  if (vol->m_fVol) {
   1203e:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
   12042:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
   12044:	f1b8 0f00 	cmp.w	r8, #0
   12048:	d1cd      	bne.n	11fe6 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
   1204a:	e7de      	b.n	1200a <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
   1204c:	2300      	movs	r3, #0
  if (vol->m_fVol) {
   1204e:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
   12052:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
   12054:	f1b8 0f00 	cmp.w	r8, #0
   12058:	d1c5      	bne.n	11fe6 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
   1205a:	e7d6      	b.n	1200a <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
   1205c:	2001      	movs	r0, #1
}
   1205e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
   12062:	2000      	movs	r0, #0
}
   12064:	4770      	bx	lr
   12066:	bf00      	nop

00012068 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
   12068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1206a:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
   1206c:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
   1206e:	460d      	mov	r5, r1
   12070:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
   12072:	b110      	cbz	r0, 1207a <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
   12074:	f7fd fc74 	bl	f960 <FatFile::close()>
   12078:	bb38      	cbnz	r0, 120ca <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
   1207a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1207c:	b110      	cbz	r0, 12084 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
   1207e:	f7fb fb61 	bl	d744 <ExFatFile::close()>
   12082:	bb38      	cbnz	r0, 120d4 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
   12084:	6bae      	ldr	r6, [r5, #56]	; 0x38
   12086:	b176      	cbz	r6, 120a6 <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
   12088:	4621      	mov	r1, r4
   1208a:	2024      	movs	r0, #36	; 0x24
   1208c:	f000 f826 	bl	120dc <operator new(unsigned int, unsigned long*)>
   12090:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
   12092:	463a      	mov	r2, r7
   12094:	8001      	strh	r1, [r0, #0]
   12096:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
   12098:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
   1209a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1209c:	f7fe f9ce 	bl	1043c <FatFile::openNext(FatFile*, int)>
   120a0:	b988      	cbnz	r0, 120c6 <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
   120a2:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
   120a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
   120a6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   120a8:	2800      	cmp	r0, #0
   120aa:	d0fb      	beq.n	120a4 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
   120ac:	4621      	mov	r1, r4
   120ae:	2038      	movs	r0, #56	; 0x38
   120b0:	f000 f814 	bl	120dc <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
   120b4:	463a      	mov	r2, r7
   120b6:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
   120ba:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
   120bc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
   120be:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   120c0:	f7fb ff7c 	bl	dfbc <ExFatFile::openNext(ExFatFile*, int)>
   120c4:	b120      	cbz	r0, 120d0 <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
   120c6:	2001      	movs	r0, #1
}
   120c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
   120ca:	2300      	movs	r3, #0
   120cc:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
   120ce:	e7d9      	b.n	12084 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
   120d0:	63e0      	str	r0, [r4, #60]	; 0x3c
}
   120d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
   120d4:	2300      	movs	r3, #0
   120d6:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
   120d8:	e7d4      	b.n	12084 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
   120da:	bf00      	nop

000120dc <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
   120dc:	4608      	mov	r0, r1
   120de:	4770      	bx	lr

000120e0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
   120e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
   120e4:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
   120e6:	4604      	mov	r4, r0
   120e8:	4698      	mov	r8, r3
  m_blockDev = blockDev;
   120ea:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
   120ee:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
   120f2:	4601      	mov	r1, r0
   120f4:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
   120f8:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
   120fa:	f7ff ffef 	bl	120dc <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
   120fe:	4642      	mov	r2, r8
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
   12100:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
   12104:	4605      	mov	r5, r0
   12106:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
   1210a:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
   1210e:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
   12112:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
   12116:	f7fd fae7 	bl	f6e8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
   1211a:	bba0      	cbnz	r0, 12186 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
   1211c:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
   1211e:	4621      	mov	r1, r4
   12120:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
   12124:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
   12128:	f7ff ffd8 	bl	120dc <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
   1212c:	2302      	movs	r3, #2
   1212e:	71c6      	strb	r6, [r0, #7]
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
   12130:	4642      	mov	r2, r8
   12132:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
   12136:	4605      	mov	r5, r0
   12138:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
   1213c:	7203      	strb	r3, [r0, #8]
   1213e:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
   12142:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
   12146:	f7ff fe4f 	bl	11de8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
   1214a:	b938      	cbnz	r0, 1215c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
   1214c:	2300      	movs	r3, #0
   1214e:	4a1a      	ldr	r2, [pc, #104]	; (121b8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
   12150:	4618      	mov	r0, r3
  m_cwv = nullptr;
   12152:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
   12154:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
   12158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
   1215c:	f505 6689 	add.w	r6, r5, #1096	; 0x448
   12160:	4630      	mov	r0, r6
   12162:	f7fd fbfd 	bl	f960 <FatFile::close()>
    return m_vwd.openRoot(this);
   12166:	4629      	mov	r1, r5
   12168:	4630      	mov	r0, r6
   1216a:	f7fd fe37 	bl	fddc <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
   1216e:	2800      	cmp	r0, #0
   12170:	d0ec      	beq.n	1214c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
   12172:	4b12      	ldr	r3, [pc, #72]	; (121bc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
   12174:	681a      	ldr	r2, [r3, #0]
   12176:	b9aa      	cbnz	r2, 121a4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
   12178:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
   1217a:	4b0f      	ldr	r3, [pc, #60]	; (121b8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
   1217c:	b1af      	cbz	r7, 121aa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
   1217e:	2001      	movs	r0, #1
    m_cwv = this;
   12180:	601c      	str	r4, [r3, #0]
}
   12182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
   12186:	f505 6689 	add.w	r6, r5, #1096	; 0x448
   1218a:	4630      	mov	r0, r6
   1218c:	f7fb fada 	bl	d744 <ExFatFile::close()>
    return m_vwd.openRoot(this);
   12190:	4629      	mov	r1, r5
   12192:	4630      	mov	r0, r6
   12194:	f7fb fb04 	bl	d7a0 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
   12198:	2800      	cmp	r0, #0
   1219a:	d0bf      	beq.n	1211c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
   1219c:	4b08      	ldr	r3, [pc, #32]	; (121c0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
   1219e:	681a      	ldr	r2, [r3, #0]
   121a0:	2a00      	cmp	r2, #0
   121a2:	d0e9      	beq.n	12178 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
   121a4:	4b04      	ldr	r3, [pc, #16]	; (121b8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
   121a6:	2f00      	cmp	r7, #0
   121a8:	d1e9      	bne.n	1217e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
   121aa:	681a      	ldr	r2, [r3, #0]
   121ac:	2a00      	cmp	r2, #0
   121ae:	d0e6      	beq.n	1217e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
   121b0:	2001      	movs	r0, #1
}
   121b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   121b6:	bf00      	nop
   121b8:	2000b03c 	.word	0x2000b03c
   121bc:	2000b040 	.word	0x2000b040
   121c0:	2000ae3c 	.word	0x2000ae3c

000121c4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
   121c4:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
   121c6:	2500      	movs	r5, #0
   121c8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   121cc:	4604      	mov	r4, r0
   121ce:	6045      	str	r5, [r0, #4]
   121d0:	7305      	strb	r5, [r0, #12]
   121d2:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
   121d4:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
   121d8:	4d03      	ldr	r5, [pc, #12]	; (121e8 <FsVolume::open(char const*, int)+0x24>)
   121da:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
   121de:	f7ff feeb 	bl	11fb8 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
   121e2:	4620      	mov	r0, r4
   121e4:	bd70      	pop	{r4, r5, r6, pc}
   121e6:	bf00      	nop
   121e8:	20003df8 	.word	0x20003df8

000121ec <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
   121ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121f0:	4770      	bx	lr
   121f2:	bf00      	nop

000121f4 <SharedSpiCard::errorCode() const>:
  }
   121f4:	7c40      	ldrb	r0, [r0, #17]
   121f6:	4770      	bx	lr

000121f8 <SharedSpiCard::errorData() const>:
  }
   121f8:	7d00      	ldrb	r0, [r0, #20]
   121fa:	4770      	bx	lr

000121fc <SharedSpiCard::type() const>:
  }
   121fc:	7d40      	ldrb	r0, [r0, #21]
   121fe:	4770      	bx	lr

00012200 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
   12200:	2001      	movs	r0, #1
   12202:	4770      	bx	lr

00012204 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
   12204:	7f00      	ldrb	r0, [r0, #28]
   12206:	4770      	bx	lr

00012208 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
   12208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1220c:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   1220e:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
   12210:	4605      	mov	r5, r0
   12212:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   12214:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
   12216:	4691      	mov	r9, r2
   12218:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   1221a:	d028      	beq.n	1226e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
   1221c:	682b      	ldr	r3, [r5, #0]
   1221e:	4621      	mov	r1, r4
   12220:	4628      	mov	r0, r5
   12222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   12224:	4798      	blx	r3
   12226:	b198      	cbz	r0, 12250 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
   12228:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
   1222a:	f1b9 0f00 	cmp.w	r9, #0
   1222e:	d012      	beq.n	12256 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
   12230:	eb04 0809 	add.w	r8, r4, r9
   12234:	e001      	b.n	1223a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
   12236:	45a0      	cmp	r8, r4
   12238:	d00d      	beq.n	12256 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
   1223a:	4639      	mov	r1, r7
   1223c:	4620      	mov	r0, r4
   1223e:	47b0      	blx	r6
    if (!writeData(src)) {
   12240:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
   12242:	4601      	mov	r1, r0
    if (!writeData(src)) {
   12244:	4628      	mov	r0, r5
   12246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
   12248:	3401      	adds	r4, #1
    if (!writeData(src)) {
   1224a:	4798      	blx	r3
   1224c:	2800      	cmp	r0, #0
   1224e:	d1f2      	bne.n	12236 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
   12250:	2000      	movs	r0, #0
}
   12252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
   12256:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
   12258:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
   1225a:	444b      	add	r3, r9
   1225c:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
   1225e:	2800      	cmp	r0, #0
   12260:	d1f7      	bne.n	12252 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
   12262:	682b      	ldr	r3, [r5, #0]
   12264:	4628      	mov	r0, r5
   12266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
   12268:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
   1226c:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   1226e:	6983      	ldr	r3, [r0, #24]
   12270:	428b      	cmp	r3, r1
   12272:	d1d3      	bne.n	1221c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
   12274:	e7d9      	b.n	1222a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
   12276:	bf00      	nop

00012278 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
   12278:	4770      	bx	lr
   1227a:	bf00      	nop

0001227c <SharedSpiCard::end()>:
    m_spiDriver.end();
   1227c:	3004      	adds	r0, #4
   1227e:	f002 b8b5 	b.w	143ec <SdSpiArduinoDriver::end()>
   12282:	bf00      	nop

00012284 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
   12284:	b510      	push	{r4, lr}
   12286:	4604      	mov	r4, r0
   12288:	2120      	movs	r1, #32
   1228a:	f009 fd69 	bl	1bd60 <operator delete(void*, unsigned int)>
   1228e:	4620      	mov	r0, r4
   12290:	bd10      	pop	{r4, pc}
   12292:	bf00      	nop

00012294 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
   12294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12298:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   1229a:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
   1229c:	4605      	mov	r5, r0
   1229e:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   122a0:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
   122a2:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   122a4:	d024      	beq.n	122f0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
   122a6:	682b      	ldr	r3, [r5, #0]
   122a8:	4631      	mov	r1, r6
   122aa:	4628      	mov	r0, r5
   122ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   122ae:	4798      	blx	r3
   122b0:	b178      	cbz	r0, 122d2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
   122b2:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
   122b4:	b187      	cbz	r7, 122d8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
   122b6:	2600      	movs	r6, #0
   122b8:	e001      	b.n	122be <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
   122ba:	42b7      	cmp	r7, r6
   122bc:	d00c      	beq.n	122d8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
   122be:	682a      	ldr	r2, [r5, #0]
   122c0:	4621      	mov	r1, r4
   122c2:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
   122c4:	3601      	adds	r6, #1
    if (!writeData(src)) {
   122c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
   122c8:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
   122cc:	4790      	blx	r2
   122ce:	2800      	cmp	r0, #0
   122d0:	d1f3      	bne.n	122ba <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
   122d2:	2000      	movs	r0, #0
}
   122d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
   122d8:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
   122da:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
   122dc:	443b      	add	r3, r7
   122de:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
   122e0:	2800      	cmp	r0, #0
   122e2:	d1f7      	bne.n	122d4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
   122e4:	682b      	ldr	r3, [r5, #0]
   122e6:	4628      	mov	r0, r5
   122e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
   122ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
   122ee:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   122f0:	6983      	ldr	r3, [r0, #24]
   122f2:	428b      	cmp	r3, r1
   122f4:	d1d7      	bne.n	122a6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
   122f6:	e7dd      	b.n	122b4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

000122f8 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
   122f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122fc:	4e20      	ldr	r6, [pc, #128]	; (12380 <SharedSpiCard::writeStop()+0x88>)
   122fe:	4607      	mov	r7, r0
    return m_spiDriver.receive();
   12300:	f100 0804 	add.w	r8, r0, #4
   12304:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
   12306:	f505 7516 	add.w	r5, r5, #600	; 0x258
   1230a:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
   1230c:	e003      	b.n	12316 <SharedSpiCard::writeStop()+0x1e>
   1230e:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
   12310:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
   12312:	041b      	lsls	r3, r3, #16
   12314:	d410      	bmi.n	12338 <SharedSpiCard::writeStop()+0x40>
   12316:	4640      	mov	r0, r8
   12318:	f002 f86c 	bl	143f4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
   1231c:	28ff      	cmp	r0, #255	; 0xff
   1231e:	4604      	mov	r4, r0
   12320:	d1f5      	bne.n	1230e <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
   12322:	21fd      	movs	r1, #253	; 0xfd
   12324:	4640      	mov	r0, r8
   12326:	f002 f87f 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
   1232a:	7cbb      	ldrb	r3, [r7, #18]
   1232c:	b9cb      	cbnz	r3, 12362 <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
   1232e:	2300      	movs	r3, #0
   12330:	2001      	movs	r0, #1
   12332:	74fb      	strb	r3, [r7, #19]
}
   12334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
   12338:	231e      	movs	r3, #30
  if (m_spiActive) {
   1233a:	7cb8      	ldrb	r0, [r7, #18]
   1233c:	747b      	strb	r3, [r7, #17]
   1233e:	2800      	cmp	r0, #0
   12340:	d0f8      	beq.n	12334 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
   12342:	7c38      	ldrb	r0, [r7, #16]
   12344:	2101      	movs	r1, #1
   12346:	f002 f809 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   1234a:	21ff      	movs	r1, #255	; 0xff
   1234c:	4640      	mov	r0, r8
   1234e:	f002 f86b 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12352:	4640      	mov	r0, r8
   12354:	f002 f822 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12358:	2300      	movs	r3, #0
  return false;
   1235a:	4618      	mov	r0, r3
    m_spiActive = false;
   1235c:	74bb      	strb	r3, [r7, #18]
}
   1235e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
   12362:	2101      	movs	r1, #1
   12364:	7c38      	ldrb	r0, [r7, #16]
   12366:	f001 fff9 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   1236a:	4621      	mov	r1, r4
   1236c:	4640      	mov	r0, r8
   1236e:	f002 f85b 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12372:	4640      	mov	r0, r8
   12374:	f002 f812 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12378:	2300      	movs	r3, #0
   1237a:	74bb      	strb	r3, [r7, #18]
}
   1237c:	e7d7      	b.n	1232e <SharedSpiCard::writeStop()+0x36>
   1237e:	bf00      	nop
   12380:	20013554 	.word	0x20013554

00012384 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
   12384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
   12388:	7cc3      	ldrb	r3, [r0, #19]
   1238a:	2b01      	cmp	r3, #1
   1238c:	d035      	beq.n	123fa <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
   1238e:	7c86      	ldrb	r6, [r0, #18]
   12390:	4604      	mov	r4, r0
   12392:	b14e      	cbz	r6, 123a8 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
   12394:	3004      	adds	r0, #4
   12396:	f002 f82d 	bl	143f4 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
   1239a:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
   1239e:	bf18      	it	ne
   123a0:	2501      	movne	r5, #1
}
   123a2:	4628      	mov	r0, r5
   123a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
   123a8:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
   123aa:	f04f 0801 	mov.w	r8, #1
   123ae:	4638      	mov	r0, r7
   123b0:	f001 ffd6 	bl	14360 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
   123b4:	4631      	mov	r1, r6
   123b6:	7c20      	ldrb	r0, [r4, #16]
   123b8:	f001 ffd0 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   123bc:	21ff      	movs	r1, #255	; 0xff
   123be:	4638      	mov	r0, r7
   123c0:	f002 f832 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
   123c4:	4638      	mov	r0, r7
   123c6:	f884 8012 	strb.w	r8, [r4, #18]
   123ca:	f002 f813 	bl	143f4 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
   123ce:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
   123d0:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
   123d4:	bf18      	it	ne
   123d6:	2501      	movne	r5, #1
  if (m_spiActive) {
   123d8:	2b00      	cmp	r3, #0
   123da:	d0e2      	beq.n	123a2 <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
   123dc:	4641      	mov	r1, r8
   123de:	7c20      	ldrb	r0, [r4, #16]
   123e0:	f001 ffbc 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   123e4:	21ff      	movs	r1, #255	; 0xff
   123e6:	4638      	mov	r0, r7
   123e8:	f002 f81e 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   123ec:	4638      	mov	r0, r7
   123ee:	f001 ffd5 	bl	1439c <SdSpiArduinoDriver::deactivate()>
}
   123f2:	4628      	mov	r0, r5
    m_spiActive = false;
   123f4:	74a6      	strb	r6, [r4, #18]
}
   123f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
   123fa:	2500      	movs	r5, #0
}
   123fc:	4628      	mov	r0, r5
   123fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12402:	bf00      	nop

00012404 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
   12404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12408:	4f20      	ldr	r7, [pc, #128]	; (1248c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
   1240a:	4604      	mov	r4, r0
   1240c:	4688      	mov	r8, r1
   1240e:	4691      	mov	r9, r2
   12410:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
   12412:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
   12414:	f505 7596 	add.w	r5, r5, #300	; 0x12c
   12418:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
   1241a:	e003      	b.n	12424 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
   1241c:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
   1241e:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
   12420:	041b      	lsls	r3, r3, #16
   12422:	d40d      	bmi.n	12440 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
   12424:	4630      	mov	r0, r6
   12426:	f001 ffe5 	bl	143f4 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
   1242a:	28ff      	cmp	r0, #255	; 0xff
   1242c:	7520      	strb	r0, [r4, #20]
   1242e:	d0f5      	beq.n	1241c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
   12430:	28fe      	cmp	r0, #254	; 0xfe
   12432:	d01a      	beq.n	1246a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
   12434:	2318      	movs	r3, #24
  if (m_spiActive) {
   12436:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
   12438:	7463      	strb	r3, [r4, #17]
   1243a:	b930      	cbnz	r0, 1244a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
   1243c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12440:	231d      	movs	r3, #29
  if (m_spiActive) {
   12442:	7ca0      	ldrb	r0, [r4, #18]
   12444:	7463      	strb	r3, [r4, #17]
   12446:	2800      	cmp	r0, #0
   12448:	d0f8      	beq.n	1243c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
   1244a:	7c20      	ldrb	r0, [r4, #16]
   1244c:	2101      	movs	r1, #1
   1244e:	f001 ff85 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12452:	21ff      	movs	r1, #255	; 0xff
   12454:	4630      	mov	r0, r6
   12456:	f001 ffe7 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   1245a:	4630      	mov	r0, r6
   1245c:	f001 ff9e 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12460:	2300      	movs	r3, #0
  return false;
   12462:	4618      	mov	r0, r3
    m_spiActive = false;
   12464:	74a3      	strb	r3, [r4, #18]
}
   12466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
   1246a:	464a      	mov	r2, r9
   1246c:	4641      	mov	r1, r8
   1246e:	4630      	mov	r0, r6
   12470:	f001 ffcc 	bl	1440c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
   12474:	7520      	strb	r0, [r4, #20]
   12476:	b938      	cbnz	r0, 12488 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
   12478:	4630      	mov	r0, r6
   1247a:	f001 ffbb 	bl	143f4 <SdSpiArduinoDriver::receive()>
   1247e:	4630      	mov	r0, r6
   12480:	f001 ffb8 	bl	143f4 <SdSpiArduinoDriver::receive()>
  return true;
   12484:	2001      	movs	r0, #1
   12486:	e7d9      	b.n	1243c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
   12488:	2325      	movs	r3, #37	; 0x25
   1248a:	e7d4      	b.n	12436 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
   1248c:	20013554 	.word	0x20013554

00012490 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
   12490:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
   12492:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
   12494:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
   12496:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
   12498:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   1249a:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
   1249c:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
   1249e:	f000 f85b 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   124a2:	b9b0      	cbnz	r0, 124d2 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
   124a4:	7ca6      	ldrb	r6, [r4, #18]
   124a6:	b91e      	cbnz	r6, 124b0 <SharedSpiCard::readStop()+0x20>
  return true;
   124a8:	2601      	movs	r6, #1
}
   124aa:	4630      	mov	r0, r6
   124ac:	b003      	add	sp, #12
   124ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
   124b0:	4605      	mov	r5, r0
   124b2:	2101      	movs	r1, #1
   124b4:	7c20      	ldrb	r0, [r4, #16]
   124b6:	f001 ff51 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   124ba:	1d20      	adds	r0, r4, #4
   124bc:	21ff      	movs	r1, #255	; 0xff
   124be:	9001      	str	r0, [sp, #4]
   124c0:	f001 ffb2 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   124c4:	9801      	ldr	r0, [sp, #4]
   124c6:	f001 ff69 	bl	1439c <SdSpiArduinoDriver::deactivate()>
   124ca:	4630      	mov	r0, r6
    m_spiActive = false;
   124cc:	74a5      	strb	r5, [r4, #18]
}
   124ce:	b003      	add	sp, #12
   124d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
   124d2:	2309      	movs	r3, #9
  if (m_spiActive) {
   124d4:	7ca6      	ldrb	r6, [r4, #18]
   124d6:	7463      	strb	r3, [r4, #17]
   124d8:	2e00      	cmp	r6, #0
   124da:	d0e6      	beq.n	124aa <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
   124dc:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   124de:	7c20      	ldrb	r0, [r4, #16]
   124e0:	2101      	movs	r1, #1
}
   124e2:	463e      	mov	r6, r7
   124e4:	f001 ff3a 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   124e8:	21ff      	movs	r1, #255	; 0xff
   124ea:	4628      	mov	r0, r5
   124ec:	f001 ff9c 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   124f0:	4628      	mov	r0, r5
   124f2:	f001 ff53 	bl	1439c <SdSpiArduinoDriver::deactivate()>
}
   124f6:	4630      	mov	r0, r6
    m_spiActive = false;
   124f8:	74a7      	strb	r7, [r4, #18]
}
   124fa:	b003      	add	sp, #12
   124fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124fe:	bf00      	nop

00012500 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
   12500:	7cc2      	ldrb	r2, [r0, #19]
   12502:	2a02      	cmp	r2, #2
   12504:	d003      	beq.n	1250e <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
   12506:	2a01      	cmp	r2, #1
   12508:	d004      	beq.n	12514 <SharedSpiCard::syncDevice()+0x14>
}
   1250a:	2001      	movs	r0, #1
   1250c:	4770      	bx	lr
    return writeStop();
   1250e:	6803      	ldr	r3, [r0, #0]
   12510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12512:	4718      	bx	r3
    return readStop();
   12514:	f7ff bfbc 	b.w	12490 <SharedSpiCard::readStop()>

00012518 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
   12518:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
   1251a:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
   1251c:	460d      	mov	r5, r1
   1251e:	490d      	ldr	r1, [pc, #52]	; (12554 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
   12520:	4604      	mov	r4, r0
  if (!syncDevice()) {
   12522:	6a1a      	ldr	r2, [r3, #32]
   12524:	428a      	cmp	r2, r1
   12526:	d10c      	bne.n	12542 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
   12528:	7cc2      	ldrb	r2, [r0, #19]
   1252a:	2a02      	cmp	r2, #2
   1252c:	d004      	beq.n	12538 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
   1252e:	2a01      	cmp	r2, #1
   12530:	d00b      	beq.n	1254a <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
   12532:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
   12534:	7725      	strb	r5, [r4, #28]
}
   12536:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
   12538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1253a:	4798      	blx	r3
  if (!syncDevice()) {
   1253c:	2800      	cmp	r0, #0
   1253e:	d1f8      	bne.n	12532 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
   12540:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
   12542:	4790      	blx	r2
   12544:	2800      	cmp	r0, #0
   12546:	d0fb      	beq.n	12540 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
   12548:	e7f3      	b.n	12532 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
   1254a:	f7ff ffa1 	bl	12490 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
   1254e:	2800      	cmp	r0, #0
   12550:	d0f6      	beq.n	12540 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
   12552:	e7ee      	b.n	12532 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
   12554:	00012501 	.word	0x00012501

00012558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   12558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
   1255c:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   1255e:	b082      	sub	sp, #8
   12560:	460f      	mov	r7, r1
   12562:	4935      	ldr	r1, [pc, #212]	; (12638 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
   12564:	9201      	str	r2, [sp, #4]
   12566:	4606      	mov	r6, r0
  if (!syncDevice()) {
   12568:	6a1a      	ldr	r2, [r3, #32]
   1256a:	428a      	cmp	r2, r1
   1256c:	d15e      	bne.n	1262c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
   1256e:	7cc2      	ldrb	r2, [r0, #19]
   12570:	2a02      	cmp	r2, #2
   12572:	d041      	beq.n	125f8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
   12574:	2a01      	cmp	r2, #1
   12576:	d05b      	beq.n	12630 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
   12578:	7cb4      	ldrb	r4, [r6, #18]
   1257a:	2c00      	cmp	r4, #0
   1257c:	d047      	beq.n	1260e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
   1257e:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
   12580:	2f0c      	cmp	r7, #12
   12582:	d011      	beq.n	125a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
   12584:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1263c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
   12588:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
   1258c:	f504 7496 	add.w	r4, r4, #300	; 0x12c
   12590:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
   12592:	e004      	b.n	1259e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
   12594:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
   12598:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
   1259a:	041a      	lsls	r2, r3, #16
   1259c:	d434      	bmi.n	12608 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
   1259e:	4628      	mov	r0, r5
   125a0:	f001 ff28 	bl	143f4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
   125a4:	28ff      	cmp	r0, #255	; 0xff
   125a6:	d1f5      	bne.n	12594 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
   125a8:	f10d 0804 	add.w	r8, sp, #4
   125ac:	ac02      	add	r4, sp, #8
   125ae:	f047 0140 	orr.w	r1, r7, #64	; 0x40
   125b2:	4628      	mov	r0, r5
   125b4:	f001 ff38 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
   125b8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   125bc:	4628      	mov	r0, r5
   125be:	f001 ff33 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
   125c2:	45a0      	cmp	r8, r4
   125c4:	d1f8      	bne.n	125b8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   125c6:	2f00      	cmp	r7, #0
   125c8:	4628      	mov	r0, r5
    return m_spiDriver.receive();
   125ca:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
   125ce:	bf0c      	ite	eq
   125d0:	2195      	moveq	r1, #149	; 0x95
   125d2:	2187      	movne	r1, #135	; 0x87
   125d4:	f001 ff28 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
   125d8:	4628      	mov	r0, r5
   125da:	f001 ff0b 	bl	143f4 <SdSpiArduinoDriver::receive()>
   125de:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
   125e0:	3c01      	subs	r4, #1
   125e2:	f001 ff07 	bl	143f4 <SdSpiArduinoDriver::receive()>
   125e6:	0603      	lsls	r3, r0, #24
   125e8:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
   125ea:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
   125ec:	d501      	bpl.n	125f2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
   125ee:	2c00      	cmp	r4, #0
   125f0:	d1f5      	bne.n	125de <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
   125f2:	b002      	add	sp, #8
   125f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
   125f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   125fa:	4798      	blx	r3
  if (!syncDevice()) {
   125fc:	2800      	cmp	r0, #0
   125fe:	d1bb      	bne.n	12578 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
   12600:	20ff      	movs	r0, #255	; 0xff
}
   12602:	b002      	add	sp, #8
   12604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
   12608:	2f00      	cmp	r7, #0
   1260a:	d0cd      	beq.n	125a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
   1260c:	e7f8      	b.n	12600 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
   1260e:	1d35      	adds	r5, r6, #4
   12610:	4628      	mov	r0, r5
   12612:	f001 fea5 	bl	14360 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
   12616:	4621      	mov	r1, r4
   12618:	7c30      	ldrb	r0, [r6, #16]
   1261a:	f001 fe9f 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   1261e:	21ff      	movs	r1, #255	; 0xff
   12620:	4628      	mov	r0, r5
   12622:	f001 ff01 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
   12626:	2301      	movs	r3, #1
   12628:	74b3      	strb	r3, [r6, #18]
}
   1262a:	e7a9      	b.n	12580 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
   1262c:	4790      	blx	r2
   1262e:	e7e5      	b.n	125fc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
   12630:	f7ff ff2e 	bl	12490 <SharedSpiCard::readStop()>
   12634:	e7e2      	b.n	125fc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
   12636:	bf00      	nop
   12638:	00012501 	.word	0x00012501
   1263c:	20013554 	.word	0x20013554

00012640 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
   12640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12644:	b088      	sub	sp, #32
   12646:	4605      	mov	r5, r0
  m_spiActive = false;
   12648:	f04f 0800 	mov.w	r8, #0
   1264c:	4617      	mov	r7, r2
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
   1264e:	ac01      	add	r4, sp, #4
    m_spiDriver.begin(spiConfig);
   12650:	1d2e      	adds	r6, r5, #4
  m_spiActive = false;
   12652:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
   12656:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
   1265a:	f885 8015 	strb.w	r8, [r5, #21]
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
   1265e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
   12662:	f89d 0004 	ldrb.w	r0, [sp, #4]
  m_csPin = spiConfig.csPin;
   12666:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
   12668:	f001 fe74 	bl	14354 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
   1266c:	2101      	movs	r1, #1
   1266e:	7c28      	ldrb	r0, [r5, #16]
   12670:	f001 fe74 	bl	1435c <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
   12674:	496c      	ldr	r1, [pc, #432]	; (12828 <SharedSpiCard::begin(SdSpiConfig)+0x1e8>)
   12676:	2307      	movs	r3, #7
   12678:	e9c5 1302 	strd	r1, r3, [r5, #8]
  spiBegin(spiConfig);
   1267c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   12680:	ab05      	add	r3, sp, #20
   12682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
   12686:	4630      	mov	r0, r6
   12688:	cb0e      	ldmia	r3, {r1, r2, r3}
   1268a:	f001 fe73 	bl	14374 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
   1268e:	7cac      	ldrb	r4, [r5, #18]
  m_state = IDLE_STATE;
   12690:	f885 8013 	strb.w	r8, [r5, #19]
  if (!m_spiActive) {
   12694:	2c00      	cmp	r4, #0
   12696:	d067      	beq.n	12768 <SharedSpiCard::begin(SdSpiConfig)+0x128>
    sdCsWrite(m_csPin, true);
   12698:	240a      	movs	r4, #10
   1269a:	2101      	movs	r1, #1
   1269c:	7c28      	ldrb	r0, [r5, #16]
   1269e:	f001 fe5d 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   126a2:	21ff      	movs	r1, #255	; 0xff
   126a4:	4630      	mov	r0, r6
   126a6:	f001 febf 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
   126aa:	1e61      	subs	r1, r4, #1
   126ac:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
   126b0:	d1f7      	bne.n	126a2 <SharedSpiCard::begin(SdSpiConfig)+0x62>
    sdCsWrite(m_csPin, false);
   126b2:	4621      	mov	r1, r4
   126b4:	240a      	movs	r4, #10
   126b6:	7c28      	ldrb	r0, [r5, #16]
   126b8:	f001 fe50 	bl	1435c <sdCsWrite(unsigned char, bool)>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   126bc:	2200      	movs	r2, #0
   126be:	4628      	mov	r0, r5
   126c0:	4611      	mov	r1, r2
   126c2:	f7ff ff49 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   126c6:	2801      	cmp	r0, #1
    if (i == SD_CMD0_RETRY) {
   126c8:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   126cc:	4604      	mov	r4, r0
   126ce:	d00a      	beq.n	126e6 <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (i == SD_CMD0_RETRY) {
   126d0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   126d4:	d1f2      	bne.n	126bc <SharedSpiCard::begin(SdSpiConfig)+0x7c>
   126d6:	2301      	movs	r3, #1
  if (m_spiActive) {
   126d8:	7ca8      	ldrb	r0, [r5, #18]
    m_errorCode = code;
   126da:	746b      	strb	r3, [r5, #17]
   126dc:	2800      	cmp	r0, #0
   126de:	d151      	bne.n	12784 <SharedSpiCard::begin(SdSpiConfig)+0x144>
}
   126e0:	b008      	add	sp, #32
   126e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
   126e6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   126ea:	2108      	movs	r1, #8
   126ec:	4628      	mov	r0, r5
   126ee:	f7ff ff33 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   126f2:	0742      	lsls	r2, r0, #29
   126f4:	d557      	bpl.n	127a6 <SharedSpiCard::begin(SdSpiConfig)+0x166>
    m_type = value;
   126f6:	756c      	strb	r4, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   126f8:	682b      	ldr	r3, [r5, #0]
   126fa:	f8df a130 	ldr.w	sl, [pc, #304]	; 1282c <SharedSpiCard::begin(SdSpiConfig)+0x1ec>
   126fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   12700:	4553      	cmp	r3, sl
   12702:	d161      	bne.n	127c8 <SharedSpiCard::begin(SdSpiConfig)+0x188>
    return m_type;
   12704:	7d68      	ldrb	r0, [r5, #21]
   12706:	f1a0 0402 	sub.w	r4, r0, #2
   1270a:	f8df 9124 	ldr.w	r9, [pc, #292]	; 12830 <SharedSpiCard::begin(SdSpiConfig)+0x1f0>
   1270e:	fab4 f484 	clz	r4, r4
   12712:	f8d9 3000 	ldr.w	r3, [r9]
   12716:	0964      	lsrs	r4, r4, #5
    m_endTime = ms + millis16();
   12718:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   1271c:	07a4      	lsls	r4, r4, #30
    m_endTime = ms + millis16();
   1271e:	fa1f f888 	uxth.w	r8, r8
  }
   12722:	e005      	b.n	12730 <SharedSpiCard::begin(SdSpiConfig)+0xf0>
   12724:	f8d9 3000 	ldr.w	r3, [r9]
    return (int16_t)(m_endTime - millis16()) < 0;
   12728:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
   1272c:	041b      	lsls	r3, r3, #16
   1272e:	d449      	bmi.n	127c4 <SharedSpiCard::begin(SdSpiConfig)+0x184>
    cardCommand(CMD55, 0);
   12730:	2137      	movs	r1, #55	; 0x37
   12732:	2200      	movs	r2, #0
   12734:	4628      	mov	r0, r5
   12736:	f7ff ff0f 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
   1273a:	4622      	mov	r2, r4
   1273c:	2129      	movs	r1, #41	; 0x29
   1273e:	4628      	mov	r0, r5
   12740:	f7ff ff0a 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   12744:	2800      	cmp	r0, #0
   12746:	d1ed      	bne.n	12724 <SharedSpiCard::begin(SdSpiConfig)+0xe4>
  if (type() == SD_CARD_TYPE_SD2) {
   12748:	682b      	ldr	r3, [r5, #0]
   1274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1274c:	4553      	cmp	r3, sl
   1274e:	d165      	bne.n	1281c <SharedSpiCard::begin(SdSpiConfig)+0x1dc>
    return m_type;
   12750:	7d68      	ldrb	r0, [r5, #21]
   12752:	2802      	cmp	r0, #2
   12754:	d049      	beq.n	127ea <SharedSpiCard::begin(SdSpiConfig)+0x1aa>
  if (m_spiActive) {
   12756:	7cab      	ldrb	r3, [r5, #18]
   12758:	bbcb      	cbnz	r3, 127ce <SharedSpiCard::begin(SdSpiConfig)+0x18e>
   1275a:	2307      	movs	r3, #7
  return true;
   1275c:	2001      	movs	r0, #1
   1275e:	e9c5 7302 	strd	r7, r3, [r5, #8]
}
   12762:	b008      	add	sp, #32
   12764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_spiDriver.activate();
   12768:	4630      	mov	r0, r6
   1276a:	f001 fdf9 	bl	14360 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
   1276e:	4621      	mov	r1, r4
   12770:	7c28      	ldrb	r0, [r5, #16]
   12772:	f001 fdf3 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12776:	21ff      	movs	r1, #255	; 0xff
   12778:	4630      	mov	r0, r6
   1277a:	f001 fe55 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
   1277e:	2301      	movs	r3, #1
   12780:	74ab      	strb	r3, [r5, #18]
}
   12782:	e789      	b.n	12698 <SharedSpiCard::begin(SdSpiConfig)+0x58>
    sdCsWrite(m_csPin, true);
   12784:	7c28      	ldrb	r0, [r5, #16]
   12786:	2101      	movs	r1, #1
   12788:	f001 fde8 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   1278c:	21ff      	movs	r1, #255	; 0xff
   1278e:	4630      	mov	r0, r6
   12790:	f001 fe4a 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12794:	4630      	mov	r0, r6
   12796:	f001 fe01 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   1279a:	2300      	movs	r3, #0
  return false;
   1279c:	4618      	mov	r0, r3
    m_spiActive = false;
   1279e:	74ab      	strb	r3, [r5, #18]
}
   127a0:	b008      	add	sp, #32
   127a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_type = value;
   127a6:	2302      	movs	r3, #2
   127a8:	2404      	movs	r4, #4
   127aa:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
   127ac:	4630      	mov	r0, r6
   127ae:	f001 fe21 	bl	143f4 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
   127b2:	1e63      	subs	r3, r4, #1
      m_status = spiReceive();
   127b4:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
   127b6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   127ba:	d1f7      	bne.n	127ac <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    if (m_status != 0XAA) {
   127bc:	28aa      	cmp	r0, #170	; 0xaa
   127be:	d09b      	beq.n	126f8 <SharedSpiCard::begin(SdSpiConfig)+0xb8>
   127c0:	2306      	movs	r3, #6
   127c2:	e789      	b.n	126d8 <SharedSpiCard::begin(SdSpiConfig)+0x98>
   127c4:	2317      	movs	r3, #23
   127c6:	e787      	b.n	126d8 <SharedSpiCard::begin(SdSpiConfig)+0x98>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   127c8:	4628      	mov	r0, r5
   127ca:	4798      	blx	r3
   127cc:	e79b      	b.n	12706 <SharedSpiCard::begin(SdSpiConfig)+0xc6>
    sdCsWrite(m_csPin, true);
   127ce:	2101      	movs	r1, #1
   127d0:	7c28      	ldrb	r0, [r5, #16]
   127d2:	f001 fdc3 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   127d6:	21ff      	movs	r1, #255	; 0xff
   127d8:	4630      	mov	r0, r6
   127da:	f001 fe25 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   127de:	4630      	mov	r0, r6
   127e0:	f001 fddc 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   127e4:	2300      	movs	r3, #0
   127e6:	74ab      	strb	r3, [r5, #18]
}
   127e8:	e7b7      	b.n	1275a <SharedSpiCard::begin(SdSpiConfig)+0x11a>
    if (cardCommand(CMD58, 0)) {
   127ea:	2200      	movs	r2, #0
   127ec:	213a      	movs	r1, #58	; 0x3a
   127ee:	4628      	mov	r0, r5
   127f0:	f7ff feb2 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   127f4:	b9a8      	cbnz	r0, 12822 <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
    return m_spiDriver.receive();
   127f6:	4630      	mov	r0, r6
   127f8:	f001 fdfc 	bl	143f4 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
   127fc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   12800:	28c0      	cmp	r0, #192	; 0xc0
   12802:	d101      	bne.n	12808 <SharedSpiCard::begin(SdSpiConfig)+0x1c8>
    m_type = value;
   12804:	2303      	movs	r3, #3
   12806:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
   12808:	4630      	mov	r0, r6
   1280a:	f001 fdf3 	bl	143f4 <SdSpiArduinoDriver::receive()>
   1280e:	4630      	mov	r0, r6
   12810:	f001 fdf0 	bl	143f4 <SdSpiArduinoDriver::receive()>
   12814:	4630      	mov	r0, r6
   12816:	f001 fded 	bl	143f4 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
   1281a:	e79c      	b.n	12756 <SharedSpiCard::begin(SdSpiConfig)+0x116>
  if (type() == SD_CARD_TYPE_SD2) {
   1281c:	4628      	mov	r0, r5
   1281e:	4798      	blx	r3
   12820:	e797      	b.n	12752 <SharedSpiCard::begin(SdSpiConfig)+0x112>
   12822:	2312      	movs	r3, #18
   12824:	e758      	b.n	126d8 <SharedSpiCard::begin(SdSpiConfig)+0x98>
   12826:	bf00      	nop
   12828:	00061a80 	.word	0x00061a80
   1282c:	000121fd 	.word	0x000121fd
   12830:	20013554 	.word	0x20013554

00012834 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
   12834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
   12836:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
   12838:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
   1283a:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
   1283c:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
   1283e:	f7ff fe8b 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12842:	b9e0      	cbnz	r0, 1287e <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
   12844:	1d37      	adds	r7, r6, #4
   12846:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
   12848:	4638      	mov	r0, r7
   1284a:	f001 fdd3 	bl	143f4 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
   1284e:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
   12852:	42a5      	cmp	r5, r4
   12854:	d1f8      	bne.n	12848 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
   12856:	7cb4      	ldrb	r4, [r6, #18]
   12858:	b914      	cbnz	r4, 12860 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
   1285a:	2401      	movs	r4, #1
}
   1285c:	4620      	mov	r0, r4
   1285e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
   12860:	7c30      	ldrb	r0, [r6, #16]
   12862:	2101      	movs	r1, #1
   12864:	f001 fd7a 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12868:	21ff      	movs	r1, #255	; 0xff
   1286a:	4638      	mov	r0, r7
   1286c:	f001 fddc 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12870:	4638      	mov	r0, r7
   12872:	f001 fd93 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12876:	2300      	movs	r3, #0
}
   12878:	4620      	mov	r0, r4
    m_spiActive = false;
   1287a:	74b3      	strb	r3, [r6, #18]
}
   1287c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
   1287e:	2312      	movs	r3, #18
  if (m_spiActive) {
   12880:	7cb4      	ldrb	r4, [r6, #18]
   12882:	7473      	strb	r3, [r6, #17]
   12884:	2c00      	cmp	r4, #0
   12886:	d0e9      	beq.n	1285c <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
   12888:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
   1288a:	7c30      	ldrb	r0, [r6, #16]
   1288c:	2101      	movs	r1, #1
   1288e:	f001 fd65 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12892:	21ff      	movs	r1, #255	; 0xff
   12894:	4620      	mov	r0, r4
   12896:	f001 fdc7 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   1289a:	4620      	mov	r0, r4
   1289c:	f001 fd7e 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   128a0:	2300      	movs	r3, #0
  return false;
   128a2:	461c      	mov	r4, r3
    m_spiActive = false;
   128a4:	74b3      	strb	r3, [r6, #18]
}
   128a6:	4620      	mov	r0, r4
   128a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   128aa:	bf00      	nop

000128ac <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
   128ac:	b570      	push	{r4, r5, r6, lr}
   128ae:	4616      	mov	r6, r2
   128b0:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
   128b2:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
   128b4:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
   128b6:	f7ff fe4f 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   128ba:	b1b0      	cbz	r0, 128ea <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
   128bc:	231b      	movs	r3, #27
   128be:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
   128c0:	7ca0      	ldrb	r0, [r4, #18]
   128c2:	b908      	cbnz	r0, 128c8 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
   128c4:	b002      	add	sp, #8
   128c6:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
   128c8:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   128ca:	7c20      	ldrb	r0, [r4, #16]
   128cc:	2101      	movs	r1, #1
   128ce:	f001 fd45 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   128d2:	21ff      	movs	r1, #255	; 0xff
   128d4:	4628      	mov	r0, r5
   128d6:	f001 fda7 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   128da:	4628      	mov	r0, r5
   128dc:	f001 fd5e 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   128e0:	2300      	movs	r3, #0
  return false;
   128e2:	4618      	mov	r0, r3
    m_spiActive = false;
   128e4:	74a3      	strb	r3, [r4, #18]
}
   128e6:	b002      	add	sp, #8
   128e8:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
   128ea:	4605      	mov	r5, r0
   128ec:	2210      	movs	r2, #16
   128ee:	4631      	mov	r1, r6
   128f0:	4620      	mov	r0, r4
   128f2:	f7ff fd87 	bl	12404 <SharedSpiCard::readData(unsigned char*, unsigned int)>
   128f6:	2800      	cmp	r0, #0
   128f8:	d0e2      	beq.n	128c0 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
   128fa:	7ca6      	ldrb	r6, [r4, #18]
   128fc:	2e00      	cmp	r6, #0
   128fe:	d0e1      	beq.n	128c4 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
   12900:	7c20      	ldrb	r0, [r4, #16]
   12902:	2101      	movs	r1, #1
   12904:	f001 fd2a 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12908:	1d20      	adds	r0, r4, #4
   1290a:	21ff      	movs	r1, #255	; 0xff
   1290c:	9001      	str	r0, [sp, #4]
   1290e:	f001 fd8b 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12912:	9801      	ldr	r0, [sp, #4]
   12914:	f001 fd42 	bl	1439c <SdSpiArduinoDriver::deactivate()>
}
   12918:	4630      	mov	r0, r6
    m_spiActive = false;
   1291a:	74a5      	strb	r5, [r4, #18]
}
   1291c:	b002      	add	sp, #8
   1291e:	bd70      	pop	{r4, r5, r6, pc}

00012920 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
   12920:	6803      	ldr	r3, [r0, #0]
   12922:	4a25      	ldr	r2, [pc, #148]	; (129b8 <SharedSpiCard::sectorCount()+0x98>)
   12924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12926:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
   12928:	b500      	push	{lr}
   1292a:	b085      	sub	sp, #20
   1292c:	d10f      	bne.n	1294e <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
   1292e:	466a      	mov	r2, sp
   12930:	2109      	movs	r1, #9
   12932:	f7ff ffbb 	bl	128ac <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
   12936:	b138      	cbz	r0, 12948 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
   12938:	f89d 3000 	ldrb.w	r3, [sp]
   1293c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   12940:	d008      	beq.n	12954 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
   12942:	2b40      	cmp	r3, #64	; 0x40
   12944:	d027      	beq.n	12996 <SharedSpiCard::sectorCount()+0x76>
   12946:	2000      	movs	r0, #0
}
   12948:	b005      	add	sp, #20
   1294a:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
   1294e:	4669      	mov	r1, sp
   12950:	4798      	blx	r3
   12952:	e7f0      	b.n	12936 <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
   12954:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
   12958:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
   1295c:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
   12960:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   12964:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
   12968:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
   1296a:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   1296e:	0080      	lsls	r0, r0, #2
   12970:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   12974:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
   12978:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   1297c:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   12980:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   12984:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   12988:	4413      	add	r3, r2
   1298a:	3001      	adds	r0, #1
   1298c:	3b07      	subs	r3, #7
   1298e:	4098      	lsls	r0, r3
}
   12990:	b005      	add	sp, #20
   12992:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   12996:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
   1299a:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   1299e:	3001      	adds	r0, #1
   129a0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
   129a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   129a8:	eb00 4003 	add.w	r0, r0, r3, lsl #16
   129ac:	eb00 2002 	add.w	r0, r0, r2, lsl #8
   129b0:	0280      	lsls	r0, r0, #10
   129b2:	b005      	add	sp, #20
   129b4:	f85d fb04 	ldr.w	pc, [sp], #4
   129b8:	00012cdd 	.word	0x00012cdd

000129bc <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
   129bc:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
   129be:	460a      	mov	r2, r1
   129c0:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   129c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
   129c4:	b083      	sub	sp, #12
   129c6:	4d16      	ldr	r5, [pc, #88]	; (12a20 <SharedSpiCard::readStart(unsigned long)+0x64>)
   129c8:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
   129ca:	42ab      	cmp	r3, r5
   129cc:	d124      	bne.n	12a18 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
   129ce:	7d40      	ldrb	r0, [r0, #21]
   129d0:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
   129d2:	f04f 0112 	mov.w	r1, #18
   129d6:	4620      	mov	r0, r4
    sector <<= 9;
   129d8:	bf18      	it	ne
   129da:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
   129dc:	f7ff fdbc 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   129e0:	b920      	cbnz	r0, 129ec <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
   129e2:	2301      	movs	r3, #1
  return true;
   129e4:	4618      	mov	r0, r3
  m_state = READ_STATE;
   129e6:	74e3      	strb	r3, [r4, #19]
}
   129e8:	b003      	add	sp, #12
   129ea:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
   129ec:	230c      	movs	r3, #12
  if (m_spiActive) {
   129ee:	7ca0      	ldrb	r0, [r4, #18]
   129f0:	7463      	strb	r3, [r4, #17]
   129f2:	2800      	cmp	r0, #0
   129f4:	d0f8      	beq.n	129e8 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
   129f6:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   129f8:	7c20      	ldrb	r0, [r4, #16]
   129fa:	2101      	movs	r1, #1
   129fc:	f001 fcae 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12a00:	21ff      	movs	r1, #255	; 0xff
   12a02:	4628      	mov	r0, r5
   12a04:	f001 fd10 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12a08:	4628      	mov	r0, r5
   12a0a:	f001 fcc7 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12a0e:	2300      	movs	r3, #0
}
   12a10:	4618      	mov	r0, r3
    m_spiActive = false;
   12a12:	74a3      	strb	r3, [r4, #18]
}
   12a14:	b003      	add	sp, #12
   12a16:	bd30      	pop	{r4, r5, pc}
   12a18:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
   12a1a:	4798      	blx	r3
   12a1c:	9a01      	ldr	r2, [sp, #4]
   12a1e:	e7d7      	b.n	129d0 <SharedSpiCard::readStart(unsigned long)+0x14>
   12a20:	000121fd 	.word	0x000121fd

00012a24 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
   12a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a26:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
   12a28:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
   12a2a:	4606      	mov	r6, r0
   12a2c:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
   12a2e:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
   12a30:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
   12a32:	d102      	bne.n	12a3a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
   12a34:	6983      	ldr	r3, [r0, #24]
   12a36:	428b      	cmp	r3, r1
   12a38:	d005      	beq.n	12a46 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
   12a3a:	4629      	mov	r1, r5
   12a3c:	4630      	mov	r0, r6
   12a3e:	f7ff ffbd 	bl	129bc <SharedSpiCard::readStart(unsigned long)>
   12a42:	b180      	cbz	r0, 12a66 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
   12a44:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
   12a46:	b187      	cbz	r7, 12a6a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
   12a48:	2500      	movs	r5, #0
   12a4a:	e001      	b.n	12a50 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
   12a4c:	42af      	cmp	r7, r5
   12a4e:	d00c      	beq.n	12a6a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
   12a50:	4621      	mov	r1, r4
   12a52:	f44f 7200 	mov.w	r2, #512	; 0x200
   12a56:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
   12a58:	3501      	adds	r5, #1
   12a5a:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
   12a5e:	f7ff fcd1 	bl	12404 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
   12a62:	2800      	cmp	r0, #0
   12a64:	d1f2      	bne.n	12a4c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
   12a66:	2000      	movs	r0, #0
}
   12a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
   12a6a:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
   12a6c:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
   12a6e:	443b      	add	r3, r7
   12a70:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
   12a72:	2800      	cmp	r0, #0
   12a74:	d1f8      	bne.n	12a68 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
   12a76:	4630      	mov	r0, r6
}
   12a78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
   12a7c:	f7ff bd08 	b.w	12490 <SharedSpiCard::readStop()>

00012a80 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
   12a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a84:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
   12a86:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
   12a88:	4606      	mov	r6, r0
   12a8a:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
   12a8c:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
   12a8e:	4615      	mov	r5, r2
   12a90:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   12a94:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
   12a98:	d102      	bne.n	12aa0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
   12a9a:	6983      	ldr	r3, [r0, #24]
   12a9c:	428b      	cmp	r3, r1
   12a9e:	d005      	beq.n	12aac <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
   12aa0:	4621      	mov	r1, r4
   12aa2:	4630      	mov	r0, r6
   12aa4:	f7ff ff8a 	bl	129bc <SharedSpiCard::readStart(unsigned long)>
   12aa8:	b1b0      	cbz	r0, 12ad8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
   12aaa:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
   12aac:	f1bb 0f00 	cmp.w	fp, #0
   12ab0:	d015      	beq.n	12ade <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
   12ab2:	eb04 0a0b 	add.w	sl, r4, fp
   12ab6:	e002      	b.n	12abe <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
   12ab8:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
   12aba:	45a2      	cmp	sl, r4
   12abc:	d00f      	beq.n	12ade <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
   12abe:	f44f 7200 	mov.w	r2, #512	; 0x200
   12ac2:	4629      	mov	r1, r5
   12ac4:	4630      	mov	r0, r6
   12ac6:	f7ff fc9d 	bl	12404 <SharedSpiCard::readData(unsigned char*, unsigned int)>
   12aca:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
   12acc:	4642      	mov	r2, r8
   12ace:	4620      	mov	r0, r4
   12ad0:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
   12ad2:	3401      	adds	r4, #1
    if (readData(dst)) {
   12ad4:	2f00      	cmp	r7, #0
   12ad6:	d1ef      	bne.n	12ab8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
   12ad8:	2000      	movs	r0, #0
}
   12ada:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
   12ade:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
   12ae0:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
   12ae2:	445b      	add	r3, fp
   12ae4:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
   12ae6:	2800      	cmp	r0, #0
   12ae8:	d1f7      	bne.n	12ada <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
   12aea:	4630      	mov	r0, r6
}
   12aec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
   12af0:	f7ff bcce 	b.w	12490 <SharedSpiCard::readStop()>

00012af4 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
   12af4:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
   12af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
   12afa:	695f      	ldr	r7, [r3, #20]
   12afc:	4b16      	ldr	r3, [pc, #88]	; (12b58 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
   12afe:	429f      	cmp	r7, r3
   12b00:	d11f      	bne.n	12b42 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
   12b02:	7cc3      	ldrb	r3, [r0, #19]
   12b04:	4604      	mov	r4, r0
   12b06:	460d      	mov	r5, r1
   12b08:	4616      	mov	r6, r2
   12b0a:	2b01      	cmp	r3, #1
   12b0c:	d102      	bne.n	12b14 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
   12b0e:	6983      	ldr	r3, [r0, #24]
   12b10:	4299      	cmp	r1, r3
   12b12:	d005      	beq.n	12b20 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
   12b14:	4629      	mov	r1, r5
   12b16:	4620      	mov	r0, r4
   12b18:	f7ff ff50 	bl	129bc <SharedSpiCard::readStart(unsigned long)>
   12b1c:	b170      	cbz	r0, 12b3c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
   12b1e:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
   12b20:	f44f 7200 	mov.w	r2, #512	; 0x200
   12b24:	4631      	mov	r1, r6
   12b26:	4620      	mov	r0, r4
   12b28:	f7ff fc6c 	bl	12404 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
   12b2c:	b130      	cbz	r0, 12b3c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
   12b2e:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
   12b30:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
   12b32:	3301      	adds	r3, #1
   12b34:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
   12b36:	b148      	cbz	r0, 12b4c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
   12b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
   12b3c:	2000      	movs	r0, #0
}
   12b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
   12b42:	46bc      	mov	ip, r7
   12b44:	2301      	movs	r3, #1
}
   12b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
   12b4a:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
   12b4c:	4620      	mov	r0, r4
}
   12b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
   12b52:	f7ff bc9d 	b.w	12490 <SharedSpiCard::readStop()>
   12b56:	bf00      	nop
   12b58:	00012a25 	.word	0x00012a25

00012b5c <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
   12b5c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
   12b5e:	460a      	mov	r2, r1
   12b60:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   12b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
   12b64:	b083      	sub	sp, #12
   12b66:	4d16      	ldr	r5, [pc, #88]	; (12bc0 <SharedSpiCard::writeStart(unsigned long)+0x64>)
   12b68:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
   12b6a:	42ab      	cmp	r3, r5
   12b6c:	d124      	bne.n	12bb8 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
   12b6e:	7d40      	ldrb	r0, [r0, #21]
   12b70:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
   12b72:	f04f 0119 	mov.w	r1, #25
   12b76:	4620      	mov	r0, r4
    sector <<= 9;
   12b78:	bf18      	it	ne
   12b7a:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
   12b7c:	f7ff fcec 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12b80:	b920      	cbnz	r0, 12b8c <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
   12b82:	2302      	movs	r3, #2
  return true;
   12b84:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
   12b86:	74e3      	strb	r3, [r4, #19]
}
   12b88:	b003      	add	sp, #12
   12b8a:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
   12b8c:	230e      	movs	r3, #14
  if (m_spiActive) {
   12b8e:	7ca0      	ldrb	r0, [r4, #18]
   12b90:	7463      	strb	r3, [r4, #17]
   12b92:	2800      	cmp	r0, #0
   12b94:	d0f8      	beq.n	12b88 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
   12b96:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   12b98:	7c20      	ldrb	r0, [r4, #16]
   12b9a:	2101      	movs	r1, #1
   12b9c:	f001 fbde 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12ba0:	21ff      	movs	r1, #255	; 0xff
   12ba2:	4628      	mov	r0, r5
   12ba4:	f001 fc40 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12ba8:	4628      	mov	r0, r5
   12baa:	f001 fbf7 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12bae:	2300      	movs	r3, #0
}
   12bb0:	4618      	mov	r0, r3
    m_spiActive = false;
   12bb2:	74a3      	strb	r3, [r4, #18]
}
   12bb4:	b003      	add	sp, #12
   12bb6:	bd30      	pop	{r4, r5, pc}
   12bb8:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
   12bba:	4798      	blx	r3
   12bbc:	9a01      	ldr	r2, [sp, #4]
   12bbe:	e7d7      	b.n	12b70 <SharedSpiCard::writeStart(unsigned long)+0x14>
   12bc0:	000121fd 	.word	0x000121fd

00012bc4 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
   12bc4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
   12bc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
   12bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
   12bcc:	4617      	mov	r7, r2
   12bce:	4a41      	ldr	r2, [pc, #260]	; (12cd4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
   12bd0:	b085      	sub	sp, #20
   12bd2:	4604      	mov	r4, r0
   12bd4:	460e      	mov	r6, r1
   12bd6:	4293      	cmp	r3, r2
   12bd8:	d145      	bne.n	12c66 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
   12bda:	466a      	mov	r2, sp
   12bdc:	2109      	movs	r1, #9
   12bde:	f7ff fe65 	bl	128ac <SharedSpiCard::readRegister(unsigned char, void*)>
   12be2:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
   12be4:	b1b5      	cbz	r5, 12c14 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
   12be6:	f89d 300a 	ldrb.w	r3, [sp, #10]
   12bea:	065a      	lsls	r2, r3, #25
   12bec:	d518      	bpl.n	12c20 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
   12bee:	7d63      	ldrb	r3, [r4, #21]
   12bf0:	2b03      	cmp	r3, #3
   12bf2:	d001      	beq.n	12bf8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
   12bf4:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
   12bf6:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
   12bf8:	4632      	mov	r2, r6
   12bfa:	2120      	movs	r1, #32
   12bfc:	4620      	mov	r0, r4
   12bfe:	f7ff fcab 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
   12c02:	b928      	cbnz	r0, 12c10 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
   12c04:	463a      	mov	r2, r7
   12c06:	2121      	movs	r1, #33	; 0x21
   12c08:	4620      	mov	r0, r4
   12c0a:	f7ff fca5 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12c0e:	b370      	cbz	r0, 12c6e <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
   12c10:	2326      	movs	r3, #38	; 0x26
   12c12:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
   12c14:	7ca5      	ldrb	r5, [r4, #18]
   12c16:	b99d      	cbnz	r5, 12c40 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
   12c18:	4628      	mov	r0, r5
   12c1a:	b005      	add	sp, #20
   12c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
   12c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12c24:	f89d 200b 	ldrb.w	r2, [sp, #11]
   12c28:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
   12c2a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
   12c2e:	1c7a      	adds	r2, r7, #1
   12c30:	4332      	orrs	r2, r6
   12c32:	4213      	tst	r3, r2
   12c34:	d0db      	beq.n	12bee <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
   12c36:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
   12c38:	7ca5      	ldrb	r5, [r4, #18]
   12c3a:	7463      	strb	r3, [r4, #17]
   12c3c:	2d00      	cmp	r5, #0
   12c3e:	d0eb      	beq.n	12c18 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
   12c40:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   12c42:	7c20      	ldrb	r0, [r4, #16]
   12c44:	2101      	movs	r1, #1
   12c46:	f001 fb89 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12c4a:	21ff      	movs	r1, #255	; 0xff
   12c4c:	4628      	mov	r0, r5
   12c4e:	f001 fbeb 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12c52:	4628      	mov	r0, r5
   12c54:	f001 fba2 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12c58:	2300      	movs	r3, #0
  return false;
   12c5a:	461d      	mov	r5, r3
    m_spiActive = false;
   12c5c:	74a3      	strb	r3, [r4, #18]
}
   12c5e:	4628      	mov	r0, r5
   12c60:	b005      	add	sp, #20
   12c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
   12c66:	4669      	mov	r1, sp
   12c68:	4798      	blx	r3
   12c6a:	4605      	mov	r5, r0
   12c6c:	e7ba      	b.n	12be4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
   12c6e:	4602      	mov	r2, r0
   12c70:	2126      	movs	r1, #38	; 0x26
   12c72:	4620      	mov	r0, r4
   12c74:	f7ff fc70 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12c78:	2800      	cmp	r0, #0
   12c7a:	d1c9      	bne.n	12c10 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
   12c7c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12cd8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
   12c80:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
   12c84:	f104 0904 	add.w	r9, r4, #4
   12c88:	f8d8 3000 	ldr.w	r3, [r8]
   12c8c:	441f      	add	r7, r3
   12c8e:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
   12c90:	e004      	b.n	12c9c <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
   12c92:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
   12c96:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
   12c98:	041b      	lsls	r3, r3, #16
   12c9a:	d417      	bmi.n	12ccc <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
   12c9c:	4648      	mov	r0, r9
   12c9e:	f001 fba9 	bl	143f4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
   12ca2:	28ff      	cmp	r0, #255	; 0xff
   12ca4:	4606      	mov	r6, r0
   12ca6:	d1f4      	bne.n	12c92 <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
   12ca8:	7ca3      	ldrb	r3, [r4, #18]
   12caa:	2b00      	cmp	r3, #0
   12cac:	d0b4      	beq.n	12c18 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
   12cae:	2101      	movs	r1, #1
   12cb0:	7c20      	ldrb	r0, [r4, #16]
  return true;
   12cb2:	461d      	mov	r5, r3
   12cb4:	f001 fb52 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12cb8:	4631      	mov	r1, r6
   12cba:	4648      	mov	r0, r9
   12cbc:	f001 fbb4 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12cc0:	4648      	mov	r0, r9
   12cc2:	f001 fb6b 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12cc6:	2300      	movs	r3, #0
   12cc8:	74a3      	strb	r3, [r4, #18]
}
   12cca:	e7a5      	b.n	12c18 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
   12ccc:	2328      	movs	r3, #40	; 0x28
   12cce:	7463      	strb	r3, [r4, #17]
    goto fail;
   12cd0:	e7a0      	b.n	12c14 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
   12cd2:	bf00      	nop
   12cd4:	00012cdd 	.word	0x00012cdd
   12cd8:	20013554 	.word	0x20013554

00012cdc <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
   12cdc:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
   12cde:	2200      	movs	r2, #0
   12ce0:	b082      	sub	sp, #8
   12ce2:	460e      	mov	r6, r1
   12ce4:	2109      	movs	r1, #9
   12ce6:	4604      	mov	r4, r0
   12ce8:	f7ff fc36 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12cec:	b1b0      	cbz	r0, 12d1c <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
   12cee:	231b      	movs	r3, #27
   12cf0:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
   12cf2:	7ca0      	ldrb	r0, [r4, #18]
   12cf4:	b908      	cbnz	r0, 12cfa <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
   12cf6:	b002      	add	sp, #8
   12cf8:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
   12cfa:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   12cfc:	7c20      	ldrb	r0, [r4, #16]
   12cfe:	2101      	movs	r1, #1
   12d00:	f001 fb2c 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12d04:	21ff      	movs	r1, #255	; 0xff
   12d06:	4628      	mov	r0, r5
   12d08:	f001 fb8e 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12d0c:	4628      	mov	r0, r5
   12d0e:	f001 fb45 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12d12:	2300      	movs	r3, #0
  return false;
   12d14:	4618      	mov	r0, r3
    m_spiActive = false;
   12d16:	74a3      	strb	r3, [r4, #18]
  }
   12d18:	b002      	add	sp, #8
   12d1a:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
   12d1c:	4605      	mov	r5, r0
   12d1e:	2210      	movs	r2, #16
   12d20:	4631      	mov	r1, r6
   12d22:	4620      	mov	r0, r4
   12d24:	f7ff fb6e 	bl	12404 <SharedSpiCard::readData(unsigned char*, unsigned int)>
   12d28:	2800      	cmp	r0, #0
   12d2a:	d0e2      	beq.n	12cf2 <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
   12d2c:	7ca6      	ldrb	r6, [r4, #18]
   12d2e:	2e00      	cmp	r6, #0
   12d30:	d0e1      	beq.n	12cf6 <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
   12d32:	7c20      	ldrb	r0, [r4, #16]
   12d34:	2101      	movs	r1, #1
   12d36:	f001 fb11 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12d3a:	1d20      	adds	r0, r4, #4
   12d3c:	21ff      	movs	r1, #255	; 0xff
   12d3e:	9001      	str	r0, [sp, #4]
   12d40:	f001 fb72 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12d44:	9801      	ldr	r0, [sp, #4]
   12d46:	f001 fb29 	bl	1439c <SdSpiArduinoDriver::deactivate()>
}
   12d4a:	4630      	mov	r0, r6
    m_spiActive = false;
   12d4c:	74a5      	strb	r5, [r4, #18]
  }
   12d4e:	b002      	add	sp, #8
   12d50:	bd70      	pop	{r4, r5, r6, pc}
   12d52:	bf00      	nop

00012d54 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
   12d54:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
   12d56:	2200      	movs	r2, #0
   12d58:	b082      	sub	sp, #8
   12d5a:	460e      	mov	r6, r1
   12d5c:	210a      	movs	r1, #10
   12d5e:	4604      	mov	r4, r0
   12d60:	f7ff fbfa 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12d64:	b1b0      	cbz	r0, 12d94 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
   12d66:	231b      	movs	r3, #27
   12d68:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
   12d6a:	7ca0      	ldrb	r0, [r4, #18]
   12d6c:	b908      	cbnz	r0, 12d72 <SharedSpiCard::readCID(CID*)+0x1e>
  }
   12d6e:	b002      	add	sp, #8
   12d70:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
   12d72:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   12d74:	7c20      	ldrb	r0, [r4, #16]
   12d76:	2101      	movs	r1, #1
   12d78:	f001 faf0 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12d7c:	21ff      	movs	r1, #255	; 0xff
   12d7e:	4628      	mov	r0, r5
   12d80:	f001 fb52 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12d84:	4628      	mov	r0, r5
   12d86:	f001 fb09 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12d8a:	2300      	movs	r3, #0
  return false;
   12d8c:	4618      	mov	r0, r3
    m_spiActive = false;
   12d8e:	74a3      	strb	r3, [r4, #18]
  }
   12d90:	b002      	add	sp, #8
   12d92:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
   12d94:	4605      	mov	r5, r0
   12d96:	2210      	movs	r2, #16
   12d98:	4631      	mov	r1, r6
   12d9a:	4620      	mov	r0, r4
   12d9c:	f7ff fb32 	bl	12404 <SharedSpiCard::readData(unsigned char*, unsigned int)>
   12da0:	2800      	cmp	r0, #0
   12da2:	d0e2      	beq.n	12d6a <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
   12da4:	7ca6      	ldrb	r6, [r4, #18]
   12da6:	2e00      	cmp	r6, #0
   12da8:	d0e1      	beq.n	12d6e <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
   12daa:	7c20      	ldrb	r0, [r4, #16]
   12dac:	2101      	movs	r1, #1
   12dae:	f001 fad5 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12db2:	1d20      	adds	r0, r4, #4
   12db4:	21ff      	movs	r1, #255	; 0xff
   12db6:	9001      	str	r0, [sp, #4]
   12db8:	f001 fb36 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12dbc:	9801      	ldr	r0, [sp, #4]
   12dbe:	f001 faed 	bl	1439c <SdSpiArduinoDriver::deactivate()>
}
   12dc2:	4630      	mov	r0, r6
    m_spiActive = false;
   12dc4:	74a5      	strb	r5, [r4, #18]
  }
   12dc6:	b002      	add	sp, #8
   12dc8:	bd70      	pop	{r4, r5, r6, pc}
   12dca:	bf00      	nop

00012dcc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
   12dcc:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
   12dce:	1d05      	adds	r5, r0, #4
   12dd0:	4616      	mov	r6, r2
   12dd2:	4604      	mov	r4, r0
   12dd4:	4628      	mov	r0, r5
   12dd6:	f001 fb27 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
   12dda:	f44f 7200 	mov.w	r2, #512	; 0x200
   12dde:	4631      	mov	r1, r6
   12de0:	4628      	mov	r0, r5
   12de2:	f001 fb2b 	bl	1443c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
   12de6:	21ff      	movs	r1, #255	; 0xff
   12de8:	4628      	mov	r0, r5
   12dea:	f001 fb1d 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
   12dee:	21ff      	movs	r1, #255	; 0xff
   12df0:	4628      	mov	r0, r5
   12df2:	f001 fb19 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
   12df6:	4628      	mov	r0, r5
   12df8:	f001 fafc 	bl	143f4 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   12dfc:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
   12e00:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   12e02:	2b05      	cmp	r3, #5
   12e04:	d004      	beq.n	12e10 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
   12e06:	2320      	movs	r3, #32
  if (m_spiActive) {
   12e08:	7ca0      	ldrb	r0, [r4, #18]
   12e0a:	7463      	strb	r3, [r4, #17]
   12e0c:	b910      	cbnz	r0, 12e14 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
   12e0e:	bd70      	pop	{r4, r5, r6, pc}
  return true;
   12e10:	2001      	movs	r0, #1
}
   12e12:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
   12e14:	7c20      	ldrb	r0, [r4, #16]
   12e16:	2101      	movs	r1, #1
   12e18:	f001 faa0 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12e1c:	21ff      	movs	r1, #255	; 0xff
   12e1e:	4628      	mov	r0, r5
   12e20:	f001 fb02 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12e24:	4628      	mov	r0, r5
   12e26:	f001 fab9 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12e2a:	2300      	movs	r3, #0
}
   12e2c:	4618      	mov	r0, r3
    m_spiActive = false;
   12e2e:	74a3      	strb	r3, [r4, #18]
}
   12e30:	bd70      	pop	{r4, r5, r6, pc}
   12e32:	bf00      	nop

00012e34 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
   12e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e38:	4d17      	ldr	r5, [pc, #92]	; (12e98 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
   12e3a:	4606      	mov	r6, r0
   12e3c:	460f      	mov	r7, r1
    return m_spiDriver.receive();
   12e3e:	f100 0804 	add.w	r8, r0, #4
   12e42:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
   12e44:	f504 7416 	add.w	r4, r4, #600	; 0x258
   12e48:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
   12e4a:	e003      	b.n	12e54 <SharedSpiCard::writeData(unsigned char const*)+0x20>
   12e4c:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
   12e4e:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
   12e50:	041b      	lsls	r3, r3, #16
   12e52:	d40c      	bmi.n	12e6e <SharedSpiCard::writeData(unsigned char const*)+0x3a>
   12e54:	4640      	mov	r0, r8
   12e56:	f001 facd 	bl	143f4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
   12e5a:	28ff      	cmp	r0, #255	; 0xff
   12e5c:	d1f6      	bne.n	12e4c <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   12e5e:	463a      	mov	r2, r7
   12e60:	21fc      	movs	r1, #252	; 0xfc
   12e62:	4630      	mov	r0, r6
   12e64:	f7ff ffb2 	bl	12dcc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
   12e68:	b118      	cbz	r0, 12e72 <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
   12e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
   12e6e:	2324      	movs	r3, #36	; 0x24
   12e70:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
   12e72:	7cb0      	ldrb	r0, [r6, #18]
   12e74:	2800      	cmp	r0, #0
   12e76:	d0f8      	beq.n	12e6a <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
   12e78:	7c30      	ldrb	r0, [r6, #16]
   12e7a:	2101      	movs	r1, #1
   12e7c:	f001 fa6e 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12e80:	21ff      	movs	r1, #255	; 0xff
   12e82:	4640      	mov	r0, r8
   12e84:	f001 fad0 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12e88:	4640      	mov	r0, r8
   12e8a:	f001 fa87 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12e8e:	2300      	movs	r3, #0
}
   12e90:	4618      	mov	r0, r3
    m_spiActive = false;
   12e92:	74b3      	strb	r3, [r6, #18]
}
   12e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e98:	20013554 	.word	0x20013554

00012e9c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
   12e9c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
   12e9e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   12ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
   12ea2:	4616      	mov	r6, r2
   12ea4:	4a22      	ldr	r2, [pc, #136]	; (12f30 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
   12ea6:	b082      	sub	sp, #8
   12ea8:	4604      	mov	r4, r0
   12eaa:	460d      	mov	r5, r1
   12eac:	4293      	cmp	r3, r2
   12eae:	d13c      	bne.n	12f2a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
   12eb0:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
   12eb2:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
   12eb4:	f04f 0118 	mov.w	r1, #24
   12eb8:	4620      	mov	r0, r4
    sector <<= 9;
   12eba:	bf18      	it	ne
   12ebc:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
   12ebe:	462a      	mov	r2, r5
   12ec0:	f7ff fb4a 	bl	12558 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12ec4:	4605      	mov	r5, r0
   12ec6:	b1b0      	cbz	r0, 12ef6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
   12ec8:	230d      	movs	r3, #13
   12eca:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
   12ecc:	7ca0      	ldrb	r0, [r4, #18]
   12ece:	b908      	cbnz	r0, 12ed4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
   12ed0:	b002      	add	sp, #8
   12ed2:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
   12ed4:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   12ed6:	7c20      	ldrb	r0, [r4, #16]
   12ed8:	2101      	movs	r1, #1
   12eda:	f001 fa3f 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12ede:	21ff      	movs	r1, #255	; 0xff
   12ee0:	4628      	mov	r0, r5
   12ee2:	f001 faa1 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12ee6:	4628      	mov	r0, r5
   12ee8:	f001 fa58 	bl	1439c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12eec:	2300      	movs	r3, #0
  return false;
   12eee:	4618      	mov	r0, r3
    m_spiActive = false;
   12ef0:	74a3      	strb	r3, [r4, #18]
}
   12ef2:	b002      	add	sp, #8
   12ef4:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
   12ef6:	4632      	mov	r2, r6
   12ef8:	21fe      	movs	r1, #254	; 0xfe
   12efa:	4620      	mov	r0, r4
   12efc:	f7ff ff66 	bl	12dcc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
   12f00:	2800      	cmp	r0, #0
   12f02:	d0e3      	beq.n	12ecc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
   12f04:	7ca6      	ldrb	r6, [r4, #18]
   12f06:	2e00      	cmp	r6, #0
   12f08:	d0e2      	beq.n	12ed0 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
   12f0a:	7c20      	ldrb	r0, [r4, #16]
   12f0c:	2101      	movs	r1, #1
   12f0e:	f001 fa25 	bl	1435c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12f12:	1d20      	adds	r0, r4, #4
   12f14:	21ff      	movs	r1, #255	; 0xff
   12f16:	9001      	str	r0, [sp, #4]
   12f18:	f001 fa86 	bl	14428 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12f1c:	9801      	ldr	r0, [sp, #4]
   12f1e:	f001 fa3d 	bl	1439c <SdSpiArduinoDriver::deactivate()>
  return true;
   12f22:	4630      	mov	r0, r6
    m_spiActive = false;
   12f24:	74a5      	strb	r5, [r4, #18]
}
   12f26:	b002      	add	sp, #8
   12f28:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
   12f2a:	4798      	blx	r3
   12f2c:	e7c1      	b.n	12eb2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
   12f2e:	bf00      	nop
   12f30:	000121fd 	.word	0x000121fd

00012f34 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
   12f34:	b410      	push	{r4}
  if (m_dedicatedSpi) {
   12f36:	7f04      	ldrb	r4, [r0, #28]
   12f38:	b134      	cbz	r4, 12f48 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
   12f3a:	6804      	ldr	r4, [r0, #0]
   12f3c:	2301      	movs	r3, #1
   12f3e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
   12f40:	46a4      	mov	ip, r4
}
   12f42:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
   12f46:	4760      	bx	ip
}
   12f48:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
   12f4c:	f7ff bfa6 	b.w	12e9c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00012f50 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
   12f50:	b510      	push	{r4, lr}
   12f52:	b084      	sub	sp, #16
   12f54:	4604      	mov	r4, r0
   12f56:	f10d 0c04 	add.w	ip, sp, #4
   12f5a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
   12f5e:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
   12f62:	f7ff fb6d 	bl	12640 <SharedSpiCard::begin(SdSpiConfig)>
   12f66:	b120      	cbz	r0, 12f72 <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
   12f68:	f89d 3005 	ldrb.w	r3, [sp, #5]
   12f6c:	f003 0301 	and.w	r3, r3, #1
   12f70:	7723      	strb	r3, [r4, #28]
}
   12f72:	b004      	add	sp, #16
   12f74:	bd10      	pop	{r4, pc}
   12f76:	bf00      	nop

00012f78 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
   12f78:	2000      	movs	r0, #0
   12f7a:	4770      	bx	lr

00012f7c <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
   12f7c:	2000      	movs	r0, #0
   12f7e:	4770      	bx	lr

00012f80 <SdCardInterface::setDedicatedSpi(bool)>:
  }
   12f80:	2000      	movs	r0, #0
   12f82:	4770      	bx	lr

00012f84 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
   12f84:	4770      	bx	lr
   12f86:	bf00      	nop

00012f88 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
   12f88:	4b08      	ldr	r3, [pc, #32]	; (12fac <sdIrs()+0x24>)
   12f8a:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
   12f8c:	4a08      	ldr	r2, [pc, #32]	; (12fb0 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
   12f8e:	4809      	ldr	r0, [pc, #36]	; (12fb4 <sdIrs()+0x2c>)
static void sdIrs() {
   12f90:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
   12f92:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
   12f94:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   12f96:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
   12f98:	6812      	ldr	r2, [r2, #0]
}
   12f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
   12f9e:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
   12fa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   12fa2:	f022 0281 	bic.w	r2, r2, #129	; 0x81
   12fa6:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
   12fa8:	7001      	strb	r1, [r0, #0]
}
   12faa:	4770      	bx	lr
   12fac:	402c0000 	.word	0x402c0000
   12fb0:	2000adb8 	.word	0x2000adb8
   12fb4:	200136da 	.word	0x200136da

00012fb8 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   12fb8:	4b03      	ldr	r3, [pc, #12]	; (12fc8 <isBusyDat()+0x10>)
   12fba:	6a58      	ldr	r0, [r3, #36]	; 0x24
   12fbc:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
   12fc0:	f3c0 6000 	ubfx	r0, r0, #24, #1
   12fc4:	4770      	bx	lr
   12fc6:	bf00      	nop
   12fc8:	402c0000 	.word	0x402c0000

00012fcc <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
   12fcc:	4b01      	ldr	r3, [pc, #4]	; (12fd4 <isBusyDMA()+0x8>)
   12fce:	7818      	ldrb	r0, [r3, #0]
}
   12fd0:	4770      	bx	lr
   12fd2:	bf00      	nop
   12fd4:	200136da 	.word	0x200136da

00012fd8 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
   12fd8:	4a2b      	ldr	r2, [pc, #172]	; (13088 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12fda:	4b2c      	ldr	r3, [pc, #176]	; (1308c <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
   12fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12fde:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   12fe2:	492b      	ldr	r1, [pc, #172]	; (13090 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
   12fe4:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
   12fec:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
   12fee:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12ff0:	4c28      	ldr	r4, [pc, #160]	; (13094 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
   12ff2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12ff6:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
   12ffa:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12ffe:	089b      	lsrs	r3, r3, #2
   13000:	fbb1 fef3 	udiv	lr, r1, r3
   13004:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
   13008:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
   1300c:	d235      	bcs.n	1307a <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
   1300e:	2301      	movs	r3, #1
    sdclkfs <<= 1;
   13010:	461e      	mov	r6, r3
   13012:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
   13014:	011a      	lsls	r2, r3, #4
   13016:	fbbe f2f2 	udiv	r2, lr, r2
   1301a:	4282      	cmp	r2, r0
   1301c:	d901      	bls.n	13022 <setSdclk(unsigned long)+0x4a>
   1301e:	2bff      	cmp	r3, #255	; 0xff
   13020:	d9f6      	bls.n	13010 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   13022:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
   13026:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   13028:	4290      	cmp	r0, r2
   1302a:	d22a      	bcs.n	13082 <setSdclk(unsigned long)+0xaa>
   1302c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   13030:	2201      	movs	r2, #1
   13032:	e000      	b.n	13036 <setSdclk(unsigned long)+0x5e>
   13034:	46a4      	mov	ip, r4
    dvs++;
   13036:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   13038:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
   1303c:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   1303e:	fbbe f1fc 	udiv	r1, lr, ip
   13042:	4281      	cmp	r1, r0
   13044:	d917      	bls.n	13076 <setSdclk(unsigned long)+0x9e>
   13046:	2a10      	cmp	r2, #16
   13048:	d1f4      	bne.n	13034 <setSdclk(unsigned long)+0x5c>
   1304a:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
   1304c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   13050:	4911      	ldr	r1, [pc, #68]	; (13098 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
   13052:	4a12      	ldr	r2, [pc, #72]	; (1309c <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
   13054:	fb03 fc0c 	mul.w	ip, r3, ip
   13058:	fbbe f3fc 	udiv	r3, lr, ip
   1305c:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
   1305e:	4b10      	ldr	r3, [pc, #64]	; (130a0 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
   13060:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
   13062:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
   13064:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
   13066:	4333      	orrs	r3, r6
   13068:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
   1306c:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
   1306e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   13070:	071b      	lsls	r3, r3, #28
   13072:	d5fc      	bpl.n	1306e <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
   13074:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
   13076:	012d      	lsls	r5, r5, #4
   13078:	e7e8      	b.n	1304c <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
   1307a:	4672      	mov	r2, lr
   1307c:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
   1307e:	2301      	movs	r3, #1
   13080:	e7d2      	b.n	13028 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   13082:	469c      	mov	ip, r3
   13084:	2500      	movs	r5, #0
   13086:	e7e1      	b.n	1304c <setSdclk(unsigned long)+0x74>
   13088:	400fc000 	.word	0x400fc000
   1308c:	400d8000 	.word	0x400d8000
   13090:	5e69ec00 	.word	0x5e69ec00
   13094:	aaaaaaab 	.word	0xaaaaaaab
   13098:	2000ad80 	.word	0x2000ad80
   1309c:	402c0000 	.word	0x402c0000
   130a0:	fff0000f 	.word	0xfff0000f

000130a4 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
   130a4:	4b01      	ldr	r3, [pc, #4]	; (130ac <SdioCard::errorCode() const+0x8>)
}
   130a6:	7818      	ldrb	r0, [r3, #0]
   130a8:	4770      	bx	lr
   130aa:	bf00      	nop
   130ac:	20009cb6 	.word	0x20009cb6

000130b0 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
   130b0:	4b01      	ldr	r3, [pc, #4]	; (130b8 <SdioCard::errorData() const+0x8>)
   130b2:	6818      	ldr	r0, [r3, #0]
}
   130b4:	4770      	bx	lr
   130b6:	bf00      	nop
   130b8:	2000adb8 	.word	0x2000adb8

000130bc <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
   130bc:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
   130be:	4c07      	ldr	r4, [pc, #28]	; (130dc <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
   130c0:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
   130c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   130c4:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
   130c8:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
   130ca:	f8cc 1004 	str.w	r1, [ip, #4]
   130ce:	f8cc 2008 	str.w	r2, [ip, #8]
   130d2:	f8cc 300c 	str.w	r3, [ip, #12]
}
   130d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   130da:	4770      	bx	lr
   130dc:	2000ad8c 	.word	0x2000ad8c

000130e0 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
   130e0:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
   130e2:	4c07      	ldr	r4, [pc, #28]	; (13100 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
   130e4:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
   130e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   130e8:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
   130ec:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
   130ee:	f8cc 1004 	str.w	r1, [ip, #4]
   130f2:	f8cc 2008 	str.w	r2, [ip, #8]
   130f6:	f8cc 300c 	str.w	r3, [ip, #12]
}
   130fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   130fe:	4770      	bx	lr
   13100:	2000ad9c 	.word	0x2000ad9c

00013104 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
   13104:	4b02      	ldr	r3, [pc, #8]	; (13110 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
   13106:	2001      	movs	r0, #1
  *ocr = m_ocr;
   13108:	681b      	ldr	r3, [r3, #0]
   1310a:	600b      	str	r3, [r1, #0]
}
   1310c:	4770      	bx	lr
   1310e:	bf00      	nop
   13110:	2000adac 	.word	0x2000adac

00013114 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
   13114:	4770      	bx	lr
   13116:	bf00      	nop

00013118 <SdioCard::~SdioCard()>:
   13118:	b510      	push	{r4, lr}
   1311a:	4604      	mov	r4, r0
   1311c:	210c      	movs	r1, #12
   1311e:	f008 fe1f 	bl	1bd60 <operator delete(void*, unsigned int)>
   13122:	4620      	mov	r0, r4
   13124:	bd10      	pop	{r4, pc}
   13126:	bf00      	nop

00013128 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
   13128:	4b04      	ldr	r3, [pc, #16]	; (1313c <SdioCard::type() const+0x14>)
   1312a:	781b      	ldrb	r3, [r3, #0]
   1312c:	b123      	cbz	r3, 13138 <SdioCard::type() const+0x10>
   1312e:	4b04      	ldr	r3, [pc, #16]	; (13140 <SdioCard::type() const+0x18>)
   13130:	7818      	ldrb	r0, [r3, #0]
   13132:	3002      	adds	r0, #2
   13134:	b2c0      	uxtb	r0, r0
   13136:	4770      	bx	lr
   13138:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
   1313a:	4770      	bx	lr
   1313c:	200136d7 	.word	0x200136d7
   13140:	200136d8 	.word	0x200136d8

00013144 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
   13144:	4b18      	ldr	r3, [pc, #96]	; (131a8 <SdioCard::sectorCount()+0x64>)
   13146:	781a      	ldrb	r2, [r3, #0]
   13148:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
   1314c:	d00f      	beq.n	1316e <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
   1314e:	2a40      	cmp	r2, #64	; 0x40
   13150:	d001      	beq.n	13156 <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
   13152:	2000      	movs	r0, #0
}
   13154:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   13156:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
   13158:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   1315a:	7a19      	ldrb	r1, [r3, #8]
   1315c:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
   1315e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   13162:	eb00 4003 	add.w	r0, r0, r3, lsl #16
   13166:	eb00 2001 	add.w	r0, r0, r1, lsl #8
   1316a:	0280      	lsls	r0, r0, #10
   1316c:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
   1316e:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
   13170:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   13172:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
   13174:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   13178:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
   1317c:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   13180:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
   13182:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   13184:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
   13188:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
   1318a:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   1318e:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
   13192:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   13194:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
   13198:	3001      	adds	r0, #1
   1319a:	f003 030f 	and.w	r3, r3, #15
   1319e:	4413      	add	r3, r2
   131a0:	3b07      	subs	r3, #7
   131a2:	4098      	lsls	r0, r3
}
   131a4:	f85d fb04 	ldr.w	pc, [sp], #4
   131a8:	2000ad9c 	.word	0x2000ad9c

000131ac <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
   131ac:	4a40      	ldr	r2, [pc, #256]	; (132b0 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   131ae:	2005      	movs	r0, #5
   131b0:	4940      	ldr	r1, [pc, #256]	; (132b4 <initSDHC()+0x108>)
static void initSDHC() {
   131b2:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
   131b4:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
   131b8:	4b3f      	ldr	r3, [pc, #252]	; (132b8 <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
   131ba:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
   131be:	4d3f      	ldr	r5, [pc, #252]	; (132bc <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
   131c0:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
   131c4:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
   131c8:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
   131cc:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
   131d0:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
   131d4:	f044 0418 	orr.w	r4, r4, #24
   131d8:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
   131dc:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
   131e0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   131e4:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
   131e8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   131ec:	f042 020c 	orr.w	r2, r2, #12
   131f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
   131f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   131f6:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
   131fa:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
   131fc:	69da      	ldr	r2, [r3, #28]
   131fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   13202:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
   13204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1320a:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   1320c:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
   13210:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
   13214:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
   13218:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
   1321c:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
   13220:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
   13224:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
   13226:	4b26      	ldr	r3, [pc, #152]	; (132c0 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
   13228:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1322c:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
   1322e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   13230:	4313      	orrs	r3, r2
   13232:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
   13234:	6aec      	ldr	r4, [r5, #44]	; 0x2c
   13236:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
   1323a:	d1fb      	bne.n	13234 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
   1323c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   13240:	f7ff feca 	bl	12fd8 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   13244:	4b1b      	ldr	r3, [pc, #108]	; (132b4 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
   13246:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
   1324a:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   1324e:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
   13252:	481c      	ldr	r0, [pc, #112]	; (132c4 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
   13254:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
   13258:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
   1325c:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
   13260:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
   13264:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
   13268:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
   1326c:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
   13270:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
   13274:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
   13278:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   1327c:	4912      	ldr	r1, [pc, #72]	; (132c8 <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
   1327e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
   13282:	4b12      	ldr	r3, [pc, #72]	; (132cc <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
   13284:	6368      	str	r0, [r5, #52]	; 0x34
   13286:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
   1328a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1328e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
   13292:	490f      	ldr	r1, [pc, #60]	; (132d0 <initSDHC()+0x124>)
   13294:	2060      	movs	r0, #96	; 0x60
   13296:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
   1329a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
   1329e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
   132a0:	4a06      	ldr	r2, [pc, #24]	; (132bc <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
   132a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   132a6:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
   132a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   132aa:	011b      	lsls	r3, r3, #4
   132ac:	d4fc      	bmi.n	132a8 <initSDHC()+0xfc>
}
   132ae:	bd38      	pop	{r3, r4, r5, pc}
   132b0:	400d8000 	.word	0x400d8000
   132b4:	401f8000 	.word	0x401f8000
   132b8:	400fc000 	.word	0x400fc000
   132bc:	402c0000 	.word	0x402c0000
   132c0:	01008000 	.word	0x01008000
   132c4:	117f000b 	.word	0x117f000b
   132c8:	2000a000 	.word	0x2000a000
   132cc:	00012f89 	.word	0x00012f89
   132d0:	e000e400 	.word	0xe000e400

000132d4 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
   132d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
   132d8:	f008 f980 	bl	1b5dc <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   132dc:	4e17      	ldr	r6, [pc, #92]	; (1333c <waitTransferComplete() [clone .part.0]+0x68>)
   132de:	4d18      	ldr	r5, [pc, #96]	; (13340 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
   132e0:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   132e2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 13358 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
   132e6:	e004      	b.n	132f2 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   132e8:	f008 f978 	bl	1b5dc <micros>
   132ec:	1bc0      	subs	r0, r0, r7
   132ee:	4540      	cmp	r0, r8
   132f0:	d81b      	bhi.n	1332a <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   132f2:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
   132f4:	402c      	ands	r4, r5
   132f6:	d0f7      	beq.n	132e8 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
   132f8:	4a12      	ldr	r2, [pc, #72]	; (13344 <waitTransferComplete() [clone .part.0]+0x70>)
   132fa:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
   132fc:	4b12      	ldr	r3, [pc, #72]	; (13348 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
   132fe:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
   13300:	6b32      	ldr	r2, [r6, #48]	; 0x30
   13302:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
   13304:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
   13306:	4a11      	ldr	r2, [pc, #68]	; (1334c <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
   13308:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
   1330a:	681b      	ldr	r3, [r3, #0]
   1330c:	4213      	tst	r3, r2
   1330e:	d009      	beq.n	13324 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
   13310:	490f      	ldr	r1, [pc, #60]	; (13350 <waitTransferComplete() [clone .part.0]+0x7c>)
   13312:	241f      	movs	r4, #31
  m_errorLine = line;
   13314:	4b0f      	ldr	r3, [pc, #60]	; (13354 <waitTransferComplete() [clone .part.0]+0x80>)
   13316:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
   1331a:	2000      	movs	r0, #0
  m_errorCode = code;
   1331c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   1331e:	601a      	str	r2, [r3, #0]
}
   13320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
   13324:	2001      	movs	r0, #1
}
   13326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
   1332a:	4a06      	ldr	r2, [pc, #24]	; (13344 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
   1332c:	4b06      	ldr	r3, [pc, #24]	; (13348 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
   1332e:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
   13330:	6b32      	ldr	r2, [r6, #48]	; 0x30
   13332:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
   13334:	681b      	ldr	r3, [r3, #0]
   13336:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
   13338:	e7ea      	b.n	13310 <waitTransferComplete() [clone .part.0]+0x3c>
   1333a:	bf00      	nop
   1333c:	402c0000 	.word	0x402c0000
   13340:	117f0002 	.word	0x117f0002
   13344:	200136d9 	.word	0x200136d9
   13348:	2000adb8 	.word	0x2000adb8
   1334c:	117f0000 	.word	0x117f0000
   13350:	20009cb6 	.word	0x20009cb6
   13354:	2000ad84 	.word	0x2000ad84
   13358:	000f4240 	.word	0x000f4240

0001335c <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
   1335c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
   13360:	4c26      	ldr	r4, [pc, #152]	; (133fc <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
   13362:	460f      	mov	r7, r1
  if (!m_transferActive) {
   13364:	7823      	ldrb	r3, [r4, #0]
   13366:	2b00      	cmp	r3, #0
   13368:	d138      	bne.n	133dc <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
   1336a:	4b25      	ldr	r3, [pc, #148]	; (13400 <SdioCard::writeData(unsigned char const*)+0xa4>)
   1336c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1336e:	05d2      	lsls	r2, r2, #23
   13370:	d52b      	bpl.n	133ca <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   13372:	4d23      	ldr	r5, [pc, #140]	; (13400 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13374:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1340c <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   13378:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1337a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1337e:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
   13380:	f008 f92c 	bl	1b5dc <micros>
   13384:	4606      	mov	r6, r0
  while (fcn()) {
   13386:	e004      	b.n	13392 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13388:	f008 f928 	bl	1b5dc <micros>
   1338c:	1b80      	subs	r0, r0, r6
   1338e:	4540      	cmp	r0, r8
   13390:	d82a      	bhi.n	133e8 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
   13392:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
   13394:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
   13398:	d0f6      	beq.n	13388 <SdioCard::writeData(unsigned char const*)+0x2c>
   1339a:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
   1339e:	4818      	ldr	r0, [pc, #96]	; (13400 <SdioCard::writeData(unsigned char const*)+0xa4>)
   133a0:	f507 770f 	add.w	r7, r7, #572	; 0x23c
   133a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   133a6:	055b      	lsls	r3, r3, #21
   133a8:	d5fc      	bpl.n	133a4 <SdioCard::writeData(unsigned char const*)+0x48>
   133aa:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
   133ae:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
   133b2:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
   133b4:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
   133b6:	d1fa      	bne.n	133ae <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
   133b8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
   133bc:	45bc      	cmp	ip, r7
   133be:	d1f1      	bne.n	133a4 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
   133c0:	2301      	movs	r3, #1
  return true;
   133c2:	4618      	mov	r0, r3
  m_transferActive = true;
   133c4:	7023      	strb	r3, [r4, #0]
}
   133c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   133ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   133cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   133d0:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
   133d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   133d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   133d8:	629a      	str	r2, [r3, #40]	; 0x28
   133da:	e7ca      	b.n	13372 <SdioCard::writeData(unsigned char const*)+0x16>
   133dc:	f7ff ff7a 	bl	132d4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
   133e0:	2800      	cmp	r0, #0
   133e2:	d1c2      	bne.n	1336a <SdioCard::writeData(unsigned char const*)+0xe>
}
   133e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
   133e8:	4906      	ldr	r1, [pc, #24]	; (13404 <SdioCard::writeData(unsigned char const*)+0xa8>)
   133ea:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
   133ec:	4b06      	ldr	r3, [pc, #24]	; (13408 <SdioCard::writeData(unsigned char const*)+0xac>)
   133ee:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
   133f2:	4648      	mov	r0, r9
  m_errorCode = code;
   133f4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   133f6:	601a      	str	r2, [r3, #0]
}
   133f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   133fc:	200136d9 	.word	0x200136d9
   13400:	402c0000 	.word	0x402c0000
   13404:	20009cb6 	.word	0x20009cb6
   13408:	2000ad84 	.word	0x2000ad84
   1340c:	000f4240 	.word	0x000f4240

00013410 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
   13410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13414:	4607      	mov	r7, r0
   13416:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
   13418:	4c1f      	ldr	r4, [pc, #124]	; (13498 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
   1341a:	f008 f8df 	bl	1b5dc <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   1341e:	4e1f      	ldr	r6, [pc, #124]	; (1349c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
   13420:	4605      	mov	r5, r0
  while (fcn()) {
   13422:	e004      	b.n	1342e <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13424:	f008 f8da 	bl	1b5dc <micros>
   13428:	1b43      	subs	r3, r0, r5
   1342a:	42b3      	cmp	r3, r6
   1342c:	d824      	bhi.n	13478 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
   1342e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
   13430:	07d9      	lsls	r1, r3, #31
   13432:	d4f7      	bmi.n	13424 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
   13434:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
   13436:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
   1343a:	d420      	bmi.n	1347e <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
   1343c:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
   13440:	4c15      	ldr	r4, [pc, #84]	; (13498 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
   13442:	4e17      	ldr	r6, [pc, #92]	; (134a0 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
   13444:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
   13446:	f008 f8c9 	bl	1b5dc <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   1344a:	4f14      	ldr	r7, [pc, #80]	; (1349c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
   1344c:	4605      	mov	r5, r0
  while (fcn()) {
   1344e:	e004      	b.n	1345a <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13450:	f008 f8c4 	bl	1b5dc <micros>
   13454:	1b40      	subs	r0, r0, r5
   13456:	42b8      	cmp	r0, r7
   13458:	d80e      	bhi.n	13478 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
   1345a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
   1345c:	4233      	tst	r3, r6
   1345e:	d0f7      	beq.n	13450 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
   13460:	6b22      	ldr	r2, [r4, #48]	; 0x30
   13462:	4b10      	ldr	r3, [pc, #64]	; (134a4 <cardCommand(unsigned long, unsigned long)+0x94>)
   13464:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
   13466:	681a      	ldr	r2, [r3, #0]
   13468:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
   1346a:	681a      	ldr	r2, [r3, #0]
   1346c:	07d2      	lsls	r2, r2, #31
   1346e:	d503      	bpl.n	13478 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
   13470:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
   13472:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
   13476:	d00b      	beq.n	13490 <cardCommand(unsigned long, unsigned long)+0x80>
   13478:	2000      	movs	r0, #0
}
   1347a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
   1347e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
   13480:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
   13482:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13486:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
   13488:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1348a:	4313      	orrs	r3, r2
   1348c:	64a3      	str	r3, [r4, #72]	; 0x48
   1348e:	e7d5      	b.n	1343c <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
   13490:	2001      	movs	r0, #1
}
   13492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13496:	bf00      	nop
   13498:	402c0000 	.word	0x402c0000
   1349c:	000f4240 	.word	0x000f4240
   134a0:	000f0001 	.word	0x000f0001
   134a4:	2000adb8 	.word	0x2000adb8

000134a8 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
   134a8:	4b15      	ldr	r3, [pc, #84]	; (13500 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
   134aa:	b530      	push	{r4, r5, lr}
   134ac:	460d      	mov	r5, r1
   134ae:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
   134b0:	6819      	ldr	r1, [r3, #0]
   134b2:	f7ff ffad 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   134b6:	b308      	cbz	r0, 134fc <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
   134b8:	4b12      	ldr	r3, [pc, #72]	; (13504 <readReg16(unsigned long, void*)+0x5c>)
   134ba:	f105 040f 	add.w	r4, r5, #15
   134be:	691a      	ldr	r2, [r3, #16]
   134c0:	9200      	str	r2, [sp, #0]
   134c2:	6959      	ldr	r1, [r3, #20]
   134c4:	9101      	str	r1, [sp, #4]
   134c6:	6999      	ldr	r1, [r3, #24]
   134c8:	9102      	str	r1, [sp, #8]
   134ca:	69db      	ldr	r3, [r3, #28]
   134cc:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
   134ce:	2300      	movs	r3, #0
   134d0:	e001      	b.n	134d6 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
   134d2:	f85e 2c10 	ldr.w	r2, [lr, #-16]
   134d6:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
   134da:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
   134dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   134e0:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
   134e4:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
   134e6:	fa22 f20c 	lsr.w	r2, r2, ip
   134ea:	f10e 0110 	add.w	r1, lr, #16
   134ee:	f804 2d01 	strb.w	r2, [r4, #-1]!
   134f2:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
   134f6:	d1ec      	bne.n	134d2 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
   134f8:	2300      	movs	r3, #0
   134fa:	73eb      	strb	r3, [r5, #15]
}
   134fc:	b005      	add	sp, #20
   134fe:	bd30      	pop	{r4, r5, pc}
   13500:	2000adb0 	.word	0x2000adb0
   13504:	402c0000 	.word	0x402c0000

00013508 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
   13508:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
   1350a:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
   1350c:	07db      	lsls	r3, r3, #31
   1350e:	d505      	bpl.n	1351c <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
   13510:	4b15      	ldr	r3, [pc, #84]	; (13568 <SdioCard::isBusy()+0x60>)
   13512:	681b      	ldr	r3, [r3, #0]
   13514:	b1b3      	cbz	r3, 13544 <SdioCard::isBusy()+0x3c>
}
   13516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
   1351a:	4718      	bx	r3
    if (m_transferActive) {
   1351c:	4b13      	ldr	r3, [pc, #76]	; (1356c <SdioCard::isBusy()+0x64>)
   1351e:	781b      	ldrb	r3, [r3, #0]
   13520:	b93b      	cbnz	r3, 13532 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
   13522:	4b13      	ldr	r3, [pc, #76]	; (13570 <SdioCard::isBusy()+0x68>)
   13524:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   13526:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
   1352a:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
   1352e:	4620      	mov	r0, r4
   13530:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   13532:	4b0f      	ldr	r3, [pc, #60]	; (13570 <SdioCard::isBusy()+0x68>)
   13534:	4c0f      	ldr	r4, [pc, #60]	; (13574 <SdioCard::isBusy()+0x6c>)
   13536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13538:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
   1353a:	fab4 f484 	clz	r4, r4
   1353e:	0964      	lsrs	r4, r4, #5
}
   13540:	4620      	mov	r0, r4
   13542:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
   13544:	4b0c      	ldr	r3, [pc, #48]	; (13578 <SdioCard::isBusy()+0x70>)
   13546:	781c      	ldrb	r4, [r3, #0]
   13548:	2c00      	cmp	r4, #0
   1354a:	d0f0      	beq.n	1352e <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   1354c:	4b0b      	ldr	r3, [pc, #44]	; (1357c <SdioCard::isBusy()+0x74>)
   1354e:	480c      	ldr	r0, [pc, #48]	; (13580 <SdioCard::isBusy()+0x78>)
   13550:	6819      	ldr	r1, [r3, #0]
   13552:	f7ff ff5d 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13556:	2800      	cmp	r0, #0
   13558:	d0e9      	beq.n	1352e <SdioCard::isBusy()+0x26>
   1355a:	4b05      	ldr	r3, [pc, #20]	; (13570 <SdioCard::isBusy()+0x68>)
   1355c:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
   1355e:	f484 7480 	eor.w	r4, r4, #256	; 0x100
   13562:	f3c4 2400 	ubfx	r4, r4, #8, #1
   13566:	e7e2      	b.n	1352e <SdioCard::isBusy()+0x26>
   13568:	2000adb4 	.word	0x2000adb4
   1356c:	200136d9 	.word	0x200136d9
   13570:	402c0000 	.word	0x402c0000
   13574:	117f0002 	.word	0x117f0002
   13578:	200136d6 	.word	0x200136d6
   1357c:	2000adb0 	.word	0x2000adb0
   13580:	0d1a0000 	.word	0x0d1a0000

00013584 <SdioCard::status()>:
uint32_t SdioCard::status() {
   13584:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13586:	4b04      	ldr	r3, [pc, #16]	; (13598 <SdioCard::status()+0x14>)
   13588:	4804      	ldr	r0, [pc, #16]	; (1359c <SdioCard::status()+0x18>)
   1358a:	6819      	ldr	r1, [r3, #0]
   1358c:	f7ff ff40 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13590:	b108      	cbz	r0, 13596 <SdioCard::status()+0x12>
   13592:	4b03      	ldr	r3, [pc, #12]	; (135a0 <SdioCard::status()+0x1c>)
   13594:	6918      	ldr	r0, [r3, #16]
}
   13596:	bd08      	pop	{r3, pc}
   13598:	2000adb0 	.word	0x2000adb0
   1359c:	0d1a0000 	.word	0x0d1a0000
   135a0:	402c0000 	.word	0x402c0000

000135a4 <isBusyCMD13()>:
static bool isBusyCMD13() {
   135a4:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   135a6:	4b07      	ldr	r3, [pc, #28]	; (135c4 <isBusyCMD13()+0x20>)
   135a8:	4807      	ldr	r0, [pc, #28]	; (135c8 <isBusyCMD13()+0x24>)
   135aa:	6819      	ldr	r1, [r3, #0]
   135ac:	f7ff ff30 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   135b0:	b130      	cbz	r0, 135c0 <isBusyCMD13()+0x1c>
   135b2:	4b06      	ldr	r3, [pc, #24]	; (135cc <isBusyCMD13()+0x28>)
   135b4:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
   135b6:	f480 7080 	eor.w	r0, r0, #256	; 0x100
   135ba:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   135be:	bd08      	pop	{r3, pc}
   135c0:	2001      	movs	r0, #1
   135c2:	bd08      	pop	{r3, pc}
   135c4:	2000adb0 	.word	0x2000adb0
   135c8:	0d1a0000 	.word	0x0d1a0000
   135cc:	402c0000 	.word	0x402c0000

000135d0 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
   135d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
   135d4:	4b29      	ldr	r3, [pc, #164]	; (1367c <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
   135d6:	4689      	mov	r9, r1
  m_busyFcn = fcn;
   135d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 1369c <SdioCard::writeStart(unsigned long)+0xcc>
   135dc:	4e28      	ldr	r6, [pc, #160]	; (13680 <SdioCard::writeStart(unsigned long)+0xb0>)
   135de:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
   135e2:	f007 fffb 	bl	1b5dc <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   135e6:	4d27      	ldr	r5, [pc, #156]	; (13684 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
   135e8:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   135ea:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 136a0 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   135ee:	4f26      	ldr	r7, [pc, #152]	; (13688 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
   135f0:	e006      	b.n	13600 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   135f2:	f007 fff3 	bl	1b5dc <micros>
   135f6:	1b00      	subs	r0, r0, r4
   135f8:	42b8      	cmp	r0, r7
   135fa:	d829      	bhi.n	13650 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
   135fc:	f009 ffec 	bl	1d5d8 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13600:	6831      	ldr	r1, [r6, #0]
   13602:	4628      	mov	r0, r5
   13604:	f7ff ff04 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13608:	2800      	cmp	r0, #0
   1360a:	d0f2      	beq.n	135f2 <SdioCard::writeStart(unsigned long)+0x22>
   1360c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
   13610:	05db      	lsls	r3, r3, #23
   13612:	d5ee      	bpl.n	135f2 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
   13614:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
   13616:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
   1361a:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   1361e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   13622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   13626:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   1362a:	4b18      	ldr	r3, [pc, #96]	; (1368c <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
   1362c:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   13630:	781b      	ldrb	r3, [r3, #0]
   13632:	b1cb      	cbz	r3, 13668 <SdioCard::writeStart(unsigned long)+0x98>
   13634:	4649      	mov	r1, r9
   13636:	4816      	ldr	r0, [pc, #88]	; (13690 <SdioCard::writeStart(unsigned long)+0xc0>)
   13638:	f7ff feea 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   1363c:	b930      	cbnz	r0, 1364c <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
   1363e:	4915      	ldr	r1, [pc, #84]	; (13694 <SdioCard::writeStart(unsigned long)+0xc4>)
   13640:	240e      	movs	r4, #14
  m_errorLine = line;
   13642:	4b15      	ldr	r3, [pc, #84]	; (13698 <SdioCard::writeStart(unsigned long)+0xc8>)
   13644:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
   13648:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   1364a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
   1364c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
   13650:	4a10      	ldr	r2, [pc, #64]	; (13694 <SdioCard::writeStart(unsigned long)+0xc4>)
   13652:	210a      	movs	r1, #10
      m_busyFcn = 0;
   13654:	2000      	movs	r0, #0
  m_errorLine = line;
   13656:	4b10      	ldr	r3, [pc, #64]	; (13698 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
   13658:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   1365a:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
   1365e:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
   13662:	601a      	str	r2, [r3, #0]
}
   13664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   13668:	ea4f 2949 	mov.w	r9, r9, lsl #9
   1366c:	4808      	ldr	r0, [pc, #32]	; (13690 <SdioCard::writeStart(unsigned long)+0xc0>)
   1366e:	4649      	mov	r1, r9
   13670:	f7ff fece 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13674:	2800      	cmp	r0, #0
   13676:	d1e9      	bne.n	1364c <SdioCard::writeStart(unsigned long)+0x7c>
   13678:	e7e1      	b.n	1363e <SdioCard::writeStart(unsigned long)+0x6e>
   1367a:	bf00      	nop
   1367c:	000135a5 	.word	0x000135a5
   13680:	2000adb0 	.word	0x2000adb0
   13684:	0d1a0000 	.word	0x0d1a0000
   13688:	000f4240 	.word	0x000f4240
   1368c:	200136d8 	.word	0x200136d8
   13690:	193a0020 	.word	0x193a0020
   13694:	20009cb6 	.word	0x20009cb6
   13698:	2000ad84 	.word	0x2000ad84
   1369c:	2000adb4 	.word	0x2000adb4
   136a0:	402c0000 	.word	0x402c0000

000136a4 <SdioCard::readStop()>:
bool SdioCard::readStop() {
   136a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   136a8:	4c25      	ldr	r4, [pc, #148]	; (13740 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   136aa:	2100      	movs	r1, #0
   136ac:	4825      	ldr	r0, [pc, #148]	; (13744 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   136ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   136b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   136b4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   136b6:	f7ff feab 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   136ba:	4605      	mov	r5, r0
   136bc:	b948      	cbnz	r0, 136d2 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
   136be:	4922      	ldr	r1, [pc, #136]	; (13748 <SdioCard::readStop()+0xa4>)
   136c0:	2009      	movs	r0, #9
  m_errorLine = line;
   136c2:	4b22      	ldr	r3, [pc, #136]	; (1374c <SdioCard::readStop()+0xa8>)
   136c4:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
   136c8:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   136ca:	601a      	str	r2, [r3, #0]
}
   136cc:	4628      	mov	r0, r5
   136ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
   136d2:	4b1f      	ldr	r3, [pc, #124]	; (13750 <SdioCard::readStop()+0xac>)
   136d4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 13758 <SdioCard::readStop()+0xb4>
   136d8:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
   136dc:	f007 ff7e 	bl	1b5dc <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   136e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
   136e2:	4606      	mov	r6, r0
  while (fcn()) {
   136e4:	01d8      	lsls	r0, r3, #7
   136e6:	d418      	bmi.n	1371a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   136e8:	4f1a      	ldr	r7, [pc, #104]	; (13754 <SdioCard::readStop()+0xb0>)
   136ea:	e004      	b.n	136f6 <SdioCard::readStop()+0x52>
    yield();
   136ec:	f009 ff74 	bl	1d5d8 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   136f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
   136f2:	01d9      	lsls	r1, r3, #7
   136f4:	d411      	bmi.n	1371a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   136f6:	f007 ff71 	bl	1b5dc <micros>
   136fa:	1b83      	subs	r3, r0, r6
   136fc:	42bb      	cmp	r3, r7
   136fe:	d9f5      	bls.n	136ec <SdioCard::readStop()+0x48>
  m_errorCode = code;
   13700:	4a11      	ldr	r2, [pc, #68]	; (13748 <SdioCard::readStop()+0xa4>)
   13702:	210a      	movs	r1, #10
      m_busyFcn = 0;
   13704:	2500      	movs	r5, #0
  m_errorLine = line;
   13706:	4b11      	ldr	r3, [pc, #68]	; (1374c <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
   13708:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   1370a:	f44f 7210 	mov.w	r2, #576	; 0x240
}
   1370e:	4628      	mov	r0, r5
      m_busyFcn = 0;
   13710:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
   13714:	601a      	str	r2, [r3, #0]
}
   13716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
   1371a:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
   1371c:	4b08      	ldr	r3, [pc, #32]	; (13740 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
   1371e:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
   13722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13724:	0792      	lsls	r2, r2, #30
   13726:	d5d1      	bpl.n	136cc <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
   13728:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
   1372a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
   1372c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
   1372e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
   13732:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
   13736:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
   13738:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
   1373a:	629a      	str	r2, [r3, #40]	; 0x28
   1373c:	e7c6      	b.n	136cc <SdioCard::readStop()+0x28>
   1373e:	bf00      	nop
   13740:	402c0000 	.word	0x402c0000
   13744:	0cdb0000 	.word	0x0cdb0000
   13748:	20009cb6 	.word	0x20009cb6
   1374c:	2000ad84 	.word	0x2000ad84
   13750:	00012fb9 	.word	0x00012fb9
   13754:	000f4240 	.word	0x000f4240
   13758:	2000adb4 	.word	0x2000adb4

0001375c <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
   1375c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13760:	4682      	mov	sl, r0
   13762:	4689      	mov	r9, r1
   13764:	4e36      	ldr	r6, [pc, #216]	; (13840 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
   13766:	f007 ff39 	bl	1b5dc <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   1376a:	4d36      	ldr	r5, [pc, #216]	; (13844 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
   1376c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   1376e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 13870 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13772:	4f35      	ldr	r7, [pc, #212]	; (13848 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
   13774:	e004      	b.n	13780 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13776:	f007 ff31 	bl	1b5dc <micros>
   1377a:	1b03      	subs	r3, r0, r4
   1377c:	42bb      	cmp	r3, r7
   1377e:	d827      	bhi.n	137d0 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13780:	6831      	ldr	r1, [r6, #0]
   13782:	4628      	mov	r0, r5
   13784:	f7ff fe44 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13788:	2800      	cmp	r0, #0
   1378a:	d0f4      	beq.n	13776 <cardCMD6(unsigned long, unsigned char*)+0x1a>
   1378c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
   13790:	05da      	lsls	r2, r3, #23
   13792:	d5f0      	bpl.n	13776 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
   13794:	2301      	movs	r3, #1
   13796:	4d2d      	ldr	r5, [pc, #180]	; (1384c <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
   13798:	4f2d      	ldr	r7, [pc, #180]	; (13850 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
   1379a:	4651      	mov	r1, sl
  m_dmaBusy = true;
   1379c:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
   1379e:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
   137a0:	482c      	ldr	r0, [pc, #176]	; (13854 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
   137a2:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
   137a4:	4b2c      	ldr	r3, [pc, #176]	; (13858 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
   137a6:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
   137aa:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
   137ae:	4b2b      	ldr	r3, [pc, #172]	; (1385c <cardCMD6(unsigned long, unsigned char*)+0x100>)
   137b0:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
   137b4:	f7ff fe2c 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   137b8:	4604      	mov	r4, r0
   137ba:	b9a0      	cbnz	r0, 137e6 <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
   137bc:	4928      	ldr	r1, [pc, #160]	; (13860 <cardCMD6(unsigned long, unsigned char*)+0x104>)
   137be:	2004      	movs	r0, #4
  m_errorLine = line;
   137c0:	4b28      	ldr	r3, [pc, #160]	; (13864 <cardCMD6(unsigned long, unsigned char*)+0x108>)
   137c2:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
   137c6:	7008      	strb	r0, [r1, #0]
}
   137c8:	4620      	mov	r0, r4
  m_errorLine = line;
   137ca:	601a      	str	r2, [r3, #0]
}
   137cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
   137d0:	4923      	ldr	r1, [pc, #140]	; (13860 <cardCMD6(unsigned long, unsigned char*)+0x104>)
   137d2:	200a      	movs	r0, #10
  m_errorLine = line;
   137d4:	4b23      	ldr	r3, [pc, #140]	; (13864 <cardCMD6(unsigned long, unsigned char*)+0x108>)
   137d6:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
   137da:	2400      	movs	r4, #0
  m_errorCode = code;
   137dc:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   137de:	601a      	str	r2, [r3, #0]
}
   137e0:	4620      	mov	r0, r4
   137e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
   137e6:	4b20      	ldr	r3, [pc, #128]	; (13868 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
   137e8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 13874 <cardCMD6(unsigned long, unsigned char*)+0x118>
   137ec:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
   137f0:	f007 fef4 	bl	1b5dc <micros>
  return m_dmaBusy;
   137f4:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
   137f6:	4606      	mov	r6, r0
  while (fcn()) {
   137f8:	b1bb      	cbz	r3, 1382a <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   137fa:	f8df 804c 	ldr.w	r8, [pc, #76]	; 13848 <cardCMD6(unsigned long, unsigned char*)+0xec>
   137fe:	e003      	b.n	13808 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
   13800:	f009 feea 	bl	1d5d8 <yield>
  return m_dmaBusy;
   13804:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
   13806:	b183      	cbz	r3, 1382a <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13808:	f007 fee8 	bl	1b5dc <micros>
   1380c:	1b83      	subs	r3, r0, r6
   1380e:	4543      	cmp	r3, r8
   13810:	d9f6      	bls.n	13800 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
   13812:	2300      	movs	r3, #0
   13814:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
   13818:	4911      	ldr	r1, [pc, #68]	; (13860 <cardCMD6(unsigned long, unsigned char*)+0x104>)
   1381a:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
   1381c:	4b11      	ldr	r3, [pc, #68]	; (13864 <cardCMD6(unsigned long, unsigned char*)+0x108>)
   1381e:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
   13822:	2400      	movs	r4, #0
  m_errorCode = code;
   13824:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   13826:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
   13828:	e7da      	b.n	137e0 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   1382a:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
   1382c:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   1382e:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
   13830:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   13834:	d5f0      	bpl.n	13818 <cardCMD6(unsigned long, unsigned char*)+0xbc>
   13836:	683a      	ldr	r2, [r7, #0]
   13838:	4b0c      	ldr	r3, [pc, #48]	; (1386c <cardCMD6(unsigned long, unsigned char*)+0x110>)
   1383a:	421a      	tst	r2, r3
   1383c:	d0d0      	beq.n	137e0 <cardCMD6(unsigned long, unsigned char*)+0x84>
   1383e:	e7eb      	b.n	13818 <cardCMD6(unsigned long, unsigned char*)+0xbc>
   13840:	2000adb0 	.word	0x2000adb0
   13844:	0d1a0000 	.word	0x0d1a0000
   13848:	000f4240 	.word	0x000f4240
   1384c:	200136da 	.word	0x200136da
   13850:	2000adb8 	.word	0x2000adb8
   13854:	063a0011 	.word	0x063a0011
   13858:	00010040 	.word	0x00010040
   1385c:	117f0002 	.word	0x117f0002
   13860:	20009cb6 	.word	0x20009cb6
   13864:	2000ad84 	.word	0x2000ad84
   13868:	00012fcd 	.word	0x00012fcd
   1386c:	117f0000 	.word	0x117f0000
   13870:	402c0000 	.word	0x402c0000
   13874:	2000adb4 	.word	0x2000adb4

00013878 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
   13878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
   1387c:	4d32      	ldr	r5, [pc, #200]	; (13948 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
   1387e:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
   13880:	7aab      	ldrb	r3, [r5, #10]
   13882:	f013 0040 	ands.w	r0, r3, #64	; 0x40
   13886:	d112      	bne.n	138ae <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
   13888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1388c:	7aea      	ldrb	r2, [r5, #11]
   1388e:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
   13890:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
   13894:	1c62      	adds	r2, r4, #1
   13896:	430a      	orrs	r2, r1
   13898:	4213      	tst	r3, r2
   1389a:	d008      	beq.n	138ae <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
   1389c:	492b      	ldr	r1, [pc, #172]	; (1394c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
   1389e:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
   138a0:	4b2b      	ldr	r3, [pc, #172]	; (13950 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
   138a2:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
   138a6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   138a8:	601a      	str	r2, [r3, #0]
}
   138aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
   138ae:	4b29      	ldr	r3, [pc, #164]	; (13954 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
   138b0:	781b      	ldrb	r3, [r3, #0]
   138b2:	b90b      	cbnz	r3, 138b8 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
   138b4:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
   138b6:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
   138b8:	4827      	ldr	r0, [pc, #156]	; (13958 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
   138ba:	f7ff fda9 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   138be:	b940      	cbnz	r0, 138d2 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
   138c0:	4922      	ldr	r1, [pc, #136]	; (1394c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
   138c2:	240f      	movs	r4, #15
  m_errorLine = line;
   138c4:	4b22      	ldr	r3, [pc, #136]	; (13950 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
   138c6:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
   138ca:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   138cc:	601a      	str	r2, [r3, #0]
}
   138ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
   138d2:	4621      	mov	r1, r4
   138d4:	4821      	ldr	r0, [pc, #132]	; (1395c <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
   138d6:	f7ff fd9b 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   138da:	b940      	cbnz	r0, 138ee <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
   138dc:	491b      	ldr	r1, [pc, #108]	; (1394c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
   138de:	2410      	movs	r4, #16
  m_errorLine = line;
   138e0:	4b1b      	ldr	r3, [pc, #108]	; (13950 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
   138e2:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
   138e6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   138e8:	601a      	str	r2, [r3, #0]
}
   138ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
   138ee:	2100      	movs	r1, #0
   138f0:	481b      	ldr	r0, [pc, #108]	; (13960 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
   138f2:	f7ff fd8d 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   138f6:	b938      	cbnz	r0, 13908 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
   138f8:	4914      	ldr	r1, [pc, #80]	; (1394c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
   138fa:	2411      	movs	r4, #17
  m_errorLine = line;
   138fc:	4b14      	ldr	r3, [pc, #80]	; (13950 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
   138fe:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
   13902:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   13904:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
   13906:	e7e2      	b.n	138ce <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
   13908:	f007 fe68 	bl	1b5dc <micros>
   1390c:	4e15      	ldr	r6, [pc, #84]	; (13964 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   1390e:	4d16      	ldr	r5, [pc, #88]	; (13968 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
   13910:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13912:	f8df 805c 	ldr.w	r8, [pc, #92]	; 13970 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13916:	4f15      	ldr	r7, [pc, #84]	; (1396c <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13918:	6831      	ldr	r1, [r6, #0]
   1391a:	4628      	mov	r0, r5
   1391c:	f7ff fd78 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13920:	b118      	cbz	r0, 1392a <SdioCard::erase(unsigned long, unsigned long)+0xb2>
   13922:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
   13926:	05db      	lsls	r3, r3, #23
   13928:	d4d1      	bmi.n	138ce <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   1392a:	f007 fe57 	bl	1b5dc <micros>
   1392e:	1b00      	subs	r0, r0, r4
   13930:	42b8      	cmp	r0, r7
   13932:	d9f1      	bls.n	13918 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
   13934:	4905      	ldr	r1, [pc, #20]	; (1394c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
   13936:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
   13938:	4b05      	ldr	r3, [pc, #20]	; (13950 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
   1393a:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
   1393e:	2000      	movs	r0, #0
  m_errorCode = code;
   13940:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   13942:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
   13944:	e7c3      	b.n	138ce <SdioCard::erase(unsigned long, unsigned long)+0x56>
   13946:	bf00      	nop
   13948:	2000ad9c 	.word	0x2000ad9c
   1394c:	20009cb6 	.word	0x20009cb6
   13950:	2000ad84 	.word	0x2000ad84
   13954:	200136d8 	.word	0x200136d8
   13958:	201a0000 	.word	0x201a0000
   1395c:	211a0000 	.word	0x211a0000
   13960:	261b0000 	.word	0x261b0000
   13964:	2000adb0 	.word	0x2000adb0
   13968:	0d1a0000 	.word	0x0d1a0000
   1396c:	000f4240 	.word	0x000f4240
   13970:	402c0000 	.word	0x402c0000

00013974 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
   13974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
   13978:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
   1397c:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
   1397e:	bf18      	it	ne
   13980:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
   13982:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
   13984:	9300      	str	r3, [sp, #0]
   13986:	2b00      	cmp	r3, #0
   13988:	bf08      	it	eq
   1398a:	f044 0401 	orreq.w	r4, r4, #1
   1398e:	b15c      	cbz	r4, 139a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
   13990:	4940      	ldr	r1, [pc, #256]	; (13a94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
   13992:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
   13994:	4b40      	ldr	r3, [pc, #256]	; (13a98 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
   13996:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
   1399a:	2400      	movs	r4, #0
  m_errorCode = code;
   1399c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   1399e:	601a      	str	r2, [r3, #0]
}
   139a0:	4620      	mov	r0, r4
   139a2:	b003      	add	sp, #12
   139a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
   139a8:	4b3c      	ldr	r3, [pc, #240]	; (13a9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
   139aa:	4615      	mov	r5, r2
   139ac:	4a3c      	ldr	r2, [pc, #240]	; (13aa0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
   139ae:	460e      	mov	r6, r1
   139b0:	f8df 910c 	ldr.w	r9, [pc, #268]	; 13ac0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
   139b4:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
   139b6:	f007 fe11 	bl	1b5dc <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   139ba:	f8df 8108 	ldr.w	r8, [pc, #264]	; 13ac4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
   139be:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   139c0:	f8df b104 	ldr.w	fp, [pc, #260]	; 13ac8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   139c4:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 13ab8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
   139c8:	e006      	b.n	139d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   139ca:	f007 fe07 	bl	1b5dc <micros>
   139ce:	1bc0      	subs	r0, r0, r7
   139d0:	4550      	cmp	r0, sl
   139d2:	d844      	bhi.n	13a5e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
   139d4:	f009 fe00 	bl	1d5d8 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   139d8:	f8d9 1000 	ldr.w	r1, [r9]
   139dc:	4640      	mov	r0, r8
   139de:	f7ff fd17 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   139e2:	2800      	cmp	r0, #0
   139e4:	d0f1      	beq.n	139ca <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
   139e6:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
   139ea:	05da      	lsls	r2, r3, #23
   139ec:	d5ed      	bpl.n	139ca <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
   139ee:	9a00      	ldr	r2, [sp, #0]
   139f0:	4b2c      	ldr	r3, [pc, #176]	; (13aa4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
   139f2:	492b      	ldr	r1, [pc, #172]	; (13aa0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
   139f4:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
   139f8:	2200      	movs	r2, #0
  m_dmaBusy = true;
   139fa:	4f2b      	ldr	r7, [pc, #172]	; (13aa8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
   139fc:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
   139fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
   13a02:	2101      	movs	r1, #1
  m_irqstat = 0;
   13a04:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 13acc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
   13a08:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
   13a0a:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
   13a0e:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
   13a12:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
   13a16:	4b25      	ldr	r3, [pc, #148]	; (13aac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
   13a18:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
   13a1c:	4b24      	ldr	r3, [pc, #144]	; (13ab0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
   13a1e:	781b      	ldrb	r3, [r3, #0]
   13a20:	b343      	cbz	r3, 13a74 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
   13a22:	4631      	mov	r1, r6
   13a24:	9801      	ldr	r0, [sp, #4]
   13a26:	f7ff fcf3 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13a2a:	4681      	mov	r9, r0
   13a2c:	2800      	cmp	r0, #0
   13a2e:	d0b7      	beq.n	139a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
   13a30:	4b20      	ldr	r3, [pc, #128]	; (13ab4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
   13a32:	4a1b      	ldr	r2, [pc, #108]	; (13aa0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
   13a34:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
   13a36:	f007 fdd1 	bl	1b5dc <micros>
  return m_dmaBusy;
   13a3a:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
   13a3c:	4605      	mov	r5, r0
  while (fcn()) {
   13a3e:	b1db      	cbz	r3, 13a78 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13a40:	4e1d      	ldr	r6, [pc, #116]	; (13ab8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
   13a42:	e003      	b.n	13a4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
   13a44:	f009 fdc8 	bl	1d5d8 <yield>
  return m_dmaBusy;
   13a48:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
   13a4a:	b1ab      	cbz	r3, 13a78 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13a4c:	f007 fdc6 	bl	1b5dc <micros>
   13a50:	1b40      	subs	r0, r0, r5
   13a52:	42b0      	cmp	r0, r6
   13a54:	d9f6      	bls.n	13a44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
   13a56:	2300      	movs	r3, #0
   13a58:	4a11      	ldr	r2, [pc, #68]	; (13aa0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
   13a5a:	6013      	str	r3, [r2, #0]
      return true;
   13a5c:	e7a0      	b.n	139a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
   13a5e:	4b0d      	ldr	r3, [pc, #52]	; (13a94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
   13a60:	220a      	movs	r2, #10
      m_busyFcn = 0;
   13a62:	2100      	movs	r1, #0
   13a64:	480e      	ldr	r0, [pc, #56]	; (13aa0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
   13a66:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13a68:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   13a6c:	4b0a      	ldr	r3, [pc, #40]	; (13a98 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
   13a6e:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
   13a70:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
   13a72:	e795      	b.n	139a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
   13a74:	0276      	lsls	r6, r6, #9
   13a76:	e7d4      	b.n	13a22 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
   13a78:	2300      	movs	r3, #0
   13a7a:	4a09      	ldr	r2, [pc, #36]	; (13aa0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
   13a7c:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   13a7e:	f8d8 3000 	ldr.w	r3, [r8]
   13a82:	079b      	lsls	r3, r3, #30
   13a84:	d58c      	bpl.n	139a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
   13a86:	f8d8 2000 	ldr.w	r2, [r8]
   13a8a:	4b0c      	ldr	r3, [pc, #48]	; (13abc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
   13a8c:	421a      	tst	r2, r3
   13a8e:	bf08      	it	eq
   13a90:	464c      	moveq	r4, r9
   13a92:	e785      	b.n	139a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
   13a94:	20009cb6 	.word	0x20009cb6
   13a98:	2000ad84 	.word	0x2000ad84
   13a9c:	000135a5 	.word	0x000135a5
   13aa0:	2000adb4 	.word	0x2000adb4
   13aa4:	1fff0000 	.word	0x1fff0000
   13aa8:	200136da 	.word	0x200136da
   13aac:	117f0002 	.word	0x117f0002
   13ab0:	200136d8 	.word	0x200136d8
   13ab4:	00012fcd 	.word	0x00012fcd
   13ab8:	000f4240 	.word	0x000f4240
   13abc:	117f0000 	.word	0x117f0000
   13ac0:	2000adb0 	.word	0x2000adb0
   13ac4:	0d1a0000 	.word	0x0d1a0000
   13ac8:	402c0000 	.word	0x402c0000
   13acc:	2000adb8 	.word	0x2000adb8

00013ad0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
   13ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ad2:	4606      	mov	r6, r0
   13ad4:	7a00      	ldrb	r0, [r0, #8]
   13ad6:	460c      	mov	r4, r1
   13ad8:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
   13ada:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
   13adc:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
   13ade:	d413      	bmi.n	13b08 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
   13ae0:	b183      	cbz	r3, 13b04 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
   13ae2:	440f      	add	r7, r1
   13ae4:	e001      	b.n	13aea <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
   13ae6:	42bc      	cmp	r4, r7
   13ae8:	d00c      	beq.n	13b04 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
   13aea:	6833      	ldr	r3, [r6, #0]
   13aec:	462a      	mov	r2, r5
   13aee:	4621      	mov	r1, r4
   13af0:	4630      	mov	r0, r6
   13af2:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
   13af4:	3401      	adds	r4, #1
   13af6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
   13afa:	4798      	blx	r3
   13afc:	2800      	cmp	r0, #0
   13afe:	d1f2      	bne.n	13ae6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
   13b00:	2000      	movs	r0, #0
}
   13b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   13b04:	2001      	movs	r0, #1
}
   13b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
   13b08:	0790      	lsls	r0, r2, #30
   13b0a:	d012      	beq.n	13b32 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
   13b0c:	2b00      	cmp	r3, #0
   13b0e:	d0f9      	beq.n	13b04 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
   13b10:	440f      	add	r7, r1
   13b12:	e001      	b.n	13b18 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
   13b14:	42bc      	cmp	r4, r7
   13b16:	d0f5      	beq.n	13b04 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
   13b18:	6833      	ldr	r3, [r6, #0]
   13b1a:	462a      	mov	r2, r5
   13b1c:	4621      	mov	r1, r4
   13b1e:	4630      	mov	r0, r6
   13b20:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
   13b22:	3401      	adds	r4, #1
   13b24:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
   13b28:	4798      	blx	r3
   13b2a:	2800      	cmp	r0, #0
   13b2c:	d1f2      	bne.n	13b14 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
   13b2e:	2000      	movs	r0, #0
   13b30:	e7e7      	b.n	13b02 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
   13b32:	4806      	ldr	r0, [pc, #24]	; (13b4c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
   13b34:	f7ff ff1e 	bl	13974 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   13b38:	2800      	cmp	r0, #0
   13b3a:	d1e3      	bne.n	13b04 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
   13b3c:	4904      	ldr	r1, [pc, #16]	; (13b50 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
   13b3e:	240c      	movs	r4, #12
  m_errorLine = line;
   13b40:	4b04      	ldr	r3, [pc, #16]	; (13b54 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
   13b42:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
   13b46:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   13b48:	601a      	str	r2, [r3, #0]
}
   13b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b4c:	123a0037 	.word	0x123a0037
   13b50:	20009cb6 	.word	0x20009cb6
   13b54:	2000ad84 	.word	0x2000ad84

00013b58 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
   13b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b5a:	4606      	mov	r6, r0
   13b5c:	7a00      	ldrb	r0, [r0, #8]
   13b5e:	460c      	mov	r4, r1
   13b60:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
   13b62:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
   13b64:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
   13b66:	d413      	bmi.n	13b90 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
   13b68:	b183      	cbz	r3, 13b8c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
   13b6a:	440f      	add	r7, r1
   13b6c:	e001      	b.n	13b72 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
   13b6e:	42bc      	cmp	r4, r7
   13b70:	d00c      	beq.n	13b8c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
   13b72:	6833      	ldr	r3, [r6, #0]
   13b74:	462a      	mov	r2, r5
   13b76:	4621      	mov	r1, r4
   13b78:	4630      	mov	r0, r6
   13b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
   13b7c:	3401      	adds	r4, #1
   13b7e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
   13b82:	4798      	blx	r3
   13b84:	2800      	cmp	r0, #0
   13b86:	d1f2      	bne.n	13b6e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
   13b88:	2000      	movs	r0, #0
}
   13b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   13b8c:	2001      	movs	r0, #1
}
   13b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
   13b90:	0790      	lsls	r0, r2, #30
   13b92:	d012      	beq.n	13bba <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
   13b94:	2b00      	cmp	r3, #0
   13b96:	d0f9      	beq.n	13b8c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
   13b98:	440f      	add	r7, r1
   13b9a:	e001      	b.n	13ba0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
   13b9c:	42bc      	cmp	r4, r7
   13b9e:	d0f5      	beq.n	13b8c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
   13ba0:	6833      	ldr	r3, [r6, #0]
   13ba2:	462a      	mov	r2, r5
   13ba4:	4621      	mov	r1, r4
   13ba6:	4630      	mov	r0, r6
   13ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
   13baa:	3401      	adds	r4, #1
   13bac:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
   13bb0:	4798      	blx	r3
   13bb2:	2800      	cmp	r0, #0
   13bb4:	d1f2      	bne.n	13b9c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
   13bb6:	2000      	movs	r0, #0
   13bb8:	e7e7      	b.n	13b8a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
   13bba:	4806      	ldr	r0, [pc, #24]	; (13bd4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
   13bbc:	f7ff feda 	bl	13974 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   13bc0:	2800      	cmp	r0, #0
   13bc2:	d1e3      	bne.n	13b8c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
   13bc4:	4904      	ldr	r1, [pc, #16]	; (13bd8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
   13bc6:	240e      	movs	r4, #14
  m_errorLine = line;
   13bc8:	4b04      	ldr	r3, [pc, #16]	; (13bdc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
   13bca:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
   13bce:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   13bd0:	601a      	str	r2, [r3, #0]
}
   13bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13bd4:	193a0027 	.word	0x193a0027
   13bd8:	20009cb6 	.word	0x20009cb6
   13bdc:	2000ad84 	.word	0x2000ad84

00013be0 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
   13be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
   13be4:	2500      	movs	r5, #0
  m_initDone = false;
   13be6:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 13ea8 <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
   13bea:	4c9b      	ldr	r4, [pc, #620]	; (13e58 <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
   13bec:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
   13bee:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 13eac <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
   13bf2:	4e9a      	ldr	r6, [pc, #616]	; (13e5c <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
   13bf4:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
   13bf6:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
   13bf8:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
   13bfc:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
   13bfe:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
   13c02:	7035      	strb	r5, [r6, #0]
  initSDHC();
   13c04:	f7ff fad2 	bl	131ac <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
   13c08:	4629      	mov	r1, r5
   13c0a:	4628      	mov	r0, r5
   13c0c:	f7ff fc00 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13c10:	b950      	cbnz	r0, 13c28 <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
   13c12:	2101      	movs	r1, #1
  m_errorLine = line;
   13c14:	4b92      	ldr	r3, [pc, #584]	; (13e60 <SdioCard::begin(SdioConfig)+0x280>)
   13c16:	f240 228e 	movw	r2, #654	; 0x28e
   13c1a:	4605      	mov	r5, r0
  m_errorCode = code;
   13c1c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
   13c1e:	601a      	str	r2, [r3, #0]
}
   13c20:	4628      	mov	r0, r5
   13c22:	b011      	add	sp, #68	; 0x44
   13c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c28:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
   13c2a:	4f8e      	ldr	r7, [pc, #568]	; (13e64 <SdioCard::begin(SdioConfig)+0x284>)
   13c2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   13c30:	4638      	mov	r0, r7
   13c32:	f7ff fbed 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13c36:	2800      	cmp	r0, #0
   13c38:	d14e      	bne.n	13cd8 <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
   13c3a:	3d01      	subs	r5, #1
   13c3c:	d1f6      	bne.n	13c2c <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
   13c3e:	7833      	ldrb	r3, [r6, #0]
   13c40:	2b00      	cmp	r3, #0
   13c42:	d03d      	beq.n	13cc0 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
   13c44:	f8df b268 	ldr.w	fp, [pc, #616]	; 13eb0 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
   13c48:	f007 fcc8 	bl	1b5dc <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   13c4c:	4e86      	ldr	r6, [pc, #536]	; (13e68 <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
   13c4e:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   13c50:	f8df a260 	ldr.w	sl, [pc, #608]	; 13eb4 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
   13c54:	4f85      	ldr	r7, [pc, #532]	; (13e6c <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   13c56:	2100      	movs	r1, #0
   13c58:	4630      	mov	r0, r6
   13c5a:	f7ff fbd9 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13c5e:	b950      	cbnz	r0, 13c76 <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
   13c60:	2500      	movs	r5, #0
  m_errorCode = code;
   13c62:	2117      	movs	r1, #23
  m_errorLine = line;
   13c64:	4b7e      	ldr	r3, [pc, #504]	; (13e60 <SdioCard::begin(SdioConfig)+0x280>)
   13c66:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
   13c6a:	4628      	mov	r0, r5
  m_errorCode = code;
   13c6c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
   13c6e:	601a      	str	r2, [r3, #0]
}
   13c70:	b011      	add	sp, #68	; 0x44
   13c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   13c76:	4659      	mov	r1, fp
   13c78:	4650      	mov	r0, sl
   13c7a:	f7ff fbc9 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13c7e:	2800      	cmp	r0, #0
   13c80:	d0ee      	beq.n	13c60 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
   13c82:	f007 fcab 	bl	1b5dc <micros>
   13c86:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
   13c88:	4b79      	ldr	r3, [pc, #484]	; (13e70 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
   13c8a:	42b8      	cmp	r0, r7
   13c8c:	d8e8      	bhi.n	13c60 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
   13c8e:	691a      	ldr	r2, [r3, #16]
   13c90:	2a00      	cmp	r2, #0
   13c92:	dae0      	bge.n	13c56 <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
   13c94:	6919      	ldr	r1, [r3, #16]
   13c96:	4a77      	ldr	r2, [pc, #476]	; (13e74 <SdioCard::begin(SdioConfig)+0x294>)
   13c98:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
   13c9a:	691b      	ldr	r3, [r3, #16]
   13c9c:	005a      	lsls	r2, r3, #1
   13c9e:	d502      	bpl.n	13ca6 <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
   13ca0:	2301      	movs	r3, #1
   13ca2:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
   13ca6:	2100      	movs	r1, #0
   13ca8:	4873      	ldr	r0, [pc, #460]	; (13e78 <SdioCard::begin(SdioConfig)+0x298>)
   13caa:	f7ff fbb1 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13cae:	4605      	mov	r5, r0
   13cb0:	bb10      	cbnz	r0, 13cf8 <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
   13cb2:	2102      	movs	r1, #2
  m_errorLine = line;
   13cb4:	4b6a      	ldr	r3, [pc, #424]	; (13e60 <SdioCard::begin(SdioConfig)+0x280>)
   13cb6:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
   13cba:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
   13cbc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
   13cbe:	e7af      	b.n	13c20 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
   13cc0:	f7ff fa74 	bl	131ac <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
   13cc4:	4629      	mov	r1, r5
   13cc6:	4628      	mov	r0, r5
   13cc8:	f7ff fba2 	bl	13410 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
   13ccc:	7833      	ldrb	r3, [r6, #0]
   13cce:	2b00      	cmp	r3, #0
   13cd0:	d1b8      	bne.n	13c44 <SdioCard::begin(SdioConfig)+0x64>
   13cd2:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
   13cd6:	e7b7      	b.n	13c48 <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
   13cd8:	4b65      	ldr	r3, [pc, #404]	; (13e70 <SdioCard::begin(SdioConfig)+0x290>)
   13cda:	691b      	ldr	r3, [r3, #16]
   13cdc:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
   13ce0:	d007      	beq.n	13cf2 <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
   13ce2:	2106      	movs	r1, #6
  m_errorLine = line;
   13ce4:	4b5e      	ldr	r3, [pc, #376]	; (13e60 <SdioCard::begin(SdioConfig)+0x280>)
   13ce6:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
   13cea:	2500      	movs	r5, #0
  m_errorCode = code;
   13cec:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
   13cee:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
   13cf0:	e796      	b.n	13c20 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
   13cf2:	2301      	movs	r3, #1
   13cf4:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
   13cf6:	e7a5      	b.n	13c44 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
   13cf8:	2100      	movs	r1, #0
   13cfa:	4860      	ldr	r0, [pc, #384]	; (13e7c <SdioCard::begin(SdioConfig)+0x29c>)
   13cfc:	f7ff fb88 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13d00:	4605      	mov	r5, r0
   13d02:	b930      	cbnz	r0, 13d12 <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
   13d04:	2103      	movs	r1, #3
  m_errorLine = line;
   13d06:	4b56      	ldr	r3, [pc, #344]	; (13e60 <SdioCard::begin(SdioConfig)+0x280>)
   13d08:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
   13d0c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
   13d0e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
   13d10:	e786      	b.n	13c20 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
   13d12:	4e57      	ldr	r6, [pc, #348]	; (13e70 <SdioCard::begin(SdioConfig)+0x290>)
   13d14:	4b5a      	ldr	r3, [pc, #360]	; (13e80 <SdioCard::begin(SdioConfig)+0x2a0>)
   13d16:	6932      	ldr	r2, [r6, #16]
   13d18:	4f5a      	ldr	r7, [pc, #360]	; (13e84 <SdioCard::begin(SdioConfig)+0x2a4>)
   13d1a:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
   13d1c:	495a      	ldr	r1, [pc, #360]	; (13e88 <SdioCard::begin(SdioConfig)+0x2a8>)
   13d1e:	485b      	ldr	r0, [pc, #364]	; (13e8c <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
   13d20:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
   13d22:	f7ff fbc1 	bl	134a8 <readReg16(unsigned long, void*)>
   13d26:	4605      	mov	r5, r0
   13d28:	b930      	cbnz	r0, 13d38 <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
   13d2a:	2107      	movs	r1, #7
  m_errorLine = line;
   13d2c:	4b4c      	ldr	r3, [pc, #304]	; (13e60 <SdioCard::begin(SdioConfig)+0x280>)
   13d2e:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
   13d32:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
   13d34:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
   13d36:	e773      	b.n	13c20 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
   13d38:	4955      	ldr	r1, [pc, #340]	; (13e90 <SdioCard::begin(SdioConfig)+0x2b0>)
   13d3a:	4856      	ldr	r0, [pc, #344]	; (13e94 <SdioCard::begin(SdioConfig)+0x2b4>)
   13d3c:	f7ff fbb4 	bl	134a8 <readReg16(unsigned long, void*)>
   13d40:	4605      	mov	r5, r0
   13d42:	b930      	cbnz	r0, 13d52 <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
   13d44:	2108      	movs	r1, #8
  m_errorLine = line;
   13d46:	4b46      	ldr	r3, [pc, #280]	; (13e60 <SdioCard::begin(SdioConfig)+0x280>)
   13d48:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
   13d4c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
   13d4e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
   13d50:	e766      	b.n	13c20 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
   13d52:	6839      	ldr	r1, [r7, #0]
   13d54:	4850      	ldr	r0, [pc, #320]	; (13e98 <SdioCard::begin(SdioConfig)+0x2b8>)
   13d56:	f7ff fb5b 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13d5a:	4605      	mov	r5, r0
   13d5c:	b930      	cbnz	r0, 13d6c <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
   13d5e:	2105      	movs	r1, #5
  m_errorLine = line;
   13d60:	4b3f      	ldr	r3, [pc, #252]	; (13e60 <SdioCard::begin(SdioConfig)+0x280>)
   13d62:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
   13d66:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
   13d68:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
   13d6a:	e759      	b.n	13c20 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   13d6c:	6839      	ldr	r1, [r7, #0]
   13d6e:	483e      	ldr	r0, [pc, #248]	; (13e68 <SdioCard::begin(SdioConfig)+0x288>)
   13d70:	f7ff fb4e 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13d74:	b938      	cbnz	r0, 13d86 <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
   13d76:	2114      	movs	r1, #20
  m_errorLine = line;
   13d78:	4b39      	ldr	r3, [pc, #228]	; (13e60 <SdioCard::begin(SdioConfig)+0x280>)
   13d7a:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
   13d7e:	2500      	movs	r5, #0
  m_errorCode = code;
   13d80:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
   13d82:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
   13d84:	e74c      	b.n	13c20 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   13d86:	2102      	movs	r1, #2
   13d88:	4844      	ldr	r0, [pc, #272]	; (13e9c <SdioCard::begin(SdioConfig)+0x2bc>)
   13d8a:	f7ff fb41 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13d8e:	4605      	mov	r5, r0
   13d90:	2800      	cmp	r0, #0
   13d92:	d0f0      	beq.n	13d76 <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
   13d94:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
   13d96:	4669      	mov	r1, sp
   13d98:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
   13d9c:	f023 0306 	bic.w	r3, r3, #6
   13da0:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
   13da2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   13da4:	f043 0302 	orr.w	r3, r3, #2
   13da8:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
   13daa:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
   13dae:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
   13db0:	f7ff fcd4 	bl	1375c <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
   13db4:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
   13db8:	079b      	lsls	r3, r3, #30
   13dba:	d543      	bpl.n	13e44 <SdioCard::begin(SdioConfig)+0x264>
   13dbc:	2800      	cmp	r0, #0
   13dbe:	d041      	beq.n	13e44 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
   13dc0:	4e27      	ldr	r6, [pc, #156]	; (13e60 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
   13dc2:	4669      	mov	r1, sp
   13dc4:	4836      	ldr	r0, [pc, #216]	; (13ea0 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
   13dc6:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
   13dca:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
   13dcc:	f7ff fcc6 	bl	1375c <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
   13dd0:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13dd4:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
   13dd8:	2b01      	cmp	r3, #1
   13dda:	d136      	bne.n	13e4a <SdioCard::begin(SdioConfig)+0x26a>
   13ddc:	b3a8      	cbz	r0, 13e4a <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
   13dde:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   13de2:	4c30      	ldr	r4, [pc, #192]	; (13ea4 <SdioCard::begin(SdioConfig)+0x2c4>)
   13de4:	2305      	movs	r3, #5
   13de6:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
   13dea:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
   13dee:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
   13df2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
   13df6:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
   13dfa:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
   13dfe:	f7ff f8eb 	bl	12fd8 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   13e02:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
   13e04:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   13e08:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
   13e0c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
   13e10:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
   13e14:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
   13e18:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
   13e1c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
   13e20:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
   13e24:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
   13e28:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
   13e2c:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
   13e30:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
   13e34:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
   13e36:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
   13e3a:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
   13e3e:	f889 3000 	strb.w	r3, [r9]
  return true;
   13e42:	e6ed      	b.n	13c20 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
   13e44:	f246 10a8 	movw	r0, #25000	; 0x61a8
   13e48:	e7cb      	b.n	13de2 <SdioCard::begin(SdioConfig)+0x202>
   13e4a:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
   13e4e:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
   13e52:	6037      	str	r7, [r6, #0]
   13e54:	e7c5      	b.n	13de2 <SdioCard::begin(SdioConfig)+0x202>
   13e56:	bf00      	nop
   13e58:	20009cb6 	.word	0x20009cb6
   13e5c:	200136d7 	.word	0x200136d7
   13e60:	2000ad84 	.word	0x2000ad84
   13e64:	081a0000 	.word	0x081a0000
   13e68:	371a0000 	.word	0x371a0000
   13e6c:	000f4240 	.word	0x000f4240
   13e70:	402c0000 	.word	0x402c0000
   13e74:	2000adac 	.word	0x2000adac
   13e78:	02090000 	.word	0x02090000
   13e7c:	031a0000 	.word	0x031a0000
   13e80:	ffff0000 	.word	0xffff0000
   13e84:	2000adb0 	.word	0x2000adb0
   13e88:	2000ad9c 	.word	0x2000ad9c
   13e8c:	09090000 	.word	0x09090000
   13e90:	2000ad8c 	.word	0x2000ad8c
   13e94:	0a090000 	.word	0x0a090000
   13e98:	071b0000 	.word	0x071b0000
   13e9c:	061a0000 	.word	0x061a0000
   13ea0:	80fffff1 	.word	0x80fffff1
   13ea4:	401f8000 	.word	0x401f8000
   13ea8:	200136d6 	.word	0x200136d6
   13eac:	200136d8 	.word	0x200136d8
   13eb0:	40300000 	.word	0x40300000
   13eb4:	29020000 	.word	0x29020000

00013eb8 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
   13eb8:	4b37      	ldr	r3, [pc, #220]	; (13f98 <SdioCard::readData(unsigned char*)+0xe0>)
   13eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13ebc:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
   13ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ec2:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
   13ec4:	d40d      	bmi.n	13ee2 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   13ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13ec8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   13ecc:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
   13ece:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
   13ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13ed2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   13ed6:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   13ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13eda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   13ede:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
   13ee0:	b662      	cpsie	i
  uint32_t m = micros();
   13ee2:	f007 fb7b 	bl	1b5dc <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
   13ee6:	4e2c      	ldr	r6, [pc, #176]	; (13f98 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13ee8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 13fb0 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
   13eec:	4605      	mov	r5, r0
  while (fcn()) {
   13eee:	e004      	b.n	13efa <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13ef0:	f007 fb74 	bl	1b5dc <micros>
   13ef4:	1b43      	subs	r3, r0, r5
   13ef6:	4543      	cmp	r3, r8
   13ef8:	d837      	bhi.n	13f6a <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
   13efa:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
   13efc:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   13f00:	d0f6      	beq.n	13ef0 <SdioCard::readData(unsigned char*)+0x38>
   13f02:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
   13f06:	4824      	ldr	r0, [pc, #144]	; (13f98 <SdioCard::readData(unsigned char*)+0xe0>)
   13f08:	f507 770f 	add.w	r7, r7, #572	; 0x23c
   13f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13f0e:	051b      	lsls	r3, r3, #20
   13f10:	d5fc      	bpl.n	13f0c <SdioCard::readData(unsigned char*)+0x54>
   13f12:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
   13f16:	6a02      	ldr	r2, [r0, #32]
   13f18:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
   13f1c:	459c      	cmp	ip, r3
   13f1e:	d1fa      	bne.n	13f16 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
   13f20:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
   13f24:	4567      	cmp	r7, ip
   13f26:	d1f1      	bne.n	13f0c <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
   13f28:	f007 fb58 	bl	1b5dc <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   13f2c:	4f1a      	ldr	r7, [pc, #104]	; (13f98 <SdioCard::readData(unsigned char*)+0xe0>)
   13f2e:	4d1b      	ldr	r5, [pc, #108]	; (13f9c <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
   13f30:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13f32:	f8df 807c 	ldr.w	r8, [pc, #124]	; 13fb0 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
   13f36:	e004      	b.n	13f42 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13f38:	f007 fb50 	bl	1b5dc <micros>
   13f3c:	1b83      	subs	r3, r0, r6
   13f3e:	4543      	cmp	r3, r8
   13f40:	d81d      	bhi.n	13f7e <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   13f42:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
   13f44:	402c      	ands	r4, r5
   13f46:	d0f7      	beq.n	13f38 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
   13f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13f4a:	4a15      	ldr	r2, [pc, #84]	; (13fa0 <SdioCard::readData(unsigned char*)+0xe8>)
   13f4c:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
   13f4e:	6813      	ldr	r3, [r2, #0]
   13f50:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   13f52:	6813      	ldr	r3, [r2, #0]
   13f54:	f013 0302 	ands.w	r3, r3, #2
   13f58:	d01b      	beq.n	13f92 <SdioCard::readData(unsigned char*)+0xda>
   13f5a:	6812      	ldr	r2, [r2, #0]
   13f5c:	4b11      	ldr	r3, [pc, #68]	; (13fa4 <SdioCard::readData(unsigned char*)+0xec>)
   13f5e:	421a      	tst	r2, r3
   13f60:	bf0c      	ite	eq
   13f62:	2001      	moveq	r0, #1
   13f64:	2000      	movne	r0, #0
}
   13f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
   13f6a:	490f      	ldr	r1, [pc, #60]	; (13fa8 <SdioCard::readData(unsigned char*)+0xf0>)
   13f6c:	251a      	movs	r5, #26
  m_errorLine = line;
   13f6e:	4b0f      	ldr	r3, [pc, #60]	; (13fac <SdioCard::readData(unsigned char*)+0xf4>)
   13f70:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
   13f74:	4620      	mov	r0, r4
  m_errorCode = code;
   13f76:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
   13f78:	601a      	str	r2, [r3, #0]
}
   13f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
   13f7e:	490a      	ldr	r1, [pc, #40]	; (13fa8 <SdioCard::readData(unsigned char*)+0xf0>)
   13f80:	251d      	movs	r5, #29
  m_errorLine = line;
   13f82:	4b0a      	ldr	r3, [pc, #40]	; (13fac <SdioCard::readData(unsigned char*)+0xf4>)
   13f84:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
   13f88:	4620      	mov	r0, r4
  m_errorCode = code;
   13f8a:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
   13f8c:	601a      	str	r2, [r3, #0]
}
   13f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   13f92:	4618      	mov	r0, r3
}
   13f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f98:	402c0000 	.word	0x402c0000
   13f9c:	117f0002 	.word	0x117f0002
   13fa0:	2000adb8 	.word	0x2000adb8
   13fa4:	117f0000 	.word	0x117f0000
   13fa8:	20009cb6 	.word	0x20009cb6
   13fac:	2000ad84 	.word	0x2000ad84
   13fb0:	000f4240 	.word	0x000f4240

00013fb4 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
   13fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
   13fb8:	4b29      	ldr	r3, [pc, #164]	; (14060 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
   13fba:	4689      	mov	r9, r1
  m_busyFcn = fcn;
   13fbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 14080 <SdioCard::readStart(unsigned long)+0xcc>
   13fc0:	4e28      	ldr	r6, [pc, #160]	; (14064 <SdioCard::readStart(unsigned long)+0xb0>)
   13fc2:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
   13fc6:	f007 fb09 	bl	1b5dc <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13fca:	4d27      	ldr	r5, [pc, #156]	; (14068 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
   13fcc:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13fce:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 14084 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13fd2:	4f26      	ldr	r7, [pc, #152]	; (1406c <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
   13fd4:	e006      	b.n	13fe4 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13fd6:	f007 fb01 	bl	1b5dc <micros>
   13fda:	1b00      	subs	r0, r0, r4
   13fdc:	42b8      	cmp	r0, r7
   13fde:	d829      	bhi.n	14034 <SdioCard::readStart(unsigned long)+0x80>
    yield();
   13fe0:	f009 fafa 	bl	1d5d8 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13fe4:	6831      	ldr	r1, [r6, #0]
   13fe6:	4628      	mov	r0, r5
   13fe8:	f7ff fa12 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   13fec:	2800      	cmp	r0, #0
   13fee:	d0f2      	beq.n	13fd6 <SdioCard::readStart(unsigned long)+0x22>
   13ff0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
   13ff4:	05db      	lsls	r3, r3, #23
   13ff6:	d5ee      	bpl.n	13fd6 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
   13ff8:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
   13ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
   13ffe:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   14002:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   14006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1400a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   1400e:	4b18      	ldr	r3, [pc, #96]	; (14070 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
   14010:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   14014:	781b      	ldrb	r3, [r3, #0]
   14016:	b1cb      	cbz	r3, 1404c <SdioCard::readStart(unsigned long)+0x98>
   14018:	4649      	mov	r1, r9
   1401a:	4816      	ldr	r0, [pc, #88]	; (14074 <SdioCard::readStart(unsigned long)+0xc0>)
   1401c:	f7ff f9f8 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   14020:	b930      	cbnz	r0, 14030 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
   14022:	4915      	ldr	r1, [pc, #84]	; (14078 <SdioCard::readStart(unsigned long)+0xc4>)
   14024:	240c      	movs	r4, #12
  m_errorLine = line;
   14026:	4b15      	ldr	r3, [pc, #84]	; (1407c <SdioCard::readStart(unsigned long)+0xc8>)
   14028:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
   1402c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   1402e:	601a      	str	r2, [r3, #0]
}
   14030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
   14034:	4a10      	ldr	r2, [pc, #64]	; (14078 <SdioCard::readStart(unsigned long)+0xc4>)
   14036:	210a      	movs	r1, #10
      m_busyFcn = 0;
   14038:	2000      	movs	r0, #0
  m_errorLine = line;
   1403a:	4b10      	ldr	r3, [pc, #64]	; (1407c <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
   1403c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   1403e:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
   14042:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
   14046:	601a      	str	r2, [r3, #0]
}
   14048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   1404c:	ea4f 2949 	mov.w	r9, r9, lsl #9
   14050:	4808      	ldr	r0, [pc, #32]	; (14074 <SdioCard::readStart(unsigned long)+0xc0>)
   14052:	4649      	mov	r1, r9
   14054:	f7ff f9dc 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   14058:	2800      	cmp	r0, #0
   1405a:	d1e9      	bne.n	14030 <SdioCard::readStart(unsigned long)+0x7c>
   1405c:	e7e1      	b.n	14022 <SdioCard::readStart(unsigned long)+0x6e>
   1405e:	bf00      	nop
   14060:	000135a5 	.word	0x000135a5
   14064:	2000adb0 	.word	0x2000adb0
   14068:	0d1a0000 	.word	0x0d1a0000
   1406c:	000f4240 	.word	0x000f4240
   14070:	200136d8 	.word	0x200136d8
   14074:	123a0030 	.word	0x123a0030
   14078:	20009cb6 	.word	0x20009cb6
   1407c:	2000ad84 	.word	0x2000ad84
   14080:	2000adb4 	.word	0x2000adb4
   14084:	402c0000 	.word	0x402c0000

00014088 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
   14088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
   1408c:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   1408e:	4c1d      	ldr	r4, [pc, #116]	; (14104 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
   14090:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
   14092:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   14094:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   14096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   14098:	481b      	ldr	r0, [pc, #108]	; (14108 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   1409a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1409e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   140a0:	f7ff f9b6 	bl	13410 <cardCommand(unsigned long, unsigned long)>
   140a4:	b940      	cbnz	r0, 140b8 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
   140a6:	4919      	ldr	r1, [pc, #100]	; (1410c <SdioCard::stopTransmission(bool)+0x84>)
   140a8:	2409      	movs	r4, #9
  m_errorLine = line;
   140aa:	4b19      	ldr	r3, [pc, #100]	; (14110 <SdioCard::stopTransmission(bool)+0x88>)
   140ac:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
   140b0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   140b2:	601a      	str	r2, [r3, #0]
}
   140b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
   140b8:	2d00      	cmp	r5, #0
   140ba:	d0fb      	beq.n	140b4 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
   140bc:	4b15      	ldr	r3, [pc, #84]	; (14114 <SdioCard::stopTransmission(bool)+0x8c>)
   140be:	4e16      	ldr	r6, [pc, #88]	; (14118 <SdioCard::stopTransmission(bool)+0x90>)
   140c0:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
   140c2:	f007 fa8b 	bl	1b5dc <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   140c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
   140c8:	4607      	mov	r7, r0
  while (fcn()) {
   140ca:	01da      	lsls	r2, r3, #7
   140cc:	d416      	bmi.n	140fc <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   140ce:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1411c <SdioCard::stopTransmission(bool)+0x94>
   140d2:	e004      	b.n	140de <SdioCard::stopTransmission(bool)+0x56>
    yield();
   140d4:	f009 fa80 	bl	1d5d8 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   140d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
   140da:	01db      	lsls	r3, r3, #7
   140dc:	d40e      	bmi.n	140fc <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   140de:	f007 fa7d 	bl	1b5dc <micros>
   140e2:	1bc0      	subs	r0, r0, r7
   140e4:	4540      	cmp	r0, r8
   140e6:	d9f5      	bls.n	140d4 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
   140e8:	4a08      	ldr	r2, [pc, #32]	; (1410c <SdioCard::stopTransmission(bool)+0x84>)
   140ea:	210a      	movs	r1, #10
      m_busyFcn = 0;
   140ec:	2000      	movs	r0, #0
  m_errorLine = line;
   140ee:	4b08      	ldr	r3, [pc, #32]	; (14110 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
   140f0:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   140f2:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
   140f6:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
   140f8:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
   140fa:	e7db      	b.n	140b4 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
   140fc:	2300      	movs	r3, #0
  return true;
   140fe:	4628      	mov	r0, r5
  m_busyFcn = 0;
   14100:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
   14102:	e7d7      	b.n	140b4 <SdioCard::stopTransmission(bool)+0x2c>
   14104:	402c0000 	.word	0x402c0000
   14108:	0cdb0000 	.word	0x0cdb0000
   1410c:	20009cb6 	.word	0x20009cb6
   14110:	2000ad84 	.word	0x2000ad84
   14114:	00012fb9 	.word	0x00012fb9
   14118:	2000adb4 	.word	0x2000adb4
   1411c:	000f4240 	.word	0x000f4240

00014120 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
   14120:	4b0a      	ldr	r3, [pc, #40]	; (1414c <SdioCard::syncDevice()+0x2c>)
   14122:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
   14124:	b510      	push	{r4, lr}
   14126:	4604      	mov	r4, r0
  if (!m_transferActive) {
   14128:	b91b      	cbnz	r3, 14132 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
   1412a:	7a63      	ldrb	r3, [r4, #9]
   1412c:	b943      	cbnz	r3, 14140 <SdioCard::syncDevice()+0x20>
  return true;
   1412e:	2001      	movs	r0, #1
}
   14130:	bd10      	pop	{r4, pc}
   14132:	f7ff f8cf 	bl	132d4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
   14136:	2800      	cmp	r0, #0
   14138:	d0fa      	beq.n	14130 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
   1413a:	7a63      	ldrb	r3, [r4, #9]
   1413c:	2b00      	cmp	r3, #0
   1413e:	d0f6      	beq.n	1412e <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
   14140:	4620      	mov	r0, r4
   14142:	2101      	movs	r1, #1
}
   14144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
   14148:	f7ff bf9e 	b.w	14088 <SdioCard::stopTransmission(bool)>
   1414c:	200136d9 	.word	0x200136d9

00014150 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
   14150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14154:	4604      	mov	r4, r0
   14156:	7a00      	ldrb	r0, [r0, #8]
   14158:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1415c:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
   1415e:	f010 0501 	ands.w	r5, r0, #1
   14162:	d013      	beq.n	1418c <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
   14164:	0793      	lsls	r3, r2, #30
   14166:	d03c      	beq.n	141e2 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
   14168:	2301      	movs	r3, #1
   1416a:	4838      	ldr	r0, [pc, #224]	; (1424c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
   1416c:	466a      	mov	r2, sp
   1416e:	f7ff fc01 	bl	13974 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   14172:	2800      	cmp	r0, #0
   14174:	d03a      	beq.n	141ec <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
   14176:	f44f 7200 	mov.w	r2, #512	; 0x200
   1417a:	4669      	mov	r1, sp
   1417c:	4630      	mov	r0, r6
   1417e:	f007 fd53 	bl	1bc28 <memcpy>
}
   14182:	4628      	mov	r0, r5
   14184:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   14188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
   1418c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1425c <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
   14190:	460f      	mov	r7, r1
   14192:	f898 3000 	ldrb.w	r3, [r8]
   14196:	2b00      	cmp	r3, #0
   14198:	d135      	bne.n	14206 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
   1419a:	7a63      	ldrb	r3, [r4, #9]
   1419c:	2b01      	cmp	r3, #1
   1419e:	d039      	beq.n	14214 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
   141a0:	6822      	ldr	r2, [r4, #0]
   141a2:	492b      	ldr	r1, [pc, #172]	; (14250 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
   141a4:	6a12      	ldr	r2, [r2, #32]
   141a6:	428a      	cmp	r2, r1
   141a8:	d14a      	bne.n	14240 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
   141aa:	f898 2000 	ldrb.w	r2, [r8]
   141ae:	2a00      	cmp	r2, #0
   141b0:	d134      	bne.n	1421c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
   141b2:	2b00      	cmp	r3, #0
   141b4:	d139      	bne.n	1422a <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
   141b6:	4639      	mov	r1, r7
   141b8:	4620      	mov	r0, r4
   141ba:	f7ff fefb 	bl	13fb4 <SdioCard::readStart(unsigned long)>
   141be:	b1e8      	cbz	r0, 141fc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
   141c0:	2301      	movs	r3, #1
      m_curSector = sector;
   141c2:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
   141c4:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
   141c6:	4631      	mov	r1, r6
   141c8:	4620      	mov	r0, r4
   141ca:	f7ff fe75 	bl	13eb8 <SdioCard::readData(unsigned char*)>
   141ce:	b1a8      	cbz	r0, 141fc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
   141d0:	6863      	ldr	r3, [r4, #4]
  return true;
   141d2:	4605      	mov	r5, r0
    m_curSector++;
   141d4:	3301      	adds	r3, #1
}
   141d6:	4628      	mov	r0, r5
    m_curSector++;
   141d8:	6063      	str	r3, [r4, #4]
}
   141da:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   141de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
   141e2:	2301      	movs	r3, #1
   141e4:	4819      	ldr	r0, [pc, #100]	; (1424c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
   141e6:	f7ff fbc5 	bl	13974 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   141ea:	b938      	cbnz	r0, 141fc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
   141ec:	4919      	ldr	r1, [pc, #100]	; (14254 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
   141ee:	200b      	movs	r0, #11
  m_errorLine = line;
   141f0:	4b19      	ldr	r3, [pc, #100]	; (14258 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
   141f2:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
   141f6:	2500      	movs	r5, #0
  m_errorCode = code;
   141f8:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   141fa:	601a      	str	r2, [r3, #0]
}
   141fc:	4628      	mov	r0, r5
   141fe:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   14202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14206:	f7ff f865 	bl	132d4 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
   1420a:	2800      	cmp	r0, #0
   1420c:	d0f6      	beq.n	141fc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
   1420e:	7a63      	ldrb	r3, [r4, #9]
   14210:	2b01      	cmp	r3, #1
   14212:	d1c5      	bne.n	141a0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
   14214:	6862      	ldr	r2, [r4, #4]
   14216:	42ba      	cmp	r2, r7
   14218:	d1c2      	bne.n	141a0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
   1421a:	e7d4      	b.n	141c6 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
   1421c:	f7ff f85a 	bl	132d4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
   14220:	2800      	cmp	r0, #0
   14222:	d0eb      	beq.n	141fc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
   14224:	7a63      	ldrb	r3, [r4, #9]
   14226:	2b00      	cmp	r3, #0
   14228:	d0c5      	beq.n	141b6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
   1422a:	2101      	movs	r1, #1
   1422c:	4620      	mov	r0, r4
   1422e:	f7ff ff2b 	bl	14088 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
   14232:	2800      	cmp	r0, #0
   14234:	d1bf      	bne.n	141b6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
   14236:	4628      	mov	r0, r5
   14238:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   1423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
   14240:	4620      	mov	r0, r4
   14242:	4790      	blx	r2
   14244:	2800      	cmp	r0, #0
   14246:	d0f6      	beq.n	14236 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
   14248:	e7b5      	b.n	141b6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
   1424a:	bf00      	nop
   1424c:	113a0011 	.word	0x113a0011
   14250:	00014121 	.word	0x00014121
   14254:	20009cb6 	.word	0x20009cb6
   14258:	2000ad84 	.word	0x2000ad84
   1425c:	200136d9 	.word	0x200136d9

00014260 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
   14260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14264:	7a04      	ldrb	r4, [r0, #8]
   14266:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1426a:	460f      	mov	r7, r1
   1426c:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
   1426e:	f014 0401 	ands.w	r4, r4, #1
   14272:	d01d      	beq.n	142b0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
   14274:	f012 0f03 	tst.w	r2, #3
   14278:	d006      	beq.n	14288 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
   1427a:	4668      	mov	r0, sp
   1427c:	4611      	mov	r1, r2
   1427e:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
   14282:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
   14284:	f007 fcd0 	bl	1bc28 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
   14288:	2301      	movs	r3, #1
   1428a:	4642      	mov	r2, r8
   1428c:	4639      	mov	r1, r7
   1428e:	482c      	ldr	r0, [pc, #176]	; (14340 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
   14290:	f7ff fb70 	bl	13974 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   14294:	4604      	mov	r4, r0
   14296:	b930      	cbnz	r0, 142a6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
   14298:	492a      	ldr	r1, [pc, #168]	; (14344 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
   1429a:	200d      	movs	r0, #13
  m_errorLine = line;
   1429c:	4b2a      	ldr	r3, [pc, #168]	; (14348 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
   1429e:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
   142a2:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   142a4:	601a      	str	r2, [r3, #0]
}
   142a6:	4620      	mov	r0, r4
   142a8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   142ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
   142b0:	4d26      	ldr	r5, [pc, #152]	; (1434c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
   142b2:	4606      	mov	r6, r0
   142b4:	782b      	ldrb	r3, [r5, #0]
   142b6:	bb2b      	cbnz	r3, 14304 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
   142b8:	7a73      	ldrb	r3, [r6, #9]
   142ba:	2b02      	cmp	r3, #2
   142bc:	d029      	beq.n	14312 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
   142be:	6832      	ldr	r2, [r6, #0]
   142c0:	4923      	ldr	r1, [pc, #140]	; (14350 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
   142c2:	6a12      	ldr	r2, [r2, #32]
   142c4:	428a      	cmp	r2, r1
   142c6:	d136      	bne.n	14336 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
   142c8:	782a      	ldrb	r2, [r5, #0]
   142ca:	bb32      	cbnz	r2, 1431a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
   142cc:	2b00      	cmp	r3, #0
   142ce:	d12b      	bne.n	14328 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
   142d0:	6833      	ldr	r3, [r6, #0]
   142d2:	4639      	mov	r1, r7
   142d4:	4630      	mov	r0, r6
   142d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   142d8:	4798      	blx	r3
   142da:	2800      	cmp	r0, #0
   142dc:	d0e3      	beq.n	142a6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
   142de:	2302      	movs	r3, #2
      m_curSector = sector;
   142e0:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
   142e2:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
   142e4:	6833      	ldr	r3, [r6, #0]
   142e6:	4641      	mov	r1, r8
   142e8:	4630      	mov	r0, r6
   142ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   142ec:	4798      	blx	r3
   142ee:	2800      	cmp	r0, #0
   142f0:	d0d9      	beq.n	142a6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
   142f2:	6873      	ldr	r3, [r6, #4]
  return true;
   142f4:	4604      	mov	r4, r0
    m_curSector++;
   142f6:	3301      	adds	r3, #1
}
   142f8:	4620      	mov	r0, r4
    m_curSector++;
   142fa:	6073      	str	r3, [r6, #4]
}
   142fc:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   14300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14304:	f7fe ffe6 	bl	132d4 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
   14308:	2800      	cmp	r0, #0
   1430a:	d0cc      	beq.n	142a6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
   1430c:	7a73      	ldrb	r3, [r6, #9]
   1430e:	2b02      	cmp	r3, #2
   14310:	d1d5      	bne.n	142be <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
   14312:	6872      	ldr	r2, [r6, #4]
   14314:	42ba      	cmp	r2, r7
   14316:	d1d2      	bne.n	142be <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
   14318:	e7e4      	b.n	142e4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
   1431a:	f7fe ffdb 	bl	132d4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
   1431e:	2800      	cmp	r0, #0
   14320:	d0c1      	beq.n	142a6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
   14322:	7a73      	ldrb	r3, [r6, #9]
   14324:	2b00      	cmp	r3, #0
   14326:	d0d3      	beq.n	142d0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
   14328:	2101      	movs	r1, #1
   1432a:	4630      	mov	r0, r6
   1432c:	f7ff feac 	bl	14088 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
   14330:	2800      	cmp	r0, #0
   14332:	d0b8      	beq.n	142a6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
   14334:	e7cc      	b.n	142d0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
   14336:	4630      	mov	r0, r6
   14338:	4790      	blx	r2
   1433a:	2800      	cmp	r0, #0
   1433c:	d0b3      	beq.n	142a6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
   1433e:	e7c7      	b.n	142d0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
   14340:	183a0001 	.word	0x183a0001
   14344:	20009cb6 	.word	0x20009cb6
   14348:	2000ad84 	.word	0x2000ad84
   1434c:	200136d9 	.word	0x200136d9
   14350:	00014121 	.word	0x00014121

00014354 <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
   14354:	2101      	movs	r1, #1
   14356:	f007 b9a7 	b.w	1b6a8 <pinMode>
   1435a:	bf00      	nop

0001435c <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
   1435c:	f007 b968 	b.w	1b630 <digitalWrite>

00014360 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_TRANSFER_TX_RX 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
   14360:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
   14362:	4603      	mov	r3, r0
   14364:	f853 0b04 	ldr.w	r0, [r3], #4
   14368:	e893 0006 	ldmia.w	r3, {r1, r2}
   1436c:	f7f6 ffbe 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
}
   14370:	bd08      	pop	{r3, pc}
   14372:	bf00      	nop

00014374 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
   14374:	b084      	sub	sp, #16
   14376:	f10d 0c10 	add.w	ip, sp, #16
   1437a:	e90c 000e 	stmdb	ip, {r1, r2, r3}
   1437e:	4602      	mov	r2, r0
  if (spiConfig.spiPort) {
   14380:	b123      	cbz	r3, 1438c <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
   14382:	4618      	mov	r0, r3
   14384:	6013      	str	r3, [r2, #0]
}
   14386:	b004      	add	sp, #16
  m_spi->begin();
   14388:	f7f8 bcfc 	b.w	cd84 <SPIClass::begin()>
    m_spi = &SPI;
   1438c:	4b02      	ldr	r3, [pc, #8]	; (14398 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
   1438e:	4618      	mov	r0, r3
   14390:	6013      	str	r3, [r2, #0]
}
   14392:	b004      	add	sp, #16
  m_spi->begin();
   14394:	f7f8 bcf6 	b.w	cd84 <SPIClass::begin()>
   14398:	20008ab0 	.word	0x20008ab0

0001439c <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
   1439c:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
   1439e:	7cd3      	ldrb	r3, [r2, #19]
   143a0:	b313      	cbz	r3, 143e8 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   143a2:	07d8      	lsls	r0, r3, #31
   143a4:	d504      	bpl.n	143b0 <SdSpiArduinoDriver::deactivate()+0x14>
   143a6:	6a90      	ldr	r0, [r2, #40]	; 0x28
   143a8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   143ac:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   143b0:	0799      	lsls	r1, r3, #30
   143b2:	d504      	bpl.n	143be <SdSpiArduinoDriver::deactivate()+0x22>
   143b4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   143b6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   143ba:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   143be:	0758      	lsls	r0, r3, #29
   143c0:	d504      	bpl.n	143cc <SdSpiArduinoDriver::deactivate()+0x30>
   143c2:	6b10      	ldr	r0, [r2, #48]	; 0x30
   143c4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   143c8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   143cc:	0719      	lsls	r1, r3, #28
   143ce:	d504      	bpl.n	143da <SdSpiArduinoDriver::deactivate()+0x3e>
   143d0:	6b50      	ldr	r0, [r2, #52]	; 0x34
   143d2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   143d6:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   143da:	06db      	lsls	r3, r3, #27
   143dc:	d504      	bpl.n	143e8 <SdSpiArduinoDriver::deactivate()+0x4c>
   143de:	6b92      	ldr	r2, [r2, #56]	; 0x38
   143e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   143e4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   143e8:	4770      	bx	lr
   143ea:	bf00      	nop

000143ec <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
   143ec:	6800      	ldr	r0, [r0, #0]
   143ee:	f7f8 be45 	b.w	d07c <SPIClass::end()>
   143f2:	bf00      	nop

000143f4 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   143f4:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
   143f6:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   143f8:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
   143fa:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   143fc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   143fe:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   14402:	d0fb      	beq.n	143fc <SdSpiArduinoDriver::receive()+0x8>
   14404:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
   14406:	b2c0      	uxtb	r0, r0
   14408:	4770      	bx	lr
   1440a:	bf00      	nop

0001440c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
	void setTransferWriteFill(uint8_t ch ) {_transferWriteFill = ch;}
   1440c:	f04f 0cff 	mov.w	ip, #255	; 0xff
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
#ifdef USE_TRANSFER_TX_RX
  m_spi->setTransferWriteFill(0xff);
   14410:	6800      	ldr	r0, [r0, #0]
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
   14412:	b508      	push	{r3, lr}
   14414:	4613      	mov	r3, r2
   14416:	f880 c03c 	strb.w	ip, [r0, #60]	; 0x3c
  m_spi->transfer(nullptr, buf, count);
   1441a:	460a      	mov	r2, r1
   1441c:	2100      	movs	r1, #0
   1441e:	f7f8 fe29 	bl	d074 <SPIClass::transfer(void const*, void*, unsigned int)>
#else  
  memset(buf, 0XFF, count);
  m_spi->transfer(buf, count);
#endif
  return 0;
}
   14422:	2000      	movs	r0, #0
   14424:	bd08      	pop	{r3, pc}
   14426:	bf00      	nop

00014428 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14428:	6803      	ldr	r3, [r0, #0]
   1442a:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
   1442c:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1442e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   14430:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   14434:	d0fb      	beq.n	1442e <SdSpiArduinoDriver::send(unsigned char)+0x6>
   14436:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
   14438:	4770      	bx	lr
   1443a:	bf00      	nop

0001443c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
   1443c:	4613      	mov	r3, r2
#ifdef USE_TRANSFER_TX_RX
  m_spi->transfer(buf, nullptr, count);
   1443e:	6800      	ldr	r0, [r0, #0]
   14440:	2200      	movs	r2, #0
   14442:	f7f8 be17 	b.w	d074 <SPIClass::transfer(void const*, void*, unsigned int)>
   14446:	bf00      	nop

00014448 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
   14448:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   1444a:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
   1444c:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
   1444e:	07dc      	lsls	r4, r3, #31
   14450:	d51d      	bpl.n	1448e <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
   14452:	4604      	mov	r4, r0
   14454:	6840      	ldr	r0, [r0, #4]
   14456:	f104 0210 	add.w	r2, r4, #16
   1445a:	6803      	ldr	r3, [r0, #0]
   1445c:	68e1      	ldr	r1, [r4, #12]
   1445e:	9201      	str	r2, [sp, #4]
   14460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14462:	4798      	blx	r3
   14464:	9a01      	ldr	r2, [sp, #4]
   14466:	4605      	mov	r5, r0
   14468:	b1a8      	cbz	r0, 14496 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   1446a:	7823      	ldrb	r3, [r4, #0]
   1446c:	0799      	lsls	r1, r3, #30
   1446e:	d508      	bpl.n	14482 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
   14470:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
   14472:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
   14476:	4419      	add	r1, r3
   14478:	6803      	ldr	r3, [r0, #0]
   1447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1447c:	4798      	blx	r3
   1447e:	b150      	cbz	r0, 14496 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   14480:	7823      	ldrb	r3, [r4, #0]
   14482:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
   14486:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
   14488:	7023      	strb	r3, [r4, #0]
}
   1448a:	b003      	add	sp, #12
   1448c:	bd30      	pop	{r4, r5, pc}
  return true;
   1448e:	2501      	movs	r5, #1
}
   14490:	4628      	mov	r0, r5
   14492:	b003      	add	sp, #12
   14494:	bd30      	pop	{r4, r5, pc}
  return false;
   14496:	2500      	movs	r5, #0
}
   14498:	4628      	mov	r0, r5
   1449a:	b003      	add	sp, #12
   1449c:	bd30      	pop	{r4, r5, pc}
   1449e:	bf00      	nop

000144a0 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
   144a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
   144a2:	6843      	ldr	r3, [r0, #4]
   144a4:	b30b      	cbz	r3, 144ea <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
   144a6:	68c3      	ldr	r3, [r0, #12]
   144a8:	4604      	mov	r4, r0
   144aa:	460f      	mov	r7, r1
   144ac:	4615      	mov	r5, r2
   144ae:	428b      	cmp	r3, r1
   144b0:	d106      	bne.n	144c0 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
   144b2:	f810 3b10 	ldrb.w	r3, [r0], #16
   144b6:	f005 0503 	and.w	r5, r5, #3
   144ba:	432b      	orrs	r3, r5
   144bc:	7023      	strb	r3, [r4, #0]
}
   144be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
   144c0:	f7ff ffc2 	bl	14448 <FsCache::sync()>
   144c4:	b188      	cbz	r0, 144ea <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
   144c6:	076b      	lsls	r3, r5, #29
   144c8:	d505      	bpl.n	144d6 <FsCache::prepare(unsigned long, unsigned char)+0x36>
   144ca:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
   144ce:	4630      	mov	r0, r6
    m_sector = sector;
   144d0:	2300      	movs	r3, #0
   144d2:	60e7      	str	r7, [r4, #12]
   144d4:	e7ef      	b.n	144b6 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
   144d6:	6860      	ldr	r0, [r4, #4]
   144d8:	f104 0610 	add.w	r6, r4, #16
   144dc:	4639      	mov	r1, r7
   144de:	6803      	ldr	r3, [r0, #0]
   144e0:	4632      	mov	r2, r6
   144e2:	691b      	ldr	r3, [r3, #16]
   144e4:	4798      	blx	r3
   144e6:	2800      	cmp	r0, #0
   144e8:	d1f1      	bne.n	144ce <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
   144ea:	2000      	movs	r0, #0
}
   144ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144ee:	bf00      	nop

000144f0 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
   144f0:	b510      	push	{r4, lr}
   144f2:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
   144f4:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
   144f6:	b082      	sub	sp, #8
  if (ls) {
   144f8:	b118      	cbz	r0, 14502 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
   144fa:	2300      	movs	r3, #0
   144fc:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
   144fe:	b002      	add	sp, #8
   14500:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
   14502:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   14506:	428b      	cmp	r3, r1
   14508:	d2f9      	bcs.n	144fe <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
   1450a:	aa01      	add	r2, sp, #4
   1450c:	4618      	mov	r0, r3
   1450e:	f000 f8b7 	bl	14680 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
   14512:	b180      	cbz	r0, 14536 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
   14514:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
   14516:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
   14518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1451c:	d201      	bcs.n	14522 <FsName::get16()+0x32>
      rtn = cp;
   1451e:	b298      	uxth	r0, r3
   14520:	e7ed      	b.n	144fe <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
   14522:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
   14524:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
   14528:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
   1452c:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
   14530:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
   14532:	81a3      	strh	r3, [r4, #12]
   14534:	e7e3      	b.n	144fe <FsName::get16()+0xe>
  return 0XFFFF;
   14536:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1453a:	e7e0      	b.n	144fe <FsName::get16()+0xe>

0001453c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   1453c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   14540:	d821      	bhi.n	14586 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
   14542:	2910      	cmp	r1, #16
   14544:	d82e      	bhi.n	145a4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
   14546:	2340      	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   14548:	f04f 0c20 	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
   1454c:	fbb2 f1f3 	udiv	r1, r2, r3
  if (c <= 1023) {
   14550:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   14554:	d220      	bcs.n	14598 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
   14556:	fb03 2311 	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
   1455a:	b500      	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
   1455c:	fbb2 fefc 	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
   14560:	fbb3 f3fc 	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
   14564:	fb0c 221e 	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
   14568:	ea4f 0c91 	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
   1456c:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
   1456e:	3201      	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
   14570:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
   14574:	b2c9      	uxtb	r1, r1
  chs[0] = h;
   14576:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
   14578:	ea42 020c 	orr.w	r2, r2, ip
  chs[2] = c;
   1457c:	7081      	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
   1457e:	b2d2      	uxtb	r2, r2
   14580:	7042      	strb	r2, [r0, #1]
}
   14582:	f85d fb04 	ldr.w	pc, [sp], #4
   14586:	233f      	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   14588:	469c      	mov	ip, r3
  } else if (capacityMB <= 128) {
   1458a:	2980      	cmp	r1, #128	; 0x80
   1458c:	d910      	bls.n	145b0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
   1458e:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
   14592:	d80f      	bhi.n	145b4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
   14594:	011b      	lsls	r3, r3, #4
   14596:	e7d9      	b.n	1454c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
   14598:	21ff      	movs	r1, #255	; 0xff
    h = 254;
   1459a:	23fe      	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
   1459c:	7041      	strb	r1, [r0, #1]
  chs[0] = h;
   1459e:	7003      	strb	r3, [r0, #0]
  chs[2] = c;
   145a0:	7081      	strb	r1, [r0, #2]
   145a2:	4770      	bx	lr
  } else if (capacityMB <= 32) {
   145a4:	2920      	cmp	r1, #32
   145a6:	d816      	bhi.n	145d6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
   145a8:	2380      	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   145aa:	f04f 0c20 	mov.w	ip, #32
   145ae:	e7cd      	b.n	1454c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
   145b0:	00db      	lsls	r3, r3, #3
   145b2:	e7cb      	b.n	1454c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
   145b4:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
   145b8:	d904      	bls.n	145c4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
   145ba:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
   145be:	d803      	bhi.n	145c8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
   145c0:	019b      	lsls	r3, r3, #6
   145c2:	e7c3      	b.n	1454c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
   145c4:	015b      	lsls	r3, r3, #5
   145c6:	e7c1      	b.n	1454c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
   145c8:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
   145cc:	bf94      	ite	ls
   145ce:	01db      	lslls	r3, r3, #7
   145d0:	ebc3 2303 	rsbhi	r3, r3, r3, lsl #8
   145d4:	e7ba      	b.n	1454c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
   145d6:	2320      	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   145d8:	469c      	mov	ip, r3
   145da:	e7d6      	b.n	1458a <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

000145dc <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
   145dc:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
   145de:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
   145e2:	d805      	bhi.n	145f0 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
   145e4:	b112      	cbz	r2, 145ec <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
   145e6:	460a      	mov	r2, r1
   145e8:	f802 0b01 	strb.w	r0, [r2], #1
  }
   145ec:	4610      	mov	r0, r2
   145ee:	4770      	bx	lr
    } else if (cp < 0X800) {
   145f0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   145f4:	d20f      	bcs.n	14616 <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
   145f6:	2a01      	cmp	r2, #1
   145f8:	d940      	bls.n	1467c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
   145fa:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   145fe:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
   14602:	460a      	mov	r2, r1
   14604:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14608:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
   1460c:	f802 0b02 	strb.w	r0, [r2], #2
  }
   14610:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14612:	704b      	strb	r3, [r1, #1]
  }
   14614:	4770      	bx	lr
    } else if (cp < 0X10000) {
   14616:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1461a:	d216      	bcs.n	1464a <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
   1461c:	2a02      	cmp	r2, #2
   1461e:	d92d      	bls.n	1467c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   14620:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14624:	f000 033f 	and.w	r3, r0, #63	; 0x3f
   14628:	1cca      	adds	r2, r1, #3
   1462a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
   1462e:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
   14630:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   14634:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14638:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
   1463a:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   1463e:	7048      	strb	r0, [r1, #1]
  }
   14640:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
   14642:	f881 e000 	strb.w	lr, [r1]
  }
   14646:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
   1464a:	2a03      	cmp	r2, #3
   1464c:	d916      	bls.n	1467c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
   1464e:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
   14652:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   14656:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   1465a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
   1465e:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
   14662:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   14666:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   1466a:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
   1466e:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14670:	1d0a      	adds	r2, r1, #4
   14672:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
   14674:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   14678:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   1467a:	e7b7      	b.n	145ec <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
   1467c:	2200      	movs	r2, #0
   1467e:	e7b5      	b.n	145ec <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

00014680 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
   14680:	4288      	cmp	r0, r1
   14682:	d23d      	bcs.n	14700 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
   14684:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
   14686:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
   14688:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
   1468c:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
   1468e:	2800      	cmp	r0, #0
   14690:	da2d      	bge.n	146ee <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
   14692:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
   14696:	28c0      	cmp	r0, #192	; 0xc0
   14698:	d034      	beq.n	14704 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
   1469a:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
   1469e:	28e0      	cmp	r0, #224	; 0xe0
   146a0:	d034      	beq.n	1470c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
   146a2:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
   146a6:	28f0      	cmp	r0, #240	; 0xf0
   146a8:	d126      	bne.n	146f8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
   146aa:	f004 0407 	and.w	r4, r4, #7
      n = 4;
   146ae:	2004      	movs	r0, #4
    if ((str + n) > end) {
   146b0:	4418      	add	r0, r3
   146b2:	4288      	cmp	r0, r1
   146b4:	d820      	bhi.n	146f8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
   146b6:	3301      	adds	r3, #1
      ch = str[i];
   146b8:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
   146bc:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
   146c0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
   146c4:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
   146c8:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
   146cc:	d114      	bne.n	146f8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
   146ce:	4283      	cmp	r3, r0
   146d0:	d1f2      	bne.n	146b8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
   146d2:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
   146d6:	4b0f      	ldr	r3, [pc, #60]	; (14714 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
   146d8:	4299      	cmp	r1, r3
   146da:	d80d      	bhi.n	146f8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
   146dc:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
   146e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   146e4:	d308      	bcc.n	146f8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
   146e6:	6014      	str	r4, [r2, #0]
  }
   146e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   146ec:	4770      	bx	lr
      return str + 1;
   146ee:	1c58      	adds	r0, r3, #1
      *rtn = ch;
   146f0:	6014      	str	r4, [r2, #0]
  }
   146f2:	f85d 4b04 	ldr.w	r4, [sp], #4
   146f6:	4770      	bx	lr
      return nullptr;
   146f8:	2000      	movs	r0, #0
  }
   146fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   146fe:	4770      	bx	lr
      return nullptr;
   14700:	2000      	movs	r0, #0
  }
   14702:	4770      	bx	lr
      cp = ch & 0X1F;
   14704:	f004 041f 	and.w	r4, r4, #31
      n = 2;
   14708:	2002      	movs	r0, #2
   1470a:	e7d1      	b.n	146b0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
   1470c:	f004 040f 	and.w	r4, r4, #15
      n = 3;
   14710:	2003      	movs	r0, #3
   14712:	e7cd      	b.n	146b0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
   14714:	0010ff7f 	.word	0x0010ff7f

00014718 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
   14718:	287e      	cmp	r0, #126	; 0x7e
   1471a:	d93e      	bls.n	1479a <toUpcase(unsigned short)+0x82>
  size_t right = size;
   1471c:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
   14720:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
   14722:	b430      	push	{r4, r5}
   14724:	4c28      	ldr	r4, [pc, #160]	; (147c8 <toUpcase(unsigned short)+0xb0>)
   14726:	e004      	b.n	14732 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
   14728:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
   1472c:	4282      	cmp	r2, r0
   1472e:	d820      	bhi.n	14772 <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
   14730:	460b      	mov	r3, r1
  while (right - left > 1) {
   14732:	ebac 0203 	sub.w	r2, ip, r3
   14736:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
   14738:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
   1473c:	d8f4      	bhi.n	14728 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
   1473e:	b29b      	uxth	r3, r3
   14740:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
   14744:	4290      	cmp	r0, r2
   14746:	d216      	bcs.n	14776 <toUpcase(unsigned short)+0x5e>
   14748:	244b      	movs	r4, #75	; 0x4b
   1474a:	2300      	movs	r3, #0
   1474c:	4d1f      	ldr	r5, [pc, #124]	; (147cc <toUpcase(unsigned short)+0xb4>)
   1474e:	e004      	b.n	1475a <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
   14750:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
   14754:	4282      	cmp	r2, r0
   14756:	d81e      	bhi.n	14796 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
   14758:	460b      	mov	r3, r1
  while (right - left > 1) {
   1475a:	1ae2      	subs	r2, r4, r3
   1475c:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
   1475e:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
   14762:	d8f5      	bhi.n	14750 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
   14764:	b29b      	uxth	r3, r3
   14766:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
   1476a:	4282      	cmp	r2, r0
   1476c:	d01f      	beq.n	147ae <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
   1476e:	bc30      	pop	{r4, r5}
   14770:	4770      	bx	lr
    mid = left + (right - left)/2;
   14772:	468c      	mov	ip, r1
   14774:	e7dd      	b.n	14732 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
   14776:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   1477a:	1a82      	subs	r2, r0, r2
   1477c:	78e3      	ldrb	r3, [r4, #3]
   1477e:	429a      	cmp	r2, r3
   14780:	dae2      	bge.n	14748 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
   14782:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
   14786:	2b01      	cmp	r3, #1
   14788:	d016      	beq.n	147b8 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
   1478a:	b1d3      	cbz	r3, 147c2 <toUpcase(unsigned short)+0xaa>
   1478c:	b29b      	uxth	r3, r3
   1478e:	4403      	add	r3, r0
}
   14790:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
   14792:	b298      	uxth	r0, r3
}
   14794:	4770      	bx	lr
    mid = left + (right - left)/2;
   14796:	460c      	mov	r4, r1
   14798:	e7df      	b.n	1475a <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
   1479a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1479e:	2b19      	cmp	r3, #25
   147a0:	bf8c      	ite	hi
   147a2:	2300      	movhi	r3, #0
   147a4:	2301      	movls	r3, #1
   147a6:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
   147aa:	b298      	uxth	r0, r3
}
   147ac:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
   147ae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   147b2:	8868      	ldrh	r0, [r5, #2]
}
   147b4:	bc30      	pop	{r4, r5}
   147b6:	4770      	bx	lr
      return chr - ((chr - first) & 1);
   147b8:	f002 0201 	and.w	r2, r2, #1
   147bc:	1a83      	subs	r3, r0, r2
   147be:	b298      	uxth	r0, r3
   147c0:	e7d5      	b.n	1476e <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
   147c2:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
   147c6:	e7e2      	b.n	1478e <toUpcase(unsigned short)+0x76>
   147c8:	20003910 	.word	0x20003910
   147cc:	20003744 	.word	0x20003744

000147d0 <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
   147d0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
   147d4:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
   147d8:	1a10      	subs	r0, r2, r0
   147da:	4770      	bx	lr

000147dc <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
   147dc:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
   147e0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
   147e4:	429a      	cmp	r2, r3
   147e6:	d905      	bls.n	147f4 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
   147e8:	1c5a      	adds	r2, r3, #1
   147ea:	4403      	add	r3, r0
   147ec:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
   147f0:	7e98      	ldrb	r0, [r3, #26]
   147f2:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
   147f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
   147f8:	4770      	bx	lr
   147fa:	bf00      	nop

000147fc <TwoWire::peek()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
   147fc:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
   14800:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
   14804:	429a      	cmp	r2, r3
   14806:	d902      	bls.n	1480e <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
   14808:	4418      	add	r0, r3
   1480a:	7e80      	ldrb	r0, [r0, #26]
   1480c:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
   1480e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
   14812:	4770      	bx	lr

00014814 <TwoWire::flush()>:
	}
   14814:	4770      	bx	lr
   14816:	bf00      	nop

00014818 <TwoWire::write(unsigned char)>:
{
   14818:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
   1481a:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
   1481e:	b178      	cbz	r0, 14840 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
   14820:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
   14824:	2a88      	cmp	r2, #136	; 0x88
   14826:	d903      	bls.n	14830 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
   14828:	2201      	movs	r2, #1
			return 0;
   1482a:	2000      	movs	r0, #0
   1482c:	605a      	str	r2, [r3, #4]
   1482e:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
   14830:	f102 0c01 	add.w	ip, r2, #1
		return 1;
   14834:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
   14836:	441a      	add	r2, r3
   14838:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
   1483c:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
   14840:	4770      	bx	lr
   14842:	bf00      	nop

00014844 <TwoWire::write(unsigned char const*, unsigned int)>:
{
   14844:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
   14846:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
   1484a:	b90c      	cbnz	r4, 14850 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
   1484c:	4620      	mov	r0, r4
   1484e:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
   14850:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
   14854:	4605      	mov	r5, r0
   14856:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
   1485a:	42a2      	cmp	r2, r4
   1485c:	d80d      	bhi.n	1487a <TwoWire::write(unsigned char const*, unsigned int)+0x36>
   1485e:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
   14860:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
   14864:	4622      	mov	r2, r4
   14866:	4418      	add	r0, r3
   14868:	f007 f9de 	bl	1bc28 <memcpy>
		txBufferLength += quantity;
   1486c:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
   14870:	4620      	mov	r0, r4
		txBufferLength += quantity;
   14872:	4423      	add	r3, r4
   14874:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
   14878:	bd38      	pop	{r3, r4, r5, pc}
   1487a:	2201      	movs	r2, #1
   1487c:	6042      	str	r2, [r0, #4]
   1487e:	e7ef      	b.n	14860 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00014880 <TwoWire::force_clock()>:
{
   14880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   14884:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
   14888:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   1488a:	7e01      	ldrb	r1, [r0, #24]
{
   1488c:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
   1488e:	7e43      	ldrb	r3, [r0, #25]
{
   14890:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   14892:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
   14896:	4a38      	ldr	r2, [pc, #224]	; (14978 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
   14898:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   1489c:	4f37      	ldr	r7, [pc, #220]	; (1497c <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   1489e:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
   148a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
   148a4:	eb02 1501 	add.w	r5, r2, r1, lsl #4
   148a8:	0109      	lsls	r1, r1, #4
   148aa:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
   148ac:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
   148b0:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
   148b4:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
   148b8:	011b      	lsls	r3, r3, #4
   148ba:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
   148bc:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
   148be:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
   148c2:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
   148c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
   148ca:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
   148cc:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
   148ce:	492c      	ldr	r1, [pc, #176]	; (14980 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
   148d0:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
   148d2:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
   148d6:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
   148d8:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
   148dc:	686b      	ldr	r3, [r5, #4]
   148de:	4333      	orrs	r3, r6
   148e0:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   148e2:	4b28      	ldr	r3, [pc, #160]	; (14984 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
   148e4:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   148e6:	683a      	ldr	r2, [r7, #0]
   148e8:	fba3 3202 	umull	r3, r2, r3, r2
   148ec:	0c92      	lsrs	r2, r2, #18
   148ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   148f2:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   148f4:	684b      	ldr	r3, [r1, #4]
   148f6:	1b1b      	subs	r3, r3, r4
   148f8:	429a      	cmp	r2, r3
   148fa:	d8fb      	bhi.n	148f4 <TwoWire::force_clock()+0x74>
   148fc:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
   14900:	4a1f      	ldr	r2, [pc, #124]	; (14980 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   14902:	f8df e080 	ldr.w	lr, [pc, #128]	; 14984 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
   14906:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
   1490a:	4203      	tst	r3, r0
   1490c:	d002      	beq.n	14914 <TwoWire::force_clock()+0x94>
   1490e:	68ab      	ldr	r3, [r5, #8]
   14910:	4233      	tst	r3, r6
   14912:	d12f      	bne.n	14974 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
   14914:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
   14918:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   1491a:	6839      	ldr	r1, [r7, #0]
   1491c:	fbae 3101 	umull	r3, r1, lr, r1
   14920:	0c89      	lsrs	r1, r1, #18
   14922:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   14926:	6853      	ldr	r3, [r2, #4]
   14928:	1b1b      	subs	r3, r3, r4
   1492a:	4299      	cmp	r1, r3
   1492c:	d8fb      	bhi.n	14926 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
   1492e:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
   14932:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   14934:	6839      	ldr	r1, [r7, #0]
   14936:	fbae 3101 	umull	r3, r1, lr, r1
   1493a:	0c89      	lsrs	r1, r1, #18
   1493c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   14940:	6853      	ldr	r3, [r2, #4]
   14942:	1b1b      	subs	r3, r3, r4
   14944:	4299      	cmp	r1, r3
   14946:	d8fb      	bhi.n	14940 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
   14948:	f1bc 0c01 	subs.w	ip, ip, #1
   1494c:	d1db      	bne.n	14906 <TwoWire::force_clock()+0x86>
	bool ret = false;
   1494e:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
   14950:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
   14954:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
   14956:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
   1495a:	68db      	ldr	r3, [r3, #12]
   1495c:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
   14960:	f899 3019 	ldrb.w	r3, [r9, #25]
   14964:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
   14968:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
   1496c:	6013      	str	r3, [r2, #0]
}
   1496e:	b003      	add	sp, #12
   14970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
   14974:	2001      	movs	r0, #1
   14976:	e7eb      	b.n	14950 <TwoWire::force_clock()+0xd0>
   14978:	20004be8 	.word	0x20004be8
   1497c:	20008aac 	.word	0x20008aac
   14980:	e0001000 	.word	0xe0001000
   14984:	431bde83 	.word	0x431bde83

00014988 <TwoWire::wait_idle()>:
	return systick_millis_count;
   14988:	4a0e      	ldr	r2, [pc, #56]	; (149c4 <TwoWire::wait_idle()+0x3c>)
{
   1498a:	b510      	push	{r4, lr}
   1498c:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   1498e:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   14990:	e005      	b.n	1499e <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
   14992:	01db      	lsls	r3, r3, #7
   14994:	d407      	bmi.n	149a6 <TwoWire::wait_idle()+0x1e>
   14996:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
   14998:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
   1499a:	2b10      	cmp	r3, #16
   1499c:	d808      	bhi.n	149b0 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
   1499e:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
   149a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   149a4:	d1f5      	bne.n	14992 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
   149a6:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
   149aa:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
   149ac:	6163      	str	r3, [r4, #20]
}
   149ae:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
   149b0:	f7ff ff66 	bl	14880 <TwoWire::force_clock()>
   149b4:	2800      	cmp	r0, #0
   149b6:	d0fa      	beq.n	149ae <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
   149b8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
   149bc:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
   149be:	6163      	str	r3, [r4, #20]
	return true;
   149c0:	e7f5      	b.n	149ae <TwoWire::wait_idle()+0x26>
   149c2:	bf00      	nop
   149c4:	20013554 	.word	0x20013554

000149c8 <TwoWire::endTransmission(unsigned char)>:
{
   149c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
   149cc:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   149d0:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
   149d2:	f1ba 0f00 	cmp.w	sl, #0
   149d6:	d04f      	beq.n	14a78 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
   149d8:	4681      	mov	r9, r0
   149da:	4688      	mov	r8, r1
   149dc:	f7ff ffd4 	bl	14988 <TwoWire::wait_idle()>
   149e0:	2800      	cmp	r0, #0
   149e2:	d049      	beq.n	14a78 <TwoWire::endTransmission(unsigned char)+0xb0>
   149e4:	4e37      	ldr	r6, [pc, #220]	; (14ac4 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
   149e6:	2400      	movs	r4, #0
   149e8:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   149ea:	e018      	b.n	14a1e <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
   149ec:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
   149ee:	0519      	lsls	r1, r3, #20
   149f0:	d451      	bmi.n	14a96 <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
   149f2:	04da      	lsls	r2, r3, #19
   149f4:	d455      	bmi.n	14aa2 <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
   149f6:	0558      	lsls	r0, r3, #21
   149f8:	d459      	bmi.n	14aae <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
   149fa:	0499      	lsls	r1, r3, #18
   149fc:	d441      	bmi.n	14a82 <TwoWire::endTransmission(unsigned char)+0xba>
   149fe:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
   14a00:	1bd2      	subs	r2, r2, r7
   14a02:	2a32      	cmp	r2, #50	; 0x32
   14a04:	d83d      	bhi.n	14a82 <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
   14a06:	4554      	cmp	r4, sl
   14a08:	d907      	bls.n	14a1a <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
   14a0a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
   14a0c:	0752      	lsls	r2, r2, #29
   14a0e:	d104      	bne.n	14a1a <TwoWire::endTransmission(unsigned char)+0x52>
   14a10:	059b      	lsls	r3, r3, #22
   14a12:	d455      	bmi.n	14ac0 <TwoWire::endTransmission(unsigned char)+0xf8>
   14a14:	f1b8 0f00 	cmp.w	r8, #0
   14a18:	d052      	beq.n	14ac0 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
   14a1a:	f008 fddd 	bl	1d5d8 <yield>
		if (tx_index <= tx_len) {
   14a1e:	4554      	cmp	r4, sl
   14a20:	d8e4      	bhi.n	149ec <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
   14a22:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
   14a24:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
   14a26:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
   14a2a:	d4df      	bmi.n	149ec <TwoWire::endTransmission(unsigned char)+0x24>
   14a2c:	e013      	b.n	14a56 <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
   14a2e:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
   14a32:	3301      	adds	r3, #1
			while (fifo_used < 4) {
   14a34:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
   14a36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
   14a3a:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
   14a3c:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
   14a3e:	d01e      	beq.n	14a7e <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
   14a40:	458a      	cmp	sl, r1
				fifo_used++;
   14a42:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14a46:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
   14a4a:	d90e      	bls.n	14a6a <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14a4c:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
   14a50:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14a52:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
   14a54:	d0ca      	beq.n	149ec <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
   14a56:	2101      	movs	r1, #1
				if (tx_index == 0) {
   14a58:	2c00      	cmp	r4, #0
   14a5a:	d0e8      	beq.n	14a2e <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14a5c:	4621      	mov	r1, r4
				fifo_used++;
   14a5e:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14a60:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
   14a62:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14a64:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
   14a68:	d8f0      	bhi.n	14a4c <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
   14a6a:	f1b8 0f00 	cmp.w	r8, #0
   14a6e:	d0bd      	beq.n	149ec <TwoWire::endTransmission(unsigned char)+0x24>
   14a70:	f44f 7300 	mov.w	r3, #512	; 0x200
   14a74:	662b      	str	r3, [r5, #96]	; 0x60
					break;
   14a76:	e7b9      	b.n	149ec <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
   14a78:	2004      	movs	r0, #4
}
   14a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
   14a7e:	2401      	movs	r4, #1
   14a80:	e7b4      	b.n	149ec <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14a82:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   14a84:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
   14a88:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14a8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14a8e:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   14a90:	662a      	str	r2, [r5, #96]	; 0x60
}
   14a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14a96:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
   14a98:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14a9a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14a9e:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
   14aa0:	e7eb      	b.n	14a7a <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14aa2:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
   14aa4:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14aa6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14aaa:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
   14aac:	e7e5      	b.n	14a7a <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14aae:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
   14ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
   14ab4:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14ab6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14aba:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
   14abc:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
   14abe:	e7dc      	b.n	14a7a <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
   14ac0:	2000      	movs	r0, #0
   14ac2:	e7da      	b.n	14a7a <TwoWire::endTransmission(unsigned char)+0xb2>
   14ac4:	20013554 	.word	0x20013554

00014ac8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
   14ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14acc:	4683      	mov	fp, r0
   14ace:	460c      	mov	r4, r1
   14ad0:	4615      	mov	r5, r2
   14ad2:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   14ad4:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
   14ad8:	f7ff ff56 	bl	14988 <TwoWire::wait_idle()>
   14adc:	2800      	cmp	r0, #0
   14ade:	f000 809e 	beq.w	14c1e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
   14ae2:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
   14ae4:	2d01      	cmp	r5, #1
   14ae6:	f8df 813c 	ldr.w	r8, [pc, #316]	; 14c24 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   14aea:	f240 4601 	movw	r6, #1025	; 0x401
   14aee:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
   14af0:	f04f 0100 	mov.w	r1, #0
   14af4:	bf38      	it	cc
   14af6:	2501      	movcc	r5, #1
   14af8:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
   14afc:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   14afe:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
   14b00:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   14b04:	e020      	b.n	14b48 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
   14b06:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
   14b0a:	2b87      	cmp	r3, #135	; 0x87
   14b0c:	d93f      	bls.n	14b8e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
   14b0e:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
   14b12:	0510      	lsls	r0, r2, #20
   14b14:	d45a      	bmi.n	14bcc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
   14b16:	f412 5f10 	tst.w	r2, #9216	; 0x2400
   14b1a:	d170      	bne.n	14bfe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
   14b1c:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
   14b20:	eba3 0309 	sub.w	r3, r3, r9
   14b24:	2b32      	cmp	r3, #50	; 0x32
   14b26:	d86a      	bhi.n	14bfe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
   14b28:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
   14b2c:	42ab      	cmp	r3, r5
   14b2e:	d309      	bcc.n	14b44 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
   14b30:	2c02      	cmp	r4, #2
   14b32:	d907      	bls.n	14b44 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
   14b34:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
   14b38:	0759      	lsls	r1, r3, #29
   14b3a:	d103      	bne.n	14b44 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
   14b3c:	0593      	lsls	r3, r2, #22
   14b3e:	d44b      	bmi.n	14bd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
   14b40:	2f00      	cmp	r7, #0
   14b42:	d049      	beq.n	14bd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
   14b44:	f008 fd48 	bl	1d5d8 <yield>
		if (tx_state < 3) {
   14b48:	2c02      	cmp	r4, #2
   14b4a:	d8dc      	bhi.n	14b06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
   14b4c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
   14b50:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
   14b54:	075b      	lsls	r3, r3, #29
   14b56:	d4d6      	bmi.n	14b06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
   14b58:	1e68      	subs	r0, r5, #1
   14b5a:	4422      	add	r2, r4
   14b5c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
   14b60:	b94c      	cbnz	r4, 14b76 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   14b62:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
   14b66:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
   14b68:	1b13      	subs	r3, r2, r4
   14b6a:	2b03      	cmp	r3, #3
   14b6c:	d8cb      	bhi.n	14b06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
   14b6e:	2c02      	cmp	r4, #2
   14b70:	d8c9      	bhi.n	14b06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
   14b72:	2c00      	cmp	r4, #0
   14b74:	d0f5      	beq.n	14b62 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
   14b76:	2c01      	cmp	r4, #1
   14b78:	d037      	beq.n	14bea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
   14b7a:	b11f      	cbz	r7, 14b84 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
   14b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
   14b80:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
   14b84:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
   14b88:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
   14b8a:	2b87      	cmp	r3, #135	; 0x87
   14b8c:	d8bf      	bhi.n	14b0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   14b8e:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   14b92:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   14b96:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   14b9a:	d0b8      	beq.n	14b0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
   14b9c:	1c59      	adds	r1, r3, #1
   14b9e:	449c      	add	ip, r3
   14ba0:	3319      	adds	r3, #25
   14ba2:	b2c9      	uxtb	r1, r1
   14ba4:	fa5f fc8c 	uxtb.w	ip, ip
   14ba8:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
   14bac:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   14bb0:	1c4a      	adds	r2, r1, #1
   14bb2:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
   14bb4:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   14bb8:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
   14bba:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   14bbe:	d0a6      	beq.n	14b0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
   14bc0:	2989      	cmp	r1, #137	; 0x89
   14bc2:	d1f3      	bne.n	14bac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
   14bc4:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
   14bc8:	0510      	lsls	r0, r2, #20
   14bca:	d5a4      	bpl.n	14b16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14bcc:	f8da 3010 	ldr.w	r3, [sl, #16]
   14bd0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14bd4:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   14bd8:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
   14bdc:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
   14be0:	d106      	bne.n	14bf0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
   14be2:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
   14be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
   14bea:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
   14bee:	e7ba      	b.n	14b66 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
   14bf0:	f8da 3010 	ldr.w	r3, [sl, #16]
   14bf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   14bf8:	f8ca 3010 	str.w	r3, [sl, #16]
   14bfc:	e7f1      	b.n	14be2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14bfe:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   14c02:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14c06:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14c0a:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   14c0e:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   14c12:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
   14c16:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
   14c1a:	d0e2      	beq.n	14be2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
   14c1c:	e7e8      	b.n	14bf0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
   14c1e:	2004      	movs	r0, #4
}
   14c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c24:	20013554 	.word	0x20013554

00014c28 <TwoWire::isr()>:
{
   14c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   14c2a:	6906      	ldr	r6, [r0, #16]
{
   14c2c:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
   14c2e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
   14c32:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
   14c36:	d001      	beq.n	14c3c <TwoWire::isr()+0x14>
   14c38:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
   14c3c:	07a8      	lsls	r0, r5, #30
   14c3e:	d50b      	bpl.n	14c58 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
   14c40:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
   14c44:	0411      	lsls	r1, r2, #16
   14c46:	d53d      	bpl.n	14cc4 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
   14c48:	2300      	movs	r3, #0
   14c4a:	2101      	movs	r1, #1
   14c4c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
   14c50:	4423      	add	r3, r4
   14c52:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
   14c56:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
   14c58:	07ea      	lsls	r2, r5, #31
   14c5a:	d510      	bpl.n	14c7e <TwoWire::isr()+0x56>
		if (!transmitting) {
   14c5c:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
   14c60:	b1f7      	cbz	r7, 14ca0 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
   14c62:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
   14c66:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   14c6a:	42bb      	cmp	r3, r7
   14c6c:	d926      	bls.n	14cbc <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
   14c6e:	1c7b      	adds	r3, r7, #1
   14c70:	4427      	add	r7, r4
   14c72:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
   14c76:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
   14c7a:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
   14c7e:	05ab      	lsls	r3, r5, #22
   14c80:	d50d      	bpl.n	14c9e <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
   14c82:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
   14c86:	b118      	cbz	r0, 14c90 <TwoWire::isr()+0x68>
   14c88:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   14c8c:	b103      	cbz	r3, 14c90 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
   14c8e:	4798      	blx	r3
		rxBufferIndex = 0;
   14c90:	2300      	movs	r3, #0
   14c92:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
   14c96:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
   14c9a:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
   14c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
   14ca0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   14ca4:	b103      	cbz	r3, 14ca8 <TwoWire::isr()+0x80>
				(*user_onRequest)();
   14ca6:	4798      	blx	r3
			txBufferIndex = 0;
   14ca8:	2300      	movs	r3, #0
   14caa:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
   14cae:	2301      	movs	r3, #1
   14cb0:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
   14cb4:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
   14cb8:	42bb      	cmp	r3, r7
   14cba:	d8d8      	bhi.n	14c6e <TwoWire::isr()+0x46>
			port->STDR = 0;
   14cbc:	2300      	movs	r3, #0
   14cbe:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
   14cc2:	e7dc      	b.n	14c7e <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
   14cc4:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
   14cc8:	2b87      	cmp	r3, #135	; 0x87
   14cca:	d8c5      	bhi.n	14c58 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
   14ccc:	1c59      	adds	r1, r3, #1
   14cce:	b2c9      	uxtb	r1, r1
   14cd0:	e7be      	b.n	14c50 <TwoWire::isr()+0x28>
   14cd2:	bf00      	nop

00014cd4 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
   14cd4:	4801      	ldr	r0, [pc, #4]	; (14cdc <lpi2c1_isr()+0x8>)
   14cd6:	f7ff bfa7 	b.w	14c28 <TwoWire::isr()>
   14cda:	bf00      	nop
   14cdc:	20008bb0 	.word	0x20008bb0

00014ce0 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
   14ce0:	4801      	ldr	r0, [pc, #4]	; (14ce8 <lpi2c3_isr()+0x8>)
   14ce2:	f7ff bfa1 	b.w	14c28 <TwoWire::isr()>
   14ce6:	bf00      	nop
   14ce8:	20008cf0 	.word	0x20008cf0

00014cec <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
   14cec:	4801      	ldr	r0, [pc, #4]	; (14cf4 <lpi2c4_isr()+0x8>)
   14cee:	f7ff bf9b 	b.w	14c28 <TwoWire::isr()>
   14cf2:	bf00      	nop
   14cf4:	20008e30 	.word	0x20008e30

00014cf8 <Bounce::readCurrentState()>:
protected:


	uint8_t pin;

	virtual bool readCurrentState() { return digitalRead(pin); }
   14cf8:	b508      	push	{r3, lr}
   14cfa:	7d00      	ldrb	r0, [r0, #20]
   14cfc:	f006 fcc2 	bl	1b684 <digitalRead>
   14d00:	3800      	subs	r0, #0
   14d02:	bf18      	it	ne
   14d04:	2001      	movne	r0, #1
   14d06:	bd08      	pop	{r3, pc}

00014d08 <Bounce::setPinMode(int, int)>:
	virtual void setPinMode(int pin, int mode) {
#if defined(ARDUINO_ARCH_STM32F1)
		pinMode(pin, (WiringPinMode)mode);
#else
		pinMode(pin, mode);
   14d08:	b2c8      	uxtb	r0, r1
   14d0a:	b2d1      	uxtb	r1, r2
   14d0c:	f006 bccc 	b.w	1b6a8 <pinMode>

00014d10 <Debouncer::interval(unsigned short)>:
    , interval_millis(10)
    , state(0) {}

void Debouncer::interval(uint16_t interval_millis)
{
    this->interval_millis = interval_millis;
   14d10:	8101      	strh	r1, [r0, #8]
}
   14d12:	4770      	bx	lr

00014d14 <Debouncer::update()>:
    previous_millis = millis();
#endif
}

bool Debouncer::update()
{
   14d14:	b538      	push	{r3, r4, r5, lr}
  inline void unsetStateFlag(const uint8_t flag)  {state &= ~flag;}
   14d16:	7a83      	ldrb	r3, [r0, #10]
   14d18:	4604      	mov	r4, r0
    }
    
    
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = readCurrentState();
   14d1a:	6801      	ldr	r1, [r0, #0]
   14d1c:	f023 0304 	bic.w	r3, r3, #4
   14d20:	4a1c      	ldr	r2, [pc, #112]	; (14d94 <Debouncer::update()+0x80>)
   14d22:	7283      	strb	r3, [r0, #10]
   14d24:	680b      	ldr	r3, [r1, #0]
   14d26:	4293      	cmp	r3, r2
   14d28:	d131      	bne.n	14d8e <Debouncer::update()+0x7a>
	virtual bool readCurrentState() { return digitalRead(pin); }
   14d2a:	7d00      	ldrb	r0, [r0, #20]
   14d2c:	f006 fcaa 	bl	1b684 <digitalRead>
   14d30:	3800      	subs	r0, #0
   14d32:	bf18      	it	ne
   14d34:	2001      	movne	r0, #1
  inline bool getStateFlag(const uint8_t flag)    {return((state & flag) != 0);}
   14d36:	7aa3      	ldrb	r3, [r4, #10]
    

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != getStateFlag(UNSTABLE_STATE) ) {
   14d38:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14d3c:	4290      	cmp	r0, r2
   14d3e:	d008      	beq.n	14d52 <Debouncer::update()+0x3e>
   14d40:	4a15      	ldr	r2, [pc, #84]	; (14d98 <Debouncer::update()+0x84>)
  inline void toggleStateFlag(const uint8_t flag) {state ^= flag;}
   14d42:	f083 0302 	eor.w	r3, r3, #2
   14d46:	6812      	ldr	r2, [r2, #0]
  inline bool getStateFlag(const uint8_t flag)    {return((state & flag) != 0);}
   14d48:	f3c3 0080 	ubfx	r0, r3, #2, #1
  inline void toggleStateFlag(const uint8_t flag) {state ^= flag;}
   14d4c:	72a3      	strb	r3, [r4, #10]
        previous_millis = millis();
   14d4e:	6062      	str	r2, [r4, #4]
    
#endif

		return  changed(); 

}
   14d50:	bd38      	pop	{r3, r4, r5, pc}
   14d52:	4911      	ldr	r1, [pc, #68]	; (14d98 <Debouncer::update()+0x84>)
        if ( millis() - previous_millis >= interval_millis ) {
   14d54:	6865      	ldr	r5, [r4, #4]
   14d56:	680a      	ldr	r2, [r1, #0]
   14d58:	f8b4 c008 	ldrh.w	ip, [r4, #8]
   14d5c:	1b52      	subs	r2, r2, r5
   14d5e:	4562      	cmp	r2, ip
   14d60:	d312      	bcc.n	14d88 <Debouncer::update()+0x74>
            if (currentState != getStateFlag(DEBOUNCED_STATE) ) {
   14d62:	f003 0201 	and.w	r2, r3, #1
   14d66:	4290      	cmp	r0, r2
   14d68:	d00e      	beq.n	14d88 <Debouncer::update()+0x74>
   14d6a:	6808      	ldr	r0, [r1, #0]
   14d6c:	f083 0301 	eor.w	r3, r3, #1
   14d70:	680a      	ldr	r2, [r1, #0]
}

inline void Debouncer::changeState() {
	toggleStateFlag(DEBOUNCED_STATE);
	setStateFlag(CHANGED_STATE) ;
	durationOfPreviousState = millis() - stateChangeLastTime;
   14d72:	68e5      	ldr	r5, [r4, #12]
  inline void setStateFlag(const uint8_t flag)    {state |= flag;}
   14d74:	f043 0304 	orr.w	r3, r3, #4
   14d78:	6809      	ldr	r1, [r1, #0]
   14d7a:	1b52      	subs	r2, r2, r5
                previous_millis = millis();
   14d7c:	6060      	str	r0, [r4, #4]
	stateChangeLastTime = millis();
   14d7e:	60e1      	str	r1, [r4, #12]
}
   14d80:	2001      	movs	r0, #1
	durationOfPreviousState = millis() - stateChangeLastTime;
   14d82:	6122      	str	r2, [r4, #16]
   14d84:	72a3      	strb	r3, [r4, #10]
}
   14d86:	bd38      	pop	{r3, r4, r5, pc}
  inline bool getStateFlag(const uint8_t flag)    {return((state & flag) != 0);}
   14d88:	f3c3 0080 	ubfx	r0, r3, #2, #1
   14d8c:	bd38      	pop	{r3, r4, r5, pc}
    bool currentState = readCurrentState();
   14d8e:	4798      	blx	r3
   14d90:	e7d1      	b.n	14d36 <Debouncer::update()+0x22>
   14d92:	bf00      	nop
   14d94:	00014cf9 	.word	0x00014cf9
   14d98:	20013554 	.word	0x20013554

00014d9c <Debouncer::fell()>:
   14d9c:	7a80      	ldrb	r0, [r0, #10]
    return getStateFlag(DEBOUNCED_STATE) && getStateFlag(CHANGED_STATE);
}

bool Debouncer::fell()
{
    return  !getStateFlag(DEBOUNCED_STATE) && getStateFlag(CHANGED_STATE);
   14d9e:	07c3      	lsls	r3, r0, #31
   14da0:	bf54      	ite	pl
   14da2:	f3c0 0080 	ubfxpl	r0, r0, #2, #1
   14da6:	2000      	movmi	r0, #0
}
   14da8:	4770      	bx	lr
   14daa:	bf00      	nop

00014dac <Bounce::Bounce()>:
Debouncer::Debouncer():previous_millis(0)
   14dac:	2200      	movs	r2, #0
    , interval_millis(10)
   14dae:	f04f 0c0a 	mov.w	ip, #10
// BOUNCE //
////////////


Bounce::Bounce()
    : pin(0)
   14db2:	4904      	ldr	r1, [pc, #16]	; (14dc4 <Bounce::Bounce()+0x18>)
Debouncer::Debouncer():previous_millis(0)
   14db4:	6042      	str	r2, [r0, #4]
    , interval_millis(10)
   14db6:	f8a0 c008 	strh.w	ip, [r0, #8]
    , state(0) {}
   14dba:	7282      	strb	r2, [r0, #10]
    : pin(0)
   14dbc:	6001      	str	r1, [r0, #0]
   14dbe:	7502      	strb	r2, [r0, #20]
{}
   14dc0:	4770      	bx	lr
   14dc2:	bf00      	nop
   14dc4:	20003de8 	.word	0x20003de8

00014dc8 <Bounce::attach(int)>:
	 state = 0;
   14dc8:	f04f 0c00 	mov.w	ip, #0

void Bounce::attach(int pin) {
    this->pin = pin;
   14dcc:	b2c9      	uxtb	r1, r1
    if (readCurrentState()) {
   14dce:	6803      	ldr	r3, [r0, #0]
   14dd0:	4a0e      	ldr	r2, [pc, #56]	; (14e0c <Bounce::attach(int)+0x44>)
void Bounce::attach(int pin) {
   14dd2:	b510      	push	{r4, lr}
    this->pin = pin;
   14dd4:	7501      	strb	r1, [r0, #20]
void Bounce::attach(int pin) {
   14dd6:	4604      	mov	r4, r0
	 state = 0;
   14dd8:	f880 c00a 	strb.w	ip, [r0, #10]
    if (readCurrentState()) {
   14ddc:	681b      	ldr	r3, [r3, #0]
   14dde:	4293      	cmp	r3, r2
   14de0:	d10b      	bne.n	14dfa <Bounce::attach(int)+0x32>
	virtual bool readCurrentState() { return digitalRead(pin); }
   14de2:	4608      	mov	r0, r1
   14de4:	f006 fc4e 	bl	1b684 <digitalRead>
   14de8:	b118      	cbz	r0, 14df2 <Bounce::attach(int)+0x2a>
  inline void setStateFlag(const uint8_t flag)    {state |= flag;}
   14dea:	7aa3      	ldrb	r3, [r4, #10]
   14dec:	f043 0303 	orr.w	r3, r3, #3
   14df0:	72a3      	strb	r3, [r4, #10]
   14df2:	4b07      	ldr	r3, [pc, #28]	; (14e10 <Bounce::attach(int)+0x48>)
   14df4:	681b      	ldr	r3, [r3, #0]
    previous_millis = millis();
   14df6:	6063      	str	r3, [r4, #4]
    
    // SET INITIAL STATE
    begin();
}
   14df8:	bd10      	pop	{r4, pc}
    if (readCurrentState()) {
   14dfa:	4798      	blx	r3
   14dfc:	2800      	cmp	r0, #0
   14dfe:	d0f8      	beq.n	14df2 <Bounce::attach(int)+0x2a>
   14e00:	7aa3      	ldrb	r3, [r4, #10]
   14e02:	f043 0303 	orr.w	r3, r3, #3
   14e06:	72a3      	strb	r3, [r4, #10]
   14e08:	e7f3      	b.n	14df2 <Bounce::attach(int)+0x2a>
   14e0a:	bf00      	nop
   14e0c:	00014cf9 	.word	0x00014cf9
   14e10:	20013554 	.word	0x20013554

00014e14 <ST7735_t3::write(unsigned char)>:
}	


// overwrite functions from class Print:

size_t ST7735_t3::write(uint8_t c) {
   14e14:	b500      	push	{lr}
	return write(&c, 1);
   14e16:	6803      	ldr	r3, [r0, #0]
size_t ST7735_t3::write(uint8_t c) {
   14e18:	b083      	sub	sp, #12
   14e1a:	468c      	mov	ip, r1
	return write(&c, 1);
   14e1c:	2201      	movs	r2, #1
   14e1e:	f10d 0107 	add.w	r1, sp, #7
   14e22:	685b      	ldr	r3, [r3, #4]
size_t ST7735_t3::write(uint8_t c) {
   14e24:	f88d c007 	strb.w	ip, [sp, #7]
	return write(&c, 1);
   14e28:	4798      	blx	r3
}
   14e2a:	b003      	add	sp, #12
   14e2c:	f85d fb04 	ldr.w	pc, [sp], #4

00014e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>:
	if (p[index >> 3] & (1 << (7 - (index & 7)))) return 1;
	return 0;
}

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index, uint32_t required)
{
   14e30:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t val = 0;
   14e32:	2400      	movs	r4, #0
	do {
		uint8_t b = p[index >> 3];
		uint32_t avail = 8 - (index & 7);
		if (avail <= required) {
			val <<= avail;
			val |= b & ((1 << avail) - 1);
   14e34:	2701      	movs	r7, #1
   14e36:	e005      	b.n	14e44 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)+0x14>
   14e38:	ea0c 0c05 	and.w	ip, ip, r5
			b >>= avail - required;
			val <<= required;
			val |= b & ((1 << required) - 1);
			break;
		}
	} while (required);
   14e3c:	18d2      	adds	r2, r2, r3
			val |= b & ((1 << avail) - 1);
   14e3e:	ea4c 0406 	orr.w	r4, ip, r6
	} while (required);
   14e42:	d019      	beq.n	14e78 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)+0x48>
		uint32_t avail = 8 - (index & 7);
   14e44:	f001 0307 	and.w	r3, r1, #7
		uint8_t b = p[index >> 3];
   14e48:	08cd      	lsrs	r5, r1, #3
		uint32_t avail = 8 - (index & 7);
   14e4a:	f1c3 0e08 	rsb	lr, r3, #8
		uint8_t b = p[index >> 3];
   14e4e:	5d45      	ldrb	r5, [r0, r5]
			required -= avail;
   14e50:	3b08      	subs	r3, #8
			val |= b & ((1 << avail) - 1);
   14e52:	fa07 fc0e 	lsl.w	ip, r7, lr
		if (avail <= required) {
   14e56:	4572      	cmp	r2, lr
			val <<= avail;
   14e58:	fa04 f60e 	lsl.w	r6, r4, lr
			index += avail;
   14e5c:	4471      	add	r1, lr
			val |= b & ((1 << avail) - 1);
   14e5e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
		if (avail <= required) {
   14e62:	d2e9      	bcs.n	14e38 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)+0x8>
			val |= b & ((1 << required) - 1);
   14e64:	2301      	movs	r3, #1
			b >>= avail - required;
   14e66:	ebae 0e02 	sub.w	lr, lr, r2
			val <<= required;
   14e6a:	4094      	lsls	r4, r2
			val |= b & ((1 << required) - 1);
   14e6c:	4093      	lsls	r3, r2
			b >>= avail - required;
   14e6e:	fa45 f50e 	asr.w	r5, r5, lr
			val |= b & ((1 << required) - 1);
   14e72:	3b01      	subs	r3, #1
   14e74:	401d      	ands	r5, r3
   14e76:	432c      	orrs	r4, r5
	return val;
}
   14e78:	4620      	mov	r0, r4
   14e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014e7c <__tcf_0>:
ST7735DMA_Data ST7735_t3::_dma_data[3];   // one structure for each SPI buss... 
   14e7c:	b510      	push	{r4, lr}
		release();
   14e7e:	4c07      	ldr	r4, [pc, #28]	; (14e9c <__tcf_0+0x20>)
   14e80:	f504 7020 	add.w	r0, r4, #640	; 0x280
   14e84:	f005 fcf6 	bl	1a874 <DMAChannel::release()>
   14e88:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
   14e8c:	f005 fcf2 	bl	1a874 <DMAChannel::release()>
   14e90:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   14e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14e98:	f005 bcec 	b.w	1a874 <DMAChannel::release()>
   14e9c:	2000a320 	.word	0x2000a320

00014ea0 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)>:
ST7735_t3::ST7735_t3(uint8_t cs, uint8_t rs, uint8_t rst) 
   14ea0:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
   14ea2:	2500      	movs	r5, #0
	_cs   = cs;
   14ea4:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
	_rs   = rs;
   14ea8:	f880 20ad 	strb.w	r2, [r0, #173]	; 0xad
	_rot = 0xff;
   14eac:	21ff      	movs	r1, #255	; 0xff
	_rst  = rst;
   14eae:	f880 30ae 	strb.w	r3, [r0, #174]	; 0xae
	hwSPI = true;
   14eb2:	2301      	movs	r3, #1
	_screenHeight = ST7735_TFTHEIGHT_160;
   14eb4:	4a74      	ldr	r2, [pc, #464]	; (15088 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1e8>)
ST7735_t3::ST7735_t3(uint8_t cs, uint8_t rs, uint8_t rst) 
   14eb6:	4604      	mov	r4, r0
   14eb8:	f8a0 5100 	strh.w	r5, [r0, #256]	; 0x100
   14ebc:	6045      	str	r5, [r0, #4]
   14ebe:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
   14ec2:	81c5      	strh	r5, [r0, #14]
   14ec4:	6605      	str	r5, [r0, #96]	; 0x60
   14ec6:	f880 5064 	strb.w	r5, [r0, #100]	; 0x64
   14eca:	f8a0 5070 	strh.w	r5, [r0, #112]	; 0x70
   14ece:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
   14ed2:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
   14ed6:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
   14eda:	f880 509c 	strb.w	r5, [r0, #156]	; 0x9c
   14ede:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
   14ee2:	f880 50f0 	strb.w	r5, [r0, #240]	; 0xf0
   14ee6:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   14eea:	f880 50f8 	strb.w	r5, [r0, #248]	; 0xf8
	_rot = 0xff;
   14eee:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
	_sid  = _sclk = (uint8_t)-1;
   14ef2:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
	hwSPI = true;
   14ef6:	7243      	strb	r3, [r0, #9]
	_sid  = _sclk = (uint8_t)-1;
   14ef8:	f880 10af 	strb.w	r1, [r0, #175]	; 0xaf
	textsize_x  = 1;
   14efc:	f240 1101 	movw	r1, #257	; 0x101
    _pfbtft = NULL;	
   14f00:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
    _use_fbtft = 0;						// Are we in frame buffer mode?
   14f04:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
	_we_allocated_buffer = NULL;
   14f08:	f8c0 50e0 	str.w	r5, [r0, #224]	; 0xe0
	_dma_state = 0;
   14f0c:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
	_screenHeight = ST7735_TFTHEIGHT_160;
   14f10:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
ST7735_t3::ST7735_t3(uint8_t cs, uint8_t rs, uint8_t rst) 
   14f14:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
   14f18:	f8df c188 	ldr.w	ip, [pc, #392]	; 150a4 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x204>
	textcolor = textbgcolor = 0xFFFF;
   14f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
ST7735_t3::ST7735_t3(uint8_t cs, uint8_t rs, uint8_t rst) 
   14f20:	65a0      	str	r0, [r4, #88]	; 0x58
   14f22:	485a      	ldr	r0, [pc, #360]	; (1508c <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1ec>)
   14f24:	6020      	str	r0, [r4, #0]
   14f26:	485a      	ldr	r0, [pc, #360]	; (15090 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1f0>)
   14f28:	6520      	str	r0, [r4, #80]	; 0x50
   14f2a:	2007      	movs	r0, #7
   14f2c:	e9c4 c021 	strd	ip, r0, [r4, #132]	; 0x84
		{ _clipx1 = x1; _clipy1 = y1; _clipx2 = x1+w; _clipy2 = y1+h; 
			//if (Serial) Serial.printf("Set clip Rect %d %d %d %d\n", x1, y1, w, h);
			updateDisplayClip();
		}
	void setClipRect() {
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   14f30:	f9b4 c026 	ldrsh.w	ip, [r4, #38]	; 0x26
	wrap      = true;
   14f34:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	int16_t  _displayclipx1, _displayclipy1, _displayclipx2, _displayclipy2;
	bool _invisible = false; 
	bool _standard = true; // no bounding rectangle or origin set. 

	inline void updateDisplayClip() {
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   14f38:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
	textsize_x  = 1;
   14f3c:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
   14f40:	4563      	cmp	r3, ip
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   14f42:	eb03 010c 	add.w	r1, r3, ip

		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   14f46:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
   14f4a:	bfa8      	it	ge
   14f4c:	4663      	movge	r3, ip
	textcolor = textbgcolor = 0xFFFF;
   14f4e:	6362      	str	r2, [r4, #52]	; 0x34
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   14f50:	4561      	cmp	r1, ip
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   14f52:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
	cursor_y  = cursor_x    = 0;
   14f56:	8165      	strh	r5, [r4, #10]
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   14f58:	bfa8      	it	ge
   14f5a:	4661      	movge	r1, ip
   14f5c:	81a5      	strh	r5, [r4, #12]
	font      = NULL;
   14f5e:	4290      	cmp	r0, r2
   14f60:	64e5      	str	r5, [r4, #76]	; 0x4c
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   14f62:	6125      	str	r5, [r4, #16]
   14f64:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   14f68:	eb00 0302 	add.w	r3, r0, r2
   14f6c:	bfa8      	it	ge
   14f6e:	4610      	movge	r0, r2
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   14f70:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   14f74:	fa0f fe85 	sxth.w	lr, r5
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   14f78:	4293      	cmp	r3, r2
   14f7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   14f7e:	b209      	sxth	r1, r1
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   14f80:	f8a4 c014 	strh.w	ip, [r4, #20]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   14f84:	bfa8      	it	ge
   14f86:	4613      	movge	r3, r2
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   14f88:	82e2      	strh	r2, [r4, #22]
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   14f8a:	8421      	strh	r1, [r4, #32]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   14f8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   14f90:	f8a4 e01c 	strh.w	lr, [r4, #28]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   14f94:	b21b      	sxth	r3, r3
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   14f96:	429a      	cmp	r2, r3
   14f98:	bf08      	it	eq
   14f9a:	458c      	cmpeq	ip, r1
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   14f9c:	fa0f fc80 	sxth.w	ip, r0
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   14fa0:	8463      	strh	r3, [r4, #34]	; 0x22
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   14fa2:	bf0c      	ite	eq
   14fa4:	2201      	moveq	r2, #1
   14fa6:	2200      	movne	r2, #0
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   14fa8:	458e      	cmp	lr, r1
   14faa:	bf18      	it	ne
   14fac:	459c      	cmpne	ip, r3
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   14fae:	f8a4 c01e 	strh.w	ip, [r4, #30]
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   14fb2:	f002 0201 	and.w	r2, r2, #1
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   14fb6:	bf0c      	ite	eq
   14fb8:	2301      	moveq	r3, #1
   14fba:	2300      	movne	r3, #0
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   14fbc:	4328      	orrs	r0, r5
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   14fbe:	4d35      	ldr	r5, [pc, #212]	; (15094 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1f4>)
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   14fc0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   14fc4:	bf18      	it	ne
   14fc6:	2200      	movne	r2, #0
   14fc8:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
		yield();
   14fcc:	f008 fb04 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   14fd0:	782b      	ldrb	r3, [r5, #0]
   14fd2:	b11b      	cbz	r3, 14fdc <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x13c>
   14fd4:	4b30      	ldr	r3, [pc, #192]	; (15098 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1f8>)
   14fd6:	781b      	ldrb	r3, [r3, #0]
   14fd8:	07da      	lsls	r2, r3, #31
   14fda:	d44f      	bmi.n	1507c <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1dc>
	int16_t width(void) const { return _width; };
   14fdc:	f9b4 c026 	ldrsh.w	ip, [r4, #38]	; 0x26
		_originx = x; _originy = y; 
   14fe0:	2300      	movs	r3, #0
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   14fe2:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
	int16_t height(void) const { return _height; }
   14fe6:	f9b4 e028 	ldrsh.w	lr, [r4, #40]	; 0x28
   14fea:	4562      	cmp	r2, ip
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   14fec:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
		_originx = x; _originy = y; 
   14ff0:	61a3      	str	r3, [r4, #24]
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
   14ff2:	bfa8      	it	ge
   14ff4:	4662      	movge	r2, ip
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   14ff6:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
   14ffa:	4571      	cmp	r1, lr
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   14ffc:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
   15000:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   15004:	bfa8      	it	ge
   15006:	4671      	movge	r1, lr
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   15008:	4563      	cmp	r3, ip
   1500a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1500e:	bfa8      	it	ge
   15010:	4663      	movge	r3, ip
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   15012:	4570      	cmp	r0, lr
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   15014:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   15018:	ea42 0601 	orr.w	r6, r2, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1501c:	bfa8      	it	ge
   1501e:	4670      	movge	r0, lr
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   15020:	b212      	sxth	r2, r2
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   15022:	459c      	cmp	ip, r3
   15024:	bf08      	it	eq
   15026:	2e00      	cmpeq	r6, #0
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   15028:	b209      	sxth	r1, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1502a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1502e:	8423      	strh	r3, [r4, #32]
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   15030:	bf0c      	ite	eq
   15032:	f04f 0c01 	moveq.w	ip, #1
   15036:	f04f 0c00 	movne.w	ip, #0
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1503a:	8460      	strh	r0, [r4, #34]	; 0x22
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1503c:	4586      	cmp	lr, r0
   1503e:	bf14      	ite	ne
   15040:	f04f 0c00 	movne.w	ip, #0
   15044:	f00c 0c01 	andeq.w	ip, ip, #1
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   15048:	4281      	cmp	r1, r0
   1504a:	bf18      	it	ne
   1504c:	429a      	cmpne	r2, r3
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1504e:	83e1      	strh	r1, [r4, #30]
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   15050:	bf0c      	ite	eq
   15052:	2301      	moveq	r3, #1
   15054:	2300      	movne	r3, #0
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   15056:	f884 c025 	strb.w	ip, [r4, #37]	; 0x25
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1505a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1505e:	83a2      	strh	r2, [r4, #28]
		yield();
   15060:	f008 faba 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   15064:	782b      	ldrb	r3, [r5, #0]
   15066:	b13b      	cbz	r3, 15078 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1d8>
   15068:	4b0b      	ldr	r3, [pc, #44]	; (15098 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1f8>)
   1506a:	781b      	ldrb	r3, [r3, #0]
   1506c:	07db      	lsls	r3, r3, #31
   1506e:	d503      	bpl.n	15078 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1d8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
   15070:	4a0a      	ldr	r2, [pc, #40]	; (1509c <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1fc>)
   15072:	4b0b      	ldr	r3, [pc, #44]	; (150a0 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x200>)
   15074:	6812      	ldr	r2, [r2, #0]
   15076:	681b      	ldr	r3, [r3, #0]
}
   15078:	4620      	mov	r0, r4
   1507a:	bd70      	pop	{r4, r5, r6, pc}
   1507c:	4a07      	ldr	r2, [pc, #28]	; (1509c <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x1fc>)
   1507e:	4b08      	ldr	r3, [pc, #32]	; (150a0 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x200>)
   15080:	6812      	ldr	r2, [r2, #0]
   15082:	681b      	ldr	r3, [r3, #0]
   15084:	e7aa      	b.n	14fdc <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)+0x13c>
   15086:	bf00      	nop
   15088:	008000a0 	.word	0x008000a0
   1508c:	20003f6c 	.word	0x20003f6c
   15090:	08010001 	.word	0x08010001
   15094:	200136f9 	.word	0x200136f9
   15098:	200136f8 	.word	0x200136f8
   1509c:	20013554 	.word	0x20013554
   150a0:	20013690 	.word	0x20013690
   150a4:	003d0900 	.word	0x003d0900

000150a8 <ST7735_t3::writecommand(unsigned char)>:
	if (hwSPI) {
   150a8:	7a43      	ldrb	r3, [r0, #9]
{
   150aa:	b470      	push	{r4, r5, r6}
	if (hwSPI) {
   150ac:	b35b      	cbz	r3, 15106 <ST7735_t3::writecommand(unsigned char)+0x5e>
  
#ifndef TCR_MASK
#define TCR_MASK  (LPSPI_TCR_PCS(3) | LPSPI_TCR_FRAMESZ(31) | LPSPI_TCR_CONT | LPSPI_TCR_RXMSK )
#endif  
  void maybeUpdateTCR(uint32_t requested_tcr_state) {
  if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
   150ae:	4a46      	ldr	r2, [pc, #280]	; (151c8 <ST7735_t3::writecommand(unsigned char)+0x120>)
   150b0:	e9d0 3528 	ldrd	r3, r5, [r0, #160]	; 0xa0
		maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7) /*| LPSPI_TCR_CONT*/);
   150b4:	f045 0407 	orr.w	r4, r5, #7
   150b8:	401a      	ands	r2, r3
   150ba:	4294      	cmp	r4, r2
   150bc:	d033      	beq.n	15126 <ST7735_t3::writecommand(unsigned char)+0x7e>
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) != (requested_tcr_state & LPSPI_TCR_PCS(3));
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   150be:	4a43      	ldr	r2, [pc, #268]	; (151cc <ST7735_t3::writecommand(unsigned char)+0x124>)
   150c0:	401a      	ands	r2, r3
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) != (requested_tcr_state & LPSPI_TCR_PCS(3));
   150c2:	4063      	eors	r3, r4
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   150c4:	4314      	orrs	r4, r2
      // only output when Transfer queue is empty.
      if (!dc_state_change || !_dcpinmask) {
   150c6:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   150ca:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
      if (!dc_state_change || !_dcpinmask) {
   150ce:	d12d      	bne.n	1512c <ST7735_t3::writecommand(unsigned char)+0x84>
        while ((_pimxrt_spi->FSR & 0x1f) )  ;
   150d0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   150d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   150d6:	06d5      	lsls	r5, r2, #27
   150d8:	d1fc      	bne.n	150d4 <ST7735_t3::writecommand(unsigned char)+0x2c>
        _pimxrt_spi->TCR = _spi_tcr_current;  // update the TCR
   150da:	661c      	str	r4, [r3, #96]	; 0x60
		_pimxrt_spi->TDR = c;
   150dc:	6659      	str	r1, [r3, #100]	; 0x64
		_pending_rx_count++;	//
   150de:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
   150e2:	3201      	adds	r2, #1
   150e4:	f880 209c 	strb.w	r2, [r0, #156]	; 0x9c

 
  void waitFifoNotFull(void) {
    uint32_t tmp __attribute__((unused));
    do {
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   150e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   150ea:	0791      	lsls	r1, r2, #30
   150ec:	d406      	bmi.n	150fc <ST7735_t3::writecommand(unsigned char)+0x54>
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
            if (_pending_rx_count) _pending_rx_count--; //decrement count of bytes still levt
   150ee:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   150f2:	6f59      	ldr	r1, [r3, #116]	; 0x74
            if (_pending_rx_count) _pending_rx_count--; //decrement count of bytes still levt
   150f4:	1e51      	subs	r1, r2, #1
   150f6:	b10a      	cbz	r2, 150fc <ST7735_t3::writecommand(unsigned char)+0x54>
   150f8:	f880 109c 	strb.w	r1, [r0, #156]	; 0x9c
        }
    } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0) ;
   150fc:	695a      	ldr	r2, [r3, #20]
   150fe:	07d2      	lsls	r2, r2, #31
   15100:	d5f2      	bpl.n	150e8 <ST7735_t3::writecommand(unsigned char)+0x40>
}
   15102:	bc70      	pop	{r4, r5, r6}
   15104:	4770      	bx	lr
		DIRECT_WRITE_LOW(_dcport, _dcpinmask);
   15106:	e9d0 422f 	ldrd	r4, r2, [r0, #188]	; 0xbc
	if (_pspi) {
   1510a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    *(base+34) = mask;
   1510e:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
   15112:	b1f3      	cbz	r3, 15152 <ST7735_t3::writecommand(unsigned char)+0xaa>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   15114:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
   15116:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   15118:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1511a:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   1511e:	d0fb      	beq.n	15118 <ST7735_t3::writecommand(unsigned char)+0x70>
   15120:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
   15122:	bc70      	pop	{r4, r5, r6}
   15124:	4770      	bx	lr
 void waitTransmitComplete(void)  {
    uint32_t tmp __attribute__((unused));
//    digitalWriteFast(2, HIGH);

    while (_pending_rx_count) {
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15126:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1512a:	e7d7      	b.n	150dc <ST7735_t3::writecommand(unsigned char)+0x34>
      if (!dc_state_change || !_dcpinmask) {
   1512c:	f8d0 60bc 	ldr.w	r6, [r0, #188]	; 0xbc
   15130:	2e00      	cmp	r6, #0
   15132:	d0cd      	beq.n	150d0 <ST7735_t3::writecommand(unsigned char)+0x28>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15134:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    while (_pending_rx_count) {
   15138:	f890 409c 	ldrb.w	r4, [r0, #156]	; 0x9c
   1513c:	2c00      	cmp	r4, #0
   1513e:	d02f      	beq.n	151a0 <ST7735_t3::writecommand(unsigned char)+0xf8>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   15142:	0792      	lsls	r2, r2, #30
   15144:	d4fa      	bmi.n	1513c <ST7735_t3::writecommand(unsigned char)+0x94>
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
            _pending_rx_count--; //decrement count of bytes still levt
   15146:	3c01      	subs	r4, #1
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   15148:	6f5a      	ldr	r2, [r3, #116]	; 0x74
            _pending_rx_count--; //decrement count of bytes still levt
   1514a:	b2e4      	uxtb	r4, r4
   1514c:	f880 409c 	strb.w	r4, [r0, #156]	; 0x9c
   15150:	e7f4      	b.n	1513c <ST7735_t3::writecommand(unsigned char)+0x94>
			DIRECT_WRITE_HIGH(_sckport, _sckpinmask);
   15152:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
   15156:	2208      	movs	r2, #8
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   15158:	2380      	movs	r3, #128	; 0x80
   1515a:	e01a      	b.n	15192 <ST7735_t3::writecommand(unsigned char)+0xea>
    *(base+33) = mask;
   1515c:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
   15160:	f8d0 50cc 	ldr.w	r5, [r0, #204]	; 0xcc
   15164:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
			asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
   15168:	bf00      	nop
   1516a:	bf00      	nop
   1516c:	bf00      	nop
   1516e:	bf00      	nop
   15170:	bf00      	nop
   15172:	bf00      	nop
   15174:	bf00      	nop
   15176:	bf00      	nop
   15178:	bf00      	nop
   1517a:	bf00      	nop
   1517c:	bf00      	nop
			DIRECT_WRITE_LOW(_sckport, _sckpinmask);
   1517e:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   15182:	3a01      	subs	r2, #1
    *(base+34) = mask;
   15184:	f8d0 50cc 	ldr.w	r5, [r0, #204]	; 0xcc
   15188:	ea4f 0353 	mov.w	r3, r3, lsr #1
   1518c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
   15190:	d0c7      	beq.n	15122 <ST7735_t3::writecommand(unsigned char)+0x7a>
			if(c & bit) DIRECT_WRITE_HIGH(_mosiport, _mosipinmask);
   15192:	4219      	tst	r1, r3
    *(base+33) = mask;
   15194:	e9d0 6531 	ldrd	r6, r5, [r0, #196]	; 0xc4
   15198:	d1e0      	bne.n	1515c <ST7735_t3::writecommand(unsigned char)+0xb4>
    *(base+34) = mask;
   1519a:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
  }
   1519e:	e7df      	b.n	15160 <ST7735_t3::writecommand(unsigned char)+0xb8>
        }
    }
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   151a0:	f240 2201 	movw	r2, #513	; 0x201
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   151a4:	f015 7f40 	tst.w	r5, #50331648	; 0x3000000
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   151a8:	611a      	str	r2, [r3, #16]
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   151aa:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
   151ae:	d107      	bne.n	151c0 <ST7735_t3::writecommand(unsigned char)+0x118>
    *(base+34) = mask;
   151b0:	f8c2 6088 	str.w	r6, [r2, #136]	; 0x88
        _pimxrt_spi->TCR = _spi_tcr_current & ~(LPSPI_TCR_PCS(3) | LPSPI_TCR_CONT); // go ahead and update TCR anyway?  
   151b4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   151b8:	f022 7248 	bic.w	r2, r2, #52428800	; 0x3200000
   151bc:	661a      	str	r2, [r3, #96]	; 0x60
   151be:	e78d      	b.n	150dc <ST7735_t3::writecommand(unsigned char)+0x34>
    *(base+33) = mask;
   151c0:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
  }
   151c4:	e7f6      	b.n	151b4 <ST7735_t3::writecommand(unsigned char)+0x10c>
   151c6:	bf00      	nop
   151c8:	0328001f 	.word	0x0328001f
   151cc:	fcd7ffe0 	.word	0xfcd7ffe0

000151d0 <ST7735_t3::writecommand_last(unsigned char)>:
	if (hwSPI) {
   151d0:	7a43      	ldrb	r3, [r0, #9]
{
   151d2:	b470      	push	{r4, r5, r6}
	if (hwSPI) {
   151d4:	b35b      	cbz	r3, 1522e <ST7735_t3::writecommand_last(unsigned char)+0x5e>
  if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
   151d6:	4a46      	ldr	r2, [pc, #280]	; (152f0 <ST7735_t3::writecommand_last(unsigned char)+0x120>)
   151d8:	e9d0 3528 	ldrd	r3, r5, [r0, #160]	; 0xa0
		maybeUpdateTCR(_tcr_dc_assert | LPSPI_TCR_FRAMESZ(7));
   151dc:	f045 0407 	orr.w	r4, r5, #7
   151e0:	401a      	ands	r2, r3
   151e2:	4294      	cmp	r4, r2
   151e4:	d033      	beq.n	1524e <ST7735_t3::writecommand_last(unsigned char)+0x7e>
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   151e6:	4a43      	ldr	r2, [pc, #268]	; (152f4 <ST7735_t3::writecommand_last(unsigned char)+0x124>)
   151e8:	401a      	ands	r2, r3
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) != (requested_tcr_state & LPSPI_TCR_PCS(3));
   151ea:	4063      	eors	r3, r4
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   151ec:	4314      	orrs	r4, r2
      if (!dc_state_change || !_dcpinmask) {
   151ee:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   151f2:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
      if (!dc_state_change || !_dcpinmask) {
   151f6:	d12d      	bne.n	15254 <ST7735_t3::writecommand_last(unsigned char)+0x84>
        while ((_pimxrt_spi->FSR & 0x1f) )  ;
   151f8:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
   151fc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   151fe:	06dd      	lsls	r5, r3, #27
   15200:	d1fc      	bne.n	151fc <ST7735_t3::writecommand_last(unsigned char)+0x2c>
        _pimxrt_spi->TCR = _spi_tcr_current;  // update the TCR
   15202:	6614      	str	r4, [r2, #96]	; 0x60
		_pimxrt_spi->TDR = c;
   15204:	6651      	str	r1, [r2, #100]	; 0x64
		_pending_rx_count++;	//
   15206:	f890 109c 	ldrb.w	r1, [r0, #156]	; 0x9c
   1520a:	3101      	adds	r1, #1
   1520c:	b2c9      	uxtb	r1, r1
    while (_pending_rx_count) {
   1520e:	b139      	cbz	r1, 15220 <ST7735_t3::writecommand_last(unsigned char)+0x50>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15210:	6f13      	ldr	r3, [r2, #112]	; 0x70
   15212:	079b      	lsls	r3, r3, #30
   15214:	d4fb      	bmi.n	1520e <ST7735_t3::writecommand_last(unsigned char)+0x3e>
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   15216:	3901      	subs	r1, #1
   15218:	6f53      	ldr	r3, [r2, #116]	; 0x74
            _pending_rx_count--; //decrement count of bytes still levt
   1521a:	b2c9      	uxtb	r1, r1
    while (_pending_rx_count) {
   1521c:	2900      	cmp	r1, #0
   1521e:	d1f7      	bne.n	15210 <ST7735_t3::writecommand_last(unsigned char)+0x40>
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   15220:	f240 2301 	movw	r3, #513	; 0x201
   15224:	f880 109c 	strb.w	r1, [r0, #156]	; 0x9c
}
   15228:	bc70      	pop	{r4, r5, r6}
   1522a:	6113      	str	r3, [r2, #16]
   1522c:	4770      	bx	lr
		DIRECT_WRITE_LOW(_dcport, _dcpinmask);
   1522e:	e9d0 422f 	ldrd	r4, r2, [r0, #188]	; 0xbc
	if (_pspi) {
   15232:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    *(base+34) = mask;
   15236:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
   1523a:	b1f3      	cbz	r3, 1527a <ST7735_t3::writecommand_last(unsigned char)+0xaa>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   1523c:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
   1523e:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   15240:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   15242:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   15246:	d0fb      	beq.n	15240 <ST7735_t3::writecommand_last(unsigned char)+0x70>
   15248:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
   1524a:	bc70      	pop	{r4, r5, r6}
   1524c:	4770      	bx	lr
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   1524e:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
   15252:	e7d7      	b.n	15204 <ST7735_t3::writecommand_last(unsigned char)+0x34>
      if (!dc_state_change || !_dcpinmask) {
   15254:	f8d0 60bc 	ldr.w	r6, [r0, #188]	; 0xbc
   15258:	2e00      	cmp	r6, #0
   1525a:	d0cd      	beq.n	151f8 <ST7735_t3::writecommand_last(unsigned char)+0x28>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   1525c:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
    while (_pending_rx_count) {
   15260:	f890 409c 	ldrb.w	r4, [r0, #156]	; 0x9c
   15264:	2c00      	cmp	r4, #0
   15266:	d02f      	beq.n	152c8 <ST7735_t3::writecommand_last(unsigned char)+0xf8>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15268:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1526a:	079b      	lsls	r3, r3, #30
   1526c:	d4fa      	bmi.n	15264 <ST7735_t3::writecommand_last(unsigned char)+0x94>
            _pending_rx_count--; //decrement count of bytes still levt
   1526e:	3c01      	subs	r4, #1
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   15270:	6f53      	ldr	r3, [r2, #116]	; 0x74
            _pending_rx_count--; //decrement count of bytes still levt
   15272:	b2e4      	uxtb	r4, r4
   15274:	f880 409c 	strb.w	r4, [r0, #156]	; 0x9c
   15278:	e7f4      	b.n	15264 <ST7735_t3::writecommand_last(unsigned char)+0x94>
			DIRECT_WRITE_HIGH(_sckport, _sckpinmask);
   1527a:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
   1527e:	2208      	movs	r2, #8
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   15280:	2380      	movs	r3, #128	; 0x80
   15282:	e01a      	b.n	152ba <ST7735_t3::writecommand_last(unsigned char)+0xea>
    *(base+33) = mask;
   15284:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
   15288:	f8d0 50cc 	ldr.w	r5, [r0, #204]	; 0xcc
   1528c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
			asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
   15290:	bf00      	nop
   15292:	bf00      	nop
   15294:	bf00      	nop
   15296:	bf00      	nop
   15298:	bf00      	nop
   1529a:	bf00      	nop
   1529c:	bf00      	nop
   1529e:	bf00      	nop
   152a0:	bf00      	nop
   152a2:	bf00      	nop
   152a4:	bf00      	nop
			DIRECT_WRITE_LOW(_sckport, _sckpinmask);
   152a6:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   152aa:	3a01      	subs	r2, #1
    *(base+34) = mask;
   152ac:	f8d0 50cc 	ldr.w	r5, [r0, #204]	; 0xcc
   152b0:	ea4f 0353 	mov.w	r3, r3, lsr #1
   152b4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
   152b8:	d0c7      	beq.n	1524a <ST7735_t3::writecommand_last(unsigned char)+0x7a>
			if(c & bit) DIRECT_WRITE_HIGH(_mosiport, _mosipinmask);
   152ba:	4219      	tst	r1, r3
    *(base+33) = mask;
   152bc:	e9d0 6531 	ldrd	r6, r5, [r0, #196]	; 0xc4
   152c0:	d1e0      	bne.n	15284 <ST7735_t3::writecommand_last(unsigned char)+0xb4>
    *(base+34) = mask;
   152c2:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
  }
   152c6:	e7df      	b.n	15288 <ST7735_t3::writecommand_last(unsigned char)+0xb8>
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   152c8:	f240 2301 	movw	r3, #513	; 0x201
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   152cc:	f015 7f40 	tst.w	r5, #50331648	; 0x3000000
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   152d0:	6113      	str	r3, [r2, #16]
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   152d2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   152d6:	d107      	bne.n	152e8 <ST7735_t3::writecommand_last(unsigned char)+0x118>
    *(base+34) = mask;
   152d8:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
        _pimxrt_spi->TCR = _spi_tcr_current & ~(LPSPI_TCR_PCS(3) | LPSPI_TCR_CONT); // go ahead and update TCR anyway?  
   152dc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   152e0:	f023 7348 	bic.w	r3, r3, #52428800	; 0x3200000
   152e4:	6613      	str	r3, [r2, #96]	; 0x60
   152e6:	e78d      	b.n	15204 <ST7735_t3::writecommand_last(unsigned char)+0x34>
    *(base+33) = mask;
   152e8:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
  }
   152ec:	e7f6      	b.n	152dc <ST7735_t3::writecommand_last(unsigned char)+0x10c>
   152ee:	bf00      	nop
   152f0:	0328001f 	.word	0x0328001f
   152f4:	fcd7ffe0 	.word	0xfcd7ffe0

000152f8 <ST7735_t3::writedata(unsigned char)>:
	if (hwSPI) {
   152f8:	7a43      	ldrb	r3, [r0, #9]
{
   152fa:	b470      	push	{r4, r5, r6}
	if (hwSPI) {
   152fc:	b36b      	cbz	r3, 1535a <ST7735_t3::writedata(unsigned char)+0x62>
		maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(7));
   152fe:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
  if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
   15302:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   15306:	4a45      	ldr	r2, [pc, #276]	; (1541c <ST7735_t3::writedata(unsigned char)+0x124>)
   15308:	f045 0407 	orr.w	r4, r5, #7
   1530c:	401a      	ands	r2, r3
   1530e:	4294      	cmp	r4, r2
   15310:	d033      	beq.n	1537a <ST7735_t3::writedata(unsigned char)+0x82>
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   15312:	4a43      	ldr	r2, [pc, #268]	; (15420 <ST7735_t3::writedata(unsigned char)+0x128>)
   15314:	401a      	ands	r2, r3
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) != (requested_tcr_state & LPSPI_TCR_PCS(3));
   15316:	4063      	eors	r3, r4
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   15318:	4314      	orrs	r4, r2
      if (!dc_state_change || !_dcpinmask) {
   1531a:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   1531e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
      if (!dc_state_change || !_dcpinmask) {
   15322:	d12d      	bne.n	15380 <ST7735_t3::writedata(unsigned char)+0x88>
        while ((_pimxrt_spi->FSR & 0x1f) )  ;
   15324:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
   15328:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1532a:	06dd      	lsls	r5, r3, #27
   1532c:	d1fc      	bne.n	15328 <ST7735_t3::writedata(unsigned char)+0x30>
        _pimxrt_spi->TCR = _spi_tcr_current;  // update the TCR
   1532e:	6614      	str	r4, [r2, #96]	; 0x60
		_pimxrt_spi->TDR = c;
   15330:	6651      	str	r1, [r2, #100]	; 0x64
		_pending_rx_count++;	//
   15332:	f890 109c 	ldrb.w	r1, [r0, #156]	; 0x9c
   15336:	3101      	adds	r1, #1
   15338:	b2c9      	uxtb	r1, r1
    while (_pending_rx_count) {
   1533a:	b139      	cbz	r1, 1534c <ST7735_t3::writedata(unsigned char)+0x54>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   1533c:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1533e:	079b      	lsls	r3, r3, #30
   15340:	d4fb      	bmi.n	1533a <ST7735_t3::writedata(unsigned char)+0x42>
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   15342:	3901      	subs	r1, #1
   15344:	6f53      	ldr	r3, [r2, #116]	; 0x74
            _pending_rx_count--; //decrement count of bytes still levt
   15346:	b2c9      	uxtb	r1, r1
    while (_pending_rx_count) {
   15348:	2900      	cmp	r1, #0
   1534a:	d1f7      	bne.n	1533c <ST7735_t3::writedata(unsigned char)+0x44>
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   1534c:	f240 2301 	movw	r3, #513	; 0x201
   15350:	f880 109c 	strb.w	r1, [r0, #156]	; 0x9c
} 
   15354:	bc70      	pop	{r4, r5, r6}
   15356:	6113      	str	r3, [r2, #16]
   15358:	4770      	bx	lr
		DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   1535a:	e9d0 422f 	ldrd	r4, r2, [r0, #188]	; 0xbc
	if (_pspi) {
   1535e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    *(base+33) = mask;
   15362:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
   15366:	b1f3      	cbz	r3, 153a6 <ST7735_t3::writedata(unsigned char)+0xae>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   15368:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
   1536a:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1536c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1536e:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   15372:	d0fb      	beq.n	1536c <ST7735_t3::writedata(unsigned char)+0x74>
   15374:	6f53      	ldr	r3, [r2, #116]	; 0x74
} 
   15376:	bc70      	pop	{r4, r5, r6}
   15378:	4770      	bx	lr
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   1537a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
   1537e:	e7d7      	b.n	15330 <ST7735_t3::writedata(unsigned char)+0x38>
      if (!dc_state_change || !_dcpinmask) {
   15380:	f8d0 60bc 	ldr.w	r6, [r0, #188]	; 0xbc
   15384:	2e00      	cmp	r6, #0
   15386:	d0cd      	beq.n	15324 <ST7735_t3::writedata(unsigned char)+0x2c>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15388:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
    while (_pending_rx_count) {
   1538c:	f890 409c 	ldrb.w	r4, [r0, #156]	; 0x9c
   15390:	2c00      	cmp	r4, #0
   15392:	d02f      	beq.n	153f4 <ST7735_t3::writedata(unsigned char)+0xfc>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15394:	6f13      	ldr	r3, [r2, #112]	; 0x70
   15396:	079b      	lsls	r3, r3, #30
   15398:	d4fa      	bmi.n	15390 <ST7735_t3::writedata(unsigned char)+0x98>
            _pending_rx_count--; //decrement count of bytes still levt
   1539a:	3c01      	subs	r4, #1
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   1539c:	6f53      	ldr	r3, [r2, #116]	; 0x74
            _pending_rx_count--; //decrement count of bytes still levt
   1539e:	b2e4      	uxtb	r4, r4
   153a0:	f880 409c 	strb.w	r4, [r0, #156]	; 0x9c
   153a4:	e7f4      	b.n	15390 <ST7735_t3::writedata(unsigned char)+0x98>
			DIRECT_WRITE_HIGH(_sckport, _sckpinmask);
   153a6:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
   153aa:	2208      	movs	r2, #8
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   153ac:	2380      	movs	r3, #128	; 0x80
   153ae:	e01a      	b.n	153e6 <ST7735_t3::writedata(unsigned char)+0xee>
    *(base+33) = mask;
   153b0:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
   153b4:	f8d0 50cc 	ldr.w	r5, [r0, #204]	; 0xcc
   153b8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
			asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
   153bc:	bf00      	nop
   153be:	bf00      	nop
   153c0:	bf00      	nop
   153c2:	bf00      	nop
   153c4:	bf00      	nop
   153c6:	bf00      	nop
   153c8:	bf00      	nop
   153ca:	bf00      	nop
   153cc:	bf00      	nop
   153ce:	bf00      	nop
   153d0:	bf00      	nop
			DIRECT_WRITE_LOW(_sckport, _sckpinmask);
   153d2:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   153d6:	3a01      	subs	r2, #1
    *(base+34) = mask;
   153d8:	f8d0 50cc 	ldr.w	r5, [r0, #204]	; 0xcc
   153dc:	ea4f 0353 	mov.w	r3, r3, lsr #1
   153e0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
   153e4:	d0c7      	beq.n	15376 <ST7735_t3::writedata(unsigned char)+0x7e>
			if(c & bit) DIRECT_WRITE_HIGH(_mosiport, _mosipinmask);
   153e6:	4219      	tst	r1, r3
    *(base+33) = mask;
   153e8:	e9d0 6531 	ldrd	r6, r5, [r0, #196]	; 0xc4
   153ec:	d1e0      	bne.n	153b0 <ST7735_t3::writedata(unsigned char)+0xb8>
    *(base+34) = mask;
   153ee:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
  }
   153f2:	e7df      	b.n	153b4 <ST7735_t3::writedata(unsigned char)+0xbc>
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   153f4:	f240 2301 	movw	r3, #513	; 0x201
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   153f8:	f015 7f40 	tst.w	r5, #50331648	; 0x3000000
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   153fc:	6113      	str	r3, [r2, #16]
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   153fe:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   15402:	d107      	bne.n	15414 <ST7735_t3::writedata(unsigned char)+0x11c>
    *(base+34) = mask;
   15404:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
        _pimxrt_spi->TCR = _spi_tcr_current & ~(LPSPI_TCR_PCS(3) | LPSPI_TCR_CONT); // go ahead and update TCR anyway?  
   15408:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   1540c:	f023 7348 	bic.w	r3, r3, #52428800	; 0x3200000
   15410:	6613      	str	r3, [r2, #96]	; 0x60
   15412:	e78d      	b.n	15330 <ST7735_t3::writedata(unsigned char)+0x38>
    *(base+33) = mask;
   15414:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
  }
   15418:	e7f6      	b.n	15408 <ST7735_t3::writedata(unsigned char)+0x110>
   1541a:	bf00      	nop
   1541c:	0328001f 	.word	0x0328001f
   15420:	fcd7ffe0 	.word	0xfcd7ffe0

00015424 <ST7735_t3::setRotation(unsigned char)>:
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   15424:	7a43      	ldrb	r3, [r0, #9]
{
   15426:	b570      	push	{r4, r5, r6, lr}
   15428:	4604      	mov	r4, r0
   1542a:	460d      	mov	r5, r1
   1542c:	bb8b      	cbnz	r3, 15492 <ST7735_t3::setRotation(unsigned char)+0x6e>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   1542e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   15432:	b3d3      	cbz	r3, 154aa <ST7735_t3::setRotation(unsigned char)+0x86>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   15434:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   15438:	b11b      	cbz	r3, 15442 <ST7735_t3::setRotation(unsigned char)+0x1e>
   1543a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+34) = mask;
   1543e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	writecommand(ST7735_MADCTL);
   15442:	2136      	movs	r1, #54	; 0x36
   15444:	4620      	mov	r0, r4
   15446:	f7ff fe2f 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
	rotation = m % 4; // can't be higher than 3
   1544a:	f005 0103 	and.w	r1, r5, #3
     	if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
   1544e:	7a23      	ldrb	r3, [r4, #8]
	switch (rotation) {
   15450:	2902      	cmp	r1, #2
	rotation = m % 4; // can't be higher than 3
   15452:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	switch (rotation) {
   15456:	d066      	beq.n	15526 <ST7735_t3::setRotation(unsigned char)+0x102>
   15458:	2903      	cmp	r1, #3
   1545a:	d045      	beq.n	154e8 <ST7735_t3::setRotation(unsigned char)+0xc4>
   1545c:	2901      	cmp	r1, #1
   1545e:	d02a      	beq.n	154b6 <ST7735_t3::setRotation(unsigned char)+0x92>
     	if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
   15460:	2b02      	cmp	r3, #2
   15462:	f000 812d 	beq.w	156c0 <ST7735_t3::setRotation(unsigned char)+0x29c>
   15466:	2b05      	cmp	r3, #5
   15468:	f000 812a 	beq.w	156c0 <ST7735_t3::setRotation(unsigned char)+0x29c>
			writedata_last(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
   1546c:	21c8      	movs	r1, #200	; 0xc8
   1546e:	f7ff ff43 	bl	152f8 <ST7735_t3::writedata(unsigned char)>
		_width  = _screenWidth;
   15472:	f9b4 c082 	ldrsh.w	ip, [r4, #130]	; 0x82
		_height = _screenHeight;
   15476:	f9b4 1080 	ldrsh.w	r1, [r4, #128]	; 0x80
	    _xstart = _colstart;
   1547a:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
	    _ystart = _rowstart;
   1547e:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
		_width  = _screenWidth;
   15482:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
		_height = _screenHeight;
   15486:	8521      	strh	r1, [r4, #40]	; 0x28
	    _xstart = _colstart;
   15488:	f8a4 207a 	strh.w	r2, [r4, #122]	; 0x7a
	    _ystart = _rowstart;
   1548c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		break;
   15490:	e067      	b.n	15562 <ST7735_t3::setRotation(unsigned char)+0x13e>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   15492:	f100 0384 	add.w	r3, r0, #132	; 0x84
   15496:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   1549a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1549e:	f7f5 ff25 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   154a2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   154a6:	2b00      	cmp	r3, #0
   154a8:	d1c4      	bne.n	15434 <ST7735_t3::setRotation(unsigned char)+0x10>
   154aa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   154ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   154b0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   154b4:	e7be      	b.n	15434 <ST7735_t3::setRotation(unsigned char)+0x10>
     	if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
   154b6:	2b02      	cmp	r3, #2
   154b8:	f000 8111 	beq.w	156de <ST7735_t3::setRotation(unsigned char)+0x2ba>
   154bc:	2b05      	cmp	r3, #5
   154be:	f000 810e 	beq.w	156de <ST7735_t3::setRotation(unsigned char)+0x2ba>
			writedata_last(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
   154c2:	21a8      	movs	r1, #168	; 0xa8
   154c4:	f7ff ff18 	bl	152f8 <ST7735_t3::writedata(unsigned char)>
		_height = _screenWidth;
   154c8:	f9b4 1082 	ldrsh.w	r1, [r4, #130]	; 0x82
		_width  = _screenHeight;
   154cc:	f9b4 c080 	ldrsh.w	ip, [r4, #128]	; 0x80
     	_ystart = _colstart;
   154d0:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
     	_xstart = _rowstart;
   154d4:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
		_height = _screenWidth;
   154d8:	8521      	strh	r1, [r4, #40]	; 0x28
		_width  = _screenHeight;
   154da:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
     	_ystart = _colstart;
   154de:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
     	_xstart = _rowstart;
   154e2:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		break;
   154e6:	e03c      	b.n	15562 <ST7735_t3::setRotation(unsigned char)+0x13e>
     	if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
   154e8:	2b02      	cmp	r3, #2
   154ea:	f000 80f3 	beq.w	156d4 <ST7735_t3::setRotation(unsigned char)+0x2b0>
   154ee:	2b05      	cmp	r3, #5
   154f0:	f000 80f0 	beq.w	156d4 <ST7735_t3::setRotation(unsigned char)+0x2b0>
			writedata_last(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
   154f4:	2168      	movs	r1, #104	; 0x68
   154f6:	f7ff feff 	bl	152f8 <ST7735_t3::writedata(unsigned char)>
     	_xstart = (_rowstart==0 || _rowstart==32)? 0 : 1;//_rowstart;
   154fa:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
		_width = _screenHeight;
   154fe:	f9b4 c080 	ldrsh.w	ip, [r4, #128]	; 0x80
     	_xstart = (_rowstart==0 || _rowstart==32)? 0 : 1;//_rowstart;
   15502:	f023 0320 	bic.w	r3, r3, #32
		_height = _screenWidth;
   15506:	f9b4 1082 	ldrsh.w	r1, [r4, #130]	; 0x82
     	_ystart = _colstart;
   1550a:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
     	_xstart = (_rowstart==0 || _rowstart==32)? 0 : 1;//_rowstart;
   1550e:	b29b      	uxth	r3, r3
		_width = _screenHeight;
   15510:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
		_height = _screenWidth;
   15514:	8521      	strh	r1, [r4, #40]	; 0x28
     	_xstart = (_rowstart==0 || _rowstart==32)? 0 : 1;//_rowstart;
   15516:	3b00      	subs	r3, #0
     	_ystart = _colstart;
   15518:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
     	_xstart = (_rowstart==0 || _rowstart==32)? 0 : 1;//_rowstart;
   1551c:	bf18      	it	ne
   1551e:	2301      	movne	r3, #1
   15520:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		break;
   15524:	e01d      	b.n	15562 <ST7735_t3::setRotation(unsigned char)+0x13e>
     	if ((tabcolor == INITR_BLACKTAB) || (tabcolor == INITR_MINI160x80)) {
   15526:	2b02      	cmp	r3, #2
   15528:	f000 80cf 	beq.w	156ca <ST7735_t3::setRotation(unsigned char)+0x2a6>
   1552c:	2b05      	cmp	r3, #5
   1552e:	f000 80cc 	beq.w	156ca <ST7735_t3::setRotation(unsigned char)+0x2a6>
			writedata_last(MADCTL_BGR);
   15532:	2108      	movs	r1, #8
   15534:	f7ff fee0 	bl	152f8 <ST7735_t3::writedata(unsigned char)>
     	_ystart = (_rowstart==0 || _rowstart==32)? 0 : 1;//_rowstart;
   15538:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
		_width  = _screenWidth;
   1553c:	f9b4 c082 	ldrsh.w	ip, [r4, #130]	; 0x82
     	_ystart = (_rowstart==0 || _rowstart==32)? 0 : 1;//_rowstart;
   15540:	f023 0320 	bic.w	r3, r3, #32
		_height = _screenHeight;
   15544:	f9b4 1080 	ldrsh.w	r1, [r4, #128]	; 0x80
     	_xstart = _colstart;
   15548:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
     	_ystart = (_rowstart==0 || _rowstart==32)? 0 : 1;//_rowstart;
   1554c:	b29b      	uxth	r3, r3
		_width  = _screenWidth;
   1554e:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
		_height = _screenHeight;
   15552:	8521      	strh	r1, [r4, #40]	; 0x28
     	_ystart = (_rowstart==0 || _rowstart==32)? 0 : 1;//_rowstart;
   15554:	3b00      	subs	r3, #0
     	_xstart = _colstart;
   15556:	f8a4 207a 	strh.w	r2, [r4, #122]	; 0x7a
     	_ystart = (_rowstart==0 || _rowstart==32)? 0 : 1;//_rowstart;
   1555a:	bf18      	it	ne
   1555c:	2301      	movne	r3, #1
   1555e:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
	_rot = rotation;	// remember the rotation... 
   15562:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   15566:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1556a:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
   1556e:	b11b      	cbz	r3, 15578 <ST7735_t3::setRotation(unsigned char)+0x154>
   15570:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+33) = mask;
   15574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   15578:	7a63      	ldrb	r3, [r4, #9]
   1557a:	2b00      	cmp	r3, #0
   1557c:	f040 80b4 	bne.w	156e8 <ST7735_t3::setRotation(unsigned char)+0x2c4>
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   15580:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   15584:	2200      	movs	r2, #0
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   15586:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
   1558a:	4563      	cmp	r3, ip
   1558c:	461d      	mov	r5, r3
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1558e:	4463      	add	r3, ip
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   15590:	6122      	str	r2, [r4, #16]
   15592:	bfa8      	it	ge
   15594:	4665      	movge	r5, ip
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   15596:	1842      	adds	r2, r0, r1
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   15598:	4563      	cmp	r3, ip
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   1559a:	f8a4 c014 	strh.w	ip, [r4, #20]
   1559e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   155a2:	82e1      	strh	r1, [r4, #22]
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   155a4:	bfa8      	it	ge
   155a6:	4663      	movge	r3, ip
   155a8:	4288      	cmp	r0, r1
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   155aa:	fa0f fe85 	sxth.w	lr, r5
   155ae:	bfa8      	it	ge
   155b0:	4608      	movge	r0, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   155b2:	428a      	cmp	r2, r1
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   155b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   155b8:	f8a4 e01c 	strh.w	lr, [r4, #28]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   155bc:	bfa8      	it	ge
   155be:	460a      	movge	r2, r1
   155c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   155c4:	b21b      	sxth	r3, r3
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   155c6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   155ca:	8423      	strh	r3, [r4, #32]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   155cc:	b212      	sxth	r2, r2
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   155ce:	428a      	cmp	r2, r1
   155d0:	bf08      	it	eq
   155d2:	4563      	cmpeq	r3, ip
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   155d4:	fa0f fc80 	sxth.w	ip, r0
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   155d8:	8462      	strh	r2, [r4, #34]	; 0x22
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   155da:	bf0c      	ite	eq
   155dc:	2101      	moveq	r1, #1
   155de:	2100      	movne	r1, #0
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   155e0:	459e      	cmp	lr, r3
   155e2:	bf18      	it	ne
   155e4:	4594      	cmpne	ip, r2
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   155e6:	f8a4 c01e 	strh.w	ip, [r4, #30]
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   155ea:	f001 0101 	and.w	r1, r1, #1
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   155ee:	bf0c      	ite	eq
   155f0:	2201      	moveq	r2, #1
   155f2:	2200      	movne	r2, #0
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   155f4:	4328      	orrs	r0, r5
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   155f6:	4d52      	ldr	r5, [pc, #328]	; (15740 <ST7735_t3::setRotation(unsigned char)+0x31c>)
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   155f8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   155fc:	bf18      	it	ne
   155fe:	2100      	movne	r1, #0
   15600:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
		yield();
   15604:	f007 ffe8 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   15608:	782b      	ldrb	r3, [r5, #0]
   1560a:	b13b      	cbz	r3, 1561c <ST7735_t3::setRotation(unsigned char)+0x1f8>
   1560c:	4b4d      	ldr	r3, [pc, #308]	; (15744 <ST7735_t3::setRotation(unsigned char)+0x320>)
   1560e:	781b      	ldrb	r3, [r3, #0]
   15610:	07da      	lsls	r2, r3, #31
   15612:	d503      	bpl.n	1561c <ST7735_t3::setRotation(unsigned char)+0x1f8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
   15614:	4a4c      	ldr	r2, [pc, #304]	; (15748 <ST7735_t3::setRotation(unsigned char)+0x324>)
   15616:	4b4d      	ldr	r3, [pc, #308]	; (1574c <ST7735_t3::setRotation(unsigned char)+0x328>)
   15618:	6812      	ldr	r2, [r2, #0]
   1561a:	681b      	ldr	r3, [r3, #0]
	int16_t width(void) const { return _width; };
   1561c:	f9b4 c026 	ldrsh.w	ip, [r4, #38]	; 0x26
		_originx = x; _originy = y; 
   15620:	2300      	movs	r3, #0
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   15622:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
	int16_t height(void) const { return _height; }
   15626:	f9b4 e028 	ldrsh.w	lr, [r4, #40]	; 0x28
   1562a:	4562      	cmp	r2, ip
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1562c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
		_originx = x; _originy = y; 
   15630:	61a3      	str	r3, [r4, #24]
   15632:	bfa8      	it	ge
   15634:	4662      	movge	r2, ip
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   15636:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
   1563a:	4571      	cmp	r1, lr
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1563c:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
   15640:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   15644:	bfa8      	it	ge
   15646:	4671      	movge	r1, lr
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   15648:	4563      	cmp	r3, ip
   1564a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1564e:	bfa8      	it	ge
   15650:	4663      	movge	r3, ip
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   15652:	4570      	cmp	r0, lr
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   15654:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   15658:	ea42 0601 	orr.w	r6, r2, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1565c:	bfa8      	it	ge
   1565e:	4670      	movge	r0, lr
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   15660:	b212      	sxth	r2, r2
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   15662:	459c      	cmp	ip, r3
   15664:	bf08      	it	eq
   15666:	2e00      	cmpeq	r6, #0
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   15668:	b209      	sxth	r1, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1566a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1566e:	8423      	strh	r3, [r4, #32]
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   15670:	bf0c      	ite	eq
   15672:	f04f 0c01 	moveq.w	ip, #1
   15676:	f04f 0c00 	movne.w	ip, #0
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1567a:	8460      	strh	r0, [r4, #34]	; 0x22
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1567c:	4586      	cmp	lr, r0
   1567e:	bf14      	ite	ne
   15680:	f04f 0c00 	movne.w	ip, #0
   15684:	f00c 0c01 	andeq.w	ip, ip, #1
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   15688:	4281      	cmp	r1, r0
   1568a:	bf18      	it	ne
   1568c:	429a      	cmpne	r2, r3
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1568e:	83e1      	strh	r1, [r4, #30]
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   15690:	bf0c      	ite	eq
   15692:	2301      	moveq	r3, #1
   15694:	2300      	movne	r3, #0
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   15696:	f884 c025 	strb.w	ip, [r4, #37]	; 0x25
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1569a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1569e:	83a2      	strh	r2, [r4, #28]
		yield();
   156a0:	f007 ff9a 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   156a4:	782b      	ldrb	r3, [r5, #0]
   156a6:	b13b      	cbz	r3, 156b8 <ST7735_t3::setRotation(unsigned char)+0x294>
   156a8:	4b26      	ldr	r3, [pc, #152]	; (15744 <ST7735_t3::setRotation(unsigned char)+0x320>)
   156aa:	781b      	ldrb	r3, [r3, #0]
   156ac:	07db      	lsls	r3, r3, #31
   156ae:	d503      	bpl.n	156b8 <ST7735_t3::setRotation(unsigned char)+0x294>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
   156b0:	4a25      	ldr	r2, [pc, #148]	; (15748 <ST7735_t3::setRotation(unsigned char)+0x324>)
   156b2:	4b26      	ldr	r3, [pc, #152]	; (1574c <ST7735_t3::setRotation(unsigned char)+0x328>)
   156b4:	6812      	ldr	r2, [r2, #0]
   156b6:	681b      	ldr	r3, [r3, #0]
	cursor_x = 0;
   156b8:	2300      	movs	r3, #0
   156ba:	8163      	strh	r3, [r4, #10]
	cursor_y = 0;
   156bc:	81a3      	strh	r3, [r4, #12]
}
   156be:	bd70      	pop	{r4, r5, r6, pc}
			writedata_last(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
   156c0:	21c0      	movs	r1, #192	; 0xc0
   156c2:	4620      	mov	r0, r4
   156c4:	f7ff fe18 	bl	152f8 <ST7735_t3::writedata(unsigned char)>
   156c8:	e6d3      	b.n	15472 <ST7735_t3::setRotation(unsigned char)+0x4e>
			writedata_last(MADCTL_RGB);
   156ca:	2100      	movs	r1, #0
   156cc:	4620      	mov	r0, r4
   156ce:	f7ff fe13 	bl	152f8 <ST7735_t3::writedata(unsigned char)>
   156d2:	e731      	b.n	15538 <ST7735_t3::setRotation(unsigned char)+0x114>
			writedata_last(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
   156d4:	2160      	movs	r1, #96	; 0x60
   156d6:	4620      	mov	r0, r4
   156d8:	f7ff fe0e 	bl	152f8 <ST7735_t3::writedata(unsigned char)>
   156dc:	e70d      	b.n	154fa <ST7735_t3::setRotation(unsigned char)+0xd6>
			writedata_last(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
   156de:	21a0      	movs	r1, #160	; 0xa0
   156e0:	4620      	mov	r0, r4
   156e2:	f7ff fe09 	bl	152f8 <ST7735_t3::writedata(unsigned char)>
   156e6:	e6ef      	b.n	154c8 <ST7735_t3::setRotation(unsigned char)+0xa4>
    if (hwSPI) _pspi->endTransaction();  
   156e8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
		if (interruptMasksUsed) {
   156ec:	7cd3      	ldrb	r3, [r2, #19]
   156ee:	2b00      	cmp	r3, #0
   156f0:	f43f af46 	beq.w	15580 <ST7735_t3::setRotation(unsigned char)+0x15c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   156f4:	07dd      	lsls	r5, r3, #31
   156f6:	d504      	bpl.n	15702 <ST7735_t3::setRotation(unsigned char)+0x2de>
   156f8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   156fa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   156fe:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   15702:	0798      	lsls	r0, r3, #30
   15704:	d504      	bpl.n	15710 <ST7735_t3::setRotation(unsigned char)+0x2ec>
   15706:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
   15708:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   1570c:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   15710:	075e      	lsls	r6, r3, #29
   15712:	d504      	bpl.n	1571e <ST7735_t3::setRotation(unsigned char)+0x2fa>
   15714:	6b15      	ldr	r5, [r2, #48]	; 0x30
   15716:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   1571a:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   1571e:	071d      	lsls	r5, r3, #28
   15720:	d504      	bpl.n	1572c <ST7735_t3::setRotation(unsigned char)+0x308>
   15722:	6b55      	ldr	r5, [r2, #52]	; 0x34
   15724:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   15728:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   1572c:	06d8      	lsls	r0, r3, #27
   1572e:	f57f af27 	bpl.w	15580 <ST7735_t3::setRotation(unsigned char)+0x15c>
   15732:	6b92      	ldr	r2, [r2, #56]	; 0x38
   15734:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   15738:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1573c:	e720      	b.n	15580 <ST7735_t3::setRotation(unsigned char)+0x15c>
   1573e:	bf00      	nop
   15740:	200136f9 	.word	0x200136f9
   15744:	200136f8 	.word	0x200136f8
   15748:	20013554 	.word	0x20013554
   1574c:	20013690 	.word	0x20013690

00015750 <ST7735_t3::writedata_last(unsigned char)>:
   15750:	f7ff bdd2 	b.w	152f8 <ST7735_t3::writedata(unsigned char)>

00015754 <ST7735_t3::writedata16(unsigned short)>:
	if (hwSPI) {
   15754:	7a43      	ldrb	r3, [r0, #9]
{
   15756:	b570      	push	{r4, r5, r6, lr}
	if (hwSPI) {
   15758:	b363      	cbz	r3, 157b4 <ST7735_t3::writedata16(unsigned short)+0x60>
		maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15) | LPSPI_TCR_CONT);
   1575a:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
   1575e:	4b62      	ldr	r3, [pc, #392]	; (158e8 <ST7735_t3::writedata16(unsigned short)+0x194>)
  if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
   15760:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   15764:	4c61      	ldr	r4, [pc, #388]	; (158ec <ST7735_t3::writedata16(unsigned short)+0x198>)
   15766:	432b      	orrs	r3, r5
   15768:	4014      	ands	r4, r2
   1576a:	42a3      	cmp	r3, r4
   1576c:	d039      	beq.n	157e2 <ST7735_t3::writedata16(unsigned short)+0x8e>
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   1576e:	4c60      	ldr	r4, [pc, #384]	; (158f0 <ST7735_t3::writedata16(unsigned short)+0x19c>)
   15770:	4014      	ands	r4, r2
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) != (requested_tcr_state & LPSPI_TCR_PCS(3));
   15772:	405a      	eors	r2, r3
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   15774:	431c      	orrs	r4, r3
      if (!dc_state_change || !_dcpinmask) {
   15776:	f012 7f40 	tst.w	r2, #50331648	; 0x3000000
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   1577a:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
      if (!dc_state_change || !_dcpinmask) {
   1577e:	d133      	bne.n	157e8 <ST7735_t3::writedata16(unsigned short)+0x94>
        while ((_pimxrt_spi->FSR & 0x1f) )  ;
   15780:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   15784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   15786:	06d5      	lsls	r5, r2, #27
   15788:	d1fc      	bne.n	15784 <ST7735_t3::writedata16(unsigned short)+0x30>
        _pimxrt_spi->TCR = _spi_tcr_current;  // update the TCR
   1578a:	661c      	str	r4, [r3, #96]	; 0x60
		_pimxrt_spi->TDR = d;
   1578c:	6659      	str	r1, [r3, #100]	; 0x64
		_pending_rx_count++;	//
   1578e:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
   15792:	3201      	adds	r2, #1
   15794:	f880 209c 	strb.w	r2, [r0, #156]	; 0x9c
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1579a:	0791      	lsls	r1, r2, #30
   1579c:	d406      	bmi.n	157ac <ST7735_t3::writedata16(unsigned short)+0x58>
            if (_pending_rx_count) _pending_rx_count--; //decrement count of bytes still levt
   1579e:	f890 209c 	ldrb.w	r2, [r0, #156]	; 0x9c
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   157a2:	6f59      	ldr	r1, [r3, #116]	; 0x74
            if (_pending_rx_count) _pending_rx_count--; //decrement count of bytes still levt
   157a4:	1e51      	subs	r1, r2, #1
   157a6:	b10a      	cbz	r2, 157ac <ST7735_t3::writedata16(unsigned short)+0x58>
   157a8:	f880 109c 	strb.w	r1, [r0, #156]	; 0x9c
    } while ((_pimxrt_spi->SR & LPSPI_SR_TDF) == 0) ;
   157ac:	695a      	ldr	r2, [r3, #20]
   157ae:	07d2      	lsls	r2, r2, #31
   157b0:	d5f2      	bpl.n	15798 <ST7735_t3::writedata16(unsigned short)+0x44>
} 
   157b2:	bd70      	pop	{r4, r5, r6, pc}
		DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   157b4:	e9d0 542f 	ldrd	r5, r4, [r0, #188]	; 0xbc
	if (_pspi) {
   157b8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
		spiwrite(d >> 8);
   157bc:	0a0a      	lsrs	r2, r1, #8
    *(base+33) = mask;
   157be:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
	if (_pspi) {
   157c2:	b323      	cbz	r3, 1580e <ST7735_t3::writedata16(unsigned short)+0xba>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   157c4:	681b      	ldr	r3, [r3, #0]
		port().TDR = data;
   157c6:	665a      	str	r2, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   157c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   157ca:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
   157ce:	d0fb      	beq.n	157c8 <ST7735_t3::writedata16(unsigned short)+0x74>
   157d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		spiwrite(d);
   157d2:	b2c9      	uxtb	r1, r1
		port().TDR = data;
   157d4:	6659      	str	r1, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   157d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   157d8:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
   157dc:	d0fb      	beq.n	157d6 <ST7735_t3::writedata16(unsigned short)+0x82>
   157de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
} 
   157e0:	bd70      	pop	{r4, r5, r6, pc}
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   157e2:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   157e6:	e7d1      	b.n	1578c <ST7735_t3::writedata16(unsigned short)+0x38>
      if (!dc_state_change || !_dcpinmask) {
   157e8:	f8d0 60bc 	ldr.w	r6, [r0, #188]	; 0xbc
   157ec:	2e00      	cmp	r6, #0
   157ee:	d0c7      	beq.n	15780 <ST7735_t3::writedata16(unsigned short)+0x2c>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   157f0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    while (_pending_rx_count) {
   157f4:	f890 409c 	ldrb.w	r4, [r0, #156]	; 0x9c
   157f8:	2c00      	cmp	r4, #0
   157fa:	d060      	beq.n	158be <ST7735_t3::writedata16(unsigned short)+0x16a>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   157fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   157fe:	0792      	lsls	r2, r2, #30
   15800:	d4fa      	bmi.n	157f8 <ST7735_t3::writedata16(unsigned short)+0xa4>
            _pending_rx_count--; //decrement count of bytes still levt
   15802:	3c01      	subs	r4, #1
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   15804:	6f5a      	ldr	r2, [r3, #116]	; 0x74
            _pending_rx_count--; //decrement count of bytes still levt
   15806:	b2e4      	uxtb	r4, r4
   15808:	f880 409c 	strb.w	r4, [r0, #156]	; 0x9c
   1580c:	e7f4      	b.n	157f8 <ST7735_t3::writedata16(unsigned short)+0xa4>
		spiwrite(d >> 8);
   1580e:	fa5f fe82 	uxtb.w	lr, r2
			DIRECT_WRITE_HIGH(_sckport, _sckpinmask);
   15812:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
   15816:	f04f 0c08 	mov.w	ip, #8
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   1581a:	2280      	movs	r2, #128	; 0x80
   1581c:	e01b      	b.n	15856 <ST7735_t3::writedata16(unsigned short)+0x102>
    *(base+33) = mask;
   1581e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   15822:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
   15826:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
			asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
   1582a:	bf00      	nop
   1582c:	bf00      	nop
   1582e:	bf00      	nop
   15830:	bf00      	nop
   15832:	bf00      	nop
   15834:	bf00      	nop
   15836:	bf00      	nop
   15838:	bf00      	nop
   1583a:	bf00      	nop
   1583c:	bf00      	nop
   1583e:	bf00      	nop
			DIRECT_WRITE_LOW(_sckport, _sckpinmask);
   15840:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   15844:	f1bc 0c01 	subs.w	ip, ip, #1
    *(base+34) = mask;
   15848:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
   1584c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   15850:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
   15854:	d007      	beq.n	15866 <ST7735_t3::writedata16(unsigned short)+0x112>
			if(c & bit) DIRECT_WRITE_HIGH(_mosiport, _mosipinmask);
   15856:	ea1e 0f02 	tst.w	lr, r2
    *(base+33) = mask;
   1585a:	e9d0 5431 	ldrd	r5, r4, [r0, #196]	; 0xc4
   1585e:	d1de      	bne.n	1581e <ST7735_t3::writedata16(unsigned short)+0xca>
    *(base+34) = mask;
   15860:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  }
   15864:	e7dd      	b.n	15822 <ST7735_t3::writedata16(unsigned short)+0xce>
	if (_pspi) {
   15866:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
		spiwrite(d);
   1586a:	b2c9      	uxtb	r1, r1
	if (_pspi) {
   1586c:	2a00      	cmp	r2, #0
   1586e:	d139      	bne.n	158e4 <ST7735_t3::writedata16(unsigned short)+0x190>
   15870:	f04f 0c08 	mov.w	ip, #8
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   15874:	2280      	movs	r2, #128	; 0x80
   15876:	e01b      	b.n	158b0 <ST7735_t3::writedata16(unsigned short)+0x15c>
    *(base+33) = mask;
   15878:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   1587c:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
   15880:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
			asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
   15884:	bf00      	nop
   15886:	bf00      	nop
   15888:	bf00      	nop
   1588a:	bf00      	nop
   1588c:	bf00      	nop
   1588e:	bf00      	nop
   15890:	bf00      	nop
   15892:	bf00      	nop
   15894:	bf00      	nop
   15896:	bf00      	nop
   15898:	bf00      	nop
			DIRECT_WRITE_LOW(_sckport, _sckpinmask);
   1589a:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   1589e:	f1bc 0c01 	subs.w	ip, ip, #1
    *(base+34) = mask;
   158a2:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
   158a6:	ea4f 0252 	mov.w	r2, r2, lsr #1
   158aa:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
   158ae:	d080      	beq.n	157b2 <ST7735_t3::writedata16(unsigned short)+0x5e>
			if(c & bit) DIRECT_WRITE_HIGH(_mosiport, _mosipinmask);
   158b0:	4211      	tst	r1, r2
    *(base+33) = mask;
   158b2:	e9d0 5431 	ldrd	r5, r4, [r0, #196]	; 0xc4
   158b6:	d1df      	bne.n	15878 <ST7735_t3::writedata16(unsigned short)+0x124>
    *(base+34) = mask;
   158b8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  }
   158bc:	e7de      	b.n	1587c <ST7735_t3::writedata16(unsigned short)+0x128>
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   158be:	f240 2201 	movw	r2, #513	; 0x201
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   158c2:	f015 7f40 	tst.w	r5, #50331648	; 0x3000000
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   158c6:	611a      	str	r2, [r3, #16]
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   158c8:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
   158cc:	d107      	bne.n	158de <ST7735_t3::writedata16(unsigned short)+0x18a>
    *(base+34) = mask;
   158ce:	f8c2 6088 	str.w	r6, [r2, #136]	; 0x88
        _pimxrt_spi->TCR = _spi_tcr_current & ~(LPSPI_TCR_PCS(3) | LPSPI_TCR_CONT); // go ahead and update TCR anyway?  
   158d2:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   158d6:	f022 7248 	bic.w	r2, r2, #52428800	; 0x3200000
   158da:	661a      	str	r2, [r3, #96]	; 0x60
   158dc:	e756      	b.n	1578c <ST7735_t3::writedata16(unsigned short)+0x38>
    *(base+33) = mask;
   158de:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
  }
   158e2:	e7f6      	b.n	158d2 <ST7735_t3::writedata16(unsigned short)+0x17e>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   158e4:	6813      	ldr	r3, [r2, #0]
   158e6:	e775      	b.n	157d4 <ST7735_t3::writedata16(unsigned short)+0x80>
   158e8:	0020000f 	.word	0x0020000f
   158ec:	0328001f 	.word	0x0328001f
   158f0:	fcd7ffe0 	.word	0xfcd7ffe0

000158f4 <ST7735_t3::writedata16_last(unsigned short)>:
	if (hwSPI) {
   158f4:	7a43      	ldrb	r3, [r0, #9]
{
   158f6:	b570      	push	{r4, r5, r6, lr}
	if (hwSPI) {
   158f8:	b363      	cbz	r3, 15954 <ST7735_t3::writedata16_last(unsigned short)+0x60>
		maybeUpdateTCR(_tcr_dc_not_assert | LPSPI_TCR_FRAMESZ(15));
   158fa:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
  if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
   158fe:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   15902:	4a61      	ldr	r2, [pc, #388]	; (15a88 <ST7735_t3::writedata16_last(unsigned short)+0x194>)
   15904:	f045 040f 	orr.w	r4, r5, #15
   15908:	401a      	ands	r2, r3
   1590a:	4294      	cmp	r4, r2
   1590c:	d039      	beq.n	15982 <ST7735_t3::writedata16_last(unsigned short)+0x8e>
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   1590e:	4a5f      	ldr	r2, [pc, #380]	; (15a8c <ST7735_t3::writedata16_last(unsigned short)+0x198>)
   15910:	401a      	ands	r2, r3
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) != (requested_tcr_state & LPSPI_TCR_PCS(3));
   15912:	4063      	eors	r3, r4
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   15914:	4314      	orrs	r4, r2
      if (!dc_state_change || !_dcpinmask) {
   15916:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   1591a:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
      if (!dc_state_change || !_dcpinmask) {
   1591e:	d133      	bne.n	15988 <ST7735_t3::writedata16_last(unsigned short)+0x94>
        while ((_pimxrt_spi->FSR & 0x1f) )  ;
   15920:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
   15924:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   15926:	06dd      	lsls	r5, r3, #27
   15928:	d1fc      	bne.n	15924 <ST7735_t3::writedata16_last(unsigned short)+0x30>
        _pimxrt_spi->TCR = _spi_tcr_current;  // update the TCR
   1592a:	6614      	str	r4, [r2, #96]	; 0x60
		_pimxrt_spi->TDR = d;
   1592c:	6651      	str	r1, [r2, #100]	; 0x64
		_pending_rx_count++;	//
   1592e:	f890 109c 	ldrb.w	r1, [r0, #156]	; 0x9c
   15932:	3101      	adds	r1, #1
   15934:	b2c9      	uxtb	r1, r1
    while (_pending_rx_count) {
   15936:	b139      	cbz	r1, 15948 <ST7735_t3::writedata16_last(unsigned short)+0x54>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15938:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1593a:	079b      	lsls	r3, r3, #30
   1593c:	d4fb      	bmi.n	15936 <ST7735_t3::writedata16_last(unsigned short)+0x42>
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   1593e:	3901      	subs	r1, #1
   15940:	6f53      	ldr	r3, [r2, #116]	; 0x74
            _pending_rx_count--; //decrement count of bytes still levt
   15942:	b2c9      	uxtb	r1, r1
    while (_pending_rx_count) {
   15944:	2900      	cmp	r1, #0
   15946:	d1f7      	bne.n	15938 <ST7735_t3::writedata16_last(unsigned short)+0x44>
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   15948:	f240 2301 	movw	r3, #513	; 0x201
   1594c:	f880 109c 	strb.w	r1, [r0, #156]	; 0x9c
   15950:	6113      	str	r3, [r2, #16]
} 
   15952:	bd70      	pop	{r4, r5, r6, pc}
		DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   15954:	e9d0 542f 	ldrd	r5, r4, [r0, #188]	; 0xbc
	if (_pspi) {
   15958:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
		spiwrite(d >> 8);
   1595c:	0a0a      	lsrs	r2, r1, #8
    *(base+33) = mask;
   1595e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
	if (_pspi) {
   15962:	b323      	cbz	r3, 159ae <ST7735_t3::writedata16_last(unsigned short)+0xba>
   15964:	681b      	ldr	r3, [r3, #0]
		port().TDR = data;
   15966:	665a      	str	r2, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   15968:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   1596a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
   1596e:	d0fb      	beq.n	15968 <ST7735_t3::writedata16_last(unsigned short)+0x74>
   15970:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		spiwrite(d);
   15972:	b2c9      	uxtb	r1, r1
		port().TDR = data;
   15974:	6659      	str	r1, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   15976:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   15978:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
   1597c:	d0fb      	beq.n	15976 <ST7735_t3::writedata16_last(unsigned short)+0x82>
   1597e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
} 
   15980:	bd70      	pop	{r4, r5, r6, pc}
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15982:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
   15986:	e7d1      	b.n	1592c <ST7735_t3::writedata16_last(unsigned short)+0x38>
      if (!dc_state_change || !_dcpinmask) {
   15988:	f8d0 60bc 	ldr.w	r6, [r0, #188]	; 0xbc
   1598c:	2e00      	cmp	r6, #0
   1598e:	d0c7      	beq.n	15920 <ST7735_t3::writedata16_last(unsigned short)+0x2c>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15990:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
    while (_pending_rx_count) {
   15994:	f890 409c 	ldrb.w	r4, [r0, #156]	; 0x9c
   15998:	2c00      	cmp	r4, #0
   1599a:	d060      	beq.n	15a5e <ST7735_t3::writedata16_last(unsigned short)+0x16a>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   1599c:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1599e:	079b      	lsls	r3, r3, #30
   159a0:	d4fa      	bmi.n	15998 <ST7735_t3::writedata16_last(unsigned short)+0xa4>
            _pending_rx_count--; //decrement count of bytes still levt
   159a2:	3c01      	subs	r4, #1
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   159a4:	6f53      	ldr	r3, [r2, #116]	; 0x74
            _pending_rx_count--; //decrement count of bytes still levt
   159a6:	b2e4      	uxtb	r4, r4
   159a8:	f880 409c 	strb.w	r4, [r0, #156]	; 0x9c
   159ac:	e7f4      	b.n	15998 <ST7735_t3::writedata16_last(unsigned short)+0xa4>
		spiwrite(d >> 8);
   159ae:	fa5f fe82 	uxtb.w	lr, r2
			DIRECT_WRITE_HIGH(_sckport, _sckpinmask);
   159b2:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
   159b6:	f04f 0c08 	mov.w	ip, #8
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   159ba:	2280      	movs	r2, #128	; 0x80
   159bc:	e01b      	b.n	159f6 <ST7735_t3::writedata16_last(unsigned short)+0x102>
    *(base+33) = mask;
   159be:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   159c2:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
   159c6:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
			asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
   159ca:	bf00      	nop
   159cc:	bf00      	nop
   159ce:	bf00      	nop
   159d0:	bf00      	nop
   159d2:	bf00      	nop
   159d4:	bf00      	nop
   159d6:	bf00      	nop
   159d8:	bf00      	nop
   159da:	bf00      	nop
   159dc:	bf00      	nop
   159de:	bf00      	nop
			DIRECT_WRITE_LOW(_sckport, _sckpinmask);
   159e0:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   159e4:	f1bc 0c01 	subs.w	ip, ip, #1
    *(base+34) = mask;
   159e8:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
   159ec:	ea4f 0252 	mov.w	r2, r2, lsr #1
   159f0:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
   159f4:	d007      	beq.n	15a06 <ST7735_t3::writedata16_last(unsigned short)+0x112>
			if(c & bit) DIRECT_WRITE_HIGH(_mosiport, _mosipinmask);
   159f6:	ea1e 0f02 	tst.w	lr, r2
    *(base+33) = mask;
   159fa:	e9d0 5431 	ldrd	r5, r4, [r0, #196]	; 0xc4
   159fe:	d1de      	bne.n	159be <ST7735_t3::writedata16_last(unsigned short)+0xca>
    *(base+34) = mask;
   15a00:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  }
   15a04:	e7dd      	b.n	159c2 <ST7735_t3::writedata16_last(unsigned short)+0xce>
	if (_pspi) {
   15a06:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
		spiwrite(d);
   15a0a:	b2c9      	uxtb	r1, r1
	if (_pspi) {
   15a0c:	2a00      	cmp	r2, #0
   15a0e:	d139      	bne.n	15a84 <ST7735_t3::writedata16_last(unsigned short)+0x190>
   15a10:	f04f 0c08 	mov.w	ip, #8
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   15a14:	2280      	movs	r2, #128	; 0x80
   15a16:	e01b      	b.n	15a50 <ST7735_t3::writedata16_last(unsigned short)+0x15c>
    *(base+33) = mask;
   15a18:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   15a1c:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
   15a20:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
			asm("nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; nop;");
   15a24:	bf00      	nop
   15a26:	bf00      	nop
   15a28:	bf00      	nop
   15a2a:	bf00      	nop
   15a2c:	bf00      	nop
   15a2e:	bf00      	nop
   15a30:	bf00      	nop
   15a32:	bf00      	nop
   15a34:	bf00      	nop
   15a36:	bf00      	nop
   15a38:	bf00      	nop
			DIRECT_WRITE_LOW(_sckport, _sckpinmask);
   15a3a:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
		for(uint8_t bit = 0x80; bit; bit >>= 1) {
   15a3e:	f1bc 0c01 	subs.w	ip, ip, #1
    *(base+34) = mask;
   15a42:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
   15a46:	ea4f 0252 	mov.w	r2, r2, lsr #1
   15a4a:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
   15a4e:	d080      	beq.n	15952 <ST7735_t3::writedata16_last(unsigned short)+0x5e>
			if(c & bit) DIRECT_WRITE_HIGH(_mosiport, _mosipinmask);
   15a50:	4211      	tst	r1, r2
    *(base+33) = mask;
   15a52:	e9d0 5431 	ldrd	r5, r4, [r0, #196]	; 0xc4
   15a56:	d1df      	bne.n	15a18 <ST7735_t3::writedata16_last(unsigned short)+0x124>
    *(base+34) = mask;
   15a58:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  }
   15a5c:	e7de      	b.n	15a1c <ST7735_t3::writedata16_last(unsigned short)+0x128>
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   15a5e:	f240 2301 	movw	r3, #513	; 0x201
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   15a62:	f015 7f40 	tst.w	r5, #50331648	; 0x3000000
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   15a66:	6113      	str	r3, [r2, #16]
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   15a68:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   15a6c:	d107      	bne.n	15a7e <ST7735_t3::writedata16_last(unsigned short)+0x18a>
    *(base+34) = mask;
   15a6e:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
        _pimxrt_spi->TCR = _spi_tcr_current & ~(LPSPI_TCR_PCS(3) | LPSPI_TCR_CONT); // go ahead and update TCR anyway?  
   15a72:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   15a76:	f023 7348 	bic.w	r3, r3, #52428800	; 0x3200000
   15a7a:	6613      	str	r3, [r2, #96]	; 0x60
   15a7c:	e756      	b.n	1592c <ST7735_t3::writedata16_last(unsigned short)+0x38>
    *(base+33) = mask;
   15a7e:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84
  }
   15a82:	e7f6      	b.n	15a72 <ST7735_t3::writedata16_last(unsigned short)+0x17e>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   15a84:	6813      	ldr	r3, [r2, #0]
   15a86:	e775      	b.n	15974 <ST7735_t3::writedata16_last(unsigned short)+0x80>
   15a88:	0328001f 	.word	0x0328001f
   15a8c:	fcd7ffe0 	.word	0xfcd7ffe0

00015a90 <ST7735_t3::commandList(unsigned char const*)>:
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   15a90:	7a43      	ldrb	r3, [r0, #9]
{
   15a92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a96:	4683      	mov	fp, r0
   15a98:	b083      	sub	sp, #12
   15a9a:	460c      	mov	r4, r1
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	f040 80bb 	bne.w	15c18 <ST7735_t3::commandList(unsigned char const*)+0x188>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   15aa2:	f8db 30c0 	ldr.w	r3, [fp, #192]	; 0xc0
   15aa6:	2b00      	cmp	r3, #0
   15aa8:	f000 80c3 	beq.w	15c32 <ST7735_t3::commandList(unsigned char const*)+0x1a2>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   15aac:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	f000 80c8 	beq.w	15c46 <ST7735_t3::commandList(unsigned char const*)+0x1b6>
   15ab6:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
    *(base+34) = mask;
   15aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	numCommands = pgm_read_byte(addr++);		// Number of commands to follow
   15abe:	f814 2b01 	ldrb.w	r2, [r4], #1
	while(numCommands--) {				// For each command...
   15ac2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
   15ac6:	fa5f f888 	uxtb.w	r8, r8
   15aca:	2a00      	cmp	r2, #0
   15acc:	d064      	beq.n	15b98 <ST7735_t3::commandList(unsigned char const*)+0x108>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   15ace:	f10b 0384 	add.w	r3, fp, #132	; 0x84
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   15ad2:	f04f 2ae0 	mov.w	sl, #3758153728	; 0xe000e000
   15ad6:	9301      	str	r3, [sp, #4]
		writecommand_last(pgm_read_byte(addr++));	//   Read, issue command
   15ad8:	4625      	mov	r5, r4
   15ada:	4658      	mov	r0, fp
   15adc:	f815 1b02 	ldrb.w	r1, [r5], #2
   15ae0:	f7ff fb76 	bl	151d0 <ST7735_t3::writecommand_last(unsigned char)>
		numArgs  = pgm_read_byte(addr++);	//   Number of args to follow
   15ae4:	7867      	ldrb	r7, [r4, #1]
   15ae6:	462c      	mov	r4, r5
		while(numArgs > 1) {			//   For each argument...
   15ae8:	f017 0f7e 	tst.w	r7, #126	; 0x7e
		numArgs &= ~DELAY;			//   Mask out delay bit
   15aec:	f007 067f 	and.w	r6, r7, #127	; 0x7f
		while(numArgs > 1) {			//   For each argument...
   15af0:	d023      	beq.n	15b3a <ST7735_t3::commandList(unsigned char const*)+0xaa>
   15af2:	19ac      	adds	r4, r5, r6
		numArgs  = pgm_read_byte(addr++);	//   Number of args to follow
   15af4:	46a9      	mov	r9, r5
   15af6:	b2e4      	uxtb	r4, r4
			writedata(pgm_read_byte(addr++)); //   Read, issue argument
   15af8:	f819 1b01 	ldrb.w	r1, [r9], #1
   15afc:	4658      	mov	r0, fp
   15afe:	f7ff fbfb 	bl	152f8 <ST7735_t3::writedata(unsigned char)>
		while(numArgs > 1) {			//   For each argument...
   15b02:	eba4 0309 	sub.w	r3, r4, r9
   15b06:	b2db      	uxtb	r3, r3
   15b08:	2b01      	cmp	r3, #1
   15b0a:	d8f5      	bhi.n	15af8 <ST7735_t3::commandList(unsigned char const*)+0x68>
			writedata(pgm_read_byte(addr++)); //   Read, issue argument
   15b0c:	1eb4      	subs	r4, r6, #2
   15b0e:	2e01      	cmp	r6, #1
   15b10:	b2e4      	uxtb	r4, r4
   15b12:	f104 0401 	add.w	r4, r4, #1
   15b16:	bf08      	it	eq
   15b18:	2401      	moveq	r4, #1
   15b1a:	442c      	add	r4, r5
		if (numArgs) writedata_last(pgm_read_byte(addr++)); //   Read, issue argument - wait until this one completes
   15b1c:	4658      	mov	r0, fp
   15b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
   15b22:	f7ff fbe9 	bl	152f8 <ST7735_t3::writedata(unsigned char)>
		if(ms) {
   15b26:	063f      	lsls	r7, r7, #24
   15b28:	d40b      	bmi.n	15b42 <ST7735_t3::commandList(unsigned char const*)+0xb2>
	while(numCommands--) {				// For each command...
   15b2a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   15b2e:	b2db      	uxtb	r3, r3
   15b30:	f1b8 0f00 	cmp.w	r8, #0
   15b34:	d02d      	beq.n	15b92 <ST7735_t3::commandList(unsigned char const*)+0x102>
   15b36:	4698      	mov	r8, r3
   15b38:	e7ce      	b.n	15ad8 <ST7735_t3::commandList(unsigned char const*)+0x48>
		if (numArgs) writedata_last(pgm_read_byte(addr++)); //   Read, issue argument - wait until this one completes
   15b3a:	2e00      	cmp	r6, #0
   15b3c:	d1ee      	bne.n	15b1c <ST7735_t3::commandList(unsigned char const*)+0x8c>
		if(ms) {
   15b3e:	063f      	lsls	r7, r7, #24
   15b40:	d5f3      	bpl.n	15b2a <ST7735_t3::commandList(unsigned char const*)+0x9a>
			ms = pgm_read_byte(addr++);	// Read post-command delay time (ms)
   15b42:	f814 0b01 	ldrb.w	r0, [r4], #1
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   15b46:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
			delay(ms);
   15b4a:	28ff      	cmp	r0, #255	; 0xff
   15b4c:	bf08      	it	eq
   15b4e:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
   15b52:	b11b      	cbz	r3, 15b5c <ST7735_t3::commandList(unsigned char const*)+0xcc>
   15b54:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
    *(base+33) = mask;
   15b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   15b5c:	f89b 3009 	ldrb.w	r3, [fp, #9]
   15b60:	bb2b      	cbnz	r3, 15bae <ST7735_t3::commandList(unsigned char const*)+0x11e>
   15b62:	f005 fce7 	bl	1b534 <delay>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   15b66:	f89b 3009 	ldrb.w	r3, [fp, #9]
   15b6a:	2b00      	cmp	r3, #0
   15b6c:	d143      	bne.n	15bf6 <ST7735_t3::commandList(unsigned char const*)+0x166>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   15b6e:	f8db 30c0 	ldr.w	r3, [fp, #192]	; 0xc0
   15b72:	2b00      	cmp	r3, #0
   15b74:	d04a      	beq.n	15c0c <ST7735_t3::commandList(unsigned char const*)+0x17c>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   15b76:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
   15b7a:	2b00      	cmp	r3, #0
   15b7c:	d0d5      	beq.n	15b2a <ST7735_t3::commandList(unsigned char const*)+0x9a>
   15b7e:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
    *(base+34) = mask;
   15b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	while(numCommands--) {				// For each command...
   15b86:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   15b8a:	b2db      	uxtb	r3, r3
   15b8c:	f1b8 0f00 	cmp.w	r8, #0
   15b90:	d1d1      	bne.n	15b36 <ST7735_t3::commandList(unsigned char const*)+0xa6>
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   15b92:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
   15b96:	b11b      	cbz	r3, 15ba0 <ST7735_t3::commandList(unsigned char const*)+0x110>
   15b98:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
    *(base+33) = mask;
   15b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   15ba0:	f89b 3009 	ldrb.w	r3, [fp, #9]
   15ba4:	2b00      	cmp	r3, #0
   15ba6:	d158      	bne.n	15c5a <ST7735_t3::commandList(unsigned char const*)+0x1ca>
}
   15ba8:	b003      	add	sp, #12
   15baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bae:	f8db 108c 	ldr.w	r1, [fp, #140]	; 0x8c
		if (interruptMasksUsed) {
   15bb2:	7ccb      	ldrb	r3, [r1, #19]
   15bb4:	2b00      	cmp	r3, #0
   15bb6:	d0d4      	beq.n	15b62 <ST7735_t3::commandList(unsigned char const*)+0xd2>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   15bb8:	07de      	lsls	r6, r3, #31
   15bba:	d502      	bpl.n	15bc2 <ST7735_t3::commandList(unsigned char const*)+0x132>
   15bbc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   15bbe:	f8ca 2100 	str.w	r2, [sl, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   15bc2:	079d      	lsls	r5, r3, #30
   15bc4:	d502      	bpl.n	15bcc <ST7735_t3::commandList(unsigned char const*)+0x13c>
   15bc6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   15bc8:	f8ca 2104 	str.w	r2, [sl, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   15bcc:	075a      	lsls	r2, r3, #29
   15bce:	d502      	bpl.n	15bd6 <ST7735_t3::commandList(unsigned char const*)+0x146>
   15bd0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   15bd2:	f8ca 2108 	str.w	r2, [sl, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   15bd6:	071f      	lsls	r7, r3, #28
   15bd8:	d502      	bpl.n	15be0 <ST7735_t3::commandList(unsigned char const*)+0x150>
   15bda:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   15bdc:	f8ca 210c 	str.w	r2, [sl, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   15be0:	06de      	lsls	r6, r3, #27
   15be2:	d5be      	bpl.n	15b62 <ST7735_t3::commandList(unsigned char const*)+0xd2>
   15be4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   15be6:	f8ca 3110 	str.w	r3, [sl, #272]	; 0x110
			delay(ms);
   15bea:	f005 fca3 	bl	1b534 <delay>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   15bee:	f89b 3009 	ldrb.w	r3, [fp, #9]
   15bf2:	2b00      	cmp	r3, #0
   15bf4:	d0bb      	beq.n	15b6e <ST7735_t3::commandList(unsigned char const*)+0xde>
   15bf6:	9b01      	ldr	r3, [sp, #4]
   15bf8:	f8db 008c 	ldr.w	r0, [fp, #140]	; 0x8c
   15bfc:	e893 0006 	ldmia.w	r3, {r1, r2}
   15c00:	f7f5 fb74 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   15c04:	f8db 30c0 	ldr.w	r3, [fp, #192]	; 0xc0
   15c08:	2b00      	cmp	r3, #0
   15c0a:	d1b4      	bne.n	15b76 <ST7735_t3::commandList(unsigned char const*)+0xe6>
   15c0c:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
   15c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   15c12:	f8cb 30a0 	str.w	r3, [fp, #160]	; 0xa0
   15c16:	e7ae      	b.n	15b76 <ST7735_t3::commandList(unsigned char const*)+0xe6>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   15c18:	f100 0384 	add.w	r3, r0, #132	; 0x84
   15c1c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   15c20:	e893 0006 	ldmia.w	r3, {r1, r2}
   15c24:	f7f5 fb62 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   15c28:	f8db 30c0 	ldr.w	r3, [fp, #192]	; 0xc0
   15c2c:	2b00      	cmp	r3, #0
   15c2e:	f47f af3d 	bne.w	15aac <ST7735_t3::commandList(unsigned char const*)+0x1c>
   15c32:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
   15c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   15c38:	f8cb 30a0 	str.w	r3, [fp, #160]	; 0xa0
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   15c3c:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
   15c40:	2b00      	cmp	r3, #0
   15c42:	f47f af38 	bne.w	15ab6 <ST7735_t3::commandList(unsigned char const*)+0x26>
	numCommands = pgm_read_byte(addr++);		// Number of commands to follow
   15c46:	f814 3b01 	ldrb.w	r3, [r4], #1
	while(numCommands--) {				// For each command...
   15c4a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   15c4e:	fa5f f888 	uxtb.w	r8, r8
   15c52:	2b00      	cmp	r3, #0
   15c54:	f47f af3b 	bne.w	15ace <ST7735_t3::commandList(unsigned char const*)+0x3e>
   15c58:	e7a2      	b.n	15ba0 <ST7735_t3::commandList(unsigned char const*)+0x110>
    if (hwSPI) _pspi->endTransaction();  
   15c5a:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
		if (interruptMasksUsed) {
   15c5e:	7cd3      	ldrb	r3, [r2, #19]
   15c60:	2b00      	cmp	r3, #0
   15c62:	d0a1      	beq.n	15ba8 <ST7735_t3::commandList(unsigned char const*)+0x118>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   15c64:	07dd      	lsls	r5, r3, #31
   15c66:	d504      	bpl.n	15c72 <ST7735_t3::commandList(unsigned char const*)+0x1e2>
   15c68:	6a90      	ldr	r0, [r2, #40]	; 0x28
   15c6a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15c6e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   15c72:	079c      	lsls	r4, r3, #30
   15c74:	d504      	bpl.n	15c80 <ST7735_t3::commandList(unsigned char const*)+0x1f0>
   15c76:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   15c78:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15c7c:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   15c80:	0758      	lsls	r0, r3, #29
   15c82:	d504      	bpl.n	15c8e <ST7735_t3::commandList(unsigned char const*)+0x1fe>
   15c84:	6b10      	ldr	r0, [r2, #48]	; 0x30
   15c86:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15c8a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   15c8e:	0719      	lsls	r1, r3, #28
   15c90:	d504      	bpl.n	15c9c <ST7735_t3::commandList(unsigned char const*)+0x20c>
   15c92:	6b50      	ldr	r0, [r2, #52]	; 0x34
   15c94:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   15c98:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   15c9c:	06db      	lsls	r3, r3, #27
   15c9e:	d583      	bpl.n	15ba8 <ST7735_t3::commandList(unsigned char const*)+0x118>
   15ca0:	6b92      	ldr	r2, [r2, #56]	; 0x38
   15ca2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   15ca6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   15caa:	e77d      	b.n	15ba8 <ST7735_t3::commandList(unsigned char const*)+0x118>

00015cac <ST7735_t3::commonInit(unsigned char const*, unsigned char)>:
{
   15cac:	b570      	push	{r4, r5, r6, lr}
   15cae:	460d      	mov	r5, r1
	if (_sid == (uint8_t)-1) _sid = 11;
   15cb0:	f890 10af 	ldrb.w	r1, [r0, #175]	; 0xaf
	_colstart  = _rowstart = 0; // May be overridden in init func
   15cb4:	2300      	movs	r3, #0
{
   15cb6:	4604      	mov	r4, r0
	if (_sid == (uint8_t)-1) _sid = 11;
   15cb8:	29ff      	cmp	r1, #255	; 0xff
{
   15cba:	4616      	mov	r6, r2
	_colstart  = _rowstart = 0; // May be overridden in init func
   15cbc:	f8a0 3076 	strh.w	r3, [r0, #118]	; 0x76
   15cc0:	6783      	str	r3, [r0, #120]	; 0x78
  	_ystart = _xstart = 0;
   15cc2:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
	if (_sid == (uint8_t)-1) _sid = 11;
   15cc6:	d103      	bne.n	15cd0 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x24>
   15cc8:	230b      	movs	r3, #11
   15cca:	4619      	mov	r1, r3
   15ccc:	f880 30af 	strb.w	r3, [r0, #175]	; 0xaf
	if (_sclk == (uint8_t)-1) _sclk = 13;
   15cd0:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15cd4:	2bff      	cmp	r3, #255	; 0xff
   15cd6:	d102      	bne.n	15cde <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x32>
   15cd8:	230d      	movs	r3, #13
   15cda:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	if (SPI.pinIsMOSI(_sid) && SPI.pinIsSCK(_sclk)) {
   15cde:	48b1      	ldr	r0, [pc, #708]	; (15fa4 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x2f8>)
   15ce0:	f7f7 f982 	bl	cfe8 <SPIClass::pinIsMOSI(unsigned char)>
   15ce4:	2800      	cmp	r0, #0
   15ce6:	d069      	beq.n	15dbc <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x110>
   15ce8:	f894 10b0 	ldrb.w	r1, [r4, #176]	; 0xb0
   15cec:	48ad      	ldr	r0, [pc, #692]	; (15fa4 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x2f8>)
   15cee:	f7f7 f989 	bl	d004 <SPIClass::pinIsSCK(unsigned char)>
   15cf2:	2800      	cmp	r0, #0
   15cf4:	d062      	beq.n	15dbc <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x110>
   15cf6:	2200      	movs	r2, #0
   15cf8:	4bab      	ldr	r3, [pc, #684]	; (15fa8 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x2fc>)
   15cfa:	48aa      	ldr	r0, [pc, #680]	; (15fa4 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x2f8>)
		_pimxrt_spi = &IMXRT_LPSPI1_S;
   15cfc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		hwSPI = true;
   15d00:	2301      	movs	r3, #1
		_spi_num = 2;          // Which buss is this spi on? 
   15d02:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
		hwSPI = true;
   15d06:	7263      	strb	r3, [r4, #9]
		_pspi = &SPI2;
   15d08:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
		_pspi->begin();
   15d0c:	f7f7 f83a 	bl	cd84 <SPIClass::begin()>
		_pending_rx_count = 0;
   15d10:	2200      	movs	r2, #0
			if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;
   15d12:	f016 0f08 	tst.w	r6, #8
   15d16:	4ba5      	ldr	r3, [pc, #660]	; (15fac <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x300>)
   15d18:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
   15d1c:	bf08      	it	eq
   15d1e:	2307      	moveq	r3, #7
			if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 
   15d20:	0772      	lsls	r2, r6, #29
   15d22:	d501      	bpl.n	15d28 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x7c>
   15d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
		_spiSettings = SPISettings(ST7735_SPICLOCK, MSBFIRST, mode);
   15d28:	49a1      	ldr	r1, [pc, #644]	; (15fb0 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x304>)
		_pspi->beginTransaction(_spiSettings); // Should have our settings. 
   15d2a:	f104 0284 	add.w	r2, r4, #132	; 0x84
   15d2e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
		_spiSettings = SPISettings(ST7735_SPICLOCK, MSBFIRST, mode);
   15d32:	e9c4 1321 	strd	r1, r3, [r4, #132]	; 0x84
		_pspi->beginTransaction(_spiSettings); // Should have our settings. 
   15d36:	e9d2 1200 	ldrd	r1, r2, [r2]
   15d3a:	f7f5 fad7 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
		_pspi->transfer(0);	// hack to see if it will actually change then...
   15d3e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
		port().TDR = data;
   15d42:	2300      	movs	r3, #0
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   15d44:	680a      	ldr	r2, [r1, #0]
		port().TDR = data;
   15d46:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   15d48:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   15d4a:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   15d4e:	d0fb      	beq.n	15d48 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x9c>
		if (interruptMasksUsed) {
   15d50:	7ccb      	ldrb	r3, [r1, #19]
			if (fifo > 0) return port().RDR;
   15d52:	6f52      	ldr	r2, [r2, #116]	; 0x74
		if (interruptMasksUsed) {
   15d54:	b313      	cbz	r3, 15d9c <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0xf0>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   15d56:	07d8      	lsls	r0, r3, #31
   15d58:	d504      	bpl.n	15d64 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0xb8>
   15d5a:	6a88      	ldr	r0, [r1, #40]	; 0x28
   15d5c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   15d60:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   15d64:	079a      	lsls	r2, r3, #30
   15d66:	d504      	bpl.n	15d72 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0xc6>
   15d68:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   15d6a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   15d6e:	f8c2 0104 	str.w	r0, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   15d72:	075e      	lsls	r6, r3, #29
   15d74:	d504      	bpl.n	15d80 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0xd4>
   15d76:	6b08      	ldr	r0, [r1, #48]	; 0x30
   15d78:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   15d7c:	f8c2 0108 	str.w	r0, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   15d80:	0718      	lsls	r0, r3, #28
   15d82:	d504      	bpl.n	15d8e <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0xe2>
   15d84:	6b48      	ldr	r0, [r1, #52]	; 0x34
   15d86:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   15d8a:	f8c2 010c 	str.w	r0, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   15d8e:	06da      	lsls	r2, r3, #27
   15d90:	d504      	bpl.n	15d9c <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0xf0>
   15d92:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   15d94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   15d98:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		_spi_tcr_current = _pimxrt_spi->TCR; // get the current TCR value 
   15d9c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	if (_cs != 0xff) {
   15da0:	f894 00ac 	ldrb.w	r0, [r4, #172]	; 0xac
		_spi_tcr_current = _pimxrt_spi->TCR; // get the current TCR value 
   15da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	if (_cs != 0xff) {
   15da6:	28ff      	cmp	r0, #255	; 0xff
		_spi_tcr_current = _pimxrt_spi->TCR; // get the current TCR value 
   15da8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		_spi_hardware = (SPIClass::SPI_Hardware_t*)(void*)pa[1];
   15dac:	684b      	ldr	r3, [r1, #4]
   15dae:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	if (_cs != 0xff) {
   15db2:	d148      	bne.n	15e46 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x19a>
	} else _csport = 0;
   15db4:	2300      	movs	r3, #0
   15db6:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   15dba:	e055      	b.n	15e68 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x1bc>
	} else if (SPI1.pinIsMOSI(_sid) && SPI1.pinIsSCK(_sclk)) {
   15dbc:	f894 10af 	ldrb.w	r1, [r4, #175]	; 0xaf
   15dc0:	487c      	ldr	r0, [pc, #496]	; (15fb4 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x308>)
   15dc2:	f7f7 f911 	bl	cfe8 <SPIClass::pinIsMOSI(unsigned char)>
   15dc6:	b148      	cbz	r0, 15ddc <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x130>
   15dc8:	f894 10b0 	ldrb.w	r1, [r4, #176]	; 0xb0
   15dcc:	4879      	ldr	r0, [pc, #484]	; (15fb4 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x308>)
   15dce:	f7f7 f919 	bl	d004 <SPIClass::pinIsSCK(unsigned char)>
   15dd2:	b118      	cbz	r0, 15ddc <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x130>
   15dd4:	2201      	movs	r2, #1
   15dd6:	4b78      	ldr	r3, [pc, #480]	; (15fb8 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x30c>)
   15dd8:	4876      	ldr	r0, [pc, #472]	; (15fb4 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x308>)
   15dda:	e78f      	b.n	15cfc <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x50>
	} else if (SPI2.pinIsMOSI(_sid) && SPI2.pinIsSCK(_sclk)) {
   15ddc:	f894 10af 	ldrb.w	r1, [r4, #175]	; 0xaf
   15de0:	4876      	ldr	r0, [pc, #472]	; (15fbc <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x310>)
   15de2:	f7f7 f901 	bl	cfe8 <SPIClass::pinIsMOSI(unsigned char)>
   15de6:	2800      	cmp	r0, #0
   15de8:	f040 80b3 	bne.w	15f52 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x2a6>
		_sckport = portOutputRegister(_sclk);
   15dec:	f894 00b0 	ldrb.w	r0, [r4, #176]	; 0xb0
	} else _pspi = nullptr;
   15df0:	2300      	movs	r3, #0
		_sckport = portOutputRegister(_sclk);
   15df2:	4e73      	ldr	r6, [pc, #460]	; (15fc0 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x314>)
		pinMode(_sclk, OUTPUT);	
   15df4:	2101      	movs	r1, #1
	} else _pspi = nullptr;
   15df6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		hwSPI = false;
   15dfa:	7263      	strb	r3, [r4, #9]
		_sckport = portOutputRegister(_sclk);
   15dfc:	0103      	lsls	r3, r0, #4
   15dfe:	58f3      	ldr	r3, [r6, r3]
   15e00:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
   15e04:	eb06 1300 	add.w	r3, r6, r0, lsl #4
		_sckpinmask = digitalPinToBitMask(_sclk);
   15e08:	68db      	ldr	r3, [r3, #12]
   15e0a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
		pinMode(_sclk, OUTPUT);	
   15e0e:	f005 fc4b 	bl	1b6a8 <pinMode>
		pinMode(_sid, OUTPUT);	
   15e12:	2101      	movs	r1, #1
		DIRECT_WRITE_LOW(_sckport, _sckpinmask);
   15e14:	e9d4 2333 	ldrd	r2, r3, [r4, #204]	; 0xcc
    *(base+34) = mask;
   15e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		_mosiport = portOutputRegister(_sid);
   15e1c:	f894 00af 	ldrb.w	r0, [r4, #175]	; 0xaf
   15e20:	0103      	lsls	r3, r0, #4
   15e22:	58f3      	ldr	r3, [r6, r3]
   15e24:	eb06 1600 	add.w	r6, r6, r0, lsl #4
   15e28:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		_mosipinmask = digitalPinToBitMask(_sid);
   15e2c:	68f3      	ldr	r3, [r6, #12]
   15e2e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
		pinMode(_sid, OUTPUT);	
   15e32:	f005 fc39 	bl	1b6a8 <pinMode>
		DIRECT_WRITE_LOW(_mosiport, _mosipinmask);
   15e36:	e9d4 2331 	ldrd	r2, r3, [r4, #196]	; 0xc4
   15e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	if (_cs != 0xff) {
   15e3e:	f894 00ac 	ldrb.w	r0, [r4, #172]	; 0xac
   15e42:	28ff      	cmp	r0, #255	; 0xff
   15e44:	d0b6      	beq.n	15db4 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x108>
		_csport = portOutputRegister(_cs);
   15e46:	4b5e      	ldr	r3, [pc, #376]	; (15fc0 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x314>)
   15e48:	0102      	lsls	r2, r0, #4
		pinMode(_cs, OUTPUT);	
   15e4a:	2101      	movs	r1, #1
		_csport = portOutputRegister(_cs);
   15e4c:	589a      	ldr	r2, [r3, r2]
   15e4e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		_cspinmask = digitalPinToBitMask(_cs);
   15e52:	68db      	ldr	r3, [r3, #12]
		_csport = portOutputRegister(_cs);
   15e54:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
		_cspinmask = digitalPinToBitMask(_cs);
   15e58:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		pinMode(_cs, OUTPUT);	
   15e5c:	f005 fc24 	bl	1b6a8 <pinMode>
		DIRECT_WRITE_HIGH(_csport, _cspinmask);		
   15e60:	e9d4 232d 	ldrd	r2, r3, [r4, #180]	; 0xb4
    *(base+33) = mask;
   15e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if (_pspi && _pspi->pinIsChipSelect(_rs)) {
   15e68:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   15e6c:	b128      	cbz	r0, 15e7a <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x1ce>
   15e6e:	f894 10ad 	ldrb.w	r1, [r4, #173]	; 0xad
   15e72:	f7f7 f8a1 	bl	cfb8 <SPIClass::pinIsChipSelect(unsigned char)>
   15e76:	2800      	cmp	r0, #0
   15e78:	d15a      	bne.n	15f30 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x284>
		_dcport = portOutputRegister(_rs);
   15e7a:	f894 00ad 	ldrb.w	r0, [r4, #173]	; 0xad
		pinMode(_rs, OUTPUT);	
   15e7e:	2101      	movs	r1, #1
		_dcport = portOutputRegister(_rs);
   15e80:	4b4f      	ldr	r3, [pc, #316]	; (15fc0 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x314>)
   15e82:	0102      	lsls	r2, r0, #4
   15e84:	589a      	ldr	r2, [r3, r2]
   15e86:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		_dcpinmask = digitalPinToBitMask(_rs);
   15e8a:	68db      	ldr	r3, [r3, #12]
		_dcport = portOutputRegister(_rs);
   15e8c:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
		_dcpinmask = digitalPinToBitMask(_rs);
   15e90:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
		pinMode(_rs, OUTPUT);	
   15e94:	f005 fc08 	bl	1b6a8 <pinMode>
   15e98:	2300      	movs	r3, #0
		DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   15e9a:	e9d4 122f 	ldrd	r1, r2, [r4, #188]	; 0xbc
   15e9e:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
   15ea2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   15ea6:	4947      	ldr	r1, [pc, #284]	; (15fc4 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x318>)
		_tcr_dc_assert = LPSPI_TCR_PCS(dc_cs_index);
   15ea8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    	_tcr_dc_not_assert = LPSPI_TCR_PCS(3);
   15eac:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
  if ((_spi_tcr_current & TCR_MASK) != requested_tcr_state) {
   15eb0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   15eb4:	4a44      	ldr	r2, [pc, #272]	; (15fc8 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x31c>)
   15eb6:	401a      	ands	r2, r3
   15eb8:	428a      	cmp	r2, r1
   15eba:	d012      	beq.n	15ee2 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x236>
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   15ebc:	4a43      	ldr	r2, [pc, #268]	; (15fcc <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x320>)
   15ebe:	401a      	ands	r2, r3
      bool dc_state_change = (_spi_tcr_current & LPSPI_TCR_PCS(3)) != (requested_tcr_state & LPSPI_TCR_PCS(3));
   15ec0:	404b      	eors	r3, r1
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   15ec2:	4311      	orrs	r1, r2
      if (!dc_state_change || !_dcpinmask) {
   15ec4:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
      _spi_tcr_current = (_spi_tcr_current & ~TCR_MASK) | requested_tcr_state ;
   15ec8:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
      if (!dc_state_change || !_dcpinmask) {
   15ecc:	d003      	beq.n	15ed6 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x22a>
   15ece:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   15ed2:	2800      	cmp	r0, #0
   15ed4:	d149      	bne.n	15f6a <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x2be>
        while ((_pimxrt_spi->FSR & 0x1f) )  ;
   15ed6:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   15eda:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   15edc:	06db      	lsls	r3, r3, #27
   15ede:	d1fc      	bne.n	15eda <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x22e>
        _pimxrt_spi->TCR = _spi_tcr_current;  // update the TCR
   15ee0:	6611      	str	r1, [r2, #96]	; 0x60
	if (_rst != 0xff) {
   15ee2:	f894 00ae 	ldrb.w	r0, [r4, #174]	; 0xae
   15ee6:	28ff      	cmp	r0, #255	; 0xff
   15ee8:	d01a      	beq.n	15f20 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x274>
		pinMode(_rst, OUTPUT);
   15eea:	2101      	movs	r1, #1
   15eec:	f005 fbdc 	bl	1b6a8 <pinMode>
		digitalWrite(_rst, HIGH);
   15ef0:	2101      	movs	r1, #1
   15ef2:	f894 00ae 	ldrb.w	r0, [r4, #174]	; 0xae
   15ef6:	f005 fb9b 	bl	1b630 <digitalWrite>
		delay(100);
   15efa:	2064      	movs	r0, #100	; 0x64
   15efc:	f005 fb1a 	bl	1b534 <delay>
		digitalWrite(_rst, LOW);
   15f00:	2100      	movs	r1, #0
   15f02:	f894 00ae 	ldrb.w	r0, [r4, #174]	; 0xae
   15f06:	f005 fb93 	bl	1b630 <digitalWrite>
		delay(100);
   15f0a:	2064      	movs	r0, #100	; 0x64
   15f0c:	f005 fb12 	bl	1b534 <delay>
		digitalWrite(_rst, HIGH);
   15f10:	f894 00ae 	ldrb.w	r0, [r4, #174]	; 0xae
   15f14:	2101      	movs	r1, #1
   15f16:	f005 fb8b 	bl	1b630 <digitalWrite>
		delay(200);
   15f1a:	20c8      	movs	r0, #200	; 0xc8
   15f1c:	f005 fb0a 	bl	1b534 <delay>
	if(cmdList) commandList(cmdList);
   15f20:	b12d      	cbz	r5, 15f2e <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x282>
   15f22:	4629      	mov	r1, r5
   15f24:	4620      	mov	r0, r4
}
   15f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if(cmdList) commandList(cmdList);
   15f2a:	f7ff bdb1 	b.w	15a90 <ST7735_t3::commandList(unsigned char const*)>
}
   15f2e:	bd70      	pop	{r4, r5, r6, pc}
	 	uint8_t dc_cs_index = _pspi->setCS(_rs);
   15f30:	f894 10ad 	ldrb.w	r1, [r4, #173]	; 0xad
   15f34:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   15f38:	f7f7 f872 	bl	d020 <SPIClass::setCS(unsigned char)>
	 	dc_cs_index--;	// convert to 0 based
   15f3c:	1e43      	subs	r3, r0, #1
	 	_dcport = 0;
   15f3e:	2200      	movs	r2, #0
   15f40:	4923      	ldr	r1, [pc, #140]	; (15fd0 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x324>)
		_tcr_dc_assert = LPSPI_TCR_PCS(dc_cs_index);
   15f42:	061b      	lsls	r3, r3, #24
	 	_dcpinmask = 0;
   15f44:	e9c4 222f 	strd	r2, r2, [r4, #188]	; 0xbc
		_tcr_dc_assert = LPSPI_TCR_PCS(dc_cs_index);
   15f48:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
    	_tcr_dc_not_assert = LPSPI_TCR_PCS(3);
   15f4c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
   15f50:	e7aa      	b.n	15ea8 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x1fc>
	} else if (SPI2.pinIsMOSI(_sid) && SPI2.pinIsSCK(_sclk)) {
   15f52:	f894 10b0 	ldrb.w	r1, [r4, #176]	; 0xb0
   15f56:	4819      	ldr	r0, [pc, #100]	; (15fbc <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x310>)
   15f58:	f7f7 f854 	bl	d004 <SPIClass::pinIsSCK(unsigned char)>
   15f5c:	2800      	cmp	r0, #0
   15f5e:	f43f af45 	beq.w	15dec <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x140>
   15f62:	2202      	movs	r2, #2
   15f64:	4b1b      	ldr	r3, [pc, #108]	; (15fd4 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x328>)
   15f66:	4815      	ldr	r0, [pc, #84]	; (15fbc <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x310>)
   15f68:	e6c8      	b.n	15cfc <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x50>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15f6a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    while (_pending_rx_count) {
   15f6e:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
   15f72:	b14a      	cbz	r2, 15f88 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x2dc>
        if ((_pimxrt_spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
   15f74:	6f0b      	ldr	r3, [r1, #112]	; 0x70
   15f76:	079e      	lsls	r6, r3, #30
   15f78:	d4fb      	bmi.n	15f72 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x2c6>
            _pending_rx_count--; //decrement count of bytes still levt
   15f7a:	3a01      	subs	r2, #1
            tmp = _pimxrt_spi->RDR;  // Read any pending RX bytes in
   15f7c:	6f4b      	ldr	r3, [r1, #116]	; 0x74
            _pending_rx_count--; //decrement count of bytes still levt
   15f7e:	b2d2      	uxtb	r2, r2
   15f80:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
    while (_pending_rx_count) {
   15f84:	2a00      	cmp	r2, #0
   15f86:	d1f5      	bne.n	15f74 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x2c8>
    _pimxrt_spi->CR = LPSPI_CR_MEN | LPSPI_CR_RRF;       // Clear RX FIFO
   15f88:	f240 2301 	movw	r3, #513	; 0x201
   15f8c:	610b      	str	r3, [r1, #16]
        if (requested_tcr_state & LPSPI_TCR_PCS(3)) DIRECT_WRITE_HIGH(_dcport, _dcpinmask);
   15f8e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    *(base+33) = mask;
   15f92:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
        _pimxrt_spi->TCR = _spi_tcr_current & ~(LPSPI_TCR_PCS(3) | LPSPI_TCR_CONT); // go ahead and update TCR anyway?  
   15f96:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   15f9a:	f023 7348 	bic.w	r3, r3, #52428800	; 0x3200000
   15f9e:	660b      	str	r3, [r1, #96]	; 0x60
   15fa0:	e79f      	b.n	15ee2 <ST7735_t3::commonInit(unsigned char const*, unsigned char)+0x236>
   15fa2:	bf00      	nop
   15fa4:	20008ab0 	.word	0x20008ab0
   15fa8:	403a0000 	.word	0x403a0000
   15fac:	80000007 	.word	0x80000007
   15fb0:	00f42400 	.word	0x00f42400
   15fb4:	20008b00 	.word	0x20008b00
   15fb8:	4039c000 	.word	0x4039c000
   15fbc:	20008b50 	.word	0x20008b50
   15fc0:	20004be8 	.word	0x20004be8
   15fc4:	01000007 	.word	0x01000007
   15fc8:	0328001f 	.word	0x0328001f
   15fcc:	fcd7ffe0 	.word	0xfcd7ffe0
   15fd0:	03000007 	.word	0x03000007
   15fd4:	40394000 	.word	0x40394000

00015fd8 <ST7735_t3::drawPixel(short, short, unsigned short)>:
{
   15fd8:	b570      	push	{r4, r5, r6, lr}
   15fda:	4604      	mov	r4, r0
	x += _originx;
   15fdc:	8b00      	ldrh	r0, [r0, #24]
{
   15fde:	b082      	sub	sp, #8
	x += _originx;
   15fe0:	4401      	add	r1, r0
	y += _originy;
   15fe2:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
	x += _originx;
   15fe6:	b208      	sxth	r0, r1
   15fe8:	b28e      	uxth	r6, r1
	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   15fea:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   15fee:	4281      	cmp	r1, r0
   15ff0:	dc32      	bgt.n	16058 <ST7735_t3::drawPixel(short, short, unsigned short)+0x80>
   15ff2:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
   15ff6:	4281      	cmp	r1, r0
   15ff8:	dd2e      	ble.n	16058 <ST7735_t3::drawPixel(short, short, unsigned short)+0x80>
	y += _originy;
   15ffa:	4494      	add	ip, r2
	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   15ffc:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
	y += _originy;
   16000:	fa0f f28c 	sxth.w	r2, ip
   16004:	fa1f f58c 	uxth.w	r5, ip
	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   16008:	4291      	cmp	r1, r2
   1600a:	dc25      	bgt.n	16058 <ST7735_t3::drawPixel(short, short, unsigned short)+0x80>
   1600c:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
   16010:	4291      	cmp	r1, r2
   16012:	dd21      	ble.n	16058 <ST7735_t3::drawPixel(short, short, unsigned short)+0x80>
	if (_use_fbtft) {
   16014:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
   16018:	b301      	cbz	r1, 1605c <ST7735_t3::drawPixel(short, short, unsigned short)+0x84>
  }

  // could combine with above, but avoids the +-...
  void updateChangedRange(int16_t x, int16_t y) __attribute__((always_inline)) {
    #ifdef ENABLE_ST77XX_FRAMEBUFFER
    if (x < _changed_min_x)
   1601a:	f9b4 10e8 	ldrsh.w	r1, [r4, #232]	; 0xe8
		_pfbtft[y*_width + x] = color;
   1601e:	8ce5      	ldrh	r5, [r4, #38]	; 0x26
   16020:	4281      	cmp	r1, r0
      _changed_min_x = x;
    if (y < _changed_min_y)
   16022:	f9b4 10ec 	ldrsh.w	r1, [r4, #236]	; 0xec
      _changed_min_x = x;
   16026:	bfc8      	it	gt
   16028:	f8a4 00e8 	strhgt.w	r0, [r4, #232]	; 0xe8
    if (y < _changed_min_y)
   1602c:	4291      	cmp	r1, r2
      _changed_min_y = y;
    if (x > _changed_max_x)
   1602e:	f9b4 10ea 	ldrsh.w	r1, [r4, #234]	; 0xea
      _changed_min_y = y;
   16032:	bfc8      	it	gt
   16034:	f8a4 20ec 	strhgt.w	r2, [r4, #236]	; 0xec
    if (x > _changed_max_x)
   16038:	4281      	cmp	r1, r0
      _changed_max_x = x;
    if (y > _changed_max_y)
   1603a:	f9b4 10ee 	ldrsh.w	r1, [r4, #238]	; 0xee
      _changed_max_x = x;
   1603e:	bfb8      	it	lt
   16040:	f8a4 00ea 	strhlt.w	r0, [r4, #234]	; 0xea
    if (y > _changed_max_y)
   16044:	4291      	cmp	r1, r2
   16046:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
      _changed_max_y = y;
   1604a:	bfb8      	it	lt
   1604c:	f8a4 20ee 	strhlt.w	r2, [r4, #238]	; 0xee
   16050:	fb12 0205 	smlabb	r2, r2, r5, r0
   16054:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
}
   16058:	b002      	add	sp, #8
   1605a:	bd70      	pop	{r4, r5, r6, pc}
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   1605c:	7a62      	ldrb	r2, [r4, #9]
   1605e:	2a00      	cmp	r2, #0
   16060:	d166      	bne.n	16130 <ST7735_t3::drawPixel(short, short, unsigned short)+0x158>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   16062:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   16066:	2a00      	cmp	r2, #0
   16068:	d06c      	beq.n	16144 <ST7735_t3::drawPixel(short, short, unsigned short)+0x16c>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   1606a:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1606e:	b11a      	cbz	r2, 16078 <ST7735_t3::drawPixel(short, short, unsigned short)+0xa0>
   16070:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    *(base+34) = mask;
   16074:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
        writecommand(ST7735_CASET); // Column addr set
   16078:	4620      	mov	r0, r4
   1607a:	212a      	movs	r1, #42	; 0x2a
   1607c:	9301      	str	r3, [sp, #4]
   1607e:	f7ff f813 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   16082:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   16086:	4431      	add	r1, r6
   16088:	b289      	uxth	r1, r1
   1608a:	f7ff fb63 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   1608e:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   16092:	3201      	adds	r2, #1
   16094:	18b1      	adds	r1, r6, r2
   16096:	b289      	uxth	r1, r1
   16098:	f7ff fb5c 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   1609c:	212b      	movs	r1, #43	; 0x2b
   1609e:	f7ff f803 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   160a2:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   160a6:	4429      	add	r1, r5
   160a8:	b289      	uxth	r1, r1
   160aa:	f7ff fb53 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   160ae:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   160b2:	3201      	adds	r2, #1
   160b4:	442a      	add	r2, r5
   160b6:	b291      	uxth	r1, r2
   160b8:	f7ff fb4c 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		writecommand(ST7735_RAMWR);
   160bc:	212c      	movs	r1, #44	; 0x2c
   160be:	f7fe fff3 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		writedata16_last(color);
   160c2:	9b01      	ldr	r3, [sp, #4]
   160c4:	4619      	mov	r1, r3
   160c6:	f7ff fc15 	bl	158f4 <ST7735_t3::writedata16_last(unsigned short)>
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   160ca:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   160ce:	b11b      	cbz	r3, 160d8 <ST7735_t3::drawPixel(short, short, unsigned short)+0x100>
   160d0:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+33) = mask;
   160d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   160d8:	7a63      	ldrb	r3, [r4, #9]
   160da:	2b00      	cmp	r3, #0
   160dc:	d0bc      	beq.n	16058 <ST7735_t3::drawPixel(short, short, unsigned short)+0x80>
   160de:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
		if (interruptMasksUsed) {
   160e2:	7cd3      	ldrb	r3, [r2, #19]
   160e4:	2b00      	cmp	r3, #0
   160e6:	d0b7      	beq.n	16058 <ST7735_t3::drawPixel(short, short, unsigned short)+0x80>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   160e8:	07dd      	lsls	r5, r3, #31
   160ea:	d504      	bpl.n	160f6 <ST7735_t3::drawPixel(short, short, unsigned short)+0x11e>
   160ec:	6a90      	ldr	r0, [r2, #40]	; 0x28
   160ee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   160f2:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   160f6:	079c      	lsls	r4, r3, #30
   160f8:	d504      	bpl.n	16104 <ST7735_t3::drawPixel(short, short, unsigned short)+0x12c>
   160fa:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   160fc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16100:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   16104:	0758      	lsls	r0, r3, #29
   16106:	d504      	bpl.n	16112 <ST7735_t3::drawPixel(short, short, unsigned short)+0x13a>
   16108:	6b10      	ldr	r0, [r2, #48]	; 0x30
   1610a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1610e:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   16112:	0719      	lsls	r1, r3, #28
   16114:	d504      	bpl.n	16120 <ST7735_t3::drawPixel(short, short, unsigned short)+0x148>
   16116:	6b50      	ldr	r0, [r2, #52]	; 0x34
   16118:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1611c:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   16120:	06db      	lsls	r3, r3, #27
   16122:	d599      	bpl.n	16058 <ST7735_t3::drawPixel(short, short, unsigned short)+0x80>
   16124:	6b92      	ldr	r2, [r2, #56]	; 0x38
   16126:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1612a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1612e:	e793      	b.n	16058 <ST7735_t3::drawPixel(short, short, unsigned short)+0x80>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   16130:	f104 0284 	add.w	r2, r4, #132	; 0x84
   16134:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   16138:	9301      	str	r3, [sp, #4]
   1613a:	ca06      	ldmia	r2, {r1, r2}
   1613c:	f7f5 f8d6 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
   16140:	9b01      	ldr	r3, [sp, #4]
   16142:	e78e      	b.n	16062 <ST7735_t3::drawPixel(short, short, unsigned short)+0x8a>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   16144:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   16148:	6e12      	ldr	r2, [r2, #96]	; 0x60
   1614a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
   1614e:	e78c      	b.n	1606a <ST7735_t3::drawPixel(short, short, unsigned short)+0x92>

00016150 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)>:
{
   16150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16154:	4604      	mov	r4, r0
	x+=_originx;
   16156:	8b00      	ldrh	r0, [r0, #24]
{
   16158:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	x+=_originx;
   1615c:	4401      	add	r1, r0
	if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   1615e:	f9b4 701c 	ldrsh.w	r7, [r4, #28]
	y+=_originy;
   16162:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
	x+=_originx;
   16166:	fa0f fc81 	sxth.w	ip, r1
	if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   1616a:	4567      	cmp	r7, ip
   1616c:	dc50      	bgt.n	16210 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xc0>
   1616e:	b28e      	uxth	r6, r1
   16170:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
   16174:	4561      	cmp	r1, ip
   16176:	dd4b      	ble.n	16210 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xc0>
	y+=_originy;
   16178:	4402      	add	r2, r0
	if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   1617a:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
	y+=_originy;
   1617e:	b217      	sxth	r7, r2
   16180:	b290      	uxth	r0, r2
	if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16182:	42b9      	cmp	r1, r7
   16184:	dd44      	ble.n	16210 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xc0>
	if(y < _displayclipy1) { h = h - (_displayclipy1 - y); y = _displayclipy1;}
   16186:	f9b4 e01e 	ldrsh.w	lr, [r4, #30]
   1618a:	4698      	mov	r8, r3
   1618c:	45be      	cmp	lr, r7
   1618e:	dd05      	ble.n	1619c <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x4c>
   16190:	eba0 020e 	sub.w	r2, r0, lr
   16194:	4677      	mov	r7, lr
   16196:	441a      	add	r2, r3
   16198:	fa0f f882 	sxth.w	r8, r2
	if((y+h-1) >= _displayclipy2) h = _displayclipy2-y;
   1619c:	eb07 0208 	add.w	r2, r7, r8
   161a0:	428a      	cmp	r2, r1
   161a2:	dc37      	bgt.n	16214 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xc4>
	if(h<1) return;
   161a4:	f1b8 0f00 	cmp.w	r8, #0
   161a8:	dd32      	ble.n	16210 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xc0>
	if (_use_fbtft) {
   161aa:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   161ae:	b3aa      	cbz	r2, 1621c <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xcc>
    if (x < _changed_min_x)
   161b0:	f9b4 20e8 	ldrsh.w	r2, [r4, #232]	; 0xe8
    y += h - 1;
   161b4:	fa1f f388 	uxth.w	r3, r8
    if (x > _changed_max_x)
   161b8:	f9b4 10ea 	ldrsh.w	r1, [r4, #234]	; 0xea
    if (x < _changed_min_x)
   161bc:	4562      	cmp	r2, ip
    if (y < _changed_min_y)
   161be:	f9b4 20ec 	ldrsh.w	r2, [r4, #236]	; 0xec
      _changed_min_x = x;
   161c2:	bfc8      	it	gt
   161c4:	f8a4 c0e8 	strhgt.w	ip, [r4, #232]	; 0xe8
    if (y < _changed_min_y)
   161c8:	42ba      	cmp	r2, r7
    y += h - 1;
   161ca:	f107 32ff 	add.w	r2, r7, #4294967295	; 0xffffffff
      _changed_min_y = y;
   161ce:	bfc8      	it	gt
   161d0:	f8a4 70ec 	strhgt.w	r7, [r4, #236]	; 0xec
    if (x > _changed_max_x)
   161d4:	4561      	cmp	r1, ip
    y += h - 1;
   161d6:	441a      	add	r2, r3
    if (y > _changed_max_y)
   161d8:	f9b4 10ee 	ldrsh.w	r1, [r4, #238]	; 0xee
      _changed_max_x = x;
   161dc:	bfb8      	it	lt
   161de:	f8a4 c0ea 	strhlt.w	ip, [r4, #234]	; 0xea
		while (h--) {
   161e2:	3b01      	subs	r3, #1
    y += h - 1;
   161e4:	b212      	sxth	r2, r2
   161e6:	b21b      	sxth	r3, r3
    if (y > _changed_max_y)
   161e8:	4291      	cmp	r1, r2
		uint16_t * pfbPixel = &_pfbtft[ y*_width + x];
   161ea:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
      _changed_max_y = y;
   161ec:	bfb8      	it	lt
   161ee:	f8a4 20ee 	strhlt.w	r2, [r4, #238]	; 0xee
   161f2:	fb17 c101 	smlabb	r1, r7, r1, ip
   161f6:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   161fa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			*pfbPixel = color;
   161fe:	3b01      	subs	r3, #1
   16200:	8015      	strh	r5, [r2, #0]
			pfbPixel += _width;
   16202:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
   16206:	b21b      	sxth	r3, r3
   16208:	eb02 0241 	add.w	r2, r2, r1, lsl #1
		while (h--) {
   1620c:	1c5e      	adds	r6, r3, #1
   1620e:	d1f6      	bne.n	161fe <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xae>
}
   16210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((y+h-1) >= _displayclipy2) h = _displayclipy2-y;
   16214:	1bc9      	subs	r1, r1, r7
   16216:	fa0f f881 	sxth.w	r8, r1
   1621a:	e7c3      	b.n	161a4 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x54>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   1621c:	7a62      	ldrb	r2, [r4, #9]
   1621e:	2a00      	cmp	r2, #0
   16220:	d173      	bne.n	1630a <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x1ba>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   16222:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   16226:	2a00      	cmp	r2, #0
   16228:	d077      	beq.n	1631a <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x1ca>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   1622a:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1622e:	b11a      	cbz	r2, 16238 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xe8>
   16230:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    *(base+34) = mask;
   16234:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
        writecommand(ST7735_CASET); // Column addr set
   16238:	4620      	mov	r0, r4
   1623a:	212a      	movs	r1, #42	; 0x2a
   1623c:	f7fe ff34 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   16240:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
		setAddr(x, y, x, y+h-1);
   16244:	b2bf      	uxth	r7, r7
   16246:	4431      	add	r1, r6
   16248:	b289      	uxth	r1, r1
   1624a:	f7ff fa83 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   1624e:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   16252:	18b1      	adds	r1, r6, r2
   16254:	fa1f f688 	uxth.w	r6, r8
   16258:	b289      	uxth	r1, r1
   1625a:	f7ff fa7b 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   1625e:	212b      	movs	r1, #43	; 0x2b
   16260:	f7fe ff22 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   16264:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   16268:	4439      	add	r1, r7
   1626a:	b289      	uxth	r1, r1
   1626c:	f7ff fa72 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   16270:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   16274:	3a01      	subs	r2, #1
   16276:	4417      	add	r7, r2
   16278:	19f1      	adds	r1, r6, r7
   1627a:	b289      	uxth	r1, r1
   1627c:	f7ff fa6a 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		writecommand(ST7735_RAMWR);
   16280:	212c      	movs	r1, #44	; 0x2c
   16282:	f7fe ff11 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		while (h-- > 1) {
   16286:	f1b8 0f01 	cmp.w	r8, #1
   1628a:	d007      	beq.n	1629c <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x14c>
   1628c:	3e01      	subs	r6, #1
			writedata16(color);
   1628e:	4629      	mov	r1, r5
   16290:	4620      	mov	r0, r4
		while (h-- > 1) {
   16292:	b2b6      	uxth	r6, r6
			writedata16(color);
   16294:	f7ff fa5e 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		while (h-- > 1) {
   16298:	2e01      	cmp	r6, #1
   1629a:	d8f7      	bhi.n	1628c <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x13c>
		writedata16_last(color);
   1629c:	4629      	mov	r1, r5
   1629e:	4620      	mov	r0, r4
   162a0:	f7ff fb28 	bl	158f4 <ST7735_t3::writedata16_last(unsigned short)>
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   162a4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   162a8:	b11b      	cbz	r3, 162b2 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x162>
   162aa:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+33) = mask;
   162ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   162b2:	7a63      	ldrb	r3, [r4, #9]
   162b4:	2b00      	cmp	r3, #0
   162b6:	d0ab      	beq.n	16210 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xc0>
   162b8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
		if (interruptMasksUsed) {
   162bc:	7cd3      	ldrb	r3, [r2, #19]
   162be:	2b00      	cmp	r3, #0
   162c0:	d0a6      	beq.n	16210 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xc0>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   162c2:	07dd      	lsls	r5, r3, #31
   162c4:	d504      	bpl.n	162d0 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x180>
   162c6:	6a90      	ldr	r0, [r2, #40]	; 0x28
   162c8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   162cc:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   162d0:	079c      	lsls	r4, r3, #30
   162d2:	d504      	bpl.n	162de <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x18e>
   162d4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   162d6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   162da:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   162de:	0758      	lsls	r0, r3, #29
   162e0:	d504      	bpl.n	162ec <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x19c>
   162e2:	6b10      	ldr	r0, [r2, #48]	; 0x30
   162e4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   162e8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   162ec:	0719      	lsls	r1, r3, #28
   162ee:	d504      	bpl.n	162fa <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0x1aa>
   162f0:	6b50      	ldr	r0, [r2, #52]	; 0x34
   162f2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   162f6:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   162fa:	06db      	lsls	r3, r3, #27
   162fc:	d588      	bpl.n	16210 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xc0>
   162fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
   16300:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16304:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   16308:	e782      	b.n	16210 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xc0>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   1630a:	f104 0284 	add.w	r2, r4, #132	; 0x84
   1630e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   16312:	ca06      	ldmia	r2, {r1, r2}
   16314:	f7f4 ffea 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
   16318:	e783      	b.n	16222 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xd2>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   1631a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1631e:	6e12      	ldr	r2, [r2, #96]	; 0x60
   16320:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
   16324:	e781      	b.n	1622a <ST7735_t3::drawFastVLine(short, short, short, unsigned short)+0xda>
   16326:	bf00      	nop

00016328 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)>:
{
   16328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1632c:	4604      	mov	r4, r0
	y+=_originy;
   1632e:	8b40      	ldrh	r0, [r0, #26]
{
   16330:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	y+=_originy;
   16334:	4402      	add	r2, r0
	if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16336:	f9b4 701e 	ldrsh.w	r7, [r4, #30]
	x+=_originx;
   1633a:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	y+=_originy;
   1633e:	fa0f fc82 	sxth.w	ip, r2
	if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16342:	4567      	cmp	r7, ip
   16344:	dc4f      	bgt.n	163e6 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xbe>
	x+=_originx;
   16346:	4401      	add	r1, r0
   16348:	b296      	uxth	r6, r2
	if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   1634a:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
	x+=_originx;
   1634e:	b20f      	sxth	r7, r1
   16350:	b289      	uxth	r1, r1
	if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16352:	42ba      	cmp	r2, r7
   16354:	dd47      	ble.n	163e6 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xbe>
   16356:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
   1635a:	4560      	cmp	r0, ip
   1635c:	dd43      	ble.n	163e6 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xbe>
	if(x<_displayclipx1) { w = w - (_displayclipx1 - x); x = _displayclipx1; }
   1635e:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
   16362:	4698      	mov	r8, r3
   16364:	42b8      	cmp	r0, r7
   16366:	dd04      	ble.n	16372 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x4a>
   16368:	1a09      	subs	r1, r1, r0
   1636a:	4607      	mov	r7, r0
   1636c:	18cb      	adds	r3, r1, r3
   1636e:	fa0f f883 	sxth.w	r8, r3
	if((x+w-1) >= _displayclipx2)  w = _displayclipx2-x;
   16372:	eb07 0108 	add.w	r1, r7, r8
   16376:	4291      	cmp	r1, r2
   16378:	dc37      	bgt.n	163ea <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xc2>
	if (w<1) return;
   1637a:	f1b8 0f00 	cmp.w	r8, #0
   1637e:	dd32      	ble.n	163e6 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xbe>
	if (_use_fbtft) {
   16380:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   16384:	b3aa      	cbz	r2, 163f2 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xca>
    if (x < _changed_min_x)
   16386:	f9b4 20e8 	ldrsh.w	r2, [r4, #232]	; 0xe8
    x += w - 1;
   1638a:	b2b8      	uxth	r0, r7
    if (x > _changed_max_x)
   1638c:	f9b4 60ea 	ldrsh.w	r6, [r4, #234]	; 0xea
    if (x < _changed_min_x)
   16390:	42ba      	cmp	r2, r7
    if (y < _changed_min_y)
   16392:	f9b4 20ec 	ldrsh.w	r2, [r4, #236]	; 0xec
    x += w - 1;
   16396:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
      _changed_min_x = x;
   1639a:	bfc8      	it	gt
   1639c:	f8a4 70e8 	strhgt.w	r7, [r4, #232]	; 0xe8
    if (y < _changed_min_y)
   163a0:	4562      	cmp	r2, ip
    x += w - 1;
   163a2:	fa1f f288 	uxth.w	r2, r8
      _changed_min_y = y;
   163a6:	bfc8      	it	gt
   163a8:	f8a4 c0ec 	strhgt.w	ip, [r4, #236]	; 0xec
    x += w - 1;
   163ac:	4411      	add	r1, r2
		if ((x&1) || (w&1)) {
   163ae:	4310      	orrs	r0, r2
   163b0:	b209      	sxth	r1, r1
    if (x > _changed_max_x)
   163b2:	428e      	cmp	r6, r1
      _changed_max_x = x;
   163b4:	bfb8      	it	lt
   163b6:	f8a4 10ea 	strhlt.w	r1, [r4, #234]	; 0xea
    if (y > _changed_max_y)
   163ba:	f9b4 10ee 	ldrsh.w	r1, [r4, #238]	; 0xee
   163be:	4561      	cmp	r1, ip
      _changed_max_y = y;
   163c0:	bfb8      	it	lt
   163c2:	f8a4 c0ee 	strhlt.w	ip, [r4, #238]	; 0xee
   163c6:	07c6      	lsls	r6, r0, #31
   163c8:	f140 8098 	bpl.w	164fc <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x1d4>
			uint16_t * pfbPixel = &_pfbtft[ y*_width + x];
   163cc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   163ce:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   163d2:	fb1c 7101 	smlabb	r1, ip, r1, r7
   163d6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
			while (w--) {
   163da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
				*pfbPixel++ = color;
   163de:	f823 5b02 	strh.w	r5, [r3], #2
			while (w--) {
   163e2:	4293      	cmp	r3, r2
   163e4:	d1fb      	bne.n	163de <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xb6>
}
   163e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((x+w-1) >= _displayclipx2)  w = _displayclipx2-x;
   163ea:	1bd2      	subs	r2, r2, r7
   163ec:	fa0f f882 	sxth.w	r8, r2
   163f0:	e7c3      	b.n	1637a <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x52>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   163f2:	7a62      	ldrb	r2, [r4, #9]
   163f4:	2a00      	cmp	r2, #0
   163f6:	d173      	bne.n	164e0 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x1b8>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   163f8:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   163fc:	2a00      	cmp	r2, #0
   163fe:	d077      	beq.n	164f0 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x1c8>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   16400:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   16404:	b11a      	cbz	r2, 1640e <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xe6>
   16406:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    *(base+34) = mask;
   1640a:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
        writecommand(ST7735_CASET); // Column addr set
   1640e:	4620      	mov	r0, r4
   16410:	212a      	movs	r1, #42	; 0x2a
   16412:	f7fe fe49 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   16416:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
		setAddr(x, y, x+w-1, y);
   1641a:	b2bf      	uxth	r7, r7
   1641c:	4439      	add	r1, r7
   1641e:	b289      	uxth	r1, r1
   16420:	f7ff f998 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   16424:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   16428:	3a01      	subs	r2, #1
   1642a:	18b9      	adds	r1, r7, r2
   1642c:	fa1f f788 	uxth.w	r7, r8
   16430:	4439      	add	r1, r7
   16432:	b289      	uxth	r1, r1
   16434:	f7ff f98e 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   16438:	212b      	movs	r1, #43	; 0x2b
   1643a:	f7fe fe35 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   1643e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   16442:	4431      	add	r1, r6
   16444:	b289      	uxth	r1, r1
   16446:	f7ff f985 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   1644a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   1644e:	4432      	add	r2, r6
   16450:	b291      	uxth	r1, r2
   16452:	f7ff f97f 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		writecommand(ST7735_RAMWR);
   16456:	212c      	movs	r1, #44	; 0x2c
   16458:	f7fe fe26 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		while (w-- > 1) {
   1645c:	f1b8 0f01 	cmp.w	r8, #1
   16460:	d007      	beq.n	16472 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x14a>
   16462:	3f01      	subs	r7, #1
			writedata16(color);
   16464:	4629      	mov	r1, r5
   16466:	4620      	mov	r0, r4
		while (w-- > 1) {
   16468:	b2bf      	uxth	r7, r7
			writedata16(color);
   1646a:	f7ff f973 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		while (w-- > 1) {
   1646e:	2f01      	cmp	r7, #1
   16470:	d8f7      	bhi.n	16462 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x13a>
		writedata16_last(color);
   16472:	4629      	mov	r1, r5
   16474:	4620      	mov	r0, r4
   16476:	f7ff fa3d 	bl	158f4 <ST7735_t3::writedata16_last(unsigned short)>
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   1647a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1647e:	b11b      	cbz	r3, 16488 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x160>
   16480:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+33) = mask;
   16484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   16488:	7a63      	ldrb	r3, [r4, #9]
   1648a:	2b00      	cmp	r3, #0
   1648c:	d0ab      	beq.n	163e6 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xbe>
   1648e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
		if (interruptMasksUsed) {
   16492:	7cd3      	ldrb	r3, [r2, #19]
   16494:	2b00      	cmp	r3, #0
   16496:	d0a6      	beq.n	163e6 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xbe>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   16498:	07dd      	lsls	r5, r3, #31
   1649a:	d504      	bpl.n	164a6 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x17e>
   1649c:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1649e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   164a2:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   164a6:	079c      	lsls	r4, r3, #30
   164a8:	d504      	bpl.n	164b4 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x18c>
   164aa:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   164ac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   164b0:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   164b4:	0758      	lsls	r0, r3, #29
   164b6:	d504      	bpl.n	164c2 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x19a>
   164b8:	6b10      	ldr	r0, [r2, #48]	; 0x30
   164ba:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   164be:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   164c2:	0719      	lsls	r1, r3, #28
   164c4:	d504      	bpl.n	164d0 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x1a8>
   164c6:	6b50      	ldr	r0, [r2, #52]	; 0x34
   164c8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   164cc:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   164d0:	06db      	lsls	r3, r3, #27
   164d2:	d588      	bpl.n	163e6 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xbe>
   164d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
   164d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   164da:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   164de:	e782      	b.n	163e6 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xbe>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   164e0:	f104 0284 	add.w	r2, r4, #132	; 0x84
   164e4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   164e8:	ca06      	ldmia	r2, {r1, r2}
   164ea:	f7f4 feff 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
   164ee:	e783      	b.n	163f8 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xd0>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   164f0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   164f4:	6e12      	ldr	r2, [r2, #96]	; 0x60
   164f6:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
   164fa:	e781      	b.n	16400 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xd8>
			uint32_t * pfbPixel = (uint32_t*)((uint16_t*)&_pfbtft[ y*_width + x]);
   164fc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
			uint32_t color32 = (color << 16) | color;
   164fe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
			uint32_t * pfbPixel = (uint32_t*)((uint16_t*)&_pfbtft[ y*_width + x]);
   16502:	fb1c 7c02 	smlabb	ip, ip, r2, r7
   16506:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   1650a:	eb02 024c 	add.w	r2, r2, ip, lsl #1
				*pfbPixel++ = color32;
   1650e:	f1a8 0302 	sub.w	r3, r8, #2
   16512:	f842 5b04 	str.w	r5, [r2], #4
				w -= 2;
   16516:	fa0f f883 	sxth.w	r8, r3
			while (w) {
   1651a:	f1b8 0f00 	cmp.w	r8, #0
   1651e:	d1f6      	bne.n	1650e <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0x1e6>
   16520:	e761      	b.n	163e6 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)+0xbe>
   16522:	bf00      	nop

00016524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>:
{
   16524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16528:	4698      	mov	r8, r3
	x+=_originx;
   1652a:	8b03      	ldrh	r3, [r0, #24]
{
   1652c:	4604      	mov	r4, r0
	if((x >= _displayclipx2) || (y >= _displayclipy2)) return;
   1652e:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
	x+=_originx;
   16532:	4419      	add	r1, r3
{
   16534:	b083      	sub	sp, #12
	y+=_originy;
   16536:	f9b4 901a 	ldrsh.w	r9, [r4, #26]
	x+=_originx;
   1653a:	b20b      	sxth	r3, r1
{
   1653c:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
   16540:	f8bd 5034 	ldrh.w	r5, [sp, #52]	; 0x34
	if((x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16544:	4298      	cmp	r0, r3
   16546:	f340 8086 	ble.w	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
	y+=_originy;
   1654a:	4491      	add	r9, r2
   1654c:	b28f      	uxth	r7, r1
	if((x >= _displayclipx2) || (y >= _displayclipy2)) return;
   1654e:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
	y+=_originy;
   16552:	fa0f f289 	sxth.w	r2, r9
   16556:	fa1f f989 	uxth.w	r9, r9
	if((x >= _displayclipx2) || (y >= _displayclipy2)) return;
   1655a:	4291      	cmp	r1, r2
   1655c:	dd7b      	ble.n	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
	if (((x+w) <= _displayclipx1) || ((y+h) <= _displayclipy1)) return;
   1655e:	eb08 0e03 	add.w	lr, r8, r3
   16562:	f9b4 c01c 	ldrsh.w	ip, [r4, #28]
   16566:	9300      	str	r3, [sp, #0]
   16568:	45e6      	cmp	lr, ip
   1656a:	dd74      	ble.n	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
   1656c:	eb06 0b02 	add.w	fp, r6, r2
   16570:	f9b4 a01e 	ldrsh.w	sl, [r4, #30]
   16574:	9201      	str	r2, [sp, #4]
   16576:	45d3      	cmp	fp, sl
   16578:	dd6d      	ble.n	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
	if(x < _displayclipx1) {	w -= (_displayclipx1-x); x = _displayclipx1; 	}
   1657a:	459c      	cmp	ip, r3
   1657c:	dd0c      	ble.n	16598 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x74>
   1657e:	fa1f f38c 	uxth.w	r3, ip
   16582:	f8cd c000 	str.w	ip, [sp]
   16586:	eba7 0e03 	sub.w	lr, r7, r3
   1658a:	461f      	mov	r7, r3
   1658c:	4663      	mov	r3, ip
   1658e:	44c6      	add	lr, r8
   16590:	fa0f f88e 	sxth.w	r8, lr
	if((x + w - 1) >= _displayclipx2)  w = _displayclipx2  - x;
   16594:	eb08 0e0c 	add.w	lr, r8, ip
	if(y < _displayclipy1) {	h -= (_displayclipy1 - y); y = _displayclipy1; 	}
   16598:	4592      	cmp	sl, r2
   1659a:	dd0b      	ble.n	165b4 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x90>
   1659c:	fa1f fc8a 	uxth.w	ip, sl
   165a0:	f8cd a004 	str.w	sl, [sp, #4]
   165a4:	eba9 020c 	sub.w	r2, r9, ip
   165a8:	46e1      	mov	r9, ip
   165aa:	4432      	add	r2, r6
   165ac:	b216      	sxth	r6, r2
   165ae:	4652      	mov	r2, sl
	if((y + h - 1) >= _displayclipy2) h = _displayclipy2 - y;
   165b0:	eb06 0b0a 	add.w	fp, r6, sl
	if((x + w - 1) >= _displayclipx2)  w = _displayclipx2  - x;
   165b4:	4570      	cmp	r0, lr
   165b6:	db57      	blt.n	16668 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x144>
    x += w - 1;
   165b8:	fa1f fa88 	uxth.w	sl, r8
	if((y + h - 1) >= _displayclipy2) h = _displayclipy2 - y;
   165bc:	4559      	cmp	r1, fp
   165be:	db4d      	blt.n	1665c <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x138>
    y += h - 1;
   165c0:	fa1f fb86 	uxth.w	fp, r6
	if (_use_fbtft) {
   165c4:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
   165c8:	2900      	cmp	r1, #0
   165ca:	d053      	beq.n	16674 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x150>
    if (x < _changed_min_x)
   165cc:	f9b4 10e8 	ldrsh.w	r1, [r4, #232]	; 0xe8
   165d0:	4299      	cmp	r1, r3
    if (x > _changed_max_x)
   165d2:	f9b4 10ea 	ldrsh.w	r1, [r4, #234]	; 0xea
      _changed_min_x = x;
   165d6:	bfc8      	it	gt
   165d8:	f8a4 30e8 	strhgt.w	r3, [r4, #232]	; 0xe8
    if (y < _changed_min_y)
   165dc:	f9b4 30ec 	ldrsh.w	r3, [r4, #236]	; 0xec
   165e0:	4293      	cmp	r3, r2
    y += h - 1;
   165e2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
      _changed_min_y = y;
   165e6:	bfc8      	it	gt
   165e8:	f8a4 20ec 	strhgt.w	r2, [r4, #236]	; 0xec
    x += w - 1;
   165ec:	1e7a      	subs	r2, r7, #1
    y += h - 1;
   165ee:	445b      	add	r3, fp
    x += w - 1;
   165f0:	4452      	add	r2, sl
		if ((x&1) || (w&1)) {
   165f2:	ea47 0a0a 	orr.w	sl, r7, sl
    y += h - 1;
   165f6:	b21b      	sxth	r3, r3
    x += w - 1;
   165f8:	b212      	sxth	r2, r2
    if (x > _changed_max_x)
   165fa:	4291      	cmp	r1, r2
      _changed_max_x = x;
   165fc:	bfb8      	it	lt
   165fe:	f8a4 20ea 	strhlt.w	r2, [r4, #234]	; 0xea
    if (y > _changed_max_y)
   16602:	f9b4 20ee 	ldrsh.w	r2, [r4, #238]	; 0xee
   16606:	429a      	cmp	r2, r3
      _changed_max_y = y;
   16608:	bfb8      	it	lt
   1660a:	f8a4 30ee 	strhlt.w	r3, [r4, #238]	; 0xee
   1660e:	f01a 0f01 	tst.w	sl, #1
   16612:	f000 80c0 	beq.w	16796 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x272>
			uint16_t * pfbPixel_row = &_pfbtft[ y*_width + x];
   16616:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
			for (;h>0; h--) {
   1661a:	2e00      	cmp	r6, #0
			uint16_t * pfbPixel_row = &_pfbtft[ y*_width + x];
   1661c:	e9dd 2100 	ldrd	r2, r1, [sp]
   16620:	fb01 2203 	mla	r2, r1, r3, r2
   16624:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   16628:	eb01 0142 	add.w	r1, r1, r2, lsl #1
			for (;h>0; h--) {
   1662c:	dd13      	ble.n	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
   1662e:	ea4f 0048 	mov.w	r0, r8, lsl #1
				for (int i = 0 ;i < w; i++) {
   16632:	f1b8 0f00 	cmp.w	r8, #0
   16636:	dd07      	ble.n	16648 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x124>
   16638:	180a      	adds	r2, r1, r0
   1663a:	460b      	mov	r3, r1
					*pfbPixel++ = color;
   1663c:	f823 5b02 	strh.w	r5, [r3], #2
				for (int i = 0 ;i < w; i++) {
   16640:	4293      	cmp	r3, r2
   16642:	d1fb      	bne.n	1663c <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x118>
   16644:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
				pfbPixel_row += _width;
   16648:	1e72      	subs	r2, r6, #1
   1664a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
			for (;h>0; h--) {
   1664e:	b297      	uxth	r7, r2
   16650:	b216      	sxth	r6, r2
   16652:	2f00      	cmp	r7, #0
   16654:	d1ed      	bne.n	16632 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x10e>
}
   16656:	b003      	add	sp, #12
   16658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if((y + h - 1) >= _displayclipy2) h = _displayclipy2 - y;
   1665c:	eba1 0109 	sub.w	r1, r1, r9
   16660:	fa1f fb81 	uxth.w	fp, r1
   16664:	b20e      	sxth	r6, r1
   16666:	e7ad      	b.n	165c4 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0xa0>
	if((x + w - 1) >= _displayclipx2)  w = _displayclipx2  - x;
   16668:	1bc0      	subs	r0, r0, r7
   1666a:	fa1f fa80 	uxth.w	sl, r0
   1666e:	fa0f f880 	sxth.w	r8, r0
   16672:	e7a3      	b.n	165bc <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x98>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   16674:	7a63      	ldrb	r3, [r4, #9]
   16676:	2b00      	cmp	r3, #0
   16678:	d17e      	bne.n	16778 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x254>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   1667a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   1667e:	2b00      	cmp	r3, #0
   16680:	f000 8083 	beq.w	1678a <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x266>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   16684:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   16688:	b11b      	cbz	r3, 16692 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x16e>
   1668a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+34) = mask;
   1668e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        writecommand(ST7735_CASET); // Column addr set
   16692:	4620      	mov	r0, r4
   16694:	212a      	movs	r1, #42	; 0x2a
   16696:	f7fe fd07 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   1669a:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   1669e:	4439      	add	r1, r7
   166a0:	b289      	uxth	r1, r1
   166a2:	f7ff f857 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   166a6:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   166aa:	3b01      	subs	r3, #1
   166ac:	441f      	add	r7, r3
   166ae:	eb0a 0107 	add.w	r1, sl, r7
   166b2:	b289      	uxth	r1, r1
   166b4:	f7ff f84e 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   166b8:	212b      	movs	r1, #43	; 0x2b
   166ba:	f7fe fcf5 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   166be:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   166c2:	4449      	add	r1, r9
   166c4:	b289      	uxth	r1, r1
   166c6:	f7ff f845 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   166ca:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   166ce:	3b01      	subs	r3, #1
   166d0:	4499      	add	r9, r3
   166d2:	eb0b 0109 	add.w	r1, fp, r9
   166d6:	b289      	uxth	r1, r1
   166d8:	f7ff f83c 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		writecommand(ST7735_RAMWR);
   166dc:	212c      	movs	r1, #44	; 0x2c
   166de:	f7fe fce3 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		for(y=h; y>0; y--) {
   166e2:	2e00      	cmp	r6, #0
   166e4:	dd14      	ble.n	16710 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x1ec>
			for(x=w; x>1; x--) {
   166e6:	f1b8 0f01 	cmp.w	r8, #1
   166ea:	dd08      	ble.n	166fe <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x1da>
   166ec:	4647      	mov	r7, r8
				writedata16(color);
   166ee:	4629      	mov	r1, r5
   166f0:	f7ff f830 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
			for(x=w; x>1; x--) {
   166f4:	1e7b      	subs	r3, r7, #1
   166f6:	b29a      	uxth	r2, r3
   166f8:	b21f      	sxth	r7, r3
   166fa:	2a01      	cmp	r2, #1
   166fc:	d1f7      	bne.n	166ee <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x1ca>
			writedata16_last(color);		
   166fe:	4629      	mov	r1, r5
   16700:	f7ff f8f8 	bl	158f4 <ST7735_t3::writedata16_last(unsigned short)>
		for(y=h; y>0; y--) {
   16704:	1e73      	subs	r3, r6, #1
   16706:	b29a      	uxth	r2, r3
   16708:	b21e      	sxth	r6, r3
   1670a:	2a00      	cmp	r2, #0
   1670c:	d1eb      	bne.n	166e6 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x1c2>
   1670e:	4604      	mov	r4, r0
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   16710:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   16714:	b11b      	cbz	r3, 1671e <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x1fa>
   16716:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+33) = mask;
   1671a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   1671e:	7a63      	ldrb	r3, [r4, #9]
   16720:	2b00      	cmp	r3, #0
   16722:	d098      	beq.n	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
   16724:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		if (interruptMasksUsed) {
   16728:	7cda      	ldrb	r2, [r3, #19]
   1672a:	2a00      	cmp	r2, #0
   1672c:	d093      	beq.n	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   1672e:	07d5      	lsls	r5, r2, #31
   16730:	d504      	bpl.n	1673c <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x218>
   16732:	6a98      	ldr	r0, [r3, #40]	; 0x28
   16734:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16738:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   1673c:	0794      	lsls	r4, r2, #30
   1673e:	d504      	bpl.n	1674a <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x226>
   16740:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   16742:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16746:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   1674a:	0750      	lsls	r0, r2, #29
   1674c:	d504      	bpl.n	16758 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x234>
   1674e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   16750:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16754:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   16758:	0711      	lsls	r1, r2, #28
   1675a:	d504      	bpl.n	16766 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x242>
   1675c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1675e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16762:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   16766:	06d2      	lsls	r2, r2, #27
   16768:	f57f af75 	bpl.w	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
   1676c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1676e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16772:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   16776:	e76e      	b.n	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   16778:	f104 0384 	add.w	r3, r4, #132	; 0x84
   1677c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   16780:	e893 0006 	ldmia.w	r3, {r1, r2}
   16784:	f7f4 fdb2 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
   16788:	e777      	b.n	1667a <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x156>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   1678a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1678e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   16790:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   16794:	e776      	b.n	16684 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x160>
			uint32_t * pfbPixel_row = (uint32_t *)((uint16_t*)&_pfbtft[ y*_width + x]);
   16796:	e9dd 3100 	ldrd	r3, r1, [sp]
   1679a:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
			w = w/2;	// only iterate half the times
   1679e:	f1b8 0f00 	cmp.w	r8, #0
			uint32_t color32 = (color << 16) | color;
   167a2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
			uint32_t * pfbPixel_row = (uint32_t *)((uint16_t*)&_pfbtft[ y*_width + x]);
   167a6:	fb01 3302 	mla	r3, r1, r2, r3
   167aa:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   167ae:	eb01 0143 	add.w	r1, r1, r3, lsl #1
			w = w/2;	// only iterate half the times
   167b2:	4643      	mov	r3, r8
   167b4:	bfb8      	it	lt
   167b6:	f108 0301 	addlt.w	r3, r8, #1
			for (;h>0; h--) {
   167ba:	2e00      	cmp	r6, #0
			w = w/2;	// only iterate half the times
   167bc:	f343 034f 	sbfx	r3, r3, #1, #16
			for (;h>0; h--) {
   167c0:	f77f af49 	ble.w	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
				pfbPixel_row += (_width/2);
   167c4:	2a00      	cmp	r2, #0
   167c6:	bfb8      	it	lt
   167c8:	3201      	addlt	r2, #1
   167ca:	1050      	asrs	r0, r2, #1
   167cc:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   167d0:	0080      	lsls	r0, r0, #2
				for (int i = 0 ;i < w; i++) {
   167d2:	f1b8 0f01 	cmp.w	r8, #1
   167d6:	dd04      	ble.n	167e2 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x2be>
   167d8:	460b      	mov	r3, r1
					*pfbPixel++ = color32;
   167da:	f843 5b04 	str.w	r5, [r3], #4
				for (int i = 0 ;i < w; i++) {
   167de:	4293      	cmp	r3, r2
   167e0:	d1fb      	bne.n	167da <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x2b6>
				pfbPixel_row += (_width/2);
   167e2:	1e73      	subs	r3, r6, #1
   167e4:	4401      	add	r1, r0
			for (;h>0; h--) {
   167e6:	4402      	add	r2, r0
   167e8:	b29c      	uxth	r4, r3
   167ea:	b21e      	sxth	r6, r3
   167ec:	2c00      	cmp	r4, #0
   167ee:	d1f0      	bne.n	167d2 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x2ae>
   167f0:	e731      	b.n	16656 <ST7735_t3::fillRect(short, short, short, short, unsigned short)+0x132>
   167f2:	bf00      	nop

000167f4 <ST7735_t3::fillScreen(unsigned short)>:
{
   167f4:	b510      	push	{r4, lr}
	fillRect(0, 0,  _width, _height, color);
   167f6:	2200      	movs	r2, #0
{
   167f8:	b082      	sub	sp, #8
	fillRect(0, 0,  _width, _height, color);
   167fa:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	; 0x28
   167fe:	9101      	str	r1, [sp, #4]
   16800:	4611      	mov	r1, r2
   16802:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
   16806:	9400      	str	r4, [sp, #0]
   16808:	f7ff fe8c 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
}
   1680c:	b002      	add	sp, #8
   1680e:	bd10      	pop	{r4, pc}

00016810 <ST7735_t3::invertDisplay(bool)>:
{
   16810:	b538      	push	{r3, r4, r5, lr}
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   16812:	7a43      	ldrb	r3, [r0, #9]
   16814:	4604      	mov	r4, r0
   16816:	460d      	mov	r5, r1
   16818:	2b00      	cmp	r3, #0
   1681a:	d143      	bne.n	168a4 <ST7735_t3::invertDisplay(bool)+0x94>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   1681c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   16820:	2b00      	cmp	r3, #0
   16822:	d04b      	beq.n	168bc <ST7735_t3::invertDisplay(bool)+0xac>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   16824:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   16828:	b11b      	cbz	r3, 16832 <ST7735_t3::invertDisplay(bool)+0x22>
   1682a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+34) = mask;
   1682e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	writecommand_last(i ? ST7735_INVON : ST7735_INVOFF);
   16832:	f105 0120 	add.w	r1, r5, #32
   16836:	4620      	mov	r0, r4
   16838:	b2c9      	uxtb	r1, r1
   1683a:	f7fe fcc9 	bl	151d0 <ST7735_t3::writecommand_last(unsigned char)>
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   1683e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   16842:	b11b      	cbz	r3, 1684c <ST7735_t3::invertDisplay(bool)+0x3c>
   16844:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+33) = mask;
   16848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   1684c:	7a63      	ldrb	r3, [r4, #9]
   1684e:	b903      	cbnz	r3, 16852 <ST7735_t3::invertDisplay(bool)+0x42>
}
   16850:	bd38      	pop	{r3, r4, r5, pc}
   16852:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
		if (interruptMasksUsed) {
   16856:	7cd3      	ldrb	r3, [r2, #19]
   16858:	2b00      	cmp	r3, #0
   1685a:	d0f9      	beq.n	16850 <ST7735_t3::invertDisplay(bool)+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   1685c:	07dd      	lsls	r5, r3, #31
   1685e:	d504      	bpl.n	1686a <ST7735_t3::invertDisplay(bool)+0x5a>
   16860:	6a90      	ldr	r0, [r2, #40]	; 0x28
   16862:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16866:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   1686a:	079c      	lsls	r4, r3, #30
   1686c:	d504      	bpl.n	16878 <ST7735_t3::invertDisplay(bool)+0x68>
   1686e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   16870:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16874:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   16878:	0758      	lsls	r0, r3, #29
   1687a:	d504      	bpl.n	16886 <ST7735_t3::invertDisplay(bool)+0x76>
   1687c:	6b10      	ldr	r0, [r2, #48]	; 0x30
   1687e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16882:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   16886:	0719      	lsls	r1, r3, #28
   16888:	d504      	bpl.n	16894 <ST7735_t3::invertDisplay(bool)+0x84>
   1688a:	6b50      	ldr	r0, [r2, #52]	; 0x34
   1688c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16890:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   16894:	06db      	lsls	r3, r3, #27
   16896:	d5db      	bpl.n	16850 <ST7735_t3::invertDisplay(bool)+0x40>
   16898:	6b92      	ldr	r2, [r2, #56]	; 0x38
   1689a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1689e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   168a2:	bd38      	pop	{r3, r4, r5, pc}
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   168a4:	f100 0384 	add.w	r3, r0, #132	; 0x84
   168a8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   168ac:	e893 0006 	ldmia.w	r3, {r1, r2}
   168b0:	f7f4 fd1c 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   168b4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   168b8:	2b00      	cmp	r3, #0
   168ba:	d1b3      	bne.n	16824 <ST7735_t3::invertDisplay(bool)+0x14>
   168bc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   168c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   168c2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   168c6:	e7ad      	b.n	16824 <ST7735_t3::invertDisplay(bool)+0x14>

000168c8 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)>:
{
   168c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168cc:	461f      	mov	r7, r3
	if (x == CENTER)
   168ce:	f242 730e 	movw	r3, #9998	; 0x270e
{
   168d2:	b087      	sub	sp, #28
   168d4:	4605      	mov	r5, r0
	if (x == CENTER)
   168d6:	4299      	cmp	r1, r3
{
   168d8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
   168dc:	9e11      	ldr	r6, [sp, #68]	; 0x44
	if (x == CENTER)
   168de:	d106      	bne.n	168ee <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x26>
		x = (_width - w) / 2;
   168e0:	f9b0 1026 	ldrsh.w	r1, [r0, #38]	; 0x26
   168e4:	1bc9      	subs	r1, r1, r7
   168e6:	bf48      	it	mi
   168e8:	3101      	addmi	r1, #1
   168ea:	f341 014f 	sbfx	r1, r1, #1, #16
	if (y == CENTER)
   168ee:	f242 730e 	movw	r3, #9998	; 0x270e
   168f2:	429a      	cmp	r2, r3
   168f4:	d107      	bne.n	16906 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x3e>
		y = (_height - h) / 2;
   168f6:	f9b5 2028 	ldrsh.w	r2, [r5, #40]	; 0x28
   168fa:	ebb2 0208 	subs.w	r2, r2, r8
   168fe:	bf48      	it	mi
   16900:	3201      	addmi	r2, #1
   16902:	f342 024f 	sbfx	r2, r2, #1, #16
	x+=_originx;
   16906:	8b2b      	ldrh	r3, [r5, #24]
	if((x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16908:	f9b5 0020 	ldrsh.w	r0, [r5, #32]
	x+=_originx;
   1690c:	4419      	add	r1, r3
	y+=_originy;
   1690e:	f9b5 401a 	ldrsh.w	r4, [r5, #26]
	x+=_originx;
   16912:	fa0f f981 	sxth.w	r9, r1
   16916:	b28b      	uxth	r3, r1
	if((x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16918:	4548      	cmp	r0, r9
   1691a:	f340 80c4 	ble.w	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
	y+=_originy;
   1691e:	4414      	add	r4, r2
	if((x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16920:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
	y+=_originy;
   16924:	b224      	sxth	r4, r4
	if((x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16926:	42a2      	cmp	r2, r4
   16928:	f340 80bd 	ble.w	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
	if (((x+w) <= _displayclipx1) || ((y+h) <= _displayclipy1)) return;
   1692c:	eb09 0c07 	add.w	ip, r9, r7
   16930:	f9b5 101c 	ldrsh.w	r1, [r5, #28]
   16934:	46ce      	mov	lr, r9
   16936:	458c      	cmp	ip, r1
   16938:	f340 80b5 	ble.w	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
   1693c:	eb08 0b04 	add.w	fp, r8, r4
   16940:	f9b5 a01e 	ldrsh.w	sl, [r5, #30]
   16944:	9401      	str	r4, [sp, #4]
   16946:	45d3      	cmp	fp, sl
   16948:	f340 80ad 	ble.w	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
 	if(y < _displayclipy1) {
   1694c:	45a2      	cmp	sl, r4
   1694e:	dd0e      	ble.n	1696e <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0xa6>
 		int dy = (_displayclipy1 - y);
   16950:	ebaa 0404 	sub.w	r4, sl, r4
 		h -= dy; 
   16954:	f8cd a004 	str.w	sl, [sp, #4]
   16958:	eba8 0804 	sub.w	r8, r8, r4
 		pcolors += (dy*w); // Advance color array to 
   1695c:	fb07 f404 	mul.w	r4, r7, r4
 		h -= dy; 
   16960:	fa0f f888 	sxth.w	r8, r8
 		pcolors += (dy*w); // Advance color array to 
   16964:	eb06 0644 	add.w	r6, r6, r4, lsl #1
 		y = _displayclipy1; 	
   16968:	4654      	mov	r4, sl
	if((y + h - 1) >= _displayclipy2) h = _displayclipy2 - y;
   1696a:	eb08 0b0a 	add.w	fp, r8, sl
   1696e:	455a      	cmp	r2, fp
   16970:	da02      	bge.n	16978 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0xb0>
   16972:	1b12      	subs	r2, r2, r4
   16974:	fa0f f882 	sxth.w	r8, r2
	if(x < _displayclipx1) {
   16978:	4549      	cmp	r1, r9
   1697a:	f340 809a 	ble.w	16ab2 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1ea>
		x_clip_left = _displayclipx1-x; 
   1697e:	b28a      	uxth	r2, r1
   16980:	468e      	mov	lr, r1
   16982:	4689      	mov	r9, r1
		w -= x_clip_left; 
   16984:	1abf      	subs	r7, r7, r2
		x_clip_left = _displayclipx1-x; 
   16986:	1ad2      	subs	r2, r2, r3
		w -= x_clip_left; 
   16988:	443b      	add	r3, r7
		x_clip_left = _displayclipx1-x; 
   1698a:	fa1f fb82 	uxth.w	fp, r2
		w -= x_clip_left; 
   1698e:	b21f      	sxth	r7, r3
	if((x + w - 1) >= _displayclipx2) {
   16990:	eb07 0c01 	add.w	ip, r7, r1
   16994:	4584      	cmp	ip, r0
   16996:	f340 8089 	ble.w	16aac <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1e4>
		x_clip_right = w;
   1699a:	fa1f fa87 	uxth.w	sl, r7
		w = _displayclipx2  - x;
   1699e:	fa1f f389 	uxth.w	r3, r9
   169a2:	b280      	uxth	r0, r0
   169a4:	449a      	add	sl, r3
   169a6:	1ac3      	subs	r3, r0, r3
		x_clip_right -= w; 
   169a8:	ebaa 0a00 	sub.w	sl, sl, r0
		w = _displayclipx2  - x;
   169ac:	b21f      	sxth	r7, r3
		x_clip_right -= w; 
   169ae:	fa1f fa8a 	uxth.w	sl, sl
	if (_use_fbtft) {
   169b2:	f895 30dc 	ldrb.w	r3, [r5, #220]	; 0xdc
   169b6:	2b00      	cmp	r3, #0
   169b8:	d07e      	beq.n	16ab8 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1f0>
		    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
   169ba:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
    for (; h > 0; h--) {
   169be:	f1b8 0f00 	cmp.w	r8, #0
		    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
   169c2:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
   169c6:	fb04 ee03 	mla	lr, r4, r3, lr
    int16_t y_changed_min = _height;
   169ca:	f9b5 c028 	ldrsh.w	ip, [r5, #40]	; 0x28
		    uint16_t *pfbPixel_row = &_pfbtft[y * _width + x];
   169ce:	eb02 024e 	add.w	r2, r2, lr, lsl #1
   169d2:	469e      	mov	lr, r3
    for (; h > 0; h--) {
   169d4:	dd67      	ble.n	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
      pcolors += x_clip_left;
   169d6:	ea4f 014b 	mov.w	r1, fp, lsl #1
   169da:	44a0      	add	r8, r4
    int16_t y_changed_max = -1;
   169dc:	f8cd 9014 	str.w	r9, [sp, #20]
   169e0:	4693      	mov	fp, r2
      pcolors += x_clip_left;
   169e2:	9101      	str	r1, [sp, #4]
      pcolors += x_clip_right;
   169e4:	ea4f 014a 	mov.w	r1, sl, lsl #1
    int16_t i_changed_max = -1;
   169e8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    int16_t y_changed_max = -1;
   169ec:	46b1      	mov	r9, r6
      pcolors += x_clip_right;
   169ee:	9102      	str	r1, [sp, #8]
   169f0:	fa0f f188 	sxth.w	r1, r8
    int16_t y_changed_max = -1;
   169f4:	46d0      	mov	r8, sl
   169f6:	9103      	str	r1, [sp, #12]
   169f8:	0079      	lsls	r1, r7, #1
   169fa:	9104      	str	r1, [sp, #16]
      pcolors += x_clip_left;
   169fc:	9a01      	ldr	r2, [sp, #4]
      for (int i = 0; i < w; i++) {
   169fe:	2f00      	cmp	r7, #0
      pcolors += x_clip_left;
   16a00:	4491      	add	r9, r2
      for (int i = 0; i < w; i++) {
   16a02:	dd20      	ble.n	16a46 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x17e>
   16a04:	f1ab 0202 	sub.w	r2, fp, #2
   16a08:	f1a9 0002 	sub.w	r0, r9, #2
   16a0c:	2300      	movs	r3, #0
        if (*pfbPixel != *pcolors) {
   16a0e:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   16a12:	f832 6f02 	ldrh.w	r6, [r2, #2]!
   16a16:	428e      	cmp	r6, r1
   16a18:	d00e      	beq.n	16a38 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x170>
          if (i > i_changed_max) i_changed_max = i;
   16a1a:	45a4      	cmp	ip, r4
          *pfbPixel = *pcolors;
   16a1c:	8011      	strh	r1, [r2, #0]
          if (y < y_changed_min) y_changed_min = y;
   16a1e:	bfa8      	it	ge
   16a20:	46a4      	movge	ip, r4
          if (y > y_changed_max) y_changed_max = y;
   16a22:	45a0      	cmp	r8, r4
   16a24:	bfb8      	it	lt
   16a26:	46a0      	movlt	r8, r4
          if (i < i_changed_min) i_changed_min = i;
   16a28:	459e      	cmp	lr, r3
   16a2a:	bfc8      	it	gt
   16a2c:	fa0f fe83 	sxthgt.w	lr, r3
          if (i > i_changed_max) i_changed_max = i;
   16a30:	459a      	cmp	sl, r3
   16a32:	bfb8      	it	lt
   16a34:	fa0f fa83 	sxthlt.w	sl, r3
      for (int i = 0; i < w; i++) {
   16a38:	3301      	adds	r3, #1
   16a3a:	429f      	cmp	r7, r3
   16a3c:	d1e7      	bne.n	16a0e <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x146>
        pcolors++;
   16a3e:	9b04      	ldr	r3, [sp, #16]
   16a40:	4499      	add	r9, r3
   16a42:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
      pcolors += x_clip_right;
   16a46:	9a02      	ldr	r2, [sp, #8]
   16a48:	3401      	adds	r4, #1
      pfbPixel_row += _width;
   16a4a:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
      pcolors += x_clip_right;
   16a4e:	4491      	add	r9, r2
      y++;
   16a50:	b224      	sxth	r4, r4
    for (; h > 0; h--) {
   16a52:	9a03      	ldr	r2, [sp, #12]
   16a54:	4294      	cmp	r4, r2
   16a56:	d1d1      	bne.n	169fc <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x134>
    if (y_changed_max != -1) {
   16a58:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   16a5c:	f8dd 9014 	ldr.w	r9, [sp, #20]
   16a60:	d021      	beq.n	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
      updateChangedRange(x + i_changed_min , y_changed_min, 
   16a62:	fa1f f989 	uxth.w	r9, r9
    if (x < _changed_min_x)
   16a66:	f9b5 20e8 	ldrsh.w	r2, [r5, #232]	; 0xe8
        (i_changed_max - i_changed_min) + 1, (y_changed_max - y_changed_min) + 1);
   16a6a:	fa1f fa8a 	uxth.w	sl, sl
      updateChangedRange(x + i_changed_min , y_changed_min, 
   16a6e:	eb09 030e 	add.w	r3, r9, lr
    x += w - 1;
   16a72:	44d1      	add	r9, sl
   16a74:	b21b      	sxth	r3, r3
    if (x < _changed_min_x)
   16a76:	429a      	cmp	r2, r3
    if (x > _changed_max_x)
   16a78:	f9b5 20ea 	ldrsh.w	r2, [r5, #234]	; 0xea
      _changed_min_x = x;
   16a7c:	bfc8      	it	gt
   16a7e:	f8a5 30e8 	strhgt.w	r3, [r5, #232]	; 0xe8
    if (y < _changed_min_y)
   16a82:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
   16a86:	4563      	cmp	r3, ip
    x += w - 1;
   16a88:	fa0f f389 	sxth.w	r3, r9
      _changed_min_y = y;
   16a8c:	bfc8      	it	gt
   16a8e:	f8a5 c0ec 	strhgt.w	ip, [r5, #236]	; 0xec
    if (x > _changed_max_x)
   16a92:	429a      	cmp	r2, r3
      _changed_max_x = x;
   16a94:	bfb8      	it	lt
   16a96:	f8a5 30ea 	strhlt.w	r3, [r5, #234]	; 0xea
    if (y > _changed_max_y)
   16a9a:	f9b5 30ee 	ldrsh.w	r3, [r5, #238]	; 0xee
   16a9e:	4543      	cmp	r3, r8
   16aa0:	da01      	bge.n	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
      _changed_max_y = y;
   16aa2:	f8a5 80ee 	strh.w	r8, [r5, #238]	; 0xee
}
   16aa6:	b007      	add	sp, #28
   16aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t x_clip_right = 0;    // how many color entries to skip at end of row for clipping
   16aac:	f04f 0a00 	mov.w	sl, #0
   16ab0:	e77f      	b.n	169b2 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0xea>
	uint16_t x_clip_left = 0;  // How many entries at start of colors to skip at start of row
   16ab2:	f04f 0b00 	mov.w	fp, #0
   16ab6:	e76d      	b.n	16994 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0xcc>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   16ab8:	7a6b      	ldrb	r3, [r5, #9]
   16aba:	2b00      	cmp	r3, #0
   16abc:	f040 8099 	bne.w	16bf2 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x32a>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   16ac0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   16ac4:	2b00      	cmp	r3, #0
   16ac6:	f000 809d 	beq.w	16c04 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x33c>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   16aca:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   16ace:	b11b      	cbz	r3, 16ad8 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x210>
   16ad0:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
    *(base+34) = mask;
   16ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        writecommand(ST7735_CASET); // Column addr set
   16ad8:	4628      	mov	r0, r5
   16ada:	212a      	movs	r1, #42	; 0x2a
   16adc:	f7fe fae4 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   16ae0:	f8b5 107a 	ldrh.w	r1, [r5, #122]	; 0x7a
	setAddr(x, y, x+w-1, y+h-1);
   16ae4:	fa1f f989 	uxth.w	r9, r9
   16ae8:	b2a4      	uxth	r4, r4
   16aea:	4449      	add	r1, r9
   16aec:	b289      	uxth	r1, r1
   16aee:	f7fe fe31 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   16af2:	f8b5 307a 	ldrh.w	r3, [r5, #122]	; 0x7a
   16af6:	3b01      	subs	r3, #1
   16af8:	eb09 0103 	add.w	r1, r9, r3
   16afc:	fa1f f987 	uxth.w	r9, r7
   16b00:	4449      	add	r1, r9
   16b02:	b289      	uxth	r1, r1
   16b04:	f7fe fe26 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   16b08:	212b      	movs	r1, #43	; 0x2b
   16b0a:	f7fe facd 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   16b0e:	f8b5 107c 	ldrh.w	r1, [r5, #124]	; 0x7c
   16b12:	4421      	add	r1, r4
   16b14:	b289      	uxth	r1, r1
   16b16:	f7fe fe1d 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   16b1a:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
   16b1e:	3b01      	subs	r3, #1
   16b20:	441c      	add	r4, r3
   16b22:	eb04 0108 	add.w	r1, r4, r8
   16b26:	b289      	uxth	r1, r1
   16b28:	f7fe fe14 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
	writecommand(ST7735_RAMWR);
   16b2c:	212c      	movs	r1, #44	; 0x2c
   16b2e:	f7fe fabb 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
	for(y=h; y>0; y--) {
   16b32:	f1b8 0f00 	cmp.w	r8, #0
   16b36:	dd26      	ble.n	16b86 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x2be>
   16b38:	f1a9 0902 	sub.w	r9, r9, #2
   16b3c:	f10a 0a01 	add.w	sl, sl, #1
		pcolors += x_clip_left;
   16b40:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
   16b44:	fa1f f989 	uxth.w	r9, r9
   16b48:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   16b4c:	f109 0901 	add.w	r9, r9, #1
   16b50:	ea4f 0949 	mov.w	r9, r9, lsl #1
		for(x=w; x>1; x--) {
   16b54:	2f01      	cmp	r7, #1
		pcolors += x_clip_left;
   16b56:	eb06 040b 	add.w	r4, r6, fp
		for(x=w; x>1; x--) {
   16b5a:	dd48      	ble.n	16bee <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x326>
   16b5c:	eb04 0609 	add.w	r6, r4, r9
			writedata16(*pcolors++);
   16b60:	f834 1b02 	ldrh.w	r1, [r4], #2
   16b64:	f7fe fdf6 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		for(x=w; x>1; x--) {
   16b68:	42b4      	cmp	r4, r6
   16b6a:	d1f9      	bne.n	16b60 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x298>
		writedata16_last(*pcolors++);
   16b6c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   16b70:	8831      	ldrh	r1, [r6, #0]
   16b72:	f7fe febf 	bl	158f4 <ST7735_t3::writedata16_last(unsigned short)>
		pcolors += x_clip_right;
   16b76:	4456      	add	r6, sl
	for(y=h; y>0; y--) {
   16b78:	fa1f f388 	uxth.w	r3, r8
   16b7c:	fa0f f888 	sxth.w	r8, r8
   16b80:	2b00      	cmp	r3, #0
   16b82:	d1e7      	bne.n	16b54 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x28c>
   16b84:	4605      	mov	r5, r0
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   16b86:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   16b8a:	b11b      	cbz	r3, 16b94 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x2cc>
   16b8c:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
    *(base+33) = mask;
   16b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   16b94:	7a6b      	ldrb	r3, [r5, #9]
   16b96:	2b00      	cmp	r3, #0
   16b98:	d085      	beq.n	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
   16b9a:	f8d5 208c 	ldr.w	r2, [r5, #140]	; 0x8c
		if (interruptMasksUsed) {
   16b9e:	7cd3      	ldrb	r3, [r2, #19]
   16ba0:	2b00      	cmp	r3, #0
   16ba2:	d080      	beq.n	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   16ba4:	07dd      	lsls	r5, r3, #31
   16ba6:	d504      	bpl.n	16bb2 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x2ea>
   16ba8:	6a90      	ldr	r0, [r2, #40]	; 0x28
   16baa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16bae:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   16bb2:	079c      	lsls	r4, r3, #30
   16bb4:	d504      	bpl.n	16bc0 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x2f8>
   16bb6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   16bb8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16bbc:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   16bc0:	0758      	lsls	r0, r3, #29
   16bc2:	d504      	bpl.n	16bce <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x306>
   16bc4:	6b10      	ldr	r0, [r2, #48]	; 0x30
   16bc6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16bca:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   16bce:	0719      	lsls	r1, r3, #28
   16bd0:	d504      	bpl.n	16bdc <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x314>
   16bd2:	6b50      	ldr	r0, [r2, #52]	; 0x34
   16bd4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16bd8:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   16bdc:	06db      	lsls	r3, r3, #27
   16bde:	f57f af62 	bpl.w	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
   16be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
   16be4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16be8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   16bec:	e75b      	b.n	16aa6 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1de>
		pcolors += x_clip_left;
   16bee:	4626      	mov	r6, r4
   16bf0:	e7bc      	b.n	16b6c <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x2a4>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   16bf2:	f105 0384 	add.w	r3, r5, #132	; 0x84
   16bf6:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   16bfa:	e893 0006 	ldmia.w	r3, {r1, r2}
   16bfe:	f7f4 fb75 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
   16c02:	e75d      	b.n	16ac0 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x1f8>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   16c04:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   16c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   16c0a:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
   16c0e:	e75c      	b.n	16aca <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)+0x202>

00016c10 <ST7735_t3::drawLine(short, short, short, short, unsigned short)>:
{
   16c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c14:	ed2d 8b02 	vpush	{d8}
   16c18:	b087      	sub	sp, #28
   16c1a:	4699      	mov	r9, r3
   16c1c:	4688      	mov	r8, r1
   16c1e:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
   16c22:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
	if (y0 == y1) {
   16c26:	4562      	cmp	r2, ip
{
   16c28:	ee08 3a10 	vmov	s16, r3
	if (y0 == y1) {
   16c2c:	f000 82f3 	beq.w	17216 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x606>
	} else if (x0 == x1) {
   16c30:	4549      	cmp	r1, r9
   16c32:	4616      	mov	r6, r2
   16c34:	f000 8350 	beq.w	172d8 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x6c8>
	bool steep = abs(y1 - y0) > abs(x1 - x0);
   16c38:	ebac 0302 	sub.w	r3, ip, r2
   16c3c:	eba9 0a01 	sub.w	sl, r9, r1
   16c40:	4607      	mov	r7, r0
   16c42:	46e3      	mov	fp, ip
   16c44:	2b00      	cmp	r3, #0
   16c46:	4648      	mov	r0, r9
   16c48:	bfb8      	it	lt
   16c4a:	425b      	neglt	r3, r3
   16c4c:	f1ba 0f00 	cmp.w	sl, #0
   16c50:	bfb8      	it	lt
   16c52:	f1ca 0a00 	rsblt	sl, sl, #0
	if (steep) {
   16c56:	4553      	cmp	r3, sl
   16c58:	dd05      	ble.n	16c66 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x56>
   16c5a:	46cb      	mov	fp, r9
   16c5c:	46b0      	mov	r8, r6
   16c5e:	46e1      	mov	r9, ip
   16c60:	460a      	mov	r2, r1
   16c62:	4684      	mov	ip, r0
   16c64:	460e      	mov	r6, r1
	if (x0 > x1) {
   16c66:	45c8      	cmp	r8, r9
   16c68:	dd08      	ble.n	16c7c <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x6c>
   16c6a:	465c      	mov	r4, fp
   16c6c:	4630      	mov	r0, r6
   16c6e:	4641      	mov	r1, r8
   16c70:	4693      	mov	fp, r2
		st7735_swap(y0, y1);
   16c72:	4666      	mov	r6, ip
	if (x0 > x1) {
   16c74:	46c8      	mov	r8, r9
   16c76:	4622      	mov	r2, r4
		st7735_swap(y0, y1);
   16c78:	4684      	mov	ip, r0
	if (x0 > x1) {
   16c7a:	4689      	mov	r9, r1
	dx = x1 - x0;
   16c7c:	fa1f f588 	uxth.w	r5, r8
	dy = abs(y1 - y0);
   16c80:	ebab 0b02 	sub.w	fp, fp, r2
  	if (!_use_fbtft) beginSPITransaction();
   16c84:	f897 e0dc 	ldrb.w	lr, [r7, #220]	; 0xdc
	dx = x1 - x0;
   16c88:	eba9 0205 	sub.w	r2, r9, r5
	dy = abs(y1 - y0);
   16c8c:	f1bb 0f00 	cmp.w	fp, #0
	int16_t err = dx / 2;
   16c90:	b214      	sxth	r4, r2
	dy = abs(y1 - y0);
   16c92:	bfb8      	it	lt
   16c94:	f1cb 0b00 	rsblt	fp, fp, #0
	dx = x1 - x0;
   16c98:	b292      	uxth	r2, r2
	int16_t err = dx / 2;
   16c9a:	2c00      	cmp	r4, #0
	dx = x1 - x0;
   16c9c:	9203      	str	r2, [sp, #12]
	int16_t err = dx / 2;
   16c9e:	bfb8      	it	lt
   16ca0:	3401      	addlt	r4, #1
		ystep = -1;
   16ca2:	4566      	cmp	r6, ip
   16ca4:	bfb4      	ite	lt
   16ca6:	2201      	movlt	r2, #1
   16ca8:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
	int16_t err = dx / 2;
   16cac:	1064      	asrs	r4, r4, #1
		ystep = -1;
   16cae:	9204      	str	r2, [sp, #16]
  	if (!_use_fbtft) beginSPITransaction();
   16cb0:	f1be 0f00 	cmp.w	lr, #0
   16cb4:	f000 820b 	beq.w	170ce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x4be>
	if (steep) {
   16cb8:	4553      	cmp	r3, sl
   16cba:	f340 8109 	ble.w	16ed0 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2c0>
		for (; x0<=x1; x0++) {
   16cbe:	45c8      	cmp	r8, r9
   16cc0:	f300 8391 	bgt.w	173e6 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x7d6>
   16cc4:	3501      	adds	r5, #1
			err -= dy;
   16cc6:	fa1f fb8b 	uxth.w	fp, fp
   16cca:	4670      	mov	r0, lr
   16ccc:	4642      	mov	r2, r8
   16cce:	b2ad      	uxth	r5, r5
   16cd0:	e005      	b.n	16cde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0xce>
				xbegin = x0 + 1;
   16cd2:	b22b      	sxth	r3, r5
		for (; x0<=x1; x0++) {
   16cd4:	3501      	adds	r5, #1
   16cd6:	4599      	cmp	r9, r3
   16cd8:	b2ad      	uxth	r5, r5
   16cda:	f2c0 8086 	blt.w	16dea <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1da>
			err -= dy;
   16cde:	eba4 0a0b 	sub.w	sl, r4, fp
   16ce2:	fa0f f48a 	sxth.w	r4, sl
   16ce6:	fa1f fa8a 	uxth.w	sl, sl
			if (err < 0) {
   16cea:	2c00      	cmp	r4, #0
   16cec:	daf1      	bge.n	16cd2 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0xc2>
				int16_t len = x0 - xbegin;
   16cee:	1e6b      	subs	r3, r5, #1
   16cf0:	fa1f fe82 	uxth.w	lr, r2
   16cf4:	b29b      	uxth	r3, r3
   16cf6:	eba3 040e 	sub.w	r4, r3, lr
   16cfa:	b2a4      	uxth	r4, r4
				if (len) {
   16cfc:	2c00      	cmp	r4, #0
   16cfe:	f000 81fc 	beq.w	170fa <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x4ea>
					VLine(y0, xbegin, len + 1, color);
   16d02:	3401      	adds	r4, #1
   16d04:	fa1f fc84 	uxth.w	ip, r4
   16d08:	b224      	sxth	r4, r4
	  
	void VLine(int16_t x, int16_t y, int16_t h, uint16_t color)
	  __attribute__((always_inline)) 
	  {
		#ifdef ENABLE_ST77XX_FRAMEBUFFER
	  	if (_use_fbtft) {
   16d0a:	2800      	cmp	r0, #0
   16d0c:	f040 82f2 	bne.w	172f4 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x6e4>
	  		drawFastVLine(x, y, h, color);
	  		return;
	  	}
	  	#endif
		x+=_originx;
   16d10:	b2b6      	uxth	r6, r6
   16d12:	8b3b      	ldrh	r3, [r7, #24]
	    y+=_originy;

	    // Rectangular clipping
	    if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16d14:	f9b7 801c 	ldrsh.w	r8, [r7, #28]
		x+=_originx;
   16d18:	4433      	add	r3, r6
   16d1a:	b21a      	sxth	r2, r3
   16d1c:	b29b      	uxth	r3, r3
	    if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16d1e:	4590      	cmp	r8, r2
   16d20:	dc55      	bgt.n	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>
   16d22:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
   16d26:	4291      	cmp	r1, r2
   16d28:	dd51      	ble.n	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>
	    y+=_originy;
   16d2a:	8b7a      	ldrh	r2, [r7, #26]
	    if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16d2c:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
	    y+=_originy;
   16d30:	4472      	add	r2, lr
   16d32:	fa0f f882 	sxth.w	r8, r2
   16d36:	b292      	uxth	r2, r2
	    if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16d38:	4588      	cmp	r8, r1
   16d3a:	da48      	bge.n	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>
	    if(y < _displayclipy1) { h = h - (_displayclipy1 - y); y = _displayclipy1;}
   16d3c:	f9b7 e01e 	ldrsh.w	lr, [r7, #30]
   16d40:	45f0      	cmp	r8, lr
   16d42:	da04      	bge.n	16d4e <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x13e>
   16d44:	eba2 020e 	sub.w	r2, r2, lr
   16d48:	46f0      	mov	r8, lr
   16d4a:	4462      	add	r2, ip
   16d4c:	b214      	sxth	r4, r2
	    if((y+h-1) >= _displayclipy2) h = _displayclipy2-y;
   16d4e:	eb08 0204 	add.w	r2, r8, r4
   16d52:	428a      	cmp	r2, r1
   16d54:	dd02      	ble.n	16d5c <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x14c>
   16d56:	eba1 0108 	sub.w	r1, r1, r8
   16d5a:	b20c      	sxth	r4, r1
	    if(h<1) return;
   16d5c:	2c00      	cmp	r4, #0
   16d5e:	9305      	str	r3, [sp, #20]
   16d60:	dd35      	ble.n	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>
        writecommand(ST7735_CASET); // Column addr set
   16d62:	4638      	mov	r0, r7
   16d64:	212a      	movs	r1, #42	; 0x2a
   16d66:	f7fe f99f 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   16d6a:	9b05      	ldr	r3, [sp, #20]
   16d6c:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a

		setAddr(x, y, x, y+h-1);
   16d70:	fa1f f888 	uxth.w	r8, r8
        writedata16(x0+_xstart);   // XSTART 
   16d74:	4419      	add	r1, r3
   16d76:	b289      	uxth	r1, r1
   16d78:	f7fe fcec 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   16d7c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
   16d80:	9b05      	ldr	r3, [sp, #20]
   16d82:	1899      	adds	r1, r3, r2
   16d84:	b289      	uxth	r1, r1
   16d86:	f7fe fce5 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   16d8a:	212b      	movs	r1, #43	; 0x2b
   16d8c:	f7fe f98c 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   16d90:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
   16d94:	4441      	add	r1, r8
   16d96:	b289      	uxth	r1, r1
   16d98:	f7fe fcdc 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   16d9c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
   16da0:	3b01      	subs	r3, #1
   16da2:	eb08 0103 	add.w	r1, r8, r3
		writecommand(ST7735_RAMWR);
   16da6:	ee18 8a10 	vmov	r8, s16
        writedata16(y1+_ystart);   // YEND
   16daa:	4421      	add	r1, r4
   16dac:	b289      	uxth	r1, r1
   16dae:	f7fe fcd1 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		writecommand(ST7735_RAMWR);
   16db2:	212c      	movs	r1, #44	; 0x2c
   16db4:	f7fe f978 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		do { writedata16(color); } while (--h > 0);
   16db8:	3c01      	subs	r4, #1
   16dba:	4641      	mov	r1, r8
   16dbc:	f7fe fcca 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
   16dc0:	b2a3      	uxth	r3, r4
   16dc2:	b224      	sxth	r4, r4
   16dc4:	2b00      	cmp	r3, #0
   16dc6:	d1f7      	bne.n	16db8 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1a8>
	  	if (_use_fbtft) {
   16dc8:	4607      	mov	r7, r0
   16dca:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
				y0 += ystep;
   16dce:	9b04      	ldr	r3, [sp, #16]
				xbegin = x0 + 1;
   16dd0:	b22a      	sxth	r2, r5
		for (; x0<=x1; x0++) {
   16dd2:	3501      	adds	r5, #1
				y0 += ystep;
   16dd4:	441e      	add	r6, r3
				err += dx;
   16dd6:	9b03      	ldr	r3, [sp, #12]
		for (; x0<=x1; x0++) {
   16dd8:	b2ad      	uxth	r5, r5
				err += dx;
   16dda:	449a      	add	sl, r3
   16ddc:	4613      	mov	r3, r2
				y0 += ystep;
   16dde:	b236      	sxth	r6, r6
		for (; x0<=x1; x0++) {
   16de0:	4599      	cmp	r9, r3
				err += dx;
   16de2:	fa0f f48a 	sxth.w	r4, sl
		for (; x0<=x1; x0++) {
   16de6:	f6bf af7a 	bge.w	16cde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0xce>
   16dea:	4686      	mov	lr, r0
   16dec:	4690      	mov	r8, r2
		if (x0 > xbegin + 1) {
   16dee:	f108 0201 	add.w	r2, r8, #1
   16df2:	4293      	cmp	r3, r2
   16df4:	dd63      	ble.n	16ebe <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2ae>
			VLine(y0, xbegin, x0 - xbegin, color);
   16df6:	b29a      	uxth	r2, r3
   16df8:	fa1f f388 	uxth.w	r3, r8
   16dfc:	1ad4      	subs	r4, r2, r3
   16dfe:	b224      	sxth	r4, r4
   16e00:	f1be 0f00 	cmp.w	lr, #0
   16e04:	f040 82f3 	bne.w	173ee <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x7de>
		x+=_originx;
   16e08:	8b39      	ldrh	r1, [r7, #24]
	    if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16e0a:	f9b7 c01c 	ldrsh.w	ip, [r7, #28]
		x+=_originx;
   16e0e:	4431      	add	r1, r6
	    y+=_originy;
   16e10:	f9b7 001a 	ldrsh.w	r0, [r7, #26]
		x+=_originx;
   16e14:	b20d      	sxth	r5, r1
   16e16:	b28e      	uxth	r6, r1
	    if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16e18:	45ac      	cmp	ip, r5
   16e1a:	f300 820e 	bgt.w	1723a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x62a>
   16e1e:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
   16e22:	42a9      	cmp	r1, r5
   16e24:	f340 8209 	ble.w	1723a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x62a>
	    y+=_originy;
   16e28:	b280      	uxth	r0, r0
	    if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16e2a:	f9b7 5022 	ldrsh.w	r5, [r7, #34]	; 0x22
	    y+=_originy;
   16e2e:	4403      	add	r3, r0
   16e30:	b219      	sxth	r1, r3
	    if((x < _displayclipx1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16e32:	42a9      	cmp	r1, r5
   16e34:	f280 8201 	bge.w	1723a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x62a>
	    if(y < _displayclipy1) { h = h - (_displayclipy1 - y); y = _displayclipy1;}
   16e38:	f9b7 c01e 	ldrsh.w	ip, [r7, #30]
   16e3c:	4561      	cmp	r1, ip
   16e3e:	da04      	bge.n	16e4a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x23a>
   16e40:	eba0 000c 	sub.w	r0, r0, ip
   16e44:	4661      	mov	r1, ip
   16e46:	1813      	adds	r3, r2, r0
   16e48:	b21c      	sxth	r4, r3
	    if((y+h-1) >= _displayclipy2) h = _displayclipy2-y;
   16e4a:	190b      	adds	r3, r1, r4
   16e4c:	42ab      	cmp	r3, r5
   16e4e:	dd01      	ble.n	16e54 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x244>
   16e50:	1a6d      	subs	r5, r5, r1
   16e52:	b22c      	sxth	r4, r5
	    if(h<1) return;
   16e54:	2c00      	cmp	r4, #0
   16e56:	f340 81f0 	ble.w	1723a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x62a>
        writecommand(ST7735_CASET); // Column addr set
   16e5a:	4638      	mov	r0, r7
		setAddr(x, y, x, y+h-1);
   16e5c:	b28d      	uxth	r5, r1
        writecommand(ST7735_CASET); // Column addr set
   16e5e:	212a      	movs	r1, #42	; 0x2a
   16e60:	f7fe f922 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   16e64:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
   16e68:	4431      	add	r1, r6
   16e6a:	b289      	uxth	r1, r1
   16e6c:	f7fe fc72 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   16e70:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
   16e74:	18f1      	adds	r1, r6, r3
   16e76:	b289      	uxth	r1, r1
   16e78:	f7fe fc6c 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   16e7c:	212b      	movs	r1, #43	; 0x2b
   16e7e:	f7fe f913 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   16e82:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
   16e86:	4429      	add	r1, r5
   16e88:	b289      	uxth	r1, r1
   16e8a:	f7fe fc63 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   16e8e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
   16e92:	3b01      	subs	r3, #1
   16e94:	18e9      	adds	r1, r5, r3
		writecommand(ST7735_RAMWR);
   16e96:	ee18 5a10 	vmov	r5, s16
        writedata16(y1+_ystart);   // YEND
   16e9a:	4421      	add	r1, r4
   16e9c:	b289      	uxth	r1, r1
   16e9e:	f7fe fc59 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		writecommand(ST7735_RAMWR);
   16ea2:	212c      	movs	r1, #44	; 0x2c
   16ea4:	f7fe f900 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		do { writedata16(color); } while (--h > 0);
   16ea8:	4629      	mov	r1, r5
   16eaa:	f7fe fc53 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
   16eae:	1e63      	subs	r3, r4, #1
   16eb0:	b29a      	uxth	r2, r3
   16eb2:	b21c      	sxth	r4, r3
   16eb4:	2a00      	cmp	r2, #0
   16eb6:	d1f7      	bne.n	16ea8 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x298>
  	if (!_use_fbtft) {
   16eb8:	4607      	mov	r7, r0
   16eba:	f890 e0dc 	ldrb.w	lr, [r0, #220]	; 0xdc
   16ebe:	f1be 0f00 	cmp.w	lr, #0
   16ec2:	f000 81ba 	beq.w	1723a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x62a>
}
   16ec6:	b007      	add	sp, #28
   16ec8:	ecbd 8b02 	vpop	{d8}
   16ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (; x0<=x1; x0++) {
   16ed0:	45c8      	cmp	r8, r9
   16ed2:	f300 828a 	bgt.w	173ea <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x7da>
   16ed6:	3501      	adds	r5, #1
			err -= dy;
   16ed8:	fa1f fb8b 	uxth.w	fp, fp
   16edc:	4670      	mov	r0, lr
   16ede:	b2ad      	uxth	r5, r5
   16ee0:	e005      	b.n	16eee <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2de>
				xbegin = x0 + 1;
   16ee2:	b22b      	sxth	r3, r5
		for (; x0<=x1; x0++) {
   16ee4:	3501      	adds	r5, #1
   16ee6:	4599      	cmp	r9, r3
   16ee8:	b2ad      	uxth	r5, r5
   16eea:	f2c0 8087 	blt.w	16ffc <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ec>
			err -= dy;
   16eee:	eba4 0a0b 	sub.w	sl, r4, fp
   16ef2:	fa0f f48a 	sxth.w	r4, sl
   16ef6:	fa1f fa8a 	uxth.w	sl, sl
			if (err < 0) {
   16efa:	2c00      	cmp	r4, #0
   16efc:	daf1      	bge.n	16ee2 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2d2>
				int16_t len = x0 - xbegin;
   16efe:	1e69      	subs	r1, r5, #1
   16f00:	fa1f f388 	uxth.w	r3, r8
   16f04:	b289      	uxth	r1, r1
   16f06:	1acc      	subs	r4, r1, r3
   16f08:	b2a4      	uxth	r4, r4
				if (len) {
   16f0a:	2c00      	cmp	r4, #0
   16f0c:	f000 813c 	beq.w	17188 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x578>
					HLine(xbegin, y0, len + 1, color);
   16f10:	3401      	adds	r4, #1
   16f12:	fa1f fe84 	uxth.w	lr, r4
   16f16:	b224      	sxth	r4, r4
	  	if (_use_fbtft) {
   16f18:	2800      	cmp	r0, #0
   16f1a:	f040 81f6 	bne.w	1730a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x6fa>
	    y+=_originy;
   16f1e:	b2b6      	uxth	r6, r6
   16f20:	f8b7 c01a 	ldrh.w	ip, [r7, #26]
	    if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16f24:	f9b7 801e 	ldrsh.w	r8, [r7, #30]
	    y+=_originy;
   16f28:	44b4      	add	ip, r6
   16f2a:	fa0f f18c 	sxth.w	r1, ip
   16f2e:	fa1f f28c 	uxth.w	r2, ip
	    if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16f32:	4588      	cmp	r8, r1
	    y+=_originy;
   16f34:	9205      	str	r2, [sp, #20]
	    if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16f36:	dc52      	bgt.n	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
	    x+=_originx;
   16f38:	8b3a      	ldrh	r2, [r7, #24]
	    if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16f3a:	f9b7 c020 	ldrsh.w	ip, [r7, #32]
	    x+=_originx;
   16f3e:	4413      	add	r3, r2
   16f40:	b21a      	sxth	r2, r3
   16f42:	b29b      	uxth	r3, r3
	    if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   16f44:	4562      	cmp	r2, ip
   16f46:	da4a      	bge.n	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
   16f48:	f9b7 8022 	ldrsh.w	r8, [r7, #34]	; 0x22
   16f4c:	4588      	cmp	r8, r1
   16f4e:	dd46      	ble.n	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
	    if(x<_displayclipx1) { w = w - (_displayclipx1 - x); x = _displayclipx1; }
   16f50:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
   16f54:	428a      	cmp	r2, r1
   16f56:	da03      	bge.n	16f60 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x350>
   16f58:	1a5b      	subs	r3, r3, r1
   16f5a:	460a      	mov	r2, r1
   16f5c:	4473      	add	r3, lr
   16f5e:	b21c      	sxth	r4, r3
	    if((x+w-1) >= _displayclipx2)  w = _displayclipx2-x;
   16f60:	1913      	adds	r3, r2, r4
   16f62:	4563      	cmp	r3, ip
   16f64:	dd03      	ble.n	16f6e <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x35e>
   16f66:	ebac 0c02 	sub.w	ip, ip, r2
   16f6a:	fa0f f48c 	sxth.w	r4, ip
	    if (w<1) return;
   16f6e:	2c00      	cmp	r4, #0
   16f70:	dd35      	ble.n	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
        writecommand(ST7735_CASET); // Column addr set
   16f72:	4638      	mov	r0, r7
   16f74:	212a      	movs	r1, #42	; 0x2a
		setAddr(x, y, x+w-1, y);
   16f76:	fa1f f882 	uxth.w	r8, r2
        writecommand(ST7735_CASET); // Column addr set
   16f7a:	f7fe f895 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   16f7e:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
   16f82:	4441      	add	r1, r8
   16f84:	b289      	uxth	r1, r1
   16f86:	f7fe fbe5 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   16f8a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
   16f8e:	3b01      	subs	r3, #1
   16f90:	eb08 0203 	add.w	r2, r8, r3
		writecommand(ST7735_RAMWR);
   16f94:	ee18 8a10 	vmov	r8, s16
        writedata16(x1+_xstart);   // XEND
   16f98:	1911      	adds	r1, r2, r4
   16f9a:	b289      	uxth	r1, r1
   16f9c:	f7fe fbda 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   16fa0:	212b      	movs	r1, #43	; 0x2b
   16fa2:	f7fe f881 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   16fa6:	9b05      	ldr	r3, [sp, #20]
   16fa8:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
   16fac:	4419      	add	r1, r3
   16fae:	b289      	uxth	r1, r1
   16fb0:	f7fe fbd0 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   16fb4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
   16fb8:	9a05      	ldr	r2, [sp, #20]
   16fba:	18d1      	adds	r1, r2, r3
   16fbc:	b289      	uxth	r1, r1
   16fbe:	f7fe fbc9 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		writecommand(ST7735_RAMWR);
   16fc2:	212c      	movs	r1, #44	; 0x2c
   16fc4:	f7fe f870 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		do { writedata16(color); } while (--w > 0);
   16fc8:	3c01      	subs	r4, #1
   16fca:	4641      	mov	r1, r8
   16fcc:	f7fe fbc2 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
   16fd0:	b2a3      	uxth	r3, r4
   16fd2:	b224      	sxth	r4, r4
   16fd4:	2b00      	cmp	r3, #0
   16fd6:	d1f7      	bne.n	16fc8 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3b8>
	  	if (_use_fbtft) {
   16fd8:	4607      	mov	r7, r0
   16fda:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
				y0 += ystep;
   16fde:	9b04      	ldr	r3, [sp, #16]
				xbegin = x0 + 1;
   16fe0:	fa0f f885 	sxth.w	r8, r5
		for (; x0<=x1; x0++) {
   16fe4:	3501      	adds	r5, #1
				y0 += ystep;
   16fe6:	441e      	add	r6, r3
				err += dx;
   16fe8:	9b03      	ldr	r3, [sp, #12]
		for (; x0<=x1; x0++) {
   16fea:	b2ad      	uxth	r5, r5
				err += dx;
   16fec:	449a      	add	sl, r3
   16fee:	4643      	mov	r3, r8
				y0 += ystep;
   16ff0:	b236      	sxth	r6, r6
		for (; x0<=x1; x0++) {
   16ff2:	4599      	cmp	r9, r3
				err += dx;
   16ff4:	fa0f f48a 	sxth.w	r4, sl
		for (; x0<=x1; x0++) {
   16ff8:	f6bf af79 	bge.w	16eee <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2de>
   16ffc:	4686      	mov	lr, r0
		if (x0 > xbegin + 1) {
   16ffe:	f108 0201 	add.w	r2, r8, #1
   17002:	4293      	cmp	r3, r2
   17004:	f77f af5b 	ble.w	16ebe <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2ae>
			HLine(xbegin, y0, x0 - xbegin, color);
   17008:	b29a      	uxth	r2, r3
   1700a:	fa1f f388 	uxth.w	r3, r8
   1700e:	1ad4      	subs	r4, r2, r3
   17010:	b224      	sxth	r4, r4
   17012:	f1be 0f00 	cmp.w	lr, #0
   17016:	f040 81f5 	bne.w	17404 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x7f4>
	    y+=_originy;
   1701a:	8b79      	ldrh	r1, [r7, #26]
	    if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   1701c:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
	    y+=_originy;
   17020:	440e      	add	r6, r1
	    x+=_originx;
   17022:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
	    y+=_originy;
   17026:	fa0f fc86 	sxth.w	ip, r6
   1702a:	b2b6      	uxth	r6, r6
	    if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   1702c:	4560      	cmp	r0, ip
   1702e:	f300 8104 	bgt.w	1723a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x62a>
	    x+=_originx;
   17032:	b288      	uxth	r0, r1
	    if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   17034:	f9b7 5020 	ldrsh.w	r5, [r7, #32]
	    x+=_originx;
   17038:	4403      	add	r3, r0
   1703a:	b219      	sxth	r1, r3
	    if((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2)) return;
   1703c:	42a9      	cmp	r1, r5
   1703e:	f280 80fc 	bge.w	1723a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x62a>
   17042:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   17046:	4563      	cmp	r3, ip
   17048:	f340 80f7 	ble.w	1723a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x62a>
	    if(x<_displayclipx1) { w = w - (_displayclipx1 - x); x = _displayclipx1; }
   1704c:	f9b7 c01c 	ldrsh.w	ip, [r7, #28]
   17050:	4561      	cmp	r1, ip
   17052:	da04      	bge.n	1705e <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x44e>
   17054:	eba0 010c 	sub.w	r1, r0, ip
   17058:	1853      	adds	r3, r2, r1
   1705a:	4661      	mov	r1, ip
   1705c:	b21c      	sxth	r4, r3
	    if((x+w-1) >= _displayclipx2)  w = _displayclipx2-x;
   1705e:	190b      	adds	r3, r1, r4
   17060:	42ab      	cmp	r3, r5
   17062:	dd01      	ble.n	17068 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x458>
   17064:	1a6d      	subs	r5, r5, r1
   17066:	b22c      	sxth	r4, r5
	    if (w<1) return;
   17068:	2c00      	cmp	r4, #0
   1706a:	f340 80e6 	ble.w	1723a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x62a>
        writecommand(ST7735_CASET); // Column addr set
   1706e:	4638      	mov	r0, r7
		setAddr(x, y, x+w-1, y);
   17070:	b28d      	uxth	r5, r1
        writecommand(ST7735_CASET); // Column addr set
   17072:	212a      	movs	r1, #42	; 0x2a
   17074:	f7fe f818 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   17078:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
   1707c:	4429      	add	r1, r5
   1707e:	b289      	uxth	r1, r1
   17080:	f7fe fb68 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   17084:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
   17088:	3b01      	subs	r3, #1
   1708a:	18e9      	adds	r1, r5, r3
		writecommand(ST7735_RAMWR);
   1708c:	ee18 5a10 	vmov	r5, s16
        writedata16(x1+_xstart);   // XEND
   17090:	4421      	add	r1, r4
   17092:	b289      	uxth	r1, r1
   17094:	f7fe fb5e 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   17098:	212b      	movs	r1, #43	; 0x2b
   1709a:	f7fe f805 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   1709e:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
   170a2:	4431      	add	r1, r6
   170a4:	b289      	uxth	r1, r1
   170a6:	f7fe fb55 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   170aa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
   170ae:	441e      	add	r6, r3
   170b0:	b2b1      	uxth	r1, r6
   170b2:	f7fe fb4f 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		writecommand(ST7735_RAMWR);
   170b6:	212c      	movs	r1, #44	; 0x2c
   170b8:	f7fd fff6 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		do { writedata16(color); } while (--w > 0);
   170bc:	4629      	mov	r1, r5
   170be:	f7fe fb49 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
   170c2:	1e63      	subs	r3, r4, #1
   170c4:	b29a      	uxth	r2, r3
   170c6:	b21c      	sxth	r4, r3
   170c8:	2a00      	cmp	r2, #0
   170ca:	d1f7      	bne.n	170bc <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x4ac>
   170cc:	e6f4      	b.n	16eb8 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2a8>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   170ce:	7a7a      	ldrb	r2, [r7, #9]
   170d0:	2a00      	cmp	r2, #0
   170d2:	f040 80f1 	bne.w	172b8 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x6a8>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   170d6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   170da:	2a00      	cmp	r2, #0
   170dc:	f000 80f6 	beq.w	172cc <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x6bc>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   170e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   170e4:	b11a      	cbz	r2, 170ee <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x4de>
   170e6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
    *(base+34) = mask;
   170ea:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
	if (steep) {
   170ee:	4553      	cmp	r3, sl
	  	if (_use_fbtft) {
   170f0:	f897 e0dc 	ldrb.w	lr, [r7, #220]	; 0xdc
   170f4:	f73f ade3 	bgt.w	16cbe <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0xae>
   170f8:	e6ea      	b.n	16ed0 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2c0>
		return (uint16_t)((result >> 16) | result); // contract result
	}
	  
	void Pixel(int16_t x, int16_t y, uint16_t color)
	  __attribute__((always_inline)) {
	    x+=_originx;
   170fa:	b2b6      	uxth	r6, r6
   170fc:	8b3c      	ldrh	r4, [r7, #24]
	    y+=_originy;

	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   170fe:	f9b7 c01c 	ldrsh.w	ip, [r7, #28]
	    x+=_originx;
   17102:	4434      	add	r4, r6
   17104:	b222      	sxth	r2, r4
   17106:	b2a4      	uxth	r4, r4
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   17108:	4594      	cmp	ip, r2
   1710a:	f73f ae60 	bgt.w	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>
   1710e:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
   17112:	4291      	cmp	r1, r2
   17114:	f77f ae5b 	ble.w	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>
	    y+=_originy;
   17118:	f8b7 801a 	ldrh.w	r8, [r7, #26]
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   1711c:	f9b7 c01e 	ldrsh.w	ip, [r7, #30]
	    y+=_originy;
   17120:	4498      	add	r8, r3
   17122:	fa0f f388 	sxth.w	r3, r8
   17126:	fa1f f888 	uxth.w	r8, r8
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   1712a:	459c      	cmp	ip, r3
   1712c:	f73f ae4f 	bgt.w	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>
   17130:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
   17134:	4299      	cmp	r1, r3
   17136:	f77f ae4a 	ble.w	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>

		#ifdef ENABLE_ST77XX_FRAMEBUFFER
	  	if (_use_fbtft) {
   1713a:	2800      	cmp	r0, #0
   1713c:	f000 80ff 	beq.w	1733e <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x72e>
    if (x < _changed_min_x)
   17140:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
   17144:	4291      	cmp	r1, r2
    if (y < _changed_min_y)
   17146:	f9b7 10ec 	ldrsh.w	r1, [r7, #236]	; 0xec
      _changed_min_x = x;
   1714a:	bfc8      	it	gt
   1714c:	f8a7 20e8 	strhgt.w	r2, [r7, #232]	; 0xe8
    if (y < _changed_min_y)
   17150:	4299      	cmp	r1, r3
    if (x > _changed_max_x)
   17152:	f9b7 10ea 	ldrsh.w	r1, [r7, #234]	; 0xea
      _changed_min_y = y;
   17156:	bfc8      	it	gt
   17158:	f8a7 30ec 	strhgt.w	r3, [r7, #236]	; 0xec
    if (x > _changed_max_x)
   1715c:	4291      	cmp	r1, r2
    if (y > _changed_max_y)
   1715e:	f9b7 10ee 	ldrsh.w	r1, [r7, #238]	; 0xee
      _changed_max_x = x;
   17162:	bfb8      	it	lt
   17164:	f8a7 20ea 	strhlt.w	r2, [r7, #234]	; 0xea
    if (y > _changed_max_y)
   17168:	4299      	cmp	r1, r3
        updateChangedRange(x, y); // update the range of the screen that has been changed;
        int pixel_index = (int)y*(int)_width + x;
   1716a:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
      _changed_max_y = y;
   1716c:	bfb8      	it	lt
   1716e:	f8a7 30ee 	strhlt.w	r3, [r7, #238]	; 0xee
        int pixel_index = (int)y*(int)_width + x;
   17172:	fb13 2301 	smlabb	r3, r3, r1, r2
	  		_pfbtft[pixel_index] = color;
   17176:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
   1717a:	ee18 1a10 	vmov	r1, s16
   1717e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  	if (_use_fbtft) {
   17182:	f897 00dc 	ldrb.w	r0, [r7, #220]	; 0xdc
	  		return;
   17186:	e622      	b.n	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>
	    x+=_originx;
   17188:	8b3b      	ldrh	r3, [r7, #24]
	    y+=_originy;
   1718a:	b2b6      	uxth	r6, r6
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   1718c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
	    x+=_originx;
   17190:	4419      	add	r1, r3
   17192:	b20b      	sxth	r3, r1
   17194:	b28c      	uxth	r4, r1
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   17196:	429a      	cmp	r2, r3
   17198:	f73f af21 	bgt.w	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
   1719c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
   171a0:	429a      	cmp	r2, r3
   171a2:	f77f af1c 	ble.w	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
	    y+=_originy;
   171a6:	f8b7 801a 	ldrh.w	r8, [r7, #26]
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   171aa:	f9b7 c01e 	ldrsh.w	ip, [r7, #30]
	    y+=_originy;
   171ae:	44b0      	add	r8, r6
   171b0:	fa0f f288 	sxth.w	r2, r8
   171b4:	fa1f f888 	uxth.w	r8, r8
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   171b8:	4594      	cmp	ip, r2
   171ba:	f73f af10 	bgt.w	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
   171be:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
   171c2:	4291      	cmp	r1, r2
   171c4:	f77f af0b 	ble.w	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
	  	if (_use_fbtft) {
   171c8:	2800      	cmp	r0, #0
   171ca:	f000 80e2 	beq.w	17392 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x782>
    if (x < _changed_min_x)
   171ce:	f9b7 10e8 	ldrsh.w	r1, [r7, #232]	; 0xe8
   171d2:	4299      	cmp	r1, r3
    if (y < _changed_min_y)
   171d4:	f9b7 10ec 	ldrsh.w	r1, [r7, #236]	; 0xec
      _changed_min_x = x;
   171d8:	bfc8      	it	gt
   171da:	f8a7 30e8 	strhgt.w	r3, [r7, #232]	; 0xe8
    if (y < _changed_min_y)
   171de:	4291      	cmp	r1, r2
    if (x > _changed_max_x)
   171e0:	f9b7 10ea 	ldrsh.w	r1, [r7, #234]	; 0xea
      _changed_min_y = y;
   171e4:	bfc8      	it	gt
   171e6:	f8a7 20ec 	strhgt.w	r2, [r7, #236]	; 0xec
    if (x > _changed_max_x)
   171ea:	4299      	cmp	r1, r3
    if (y > _changed_max_y)
   171ec:	f9b7 10ee 	ldrsh.w	r1, [r7, #238]	; 0xee
      _changed_max_x = x;
   171f0:	bfb8      	it	lt
   171f2:	f8a7 30ea 	strhlt.w	r3, [r7, #234]	; 0xea
    if (y > _changed_max_y)
   171f6:	4291      	cmp	r1, r2
        int pixel_index = (int)y*(int)_width + x;
   171f8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
      _changed_max_y = y;
   171fa:	bfb8      	it	lt
   171fc:	f8a7 20ee 	strhlt.w	r2, [r7, #238]	; 0xee
        int pixel_index = (int)y*(int)_width + x;
   17200:	fb12 3201 	smlabb	r2, r2, r1, r3
	  		_pfbtft[pixel_index] = color;
   17204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
   17208:	ee18 1a10 	vmov	r1, s16
   1720c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	if (_use_fbtft) {
   17210:	f897 00dc 	ldrb.w	r0, [r7, #220]	; 0xdc
	  		return;
   17214:	e6e3      	b.n	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
		if (x1 > x0) {
   17216:	4549      	cmp	r1, r9
   17218:	db49      	blt.n	172ae <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x69e>
		} else if (x1 < x0) {
   1721a:	f340 8089 	ble.w	17330 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x720>
			drawFastHLine(x1, y0, x0 - x1 + 1, color);
   1721e:	eba1 0309 	sub.w	r3, r1, r9
   17222:	4649      	mov	r1, r9
   17224:	ed8d 8a12 	vstr	s16, [sp, #72]	; 0x48
   17228:	3301      	adds	r3, #1
   1722a:	b21b      	sxth	r3, r3
}
   1722c:	b007      	add	sp, #28
   1722e:	ecbd 8b02 	vpop	{d8}
   17232:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			drawFastHLine(x1, y0, x0 - x1 + 1, color);
   17236:	f7ff b877 	b.w	16328 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)>
		writecommand_last(ST7735_NOP);
   1723a:	2100      	movs	r1, #0
   1723c:	4638      	mov	r0, r7
   1723e:	f7fd ffc7 	bl	151d0 <ST7735_t3::writecommand_last(unsigned char)>
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   17242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   17246:	b11b      	cbz	r3, 17250 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x640>
   17248:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    *(base+33) = mask;
   1724c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   17250:	7a7b      	ldrb	r3, [r7, #9]
   17252:	2b00      	cmp	r3, #0
   17254:	f43f ae37 	beq.w	16ec6 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2b6>
   17258:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
		if (interruptMasksUsed) {
   1725c:	7cd3      	ldrb	r3, [r2, #19]
   1725e:	2b00      	cmp	r3, #0
   17260:	f43f ae31 	beq.w	16ec6 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2b6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   17264:	07dd      	lsls	r5, r3, #31
   17266:	d504      	bpl.n	17272 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x662>
   17268:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1726a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1726e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   17272:	079c      	lsls	r4, r3, #30
   17274:	d504      	bpl.n	17280 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x670>
   17276:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   17278:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1727c:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   17280:	0758      	lsls	r0, r3, #29
   17282:	d504      	bpl.n	1728e <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x67e>
   17284:	6b10      	ldr	r0, [r2, #48]	; 0x30
   17286:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1728a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   1728e:	0719      	lsls	r1, r3, #28
   17290:	d504      	bpl.n	1729c <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x68c>
   17292:	6b50      	ldr	r0, [r2, #52]	; 0x34
   17294:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   17298:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   1729c:	06db      	lsls	r3, r3, #27
   1729e:	f57f ae12 	bpl.w	16ec6 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2b6>
   172a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
   172a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   172a8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   172ac:	e60b      	b.n	16ec6 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2b6>
			drawFastHLine(x0, y0, x1 - x0 + 1, color);
   172ae:	9312      	str	r3, [sp, #72]	; 0x48
   172b0:	f109 0301 	add.w	r3, r9, #1
   172b4:	1a5b      	subs	r3, r3, r1
   172b6:	e7b8      	b.n	1722a <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x61a>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   172b8:	f107 0284 	add.w	r2, r7, #132	; 0x84
   172bc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   172c0:	9305      	str	r3, [sp, #20]
   172c2:	ca06      	ldmia	r2, {r1, r2}
   172c4:	f7f4 f812 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
   172c8:	9b05      	ldr	r3, [sp, #20]
   172ca:	e704      	b.n	170d6 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x4c6>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   172cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   172d0:	6e12      	ldr	r2, [r2, #96]	; 0x60
   172d2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
   172d6:	e703      	b.n	170e0 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x4d0>
		if (y1 > y0) {
   172d8:	4562      	cmp	r2, ip
   172da:	da22      	bge.n	17322 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x712>
			drawFastVLine(x0, y0, y1 - y0 + 1, color);
   172dc:	9312      	str	r3, [sp, #72]	; 0x48
   172de:	f10c 0301 	add.w	r3, ip, #1
   172e2:	1a9b      	subs	r3, r3, r2
			drawFastVLine(x0, y1, y0 - y1 + 1, color);
   172e4:	b21b      	sxth	r3, r3
}
   172e6:	b007      	add	sp, #28
   172e8:	ecbd 8b02 	vpop	{d8}
   172ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			drawFastVLine(x0, y1, y0 - y1 + 1, color);
   172f0:	f7fe bf2e 	b.w	16150 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)>
	  		drawFastVLine(x, y, h, color);
   172f4:	4631      	mov	r1, r6
   172f6:	4638      	mov	r0, r7
   172f8:	4623      	mov	r3, r4
   172fa:	ed8d 8a00 	vstr	s16, [sp]
   172fe:	f7fe ff27 	bl	16150 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)>
	  	if (_use_fbtft) {
   17302:	f897 00dc 	ldrb.w	r0, [r7, #220]	; 0xdc
		x+=_originx;
   17306:	b2b6      	uxth	r6, r6
	  		return;
   17308:	e561      	b.n	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>
	  		drawFastHLine(x, y, w, color);
   1730a:	4632      	mov	r2, r6
   1730c:	4638      	mov	r0, r7
   1730e:	4623      	mov	r3, r4
   17310:	4641      	mov	r1, r8
   17312:	ed8d 8a00 	vstr	s16, [sp]
	    y+=_originy;
   17316:	b2b6      	uxth	r6, r6
	  		drawFastHLine(x, y, w, color);
   17318:	f7ff f806 	bl	16328 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)>
	  	if (_use_fbtft) {
   1731c:	f897 00dc 	ldrb.w	r0, [r7, #220]	; 0xdc
	  		return;
   17320:	e65d      	b.n	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
   17322:	eba2 030c 	sub.w	r3, r2, ip
   17326:	ed8d 8a12 	vstr	s16, [sp, #72]	; 0x48
   1732a:	4662      	mov	r2, ip
   1732c:	3301      	adds	r3, #1
   1732e:	e7d9      	b.n	172e4 <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x6d4>
}
   17330:	b007      	add	sp, #28
   17332:	ecbd 8b02 	vpop	{d8}
   17336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			drawPixel(x0, y0, color);
   1733a:	f7fe be4d 	b.w	15fd8 <ST7735_t3::drawPixel(short, short, unsigned short)>
        writecommand(ST7735_CASET); // Column addr set
   1733e:	4638      	mov	r0, r7
   17340:	212a      	movs	r1, #42	; 0x2a
   17342:	f7fd feb1 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   17346:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
   1734a:	4421      	add	r1, r4
   1734c:	b289      	uxth	r1, r1
   1734e:	f7fe fa01 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   17352:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
   17356:	18e1      	adds	r1, r4, r3
   17358:	b289      	uxth	r1, r1
   1735a:	f7fe f9fb 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   1735e:	212b      	movs	r1, #43	; 0x2b
   17360:	f7fd fea2 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   17364:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
   17368:	4441      	add	r1, r8
   1736a:	b289      	uxth	r1, r1
   1736c:	f7fe f9f2 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   17370:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
   17374:	eb08 0103 	add.w	r1, r8, r3
   17378:	b289      	uxth	r1, r1
   1737a:	f7fe f9eb 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
	  	}
	  	#endif
		setAddr(x, y, x, y);
		writecommand(ST7735_RAMWR);
   1737e:	212c      	movs	r1, #44	; 0x2c
   17380:	f7fd fe92 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		writedata16(color);
   17384:	ee18 1a10 	vmov	r1, s16
   17388:	f7fe f9e4 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
	  	if (_use_fbtft) {
   1738c:	f897 00dc 	ldrb.w	r0, [r7, #220]	; 0xdc
   17390:	e51d      	b.n	16dce <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1be>
        writecommand(ST7735_CASET); // Column addr set
   17392:	4638      	mov	r0, r7
   17394:	212a      	movs	r1, #42	; 0x2a
   17396:	f7fd fe87 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   1739a:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
   1739e:	4421      	add	r1, r4
   173a0:	b289      	uxth	r1, r1
   173a2:	f7fe f9d7 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   173a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
   173aa:	18e1      	adds	r1, r4, r3
   173ac:	b289      	uxth	r1, r1
   173ae:	f7fe f9d1 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   173b2:	212b      	movs	r1, #43	; 0x2b
   173b4:	f7fd fe78 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   173b8:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
   173bc:	4441      	add	r1, r8
   173be:	b289      	uxth	r1, r1
   173c0:	f7fe f9c8 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   173c4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
   173c8:	eb08 0103 	add.w	r1, r8, r3
   173cc:	b289      	uxth	r1, r1
   173ce:	f7fe f9c1 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		writecommand(ST7735_RAMWR);
   173d2:	212c      	movs	r1, #44	; 0x2c
   173d4:	f7fd fe68 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		writedata16(color);
   173d8:	ee18 1a10 	vmov	r1, s16
   173dc:	f7fe f9ba 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
	  	if (_use_fbtft) {
   173e0:	f897 00dc 	ldrb.w	r0, [r7, #220]	; 0xdc
   173e4:	e5fb      	b.n	16fde <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ce>
		for (; x0<=x1; x0++) {
   173e6:	4643      	mov	r3, r8
   173e8:	e501      	b.n	16dee <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x1de>
		for (; x0<=x1; x0++) {
   173ea:	4643      	mov	r3, r8
   173ec:	e607      	b.n	16ffe <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x3ee>
	  		drawFastVLine(x, y, h, color);
   173ee:	4623      	mov	r3, r4
   173f0:	4642      	mov	r2, r8
   173f2:	4631      	mov	r1, r6
   173f4:	4638      	mov	r0, r7
   173f6:	ed8d 8a00 	vstr	s16, [sp]
   173fa:	f7fe fea9 	bl	16150 <ST7735_t3::drawFastVLine(short, short, short, unsigned short)>
  	if (!_use_fbtft) {
   173fe:	f897 e0dc 	ldrb.w	lr, [r7, #220]	; 0xdc
	  		return;
   17402:	e55c      	b.n	16ebe <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2ae>
	  		drawFastHLine(x, y, w, color);
   17404:	4623      	mov	r3, r4
   17406:	4632      	mov	r2, r6
   17408:	4641      	mov	r1, r8
   1740a:	4638      	mov	r0, r7
   1740c:	ed8d 8a00 	vstr	s16, [sp]
   17410:	f7fe ff8a 	bl	16328 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)>
   17414:	f897 e0dc 	ldrb.w	lr, [r7, #220]	; 0xdc
	  		return;
   17418:	e551      	b.n	16ebe <ST7735_t3::drawLine(short, short, short, short, unsigned short)+0x2ae>
   1741a:	bf00      	nop

0001741c <ST7735_t3::setCursor(short, short, bool)>:
	if (x == ST7735_t3::CENTER) {
   1741c:	f242 7c0e 	movw	ip, #9998	; 0x270e
	_center_x_text = autoCenter;	// remember the state. 
   17420:	7383      	strb	r3, [r0, #14]
	_center_y_text = autoCenter;	// remember the state. 
   17422:	73c3      	strb	r3, [r0, #15]
	if (x == ST7735_t3::CENTER) {
   17424:	4561      	cmp	r1, ip
   17426:	d107      	bne.n	17438 <ST7735_t3::setCursor(short, short, bool)+0x1c>
		x = _width/2;
   17428:	f9b0 1026 	ldrsh.w	r1, [r0, #38]	; 0x26
		_center_x_text = true;
   1742c:	2301      	movs	r3, #1
		x = _width/2;
   1742e:	2900      	cmp	r1, #0
		_center_x_text = true;
   17430:	7383      	strb	r3, [r0, #14]
		x = _width/2;
   17432:	bfb8      	it	lt
   17434:	18c9      	addlt	r1, r1, r3
   17436:	1049      	asrs	r1, r1, #1
	if (y == ST7735_t3::CENTER) {
   17438:	f242 730e 	movw	r3, #9998	; 0x270e
   1743c:	429a      	cmp	r2, r3
   1743e:	d107      	bne.n	17450 <ST7735_t3::setCursor(short, short, bool)+0x34>
		y = _height/2;
   17440:	f9b0 2028 	ldrsh.w	r2, [r0, #40]	; 0x28
		_center_y_text = true;
   17444:	2301      	movs	r3, #1
		y = _height/2;
   17446:	2a00      	cmp	r2, #0
		_center_y_text = true;
   17448:	73c3      	strb	r3, [r0, #15]
		y = _height/2;
   1744a:	bfb8      	it	lt
   1744c:	18d2      	addlt	r2, r2, r3
   1744e:	1052      	asrs	r2, r2, #1
	if (x < 0) x = 0;
   17450:	2900      	cmp	r1, #0
   17452:	db37      	blt.n	174c4 <ST7735_t3::setCursor(short, short, bool)+0xa8>
	else if (x >= _width) x = _width - 1;
   17454:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
   17458:	428b      	cmp	r3, r1
   1745a:	dd1a      	ble.n	17492 <ST7735_t3::setCursor(short, short, bool)+0x76>
	if (y < 0) y = 0;
   1745c:	2a00      	cmp	r2, #0
	cursor_x = x;
   1745e:	8141      	strh	r1, [r0, #10]
	if (y < 0) y = 0;
   17460:	db1c      	blt.n	1749c <ST7735_t3::setCursor(short, short, bool)+0x80>
	else if (y >= _height) y = _height - 1;
   17462:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
   17466:	4293      	cmp	r3, r2
   17468:	dd10      	ble.n	1748c <ST7735_t3::setCursor(short, short, bool)+0x70>
	if(x>=scroll_x && x<=(scroll_x+scroll_width) && y>=scroll_y && y<=(scroll_y+scroll_height)){
   1746a:	f9b0 302a 	ldrsh.w	r3, [r0, #42]	; 0x2a
	cursor_y = y;
   1746e:	8182      	strh	r2, [r0, #12]
	if(x>=scroll_x && x<=(scroll_x+scroll_width) && y>=scroll_y && y<=(scroll_y+scroll_height)){
   17470:	428b      	cmp	r3, r1
   17472:	dc04      	bgt.n	1747e <ST7735_t3::setCursor(short, short, bool)+0x62>
   17474:	f9b0 c02e 	ldrsh.w	ip, [r0, #46]	; 0x2e
   17478:	4463      	add	r3, ip
   1747a:	4299      	cmp	r1, r3
   1747c:	dd10      	ble.n	174a0 <ST7735_t3::setCursor(short, short, bool)+0x84>
		isWritingScrollArea = false;
   1747e:	2200      	movs	r2, #0
	_gfx_last_char_x_write = 0;	// Don't use cached data here
   17480:	2300      	movs	r3, #0
   17482:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
   17486:	f8a0 3070 	strh.w	r3, [r0, #112]	; 0x70
}
   1748a:	4770      	bx	lr
	else if (y >= _height) y = _height - 1;
   1748c:	3b01      	subs	r3, #1
   1748e:	b21a      	sxth	r2, r3
   17490:	e7eb      	b.n	1746a <ST7735_t3::setCursor(short, short, bool)+0x4e>
	else if (x >= _width) x = _width - 1;
   17492:	1e59      	subs	r1, r3, #1
	if (y < 0) y = 0;
   17494:	2a00      	cmp	r2, #0
	else if (x >= _width) x = _width - 1;
   17496:	b209      	sxth	r1, r1
	cursor_x = x;
   17498:	8141      	strh	r1, [r0, #10]
	if (y < 0) y = 0;
   1749a:	dae2      	bge.n	17462 <ST7735_t3::setCursor(short, short, bool)+0x46>
   1749c:	2200      	movs	r2, #0
   1749e:	e7e4      	b.n	1746a <ST7735_t3::setCursor(short, short, bool)+0x4e>
	if(x>=scroll_x && x<=(scroll_x+scroll_width) && y>=scroll_y && y<=(scroll_y+scroll_height)){
   174a0:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
   174a4:	4293      	cmp	r3, r2
   174a6:	dcea      	bgt.n	1747e <ST7735_t3::setCursor(short, short, bool)+0x62>
   174a8:	f9b0 1030 	ldrsh.w	r1, [r0, #48]	; 0x30
   174ac:	440b      	add	r3, r1
   174ae:	429a      	cmp	r2, r3
	_gfx_last_char_x_write = 0;	// Don't use cached data here
   174b0:	f04f 0300 	mov.w	r3, #0
	if(x>=scroll_x && x<=(scroll_x+scroll_width) && y>=scroll_y && y<=(scroll_y+scroll_height)){
   174b4:	bfcc      	ite	gt
   174b6:	2200      	movgt	r2, #0
   174b8:	2201      	movle	r2, #1
	_gfx_last_char_x_write = 0;	// Don't use cached data here
   174ba:	f8a0 3070 	strh.w	r3, [r0, #112]	; 0x70
   174be:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
}
   174c2:	4770      	bx	lr
	if (x < 0) x = 0;
   174c4:	2100      	movs	r1, #0
   174c6:	e7c9      	b.n	1745c <ST7735_t3::setCursor(short, short, bool)+0x40>

000174c8 <ST7735_t3::setTextSize(unsigned char, unsigned char)>:
    textsize_x = (s_x > 0) ? s_x : 1;
   174c8:	2901      	cmp	r1, #1
   174ca:	bf38      	it	cc
   174cc:	2101      	movcc	r1, #1
    textsize_y = (s_y > 0) ? s_y : 1;
   174ce:	2a01      	cmp	r2, #1
   174d0:	bf38      	it	cc
   174d2:	2201      	movcc	r2, #1
    textsize_x = (s_x > 0) ? s_x : 1;
   174d4:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    textsize_y = (s_y > 0) ? s_y : 1;
   174d8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
}
   174dc:	4770      	bx	lr
   174de:	bf00      	nop

000174e0 <ST7735_t3::setTextColor(unsigned short)>:
  textcolor = textbgcolor = c;
   174e0:	86c1      	strh	r1, [r0, #54]	; 0x36
   174e2:	8681      	strh	r1, [r0, #52]	; 0x34
}
   174e4:	4770      	bx	lr
   174e6:	bf00      	nop

000174e8 <ST7735_t3::scrollTextArea(unsigned char)>:
void ST7735_t3::scrollTextArea(uint8_t scrollSize){
   174e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174ec:	b083      	sub	sp, #12
   174ee:	4689      	mov	r9, r1
   174f0:	4683      	mov	fp, r0
	uint16_t awColors[scroll_width];
   174f2:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
	for (int y=scroll_y+scrollSize; y < (scroll_y+scroll_height); y++) { 
   174f6:	f9b0 202c 	ldrsh.w	r2, [r0, #44]	; 0x2c
void ST7735_t3::scrollTextArea(uint8_t scrollSize){
   174fa:	af02      	add	r7, sp, #8
	for (int y=scroll_y+scrollSize; y < (scroll_y+scroll_height); y++) { 
   174fc:	f9b0 1030 	ldrsh.w	r1, [r0, #48]	; 0x30
	uint16_t awColors[scroll_width];
   17500:	0058      	lsls	r0, r3, #1
	for (int y=scroll_y+scrollSize; y < (scroll_y+scroll_height); y++) { 
   17502:	eb02 0509 	add.w	r5, r2, r9
	uint16_t awColors[scroll_width];
   17506:	3007      	adds	r0, #7
	for (int y=scroll_y+scrollSize; y < (scroll_y+scroll_height); y++) { 
   17508:	4589      	cmp	r9, r1
	uint16_t awColors[scroll_width];
   1750a:	f020 0007 	bic.w	r0, r0, #7
   1750e:	ebad 0d00 	sub.w	sp, sp, r0
	for (int y=scroll_y+scrollSize; y < (scroll_y+scroll_height); y++) { 
   17512:	da4e      	bge.n	175b2 <ST7735_t3::scrollTextArea(unsigned char)+0xca>
   17514:	eba5 0409 	sub.w	r4, r5, r9
   17518:	ae02      	add	r6, sp, #8
	fillRect(scroll_x, (scroll_y+scroll_height)-scrollSize, scroll_width, scrollSize, scrollbgcolor);
   1751a:	fa1f fa89 	uxth.w	sl, r9
		writeRect(scroll_x, y-scrollSize, scroll_width, 1, awColors);  
   1751e:	f04f 0801 	mov.w	r8, #1
   17522:	b2a4      	uxth	r4, r4
   17524:	e011      	b.n	1754a <ST7735_t3::scrollTextArea(unsigned char)+0x62>
   17526:	b222      	sxth	r2, r4
   17528:	4658      	mov	r0, fp
	for (int y=scroll_y+scrollSize; y < (scroll_y+scroll_height); y++) { 
   1752a:	3501      	adds	r5, #1
   1752c:	3401      	adds	r4, #1
		writeRect(scroll_x, y-scrollSize, scroll_width, 1, awColors);  
   1752e:	e9cd 8600 	strd	r8, r6, [sp]
   17532:	f7ff f9c9 	bl	168c8 <ST7735_t3::writeRect(short, short, short, short, unsigned short const*)>
	for (int y=scroll_y+scrollSize; y < (scroll_y+scroll_height); y++) { 
   17536:	f9bb 202c 	ldrsh.w	r2, [fp, #44]	; 0x2c
   1753a:	f9bb 1030 	ldrsh.w	r1, [fp, #48]	; 0x30
   1753e:	b2a4      	uxth	r4, r4
   17540:	440a      	add	r2, r1
   17542:	42aa      	cmp	r2, r5
   17544:	dd23      	ble.n	1758e <ST7735_t3::scrollTextArea(unsigned char)+0xa6>
	fillRect(scroll_x, (scroll_y+scroll_height)-scrollSize, scroll_width, scrollSize, scrollbgcolor);
   17546:	f9bb 302e 	ldrsh.w	r3, [fp, #46]	; 0x2e
	if (_use_fbtft) {
   1754a:	f89b 00dc 	ldrb.w	r0, [fp, #220]	; 0xdc
   1754e:	b2aa      	uxth	r2, r5
		readRect(scroll_x, y, scroll_width, 1, awColors); 
   17550:	f9bb 102a 	ldrsh.w	r1, [fp, #42]	; 0x2a
	if (_use_fbtft) {
   17554:	2800      	cmp	r0, #0
   17556:	d0e6      	beq.n	17526 <ST7735_t3::scrollTextArea(unsigned char)+0x3e>
	x+=_originx;
   17558:	f8bb 0018 	ldrh.w	r0, [fp, #24]
			for (int i = 0 ;i < w; i++) {
   1755c:	2b00      	cmp	r3, #0
	y+=_originy;
   1755e:	f8bb c01a 	ldrh.w	ip, [fp, #26]
	x+=_originx;
   17562:	4408      	add	r0, r1
	y+=_originy;
   17564:	4462      	add	r2, ip
		uint16_t * pfbPixel_row = &_pfbtft[ y*_width + x];
   17566:	f8bb c026 	ldrh.w	ip, [fp, #38]	; 0x26
   1756a:	b200      	sxth	r0, r0
   1756c:	fb12 020c 	smlabb	r2, r2, ip, r0
   17570:	f8db 00d8 	ldr.w	r0, [fp, #216]	; 0xd8
   17574:	eb00 0042 	add.w	r0, r0, r2, lsl #1
			for (int i = 0 ;i < w; i++) {
   17578:	ddd5      	ble.n	17526 <ST7735_t3::scrollTextArea(unsigned char)+0x3e>
   1757a:	eb06 0e43 	add.w	lr, r6, r3, lsl #1
   1757e:	4632      	mov	r2, r6
				*pcolors++ = *pfbPixel++;
   17580:	f830 cb02 	ldrh.w	ip, [r0], #2
   17584:	f822 cb02 	strh.w	ip, [r2], #2
			for (int i = 0 ;i < w; i++) {
   17588:	4596      	cmp	lr, r2
   1758a:	d1f9      	bne.n	17580 <ST7735_t3::scrollTextArea(unsigned char)+0x98>
   1758c:	e7cb      	b.n	17526 <ST7735_t3::scrollTextArea(unsigned char)+0x3e>
	fillRect(scroll_x, (scroll_y+scroll_height)-scrollSize, scroll_width, scrollSize, scrollbgcolor);
   1758e:	f9bb 302e 	ldrsh.w	r3, [fp, #46]	; 0x2e
   17592:	f8bb 4038 	ldrh.w	r4, [fp, #56]	; 0x38
   17596:	eba2 020a 	sub.w	r2, r2, sl
   1759a:	f9bb 102a 	ldrsh.w	r1, [fp, #42]	; 0x2a
   1759e:	4658      	mov	r0, fp
   175a0:	b212      	sxth	r2, r2
   175a2:	e9cd 9400 	strd	r9, r4, [sp]
   175a6:	f7fe ffbd 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
}
   175aa:	3704      	adds	r7, #4
   175ac:	46bd      	mov	sp, r7
   175ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fillRect(scroll_x, (scroll_y+scroll_height)-scrollSize, scroll_width, scrollSize, scrollbgcolor);
   175b2:	fa1f fa89 	uxth.w	sl, r9
   175b6:	440a      	add	r2, r1
   175b8:	e7eb      	b.n	17592 <ST7735_t3::scrollTextArea(unsigned char)+0xaa>
   175ba:	bf00      	nop

000175bc <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>:
{
   175bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175c0:	4690      	mov	r8, r2
	if((x >= _width)            || // Clip right
   175c2:	f9b0 2026 	ldrsh.w	r2, [r0, #38]	; 0x26
{
   175c6:	ed2d 8b06 	vpush	{d8-d10}
   175ca:	b091      	sub	sp, #68	; 0x44
	if((x >= _width)            || // Clip right
   175cc:	428a      	cmp	r2, r1
{
   175ce:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
   175d2:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
   175d6:	f8bd 9084 	ldrh.w	r9, [sp, #132]	; 0x84
   175da:	f89d a088 	ldrb.w	sl, [sp, #136]	; 0x88
   175de:	9404      	str	r4, [sp, #16]
	if((x >= _width)            || // Clip right
   175e0:	f340 817d 	ble.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
   175e4:	460f      	mov	r7, r1
   175e6:	f9b0 1028 	ldrsh.w	r1, [r0, #40]	; 0x28
   175ea:	4606      	mov	r6, r0
   175ec:	4541      	cmp	r1, r8
   175ee:	f340 8176 	ble.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
	   ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
   175f2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
   175f6:	fa0f f08a 	sxth.w	r0, sl
   175fa:	ee08 0a10 	vmov	s16, r0
   175fe:	eb07 0041 	add.w	r0, r7, r1, lsl #1
   17602:	0049      	lsls	r1, r1, #1
	   (y >= _height)           || // Clip bottom
   17604:	2800      	cmp	r0, #0
   17606:	f340 816a 	ble.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
	   ((y + 8 * size_y - 1) < 0))   // Clip top   TODO: is this correct?
   1760a:	4620      	mov	r0, r4
   1760c:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   17610:	b205      	sxth	r5, r0
	   ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
   17612:	2c00      	cmp	r4, #0
	   ((y + 8 * size_y - 1) < 0))   // Clip top   TODO: is this correct?
   17614:	ea4f 00c0 	mov.w	r0, r0, lsl #3
   17618:	9503      	str	r5, [sp, #12]
	   ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
   1761a:	f340 8160 	ble.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
	if (fgcolor == bgcolor) {
   1761e:	45cb      	cmp	fp, r9
   17620:	f000 80dc 	beq.w	177dc <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x220>
		x+=_originx;
   17624:	8b34      	ldrh	r4, [r6, #24]
		y+=_originy;
   17626:	f9b6 c01a 	ldrsh.w	ip, [r6, #26]
		x+=_originx;
   1762a:	4427      	add	r7, r4
		if((x >= _displayclipx2)            || // Clip right
   1762c:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
		x+=_originx;
   17630:	b23d      	sxth	r5, r7
		if((x >= _displayclipx2)            || // Clip right
   17632:	9403      	str	r4, [sp, #12]
		x+=_originx;
   17634:	b2bf      	uxth	r7, r7
		if((x >= _displayclipx2)            || // Clip right
   17636:	42ac      	cmp	r4, r5
		x+=_originx;
   17638:	9509      	str	r5, [sp, #36]	; 0x24
   1763a:	9705      	str	r7, [sp, #20]
		if((x >= _displayclipx2)            || // Clip right
   1763c:	f340 814f 	ble.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
		y+=_originy;
   17640:	44c4      	add	ip, r8
			 (y >= _displayclipy2)           || // Clip bottom
   17642:	f9b6 4022 	ldrsh.w	r4, [r6, #34]	; 0x22
		y+=_originy;
   17646:	fa0f f78c 	sxth.w	r7, ip
			 (y >= _displayclipy2)           || // Clip bottom
   1764a:	9406      	str	r4, [sp, #24]
		y+=_originy;
   1764c:	fa1f f88c 	uxth.w	r8, ip
		if((x >= _displayclipx2)            || // Clip right
   17650:	42bc      	cmp	r4, r7
   17652:	f340 8144 	ble.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
			 ((x + 6 * size_x - 1) < _displayclipx1) || // Clip left  TODO: this is not correct
   17656:	4429      	add	r1, r5
   17658:	f9b6 c01c 	ldrsh.w	ip, [r6, #28]
   1765c:	462c      	mov	r4, r5
			 (y >= _displayclipy2)           || // Clip bottom
   1765e:	4561      	cmp	r1, ip
   17660:	f340 813d 	ble.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
			 ((y + 8 * size_y - 1) < _displayclipy1))   // Clip top   TODO: this is not correct
   17664:	4438      	add	r0, r7
   17666:	f9b6 e01e 	ldrsh.w	lr, [r6, #30]
   1766a:	9707      	str	r7, [sp, #28]
			 ((x + 6 * size_x - 1) < _displayclipx1) || // Clip left  TODO: this is not correct
   1766c:	4570      	cmp	r0, lr
   1766e:	f340 8136 	ble.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
		if (_use_fbtft) {
   17672:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
   17676:	2900      	cmp	r1, #0
   17678:	f000 822e 	beq.w	17ad8 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x51c>
    if (x < _changed_min_x)
   1767c:	f9b6 40e8 	ldrsh.w	r4, [r6, #232]	; 0xe8
      updateChangedRange(
   17680:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
   17684:	9804      	ldr	r0, [sp, #16]
   17686:	42ac      	cmp	r4, r5
   17688:	ea4f 0141 	mov.w	r1, r1, lsl #1
    if (y < _changed_min_y)
   1768c:	f9b6 40ec 	ldrsh.w	r4, [r6, #236]	; 0xec
   17690:	ea4f 00c0 	mov.w	r0, r0, lsl #3
    x += w - 1;
   17694:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
      _changed_min_x = x;
   17698:	bfc8      	it	gt
   1769a:	f8a6 50e8 	strhgt.w	r5, [r6, #232]	; 0xe8
    if (y < _changed_min_y)
   1769e:	42bc      	cmp	r4, r7
    x += w - 1;
   176a0:	9c05      	ldr	r4, [sp, #20]
    y += h - 1;
   176a2:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   176a6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    x += w - 1;
   176aa:	440c      	add	r4, r1
      _changed_min_y = y;
   176ac:	bfc8      	it	gt
   176ae:	f8a6 70ec 	strhgt.w	r7, [r6, #236]	; 0xec
    y += h - 1;
   176b2:	4440      	add	r0, r8
    x += w - 1;
   176b4:	b221      	sxth	r1, r4
    if (x > _changed_max_x)
   176b6:	f9b6 40ea 	ldrsh.w	r4, [r6, #234]	; 0xea
    y += h - 1;
   176ba:	b200      	sxth	r0, r0
    if (x > _changed_max_x)
   176bc:	428c      	cmp	r4, r1
							if (glcdfont[c * 5 + xc] & mask) {
   176be:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   176c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
      _changed_max_x = x;
   176c6:	bfb8      	it	lt
   176c8:	f8a6 10ea 	strhlt.w	r1, [r6, #234]	; 0xea
    if (y > _changed_max_y)
   176cc:	f9b6 10ee 	ldrsh.w	r1, [r6, #238]	; 0xee
   176d0:	b2db      	uxtb	r3, r3
   176d2:	940d      	str	r4, [sp, #52]	; 0x34
   176d4:	4281      	cmp	r1, r0
			uint16_t * pfbPixel_row = &_pfbtft[ y*_width + x];
   176d6:	9909      	ldr	r1, [sp, #36]	; 0x24
      _changed_max_y = y;
   176d8:	bfb8      	it	lt
   176da:	f8a6 00ee 	strhlt.w	r0, [r6, #238]	; 0xee
   176de:	fb07 1002 	mla	r0, r7, r2, r1
   176e2:	f8d6 10d8 	ldr.w	r1, [r6, #216]	; 0xd8
   176e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
			for (yc=0; (yc < 8) && (y < _displayclipy2); yc++) {
   176ea:	1c59      	adds	r1, r3, #1
   176ec:	0049      	lsls	r1, r1, #1
   176ee:	4683      	mov	fp, r0
   176f0:	9105      	str	r1, [sp, #20]
   176f2:	49b3      	ldr	r1, [pc, #716]	; (179c0 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x404>)
   176f4:	3105      	adds	r1, #5
   176f6:	4421      	add	r1, r4
   176f8:	9103      	str	r1, [sp, #12]
							if (glcdfont[c * 5 + xc] & mask) {
   176fa:	2108      	movs	r1, #8
   176fc:	910f      	str	r1, [sp, #60]	; 0x3c
		uint8_t mask = 0x01;
   176fe:	2101      	movs	r1, #1
   17700:	910c      	str	r1, [sp, #48]	; 0x30
   17702:	b299      	uxth	r1, r3
   17704:	3301      	adds	r3, #1
   17706:	9106      	str	r1, [sp, #24]
   17708:	9307      	str	r3, [sp, #28]
				for (yr=0; (yr < size_y) && (y < _displayclipy2); yr++) {
   1770a:	9b04      	ldr	r3, [sp, #16]
   1770c:	2b00      	cmp	r3, #0
   1770e:	f000 81d2 	beq.w	17ab6 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x4fa>
   17712:	9b04      	ldr	r3, [sp, #16]
   17714:	443b      	add	r3, r7
   17716:	b21b      	sxth	r3, r3
   17718:	9308      	str	r3, [sp, #32]
   1771a:	e00c      	b.n	17736 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x17a>
					pfbPixel_row += _width; // setup pointer to 
   1771c:	3701      	adds	r7, #1
				for (yr=0; (yr < size_y) && (y < _displayclipy2); yr++) {
   1771e:	9b08      	ldr	r3, [sp, #32]
					pfbPixel_row += _width; // setup pointer to 
   17720:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
					y++;
   17724:	b23f      	sxth	r7, r7
				for (yr=0; (yr < size_y) && (y < _displayclipy2); yr++) {
   17726:	429f      	cmp	r7, r3
   17728:	f000 81c5 	beq.w	17ab6 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x4fa>
   1772c:	f9b6 3022 	ldrsh.w	r3, [r6, #34]	; 0x22
   17730:	42bb      	cmp	r3, r7
   17732:	f340 80d4 	ble.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
					if (y >= _displayclipy1) {
   17736:	f9b6 301e 	ldrsh.w	r3, [r6, #30]
   1773a:	42bb      	cmp	r3, r7
   1773c:	dcee      	bgt.n	1771c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x160>
   1773e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17740:	46dc      	mov	ip, fp
   17742:	4a9f      	ldr	r2, [pc, #636]	; (179c0 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x404>)
   17744:	e9cd 7b0a 	strd	r7, fp, [sp, #40]	; 0x28
   17748:	eb03 0e02 	add.w	lr, r3, r2
   1774c:	4657      	mov	r7, sl
   1774e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17750:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   17754:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
							if (glcdfont[c * 5 + xc] & mask) {
   17758:	f81e 2b01 	ldrb.w	r2, [lr], #1
   1775c:	ea12 0f0a 	tst.w	r2, sl
   17760:	bf14      	ite	ne
   17762:	46d8      	movne	r8, fp
   17764:	46c8      	moveq	r8, r9
							for (xr=0; xr < size_x; xr++) {
   17766:	b1cf      	cbz	r7, 1779c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1e0>
   17768:	b29d      	uxth	r5, r3
   1776a:	9907      	ldr	r1, [sp, #28]
   1776c:	4662      	mov	r2, ip
   1776e:	186c      	adds	r4, r5, r1
   17770:	b224      	sxth	r4, r4
								if ((x >= _displayclipx1) && (x < _displayclipx2)) {
   17772:	f9b6 001c 	ldrsh.w	r0, [r6, #28]
   17776:	1c59      	adds	r1, r3, #1
   17778:	4298      	cmp	r0, r3
   1777a:	dc05      	bgt.n	17788 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1cc>
   1777c:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   17780:	4298      	cmp	r0, r3
									*pfbPixel = color;
   17782:	bfc8      	it	gt
   17784:	f8a2 8000 	strhgt.w	r8, [r2]
   17788:	b20b      	sxth	r3, r1
								pfbPixel++;
   1778a:	3202      	adds	r2, #2
							for (xr=0; xr < size_x; xr++) {
   1778c:	42a3      	cmp	r3, r4
   1778e:	d1f0      	bne.n	17772 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1b6>
   17790:	9b06      	ldr	r3, [sp, #24]
   17792:	441d      	add	r5, r3
								pfbPixel++;
   17794:	9b05      	ldr	r3, [sp, #20]
   17796:	3501      	adds	r5, #1
   17798:	449c      	add	ip, r3
   1779a:	b22b      	sxth	r3, r5
						for (xc=0; xc < 5; xc++) {
   1779c:	9a03      	ldr	r2, [sp, #12]
   1779e:	4572      	cmp	r2, lr
   177a0:	d1da      	bne.n	17758 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x19c>
						for (xr=0; xr < size_x; xr++) {
   177a2:	46ba      	mov	sl, r7
   177a4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   177a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   177aa:	f1ba 0f00 	cmp.w	sl, #0
   177ae:	d012      	beq.n	177d6 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x21a>
   177b0:	eb03 000a 	add.w	r0, r3, sl
   177b4:	b200      	sxth	r0, r0
							if ((x >= _displayclipx1) && (x < _displayclipx2)) {
   177b6:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
   177ba:	1c5a      	adds	r2, r3, #1
   177bc:	4299      	cmp	r1, r3
   177be:	dc05      	bgt.n	177cc <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x210>
   177c0:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
   177c4:	4299      	cmp	r1, r3
								*pfbPixel = bgcolor;
   177c6:	bfc8      	it	gt
   177c8:	f8ac 9000 	strhgt.w	r9, [ip]
   177cc:	b213      	sxth	r3, r2
							pfbPixel++;
   177ce:	f10c 0c02 	add.w	ip, ip, #2
						for (xr=0; xr < size_x; xr++) {
   177d2:	4283      	cmp	r3, r0
   177d4:	d1ef      	bne.n	177b6 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x1fa>
   177d6:	f9b6 2026 	ldrsh.w	r2, [r6, #38]	; 0x26
   177da:	e79f      	b.n	1771c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x160>
		if ((size_x == 1) && (size_y == 1)) {
   177dc:	f1ba 0f01 	cmp.w	sl, #1
					if (glcdfont[c * 5 + xoff] & mask) line |= 1;
   177e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		if ((size_x == 1) && (size_y == 1)) {
   177e4:	d102      	bne.n	177ec <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x230>
   177e6:	9a04      	ldr	r2, [sp, #16]
   177e8:	2a01      	cmp	r2, #1
   177ea:	d07d      	beq.n	178e8 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x32c>
   177ec:	4a74      	ldr	r2, [pc, #464]	; (179c0 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x404>)
						fillRect(x + xoff * size_x, y + yoff * size_y,
   177ee:	fa1f f18a 	uxth.w	r1, sl
   177f2:	ea4f 004a 	mov.w	r0, sl, lsl #1
					if (glcdfont[c * 5 + xoff] & mask) line |= 1;
   177f6:	930a      	str	r3, [sp, #40]	; 0x28
   177f8:	f102 0905 	add.w	r9, r2, #5
   177fc:	9207      	str	r2, [sp, #28]
						fillRect(x + xoff * size_x, y + yoff * size_y,
   177fe:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   17802:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   17806:	444b      	add	r3, r9
   17808:	46b0      	mov	r8, r6
   1780a:	ee08 2a90 	vmov	s17, r2
						fillRect(x + xoff * size_x, y + yoff * size_y,
   1780e:	ea4f 028a 	mov.w	r2, sl, lsl #2
   17812:	465e      	mov	r6, fp
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17814:	ee09 0a10 	vmov	s18, r0
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17818:	ee0a 2a10 	vmov	s20, r2
						fillRect(x + xoff * size_x, y + yoff * size_y,
   1781c:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
			for (yoff=0; yoff < 8; yoff++) {
   17820:	f04f 0a00 	mov.w	sl, #0
			uint8_t mask = 0x01;
   17824:	f04f 0901 	mov.w	r9, #1
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17828:	ee09 2a90 	vmov	s19, r2
   1782c:	468b      	mov	fp, r1
   1782e:	2208      	movs	r2, #8
   17830:	4655      	mov	r5, sl
   17832:	469a      	mov	sl, r3
   17834:	9208      	str	r2, [sp, #32]
				for (xoff=0; xoff < 5; xoff++) {
   17836:	9b07      	ldr	r3, [sp, #28]
   17838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1783a:	189a      	adds	r2, r3, r2
				uint8_t line = 0;
   1783c:	2300      	movs	r3, #0
					if (glcdfont[c * 5 + xoff] & mask) line |= 1;
   1783e:	f812 1b01 	ldrb.w	r1, [r2], #1
   17842:	ea11 0f09 	tst.w	r1, r9
   17846:	bf18      	it	ne
   17848:	f043 0301 	orrne.w	r3, r3, #1
				for (xoff=0; xoff < 5; xoff++) {
   1784c:	4592      	cmp	sl, r2
					line <<= 1;
   1784e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17852:	b2db      	uxtb	r3, r3
				for (xoff=0; xoff < 5; xoff++) {
   17854:	d1f3      	bne.n	1783e <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x282>
				while (line) {
   17856:	085c      	lsrs	r4, r3, #1
   17858:	2b00      	cmp	r3, #0
   1785a:	f000 8250 	beq.w	17cfe <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x742>
					if (line == 0x1F) {
   1785e:	2c1f      	cmp	r4, #31
   17860:	f000 810f 	beq.w	17a82 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x4c6>
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17864:	9b09      	ldr	r3, [sp, #36]	; 0x24
					} else if (line == 0x1E) {
   17866:	2c1e      	cmp	r4, #30
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17868:	9a04      	ldr	r2, [sp, #16]
   1786a:	fb02 3205 	mla	r2, r2, r5, r3
   1786e:	b2ab      	uxth	r3, r5
   17870:	b212      	sxth	r2, r2
   17872:	9306      	str	r3, [sp, #24]
					} else if (line == 0x1E) {
   17874:	f000 8246 	beq.w	17d04 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x748>
				xoff = 0;
   17878:	2500      	movs	r5, #0
					} else if ((line & 0x1C) == 0x1C) {
   1787a:	f004 031c 	and.w	r3, r4, #28
					} else if ((line & 0x18) == 0x18) {
   1787e:	f004 0118 	and.w	r1, r4, #24
						xoff += 1;
   17882:	f105 0c01 	add.w	ip, r5, #1
						line <<= 1;
   17886:	0060      	lsls	r0, r4, #1
					} else if ((line & 0x1C) == 0x1C) {
   17888:	2b1c      	cmp	r3, #28
   1788a:	f000 80ab 	beq.w	179e4 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x428>
					} else if ((line & 0x18) == 0x18) {
   1788e:	2918      	cmp	r1, #24
   17890:	f000 80e1 	beq.w	17a56 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x49a>
					} else if ((line & 0x10) == 0x10) {
   17894:	06e3      	lsls	r3, r4, #27
   17896:	d47d      	bmi.n	17994 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3d8>
				while (line) {
   17898:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
						xoff += 1;
   1789c:	fa1f f38c 	uxth.w	r3, ip
   178a0:	fa0f f58c 	sxth.w	r5, ip
				while (line) {
   178a4:	d00e      	beq.n	178c4 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x308>
					} else if (line == 0x1E) {
   178a6:	2c1e      	cmp	r4, #30
   178a8:	d1e7      	bne.n	1787a <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2be>
						fillRect(x + xoff * size_x, y + yoff * size_y,
   178aa:	fb1b f103 	smulbb	r1, fp, r3
   178ae:	b289      	uxth	r1, r1
   178b0:	9b03      	ldr	r3, [sp, #12]
   178b2:	4439      	add	r1, r7
   178b4:	4640      	mov	r0, r8
   178b6:	9601      	str	r6, [sp, #4]
   178b8:	9300      	str	r3, [sp, #0]
   178ba:	b209      	sxth	r1, r1
   178bc:	ee1a 3a10 	vmov	r3, s20
   178c0:	f7fe fe30 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
			for (yoff=0; yoff < 8; yoff++) {
   178c4:	9b08      	ldr	r3, [sp, #32]
				mask = mask << 1;
   178c6:	ea4f 0949 	mov.w	r9, r9, lsl #1
			for (yoff=0; yoff < 8; yoff++) {
   178ca:	9d06      	ldr	r5, [sp, #24]
   178cc:	3b01      	subs	r3, #1
				mask = mask << 1;
   178ce:	fa5f f989 	uxtb.w	r9, r9
			for (yoff=0; yoff < 8; yoff++) {
   178d2:	3501      	adds	r5, #1
   178d4:	b29b      	uxth	r3, r3
   178d6:	b22d      	sxth	r5, r5
   178d8:	9308      	str	r3, [sp, #32]
   178da:	2b00      	cmp	r3, #0
   178dc:	d1ab      	bne.n	17836 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x27a>
}
   178de:	b011      	add	sp, #68	; 0x44
   178e0:	ecbd 8b06 	vpop	{d8-d10}
   178e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178e8:	4a35      	ldr	r2, [pc, #212]	; (179c0 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x404>)
					if (glcdfont[c * 5 + xoff] & mask) line |= 1;
   178ea:	2100      	movs	r1, #0
   178ec:	9305      	str	r3, [sp, #20]
   178ee:	fa1f f888 	uxth.w	r8, r8
   178f2:	f102 0905 	add.w	r9, r2, #5
			uint8_t mask = 0x01;
   178f6:	f04f 0a01 	mov.w	sl, #1
   178fa:	9207      	str	r2, [sp, #28]
   178fc:	4499      	add	r9, r3
   178fe:	465b      	mov	r3, fp
   17900:	46b3      	mov	fp, r6
					if (glcdfont[c * 5 + xoff] & mask) line |= 1;
   17902:	9104      	str	r1, [sp, #16]
   17904:	461e      	mov	r6, r3
				for (xoff=0; xoff < 5; xoff++) {
   17906:	9b07      	ldr	r3, [sp, #28]
   17908:	9a05      	ldr	r2, [sp, #20]
   1790a:	189a      	adds	r2, r3, r2
				uint8_t line = 0;
   1790c:	2300      	movs	r3, #0
					if (glcdfont[c * 5 + xoff] & mask) line |= 1;
   1790e:	f812 1b01 	ldrb.w	r1, [r2], #1
   17912:	ea11 0f0a 	tst.w	r1, sl
   17916:	bf18      	it	ne
   17918:	f043 0301 	orrne.w	r3, r3, #1
				for (xoff=0; xoff < 5; xoff++) {
   1791c:	454a      	cmp	r2, r9
					line <<= 1;
   1791e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17922:	b2db      	uxtb	r3, r3
				for (xoff=0; xoff < 5; xoff++) {
   17924:	d1f3      	bne.n	1790e <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x352>
				while (line) {
   17926:	085c      	lsrs	r4, r3, #1
   17928:	b333      	cbz	r3, 17978 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3bc>
					if (line == 0x1F) {
   1792a:	2c1f      	cmp	r4, #31
   1792c:	f000 80ba 	beq.w	17aa4 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x4e8>
					} else if (line == 0x1E) {
   17930:	2c1e      	cmp	r4, #30
   17932:	f000 81e9 	beq.w	17d08 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x74c>
				xoff = 0;
   17936:	2500      	movs	r5, #0
						drawPixel(x + xoff, y + yoff, fgcolor);
   17938:	fa0f f288 	sxth.w	r2, r8
					} else if ((line & 0x1C) == 0x1C) {
   1793c:	f004 031c 	and.w	r3, r4, #28
						xoff += 1;
   17940:	1c69      	adds	r1, r5, #1
					} else if ((line & 0x18) == 0x18) {
   17942:	f004 0c18 	and.w	ip, r4, #24
						line <<= 1;
   17946:	0060      	lsls	r0, r4, #1
					} else if ((line & 0x1C) == 0x1C) {
   17948:	2b1c      	cmp	r3, #28
						xoff += 1;
   1794a:	b28b      	uxth	r3, r1
					} else if ((line & 0x1C) == 0x1C) {
   1794c:	d060      	beq.n	17a10 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x454>
					} else if ((line & 0x18) == 0x18) {
   1794e:	f1bc 0f18 	cmp.w	ip, #24
   17952:	d06e      	beq.n	17a32 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x476>
					} else if ((line & 0x10) == 0x10) {
   17954:	f014 0f10 	tst.w	r4, #16
   17958:	d134      	bne.n	179c4 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x408>
				while (line) {
   1795a:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
						xoff += 1;
   1795e:	b20d      	sxth	r5, r1
				while (line) {
   17960:	d00a      	beq.n	17978 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3bc>
					} else if (line == 0x1E) {
   17962:	2c1e      	cmp	r4, #30
   17964:	d1ea      	bne.n	1793c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x380>
						drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
   17966:	443b      	add	r3, r7
   17968:	fa0f f288 	sxth.w	r2, r8
   1796c:	4658      	mov	r0, fp
   1796e:	9600      	str	r6, [sp, #0]
   17970:	b219      	sxth	r1, r3
   17972:	2304      	movs	r3, #4
   17974:	f7fe fcd8 	bl	16328 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)>
			for (yoff=0; yoff < 8; yoff++) {
   17978:	9b04      	ldr	r3, [sp, #16]
				mask = mask << 1;
   1797a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
			for (yoff=0; yoff < 8; yoff++) {
   1797e:	f108 0801 	add.w	r8, r8, #1
   17982:	3301      	adds	r3, #1
				mask = mask << 1;
   17984:	fa5f fa8a 	uxtb.w	sl, sl
			for (yoff=0; yoff < 8; yoff++) {
   17988:	fa1f f888 	uxth.w	r8, r8
   1798c:	2b08      	cmp	r3, #8
   1798e:	9304      	str	r3, [sp, #16]
   17990:	d1b9      	bne.n	17906 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x34a>
   17992:	e7a4      	b.n	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17994:	fb0b 7105 	mla	r1, fp, r5, r7
						line <<= 2;
   17998:	00a4      	lsls	r4, r4, #2
						fillRect(x + xoff * size_x, y + yoff * size_y,
   1799a:	b2ad      	uxth	r5, r5
   1799c:	9b03      	ldr	r3, [sp, #12]
						line <<= 2;
   1799e:	b2e4      	uxtb	r4, r4
						fillRect(x + xoff * size_x, y + yoff * size_y,
   179a0:	4640      	mov	r0, r8
						xoff += 2;
   179a2:	3502      	adds	r5, #2
						fillRect(x + xoff * size_x, y + yoff * size_y,
   179a4:	9300      	str	r3, [sp, #0]
   179a6:	b209      	sxth	r1, r1
   179a8:	ee18 3a10 	vmov	r3, s16
   179ac:	9601      	str	r6, [sp, #4]
						xoff += 2;
   179ae:	b22d      	sxth	r5, r5
						fillRect(x + xoff * size_x, y + yoff * size_y,
   179b0:	9205      	str	r2, [sp, #20]
   179b2:	f7fe fdb7 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
				while (line) {
   179b6:	9a05      	ldr	r2, [sp, #20]
   179b8:	2c00      	cmp	r4, #0
   179ba:	f47f af5e 	bne.w	1787a <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2be>
   179be:	e781      	b.n	178c4 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x308>
   179c0:	20004f88 	.word	0x20004f88
						drawPixel(x + xoff, y + yoff, fgcolor);
   179c4:	b2ad      	uxth	r5, r5
   179c6:	4633      	mov	r3, r6
						line <<= 2;
   179c8:	00a4      	lsls	r4, r4, #2
						drawPixel(x + xoff, y + yoff, fgcolor);
   179ca:	4658      	mov	r0, fp
   179cc:	19e9      	adds	r1, r5, r7
						xoff += 2;
   179ce:	3502      	adds	r5, #2
						line <<= 2;
   179d0:	b2e4      	uxtb	r4, r4
						drawPixel(x + xoff, y + yoff, fgcolor);
   179d2:	9203      	str	r2, [sp, #12]
   179d4:	b209      	sxth	r1, r1
   179d6:	f7fe faff 	bl	15fd8 <ST7735_t3::drawPixel(short, short, unsigned short)>
						xoff += 2;
   179da:	9a03      	ldr	r2, [sp, #12]
   179dc:	b22d      	sxth	r5, r5
				while (line) {
   179de:	2c00      	cmp	r4, #0
   179e0:	d1ac      	bne.n	1793c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x380>
   179e2:	e7c9      	b.n	17978 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3bc>
						fillRect(x + xoff * size_x, y + yoff * size_y,
   179e4:	fb05 710b 	mla	r1, r5, fp, r7
						line <<= 4;
   179e8:	0124      	lsls	r4, r4, #4
						fillRect(x + xoff * size_x, y + yoff * size_y,
   179ea:	b2ad      	uxth	r5, r5
   179ec:	9b03      	ldr	r3, [sp, #12]
						line <<= 4;
   179ee:	b2e4      	uxtb	r4, r4
						fillRect(x + xoff * size_x, y + yoff * size_y,
   179f0:	4640      	mov	r0, r8
						xoff += 4;
   179f2:	3504      	adds	r5, #4
						fillRect(x + xoff * size_x, y + yoff * size_y,
   179f4:	9300      	str	r3, [sp, #0]
   179f6:	b209      	sxth	r1, r1
   179f8:	ee18 3a90 	vmov	r3, s17
   179fc:	9601      	str	r6, [sp, #4]
						xoff += 4;
   179fe:	b22d      	sxth	r5, r5
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17a00:	9205      	str	r2, [sp, #20]
   17a02:	f7fe fd8f 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
						xoff += 4;
   17a06:	9a05      	ldr	r2, [sp, #20]
				while (line) {
   17a08:	2c00      	cmp	r4, #0
   17a0a:	f47f af36 	bne.w	1787a <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2be>
   17a0e:	e759      	b.n	178c4 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x308>
						drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
   17a10:	b2ad      	uxth	r5, r5
   17a12:	2303      	movs	r3, #3
						line <<= 4;
   17a14:	0124      	lsls	r4, r4, #4
						drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
   17a16:	4658      	mov	r0, fp
   17a18:	19e9      	adds	r1, r5, r7
						xoff += 4;
   17a1a:	3504      	adds	r5, #4
						line <<= 4;
   17a1c:	b2e4      	uxtb	r4, r4
						drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
   17a1e:	9600      	str	r6, [sp, #0]
   17a20:	b209      	sxth	r1, r1
   17a22:	9203      	str	r2, [sp, #12]
						xoff += 4;
   17a24:	b22d      	sxth	r5, r5
						drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
   17a26:	f7fe fc7f 	bl	16328 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)>
						xoff += 4;
   17a2a:	9a03      	ldr	r2, [sp, #12]
				while (line) {
   17a2c:	2c00      	cmp	r4, #0
   17a2e:	d185      	bne.n	1793c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x380>
   17a30:	e7a2      	b.n	17978 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3bc>
						drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
   17a32:	b2ad      	uxth	r5, r5
   17a34:	2302      	movs	r3, #2
						line <<= 3;
   17a36:	00e4      	lsls	r4, r4, #3
						drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
   17a38:	4658      	mov	r0, fp
   17a3a:	19e9      	adds	r1, r5, r7
						xoff += 3;
   17a3c:	3503      	adds	r5, #3
						line <<= 3;
   17a3e:	b2e4      	uxtb	r4, r4
						drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
   17a40:	9600      	str	r6, [sp, #0]
   17a42:	b209      	sxth	r1, r1
   17a44:	9203      	str	r2, [sp, #12]
						xoff += 3;
   17a46:	b22d      	sxth	r5, r5
						drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
   17a48:	f7fe fc6e 	bl	16328 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)>
						xoff += 3;
   17a4c:	9a03      	ldr	r2, [sp, #12]
				while (line) {
   17a4e:	2c00      	cmp	r4, #0
   17a50:	f47f af74 	bne.w	1793c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x380>
   17a54:	e790      	b.n	17978 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3bc>
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17a56:	fb0b 7105 	mla	r1, fp, r5, r7
						line <<= 3;
   17a5a:	00e4      	lsls	r4, r4, #3
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17a5c:	b2ad      	uxth	r5, r5
   17a5e:	9b03      	ldr	r3, [sp, #12]
						line <<= 3;
   17a60:	b2e4      	uxtb	r4, r4
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17a62:	4640      	mov	r0, r8
						xoff += 3;
   17a64:	3503      	adds	r5, #3
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17a66:	9300      	str	r3, [sp, #0]
   17a68:	b209      	sxth	r1, r1
   17a6a:	ee19 3a10 	vmov	r3, s18
   17a6e:	9601      	str	r6, [sp, #4]
						xoff += 3;
   17a70:	b22d      	sxth	r5, r5
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17a72:	9205      	str	r2, [sp, #20]
   17a74:	f7fe fd56 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
						xoff += 3;
   17a78:	9a05      	ldr	r2, [sp, #20]
				while (line) {
   17a7a:	2c00      	cmp	r4, #0
   17a7c:	f47f aefd 	bne.w	1787a <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2be>
   17a80:	e720      	b.n	178c4 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x308>
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17a82:	9b03      	ldr	r3, [sp, #12]
   17a84:	4639      	mov	r1, r7
   17a86:	9a04      	ldr	r2, [sp, #16]
   17a88:	4640      	mov	r0, r8
   17a8a:	9300      	str	r3, [sp, #0]
   17a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17a8e:	9601      	str	r6, [sp, #4]
   17a90:	fb02 3205 	mla	r2, r2, r5, r3
   17a94:	b2ab      	uxth	r3, r5
   17a96:	b212      	sxth	r2, r2
   17a98:	9306      	str	r3, [sp, #24]
   17a9a:	ee19 3a90 	vmov	r3, s19
   17a9e:	f7fe fd41 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
						break;
   17aa2:	e70f      	b.n	178c4 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x308>
						drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
   17aa4:	2305      	movs	r3, #5
   17aa6:	fa0f f288 	sxth.w	r2, r8
   17aaa:	4639      	mov	r1, r7
   17aac:	4658      	mov	r0, fp
   17aae:	9600      	str	r6, [sp, #0]
   17ab0:	f7fe fc3a 	bl	16328 <ST7735_t3::drawFastHLine(short, short, short, unsigned short)>
						break;
   17ab4:	e760      	b.n	17978 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3bc>
				mask = mask << 1;
   17ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17ab8:	0059      	lsls	r1, r3, #1
			for (yc=0; (yc < 8) && (y < _displayclipy2); yc++) {
   17aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17abc:	3b01      	subs	r3, #1
				mask = mask << 1;
   17abe:	b2c9      	uxtb	r1, r1
			for (yc=0; (yc < 8) && (y < _displayclipy2); yc++) {
   17ac0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
				mask = mask << 1;
   17ac4:	910c      	str	r1, [sp, #48]	; 0x30
			for (yc=0; (yc < 8) && (y < _displayclipy2); yc++) {
   17ac6:	930f      	str	r3, [sp, #60]	; 0x3c
   17ac8:	f43f af09 	beq.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
   17acc:	f9b6 3022 	ldrsh.w	r3, [r6, #34]	; 0x22
   17ad0:	42bb      	cmp	r3, r7
   17ad2:	f73f ae1a 	bgt.w	1770a <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x14e>
   17ad6:	e702      	b.n	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
			int16_t w =  6 * size_x;
   17ad8:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   17adc:	0050      	lsls	r0, r2, #1
			int16_t h = 8 * size_y;
   17ade:	9a04      	ldr	r2, [sp, #16]
   17ae0:	00d2      	lsls	r2, r2, #3
   17ae2:	4615      	mov	r5, r2
			if(x < _displayclipx1) {	w -= (_displayclipx1-x); x = _displayclipx1; 	}
   17ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17ae6:	4594      	cmp	ip, r2
   17ae8:	f300 8110 	bgt.w	17d0c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x750>
			int16_t w =  6 * size_x;
   17aec:	b201      	sxth	r1, r0
			if((x + w - 1) >= _displayclipx2)  w = _displayclipx2  - x;
   17aee:	4622      	mov	r2, r4
   17af0:	9803      	ldr	r0, [sp, #12]
   17af2:	440a      	add	r2, r1
   17af4:	4282      	cmp	r2, r0
   17af6:	f300 8122 	bgt.w	17d3e <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x782>
			setAddr(x, y, x + w -1, y + h - 1);
   17afa:	b28a      	uxth	r2, r1
   17afc:	9203      	str	r2, [sp, #12]
			if(y < _displayclipy1) {	h -= (_displayclipy1 - y); y = _displayclipy1; 	}
   17afe:	45be      	cmp	lr, r7
   17b00:	f300 8112 	bgt.w	17d28 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x76c>
			int16_t h = 8 * size_y;
   17b04:	b22a      	sxth	r2, r5
			if((y + h - 1) >= _displayclipy2) h = _displayclipy2 - y;
   17b06:	9907      	ldr	r1, [sp, #28]
   17b08:	9806      	ldr	r0, [sp, #24]
   17b0a:	4411      	add	r1, r2
   17b0c:	4281      	cmp	r1, r0
   17b0e:	f300 8106 	bgt.w	17d1e <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x762>
			setAddr(x, y, x + w -1, y + h - 1);
   17b12:	b294      	uxth	r4, r2
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   17b14:	7a72      	ldrb	r2, [r6, #9]
   17b16:	2a00      	cmp	r2, #0
   17b18:	f040 811d 	bne.w	17d56 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x79a>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   17b1c:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
   17b20:	2a00      	cmp	r2, #0
   17b22:	f000 8112 	beq.w	17d4a <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x78e>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   17b26:	f8d6 20b8 	ldr.w	r2, [r6, #184]	; 0xb8
   17b2a:	b11a      	cbz	r2, 17b34 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x578>
   17b2c:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
    *(base+34) = mask;
   17b30:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
							if (glcdfont[c * 5 + xc] & mask) {
   17b34:	eb03 0583 	add.w	r5, r3, r3, lsl #2
        writecommand(ST7735_CASET); // Column addr set
   17b38:	4630      	mov	r0, r6
   17b3a:	212a      	movs	r1, #42	; 0x2a
   17b3c:	950a      	str	r5, [sp, #40]	; 0x28
   17b3e:	f7fd fab3 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   17b42:	f8b6 107a 	ldrh.w	r1, [r6, #122]	; 0x7a
   17b46:	9b05      	ldr	r3, [sp, #20]
   17b48:	4419      	add	r1, r3
   17b4a:	b289      	uxth	r1, r1
   17b4c:	f7fd fe02 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   17b50:	f8b6 307a 	ldrh.w	r3, [r6, #122]	; 0x7a
   17b54:	9a05      	ldr	r2, [sp, #20]
   17b56:	3b01      	subs	r3, #1
   17b58:	9903      	ldr	r1, [sp, #12]
   17b5a:	4413      	add	r3, r2
   17b5c:	4419      	add	r1, r3
   17b5e:	b289      	uxth	r1, r1
   17b60:	f7fd fdf8 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   17b64:	212b      	movs	r1, #43	; 0x2b
   17b66:	f7fd fa9f 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   17b6a:	f8b6 107c 	ldrh.w	r1, [r6, #124]	; 0x7c
   17b6e:	4441      	add	r1, r8
   17b70:	b289      	uxth	r1, r1
   17b72:	f7fd fdef 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   17b76:	f8b6 307c 	ldrh.w	r3, [r6, #124]	; 0x7c
   17b7a:	4656      	mov	r6, sl
   17b7c:	3b01      	subs	r3, #1
   17b7e:	4498      	add	r8, r3
   17b80:	eb04 0108 	add.w	r1, r4, r8
   17b84:	b289      	uxth	r1, r1
   17b86:	f7fd fde5 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
			writecommand(ST7735_RAMWR);
   17b8a:	212c      	movs	r1, #44	; 0x2c
   17b8c:	f7fd fa8c 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
			for (yc=0; (yc < 8) && (y < _displayclipy2); yc++) {
   17b90:	4b76      	ldr	r3, [pc, #472]	; (17d6c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x7b0>)
   17b92:	f8cd b018 	str.w	fp, [sp, #24]
   17b96:	46bb      	mov	fp, r7
   17b98:	3305      	adds	r3, #5
   17b9a:	442b      	add	r3, r5
   17b9c:	9305      	str	r3, [sp, #20]
							if (glcdfont[c * 5 + xc] & mask) {
   17b9e:	2308      	movs	r3, #8
   17ba0:	930b      	str	r3, [sp, #44]	; 0x2c
		uint8_t mask = 0x01;
   17ba2:	2301      	movs	r3, #1
   17ba4:	461f      	mov	r7, r3
			for (yc=0; (yc < 8) && (y < _displayclipy2); yc++) {
   17ba6:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
   17baa:	455a      	cmp	r2, fp
   17bac:	dd6d      	ble.n	17c8a <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x6ce>
				for (yr=0; (yr < size_y) && (y < _displayclipy2); yr++) {
   17bae:	9b04      	ldr	r3, [sp, #16]
   17bb0:	2b00      	cmp	r3, #0
   17bb2:	d062      	beq.n	17c7a <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x6be>
   17bb4:	9b04      	ldr	r3, [sp, #16]
   17bb6:	eb0b 0203 	add.w	r2, fp, r3
   17bba:	b213      	sxth	r3, r2
   17bbc:	9307      	str	r3, [sp, #28]
   17bbe:	e00a      	b.n	17bd6 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x61a>
					y++;
   17bc0:	f10b 0301 	add.w	r3, fp, #1
   17bc4:	fa0f fb83 	sxth.w	fp, r3
				for (yr=0; (yr < size_y) && (y < _displayclipy2); yr++) {
   17bc8:	9b07      	ldr	r3, [sp, #28]
   17bca:	459b      	cmp	fp, r3
   17bcc:	d055      	beq.n	17c7a <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x6be>
   17bce:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
   17bd2:	455a      	cmp	r2, fp
   17bd4:	dd51      	ble.n	17c7a <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x6be>
					if (y >= _displayclipy1) {
   17bd6:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
   17bda:	455a      	cmp	r2, fp
   17bdc:	dcf0      	bgt.n	17bc0 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x604>
   17bde:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
   17be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   17be4:	4961      	ldr	r1, [pc, #388]	; (17d6c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x7b0>)
   17be6:	fa5f f38a 	uxtb.w	r3, sl
   17bea:	f8cd b020 	str.w	fp, [sp, #32]
   17bee:	eb02 0a01 	add.w	sl, r2, r1
   17bf2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   17bf4:	46d3      	mov	fp, sl
   17bf6:	469a      	mov	sl, r3
							if (glcdfont[c * 5 + xc] & mask) {
   17bf8:	f81b 3b01 	ldrb.w	r3, [fp], #1
   17bfc:	423b      	tst	r3, r7
   17bfe:	9b06      	ldr	r3, [sp, #24]
   17c00:	bf0c      	ite	eq
   17c02:	4649      	moveq	r1, r9
   17c04:	4619      	movne	r1, r3
							for (xr=0; xr < size_x; xr++) {
   17c06:	b1ee      	cbz	r6, 17c44 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x688>
   17c08:	b2a5      	uxth	r5, r4
   17c0a:	19ab      	adds	r3, r5, r6
   17c0c:	fa1f f883 	uxth.w	r8, r3
   17c10:	e004      	b.n	17c1c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x660>
								x++;
   17c12:	3401      	adds	r4, #1
   17c14:	b2a3      	uxth	r3, r4
   17c16:	b224      	sxth	r4, r4
							for (xr=0; xr < size_x; xr++) {
   17c18:	4598      	cmp	r8, r3
   17c1a:	d010      	beq.n	17c3e <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x682>
								if ((x >= _displayclipx1) && (x < _displayclipx2)) {
   17c1c:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   17c20:	42a3      	cmp	r3, r4
   17c22:	dcf6      	bgt.n	17c12 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x656>
   17c24:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
   17c28:	42a3      	cmp	r3, r4
   17c2a:	ddf2      	ble.n	17c12 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x656>
									writedata16(color);
   17c2c:	3401      	adds	r4, #1
   17c2e:	9103      	str	r1, [sp, #12]
   17c30:	f7fd fd90 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
   17c34:	9903      	ldr	r1, [sp, #12]
								x++;
   17c36:	b2a3      	uxth	r3, r4
   17c38:	b224      	sxth	r4, r4
							for (xr=0; xr < size_x; xr++) {
   17c3a:	4598      	cmp	r8, r3
   17c3c:	d1ee      	bne.n	17c1c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x660>
   17c3e:	4455      	add	r5, sl
   17c40:	3501      	adds	r5, #1
   17c42:	b22c      	sxth	r4, r5
						for (xc=0; xc < 5; xc++) {
   17c44:	9b05      	ldr	r3, [sp, #20]
   17c46:	455b      	cmp	r3, fp
   17c48:	d1d6      	bne.n	17bf8 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x63c>
						for (xr=0; xr < size_x; xr++) {
   17c4a:	f8dd b020 	ldr.w	fp, [sp, #32]
   17c4e:	2e00      	cmp	r6, #0
   17c50:	d0b6      	beq.n	17bc0 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x604>
   17c52:	1935      	adds	r5, r6, r4
   17c54:	b2ad      	uxth	r5, r5
   17c56:	e004      	b.n	17c62 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x6a6>
							x++;
   17c58:	3401      	adds	r4, #1
   17c5a:	b2a3      	uxth	r3, r4
   17c5c:	b224      	sxth	r4, r4
						for (xr=0; xr < size_x; xr++) {
   17c5e:	429d      	cmp	r5, r3
   17c60:	d0ae      	beq.n	17bc0 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x604>
							if ((x >= _displayclipx1) && (x < _displayclipx2)) {
   17c62:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   17c66:	42a3      	cmp	r3, r4
   17c68:	dcf6      	bgt.n	17c58 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x69c>
   17c6a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
   17c6e:	42a3      	cmp	r3, r4
   17c70:	ddf2      	ble.n	17c58 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x69c>
								writedata16(bgcolor);
   17c72:	4649      	mov	r1, r9
   17c74:	f7fd fd6e 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
   17c78:	e7ee      	b.n	17c58 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x69c>
			for (yc=0; (yc < 8) && (y < _displayclipy2); yc++) {
   17c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				mask = mask << 1;
   17c7c:	007f      	lsls	r7, r7, #1
			for (yc=0; (yc < 8) && (y < _displayclipy2); yc++) {
   17c7e:	1e5a      	subs	r2, r3, #1
				mask = mask << 1;
   17c80:	b2ff      	uxtb	r7, r7
			for (yc=0; (yc < 8) && (y < _displayclipy2); yc++) {
   17c82:	f012 03ff 	ands.w	r3, r2, #255	; 0xff
   17c86:	930b      	str	r3, [sp, #44]	; 0x2c
   17c88:	d18d      	bne.n	17ba6 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x5ea>
			writecommand_last(ST7735_NOP);
   17c8a:	2100      	movs	r1, #0
   17c8c:	4606      	mov	r6, r0
   17c8e:	f7fd fa9f 	bl	151d0 <ST7735_t3::writecommand_last(unsigned char)>
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   17c92:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   17c96:	b11b      	cbz	r3, 17ca0 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x6e4>
   17c98:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
    *(base+33) = mask;
   17c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   17ca0:	7a73      	ldrb	r3, [r6, #9]
   17ca2:	2b00      	cmp	r3, #0
   17ca4:	f43f ae1b 	beq.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
   17ca8:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		if (interruptMasksUsed) {
   17cac:	7cda      	ldrb	r2, [r3, #19]
   17cae:	2a00      	cmp	r2, #0
   17cb0:	f43f ae15 	beq.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   17cb4:	07d5      	lsls	r5, r2, #31
   17cb6:	d504      	bpl.n	17cc2 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x706>
   17cb8:	6a98      	ldr	r0, [r3, #40]	; 0x28
   17cba:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   17cbe:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   17cc2:	0794      	lsls	r4, r2, #30
   17cc4:	d504      	bpl.n	17cd0 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x714>
   17cc6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   17cc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   17ccc:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   17cd0:	0750      	lsls	r0, r2, #29
   17cd2:	d504      	bpl.n	17cde <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x722>
   17cd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   17cd6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   17cda:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   17cde:	0711      	lsls	r1, r2, #28
   17ce0:	d504      	bpl.n	17cec <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x730>
   17ce2:	6b58      	ldr	r0, [r3, #52]	; 0x34
   17ce4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   17ce8:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   17cec:	06d2      	lsls	r2, r2, #27
   17cee:	f57f adf6 	bpl.w	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
   17cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17cf4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17cf8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   17cfc:	e5ef      	b.n	178de <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x322>
						fillRect(x + xoff * size_x, y + yoff * size_y,
   17cfe:	b2ab      	uxth	r3, r5
   17d00:	9306      	str	r3, [sp, #24]
   17d02:	e5df      	b.n	178c4 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x308>
   17d04:	2100      	movs	r1, #0
   17d06:	e5d3      	b.n	178b0 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x2f4>
					} else if (line == 0x1E) {
   17d08:	2300      	movs	r3, #0
   17d0a:	e62c      	b.n	17966 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x3aa>
			if(x < _displayclipx1) {	w -= (_displayclipx1-x); x = _displayclipx1; 	}
   17d0c:	fa1f f28c 	uxth.w	r2, ip
   17d10:	9905      	ldr	r1, [sp, #20]
   17d12:	4664      	mov	r4, ip
   17d14:	1a89      	subs	r1, r1, r2
   17d16:	9205      	str	r2, [sp, #20]
   17d18:	4401      	add	r1, r0
   17d1a:	b209      	sxth	r1, r1
   17d1c:	e6e7      	b.n	17aee <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x532>
			if((y + h - 1) >= _displayclipy2) h = _displayclipy2 - y;
   17d1e:	9a06      	ldr	r2, [sp, #24]
   17d20:	eba2 0408 	sub.w	r4, r2, r8
   17d24:	b2a4      	uxth	r4, r4
   17d26:	e6f5      	b.n	17b14 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x558>
			if(y < _displayclipy1) {	h -= (_displayclipy1 - y); y = _displayclipy1; 	}
   17d28:	fa1f f18e 	uxth.w	r1, lr
   17d2c:	4628      	mov	r0, r5
   17d2e:	f8cd e01c 	str.w	lr, [sp, #28]
   17d32:	eba8 0201 	sub.w	r2, r8, r1
   17d36:	4688      	mov	r8, r1
   17d38:	4410      	add	r0, r2
   17d3a:	b202      	sxth	r2, r0
   17d3c:	e6e3      	b.n	17b06 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x54a>
			if((x + w - 1) >= _displayclipx2)  w = _displayclipx2  - x;
   17d3e:	9a05      	ldr	r2, [sp, #20]
   17d40:	9903      	ldr	r1, [sp, #12]
   17d42:	1a8c      	subs	r4, r1, r2
   17d44:	b2a2      	uxth	r2, r4
   17d46:	9203      	str	r2, [sp, #12]
   17d48:	e6d9      	b.n	17afe <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x542>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   17d4a:	f8d6 2094 	ldr.w	r2, [r6, #148]	; 0x94
   17d4e:	6e12      	ldr	r2, [r2, #96]	; 0x60
   17d50:	f8c6 20a0 	str.w	r2, [r6, #160]	; 0xa0
   17d54:	e6e7      	b.n	17b26 <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x56a>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   17d56:	f106 0284 	add.w	r2, r6, #132	; 0x84
   17d5a:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   17d5e:	9306      	str	r3, [sp, #24]
   17d60:	ca06      	ldmia	r2, {r1, r2}
   17d62:	f7f3 fac3 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
   17d66:	9b06      	ldr	r3, [sp, #24]
   17d68:	e6d8      	b.n	17b1c <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)+0x560>
   17d6a:	bf00      	nop
   17d6c:	20004f88 	.word	0x20004f88

00017d70 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)>:
//	//Serial.printf("Return  maxlen =  %d\n", maxlen);
	return( maxlen );
}

void ST7735_t3::charBounds(char c, int16_t *x, int16_t *y,
  int16_t *minx, int16_t *miny, int16_t *maxx, int16_t *maxy) {
   17d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// BUGBUG:: Not handling offset/clip
    if (font) {
   17d74:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
  int16_t *minx, int16_t *miny, int16_t *maxx, int16_t *maxy) {
   17d76:	b085      	sub	sp, #20
   17d78:	4604      	mov	r4, r0
   17d7a:	4616      	mov	r6, r2
   17d7c:	461f      	mov	r7, r3
    if (font) {
   17d7e:	2d00      	cmp	r5, #0
   17d80:	f000 80bc 	beq.w	17efc <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x18c>
        if(c == '\n') { // Newline?
   17d84:	290a      	cmp	r1, #10
   17d86:	f000 80a2 	beq.w	17ece <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x15e>
            *x  = 0;    // Reset x to zero, advance y by one line
            *y += font->line_space;
        } else if(c != '\r') { // Not a carriage return; is normal char
   17d8a:	290d      	cmp	r1, #13
   17d8c:	f000 80a5 	beq.w	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
			uint32_t bitoffset;
			const uint8_t *data;
			if (c >= font->index1_first && c <= font->index1_last) {
   17d90:	7bab      	ldrb	r3, [r5, #14]
   17d92:	428b      	cmp	r3, r1
   17d94:	f200 80a4 	bhi.w	17ee0 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x170>
   17d98:	7bea      	ldrb	r2, [r5, #15]
   17d9a:	428a      	cmp	r2, r1
   17d9c:	f0c0 80a0 	bcc.w	17ee0 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x170>
				bitoffset = c - font->index1_first;
   17da0:	1ac9      	subs	r1, r1, r3
				bitoffset *= font->bits_index;
   17da2:	7caa      	ldrb	r2, [r5, #18]
   17da4:	fb02 f101 	mul.w	r1, r2, r1
				return; // TODO: implement sparse unicode
			} else {
				return;
			}
			//Serial.printf("  index =  %d\n", fetchbits_unsigned(font->index, bitoffset, font->bits_index));
			data = font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);
   17da8:	6828      	ldr	r0, [r5, #0]
   17daa:	f7fd f841 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
   17dae:	68ab      	ldr	r3, [r5, #8]

			uint32_t encoding = fetchbits_unsigned(data, 0, 3);
   17db0:	2203      	movs	r2, #3
   17db2:	2100      	movs	r1, #0
			data = font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);
   17db4:	eb03 0800 	add.w	r8, r3, r0
			uint32_t encoding = fetchbits_unsigned(data, 0, 3);
   17db8:	4640      	mov	r0, r8
   17dba:	f7fd f839 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
			if (encoding != 0) return;
   17dbe:	2800      	cmp	r0, #0
   17dc0:	f040 808b 	bne.w	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
			uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
   17dc4:	f895 9013 	ldrb.w	r9, [r5, #19]
   17dc8:	2103      	movs	r1, #3
   17dca:	4640      	mov	r0, r8
   17dcc:	464a      	mov	r2, r9
   17dce:	f7fd f82f 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
			bitoffset = font->bits_width + 3;
   17dd2:	f109 0103 	add.w	r1, r9, #3
			uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
   17dd6:	7d2a      	ldrb	r2, [r5, #20]
			uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
   17dd8:	9001      	str	r0, [sp, #4]
			uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
   17dda:	4640      	mov	r0, r8
			bitoffset += font->bits_height;
   17ddc:	eb02 0a01 	add.w	sl, r2, r1
			uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
   17de0:	f7fd f826 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
			//Serial.printf("  size =   %d,%d\n", width, height);
			//Serial.printf("  line space = %d\n", font->line_space);

			int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
   17de4:	7d6a      	ldrb	r2, [r5, #21]
			uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
   17de6:	4683      	mov	fp, r0
	uint32_t val = fetchbits_unsigned(p, index, required);
   17de8:	4651      	mov	r1, sl
   17dea:	4640      	mov	r0, r8
   17dec:	9202      	str	r2, [sp, #8]
   17dee:	f7fd f81f 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
	if (val & (1 << (required - 1))) {
   17df2:	9a02      	ldr	r2, [sp, #8]
   17df4:	2101      	movs	r1, #1
	uint32_t val = fetchbits_unsigned(p, index, required);
   17df6:	4681      	mov	r9, r0
	if (val & (1 << (required - 1))) {
   17df8:	1e53      	subs	r3, r2, #1
   17dfa:	fa01 f303 	lsl.w	r3, r1, r3
   17dfe:	4203      	tst	r3, r0
   17e00:	d002      	beq.n	17e08 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x98>
		return (int32_t)val - (1 << required);
   17e02:	4091      	lsls	r1, r2
   17e04:	eba0 0901 	sub.w	r9, r0, r1
			bitoffset += font->bits_xoffset;
   17e08:	eb02 010a 	add.w	r1, r2, sl
			int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
   17e0c:	7daa      	ldrb	r2, [r5, #22]
	uint32_t val = fetchbits_unsigned(p, index, required);
   17e0e:	4640      	mov	r0, r8
   17e10:	e9cd 1202 	strd	r1, r2, [sp, #8]
   17e14:	f7fd f80c 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
	if (val & (1 << (required - 1))) {
   17e18:	9a03      	ldr	r2, [sp, #12]
	uint32_t val = fetchbits_unsigned(p, index, required);
   17e1a:	4682      	mov	sl, r0
	if (val & (1 << (required - 1))) {
   17e1c:	2001      	movs	r0, #1
   17e1e:	1e53      	subs	r3, r2, #1
   17e20:	9902      	ldr	r1, [sp, #8]
   17e22:	fa00 f303 	lsl.w	r3, r0, r3
   17e26:	ea13 0f0a 	tst.w	r3, sl
   17e2a:	d002      	beq.n	17e32 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0xc2>
		return (int32_t)val - (1 << required);
   17e2c:	4090      	lsls	r0, r2
   17e2e:	ebaa 0a00 	sub.w	sl, sl, r0
			bitoffset += font->bits_yoffset;

			uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
   17e32:	4411      	add	r1, r2
   17e34:	4640      	mov	r0, r8
   17e36:	7dea      	ldrb	r2, [r5, #23]
			bitoffset += font->bits_delta;

            int16_t
                    x1 = *x + xoffset,
                    y1 = *y + font->cap_height - height - yoffset,
   17e38:	fa1f fb8b 	uxth.w	fp, fp
			uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
   17e3c:	f7fc fff8 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
                    y1 = *y + font->cap_height - height - yoffset,
   17e40:	8839      	ldrh	r1, [r7, #0]
   17e42:	7e6b      	ldrb	r3, [r5, #25]
                    x1 = *x + xoffset,
   17e44:	fa1f f989 	uxth.w	r9, r9
                    y1 = *y + font->cap_height - height - yoffset,
   17e48:	fa1f fa8a 	uxth.w	sl, sl
                    x2 = x1 + width,
   17e4c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
                    y1 = *y + font->cap_height - height - yoffset,
   17e50:	440b      	add	r3, r1
                    x1 = *x + xoffset,
   17e52:	8831      	ldrh	r1, [r6, #0]
                    y2 = y1 + height;

		    if(wrap && (x2 > _width)) {
   17e54:	f894 8048 	ldrb.w	r8, [r4, #72]	; 0x48
                    y1 = *y + font->cap_height - height - yoffset,
   17e58:	eba3 030b 	sub.w	r3, r3, fp
                    x1 = *x + xoffset,
   17e5c:	4449      	add	r1, r9
                    y1 = *y + font->cap_height - height - yoffset,
   17e5e:	eba3 030a 	sub.w	r3, r3, sl
                    x2 = x1 + width,
   17e62:	fa12 fc81 	uxtah	ip, r2, r1
                    x1 = *x + xoffset,
   17e66:	b209      	sxth	r1, r1
                    y2 = y1 + height;
   17e68:	fa1b fe83 	uxtah	lr, fp, r3
                    x2 = x1 + width,
   17e6c:	fa0f fc8c 	sxth.w	ip, ip
                    y1 = *y + font->cap_height - height - yoffset,
   17e70:	b21b      	sxth	r3, r3
                    y2 = y1 + height;
   17e72:	fa0f fe8e 	sxth.w	lr, lr
		    if(wrap && (x2 > _width)) {
   17e76:	f1b8 0f00 	cmp.w	r8, #0
   17e7a:	d004      	beq.n	17e86 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x116>
   17e7c:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   17e80:	4564      	cmp	r4, ip
   17e82:	f2c0 80e2 	blt.w	1804a <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2da>
	            x1 = *x + xoffset,
	            y1 = *y + yoffset,
	            x2 = x1 + width,
	            y2 = y1 + height;
        	}
            if(x1 < *minx) *minx = x1;
   17e86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17e88:	f9b2 2000 	ldrsh.w	r2, [r2]
   17e8c:	428a      	cmp	r2, r1
   17e8e:	dd01      	ble.n	17e94 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x124>
   17e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17e92:	8011      	strh	r1, [r2, #0]
            if(y1 < *miny) *miny = y1;
   17e94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17e96:	f9b2 2000 	ldrsh.w	r2, [r2]
   17e9a:	429a      	cmp	r2, r3
   17e9c:	dd01      	ble.n	17ea2 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x132>
   17e9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17ea0:	8013      	strh	r3, [r2, #0]
            if(x2 > *maxx) *maxx = x2;
   17ea2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
   17ea8:	4563      	cmp	r3, ip
   17eaa:	da02      	bge.n	17eb2 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x142>
   17eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17eae:	f8a3 c000 	strh.w	ip, [r3]
            if(y2 > *maxy) *maxy = y2;
   17eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
   17eb8:	4573      	cmp	r3, lr
   17eba:	da02      	bge.n	17ec2 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x152>
   17ebc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17ebe:	f8a3 e000 	strh.w	lr, [r3]
            *x += delta;	// ? guessing here...
   17ec2:	8833      	ldrh	r3, [r6, #0]
   17ec4:	4418      	add	r0, r3
   17ec6:	8030      	strh	r0, [r6, #0]
            if(*x < *minx) *minx = *x;      // Track min x, y
            if(*y < *miny) *miny = *y;
            *x += textsize_x * 6;             // Advance x one char
        }
    }
}
   17ec8:	b005      	add	sp, #20
   17eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            *x  = 0;    // Reset x to zero, advance y by one line
   17ece:	2300      	movs	r3, #0
   17ed0:	8013      	strh	r3, [r2, #0]
            *y += font->line_space;
   17ed2:	7e2b      	ldrb	r3, [r5, #24]
   17ed4:	883a      	ldrh	r2, [r7, #0]
   17ed6:	4413      	add	r3, r2
   17ed8:	803b      	strh	r3, [r7, #0]
}
   17eda:	b005      	add	sp, #20
   17edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (c >= font->index2_first && c <= font->index2_last) {
   17ee0:	7c2a      	ldrb	r2, [r5, #16]
   17ee2:	428a      	cmp	r2, r1
   17ee4:	d8f9      	bhi.n	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
   17ee6:	7c68      	ldrb	r0, [r5, #17]
   17ee8:	4288      	cmp	r0, r1
   17eea:	d3f6      	bcc.n	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
				bitoffset = c - font->index2_first + font->index1_last - font->index1_first + 1;
   17eec:	1a89      	subs	r1, r1, r2
   17eee:	7bea      	ldrb	r2, [r5, #15]
   17ef0:	4411      	add	r1, r2
				bitoffset *= font->bits_index;
   17ef2:	7caa      	ldrb	r2, [r5, #18]
				bitoffset = c - font->index2_first + font->index1_last - font->index1_first + 1;
   17ef4:	1ac9      	subs	r1, r1, r3
				bitoffset *= font->bits_index;
   17ef6:	fb01 2102 	mla	r1, r1, r2, r2
   17efa:	e755      	b.n	17da8 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x38>
    else if(gfxFont) {
   17efc:	6e03      	ldr	r3, [r0, #96]	; 0x60
   17efe:	2b00      	cmp	r3, #0
   17f00:	d065      	beq.n	17fce <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x25e>
        if(c == '\n') { // Newline?
   17f02:	290a      	cmp	r1, #10
   17f04:	d05a      	beq.n	17fbc <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x24c>
        } else if(c != '\r') { // Not a carriage return; is normal char
   17f06:	290d      	cmp	r1, #13
   17f08:	d0e7      	beq.n	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
            if((c >= first) && (c <= last)) { // Char present in this font?
   17f0a:	7a58      	ldrb	r0, [r3, #9]
            uint8_t first = gfxFont->first,
   17f0c:	7a1a      	ldrb	r2, [r3, #8]
            if((c >= first) && (c <= last)) { // Char present in this font?
   17f0e:	4288      	cmp	r0, r1
   17f10:	d3e3      	bcc.n	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
   17f12:	4291      	cmp	r1, r2
   17f14:	d3e1      	bcc.n	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
    			GFXglyph *glyph  = gfxFont->glyph + (c - first);
   17f16:	1a89      	subs	r1, r1, r2
   17f18:	685a      	ldr	r2, [r3, #4]
                        yo = glyph->yOffset + gfxFont->yAdvance/2;
   17f1a:	f893 800a 	ldrb.w	r8, [r3, #10]
    			GFXglyph *glyph  = gfxFont->glyph + (c - first);
   17f1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize_x)) > _width)) {
   17f22:	f894 c048 	ldrb.w	ip, [r4, #72]	; 0x48
                        yo = glyph->yOffset + gfxFont->yAdvance/2;
   17f26:	f892 e006 	ldrb.w	lr, [r2, #6]
                uint8_t gw = glyph->width,
   17f2a:	7893      	ldrb	r3, [r2, #2]
                        yo = glyph->yOffset + gfxFont->yAdvance/2;
   17f2c:	eb0e 0e58 	add.w	lr, lr, r8, lsr #1
                        gh = glyph->height,
   17f30:	78d1      	ldrb	r1, [r2, #3]
                        xa = glyph->xAdvance;
   17f32:	7910      	ldrb	r0, [r2, #4]
                        yo = glyph->yOffset + gfxFont->yAdvance/2;
   17f34:	fa4f fe8e 	sxtb.w	lr, lr
                int8_t  xo = glyph->xOffset,
   17f38:	f992 9005 	ldrsb.w	r9, [r2, #5]
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize_x)) > _width)) {
   17f3c:	f1bc 0f00 	cmp.w	ip, #0
   17f40:	f040 80a2 	bne.w	18088 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x318>
                    y1 = *y + font->cap_height - height - yoffset,
   17f44:	f8b7 c000 	ldrh.w	ip, [r7]
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize_x)) > _width)) {
   17f48:	f9b6 a000 	ldrsh.w	sl, [r6]
   17f4c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
                        y1 = *y + yo * tsy,
   17f50:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
                        x2 = x1 + gw * tsx - 1,
   17f54:	fb02 f303 	mul.w	r3, r2, r3
                        x1 = *x + xo * tsx,
   17f58:	fb09 a502 	mla	r5, r9, r2, sl
   17f5c:	b292      	uxth	r2, r2
                        y1 = *y + yo * tsy,
   17f5e:	fb0e c407 	mla	r4, lr, r7, ip
                        y2 = y1 + gh * tsy - 1;
   17f62:	fb11 f107 	smulbb	r1, r1, r7
                        x2 = x1 + gw * tsx - 1,
   17f66:	3b01      	subs	r3, #1
                if(x1 < *minx) *minx = x1;
   17f68:	9f0e      	ldr	r7, [sp, #56]	; 0x38
                        y2 = y1 + gh * tsy - 1;
   17f6a:	3901      	subs	r1, #1
                        x2 = x1 + gw * tsx - 1,
   17f6c:	fa13 f385 	uxtah	r3, r3, r5
                if(x1 < *minx) *minx = x1;
   17f70:	f9b7 7000 	ldrsh.w	r7, [r7]
                        x1 = *x + xo * tsx,
   17f74:	b22d      	sxth	r5, r5
                        y2 = y1 + gh * tsy - 1;
   17f76:	fa11 f184 	uxtah	r1, r1, r4
                        x2 = x1 + gw * tsx - 1,
   17f7a:	b21b      	sxth	r3, r3
                if(x1 < *minx) *minx = x1;
   17f7c:	42af      	cmp	r7, r5
                        y1 = *y + yo * tsy,
   17f7e:	b224      	sxth	r4, r4
                        y2 = y1 + gh * tsy - 1;
   17f80:	b209      	sxth	r1, r1
                if(x1 < *minx) *minx = x1;
   17f82:	dd01      	ble.n	17f88 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x218>
   17f84:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   17f86:	803d      	strh	r5, [r7, #0]
                if(y1 < *miny) *miny = y1;
   17f88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   17f8a:	f9b5 5000 	ldrsh.w	r5, [r5]
   17f8e:	42a5      	cmp	r5, r4
   17f90:	dd01      	ble.n	17f96 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x226>
   17f92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   17f94:	802c      	strh	r4, [r5, #0]
                if(x2 > *maxx) *maxx = x2;
   17f96:	9c10      	ldr	r4, [sp, #64]	; 0x40
   17f98:	f9b4 4000 	ldrsh.w	r4, [r4]
   17f9c:	429c      	cmp	r4, r3
   17f9e:	da01      	bge.n	17fa4 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x234>
   17fa0:	9c10      	ldr	r4, [sp, #64]	; 0x40
   17fa2:	8023      	strh	r3, [r4, #0]
                if(y2 > *maxy) *maxy = y2;
   17fa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
   17faa:	428b      	cmp	r3, r1
   17fac:	da01      	bge.n	17fb2 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x242>
   17fae:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17fb0:	8019      	strh	r1, [r3, #0]
                *x += xa * tsx;
   17fb2:	8833      	ldrh	r3, [r6, #0]
   17fb4:	fb00 3302 	mla	r3, r0, r2, r3
   17fb8:	8033      	strh	r3, [r6, #0]
   17fba:	e78e      	b.n	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
            *x  = 0;    // Reset x to zero, advance y by one line
   17fbc:	8015      	strh	r5, [r2, #0]
            *y += textsize_y * gfxFont->yAdvance;
   17fbe:	7a9a      	ldrb	r2, [r3, #10]
   17fc0:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   17fc4:	883b      	ldrh	r3, [r7, #0]
   17fc6:	fb01 3302 	mla	r3, r1, r2, r3
   17fca:	803b      	strh	r3, [r7, #0]
   17fcc:	e785      	b.n	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
        if(c == '\n') {                     // Newline?
   17fce:	290a      	cmp	r1, #10
   17fd0:	d052      	beq.n	18078 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x308>
        } else if(c != '\r') {  // Normal char; ignore carriage returns
   17fd2:	290d      	cmp	r1, #13
   17fd4:	d081      	beq.n	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
            if(wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
   17fd6:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
   17fda:	f9b6 0000 	ldrsh.w	r0, [r6]
   17fde:	2a00      	cmp	r2, #0
   17fe0:	d161      	bne.n	180a6 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x336>
                y2 = *y + textsize_y * 8 - 1;
   17fe2:	f9b7 3000 	ldrsh.w	r3, [r7]
   17fe6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   17fea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   17fee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
            int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
   17ff2:	2106      	movs	r1, #6
   17ff4:	fb11 0102 	smlabb	r1, r1, r2, r0
            if(x2 > *maxx) *maxx = x2;      // Track max x, y
   17ff8:	9810      	ldr	r0, [sp, #64]	; 0x40
                y2 = *y + textsize_y * 8 - 1;
   17ffa:	3b01      	subs	r3, #1
            int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
   17ffc:	3901      	subs	r1, #1
            if(x2 > *maxx) *maxx = x2;      // Track max x, y
   17ffe:	f9b0 0000 	ldrsh.w	r0, [r0]
   18002:	4288      	cmp	r0, r1
   18004:	da01      	bge.n	1800a <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x29a>
   18006:	9810      	ldr	r0, [sp, #64]	; 0x40
   18008:	8001      	strh	r1, [r0, #0]
            if(y2 > *maxy) *maxy = y2;
   1800a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1800c:	f9b1 1000 	ldrsh.w	r1, [r1]
   18010:	4299      	cmp	r1, r3
   18012:	da01      	bge.n	18018 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2a8>
   18014:	9911      	ldr	r1, [sp, #68]	; 0x44
   18016:	800b      	strh	r3, [r1, #0]
            if(*x < *minx) *minx = *x;      // Track min x, y
   18018:	990e      	ldr	r1, [sp, #56]	; 0x38
   1801a:	f9b6 3000 	ldrsh.w	r3, [r6]
   1801e:	f9b1 1000 	ldrsh.w	r1, [r1]
   18022:	4299      	cmp	r1, r3
   18024:	dd01      	ble.n	1802a <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2ba>
   18026:	990e      	ldr	r1, [sp, #56]	; 0x38
   18028:	800b      	strh	r3, [r1, #0]
            if(*y < *miny) *miny = *y;
   1802a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1802c:	f9b7 3000 	ldrsh.w	r3, [r7]
   18030:	f9b1 1000 	ldrsh.w	r1, [r1]
   18034:	4299      	cmp	r1, r3
   18036:	dd01      	ble.n	1803c <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2cc>
   18038:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1803a:	800b      	strh	r3, [r1, #0]
            *x += textsize_x * 6;             // Advance x one char
   1803c:	8833      	ldrh	r3, [r6, #0]
   1803e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   18042:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   18046:	8033      	strh	r3, [r6, #0]
   18048:	e747      	b.n	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
	            *x  = 0; // Reset x to zero, advance y by one line
   1804a:	2300      	movs	r3, #0
   1804c:	8033      	strh	r3, [r6, #0]
	            *y += font->line_space;
   1804e:	8839      	ldrh	r1, [r7, #0]
   18050:	7e2b      	ldrb	r3, [r5, #24]
   18052:	440b      	add	r3, r1
   18054:	b29b      	uxth	r3, r3
   18056:	803b      	strh	r3, [r7, #0]
	            y1 = *y + yoffset,
   18058:	449a      	add	sl, r3
	            x1 = *x + xoffset,
   1805a:	8831      	ldrh	r1, [r6, #0]
	            y2 = y1 + height;
   1805c:	fa1b fb8a 	uxtah	fp, fp, sl
	            y1 = *y + yoffset,
   18060:	fa0f f38a 	sxth.w	r3, sl
	            x1 = *x + xoffset,
   18064:	4489      	add	r9, r1
	            y2 = y1 + height;
   18066:	fa0f fe8b 	sxth.w	lr, fp
	            x2 = x1 + width,
   1806a:	fa12 f289 	uxtah	r2, r2, r9
	            x1 = *x + xoffset,
   1806e:	fa0f f189 	sxth.w	r1, r9
	            x2 = x1 + width,
   18072:	fa0f fc82 	sxth.w	ip, r2
   18076:	e706      	b.n	17e86 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x116>
            *x  = 0;                        // Reset x to zero,
   18078:	8013      	strh	r3, [r2, #0]
            *y += textsize_y * 8;           // advance y one line
   1807a:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
   1807e:	883b      	ldrh	r3, [r7, #0]
   18080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   18084:	803b      	strh	r3, [r7, #0]
   18086:	e728      	b.n	17eda <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x16a>
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize_x)) > _width)) {
   18088:	f9b6 a000 	ldrsh.w	sl, [r6]
   1808c:	eb09 0c03 	add.w	ip, r9, r3
   18090:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   18094:	f9b4 b026 	ldrsh.w	fp, [r4, #38]	; 0x26
   18098:	fb02 ac0c 	mla	ip, r2, ip, sl
   1809c:	45dc      	cmp	ip, fp
   1809e:	dc0e      	bgt.n	180be <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x34e>
                    y1 = *y + font->cap_height - height - yoffset,
   180a0:	f8b7 c000 	ldrh.w	ip, [r7]
   180a4:	e754      	b.n	17f50 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1e0>
            if(wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
   180a6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   180aa:	2106      	movs	r1, #6
   180ac:	f9b4 5026 	ldrsh.w	r5, [r4, #38]	; 0x26
   180b0:	fb11 0102 	smlabb	r1, r1, r2, r0
   180b4:	42a9      	cmp	r1, r5
   180b6:	dc12      	bgt.n	180de <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x36e>
                y2 = *y + textsize_y * 8 - 1;
   180b8:	f9b7 3000 	ldrsh.w	r3, [r7]
   180bc:	e795      	b.n	17fea <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x27a>
                    *x  = 0; // Reset x to zero, advance y by one line
   180be:	8035      	strh	r5, [r6, #0]
                    *y += textsize_y * gfxFont->yAdvance;
   180c0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   180c4:	f8b7 c000 	ldrh.w	ip, [r7]
   180c8:	fb02 cc08 	mla	ip, r2, r8, ip
   180cc:	fa1f fc8c 	uxth.w	ip, ip
   180d0:	f8a7 c000 	strh.w	ip, [r7]
                        x1 = *x + xo * tsx,
   180d4:	f9b6 a000 	ldrsh.w	sl, [r6]
   180d8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   180dc:	e738      	b.n	17f50 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1e0>
                *x  = 0;                    // Reset x to zero,
   180de:	8033      	strh	r3, [r6, #0]
                *y += textsize_y * 8;       // advance y one line
   180e0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   180e4:	883b      	ldrh	r3, [r7, #0]
   180e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   180ea:	b21b      	sxth	r3, r3
   180ec:	803b      	strh	r3, [r7, #0]
            int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
   180ee:	f9b6 0000 	ldrsh.w	r0, [r6]
   180f2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   180f6:	e778      	b.n	17fea <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)+0x27a>

000180f8 <ST7735_t3::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)>:

// Add in Adafruit versions of text bounds calculations. 
void ST7735_t3::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x, int16_t y,
      int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h) {
   180f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180fc:	b089      	sub	sp, #36	; 0x24
   180fe:	4682      	mov	sl, r0
   18100:	460c      	mov	r4, r1
   18102:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    *x1 = x;
    *y1 = y;
   18106:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   1810a:	9814      	ldr	r0, [sp, #80]	; 0x50
    *x1 = x;
   1810c:	f8ab 3000 	strh.w	r3, [fp]
      int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h) {
   18110:	f8ad 3016 	strh.w	r3, [sp, #22]
    *w  = *h = 0;
   18114:	2300      	movs	r3, #0
    *y1 = y;
   18116:	8001      	strh	r1, [r0, #0]
    *w  = *h = 0;
   18118:	9916      	ldr	r1, [sp, #88]	; 0x58
   1811a:	800b      	strh	r3, [r1, #0]
   1811c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1811e:	800b      	strh	r3, [r1, #0]

    int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;
   18120:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18124:	f9ba 1026 	ldrsh.w	r1, [sl, #38]	; 0x26
   18128:	f8ad 301c 	strh.w	r3, [sp, #28]
   1812c:	f8ad 301e 	strh.w	r3, [sp, #30]
   18130:	f9ba 3028 	ldrsh.w	r3, [sl, #40]	; 0x28
   18134:	f8ad 1018 	strh.w	r1, [sp, #24]
   18138:	f8ad 301a 	strh.w	r3, [sp, #26]

    while(len--)
   1813c:	b382      	cbz	r2, 181a0 <ST7735_t3::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0xa8>
   1813e:	18a5      	adds	r5, r4, r2
   18140:	f10d 091e 	add.w	r9, sp, #30
   18144:	f10d 081c 	add.w	r8, sp, #28
   18148:	f10d 071a 	add.w	r7, sp, #26
   1814c:	ae06      	add	r6, sp, #24
        charBounds(*buffer++, &x, &y, &minx, &miny, &maxx, &maxy);
   1814e:	ab12      	add	r3, sp, #72	; 0x48
   18150:	f10d 0216 	add.w	r2, sp, #22
   18154:	4650      	mov	r0, sl
   18156:	e9cd 8902 	strd	r8, r9, [sp, #8]
   1815a:	e9cd 6700 	strd	r6, r7, [sp]
   1815e:	f814 1b01 	ldrb.w	r1, [r4], #1
   18162:	f7ff fe05 	bl	17d70 <ST7735_t3::charBounds(char, short*, short*, short*, short*, short*, short*)>
    while(len--)
   18166:	42a5      	cmp	r5, r4
   18168:	d1f1      	bne.n	1814e <ST7735_t3::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0x56>

    if(maxx >= minx) {
   1816a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
   1816e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
        *x1 = minx;
        *w  = maxx - minx + 1;
    }
    if(maxy >= miny) {
   18172:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
   18176:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    if(maxx >= minx) {
   1817a:	4281      	cmp	r1, r0
   1817c:	dc05      	bgt.n	1818a <ST7735_t3::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0x92>
        *w  = maxx - minx + 1;
   1817e:	3001      	adds	r0, #1
        *x1 = minx;
   18180:	f8ab 1000 	strh.w	r1, [fp]
        *w  = maxx - minx + 1;
   18184:	1a40      	subs	r0, r0, r1
   18186:	9915      	ldr	r1, [sp, #84]	; 0x54
   18188:	8008      	strh	r0, [r1, #0]
    if(maxy >= miny) {
   1818a:	429a      	cmp	r2, r3
   1818c:	db05      	blt.n	1819a <ST7735_t3::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0xa2>
        *y1 = miny;
        *h  = maxy - miny + 1;
   1818e:	3201      	adds	r2, #1
        *y1 = miny;
   18190:	9914      	ldr	r1, [sp, #80]	; 0x50
        *h  = maxy - miny + 1;
   18192:	1ad2      	subs	r2, r2, r3
        *y1 = miny;
   18194:	800b      	strh	r3, [r1, #0]
        *h  = maxy - miny + 1;
   18196:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18198:	801a      	strh	r2, [r3, #0]
    }
}
   1819a:	b009      	add	sp, #36	; 0x24
   1819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while(len--)
   181a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   181a4:	4610      	mov	r0, r2
   181a6:	e7e8      	b.n	1817a <ST7735_t3::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0x82>

000181a8 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)>:
	uint32_t result = ((((textcolorPrexpanded - textbgcolorPrexpanded) * alpha) >> 5) + textbgcolorPrexpanded) & 0b00000111111000001111100000011111;
	Pixel(x,y,(uint16_t)((result >> 16) | result));
}

void ST7735_t3::drawFontBits(bool opaque, uint32_t bits, uint32_t numbits, int32_t x, int32_t y, uint32_t repeat)
{
   181a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181ac:	b089      	sub	sp, #36	; 0x24
   181ae:	4681      	mov	r9, r0
   181b0:	468a      	mov	sl, r1
   181b2:	9302      	str	r3, [sp, #8]
   181b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   181b6:	9303      	str	r3, [sp, #12]
   181b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   181ba:	9304      	str	r3, [sp, #16]
   181bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   181be:	9305      	str	r3, [sp, #20]
	if (bits == 0) {
   181c0:	b922      	cbnz	r2, 181cc <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x24>
		if (opaque) {
   181c2:	2900      	cmp	r1, #0
   181c4:	d165      	bne.n	18292 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0xea>
			if (opaque) {
				fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
			}
		}
	}
}
   181c6:	b009      	add	sp, #36	; 0x24
   181c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bgw = 0;
   181cc:	2700      	movs	r7, #0
					fillRect(x1 - w, y, w, repeat, textcolor);
   181ce:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
   181d2:	4690      	mov	r8, r2
			if (bits & (1 << n)) {
   181d4:	f04f 0b01 	mov.w	fp, #1
		w = 0;
   181d8:	463d      	mov	r5, r7
					fillRect(x1 - w, y, w, repeat, textcolor);
   181da:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   181de:	9306      	str	r3, [sp, #24]
		int32_t x1 = x;
   181e0:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
   181e4:	e007      	b.n	181f6 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x4e>
					if (opaque) {
   181e6:	b117      	cbz	r7, 181ee <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x46>
   181e8:	f1ba 0f00 	cmp.w	sl, #0
   181ec:	d143      	bne.n	18276 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0xce>
				w++;
   181ee:	3501      	adds	r5, #1
   181f0:	2700      	movs	r7, #0
			x1++;
   181f2:	3601      	adds	r6, #1
		} while (n > 0);
   181f4:	b1c4      	cbz	r4, 18228 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x80>
			n--;
   181f6:	3c01      	subs	r4, #1
			if (bits & (1 << n)) {
   181f8:	fa0b f304 	lsl.w	r3, fp, r4
   181fc:	ea13 0f08 	tst.w	r3, r8
   18200:	d1f1      	bne.n	181e6 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x3e>
					fillRect(x1 - w, y, w, repeat, textcolor);
   18202:	1b71      	subs	r1, r6, r5
				bgw++;
   18204:	3701      	adds	r7, #1
				if (w>0) {
   18206:	b15d      	cbz	r5, 18220 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x78>
					fillRect(x1 - w, y, w, repeat, textcolor);
   18208:	9806      	ldr	r0, [sp, #24]
   1820a:	b22b      	sxth	r3, r5
   1820c:	b209      	sxth	r1, r1
   1820e:	9207      	str	r2, [sp, #28]
   18210:	9000      	str	r0, [sp, #0]
   18212:	4648      	mov	r0, r9
   18214:	f8b9 5034 	ldrh.w	r5, [r9, #52]	; 0x34
   18218:	9501      	str	r5, [sp, #4]
   1821a:	f7fe f983 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
   1821e:	9a07      	ldr	r2, [sp, #28]
				bgw++;
   18220:	2500      	movs	r5, #0
			x1++;
   18222:	3601      	adds	r6, #1
		} while (n > 0);
   18224:	2c00      	cmp	r4, #0
   18226:	d1e6      	bne.n	181f6 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x4e>
   18228:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1822c:	441c      	add	r4, r3
		if (w > 0) {
   1822e:	b98d      	cbnz	r5, 18254 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0xac>
			if (opaque) {
   18230:	2f00      	cmp	r7, #0
   18232:	d0c8      	beq.n	181c6 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x1e>
   18234:	f1ba 0f00 	cmp.w	sl, #0
   18238:	d0c5      	beq.n	181c6 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x1e>
				fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
   1823a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
   1823e:	1be1      	subs	r1, r4, r7
   18240:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   18244:	4648      	mov	r0, r9
   18246:	9312      	str	r3, [sp, #72]	; 0x48
   18248:	b209      	sxth	r1, r1
   1824a:	f8b9 4036 	ldrh.w	r4, [r9, #54]	; 0x36
   1824e:	b23b      	sxth	r3, r7
   18250:	9413      	str	r4, [sp, #76]	; 0x4c
   18252:	e029      	b.n	182a8 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x100>
			fillRect(x1 - w, y, w, repeat, textcolor);
   18254:	f8b9 2034 	ldrh.w	r2, [r9, #52]	; 0x34
   18258:	1b61      	subs	r1, r4, r5
   1825a:	b22b      	sxth	r3, r5
   1825c:	4648      	mov	r0, r9
   1825e:	9201      	str	r2, [sp, #4]
   18260:	b209      	sxth	r1, r1
   18262:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   18266:	9200      	str	r2, [sp, #0]
   18268:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   1826c:	f7fe f95a 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
			if (opaque) {
   18270:	2f00      	cmp	r7, #0
   18272:	d1df      	bne.n	18234 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x8c>
   18274:	e7a7      	b.n	181c6 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x1e>
						fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
   18276:	9b06      	ldr	r3, [sp, #24]
   18278:	1bf1      	subs	r1, r6, r7
   1827a:	4648      	mov	r0, r9
   1827c:	9207      	str	r2, [sp, #28]
   1827e:	9300      	str	r3, [sp, #0]
   18280:	b23b      	sxth	r3, r7
   18282:	f8b9 7036 	ldrh.w	r7, [r9, #54]	; 0x36
   18286:	b209      	sxth	r1, r1
   18288:	9701      	str	r7, [sp, #4]
   1828a:	f7fe f94b 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
   1828e:	9a07      	ldr	r2, [sp, #28]
   18290:	e7ad      	b.n	181ee <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x46>
			fillRect(x, y, numbits, repeat, textbgcolor);
   18292:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   18294:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
   18298:	9313      	str	r3, [sp, #76]	; 0x4c
   1829a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   1829e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
   182a2:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
   182a6:	9412      	str	r4, [sp, #72]	; 0x48
}
   182a8:	b009      	add	sp, #36	; 0x24
   182aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
   182ae:	f7fe b939 	b.w	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
   182b2:	bf00      	nop

000182b4 <ST7735_t3::drawFontChar(unsigned int)>:
{
   182b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (c >= font->index1_first && c <= font->index1_last) {
   182b8:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
{
   182ba:	4681      	mov	r9, r0
   182bc:	b097      	sub	sp, #92	; 0x5c
	if (c >= font->index1_first && c <= font->index1_last) {
   182be:	7ba8      	ldrb	r0, [r5, #14]
   182c0:	4288      	cmp	r0, r1
   182c2:	d807      	bhi.n	182d4 <ST7735_t3::drawFontChar(unsigned int)+0x20>
   182c4:	7beb      	ldrb	r3, [r5, #15]
   182c6:	428b      	cmp	r3, r1
   182c8:	d304      	bcc.n	182d4 <ST7735_t3::drawFontChar(unsigned int)+0x20>
		bitoffset = c - font->index1_first;
   182ca:	1a09      	subs	r1, r1, r0
		bitoffset *= font->bits_index;
   182cc:	7caa      	ldrb	r2, [r5, #18]
   182ce:	fb02 f101 	mul.w	r1, r2, r1
   182d2:	e00f      	b.n	182f4 <ST7735_t3::drawFontChar(unsigned int)+0x40>
	} else if (c >= font->index2_first && c <= font->index2_last) {
   182d4:	7c2a      	ldrb	r2, [r5, #16]
   182d6:	428a      	cmp	r2, r1
   182d8:	f200 80db 	bhi.w	18492 <ST7735_t3::drawFontChar(unsigned int)+0x1de>
   182dc:	7c6b      	ldrb	r3, [r5, #17]
   182de:	428b      	cmp	r3, r1
   182e0:	f0c0 80d7 	bcc.w	18492 <ST7735_t3::drawFontChar(unsigned int)+0x1de>
		bitoffset = c - font->index2_first + font->index1_last - font->index1_first + 1;
   182e4:	3101      	adds	r1, #1
   182e6:	7beb      	ldrb	r3, [r5, #15]
   182e8:	4419      	add	r1, r3
   182ea:	1a89      	subs	r1, r1, r2
		bitoffset *= font->bits_index;
   182ec:	7caa      	ldrb	r2, [r5, #18]
		bitoffset = c - font->index2_first + font->index1_last - font->index1_first + 1;
   182ee:	1a09      	subs	r1, r1, r0
		bitoffset *= font->bits_index;
   182f0:	fb02 f101 	mul.w	r1, r2, r1
	data = font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);
   182f4:	6828      	ldr	r0, [r5, #0]
   182f6:	f7fc fd9b 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
   182fa:	68ab      	ldr	r3, [r5, #8]
	uint32_t encoding = fetchbits_unsigned(data, 0, 3);
   182fc:	2203      	movs	r2, #3
   182fe:	2100      	movs	r1, #0
	data = font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);
   18300:	eb03 0800 	add.w	r8, r3, r0
	uint32_t encoding = fetchbits_unsigned(data, 0, 3);
   18304:	4640      	mov	r0, r8
   18306:	f7fc fd93 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
	if (encoding != 0) return;
   1830a:	9008      	str	r0, [sp, #32]
   1830c:	2800      	cmp	r0, #0
   1830e:	f040 80c0 	bne.w	18492 <ST7735_t3::drawFontChar(unsigned int)+0x1de>
	uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
   18312:	7cec      	ldrb	r4, [r5, #19]
   18314:	2103      	movs	r1, #3
   18316:	4640      	mov	r0, r8
   18318:	4622      	mov	r2, r4
   1831a:	f7fc fd89 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
	bitoffset = font->bits_width + 3;
   1831e:	1ce1      	adds	r1, r4, #3
	uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
   18320:	7d2a      	ldrb	r2, [r5, #20]
	uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
   18322:	4683      	mov	fp, r0
	uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
   18324:	4640      	mov	r0, r8
	bitoffset += font->bits_height;
   18326:	1854      	adds	r4, r2, r1
	uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
   18328:	f7fc fd82 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
	int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
   1832c:	7d6e      	ldrb	r6, [r5, #21]
	uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
   1832e:	9006      	str	r0, [sp, #24]
	uint32_t val = fetchbits_unsigned(p, index, required);
   18330:	4621      	mov	r1, r4
   18332:	4632      	mov	r2, r6
   18334:	4640      	mov	r0, r8
   18336:	f7fc fd7b 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
	if (val & (1 << (required - 1))) {
   1833a:	1e73      	subs	r3, r6, #1
   1833c:	2201      	movs	r2, #1
	uint32_t val = fetchbits_unsigned(p, index, required);
   1833e:	4682      	mov	sl, r0
	if (val & (1 << (required - 1))) {
   18340:	fa02 f303 	lsl.w	r3, r2, r3
   18344:	4203      	tst	r3, r0
   18346:	d002      	beq.n	1834e <ST7735_t3::drawFontChar(unsigned int)+0x9a>
		return (int32_t)val - (1 << required);
   18348:	40b2      	lsls	r2, r6
   1834a:	eba0 0a02 	sub.w	sl, r0, r2
	bitoffset += font->bits_xoffset;
   1834e:	4434      	add	r4, r6
	int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
   18350:	7dae      	ldrb	r6, [r5, #22]
	uint32_t val = fetchbits_unsigned(p, index, required);
   18352:	4640      	mov	r0, r8
   18354:	4632      	mov	r2, r6
   18356:	4621      	mov	r1, r4
   18358:	f7fc fd6a 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
	if (val & (1 << (required - 1))) {
   1835c:	1e73      	subs	r3, r6, #1
   1835e:	2201      	movs	r2, #1
	uint32_t val = fetchbits_unsigned(p, index, required);
   18360:	9007      	str	r0, [sp, #28]
	if (val & (1 << (required - 1))) {
   18362:	fa02 f303 	lsl.w	r3, r2, r3
   18366:	4203      	tst	r3, r0
   18368:	d002      	beq.n	18370 <ST7735_t3::drawFontChar(unsigned int)+0xbc>
		return (int32_t)val - (1 << required);
   1836a:	40b2      	lsls	r2, r6
   1836c:	1a83      	subs	r3, r0, r2
   1836e:	9307      	str	r3, [sp, #28]
	bitoffset += font->bits_yoffset;
   18370:	4426      	add	r6, r4
	uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
   18372:	7def      	ldrb	r7, [r5, #23]
   18374:	4640      	mov	r0, r8
   18376:	463a      	mov	r2, r7
   18378:	4631      	mov	r1, r6
   1837a:	f7fc fd59 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
	if (cursor_x < 0) cursor_x = 0;
   1837e:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
	uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
   18382:	900b      	str	r0, [sp, #44]	; 0x2c
	if (cursor_x < 0) cursor_x = 0;
   18384:	2b00      	cmp	r3, #0
   18386:	f2c0 80d7 	blt.w	18538 <ST7735_t3::drawFontChar(unsigned int)+0x284>
	int32_t origin_x = cursor_x + xoffset;
   1838a:	eb03 020a 	add.w	r2, r3, sl
   1838e:	9205      	str	r2, [sp, #20]
	if (origin_x < 0) {
   18390:	9a05      	ldr	r2, [sp, #20]
   18392:	2a00      	cmp	r2, #0
   18394:	da05      	bge.n	183a2 <ST7735_t3::drawFontChar(unsigned int)+0xee>
		cursor_x -= xoffset;
   18396:	eba3 030a 	sub.w	r3, r3, sl
   1839a:	f8a9 300a 	strh.w	r3, [r9, #10]
		origin_x = 0;
   1839e:	2300      	movs	r3, #0
   183a0:	9305      	str	r3, [sp, #20]
	if (origin_x + (int)width > _width) {
   183a2:	9b05      	ldr	r3, [sp, #20]
   183a4:	f9b9 2026 	ldrsh.w	r2, [r9, #38]	; 0x26
   183a8:	445b      	add	r3, fp
   183aa:	4293      	cmp	r3, r2
		if (!wrap) return;
   183ac:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
	if (origin_x + (int)width > _width) {
   183b0:	dc72      	bgt.n	18498 <ST7735_t3::drawFontChar(unsigned int)+0x1e4>
	if(wrap && scrollEnable && isWritingScrollArea && ((origin_x + (int)width) > (scroll_x+scroll_width))){
   183b2:	2b00      	cmp	r3, #0
   183b4:	f040 81bc 	bne.w	18730 <ST7735_t3::drawFontChar(unsigned int)+0x47c>
	if(scrollEnable && isWritingScrollArea && (cursor_y > (scroll_y+scroll_height - font->cap_height))){
   183b8:	f899 3032 	ldrb.w	r3, [r9, #50]	; 0x32
   183bc:	2b00      	cmp	r3, #0
   183be:	f040 80c1 	bne.w	18544 <ST7735_t3::drawFontChar(unsigned int)+0x290>
		cursor_y += font->line_space;
   183c2:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
	if (cursor_y >= _height) return;
   183c6:	f9b9 3028 	ldrsh.w	r3, [r9, #40]	; 0x28
   183ca:	42a3      	cmp	r3, r4
   183cc:	dd61      	ble.n	18492 <ST7735_t3::drawFontChar(unsigned int)+0x1de>
	bitoffset += font->bits_delta;
   183ce:	eb07 0a06 	add.w	sl, r7, r6
	int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
   183d2:	7e6f      	ldrb	r7, [r5, #25]
	if (!opaque) {
   183d4:	f8b9 2036 	ldrh.w	r2, [r9, #54]	; 0x36
	int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
   183d8:	4427      	add	r7, r4
   183da:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
   183de:	440b      	add	r3, r1
	int32_t linecount = height;
   183e0:	910a      	str	r1, [sp, #40]	; 0x28
	int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
   183e2:	1aff      	subs	r7, r7, r3
	if (!opaque) {
   183e4:	f8b9 3034 	ldrh.w	r3, [r9, #52]	; 0x34
   183e8:	429a      	cmp	r2, r3
   183ea:	f000 80b3 	beq.w	18554 <ST7735_t3::drawFontChar(unsigned int)+0x2a0>
		int end_y = cursor_y_origin + font->line_space; 
   183ee:	7e29      	ldrb	r1, [r5, #24]
		int cursor_x_origin = cursor_x + _originx;
   183f0:	f9b9 3018 	ldrsh.w	r3, [r9, #24]
		origin_x += _originx;
   183f4:	9d05      	ldr	r5, [sp, #20]
		int cursor_x_origin = cursor_x + _originx;
   183f6:	f9b9 200a 	ldrsh.w	r2, [r9, #10]
		origin_x += _originx;
   183fa:	441d      	add	r5, r3
		int cursor_x_origin = cursor_x + _originx;
   183fc:	4413      	add	r3, r2
		if ((origin_x + (int)width) > end_x)
   183fe:	eb0b 0005 	add.w	r0, fp, r5
		origin_x += _originx;
   18402:	9509      	str	r5, [sp, #36]	; 0x24
		if ((origin_x + (int)width) > end_x)
   18404:	9005      	str	r0, [sp, #20]
		int cursor_y_origin = cursor_y + _originy;
   18406:	f9b9 001a 	ldrsh.w	r0, [r9, #26]
		origin_y += _originy;
   1840a:	19c6      	adds	r6, r0, r7
		int cursor_y_origin = cursor_y + _originy;
   1840c:	4404      	add	r4, r0
		int end_x = cursor_x_origin + delta; 
   1840e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   18410:	42b4      	cmp	r4, r6
		int end_y = cursor_y_origin + font->line_space; 
   18412:	4421      	add	r1, r4
		int end_x = cursor_x_origin + delta; 
   18414:	eb03 0007 	add.w	r0, r3, r7
		origin_y += _originy;
   18418:	9607      	str	r6, [sp, #28]
		if (start_x < 0) start_x = 0;
   1841a:	bfa8      	it	ge
   1841c:	4634      	movge	r4, r6
   1841e:	42ab      	cmp	r3, r5
   18420:	bfa8      	it	ge
   18422:	462b      	movge	r3, r5
   18424:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   18428:	461d      	mov	r5, r3
   1842a:	9b05      	ldr	r3, [sp, #20]
   1842c:	4298      	cmp	r0, r3
   1842e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   18432:	bfb8      	it	lt
   18434:	4618      	movlt	r0, r3
		if (end_x >= _displayclipx2)  end_x = _displayclipx2;	
   18436:	f9b9 3020 	ldrsh.w	r3, [r9, #32]
   1843a:	950e      	str	r5, [sp, #56]	; 0x38
   1843c:	4298      	cmp	r0, r3
   1843e:	bfa8      	it	ge
   18440:	4618      	movge	r0, r3
		if((end_x < _displayclipx1) ||(start_x >= _displayclipx2) || (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
   18442:	42ab      	cmp	r3, r5
		if ((origin_y + (int)height) > end_y)
   18444:	9d06      	ldr	r5, [sp, #24]
		if((end_x < _displayclipx1) ||(start_x >= _displayclipx2) || (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
   18446:	bfcc      	ite	gt
   18448:	2300      	movgt	r3, #0
   1844a:	2301      	movle	r3, #1
		if ((origin_y + (int)height) > end_y)
   1844c:	19af      	adds	r7, r5, r6
   1844e:	900f      	str	r0, [sp, #60]	; 0x3c
		int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
   18450:	f9b9 601c 	ldrsh.w	r6, [r9, #28]
		end_x--;	// setup to last one we draw
   18454:	3801      	subs	r0, #1
   18456:	42b9      	cmp	r1, r7
		int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;
   18458:	f9b9 501e 	ldrsh.w	r5, [r9, #30]
		end_x--;	// setup to last one we draw
   1845c:	900d      	str	r0, [sp, #52]	; 0x34
   1845e:	bfb8      	it	lt
   18460:	4639      	movlt	r1, r7
		if((end_x < _displayclipx1) ||(start_x >= _displayclipx2) || (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
   18462:	4286      	cmp	r6, r0
   18464:	bfc8      	it	gt
   18466:	f043 0301 	orrgt.w	r3, r3, #1
		if (end_y >= _displayclipy2) end_y = _displayclipy2;	
   1846a:	f9b9 0022 	ldrsh.w	r0, [r9, #34]	; 0x22
   1846e:	4281      	cmp	r1, r0
   18470:	bfa8      	it	ge
   18472:	4601      	movge	r1, r0
		if((end_x < _displayclipx1) ||(start_x >= _displayclipx2) || (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
   18474:	4284      	cmp	r4, r0
   18476:	bfa8      	it	ge
   18478:	f043 0301 	orrge.w	r3, r3, #1
   1847c:	9112      	str	r1, [sp, #72]	; 0x48
		end_y--;
   1847e:	3901      	subs	r1, #1
   18480:	9111      	str	r1, [sp, #68]	; 0x44
		if((end_x < _displayclipx1) ||(start_x >= _displayclipx2) || (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
   18482:	b913      	cbnz	r3, 1848a <ST7735_t3::drawFontChar(unsigned int)+0x1d6>
   18484:	428d      	cmp	r5, r1
   18486:	f340 8156 	ble.w	18736 <ST7735_t3::drawFontChar(unsigned int)+0x482>
			cursor_x += delta;	// could use goto or another indent level...
   1848a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1848c:	441a      	add	r2, r3
   1848e:	f8a9 200a 	strh.w	r2, [r9, #10]
}
   18492:	b017      	add	sp, #92	; 0x5c
   18494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!wrap) return;
   18498:	2b00      	cmp	r3, #0
   1849a:	d0fa      	beq.n	18492 <ST7735_t3::drawFontChar(unsigned int)+0x1de>
		if (xoffset >= 0) {
   1849c:	f1ba 0f00 	cmp.w	sl, #0
   184a0:	f2c0 80dd 	blt.w	1865e <ST7735_t3::drawFontChar(unsigned int)+0x3aa>
			cursor_x = 0;
   184a4:	2300      	movs	r3, #0
   184a6:	f8a9 300a 	strh.w	r3, [r9, #10]
		cursor_y += font->line_space;
   184aa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   184ae:	7e2c      	ldrb	r4, [r5, #24]
   184b0:	441c      	add	r4, r3
		origin_x = 0;
   184b2:	2300      	movs	r3, #0
		cursor_y += font->line_space;
   184b4:	b224      	sxth	r4, r4
		origin_x = 0;
   184b6:	9305      	str	r3, [sp, #20]
		cursor_y += font->line_space;
   184b8:	f8a9 400c 	strh.w	r4, [r9, #12]
	if(wrap && scrollEnable && isWritingScrollArea && ((origin_x + (int)width) > (scroll_x+scroll_width))){
   184bc:	f899 3032 	ldrb.w	r3, [r9, #50]	; 0x32
   184c0:	2b00      	cmp	r3, #0
   184c2:	d080      	beq.n	183c6 <ST7735_t3::drawFontChar(unsigned int)+0x112>
   184c4:	f899 3033 	ldrb.w	r3, [r9, #51]	; 0x33
   184c8:	2b00      	cmp	r3, #0
   184ca:	f43f af7c 	beq.w	183c6 <ST7735_t3::drawFontChar(unsigned int)+0x112>
   184ce:	f9b9 202a 	ldrsh.w	r2, [r9, #42]	; 0x2a
   184d2:	f9b9 302e 	ldrsh.w	r3, [r9, #46]	; 0x2e
   184d6:	9905      	ldr	r1, [sp, #20]
   184d8:	4413      	add	r3, r2
   184da:	4459      	add	r1, fp
   184dc:	4299      	cmp	r1, r3
   184de:	dd0f      	ble.n	18500 <ST7735_t3::drawFontChar(unsigned int)+0x24c>
		if (xoffset >= 0) {
   184e0:	f1ba 0f00 	cmp.w	sl, #0
   184e4:	da03      	bge.n	184ee <ST7735_t3::drawFontChar(unsigned int)+0x23a>
			cursor_x = -xoffset;
   184e6:	f1ca 0a00 	rsb	sl, sl, #0
   184ea:	fa0f f28a 	sxth.w	r2, sl
   184ee:	f8a9 200a 	strh.w	r2, [r9, #10]
		cursor_y += font->line_space;
   184f2:	7e2b      	ldrb	r3, [r5, #24]
   184f4:	4423      	add	r3, r4
   184f6:	b21c      	sxth	r4, r3
    	origin_x = 0;
   184f8:	2300      	movs	r3, #0
		cursor_y += font->line_space;
   184fa:	f8a9 400c 	strh.w	r4, [r9, #12]
    	origin_x = 0;
   184fe:	9305      	str	r3, [sp, #20]
	if(scrollEnable && isWritingScrollArea && (cursor_y > (scroll_y+scroll_height - font->cap_height))){
   18500:	f9b9 2030 	ldrsh.w	r2, [r9, #48]	; 0x30
   18504:	f9b9 302c 	ldrsh.w	r3, [r9, #44]	; 0x2c
   18508:	4413      	add	r3, r2
   1850a:	7e6a      	ldrb	r2, [r5, #25]
   1850c:	1a9b      	subs	r3, r3, r2
   1850e:	429c      	cmp	r4, r3
   18510:	f77f af59 	ble.w	183c6 <ST7735_t3::drawFontChar(unsigned int)+0x112>
		scrollTextArea(font->line_space);
   18514:	7e29      	ldrb	r1, [r5, #24]
   18516:	4648      	mov	r0, r9
   18518:	f7fe ffe6 	bl	174e8 <ST7735_t3::scrollTextArea(unsigned char)>
		cursor_y -= font->line_space;
   1851c:	f8d9 504c 	ldr.w	r5, [r9, #76]	; 0x4c
   18520:	f8b9 400c 	ldrh.w	r4, [r9, #12]
   18524:	7e2b      	ldrb	r3, [r5, #24]
		cursor_x = scroll_x;
   18526:	f8b9 202a 	ldrh.w	r2, [r9, #42]	; 0x2a
		cursor_y -= font->line_space;
   1852a:	1ae4      	subs	r4, r4, r3
		cursor_x = scroll_x;
   1852c:	f8a9 200a 	strh.w	r2, [r9, #10]
		cursor_y -= font->line_space;
   18530:	b224      	sxth	r4, r4
   18532:	f8a9 400c 	strh.w	r4, [r9, #12]
		cursor_x = scroll_x;
   18536:	e746      	b.n	183c6 <ST7735_t3::drawFontChar(unsigned int)+0x112>
	if (cursor_x < 0) cursor_x = 0;
   18538:	2300      	movs	r3, #0
   1853a:	f8cd a014 	str.w	sl, [sp, #20]
   1853e:	f8a9 300a 	strh.w	r3, [r9, #10]
   18542:	e725      	b.n	18390 <ST7735_t3::drawFontChar(unsigned int)+0xdc>
	if(scrollEnable && isWritingScrollArea && (cursor_y > (scroll_y+scroll_height - font->cap_height))){
   18544:	f899 3033 	ldrb.w	r3, [r9, #51]	; 0x33
		cursor_y += font->line_space;
   18548:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
	if(scrollEnable && isWritingScrollArea && (cursor_y > (scroll_y+scroll_height - font->cap_height))){
   1854c:	2b00      	cmp	r3, #0
   1854e:	f43f af3a 	beq.w	183c6 <ST7735_t3::drawFontChar(unsigned int)+0x112>
   18552:	e7d5      	b.n	18500 <ST7735_t3::drawFontChar(unsigned int)+0x24c>
		if (fontbpp>1){
   18554:	f899 3050 	ldrb.w	r3, [r9, #80]	; 0x50
   18558:	2b01      	cmp	r3, #1
   1855a:	f240 8084 	bls.w	18666 <ST7735_t3::drawFontChar(unsigned int)+0x3b2>
			uint8_t halfalpha = 1<<(fontbpp-1);
   1855e:	1e59      	subs	r1, r3, #1
   18560:	2201      	movs	r2, #1
			bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
   18562:	f10a 0607 	add.w	r6, sl, #7
			uint8_t halfalpha = 1<<(fontbpp-1);
   18566:	408a      	lsls	r2, r1
			while (linecount) {
   18568:	9906      	ldr	r1, [sp, #24]
			bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
   1856a:	f026 0607 	bic.w	r6, r6, #7
			while (linecount) {
   1856e:	2900      	cmp	r1, #0
   18570:	d06e      	beq.n	18650 <ST7735_t3::drawFontChar(unsigned int)+0x39c>
   18572:	9906      	ldr	r1, [sp, #24]
			uint32_t xp = 0;
   18574:	4648      	mov	r0, r9
   18576:	f04f 0a00 	mov.w	sl, #0
   1857a:	4439      	add	r1, r7
   1857c:	9106      	str	r1, [sp, #24]
					if (fetchpixel(data, bitoffset, xp)>=halfalpha){
   1857e:	b2d1      	uxtb	r1, r2
			uint32_t xp = 0;
   18580:	463a      	mov	r2, r7
   18582:	4689      	mov	r9, r1
				while(x<width) {
   18584:	f1bb 0f00 	cmp.w	fp, #0
   18588:	d05d      	beq.n	18646 <ST7735_t3::drawFontChar(unsigned int)+0x392>
				uint32_t x = 0;
   1858a:	2400      	movs	r4, #0
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   1858c:	f890 1053 	ldrb.w	r1, [r0, #83]	; 0x53
   18590:	eb0a 0704 	add.w	r7, sl, r4
	uint8_t b = p[index >> 3];
   18594:	08f5      	lsrs	r5, r6, #3
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   18596:	fbb7 fcf1 	udiv	ip, r7, r1
   1859a:	fb01 771c 	mls	r7, r1, ip, r7
   1859e:	3901      	subs	r1, #1
	return (b >> s) & fontbppmask;
   185a0:	f818 5005 	ldrb.w	r5, [r8, r5]
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   185a4:	1bc9      	subs	r1, r1, r7
   185a6:	fb11 f103 	smulbb	r1, r1, r3
	return (b >> s) & fontbppmask;
   185aa:	b2c9      	uxtb	r1, r1
   185ac:	410d      	asrs	r5, r1
   185ae:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
   185b2:	400d      	ands	r5, r1
					if (fetchpixel(data, bitoffset, xp)>=halfalpha){
   185b4:	454d      	cmp	r5, r9
   185b6:	d341      	bcc.n	1863c <ST7735_t3::drawFontChar(unsigned int)+0x388>
	    x+=_originx;
   185b8:	9905      	ldr	r1, [sp, #20]
   185ba:	8b05      	ldrh	r5, [r0, #24]
   185bc:	440d      	add	r5, r1
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   185be:	f9b0 101c 	ldrsh.w	r1, [r0, #28]
	    x+=_originx;
   185c2:	4425      	add	r5, r4
   185c4:	fa0f fc85 	sxth.w	ip, r5
   185c8:	b2ad      	uxth	r5, r5
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   185ca:	4561      	cmp	r1, ip
   185cc:	dc36      	bgt.n	1863c <ST7735_t3::drawFontChar(unsigned int)+0x388>
   185ce:	f9b0 1020 	ldrsh.w	r1, [r0, #32]
   185d2:	4561      	cmp	r1, ip
   185d4:	dd32      	ble.n	1863c <ST7735_t3::drawFontChar(unsigned int)+0x388>
	    y+=_originy;
   185d6:	8b47      	ldrh	r7, [r0, #26]
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   185d8:	f9b0 101e 	ldrsh.w	r1, [r0, #30]
	    y+=_originy;
   185dc:	4417      	add	r7, r2
   185de:	fa0f fe87 	sxth.w	lr, r7
   185e2:	b2bf      	uxth	r7, r7
	  	if((x < _displayclipx1) ||(x >= _displayclipx2) || (y < _displayclipy1) || (y >= _displayclipy2)) return;
   185e4:	4571      	cmp	r1, lr
   185e6:	dc29      	bgt.n	1863c <ST7735_t3::drawFontChar(unsigned int)+0x388>
   185e8:	f9b0 1022 	ldrsh.w	r1, [r0, #34]	; 0x22
   185ec:	4571      	cmp	r1, lr
   185ee:	dd25      	ble.n	1863c <ST7735_t3::drawFontChar(unsigned int)+0x388>
	  	if (_use_fbtft) {
   185f0:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
						Pixel(origin_x + x,y,textcolor);
   185f4:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   185f6:	2900      	cmp	r1, #0
   185f8:	d067      	beq.n	186ca <ST7735_t3::drawFontChar(unsigned int)+0x416>
    if (x < _changed_min_x)
   185fa:	f9b0 10e8 	ldrsh.w	r1, [r0, #232]	; 0xe8
   185fe:	4561      	cmp	r1, ip
    if (y < _changed_min_y)
   18600:	f9b0 10ec 	ldrsh.w	r1, [r0, #236]	; 0xec
      _changed_min_x = x;
   18604:	bfc8      	it	gt
   18606:	f8a0 c0e8 	strhgt.w	ip, [r0, #232]	; 0xe8
    if (y < _changed_min_y)
   1860a:	4571      	cmp	r1, lr
    if (x > _changed_max_x)
   1860c:	f9b0 10ea 	ldrsh.w	r1, [r0, #234]	; 0xea
      _changed_min_y = y;
   18610:	bfc8      	it	gt
   18612:	f8a0 e0ec 	strhgt.w	lr, [r0, #236]	; 0xec
    if (x > _changed_max_x)
   18616:	4561      	cmp	r1, ip
    if (y > _changed_max_y)
   18618:	f9b0 10ee 	ldrsh.w	r1, [r0, #238]	; 0xee
      _changed_max_x = x;
   1861c:	bfb8      	it	lt
   1861e:	f8a0 c0ea 	strhlt.w	ip, [r0, #234]	; 0xea
    if (y > _changed_max_y)
   18622:	4571      	cmp	r1, lr
        int pixel_index = (int)y*(int)_width + x;
   18624:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
      _changed_max_y = y;
   18626:	bfb8      	it	lt
   18628:	f8a0 e0ee 	strhlt.w	lr, [r0, #238]	; 0xee
        int pixel_index = (int)y*(int)_width + x;
   1862c:	fb1e ce01 	smlabb	lr, lr, r1, ip
	  		_pfbtft[pixel_index] = color;
   18630:	f8d0 10d8 	ldr.w	r1, [r0, #216]	; 0xd8
   18634:	f821 301e 	strh.w	r3, [r1, lr, lsl #1]
					bitoffset += fontbpp;
   18638:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
					x++;
   1863c:	3401      	adds	r4, #1
					bitoffset += fontbpp;
   1863e:	441e      	add	r6, r3
				while(x<width) {
   18640:	45a3      	cmp	fp, r4
   18642:	d1a3      	bne.n	1858c <ST7735_t3::drawFontChar(unsigned int)+0x2d8>
					xp++;
   18644:	44da      	add	sl, fp
				y++;
   18646:	3201      	adds	r2, #1
			while (linecount) {
   18648:	9906      	ldr	r1, [sp, #24]
   1864a:	428a      	cmp	r2, r1
   1864c:	d19a      	bne.n	18584 <ST7735_t3::drawFontChar(unsigned int)+0x2d0>
   1864e:	4681      	mov	r9, r0
	cursor_x += delta;
   18650:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   18654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18656:	441a      	add	r2, r3
   18658:	f8a9 200a 	strh.w	r2, [r9, #10]
   1865c:	e719      	b.n	18492 <ST7735_t3::drawFontChar(unsigned int)+0x1de>
			cursor_x = -xoffset;
   1865e:	f1ca 0300 	rsb	r3, sl, #0
   18662:	b21b      	sxth	r3, r3
   18664:	e71f      	b.n	184a6 <ST7735_t3::drawFontChar(unsigned int)+0x1f2>
			while (linecount > 0) {
   18666:	2900      	cmp	r1, #0
   18668:	ddf2      	ble.n	18650 <ST7735_t3::drawFontChar(unsigned int)+0x39c>
	if (p[index >> 3] & (1 << (7 - (index & 7)))) return 1;
   1866a:	ea4f 03da 	mov.w	r3, sl, lsr #3
   1866e:	ea6f 020a 	mvn.w	r2, sl
				if (fetchbit(data, bitoffset++) != 0) {
   18672:	f10a 0101 	add.w	r1, sl, #1
	if (p[index >> 3] & (1 << (7 - (index & 7)))) return 1;
   18676:	f818 3003 	ldrb.w	r3, [r8, r3]
   1867a:	f002 0207 	and.w	r2, r2, #7
   1867e:	4113      	asrs	r3, r2
   18680:	07db      	lsls	r3, r3, #31
   18682:	d44d      	bmi.n	18720 <ST7735_t3::drawFontChar(unsigned int)+0x46c>
				uint32_t n = 1;
   18684:	2501      	movs	r5, #1
				uint32_t x = 0;
   18686:	468a      	mov	sl, r1
   18688:	2400      	movs	r4, #0
					int32_t xsize = width - x;
   1868a:	ebab 0604 	sub.w	r6, fp, r4
					uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
   1868e:	4651      	mov	r1, sl
   18690:	4640      	mov	r0, r8
   18692:	2e20      	cmp	r6, #32
   18694:	bfa8      	it	ge
   18696:	2620      	movge	r6, #32
   18698:	4632      	mov	r2, r6
					bitoffset += xsize;
   1869a:	44b2      	add	sl, r6
					uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
   1869c:	f7fc fbc8 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
					drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
   186a0:	9b05      	ldr	r3, [sp, #20]
					uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
   186a2:	4602      	mov	r2, r0
					drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
   186a4:	4648      	mov	r0, r9
   186a6:	18e1      	adds	r1, r4, r3
					x += xsize;
   186a8:	4434      	add	r4, r6
					drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
   186aa:	4633      	mov	r3, r6
   186ac:	9100      	str	r1, [sp, #0]
   186ae:	2100      	movs	r1, #0
   186b0:	e9cd 7501 	strd	r7, r5, [sp, #4]
   186b4:	f7ff fd78 	bl	181a8 <ST7735_t3::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)>
				} while (x < width);
   186b8:	45a3      	cmp	fp, r4
   186ba:	d8e6      	bhi.n	1868a <ST7735_t3::drawFontChar(unsigned int)+0x3d6>
				linecount -= n;
   186bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				y += n;
   186be:	442f      	add	r7, r5
				linecount -= n;
   186c0:	1b5b      	subs	r3, r3, r5
			while (linecount > 0) {
   186c2:	2b00      	cmp	r3, #0
				linecount -= n;
   186c4:	930a      	str	r3, [sp, #40]	; 0x28
			while (linecount > 0) {
   186c6:	dcd0      	bgt.n	1866a <ST7735_t3::drawFontChar(unsigned int)+0x3b6>
   186c8:	e7c2      	b.n	18650 <ST7735_t3::drawFontChar(unsigned int)+0x39c>
        writecommand(ST7735_CASET); // Column addr set
   186ca:	212a      	movs	r1, #42	; 0x2a
   186cc:	e9cd 3207 	strd	r3, r2, [sp, #28]
   186d0:	f7fc fcea 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   186d4:	f8b0 107a 	ldrh.w	r1, [r0, #122]	; 0x7a
   186d8:	4429      	add	r1, r5
   186da:	b289      	uxth	r1, r1
   186dc:	f7fd f83a 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   186e0:	f8b0 107a 	ldrh.w	r1, [r0, #122]	; 0x7a
   186e4:	4429      	add	r1, r5
   186e6:	b289      	uxth	r1, r1
   186e8:	f7fd f834 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   186ec:	212b      	movs	r1, #43	; 0x2b
   186ee:	f7fc fcdb 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   186f2:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
   186f6:	4439      	add	r1, r7
   186f8:	b289      	uxth	r1, r1
   186fa:	f7fd f82b 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   186fe:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
   18702:	4439      	add	r1, r7
   18704:	b289      	uxth	r1, r1
   18706:	f7fd f825 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
		writecommand(ST7735_RAMWR);
   1870a:	212c      	movs	r1, #44	; 0x2c
   1870c:	f7fc fccc 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
		writedata16(color);
   18710:	9b07      	ldr	r3, [sp, #28]
   18712:	4619      	mov	r1, r3
   18714:	f7fd f81e 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
					bitoffset += fontbpp;
   18718:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   1871c:	9a08      	ldr	r2, [sp, #32]
   1871e:	e78d      	b.n	1863c <ST7735_t3::drawFontChar(unsigned int)+0x388>
					n = fetchbits_unsigned(data, bitoffset, 3) + 2;
   18720:	2203      	movs	r2, #3
   18722:	4640      	mov	r0, r8
   18724:	f7fc fb84 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
					bitoffset += 3;
   18728:	f10a 0104 	add.w	r1, sl, #4
					n = fetchbits_unsigned(data, bitoffset, 3) + 2;
   1872c:	1c85      	adds	r5, r0, #2
					bitoffset += 3;
   1872e:	e7aa      	b.n	18686 <ST7735_t3::drawFontChar(unsigned int)+0x3d2>
		cursor_y += font->line_space;
   18730:	f9b9 400c 	ldrsh.w	r4, [r9, #12]
   18734:	e6c2      	b.n	184bc <ST7735_t3::drawFontChar(unsigned int)+0x208>
		if (_use_fbtft) {
   18736:	f899 30dc 	ldrb.w	r3, [r9, #220]	; 0xdc
   1873a:	2b00      	cmp	r3, #0
   1873c:	f000 811b 	beq.w	18976 <ST7735_t3::drawFontChar(unsigned int)+0x6c2>
      updateChangedRange(
   18740:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
   18744:	b223      	sxth	r3, r4
    if (x < _changed_min_x)
   18746:	f9b9 c0e8 	ldrsh.w	ip, [r9, #232]	; 0xe8
   1874a:	4562      	cmp	r2, ip
   1874c:	da02      	bge.n	18754 <ST7735_t3::drawFontChar(unsigned int)+0x4a0>
      _changed_min_x = x;
   1874e:	4694      	mov	ip, r2
   18750:	f8a9 20e8 	strh.w	r2, [r9, #232]	; 0xe8
    if (y < _changed_min_y)
   18754:	f9b9 60ec 	ldrsh.w	r6, [r9, #236]	; 0xec
   18758:	42b3      	cmp	r3, r6
   1875a:	da02      	bge.n	18762 <ST7735_t3::drawFontChar(unsigned int)+0x4ae>
      _changed_min_y = y;
   1875c:	461e      	mov	r6, r3
   1875e:	f8a9 30ec 	strh.w	r3, [r9, #236]	; 0xec
    if (x > _changed_max_x)
   18762:	f9b9 00ea 	ldrsh.w	r0, [r9, #234]	; 0xea
   18766:	4282      	cmp	r2, r0
   18768:	dd02      	ble.n	18770 <ST7735_t3::drawFontChar(unsigned int)+0x4bc>
      _changed_max_x = x;
   1876a:	4610      	mov	r0, r2
   1876c:	f8a9 20ea 	strh.w	r2, [r9, #234]	; 0xea
    if (y > _changed_max_y)
   18770:	f9b9 10ee 	ldrsh.w	r1, [r9, #238]	; 0xee
   18774:	428b      	cmp	r3, r1
   18776:	dd02      	ble.n	1877e <ST7735_t3::drawFontChar(unsigned int)+0x4ca>
      _changed_max_y = y;
   18778:	4619      	mov	r1, r3
   1877a:	f8a9 30ee 	strh.w	r3, [r9, #238]	; 0xee
      updateChangedRange(
   1877e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
   18782:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
    if (x < _changed_min_x)
   18786:	4562      	cmp	r2, ip
      _changed_min_x = x;
   18788:	bfb8      	it	lt
   1878a:	f8a9 20e8 	strhlt.w	r2, [r9, #232]	; 0xe8
    if (y < _changed_min_y)
   1878e:	42b3      	cmp	r3, r6
      _changed_min_y = y;
   18790:	bfb8      	it	lt
   18792:	f8a9 30ec 	strhlt.w	r3, [r9, #236]	; 0xec
    if (x > _changed_max_x)
   18796:	4282      	cmp	r2, r0
			uint16_t * pfbPixel_row = &_pfbtft[ start_y*_width + start_x];
   18798:	980e      	ldr	r0, [sp, #56]	; 0x38
      _changed_max_x = x;
   1879a:	bfc8      	it	gt
   1879c:	f8a9 20ea 	strhgt.w	r2, [r9, #234]	; 0xea
    if (y > _changed_max_y)
   187a0:	428b      	cmp	r3, r1
   187a2:	f9b9 2026 	ldrsh.w	r2, [r9, #38]	; 0x26
      _changed_max_y = y;
   187a6:	bfc8      	it	gt
   187a8:	f8a9 30ee 	strhgt.w	r3, [r9, #238]	; 0xee
   187ac:	fb04 0102 	mla	r1, r4, r2, r0
   187b0:	f8d9 30d8 	ldr.w	r3, [r9, #216]	; 0xd8
   187b4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
			while (screen_y < origin_y) {
   187b8:	9907      	ldr	r1, [sp, #28]
   187ba:	428c      	cmp	r4, r1
   187bc:	da28      	bge.n	18810 <ST7735_t3::drawFontChar(unsigned int)+0x55c>
   187be:	4601      	mov	r1, r0
   187c0:	ebc0 70c0 	rsb	r0, r0, r0, lsl #31
   187c4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   187c6:	0040      	lsls	r0, r0, #1
   187c8:	468e      	mov	lr, r1
   187ca:	f8dd c01c 	ldr.w	ip, [sp, #28]
   187ce:	e006      	b.n	187de <ST7735_t3::drawFontChar(unsigned int)+0x52a>
				screen_y++;
   187d0:	3401      	adds	r4, #1
				pfbPixel_row += _width;
   187d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
			while (screen_y < origin_y) {
   187d6:	45a4      	cmp	ip, r4
   187d8:	d01a      	beq.n	18810 <ST7735_t3::drawFontChar(unsigned int)+0x55c>
				if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
   187da:	f9b9 501e 	ldrsh.w	r5, [r9, #30]
   187de:	42a5      	cmp	r5, r4
   187e0:	dcf6      	bgt.n	187d0 <ST7735_t3::drawFontChar(unsigned int)+0x51c>
   187e2:	f9b9 1022 	ldrsh.w	r1, [r9, #34]	; 0x22
   187e6:	42a1      	cmp	r1, r4
   187e8:	ddf2      	ble.n	187d0 <ST7735_t3::drawFontChar(unsigned int)+0x51c>
					for (screen_x = start_x; screen_x <= end_x; screen_x++) {
   187ea:	990d      	ldr	r1, [sp, #52]	; 0x34
   187ec:	458e      	cmp	lr, r1
   187ee:	dcef      	bgt.n	187d0 <ST7735_t3::drawFontChar(unsigned int)+0x51c>
   187f0:	181d      	adds	r5, r3, r0
   187f2:	4672      	mov	r2, lr
						if (screen_x >= _displayclipx1) {
   187f4:	f9b9 101c 	ldrsh.w	r1, [r9, #28]
   187f8:	4291      	cmp	r1, r2
   187fa:	dc03      	bgt.n	18804 <ST7735_t3::drawFontChar(unsigned int)+0x550>
							*pfbPixel = textbgcolor;
   187fc:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   18800:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
					for (screen_x = start_x; screen_x <= end_x; screen_x++) {
   18804:	3201      	adds	r2, #1
   18806:	4296      	cmp	r6, r2
   18808:	d1f4      	bne.n	187f4 <ST7735_t3::drawFontChar(unsigned int)+0x540>
   1880a:	f9b9 2026 	ldrsh.w	r2, [r9, #38]	; 0x26
   1880e:	e7df      	b.n	187d0 <ST7735_t3::drawFontChar(unsigned int)+0x51c>
			if (fontbpp>1){
   18810:	f899 1050 	ldrb.w	r1, [r9, #80]	; 0x50
   18814:	2901      	cmp	r1, #1
   18816:	910c      	str	r1, [sp, #48]	; 0x30
   18818:	f240 81d2 	bls.w	18bc0 <ST7735_t3::drawFontChar(unsigned int)+0x90c>
				bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
   1881c:	f10a 0107 	add.w	r1, sl, #7
   18820:	f021 0e07 	bic.w	lr, r1, #7
				while (linecount) {
   18824:	9906      	ldr	r1, [sp, #24]
   18826:	2900      	cmp	r1, #0
   18828:	f000 8367 	beq.w	18efa <ST7735_t3::drawFontChar(unsigned int)+0xc46>
		origin_y += _originy;
   1882c:	9d07      	ldr	r5, [sp, #28]
   1882e:	ee06 8a90 	vmov	s13, r8
		uint32_t result = ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
   18832:	f8df a6cc 	ldr.w	sl, [pc, #1740]	; 18f00 <ST7735_t3::drawFontChar(unsigned int)+0xc4c>
   18836:	e9dd 610e 	ldrd	r6, r1, [sp, #56]	; 0x38
   1883a:	1b89      	subs	r1, r1, r6
   1883c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
					while(screen_x<=end_x) {
   18840:	990d      	ldr	r1, [sp, #52]	; 0x34
   18842:	428e      	cmp	r6, r1
   18844:	dc5a      	bgt.n	188fc <ST7735_t3::drawFontChar(unsigned int)+0x648>
   18846:	eb03 000c 	add.w	r0, r3, ip
   1884a:	4632      	mov	r2, r6
   1884c:	4619      	mov	r1, r3
   1884e:	930a      	str	r3, [sp, #40]	; 0x28
						if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2) && (screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
   18850:	f9b9 401c 	ldrsh.w	r4, [r9, #28]
   18854:	4294      	cmp	r4, r2
   18856:	dc4a      	bgt.n	188ee <ST7735_t3::drawFontChar(unsigned int)+0x63a>
   18858:	f9b9 4020 	ldrsh.w	r4, [r9, #32]
   1885c:	4294      	cmp	r4, r2
   1885e:	dd46      	ble.n	188ee <ST7735_t3::drawFontChar(unsigned int)+0x63a>
   18860:	f9b9 401e 	ldrsh.w	r4, [r9, #30]
   18864:	42ac      	cmp	r4, r5
   18866:	dc42      	bgt.n	188ee <ST7735_t3::drawFontChar(unsigned int)+0x63a>
   18868:	f9b9 4022 	ldrsh.w	r4, [r9, #34]	; 0x22
   1886c:	42ac      	cmp	r4, r5
   1886e:	dd3e      	ble.n	188ee <ST7735_t3::drawFontChar(unsigned int)+0x63a>
							if ((screen_x<origin_x) || (screen_x>=glyphend_x)){
   18870:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18872:	4294      	cmp	r4, r2
   18874:	dc7b      	bgt.n	1896e <ST7735_t3::drawFontChar(unsigned int)+0x6ba>
   18876:	9b05      	ldr	r3, [sp, #20]
   18878:	4293      	cmp	r3, r2
   1887a:	dd78      	ble.n	1896e <ST7735_t3::drawFontChar(unsigned int)+0x6ba>
								bitoffset += fontbpp;
   1887c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	uint8_t b = p[index >> 3];
   1887e:	ea4f 08de 	mov.w	r8, lr, lsr #3
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   18882:	f899 4053 	ldrb.w	r4, [r9, #83]	; 0x53
	return (b >> s) & fontbppmask;
   18886:	ee16 ba90 	vmov	fp, s13
								bitoffset += fontbpp;
   1888a:	449e      	add	lr, r3
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   1888c:	9b08      	ldr	r3, [sp, #32]
	return (b >> s) & fontbppmask;
   1888e:	f81b 8008 	ldrb.w	r8, [fp, r8]
								*pfbPixel = alphaBlendRGB565Premultiplied( textcolorPrexpanded, textbgcolorPrexpanded, (uint8_t)(alpha * fontalphamx) );
   18892:	ed99 7a16 	vldr	s14, [r9, #88]	; 0x58
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   18896:	fbb3 fbf4 	udiv	fp, r3, r4
   1889a:	fb04 3b1b 	mls	fp, r4, fp, r3
								xp++;
   1889e:	3301      	adds	r3, #1
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   188a0:	3c01      	subs	r4, #1
								xp++;
   188a2:	9308      	str	r3, [sp, #32]
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   188a4:	eba4 040b 	sub.w	r4, r4, fp
   188a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   188aa:	fb14 f403 	smulbb	r4, r4, r3
	return (b >> s) & fontbppmask;
   188ae:	b2e4      	uxtb	r4, r4
   188b0:	fa48 f804 	asr.w	r8, r8, r4
   188b4:	f899 4052 	ldrb.w	r4, [r9, #82]	; 0x52
   188b8:	ea08 0804 	and.w	r8, r8, r4
								*pfbPixel = alphaBlendRGB565Premultiplied( textcolorPrexpanded, textbgcolorPrexpanded, (uint8_t)(alpha * fontalphamx) );
   188bc:	ee07 8a90 	vmov	s15, r8
   188c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   188c4:	e9d9 480f 	ldrd	r4, r8, [r9, #60]	; 0x3c
   188c8:	ee67 7a87 	vmul.f32	s15, s15, s14
   188cc:	eba4 0b08 	sub.w	fp, r4, r8
   188d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   188d4:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
   188d8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
   188dc:	fb0b f404 	mul.w	r4, fp, r4
   188e0:	eb08 1454 	add.w	r4, r8, r4, lsr #5
   188e4:	ea04 040a 	and.w	r4, r4, sl
		return (uint16_t)((result >> 16) | result); // contract result
   188e8:	ea44 4414 	orr.w	r4, r4, r4, lsr #16
   188ec:	800c      	strh	r4, [r1, #0]
						pfbPixel++;
   188ee:	3102      	adds	r1, #2
						screen_x++;
   188f0:	3201      	adds	r2, #1
					while(screen_x<=end_x) {
   188f2:	4281      	cmp	r1, r0
   188f4:	d1ac      	bne.n	18850 <ST7735_t3::drawFontChar(unsigned int)+0x59c>
   188f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   188f8:	f9b9 2026 	ldrsh.w	r2, [r9, #38]	; 0x26
					screen_y++;
   188fc:	3501      	adds	r5, #1
					pfbPixel_row += _width;
   188fe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
				while (linecount) {
   18902:	42af      	cmp	r7, r5
   18904:	d19c      	bne.n	18840 <ST7735_t3::drawFontChar(unsigned int)+0x58c>
					screen_y++;
   18906:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
   1890a:	4401      	add	r1, r0
   1890c:	910c      	str	r1, [sp, #48]	; 0x30
	 		while (screen_y++ <= end_y) {
   1890e:	980c      	ldr	r0, [sp, #48]	; 0x30
   18910:	9c11      	ldr	r4, [sp, #68]	; 0x44
   18912:	1c41      	adds	r1, r0, #1
   18914:	42a0      	cmp	r0, r4
   18916:	f73f ae9b 	bgt.w	18650 <ST7735_t3::drawFontChar(unsigned int)+0x39c>
   1891a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1891c:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1891e:	ebc0 75c0 	rsb	r5, r0, r0, lsl #31
   18922:	4684      	mov	ip, r0
   18924:	3401      	adds	r4, #1
   18926:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   18928:	006d      	lsls	r5, r5, #1
   1892a:	e005      	b.n	18938 <ST7735_t3::drawFontChar(unsigned int)+0x684>
   1892c:	3101      	adds	r1, #1
				pfbPixel_row += _width;
   1892e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	 		while (screen_y++ <= end_y) {
   18932:	42a1      	cmp	r1, r4
   18934:	f43f ae8c 	beq.w	18650 <ST7735_t3::drawFontChar(unsigned int)+0x39c>
				if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
   18938:	f9b9 001e 	ldrsh.w	r0, [r9, #30]
   1893c:	4288      	cmp	r0, r1
   1893e:	dcf5      	bgt.n	1892c <ST7735_t3::drawFontChar(unsigned int)+0x678>
   18940:	f9b9 0022 	ldrsh.w	r0, [r9, #34]	; 0x22
   18944:	4288      	cmp	r0, r1
   18946:	ddf1      	ble.n	1892c <ST7735_t3::drawFontChar(unsigned int)+0x678>
					for (screen_x = start_x; screen_x <= end_x; screen_x++) {
   18948:	980d      	ldr	r0, [sp, #52]	; 0x34
   1894a:	4584      	cmp	ip, r0
   1894c:	dcee      	bgt.n	1892c <ST7735_t3::drawFontChar(unsigned int)+0x678>
   1894e:	195f      	adds	r7, r3, r5
   18950:	4662      	mov	r2, ip
						if (screen_x >= _displayclipx1) {
   18952:	f9b9 001c 	ldrsh.w	r0, [r9, #28]
   18956:	4290      	cmp	r0, r2
   18958:	dc03      	bgt.n	18962 <ST7735_t3::drawFontChar(unsigned int)+0x6ae>
							*pfbPixel = textbgcolor;
   1895a:	f8b9 0036 	ldrh.w	r0, [r9, #54]	; 0x36
   1895e:	f827 0012 	strh.w	r0, [r7, r2, lsl #1]
					for (screen_x = start_x; screen_x <= end_x; screen_x++) {
   18962:	3201      	adds	r2, #1
   18964:	4296      	cmp	r6, r2
   18966:	d1f4      	bne.n	18952 <ST7735_t3::drawFontChar(unsigned int)+0x69e>
   18968:	f9b9 2026 	ldrsh.w	r2, [r9, #38]	; 0x26
   1896c:	e7de      	b.n	1892c <ST7735_t3::drawFontChar(unsigned int)+0x678>
								*pfbPixel = textbgcolor;
   1896e:	f8b9 4036 	ldrh.w	r4, [r9, #54]	; 0x36
   18972:	800c      	strh	r4, [r1, #0]
   18974:	e7bb      	b.n	188ee <ST7735_t3::drawFontChar(unsigned int)+0x63a>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   18976:	f899 3009 	ldrb.w	r3, [r9, #9]
   1897a:	2b00      	cmp	r3, #0
   1897c:	f040 82b4 	bne.w	18ee8 <ST7735_t3::drawFontChar(unsigned int)+0xc34>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   18980:	f8d9 30c0 	ldr.w	r3, [r9, #192]	; 0xc0
   18984:	2b00      	cmp	r3, #0
   18986:	f000 82a9 	beq.w	18edc <ST7735_t3::drawFontChar(unsigned int)+0xc28>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   1898a:	f8d9 30b8 	ldr.w	r3, [r9, #184]	; 0xb8
   1898e:	b11b      	cbz	r3, 18998 <ST7735_t3::drawFontChar(unsigned int)+0x6e4>
   18990:	f8d9 20b4 	ldr.w	r2, [r9, #180]	; 0xb4
    *(base+34) = mask;
   18994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;
   18998:	42ac      	cmp	r4, r5
		int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
   1899a:	4633      	mov	r3, r6
        writecommand(ST7735_CASET); // Column addr set
   1899c:	4648      	mov	r0, r9
   1899e:	f04f 012a 	mov.w	r1, #42	; 0x2a
		int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;
   189a2:	bfb8      	it	lt
   189a4:	462c      	movlt	r4, r5
		int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
   189a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   189a8:	42ae      	cmp	r6, r5
   189aa:	bfb8      	it	lt
   189ac:	462b      	movlt	r3, r5
   189ae:	930c      	str	r3, [sp, #48]	; 0x30
   189b0:	f7fc fb7a 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   189b4:	f8b9 107a 	ldrh.w	r1, [r9, #122]	; 0x7a
   189b8:	4429      	add	r1, r5
   189ba:	b289      	uxth	r1, r1
   189bc:	f7fc feca 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   189c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   189c2:	f8b9 107a 	ldrh.w	r1, [r9, #122]	; 0x7a
   189c6:	4419      	add	r1, r3
   189c8:	b289      	uxth	r1, r1
   189ca:	f7fc fec3 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   189ce:	212b      	movs	r1, #43	; 0x2b
   189d0:	f7fc fb6a 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   189d4:	f8b9 107c 	ldrh.w	r1, [r9, #124]	; 0x7c
   189d8:	4421      	add	r1, r4
   189da:	b289      	uxth	r1, r1
   189dc:	f7fc feba 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   189e0:	f8b9 307c 	ldrh.w	r3, [r9, #124]	; 0x7c
   189e4:	9911      	ldr	r1, [sp, #68]	; 0x44
   189e6:	4419      	add	r1, r3
   189e8:	b289      	uxth	r1, r1
   189ea:	f7fc feb3 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
			writecommand(ST7735_RAMWR);
   189ee:	212c      	movs	r1, #44	; 0x2c
   189f0:	f7fc fb5a 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
			while (screen_y < origin_y) {
   189f4:	9b07      	ldr	r3, [sp, #28]
   189f6:	42a3      	cmp	r3, r4
   189f8:	dd18      	ble.n	18a2c <ST7735_t3::drawFontChar(unsigned int)+0x778>
   189fa:	9710      	str	r7, [sp, #64]	; 0x40
   189fc:	ee07 8a90 	vmov	s15, r8
   18a00:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   18a02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   18a04:	f8dd 901c 	ldr.w	r9, [sp, #28]
   18a08:	9f0d      	ldr	r7, [sp, #52]	; 0x34
				for (screen_x = start_x_min; screen_x <= end_x; screen_x++) {
   18a0a:	42b7      	cmp	r7, r6
   18a0c:	db07      	blt.n	18a1e <ST7735_t3::drawFontChar(unsigned int)+0x76a>
   18a0e:	46b0      	mov	r8, r6
   18a10:	f108 0801 	add.w	r8, r8, #1
					writedata16(textbgcolor);
   18a14:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   18a16:	f7fc fe9d 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
				for (screen_x = start_x_min; screen_x <= end_x; screen_x++) {
   18a1a:	4545      	cmp	r5, r8
   18a1c:	d1f8      	bne.n	18a10 <ST7735_t3::drawFontChar(unsigned int)+0x75c>
				screen_y++;
   18a1e:	3401      	adds	r4, #1
			while (screen_y < origin_y) {
   18a20:	45a1      	cmp	r9, r4
   18a22:	d1f2      	bne.n	18a0a <ST7735_t3::drawFontChar(unsigned int)+0x756>
   18a24:	ee17 8a90 	vmov	r8, s15
   18a28:	4681      	mov	r9, r0
   18a2a:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (fontbpp>1){
   18a2c:	f899 3050 	ldrb.w	r3, [r9, #80]	; 0x50
   18a30:	2b01      	cmp	r3, #1
   18a32:	f240 819c 	bls.w	18d6e <ST7735_t3::drawFontChar(unsigned int)+0xaba>
				bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
   18a36:	f10a 0307 	add.w	r3, sl, #7
   18a3a:	f023 0607 	bic.w	r6, r3, #7
				while (linecount) {
   18a3e:	9b06      	ldr	r3, [sp, #24]
   18a40:	2b00      	cmp	r3, #0
   18a42:	d06a      	beq.n	18b1a <ST7735_t3::drawFontChar(unsigned int)+0x866>
		uint32_t result = ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
   18a44:	ee06 8a90 	vmov	s13, r8
   18a48:	4648      	mov	r0, r9
   18a4a:	46b8      	mov	r8, r7
		origin_y += _originy;
   18a4c:	9d07      	ldr	r5, [sp, #28]
   18a4e:	4637      	mov	r7, r6
   18a50:	f8df a4ac 	ldr.w	sl, [pc, #1196]	; 18f00 <ST7735_t3::drawFontChar(unsigned int)+0xc4c>
   18a54:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   18a58:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   18a5c:	9e08      	ldr	r6, [sp, #32]
					while(screen_x<=end_x) {
   18a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18a60:	459b      	cmp	fp, r3
   18a62:	dc52      	bgt.n	18b0a <ST7735_t3::drawFontChar(unsigned int)+0x856>
   18a64:	465c      	mov	r4, fp
						if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2) && (screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
   18a66:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   18a6a:	42a3      	cmp	r3, r4
   18a6c:	dc4a      	bgt.n	18b04 <ST7735_t3::drawFontChar(unsigned int)+0x850>
   18a6e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
   18a72:	42a3      	cmp	r3, r4
   18a74:	dd46      	ble.n	18b04 <ST7735_t3::drawFontChar(unsigned int)+0x850>
   18a76:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
   18a7a:	42ab      	cmp	r3, r5
   18a7c:	dc42      	bgt.n	18b04 <ST7735_t3::drawFontChar(unsigned int)+0x850>
   18a7e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
   18a82:	42ab      	cmp	r3, r5
   18a84:	dd3e      	ble.n	18b04 <ST7735_t3::drawFontChar(unsigned int)+0x850>
							if ((screen_x<origin_x) || (screen_x>=glyphend_x)){
   18a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18a88:	42a3      	cmp	r3, r4
   18a8a:	f300 8095 	bgt.w	18bb8 <ST7735_t3::drawFontChar(unsigned int)+0x904>
   18a8e:	9b05      	ldr	r3, [sp, #20]
   18a90:	42a3      	cmp	r3, r4
   18a92:	f340 8091 	ble.w	18bb8 <ST7735_t3::drawFontChar(unsigned int)+0x904>
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   18a96:	f890 3053 	ldrb.w	r3, [r0, #83]	; 0x53
	uint8_t b = p[index >> 3];
   18a9a:	08fa      	lsrs	r2, r7, #3
	return (b >> s) & fontbppmask;
   18a9c:	ee16 ca90 	vmov	ip, s13
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   18aa0:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
								writedata16( alphaBlendRGB565Premultiplied( textcolorPrexpanded, textbgcolorPrexpanded, (uint8_t)(alpha * fontalphamx) ) );
   18aa4:	ed90 7a16 	vldr	s14, [r0, #88]	; 0x58
	return (b >> s) & fontbppmask;
   18aa8:	f81c 2002 	ldrb.w	r2, [ip, r2]
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   18aac:	fbb6 fcf3 	udiv	ip, r6, r3
   18ab0:	fb03 6c1c 	mls	ip, r3, ip, r6
   18ab4:	3b01      	subs	r3, #1
								xp++;
   18ab6:	3601      	adds	r6, #1
	uint8_t s = ((fontppb-(x % fontppb)-1)*fontbpp);
   18ab8:	eba3 030c 	sub.w	r3, r3, ip
   18abc:	fb13 f301 	smulbb	r3, r3, r1
	return (b >> s) & fontbppmask;
   18ac0:	b2db      	uxtb	r3, r3
   18ac2:	411a      	asrs	r2, r3
   18ac4:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
   18ac8:	401a      	ands	r2, r3
								writedata16( alphaBlendRGB565Premultiplied( textcolorPrexpanded, textbgcolorPrexpanded, (uint8_t)(alpha * fontalphamx) ) );
   18aca:	ee07 2a90 	vmov	s15, r2
   18ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   18ad2:	e9d0 320f 	ldrd	r3, r2, [r0, #60]	; 0x3c
   18ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
   18ada:	1a99      	subs	r1, r3, r2
   18adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   18ae0:	edcd 7a08 	vstr	s15, [sp, #32]
   18ae4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   18ae8:	fb01 f303 	mul.w	r3, r1, r3
   18aec:	eb02 1253 	add.w	r2, r2, r3, lsr #5
   18af0:	ea02 010a 	and.w	r1, r2, sl
		return (uint16_t)((result >> 16) | result); // contract result
   18af4:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
   18af8:	b289      	uxth	r1, r1
   18afa:	f7fc fe2b 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
								bitoffset += fontbpp;
   18afe:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   18b02:	441f      	add	r7, r3
						screen_x++;
   18b04:	3401      	adds	r4, #1
					while(screen_x<=end_x) {
   18b06:	45a1      	cmp	r9, r4
   18b08:	d1ad      	bne.n	18a66 <ST7735_t3::drawFontChar(unsigned int)+0x7b2>
					screen_y++;
   18b0a:	3501      	adds	r5, #1
				while (linecount) {
   18b0c:	4545      	cmp	r5, r8
   18b0e:	d1a6      	bne.n	18a5e <ST7735_t3::drawFontChar(unsigned int)+0x7aa>
					screen_y++;
   18b10:	4681      	mov	r9, r0
   18b12:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   18b16:	4413      	add	r3, r2
   18b18:	9307      	str	r3, [sp, #28]
			screen_x = (end_y + 1 - screen_y) * (end_x + 1 - start_x_min); // How many bytes we need to still output
   18b1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18b1c:	9a07      	ldr	r2, [sp, #28]
   18b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
   18b20:	1a9a      	subs	r2, r3, r2
   18b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18b24:	1a5b      	subs	r3, r3, r1
   18b26:	fb02 f303 	mul.w	r3, r2, r3
			while (screen_x-- > 1) {
   18b2a:	2b01      	cmp	r3, #1
   18b2c:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
   18b30:	dd06      	ble.n	18b40 <ST7735_t3::drawFontChar(unsigned int)+0x88c>
   18b32:	4648      	mov	r0, r9
				writedata16(textbgcolor);
   18b34:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   18b36:	f7fc fe0d 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
			while (screen_x-- > 1) {
   18b3a:	3c01      	subs	r4, #1
   18b3c:	d1fa      	bne.n	18b34 <ST7735_t3::drawFontChar(unsigned int)+0x880>
   18b3e:	4681      	mov	r9, r0
			writedata16_last(textbgcolor);
   18b40:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   18b44:	4648      	mov	r0, r9
   18b46:	f7fc fed5 	bl	158f4 <ST7735_t3::writedata16_last(unsigned short)>
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   18b4a:	f8d9 30b8 	ldr.w	r3, [r9, #184]	; 0xb8
   18b4e:	b11b      	cbz	r3, 18b58 <ST7735_t3::drawFontChar(unsigned int)+0x8a4>
   18b50:	f8d9 20b4 	ldr.w	r2, [r9, #180]	; 0xb4
    *(base+33) = mask;
   18b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   18b58:	f899 3009 	ldrb.w	r3, [r9, #9]
   18b5c:	2b00      	cmp	r3, #0
   18b5e:	f43f ad77 	beq.w	18650 <ST7735_t3::drawFontChar(unsigned int)+0x39c>
   18b62:	f8d9 308c 	ldr.w	r3, [r9, #140]	; 0x8c
		if (interruptMasksUsed) {
   18b66:	7cda      	ldrb	r2, [r3, #19]
   18b68:	2a00      	cmp	r2, #0
   18b6a:	f43f ad71 	beq.w	18650 <ST7735_t3::drawFontChar(unsigned int)+0x39c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   18b6e:	07d5      	lsls	r5, r2, #31
   18b70:	d504      	bpl.n	18b7c <ST7735_t3::drawFontChar(unsigned int)+0x8c8>
   18b72:	6a98      	ldr	r0, [r3, #40]	; 0x28
   18b74:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   18b78:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   18b7c:	0794      	lsls	r4, r2, #30
   18b7e:	d504      	bpl.n	18b8a <ST7735_t3::drawFontChar(unsigned int)+0x8d6>
   18b80:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   18b82:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   18b86:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   18b8a:	0750      	lsls	r0, r2, #29
   18b8c:	d504      	bpl.n	18b98 <ST7735_t3::drawFontChar(unsigned int)+0x8e4>
   18b8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   18b90:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   18b94:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   18b98:	0711      	lsls	r1, r2, #28
   18b9a:	d504      	bpl.n	18ba6 <ST7735_t3::drawFontChar(unsigned int)+0x8f2>
   18b9c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   18b9e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   18ba2:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   18ba6:	06d2      	lsls	r2, r2, #27
   18ba8:	f57f ad52 	bpl.w	18650 <ST7735_t3::drawFontChar(unsigned int)+0x39c>
   18bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   18bae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18bb2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   18bb6:	e54b      	b.n	18650 <ST7735_t3::drawFontChar(unsigned int)+0x39c>
								writedata16(textbgcolor);
   18bb8:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   18bba:	f7fc fdcb 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
   18bbe:	e7a1      	b.n	18b04 <ST7735_t3::drawFontChar(unsigned int)+0x850>
				while (linecount > 0) {
   18bc0:	9906      	ldr	r1, [sp, #24]
   18bc2:	2900      	cmp	r1, #0
   18bc4:	f340 8199 	ble.w	18efa <ST7735_t3::drawFontChar(unsigned int)+0xc46>
   18bc8:	990e      	ldr	r1, [sp, #56]	; 0x38
							uint32_t bit_mask = 1 << (xsize-1);
   18bca:	ee07 8a90 	vmov	s15, r8
   18bce:	9305      	str	r3, [sp, #20]
   18bd0:	ebc1 72c1 	rsb	r2, r1, r1, lsl #31
   18bd4:	f8dd 801c 	ldr.w	r8, [sp, #28]
   18bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18bda:	0052      	lsls	r2, r2, #1
   18bdc:	9215      	str	r2, [sp, #84]	; 0x54
   18bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18be0:	1a52      	subs	r2, r2, r1
   18be2:	0052      	lsls	r2, r2, #1
   18be4:	9214      	str	r2, [sp, #80]	; 0x50
	if (p[index >> 3] & (1 << (7 - (index & 7)))) return 1;
   18be6:	ee17 1a90 	vmov	r1, s15
   18bea:	ea4f 02da 	mov.w	r2, sl, lsr #3
   18bee:	5c8a      	ldrb	r2, [r1, r2]
   18bf0:	ea6f 010a 	mvn.w	r1, sl
   18bf4:	f001 0107 	and.w	r1, r1, #7
   18bf8:	410a      	asrs	r2, r1
					uint32_t b = fetchbit(data, bitoffset++);
   18bfa:	f10a 0101 	add.w	r1, sl, #1
	if (p[index >> 3] & (1 << (7 - (index & 7)))) return 1;
   18bfe:	f012 0201 	ands.w	r2, r2, #1
					uint32_t b = fetchbit(data, bitoffset++);
   18c02:	9110      	str	r1, [sp, #64]	; 0x40
	if (p[index >> 3] & (1 << (7 - (index & 7)))) return 1;
   18c04:	f040 809a 	bne.w	18d3c <ST7735_t3::drawFontChar(unsigned int)+0xa88>
					while (n--) {
   18c08:	9213      	str	r2, [sp, #76]	; 0x4c
   18c0a:	f108 0201 	add.w	r2, r8, #1
   18c0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   18c10:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
   18c14:	1851      	adds	r1, r2, r1
   18c16:	910c      	str	r1, [sp, #48]	; 0x30
   18c18:	4651      	mov	r1, sl
   18c1a:	469a      	mov	sl, r3
   18c1c:	4613      	mov	r3, r2
						if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
   18c1e:	f9b9 001e 	ldrsh.w	r0, [r9, #30]
   18c22:	4540      	cmp	r0, r8
   18c24:	dc03      	bgt.n	18c2e <ST7735_t3::drawFontChar(unsigned int)+0x97a>
   18c26:	f9b9 2022 	ldrsh.w	r2, [r9, #34]	; 0x22
   18c2a:	4542      	cmp	r2, r8
   18c2c:	dc61      	bgt.n	18cf2 <ST7735_t3::drawFontChar(unsigned int)+0xa3e>
   18c2e:	9f05      	ldr	r7, [sp, #20]
							for (screen_x = start_x; screen_x < origin_x; screen_x++) {
   18c30:	2500      	movs	r5, #0
		origin_x += _originx;
   18c32:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18c34:	e003      	b.n	18c3e <ST7735_t3::drawFontChar(unsigned int)+0x98a>
							x += xsize;
   18c36:	4415      	add	r5, r2
								bitoffset += xsize;
   18c38:	4411      	add	r1, r2
						} while (x < width);
   18c3a:	45ab      	cmp	fp, r5
   18c3c:	d93a      	bls.n	18cb4 <ST7735_t3::drawFontChar(unsigned int)+0xa00>
							uint32_t xsize = width - x;
   18c3e:	ebab 0205 	sub.w	r2, fp, r5
   18c42:	2a20      	cmp	r2, #32
   18c44:	bf28      	it	cs
   18c46:	2220      	movcs	r2, #32
							if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
   18c48:	4540      	cmp	r0, r8
   18c4a:	dcf4      	bgt.n	18c36 <ST7735_t3::drawFontChar(unsigned int)+0x982>
   18c4c:	f9b9 6022 	ldrsh.w	r6, [r9, #34]	; 0x22
   18c50:	4546      	cmp	r6, r8
   18c52:	ddf0      	ble.n	18c36 <ST7735_t3::drawFontChar(unsigned int)+0x982>
							uint32_t bit_mask = 1 << (xsize-1);
   18c54:	1e56      	subs	r6, r2, #1
								while (bit_mask && (screen_x <= end_x)) {
   18c56:	f04f 0c01 	mov.w	ip, #1
   18c5a:	fa1c f606 	lsls.w	r6, ip, r6
   18c5e:	d0ea      	beq.n	18c36 <ST7735_t3::drawFontChar(unsigned int)+0x982>
   18c60:	4554      	cmp	r4, sl
   18c62:	dce8      	bgt.n	18c36 <ST7735_t3::drawFontChar(unsigned int)+0x982>
							uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
   18c64:	ee17 0a90 	vmov	r0, s15
   18c68:	9106      	str	r1, [sp, #24]
   18c6a:	e9cd 2307 	strd	r2, r3, [sp, #28]
   18c6e:	f7fc f8df 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
   18c72:	9b08      	ldr	r3, [sp, #32]
   18c74:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
									if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2)) {
   18c78:	f9b9 c01c 	ldrsh.w	ip, [r9, #28]
   18c7c:	45a4      	cmp	ip, r4
   18c7e:	dc0b      	bgt.n	18c98 <ST7735_t3::drawFontChar(unsigned int)+0x9e4>
   18c80:	f9b9 c020 	ldrsh.w	ip, [r9, #32]
   18c84:	45a4      	cmp	ip, r4
   18c86:	dd07      	ble.n	18c98 <ST7735_t3::drawFontChar(unsigned int)+0x9e4>
										*pfbPixel = (bits & bit_mask) ? textcolor : textbgcolor;
   18c88:	4230      	tst	r0, r6
   18c8a:	bf14      	ite	ne
   18c8c:	f8b9 c034 	ldrhne.w	ip, [r9, #52]	; 0x34
   18c90:	f8b9 c036 	ldrheq.w	ip, [r9, #54]	; 0x36
   18c94:	f8a7 c000 	strh.w	ip, [r7]
								while (bit_mask && (screen_x <= end_x)) {
   18c98:	0876      	lsrs	r6, r6, #1
									screen_x++;	// increment our pixel position. 
   18c9a:	f104 0401 	add.w	r4, r4, #1
									pfbPixel++;	
   18c9e:	f107 0702 	add.w	r7, r7, #2
								while (bit_mask && (screen_x <= end_x)) {
   18ca2:	d001      	beq.n	18ca8 <ST7735_t3::drawFontChar(unsigned int)+0x9f4>
   18ca4:	45a2      	cmp	sl, r4
   18ca6:	dae7      	bge.n	18c78 <ST7735_t3::drawFontChar(unsigned int)+0x9c4>
							x += xsize;
   18ca8:	4415      	add	r5, r2
   18caa:	f9b9 001e 	ldrsh.w	r0, [r9, #30]
								bitoffset += xsize;
   18cae:	4411      	add	r1, r2
						} while (x < width);
   18cb0:	45ab      	cmp	fp, r5
   18cb2:	d8c4      	bhi.n	18c3e <ST7735_t3::drawFontChar(unsigned int)+0x98a>
						if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
   18cb4:	4540      	cmp	r0, r8
   18cb6:	dc03      	bgt.n	18cc0 <ST7735_t3::drawFontChar(unsigned int)+0xa0c>
   18cb8:	f9b9 2022 	ldrsh.w	r2, [r9, #34]	; 0x22
   18cbc:	4542      	cmp	r2, r8
   18cbe:	dc0b      	bgt.n	18cd8 <ST7735_t3::drawFontChar(unsigned int)+0xa24>
						pfbPixel_row += _width;
   18cc0:	9805      	ldr	r0, [sp, #20]
			 			screen_y++;
   18cc2:	4698      	mov	r8, r3
						pfbPixel_row += _width;
   18cc4:	f9b9 2026 	ldrsh.w	r2, [r9, #38]	; 0x26
   18cc8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
   18ccc:	9005      	str	r0, [sp, #20]
					while (n--) {
   18cce:	980c      	ldr	r0, [sp, #48]	; 0x30
   18cd0:	4283      	cmp	r3, r0
   18cd2:	d027      	beq.n	18d24 <ST7735_t3::drawFontChar(unsigned int)+0xa70>
   18cd4:	3301      	adds	r3, #1
   18cd6:	e7a2      	b.n	18c1e <ST7735_t3::drawFontChar(unsigned int)+0x96a>
							while (screen_x++ <= end_x) {
   18cd8:	4554      	cmp	r4, sl
   18cda:	dcf1      	bgt.n	18cc0 <ST7735_t3::drawFontChar(unsigned int)+0xa0c>
   18cdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   18cde:	1b12      	subs	r2, r2, r4
   18ce0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
								*pfbPixel++ = textbgcolor;
   18ce4:	f8b9 0036 	ldrh.w	r0, [r9, #54]	; 0x36
   18ce8:	f827 0b02 	strh.w	r0, [r7], #2
							while (screen_x++ <= end_x) {
   18cec:	4297      	cmp	r7, r2
   18cee:	d1f9      	bne.n	18ce4 <ST7735_t3::drawFontChar(unsigned int)+0xa30>
   18cf0:	e7e6      	b.n	18cc0 <ST7735_t3::drawFontChar(unsigned int)+0xa0c>
							for (screen_x = start_x; screen_x < origin_x; screen_x++) {
   18cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18cf4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18cf6:	42a2      	cmp	r2, r4
   18cf8:	da2f      	bge.n	18d5a <ST7735_t3::drawFontChar(unsigned int)+0xaa6>
   18cfa:	9905      	ldr	r1, [sp, #20]
   18cfc:	9815      	ldr	r0, [sp, #84]	; 0x54
   18cfe:	1808      	adds	r0, r1, r0
								if (screen_x >= _displayclipx1) {
   18d00:	f9b9 101c 	ldrsh.w	r1, [r9, #28]
   18d04:	4291      	cmp	r1, r2
   18d06:	dc03      	bgt.n	18d10 <ST7735_t3::drawFontChar(unsigned int)+0xa5c>
									*pfbPixel = textbgcolor;
   18d08:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   18d0c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
							for (screen_x = start_x; screen_x < origin_x; screen_x++) {
   18d10:	3201      	adds	r2, #1
   18d12:	4294      	cmp	r4, r2
   18d14:	d1f4      	bne.n	18d00 <ST7735_t3::drawFontChar(unsigned int)+0xa4c>
								pfbPixel++;
   18d16:	9914      	ldr	r1, [sp, #80]	; 0x50
   18d18:	9a05      	ldr	r2, [sp, #20]
   18d1a:	f9b9 001e 	ldrsh.w	r0, [r9, #30]
   18d1e:	1857      	adds	r7, r2, r1
   18d20:	9910      	ldr	r1, [sp, #64]	; 0x40
   18d22:	e785      	b.n	18c30 <ST7735_t3::drawFontChar(unsigned int)+0x97c>
   18d24:	4653      	mov	r3, sl
   18d26:	468a      	mov	sl, r1
   18d28:	990a      	ldr	r1, [sp, #40]	; 0x28
   18d2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   18d2c:	3901      	subs	r1, #1
   18d2e:	1a09      	subs	r1, r1, r0
				while (linecount > 0) {
   18d30:	2900      	cmp	r1, #0
   18d32:	910a      	str	r1, [sp, #40]	; 0x28
   18d34:	dd14      	ble.n	18d60 <ST7735_t3::drawFontChar(unsigned int)+0xaac>
		origin_y += _originy;
   18d36:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   18d3a:	e754      	b.n	18be6 <ST7735_t3::drawFontChar(unsigned int)+0x932>
   18d3c:	9306      	str	r3, [sp, #24]
						bitoffset += 3;
   18d3e:	f10a 0304 	add.w	r3, sl, #4
						n = fetchbits_unsigned(data, bitoffset, 3) + 2;
   18d42:	2203      	movs	r2, #3
   18d44:	ee17 0a90 	vmov	r0, s15
						bitoffset += 3;
   18d48:	9310      	str	r3, [sp, #64]	; 0x40
						n = fetchbits_unsigned(data, bitoffset, 3) + 2;
   18d4a:	f7fc f871 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
					while (n--) {
   18d4e:	1c87      	adds	r7, r0, #2
   18d50:	9b06      	ldr	r3, [sp, #24]
   18d52:	d007      	beq.n	18d64 <ST7735_t3::drawFontChar(unsigned int)+0xab0>
   18d54:	1c42      	adds	r2, r0, #1
   18d56:	9213      	str	r2, [sp, #76]	; 0x4c
   18d58:	e757      	b.n	18c0a <ST7735_t3::drawFontChar(unsigned int)+0x956>
							for (screen_x = start_x; screen_x < origin_x; screen_x++) {
   18d5a:	9f05      	ldr	r7, [sp, #20]
   18d5c:	9910      	ldr	r1, [sp, #64]	; 0x40
   18d5e:	e767      	b.n	18c30 <ST7735_t3::drawFontChar(unsigned int)+0x97c>
   18d60:	9b05      	ldr	r3, [sp, #20]
   18d62:	e5d4      	b.n	1890e <ST7735_t3::drawFontChar(unsigned int)+0x65a>
						bitoffset += 3;
   18d64:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
					while (n--) {
   18d68:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   18d6c:	e7e3      	b.n	18d36 <ST7735_t3::drawFontChar(unsigned int)+0xa82>
				while (linecount > 0) {
   18d6e:	9b06      	ldr	r3, [sp, #24]
   18d70:	2b00      	cmp	r3, #0
   18d72:	f77f aed2 	ble.w	18b1a <ST7735_t3::drawFontChar(unsigned int)+0x866>
   18d76:	ee07 8a90 	vmov	s15, r8
   18d7a:	9f07      	ldr	r7, [sp, #28]
   18d7c:	46d8      	mov	r8, fp
   18d7e:	46d3      	mov	fp, sl
	if (p[index >> 3] & (1 << (7 - (index & 7)))) return 1;
   18d80:	ee17 3a90 	vmov	r3, s15
   18d84:	ea4f 02db 	mov.w	r2, fp, lsr #3
   18d88:	ea6f 010b 	mvn.w	r1, fp
   18d8c:	5c9a      	ldrb	r2, [r3, r2]
					uint32_t b = fetchbit(data, bitoffset++);
   18d8e:	f10b 0301 	add.w	r3, fp, #1
	if (p[index >> 3] & (1 << (7 - (index & 7)))) return 1;
   18d92:	f001 0107 	and.w	r1, r1, #7
					uint32_t b = fetchbit(data, bitoffset++);
   18d96:	9306      	str	r3, [sp, #24]
	if (p[index >> 3] & (1 << (7 - (index & 7)))) return 1;
   18d98:	410a      	asrs	r2, r1
   18d9a:	f012 0201 	ands.w	r2, r2, #1
   18d9e:	f040 808e 	bne.w	18ebe <ST7735_t3::drawFontChar(unsigned int)+0xc0a>
					while (n--) {
   18da2:	9205      	str	r2, [sp, #20]
   18da4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18da6:	3301      	adds	r3, #1
   18da8:	9308      	str	r3, [sp, #32]
   18daa:	1c7b      	adds	r3, r7, #1
   18dac:	9307      	str	r3, [sp, #28]
						if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
   18dae:	f9b9 101e 	ldrsh.w	r1, [r9, #30]
   18db2:	42b9      	cmp	r1, r7
   18db4:	dc03      	bgt.n	18dbe <ST7735_t3::drawFontChar(unsigned int)+0xb0a>
   18db6:	f9b9 2022 	ldrsh.w	r2, [r9, #34]	; 0x22
   18dba:	42ba      	cmp	r2, r7
   18dbc:	dc65      	bgt.n	18e8a <ST7735_t3::drawFontChar(unsigned int)+0xbd6>
							for (screen_x = start_x; screen_x < origin_x; screen_x++) {
   18dbe:	2400      	movs	r4, #0
		origin_x += _originx;
   18dc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   18dc2:	f8dd b018 	ldr.w	fp, [sp, #24]
   18dc6:	e002      	b.n	18dce <ST7735_t3::drawFontChar(unsigned int)+0xb1a>
							x += xsize;
   18dc8:	442c      	add	r4, r5
						} while (x < width) ;
   18dca:	45a0      	cmp	r8, r4
   18dcc:	d93a      	bls.n	18e44 <ST7735_t3::drawFontChar(unsigned int)+0xb90>
							uint32_t xsize = width - x;
   18dce:	eba8 0504 	sub.w	r5, r8, r4
   18dd2:	2d20      	cmp	r5, #32
   18dd4:	bf28      	it	cs
   18dd6:	2520      	movcs	r5, #32
							if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
   18dd8:	42b9      	cmp	r1, r7
   18dda:	dcf5      	bgt.n	18dc8 <ST7735_t3::drawFontChar(unsigned int)+0xb14>
   18ddc:	f9b9 2022 	ldrsh.w	r2, [r9, #34]	; 0x22
   18de0:	42ba      	cmp	r2, r7
   18de2:	ddf1      	ble.n	18dc8 <ST7735_t3::drawFontChar(unsigned int)+0xb14>
							uint32_t bit_mask = 1 << (xsize-1);
   18de4:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
								while (bit_mask) {
   18de8:	2301      	movs	r3, #1
   18dea:	fa13 fa0a 	lsls.w	sl, r3, sl
   18dee:	d025      	beq.n	18e3c <ST7735_t3::drawFontChar(unsigned int)+0xb88>
							uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
   18df0:	462a      	mov	r2, r5
   18df2:	4659      	mov	r1, fp
   18df4:	ee17 0a90 	vmov	r0, s15
   18df8:	f7fc f81a 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
   18dfc:	4603      	mov	r3, r0
   18dfe:	4648      	mov	r0, r9
   18e00:	46b9      	mov	r9, r7
   18e02:	462f      	mov	r7, r5
   18e04:	4625      	mov	r5, r4
   18e06:	461c      	mov	r4, r3
									if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2)) {
   18e08:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   18e0c:	42b3      	cmp	r3, r6
   18e0e:	dc0a      	bgt.n	18e26 <ST7735_t3::drawFontChar(unsigned int)+0xb72>
   18e10:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
   18e14:	42b3      	cmp	r3, r6
   18e16:	dd06      	ble.n	18e26 <ST7735_t3::drawFontChar(unsigned int)+0xb72>
										writedata16((bits & bit_mask) ? textcolor : textbgcolor);
   18e18:	ea14 0f0a 	tst.w	r4, sl
   18e1c:	bf14      	ite	ne
   18e1e:	8e81      	ldrhne	r1, [r0, #52]	; 0x34
   18e20:	8ec1      	ldrheq	r1, [r0, #54]	; 0x36
   18e22:	f7fc fc97 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
								while (bit_mask) {
   18e26:	ea5f 0a5a 	movs.w	sl, sl, lsr #1
									screen_x++ ; // Current actual screen X
   18e2a:	f106 0601 	add.w	r6, r6, #1
								while (bit_mask) {
   18e2e:	d1eb      	bne.n	18e08 <ST7735_t3::drawFontChar(unsigned int)+0xb54>
   18e30:	462c      	mov	r4, r5
   18e32:	f9b0 101e 	ldrsh.w	r1, [r0, #30]
   18e36:	463d      	mov	r5, r7
   18e38:	464f      	mov	r7, r9
   18e3a:	4681      	mov	r9, r0
							x += xsize;
   18e3c:	442c      	add	r4, r5
								bitoffset += xsize;
   18e3e:	44ab      	add	fp, r5
						} while (x < width) ;
   18e40:	45a0      	cmp	r8, r4
   18e42:	d8c4      	bhi.n	18dce <ST7735_t3::drawFontChar(unsigned int)+0xb1a>
						if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
   18e44:	42b9      	cmp	r1, r7
   18e46:	dc03      	bgt.n	18e50 <ST7735_t3::drawFontChar(unsigned int)+0xb9c>
   18e48:	f9b9 2022 	ldrsh.w	r2, [r9, #34]	; 0x22
   18e4c:	42ba      	cmp	r2, r7
   18e4e:	dc0e      	bgt.n	18e6e <ST7735_t3::drawFontChar(unsigned int)+0xbba>
			 			screen_y++;
   18e50:	9b07      	ldr	r3, [sp, #28]
   18e52:	3701      	adds	r7, #1
					while (n--) {
   18e54:	9a05      	ldr	r2, [sp, #20]
   18e56:	189a      	adds	r2, r3, r2
   18e58:	4297      	cmp	r7, r2
   18e5a:	d1a8      	bne.n	18dae <ST7735_t3::drawFontChar(unsigned int)+0xafa>
   18e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18e5e:	1e5a      	subs	r2, r3, #1
   18e60:	9b05      	ldr	r3, [sp, #20]
   18e62:	1ad3      	subs	r3, r2, r3
				while (linecount > 0) {
   18e64:	2b00      	cmp	r3, #0
   18e66:	930a      	str	r3, [sp, #40]	; 0x28
   18e68:	dc8a      	bgt.n	18d80 <ST7735_t3::drawFontChar(unsigned int)+0xacc>
   18e6a:	9707      	str	r7, [sp, #28]
   18e6c:	e655      	b.n	18b1a <ST7735_t3::drawFontChar(unsigned int)+0x866>
							while (screen_x++ <= end_x) {
   18e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18e70:	1c74      	adds	r4, r6, #1
   18e72:	429e      	cmp	r6, r3
   18e74:	dcec      	bgt.n	18e50 <ST7735_t3::drawFontChar(unsigned int)+0xb9c>
   18e76:	4648      	mov	r0, r9
   18e78:	9d08      	ldr	r5, [sp, #32]
   18e7a:	3401      	adds	r4, #1
								writedata16(textbgcolor);
   18e7c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   18e7e:	f7fc fc69 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
							while (screen_x++ <= end_x) {
   18e82:	42ac      	cmp	r4, r5
   18e84:	d1f9      	bne.n	18e7a <ST7735_t3::drawFontChar(unsigned int)+0xbc6>
   18e86:	4681      	mov	r9, r0
   18e88:	e7e2      	b.n	18e50 <ST7735_t3::drawFontChar(unsigned int)+0xb9c>
							for (screen_x = start_x; screen_x < origin_x; screen_x++) {
   18e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18e8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   18e8e:	42ab      	cmp	r3, r5
   18e90:	da95      	bge.n	18dbe <ST7735_t3::drawFontChar(unsigned int)+0xb0a>
   18e92:	461c      	mov	r4, r3
   18e94:	4648      	mov	r0, r9
   18e96:	e002      	b.n	18e9e <ST7735_t3::drawFontChar(unsigned int)+0xbea>
   18e98:	3401      	adds	r4, #1
   18e9a:	42a5      	cmp	r5, r4
   18e9c:	d00b      	beq.n	18eb6 <ST7735_t3::drawFontChar(unsigned int)+0xc02>
								if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2)) {
   18e9e:	f9b0 301c 	ldrsh.w	r3, [r0, #28]
   18ea2:	42a3      	cmp	r3, r4
   18ea4:	dcf8      	bgt.n	18e98 <ST7735_t3::drawFontChar(unsigned int)+0xbe4>
   18ea6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
   18eaa:	42a3      	cmp	r3, r4
   18eac:	ddf4      	ble.n	18e98 <ST7735_t3::drawFontChar(unsigned int)+0xbe4>
									writedata16(textbgcolor);
   18eae:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   18eb0:	f7fc fc50 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
   18eb4:	e7f0      	b.n	18e98 <ST7735_t3::drawFontChar(unsigned int)+0xbe4>
   18eb6:	4681      	mov	r9, r0
   18eb8:	f9b0 101e 	ldrsh.w	r1, [r0, #30]
   18ebc:	e77f      	b.n	18dbe <ST7735_t3::drawFontChar(unsigned int)+0xb0a>
						n = fetchbits_unsigned(data, bitoffset, 3) + 2;
   18ebe:	4619      	mov	r1, r3
   18ec0:	2203      	movs	r2, #3
   18ec2:	ee17 0a90 	vmov	r0, s15
						bitoffset += 3;
   18ec6:	f10b 0b04 	add.w	fp, fp, #4
						n = fetchbits_unsigned(data, bitoffset, 3) + 2;
   18eca:	f7fb ffb1 	bl	14e30 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
					while (n--) {
   18ece:	1c86      	adds	r6, r0, #2
   18ed0:	f43f af56 	beq.w	18d80 <ST7735_t3::drawFontChar(unsigned int)+0xacc>
   18ed4:	1c43      	adds	r3, r0, #1
						bitoffset += 3;
   18ed6:	e9cd 3b05 	strd	r3, fp, [sp, #20]
   18eda:	e763      	b.n	18da4 <ST7735_t3::drawFontChar(unsigned int)+0xaf0>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   18edc:	f8d9 3094 	ldr.w	r3, [r9, #148]	; 0x94
   18ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   18ee2:	f8c9 30a0 	str.w	r3, [r9, #160]	; 0xa0
   18ee6:	e550      	b.n	1898a <ST7735_t3::drawFontChar(unsigned int)+0x6d6>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   18ee8:	f109 0384 	add.w	r3, r9, #132	; 0x84
   18eec:	f8d9 008c 	ldr.w	r0, [r9, #140]	; 0x8c
   18ef0:	e893 0006 	ldmia.w	r3, {r1, r2}
   18ef4:	f7f2 f9fa 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
   18ef8:	e542      	b.n	18980 <ST7735_t3::drawFontChar(unsigned int)+0x6cc>
		origin_y += _originy;
   18efa:	9907      	ldr	r1, [sp, #28]
   18efc:	910c      	str	r1, [sp, #48]	; 0x30
   18efe:	e506      	b.n	1890e <ST7735_t3::drawFontChar(unsigned int)+0x65a>
   18f00:	07e0f81f 	.word	0x07e0f81f

00018f04 <ST7735_t3::gfxFontLastCharPosFG(short, short)>:
              h     = glyph->height;


    int16_t xo = glyph->xOffset; // sic
    int16_t yo = glyph->yOffset + gfxFont->yAdvance/2;
    if (x >= _gfx_last_char_x_write) return false; 	// we did not update here...
   18f04:	f9b0 3070 	ldrsh.w	r3, [r0, #112]	; 0x70
   18f08:	428b      	cmp	r3, r1
   18f0a:	dd4a      	ble.n	18fa2 <ST7735_t3::gfxFontLastCharPosFG(short, short)+0x9e>
bool ST7735_t3::gfxFontLastCharPosFG(int16_t x, int16_t y) {
   18f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GFXglyph *glyph  = gfxFont->glyph + (_gfx_c_last -  gfxFont->first);
   18f10:	6e04      	ldr	r4, [r0, #96]	; 0x60
   18f12:	6e85      	ldr	r5, [r0, #104]	; 0x68
   18f14:	7a23      	ldrb	r3, [r4, #8]
   18f16:	6867      	ldr	r7, [r4, #4]
   18f18:	eba5 0c03 	sub.w	ip, r5, r3
    int16_t yo = glyph->yOffset + gfxFont->yAdvance/2;
   18f1c:	f894 800a 	ldrb.w	r8, [r4, #10]
    if (y < (_gfx_last_cursor_y + (yo*textsize_y)))  return false;  // above
   18f20:	f9b0 e06e 	ldrsh.w	lr, [r0, #110]	; 0x6e
    GFXglyph *glyph  = gfxFont->glyph + (_gfx_c_last -  gfxFont->first);
   18f24:	eb07 05cc 	add.w	r5, r7, ip, lsl #3
    if (y < (_gfx_last_cursor_y + (yo*textsize_y)))  return false;  // above
   18f28:	f890 6045 	ldrb.w	r6, [r0, #69]	; 0x45
    int16_t yo = glyph->yOffset + gfxFont->yAdvance/2;
   18f2c:	f995 3006 	ldrsb.w	r3, [r5, #6]
   18f30:	eb03 0358 	add.w	r3, r3, r8, lsr #1
    if (y < (_gfx_last_cursor_y + (yo*textsize_y)))  return false;  // above
   18f34:	fb13 e906 	smlabb	r9, r3, r6, lr
   18f38:	454a      	cmp	r2, r9
   18f3a:	db2f      	blt.n	18f9c <ST7735_t3::gfxFontLastCharPosFG(short, short)+0x98>
    if (y >= (_gfx_last_cursor_y + (yo+h)*textsize_y)) return false; // below
   18f3c:	f895 8003 	ldrb.w	r8, [r5, #3]
   18f40:	4443      	add	r3, r8
   18f42:	fb06 ee03 	mla	lr, r6, r3, lr
   18f46:	4572      	cmp	r2, lr
   18f48:	da28      	bge.n	18f9c <ST7735_t3::gfxFontLastCharPosFG(short, short)+0x98>


    // Lets compute which Row this y is in the bitmap
    int16_t y_bitmap = (y - ((_gfx_last_cursor_y + (yo*textsize_y))) + textsize_y - 1) / textsize_y;
   18f4a:	eba2 0209 	sub.w	r2, r2, r9
    int16_t x_bitmap = (x - ((_gfx_last_cursor_x + (xo*textsize_x))) + textsize_x - 1) / textsize_x;
    uint16_t  pixel_bit_offset = y_bitmap * w + x_bitmap;

    return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) & (0x80 >> (pixel_bit_offset & 0x7)));
   18f4e:	f837 303c 	ldrh.w	r3, [r7, ip, lsl #3]
   18f52:	6824      	ldr	r4, [r4, #0]
    int16_t y_bitmap = (y - ((_gfx_last_cursor_y + (yo*textsize_y))) + textsize_y - 1) / textsize_y;
   18f54:	4432      	add	r2, r6
    return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) & (0x80 >> (pixel_bit_offset & 0x7)));
   18f56:	441c      	add	r4, r3
    int16_t x_bitmap = (x - ((_gfx_last_cursor_x + (xo*textsize_x))) + textsize_x - 1) / textsize_x;
   18f58:	f995 3005 	ldrsb.w	r3, [r5, #5]
    int16_t y_bitmap = (y - ((_gfx_last_cursor_y + (yo*textsize_y))) + textsize_y - 1) / textsize_y;
   18f5c:	3a01      	subs	r2, #1
   18f5e:	fb92 f2f6 	sdiv	r2, r2, r6
    int16_t x_bitmap = (x - ((_gfx_last_cursor_x + (xo*textsize_x))) + textsize_x - 1) / textsize_x;
   18f62:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
   18f66:	f9b0 006c 	ldrsh.w	r0, [r0, #108]	; 0x6c
   18f6a:	fb13 0306 	smlabb	r3, r3, r6, r0
   18f6e:	1ac9      	subs	r1, r1, r3
    uint16_t  pixel_bit_offset = y_bitmap * w + x_bitmap;
   18f70:	78ab      	ldrb	r3, [r5, #2]
   18f72:	fb13 f302 	smulbb	r3, r3, r2
    int16_t x_bitmap = (x - ((_gfx_last_cursor_x + (xo*textsize_x))) + textsize_x - 1) / textsize_x;
   18f76:	4431      	add	r1, r6
    return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) & (0x80 >> (pixel_bit_offset & 0x7)));
   18f78:	2280      	movs	r2, #128	; 0x80
    int16_t x_bitmap = (x - ((_gfx_last_cursor_x + (xo*textsize_x))) + textsize_x - 1) / textsize_x;
   18f7a:	3901      	subs	r1, #1
   18f7c:	fb91 f1f6 	sdiv	r1, r1, r6
    uint16_t  pixel_bit_offset = y_bitmap * w + x_bitmap;
   18f80:	440b      	add	r3, r1
    return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) & (0x80 >> (pixel_bit_offset & 0x7)));
   18f82:	f3c3 01cc 	ubfx	r1, r3, #3, #13
   18f86:	f003 0307 	and.w	r3, r3, #7
   18f8a:	5c61      	ldrb	r1, [r4, r1]
   18f8c:	fa42 f303 	asr.w	r3, r2, r3
   18f90:	4219      	tst	r1, r3
   18f92:	bf14      	ite	ne
   18f94:	2001      	movne	r0, #1
   18f96:	2000      	moveq	r0, #0
}
   18f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (x >= _gfx_last_char_x_write) return false; 	// we did not update here...
   18f9c:	2000      	movs	r0, #0
}
   18f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (x >= _gfx_last_char_x_write) return false; 	// we did not update here...
   18fa2:	2000      	movs	r0, #0
}
   18fa4:	4770      	bx	lr
   18fa6:	bf00      	nop

00018fa8 <ST7735_t3::drawGFXFontChar(unsigned int)>:
void ST7735_t3::drawGFXFontChar(unsigned int c) {
   18fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(c == '\r') 	 return;
   18fac:	290d      	cmp	r1, #13
void ST7735_t3::drawGFXFontChar(unsigned int c) {
   18fae:	b09f      	sub	sp, #124	; 0x7c
   18fb0:	9112      	str	r1, [sp, #72]	; 0x48
    if(c == '\r') 	 return;
   18fb2:	f000 812d 	beq.w	19210 <ST7735_t3::drawGFXFontChar(unsigned int)+0x268>
   18fb6:	460a      	mov	r2, r1
    uint8_t first = gfxFont->first;
   18fb8:	6e01      	ldr	r1, [r0, #96]	; 0x60
   18fba:	4683      	mov	fp, r0
    if((c < first) || (c > gfxFont->last)) return; 
   18fbc:	7a0c      	ldrb	r4, [r1, #8]
   18fbe:	4294      	cmp	r4, r2
   18fc0:	f200 8126 	bhi.w	19210 <ST7735_t3::drawGFXFontChar(unsigned int)+0x268>
   18fc4:	7a4b      	ldrb	r3, [r1, #9]
   18fc6:	4293      	cmp	r3, r2
   18fc8:	f0c0 8122 	bcc.w	19210 <ST7735_t3::drawGFXFontChar(unsigned int)+0x268>
    GFXglyph *glyph  = gfxFont->glyph + (c - first);
   18fcc:	1b14      	subs	r4, r2, r4
   18fce:	684d      	ldr	r5, [r1, #4]
   18fd0:	4613      	mov	r3, r2
   18fd2:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
    uint8_t   w     = glyph->width,
   18fd6:	7890      	ldrb	r0, [r2, #2]
    GFXglyph *glyph  = gfxFont->glyph + (c - first);
   18fd8:	9213      	str	r2, [sp, #76]	; 0x4c
              h     = glyph->height;
   18fda:	78d2      	ldrb	r2, [r2, #3]
    uint8_t   w     = glyph->width,
   18fdc:	900a      	str	r0, [sp, #40]	; 0x28
    if((w == 0 ||  h == 0)  && (c != 32))   return;  // Is there an associated bitmap?
   18fde:	2a00      	cmp	r2, #0
   18fe0:	bf18      	it	ne
   18fe2:	2800      	cmpne	r0, #0
              h     = glyph->height;
   18fe4:	9214      	str	r2, [sp, #80]	; 0x50
    if((w == 0 ||  h == 0)  && (c != 32))   return;  // Is there an associated bitmap?
   18fe6:	d102      	bne.n	18fee <ST7735_t3::drawGFXFontChar(unsigned int)+0x46>
   18fe8:	2b20      	cmp	r3, #32
   18fea:	f040 8111 	bne.w	19210 <ST7735_t3::drawGFXFontChar(unsigned int)+0x268>
    int16_t yo = glyph->yOffset + gfxFont->yAdvance/2;
   18fee:	9813      	ldr	r0, [sp, #76]	; 0x4c
   18ff0:	7a8a      	ldrb	r2, [r1, #10]
   18ff2:	f990 3006 	ldrsb.w	r3, [r0, #6]
    int16_t xo = glyph->xOffset; // sic
   18ff6:	f990 9005 	ldrsb.w	r9, [r0, #5]
    int16_t yo = glyph->yOffset + gfxFont->yAdvance/2;
   18ffa:	ea4f 0852 	mov.w	r8, r2, lsr #1
   18ffe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   19002:	f9bb 000a 	ldrsh.w	r0, [fp, #10]
    int16_t yo = glyph->yOffset + gfxFont->yAdvance/2;
   19006:	9304      	str	r3, [sp, #16]
    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   19008:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
   1900c:	2b00      	cmp	r3, #0
   1900e:	f040 8102 	bne.w	19216 <ST7735_t3::drawGFXFontChar(unsigned int)+0x26e>
		int16_t x_offset_cursor = cursor_x + _originx;	// This is where the offseted cursor is.
   19012:	b283      	uxth	r3, r0
    uint16_t bo = glyph->bitmapOffset;
   19014:	f835 4034 	ldrh.w	r4, [r5, r4, lsl #3]
    uint8_t  *bitmap = gfxFont->bitmap;
   19018:	6809      	ldr	r1, [r1, #0]
    uint16_t bo = glyph->bitmapOffset;
   1901a:	9409      	str	r4, [sp, #36]	; 0x24
    uint8_t  *bitmap = gfxFont->bitmap;
   1901c:	9103      	str	r1, [sp, #12]
    if (textcolor == textbgcolor) {
   1901e:	f8bb 4034 	ldrh.w	r4, [fp, #52]	; 0x34
   19022:	f8bb 1036 	ldrh.w	r1, [fp, #54]	; 0x36
   19026:	428c      	cmp	r4, r1
   19028:	f000 810d 	beq.w	19246 <ST7735_t3::drawGFXFontChar(unsigned int)+0x29e>
		int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
   1902c:	9913      	ldr	r1, [sp, #76]	; 0x4c
		int16_t x_offset_cursor = cursor_x + _originx;	// This is where the offseted cursor is.
   1902e:	f8bb 0018 	ldrh.w	r0, [fp, #24]
		int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
   19032:	790d      	ldrb	r5, [r1, #4]
		int16_t x_offset_cursor = cursor_x + _originx;	// This is where the offseted cursor is.
   19034:	4418      	add	r0, r3
		if (glyph->xAdvance < (xo + w)) x_end = x_offset_cursor + ((xo + w)* textsize_x);  // BUGBUG Overlflows into next char position.
   19036:	990a      	ldr	r1, [sp, #40]	; 0x28
		int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
   19038:	f89b 6044 	ldrb.w	r6, [fp, #68]	; 0x44
		if (glyph->xAdvance < (xo + w)) x_end = x_offset_cursor + ((xo + w)* textsize_x);  // BUGBUG Overlflows into next char position.
   1903c:	eb09 0401 	add.w	r4, r9, r1
		int16_t x_offset_cursor = cursor_x + _originx;	// This is where the offseted cursor is.
   19040:	b281      	uxth	r1, r0
   19042:	b200      	sxth	r0, r0
		int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
   19044:	9605      	str	r6, [sp, #20]
		if (glyph->xAdvance < (xo + w)) x_end = x_offset_cursor + ((xo + w)* textsize_x);  // BUGBUG Overlflows into next char position.
   19046:	42a5      	cmp	r5, r4
		int16_t x_offset_cursor = cursor_x + _originx;	// This is where the offseted cursor is.
   19048:	900b      	str	r0, [sp, #44]	; 0x2c
		int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
   1904a:	4630      	mov	r0, r6
   1904c:	b2b6      	uxth	r6, r6
   1904e:	fb05 f000 	mul.w	r0, r5, r0
		if (glyph->xAdvance < (xo + w)) x_end = x_offset_cursor + ((xo + w)* textsize_x);  // BUGBUG Overlflows into next char position.
   19052:	bfb4      	ite	lt
   19054:	fb04 1406 	mlalt	r4, r4, r6, r1
		int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
   19058:	180c      	addge	r4, r1, r0
		int16_t x_left_fill = x_offset_cursor + xo * textsize_x;
   1905a:	fb09 1106 	mla	r1, r9, r6, r1
		if (xo < 0) { 
   1905e:	f1b9 0f00 	cmp.w	r9, #0
		int16_t x_left_fill = x_offset_cursor + xo * textsize_x;
   19062:	b209      	sxth	r1, r1
		if (glyph->xAdvance < (xo + w)) x_end = x_offset_cursor + ((xo + w)* textsize_x);  // BUGBUG Overlflows into next char position.
   19064:	fa1f fa84 	uxth.w	sl, r4
		int16_t x_left_fill = x_offset_cursor + xo * textsize_x;
   19068:	9107      	str	r1, [sp, #28]
		if (xo < 0) { 
   1906a:	f2c0 81f1 	blt.w	19450 <ST7735_t3::drawGFXFontChar(unsigned int)+0x4a8>
		int16_t x_offset_cursor = cursor_x + _originx;	// This is where the offseted cursor is.
   1906e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19070:	9111      	str	r1, [sp, #68]	; 0x44
		if((x_start >= _displayclipx2)   || // Clip right
   19072:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
   19076:	9911      	ldr	r1, [sp, #68]	; 0x44
		int16_t y_start = cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y)+ gfxFont->yAdvance*textsize_y/2;  // UP to most negative value.
   19078:	f89b 7045 	ldrb.w	r7, [fp, #69]	; 0x45
		if((x_start >= _displayclipx2)   || // Clip right
   1907c:	428c      	cmp	r4, r1
		int16_t y_start = cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y)+ gfxFont->yAdvance*textsize_y/2;  // UP to most negative value.
   1907e:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
   19082:	f9bb c01a 	ldrsh.w	ip, [fp, #26]
   19086:	f99b 5064 	ldrsb.w	r5, [fp, #100]	; 0x64
   1908a:	9717      	str	r7, [sp, #92]	; 0x5c
		if((x_start >= _displayclipx2)   || // Clip right
   1908c:	f340 80bd 	ble.w	1920a <ST7735_t3::drawGFXFontChar(unsigned int)+0x262>
		int16_t y_start = cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y)+ gfxFont->yAdvance*textsize_y/2;  // UP to most negative value.
   19090:	44b4      	add	ip, r6
   19092:	fa1f fe87 	uxth.w	lr, r7
   19096:	fb12 f107 	smulbb	r1, r2, r7
			 (y_start >= _displayclipy2) || // Clip bottom
   1909a:	f9bb 6022 	ldrsh.w	r6, [fp, #34]	; 0x22
		int16_t y_start = cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y)+ gfxFont->yAdvance*textsize_y/2;  // UP to most negative value.
   1909e:	fb05 c707 	mla	r7, r5, r7, ip
   190a2:	eb07 0151 	add.w	r1, r7, r1, lsr #1
   190a6:	fa0f f981 	sxth.w	r9, r1
   190aa:	b28f      	uxth	r7, r1
		if((x_start >= _displayclipx2)   || // Clip right
   190ac:	454e      	cmp	r6, r9
		int16_t y_start = cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y)+ gfxFont->yAdvance*textsize_y/2;  // UP to most negative value.
   190ae:	9702      	str	r7, [sp, #8]
		if((x_start >= _displayclipx2)   || // Clip right
   190b0:	f340 80ab 	ble.w	1920a <ST7735_t3::drawGFXFontChar(unsigned int)+0x262>
   190b4:	fa0f f18a 	sxth.w	r1, sl
			 (x_end < _displayclipx1)    || // Clip left
   190b8:	f9bb a01c 	ldrsh.w	sl, [fp, #28]
			 (y_start >= _displayclipy2) || // Clip bottom
   190bc:	458a      	cmp	sl, r1
   190be:	f300 80a4 	bgt.w	1920a <ST7735_t3::drawGFXFontChar(unsigned int)+0x262>
		int16_t y_end = y_start +  gfxFont->yAdvance * textsize_y;  // how far we will update
   190c2:	fb02 720e 	mla	r2, r2, lr, r7
			 (y_end < _displayclipy1))  	// Clip top 
   190c6:	f9bb 701e 	ldrsh.w	r7, [fp, #30]
		int16_t y_end = y_start +  gfxFont->yAdvance * textsize_y;  // how far we will update
   190ca:	b212      	sxth	r2, r2
			 (x_end < _displayclipx1)    || // Clip left
   190cc:	4297      	cmp	r7, r2
   190ce:	f300 809c 	bgt.w	1920a <ST7735_t3::drawGFXFontChar(unsigned int)+0x262>
		if (y_end > _displayclipy2) y_end = _displayclipy2;
   190d2:	4296      	cmp	r6, r2
   190d4:	4633      	mov	r3, r6
   190d6:	bfa8      	it	ge
   190d8:	4613      	movge	r3, r2
   190da:	428c      	cmp	r4, r1
   190dc:	931c      	str	r3, [sp, #112]	; 0x70
		if (x_end > _displayclipx2) x_end = _displayclipx2;
   190de:	4623      	mov	r3, r4
   190e0:	bfa8      	it	ge
   190e2:	460b      	movge	r3, r1
   190e4:	9310      	str	r3, [sp, #64]	; 0x40
		if (_gfx_last_cursor_y != (cursor_y + _originy))  _gfx_last_char_x_write = 0;
   190e6:	f9bb 306e 	ldrsh.w	r3, [fp, #110]	; 0x6e
   190ea:	4563      	cmp	r3, ip
   190ec:	d002      	beq.n	190f4 <ST7735_t3::drawGFXFontChar(unsigned int)+0x14c>
   190ee:	2300      	movs	r3, #0
   190f0:	f8ab 3070 	strh.w	r3, [fp, #112]	; 0x70
		int8_t y_top_fill = (yo - gfxFont->yAdvance/2 - _gfxFont_min_yOffset) * textsize_y;
   190f4:	9b04      	ldr	r3, [sp, #16]
   190f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   190f8:	eba3 0308 	sub.w	r3, r3, r8
   190fc:	1b5b      	subs	r3, r3, r5
   190fe:	fb13 f302 	smulbb	r3, r3, r2
		if (_use_fbtft) {
   19102:	f89b 20dc 	ldrb.w	r2, [fp, #220]	; 0xdc
		int8_t y_top_fill = (yo - gfxFont->yAdvance/2 - _gfxFont_min_yOffset) * textsize_y;
   19106:	b2de      	uxtb	r6, r3
   19108:	fa4f f883 	sxtb.w	r8, r3
		if (_use_fbtft) {
   1910c:	2a00      	cmp	r2, #0
   1910e:	f000 8330 	beq.w	19772 <ST7735_t3::drawGFXFontChar(unsigned int)+0x7ca>
    if (x < _changed_min_x)
   19112:	f9bb 10e8 	ldrsh.w	r1, [fp, #232]	; 0xe8
   19116:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19118:	428b      	cmp	r3, r1
   1911a:	da02      	bge.n	19122 <ST7735_t3::drawGFXFontChar(unsigned int)+0x17a>
      _changed_min_x = x;
   1911c:	4619      	mov	r1, r3
   1911e:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
    if (y < _changed_min_y)
   19122:	f9bb 00ec 	ldrsh.w	r0, [fp, #236]	; 0xec
   19126:	4581      	cmp	r9, r0
   19128:	da02      	bge.n	19130 <ST7735_t3::drawGFXFontChar(unsigned int)+0x188>
      _changed_min_y = y;
   1912a:	4648      	mov	r0, r9
   1912c:	f8ab 90ec 	strh.w	r9, [fp, #236]	; 0xec
    if (x > _changed_max_x)
   19130:	f9bb 20ea 	ldrsh.w	r2, [fp, #234]	; 0xea
   19134:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19136:	4293      	cmp	r3, r2
   19138:	dd02      	ble.n	19140 <ST7735_t3::drawGFXFontChar(unsigned int)+0x198>
      _changed_max_x = x;
   1913a:	461a      	mov	r2, r3
   1913c:	f8ab 30ea 	strh.w	r3, [fp, #234]	; 0xea
    if (y > _changed_max_y)
   19140:	f9bb 30ee 	ldrsh.w	r3, [fp, #238]	; 0xee
   19144:	4599      	cmp	r9, r3
   19146:	dd02      	ble.n	1914e <ST7735_t3::drawGFXFontChar(unsigned int)+0x1a6>
      _changed_max_y = y;
   19148:	464b      	mov	r3, r9
   1914a:	f8ab 90ee 	strh.w	r9, [fp, #238]	; 0xee
    if (x < _changed_min_x)
   1914e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   19150:	428c      	cmp	r4, r1
    if (y < _changed_min_y)
   19152:	991c      	ldr	r1, [sp, #112]	; 0x70
      _changed_min_x = x;
   19154:	bfb8      	it	lt
   19156:	f8ab 40e8 	strhlt.w	r4, [fp, #232]	; 0xe8
    if (y < _changed_min_y)
   1915a:	4281      	cmp	r1, r0
			uint16_t * pfbPixel_row = &_pfbtft[ y_start *_width + x_start];
   1915c:	9811      	ldr	r0, [sp, #68]	; 0x44
      _changed_min_y = y;
   1915e:	bfb8      	it	lt
   19160:	f8ab 10ec 	strhlt.w	r1, [fp, #236]	; 0xec
    if (x > _changed_max_x)
   19164:	9910      	ldr	r1, [sp, #64]	; 0x40
   19166:	4291      	cmp	r1, r2
    if (y > _changed_max_y)
   19168:	9a1c      	ldr	r2, [sp, #112]	; 0x70
      _changed_max_x = x;
   1916a:	bfc8      	it	gt
   1916c:	f8ab 10ea 	strhgt.w	r1, [fp, #234]	; 0xea
    if (y > _changed_max_y)
   19170:	429a      	cmp	r2, r3
   19172:	f8bb 1026 	ldrh.w	r1, [fp, #38]	; 0x26
   19176:	f8db 30d8 	ldr.w	r3, [fp, #216]	; 0xd8
   1917a:	fb19 0101 	smlabb	r1, r9, r1, r0
      _changed_max_y = y;
   1917e:	bfc8      	it	gt
   19180:	f8ab 20ee 	strhgt.w	r2, [fp, #238]	; 0xee
			while (y_top_fill--) {
   19184:	1e72      	subs	r2, r6, #1
			uint16_t * pfbPixel_row = &_pfbtft[ y_start *_width + x_start];
   19186:	eb03 0e41 	add.w	lr, r3, r1, lsl #1
			while (y_top_fill--) {
   1918a:	b2d2      	uxtb	r2, r2
   1918c:	f1b8 0f00 	cmp.w	r8, #0
   19190:	f000 8167 	beq.w	19462 <ST7735_t3::drawGFXFontChar(unsigned int)+0x4ba>
   19194:	9b02      	ldr	r3, [sp, #8]
   19196:	b295      	uxth	r5, r2
   19198:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1919a:	4680      	mov	r8, r0
   1919c:	3301      	adds	r3, #1
   1919e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   191a2:	4413      	add	r3, r2
   191a4:	b21c      	sxth	r4, r3
   191a6:	e00c      	b.n	191c2 <ST7735_t3::drawGFXFontChar(unsigned int)+0x21a>
				pfbPixel_row += _width;
   191a8:	f109 0901 	add.w	r9, r9, #1
   191ac:	f9bb 3026 	ldrsh.w	r3, [fp, #38]	; 0x26
   191b0:	fa0f f989 	sxth.w	r9, r9
   191b4:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
			while (y_top_fill--) {
   191b8:	45a1      	cmp	r9, r4
   191ba:	f000 814d 	beq.w	19458 <ST7735_t3::drawGFXFontChar(unsigned int)+0x4b0>
				if ( (y >= _displayclipy1) && (y < _displayclipy2)) {
   191be:	f9bb 701e 	ldrsh.w	r7, [fp, #30]
   191c2:	45b9      	cmp	r9, r7
   191c4:	dbf0      	blt.n	191a8 <ST7735_t3::drawGFXFontChar(unsigned int)+0x200>
   191c6:	f9bb 3022 	ldrsh.w	r3, [fp, #34]	; 0x22
   191ca:	454b      	cmp	r3, r9
   191cc:	ddec      	ble.n	191a8 <ST7735_t3::drawGFXFontChar(unsigned int)+0x200>
					for (int16_t xx = x_start; xx < x_end; xx++) {
   191ce:	4546      	cmp	r6, r8
   191d0:	ddea      	ble.n	191a8 <ST7735_t3::drawGFXFontChar(unsigned int)+0x200>
   191d2:	4643      	mov	r3, r8
   191d4:	4671      	mov	r1, lr
   191d6:	e003      	b.n	191e0 <ST7735_t3::drawGFXFontChar(unsigned int)+0x238>
   191d8:	b203      	sxth	r3, r0
						pfbPixel++;
   191da:	3102      	adds	r1, #2
					for (int16_t xx = x_start; xx < x_end; xx++) {
   191dc:	429e      	cmp	r6, r3
   191de:	d0e3      	beq.n	191a8 <ST7735_t3::drawGFXFontChar(unsigned int)+0x200>
						if ((xx >= _displayclipx1) && (xx >= x_offset_cursor)) {
   191e0:	f9bb 201c 	ldrsh.w	r2, [fp, #28]
   191e4:	1c58      	adds	r0, r3, #1
   191e6:	4562      	cmp	r2, ip
   191e8:	bfb8      	it	lt
   191ea:	4662      	movlt	r2, ip
   191ec:	4293      	cmp	r3, r2
   191ee:	dbf3      	blt.n	191d8 <ST7735_t3::drawGFXFontChar(unsigned int)+0x230>
							if ((xx >= _gfx_last_char_x_write) || (*pfbPixel != _gfx_last_char_textcolor))
   191f0:	f9bb 2070 	ldrsh.w	r2, [fp, #112]	; 0x70
   191f4:	429a      	cmp	r2, r3
   191f6:	dd04      	ble.n	19202 <ST7735_t3::drawGFXFontChar(unsigned int)+0x25a>
   191f8:	880a      	ldrh	r2, [r1, #0]
   191fa:	f8bb 3072 	ldrh.w	r3, [fp, #114]	; 0x72
   191fe:	429a      	cmp	r2, r3
   19200:	d0ea      	beq.n	191d8 <ST7735_t3::drawGFXFontChar(unsigned int)+0x230>
								*pfbPixel = textbgcolor;
   19202:	f8bb 3036 	ldrh.w	r3, [fp, #54]	; 0x36
   19206:	800b      	strh	r3, [r1, #0]
   19208:	e7e6      	b.n	191d8 <ST7735_t3::drawGFXFontChar(unsigned int)+0x230>
			cursor_x += glyph->xAdvance * (int16_t)textsize_x;
   1920a:	4418      	add	r0, r3
   1920c:	f8ab 000a 	strh.w	r0, [fp, #10]
}
   19210:	b01f      	add	sp, #124	; 0x7c
   19212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   19216:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   19218:	f89b 3044 	ldrb.w	r3, [fp, #68]	; 0x44
   1921c:	444e      	add	r6, r9
   1921e:	fb06 0303 	mla	r3, r6, r3, r0
   19222:	f9bb 6026 	ldrsh.w	r6, [fp, #38]	; 0x26
   19226:	42b3      	cmp	r3, r6
   19228:	f77f aef3 	ble.w	19012 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6a>
        cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
   1922c:	f8bb 000c 	ldrh.w	r0, [fp, #12]
        cursor_x  = 0;
   19230:	2300      	movs	r3, #0
        cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
   19232:	f89b 6045 	ldrb.w	r6, [fp, #69]	; 0x45
        cursor_x  = 0;
   19236:	f8ab 300a 	strh.w	r3, [fp, #10]
        cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
   1923a:	fb06 0002 	mla	r0, r6, r2, r0
   1923e:	f8ab 000c 	strh.w	r0, [fp, #12]
   19242:	4618      	mov	r0, r3
   19244:	e6e6      	b.n	19014 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6c>
	    for(yy=0; yy<h; yy++) {
   19246:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19248:	2a00      	cmp	r2, #0
   1924a:	d04c      	beq.n	192e6 <ST7735_t3::drawGFXFontChar(unsigned int)+0x33e>
   1924c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    uint8_t  xx, yy, bits = 0, bit = 0;
   19250:	2600      	movs	r6, #0
   19252:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19254:	4684      	mov	ip, r0
	    for(yy=0; yy<h; yy++) {
   19256:	4690      	mov	r8, r2
    uint8_t  xx, yy, bits = 0, bit = 0;
   19258:	4635      	mov	r5, r6
   1925a:	4413      	add	r3, r2
   1925c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
   19260:	9205      	str	r2, [sp, #20]
   19262:	b29b      	uxth	r3, r3
   19264:	9302      	str	r3, [sp, #8]
	        while (w_left) {
   19266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19268:	b3a3      	cbz	r3, 192d4 <ST7735_t3::drawGFXFontChar(unsigned int)+0x32c>
   1926a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	    	xx = 0;
   1926c:	2700      	movs	r7, #0
	            if(!(bit & 7)) {
   1926e:	0771      	lsls	r1, r6, #29
   19270:	d106      	bne.n	19280 <ST7735_t3::drawGFXFontChar(unsigned int)+0x2d8>
	                bits = bitmap[bo++];
   19272:	f10a 0301 	add.w	r3, sl, #1
   19276:	9a03      	ldr	r2, [sp, #12]
   19278:	f812 500a 	ldrb.w	r5, [r2, sl]
   1927c:	fa1f fa83 	uxth.w	sl, r3
	            if ((w_left >= 8) && ((bits & 0xff) == 0xff)) {
   19280:	2c07      	cmp	r4, #7
   19282:	d93e      	bls.n	19302 <ST7735_t3::drawGFXFontChar(unsigned int)+0x35a>
   19284:	2dff      	cmp	r5, #255	; 0xff
   19286:	d13c      	bne.n	19302 <ST7735_t3::drawGFXFontChar(unsigned int)+0x35a>
	                fillRect(cursor_x+(xo+xx)*textsize_x, cursor_y+(yo+yy)*textsize_y,
   19288:	f89b 2045 	ldrb.w	r2, [fp, #69]	; 0x45
   1928c:	9200      	str	r2, [sp, #0]
   1928e:	fb12 f208 	smulbb	r2, r2, r8
   19292:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   19296:	f89b 3044 	ldrb.w	r3, [fp, #68]	; 0x44
   1929a:	440a      	add	r2, r1
   1929c:	eb09 0107 	add.w	r1, r9, r7
   192a0:	f8bb 0034 	ldrh.w	r0, [fp, #52]	; 0x34
   192a4:	fb01 c103 	mla	r1, r1, r3, ip
   192a8:	b212      	sxth	r2, r2
   192aa:	00db      	lsls	r3, r3, #3
   192ac:	9001      	str	r0, [sp, #4]
   192ae:	b209      	sxth	r1, r1
   192b0:	4658      	mov	r0, fp
   192b2:	f7fd f937 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
   192b6:	2208      	movs	r2, #8
	            	xCount = 8;
   192b8:	4613      	mov	r3, r2
	            xx += xCount;
   192ba:	441f      	add	r7, r3
	            bit += xCount;
   192bc:	441e      	add	r6, r3
	            w_left -= xCount;
   192be:	1ae3      	subs	r3, r4, r3
	            bits <<= xCount;
   192c0:	fa05 f202 	lsl.w	r2, r5, r2
	            xx += xCount;
   192c4:	b2ff      	uxtb	r7, r7
    cursor_x += glyph->xAdvance * (int16_t)textsize_x;
   192c6:	f9bb c00a 	ldrsh.w	ip, [fp, #10]
	        while (w_left) {
   192ca:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
	            bits <<= xCount;
   192ce:	b2d5      	uxtb	r5, r2
	            bit += xCount;
   192d0:	b2f6      	uxtb	r6, r6
	        while (w_left) {
   192d2:	d1cc      	bne.n	1926e <ST7735_t3::drawGFXFontChar(unsigned int)+0x2c6>
	    for(yy=0; yy<h; yy++) {
   192d4:	f108 0801 	add.w	r8, r8, #1
   192d8:	9b02      	ldr	r3, [sp, #8]
   192da:	fa1f f888 	uxth.w	r8, r8
   192de:	4543      	cmp	r3, r8
   192e0:	d1c1      	bne.n	19266 <ST7735_t3::drawGFXFontChar(unsigned int)+0x2be>
    cursor_x += glyph->xAdvance * (int16_t)textsize_x;
   192e2:	fa1f f38c 	uxth.w	r3, ip
    	_gfx_last_char_x_write = 0;
   192e6:	2200      	movs	r2, #0
   192e8:	f8ab 2070 	strh.w	r2, [fp, #112]	; 0x70
    cursor_x += glyph->xAdvance * (int16_t)textsize_x;
   192ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   192ee:	7911      	ldrb	r1, [r2, #4]
   192f0:	f89b 2044 	ldrb.w	r2, [fp, #68]	; 0x44
   192f4:	fb01 3302 	mla	r3, r1, r2, r3
   192f8:	f8ab 300a 	strh.w	r3, [fp, #10]
}
   192fc:	b01f      	add	sp, #124	; 0x7c
   192fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	            } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
   19302:	2c03      	cmp	r4, #3
   19304:	d917      	bls.n	19336 <ST7735_t3::drawGFXFontChar(unsigned int)+0x38e>
   19306:	f005 03f0 	and.w	r3, r5, #240	; 0xf0
   1930a:	2bf0      	cmp	r3, #240	; 0xf0
   1930c:	d056      	beq.n	193bc <ST7735_t3::drawGFXFontChar(unsigned int)+0x414>
	            } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
   1930e:	f005 03e0 	and.w	r3, r5, #224	; 0xe0
   19312:	2be0      	cmp	r3, #224	; 0xe0
   19314:	f000 8081 	beq.w	1941a <ST7735_t3::drawGFXFontChar(unsigned int)+0x472>
	            } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
   19318:	f005 03c0 	and.w	r3, r5, #192	; 0xc0
   1931c:	2bc0      	cmp	r3, #192	; 0xc0
   1931e:	d033      	beq.n	19388 <ST7735_t3::drawGFXFontChar(unsigned int)+0x3e0>
	            	if(bits & 0x80) {
   19320:	062b      	lsls	r3, r5, #24
   19322:	d412      	bmi.n	1934a <ST7735_t3::drawGFXFontChar(unsigned int)+0x3a2>
	            xx += xCount;
   19324:	3701      	adds	r7, #1
	            w_left -= xCount;
   19326:	3c01      	subs	r4, #1
	            bit += xCount;
   19328:	3601      	adds	r6, #1
	            bits <<= xCount;
   1932a:	006d      	lsls	r5, r5, #1
	            xx += xCount;
   1932c:	b2ff      	uxtb	r7, r7
	            w_left -= xCount;
   1932e:	b2e4      	uxtb	r4, r4
	            bit += xCount;
   19330:	b2f6      	uxtb	r6, r6
	            bits <<= xCount;
   19332:	b2ed      	uxtb	r5, r5
	        while (w_left) {
   19334:	e79b      	b.n	1926e <ST7735_t3::drawGFXFontChar(unsigned int)+0x2c6>
	            } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
   19336:	d0ea      	beq.n	1930e <ST7735_t3::drawGFXFontChar(unsigned int)+0x366>
	            } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
   19338:	2c01      	cmp	r4, #1
   1933a:	d1ed      	bne.n	19318 <ST7735_t3::drawGFXFontChar(unsigned int)+0x370>
	            	if(bits & 0x80) {
   1933c:	062a      	lsls	r2, r5, #24
   1933e:	d404      	bmi.n	1934a <ST7735_t3::drawGFXFontChar(unsigned int)+0x3a2>
	            bit += xCount;
   19340:	3601      	adds	r6, #1
	            bits <<= xCount;
   19342:	006d      	lsls	r5, r5, #1
	            bit += xCount;
   19344:	b2f6      	uxtb	r6, r6
	            bits <<= xCount;
   19346:	b2ed      	uxtb	r5, r5
	        while (w_left) {
   19348:	e7c4      	b.n	192d4 <ST7735_t3::drawGFXFontChar(unsigned int)+0x32c>
		                if((textsize_x == 1) && (textsize_y == 1)){
   1934a:	f8bb 3044 	ldrh.w	r3, [fp, #68]	; 0x44
   1934e:	f240 1201 	movw	r2, #257	; 0x101
   19352:	4293      	cmp	r3, r2
   19354:	d04c      	beq.n	193f0 <ST7735_t3::drawGFXFontChar(unsigned int)+0x448>
		                fillRect(cursor_x+(xo+xx)*textsize_x, cursor_y+(yo+yy)*textsize_y,
   19356:	f89b 2045 	ldrb.w	r2, [fp, #69]	; 0x45
   1935a:	9200      	str	r2, [sp, #0]
   1935c:	fb12 f208 	smulbb	r2, r2, r8
   19360:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   19364:	f89b 3044 	ldrb.w	r3, [fp, #68]	; 0x44
   19368:	440a      	add	r2, r1
   1936a:	eb09 0107 	add.w	r1, r9, r7
   1936e:	f8bb 0034 	ldrh.w	r0, [fp, #52]	; 0x34
   19372:	fb01 c103 	mla	r1, r1, r3, ip
   19376:	b212      	sxth	r2, r2
   19378:	9001      	str	r0, [sp, #4]
   1937a:	4658      	mov	r0, fp
   1937c:	b209      	sxth	r1, r1
   1937e:	f7fd f8d1 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
   19382:	2201      	movs	r2, #1
	            	xCount = 1;
   19384:	4613      	mov	r3, r2
   19386:	e798      	b.n	192ba <ST7735_t3::drawGFXFontChar(unsigned int)+0x312>
	                fillRect(cursor_x+(xo+xx)*textsize_x, cursor_y+(yo+yy)*textsize_y,
   19388:	f89b 2045 	ldrb.w	r2, [fp, #69]	; 0x45
   1938c:	9200      	str	r2, [sp, #0]
   1938e:	fb12 f208 	smulbb	r2, r2, r8
   19392:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   19396:	f89b 3044 	ldrb.w	r3, [fp, #68]	; 0x44
   1939a:	440a      	add	r2, r1
   1939c:	eb09 0107 	add.w	r1, r9, r7
   193a0:	f8bb 0034 	ldrh.w	r0, [fp, #52]	; 0x34
   193a4:	fb01 c103 	mla	r1, r1, r3, ip
   193a8:	b212      	sxth	r2, r2
   193aa:	005b      	lsls	r3, r3, #1
   193ac:	9001      	str	r0, [sp, #4]
   193ae:	b209      	sxth	r1, r1
   193b0:	4658      	mov	r0, fp
   193b2:	f7fd f8b7 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
   193b6:	2202      	movs	r2, #2
	            	xCount = 2;
   193b8:	4613      	mov	r3, r2
	                fillRect(cursor_x+(xo+xx)*textsize_x, cursor_y+(yo+yy)*textsize_y,
   193ba:	e77e      	b.n	192ba <ST7735_t3::drawGFXFontChar(unsigned int)+0x312>
	                fillRect(cursor_x+(xo+xx)*textsize_x, cursor_y+(yo+yy)*textsize_y,
   193bc:	f89b 2045 	ldrb.w	r2, [fp, #69]	; 0x45
   193c0:	9200      	str	r2, [sp, #0]
   193c2:	fb12 f208 	smulbb	r2, r2, r8
   193c6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   193ca:	f89b 3044 	ldrb.w	r3, [fp, #68]	; 0x44
   193ce:	440a      	add	r2, r1
   193d0:	eb09 0107 	add.w	r1, r9, r7
   193d4:	f8bb 0034 	ldrh.w	r0, [fp, #52]	; 0x34
   193d8:	fb01 c103 	mla	r1, r1, r3, ip
   193dc:	b212      	sxth	r2, r2
   193de:	009b      	lsls	r3, r3, #2
   193e0:	9001      	str	r0, [sp, #4]
   193e2:	b209      	sxth	r1, r1
   193e4:	4658      	mov	r0, fp
   193e6:	f7fd f89d 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
   193ea:	2204      	movs	r2, #4
	            	xCount = 4;
   193ec:	4613      	mov	r3, r2
	                fillRect(cursor_x+(xo+xx)*textsize_x, cursor_y+(yo+yy)*textsize_y,
   193ee:	e764      	b.n	192ba <ST7735_t3::drawGFXFontChar(unsigned int)+0x312>
		                    drawPixel(cursor_x+xo+xx, cursor_y+yo+yy, textcolor);
   193f0:	9b04      	ldr	r3, [sp, #16]
   193f2:	eb0c 0107 	add.w	r1, ip, r7
   193f6:	f8bb 200c 	ldrh.w	r2, [fp, #12]
   193fa:	4658      	mov	r0, fp
   193fc:	4449      	add	r1, r9
   193fe:	441a      	add	r2, r3
   19400:	9b05      	ldr	r3, [sp, #20]
   19402:	b209      	sxth	r1, r1
   19404:	eba8 0303 	sub.w	r3, r8, r3
   19408:	441a      	add	r2, r3
   1940a:	f8bb 3034 	ldrh.w	r3, [fp, #52]	; 0x34
   1940e:	b212      	sxth	r2, r2
   19410:	f7fc fde2 	bl	15fd8 <ST7735_t3::drawPixel(short, short, unsigned short)>
   19414:	2201      	movs	r2, #1
	            	xCount = 1;
   19416:	4613      	mov	r3, r2
   19418:	e74f      	b.n	192ba <ST7735_t3::drawGFXFontChar(unsigned int)+0x312>
	                fillRect(cursor_x+(xo+xx)*textsize_x, cursor_y+(yo+yy)*textsize_y,
   1941a:	f89b 2045 	ldrb.w	r2, [fp, #69]	; 0x45
   1941e:	9200      	str	r2, [sp, #0]
   19420:	fb12 f208 	smulbb	r2, r2, r8
   19424:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   19428:	f89b 3044 	ldrb.w	r3, [fp, #68]	; 0x44
   1942c:	440a      	add	r2, r1
   1942e:	eb09 0107 	add.w	r1, r9, r7
   19432:	f8bb 0034 	ldrh.w	r0, [fp, #52]	; 0x34
   19436:	fb01 c103 	mla	r1, r1, r3, ip
   1943a:	b212      	sxth	r2, r2
   1943c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19440:	9001      	str	r0, [sp, #4]
   19442:	b209      	sxth	r1, r1
   19444:	4658      	mov	r0, fp
   19446:	f7fd f86d 	bl	16524 <ST7735_t3::fillRect(short, short, short, short, unsigned short)>
   1944a:	2203      	movs	r2, #3
	            	xCount = 3;
   1944c:	4613      	mov	r3, r2
	                fillRect(cursor_x+(xo+xx)*textsize_x, cursor_y+(yo+yy)*textsize_y,
   1944e:	e734      	b.n	192ba <ST7735_t3::drawGFXFontChar(unsigned int)+0x312>
			x_start += xo * textsize_x;
   19450:	9111      	str	r1, [sp, #68]	; 0x44
			x_left_fill = 0;	// Don't need to fill anything here... 
   19452:	2100      	movs	r1, #0
   19454:	9107      	str	r1, [sp, #28]
   19456:	e60c      	b.n	19072 <ST7735_t3::drawGFXFontChar(unsigned int)+0xca>
   19458:	9b02      	ldr	r3, [sp, #8]
   1945a:	442b      	add	r3, r5
   1945c:	3301      	adds	r3, #1
   1945e:	fa0f f983 	sxth.w	r9, r3
			for(yy=0; (yy<h) && (y < _displayclipy2); yy++) {
   19462:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19464:	2b00      	cmp	r3, #0
   19466:	f000 80f5 	beq.w	19654 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6ac>
   1946a:	f8dd a01c 	ldr.w	sl, [sp, #28]
   1946e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   19472:	fa1f f28a 	uxth.w	r2, sl
   19476:	9b05      	ldr	r3, [sp, #20]
   19478:	911d      	str	r1, [sp, #116]	; 0x74
   1947a:	921b      	str	r2, [sp, #108]	; 0x6c
   1947c:	3a01      	subs	r2, #1
   1947e:	3b01      	subs	r3, #1
   19480:	f8cd e010 	str.w	lr, [sp, #16]
   19484:	1a52      	subs	r2, r2, r1
   19486:	2100      	movs	r1, #0
   19488:	b2db      	uxtb	r3, r3
   1948a:	b292      	uxth	r2, r2
   1948c:	9119      	str	r1, [sp, #100]	; 0x64
    uint8_t  xx, yy, bits = 0, bit = 0;
   1948e:	910c      	str	r1, [sp, #48]	; 0x30
   19490:	3201      	adds	r2, #1
   19492:	910e      	str	r1, [sp, #56]	; 0x38
   19494:	0052      	lsls	r2, r2, #1
   19496:	921a      	str	r2, [sp, #104]	; 0x68
   19498:	1c5a      	adds	r2, r3, #1
   1949a:	0052      	lsls	r2, r2, #1
   1949c:	9206      	str	r2, [sp, #24]
   1949e:	b29a      	uxth	r2, r3
   194a0:	3301      	adds	r3, #1
   194a2:	9207      	str	r2, [sp, #28]
   194a4:	9308      	str	r3, [sp, #32]
			for(yy=0; (yy<h) && (y < _displayclipy2); yy++) {
   194a6:	f9bb 3022 	ldrsh.w	r3, [fp, #34]	; 0x22
   194aa:	454b      	cmp	r3, r9
   194ac:	f340 80d0 	ble.w	19650 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6a8>
				for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2); yts++) {
   194b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   194b2:	2b00      	cmp	r3, #0
   194b4:	f000 80c4 	beq.w	19640 <ST7735_t3::drawGFXFontChar(unsigned int)+0x698>
   194b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   194ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   194bc:	444b      	add	r3, r9
   194be:	b29b      	uxth	r3, r3
   194c0:	930d      	str	r3, [sp, #52]	; 0x34
   194c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   194c4:	4413      	add	r3, r2
   194c6:	b2db      	uxtb	r3, r3
   194c8:	9318      	str	r3, [sp, #96]	; 0x60
   194ca:	e019      	b.n	19500 <ST7735_t3::drawGFXFontChar(unsigned int)+0x558>
   194cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   194ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   194d0:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   194d4:	930f      	str	r3, [sp, #60]	; 0x3c
					pfbPixel_row += _width;
   194d6:	9a04      	ldr	r2, [sp, #16]
   194d8:	f109 0901 	add.w	r9, r9, #1
   194dc:	f9bb 3026 	ldrsh.w	r3, [fp, #38]	; 0x26
   194e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
				for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2); yts++) {
   194e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
					pfbPixel_row += _width;
   194e6:	9304      	str	r3, [sp, #16]
   194e8:	fa1f f389 	uxth.w	r3, r9
   194ec:	fa0f f989 	sxth.w	r9, r9
				for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2); yts++) {
   194f0:	429a      	cmp	r2, r3
   194f2:	f000 80a0 	beq.w	19636 <ST7735_t3::drawGFXFontChar(unsigned int)+0x68e>
   194f6:	f9bb 3022 	ldrsh.w	r3, [fp, #34]	; 0x22
   194fa:	454b      	cmp	r3, r9
   194fc:	f340 809b 	ble.w	19636 <ST7735_t3::drawGFXFontChar(unsigned int)+0x68e>
					if (y >= _displayclipy1) {
   19500:	f9bb 301e 	ldrsh.w	r3, [fp, #30]
   19504:	454b      	cmp	r3, r9
   19506:	dce1      	bgt.n	194cc <ST7735_t3::drawGFXFontChar(unsigned int)+0x524>
						while (x < x_left_fill) {
   19508:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1950a:	4553      	cmp	r3, sl
   1950c:	f280 80db 	bge.w	196c6 <ST7735_t3::drawGFXFontChar(unsigned int)+0x71e>
   19510:	9a04      	ldr	r2, [sp, #16]
							if ( (x >= _displayclipx1) && (x < _displayclipx2)) {
   19512:	f9bb 001c 	ldrsh.w	r0, [fp, #28]
   19516:	1c59      	adds	r1, r3, #1
   19518:	4298      	cmp	r0, r3
   1951a:	dc0f      	bgt.n	1953c <ST7735_t3::drawGFXFontChar(unsigned int)+0x594>
   1951c:	f9bb 0020 	ldrsh.w	r0, [fp, #32]
   19520:	4298      	cmp	r0, r3
   19522:	dd0b      	ble.n	1953c <ST7735_t3::drawGFXFontChar(unsigned int)+0x594>
								if ((x >= _gfx_last_char_x_write) || (*pfbPixel != _gfx_last_char_textcolor))
   19524:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
   19528:	4298      	cmp	r0, r3
   1952a:	dd04      	ble.n	19536 <ST7735_t3::drawGFXFontChar(unsigned int)+0x58e>
   1952c:	8810      	ldrh	r0, [r2, #0]
   1952e:	f8bb 3072 	ldrh.w	r3, [fp, #114]	; 0x72
   19532:	4298      	cmp	r0, r3
   19534:	d002      	beq.n	1953c <ST7735_t3::drawGFXFontChar(unsigned int)+0x594>
									*pfbPixel = textbgcolor;
   19536:	f8bb 3036 	ldrh.w	r3, [fp, #54]	; 0x36
   1953a:	8013      	strh	r3, [r2, #0]
   1953c:	b20b      	sxth	r3, r1
							pfbPixel++;
   1953e:	3202      	adds	r2, #2
						while (x < x_left_fill) {
   19540:	459a      	cmp	sl, r3
   19542:	d1e6      	bne.n	19512 <ST7735_t3::drawGFXFontChar(unsigned int)+0x56a>
							pfbPixel++;
   19544:	9b04      	ldr	r3, [sp, #16]
   19546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
							x++;
   19548:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
							pfbPixel++;
   1954a:	189e      	adds	r6, r3, r2
   1954c:	4653      	mov	r3, sl
				        for(xx=0; xx<w; xx++) {
   1954e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19550:	2a00      	cmp	r2, #0
   19552:	f000 80b2 	beq.w	196ba <ST7735_t3::drawGFXFontChar(unsigned int)+0x712>
   19556:	9a18      	ldr	r2, [sp, #96]	; 0x60
   19558:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
   1955c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1955e:	4692      	mov	sl, r2
   19560:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   19562:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   19566:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1956a:	920f      	str	r2, [sp, #60]	; 0x3c
   1956c:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
				            if(!(bit++ & 7)) {
   19570:	463a      	mov	r2, r7
   19572:	3701      	adds	r7, #1
   19574:	0752      	lsls	r2, r2, #29
   19576:	b2ff      	uxtb	r7, r7
   19578:	d106      	bne.n	19588 <ST7735_t3::drawGFXFontChar(unsigned int)+0x5e0>
				                bits = bitmap[bo++];
   1957a:	f10e 0201 	add.w	r2, lr, #1
   1957e:	9903      	ldr	r1, [sp, #12]
   19580:	f811 400e 	ldrb.w	r4, [r1, lr]
   19584:	fa1f fe82 	uxth.w	lr, r2
				            for (uint8_t xts = 0; xts < textsize_x; xts++) {
   19588:	9a05      	ldr	r2, [sp, #20]
   1958a:	2a00      	cmp	r2, #0
   1958c:	d051      	beq.n	19632 <ST7735_t3::drawGFXFontChar(unsigned int)+0x68a>
   1958e:	b298      	uxth	r0, r3
   19590:	9908      	ldr	r1, [sp, #32]
   19592:	4632      	mov	r2, r6
				            		if (bits & 0x80)
   19594:	fa4f fc84 	sxtb.w	ip, r4
   19598:	1841      	adds	r1, r0, r1
   1959a:	46f1      	mov	r9, lr
   1959c:	9002      	str	r0, [sp, #8]
   1959e:	b28d      	uxth	r5, r1
   195a0:	b209      	sxth	r1, r1
								if ( (x >= _displayclipx1) && (x < _displayclipx2)) {
   195a2:	f9bb e01c 	ldrsh.w	lr, [fp, #28]
   195a6:	459e      	cmp	lr, r3
   195a8:	dc15      	bgt.n	195d6 <ST7735_t3::drawGFXFontChar(unsigned int)+0x62e>
   195aa:	f9bb e020 	ldrsh.w	lr, [fp, #32]
   195ae:	459e      	cmp	lr, r3
   195b0:	dd11      	ble.n	195d6 <ST7735_t3::drawGFXFontChar(unsigned int)+0x62e>
				            		if (bits & 0x80)
   195b2:	f1bc 0f00 	cmp.w	ip, #0
   195b6:	db37      	blt.n	19628 <ST7735_t3::drawGFXFontChar(unsigned int)+0x680>
				            		else if (x >= x_offset_cursor) {
   195b8:	4598      	cmp	r8, r3
   195ba:	dc0c      	bgt.n	195d6 <ST7735_t3::drawGFXFontChar(unsigned int)+0x62e>
										if ((x >= _gfx_last_char_x_write) || (*pfbPixel != _gfx_last_char_textcolor))
   195bc:	f9bb e070 	ldrsh.w	lr, [fp, #112]	; 0x70
   195c0:	459e      	cmp	lr, r3
   195c2:	dd04      	ble.n	195ce <ST7735_t3::drawGFXFontChar(unsigned int)+0x626>
   195c4:	8810      	ldrh	r0, [r2, #0]
   195c6:	f8bb e072 	ldrh.w	lr, [fp, #114]	; 0x72
   195ca:	4570      	cmp	r0, lr
   195cc:	d003      	beq.n	195d6 <ST7735_t3::drawGFXFontChar(unsigned int)+0x62e>
											*pfbPixel = textbgcolor;
   195ce:	f8bb e036 	ldrh.w	lr, [fp, #54]	; 0x36
   195d2:	f8a2 e000 	strh.w	lr, [r2]
								pfbPixel++;
   195d6:	3301      	adds	r3, #1
   195d8:	3202      	adds	r2, #2
				            	x++;	// remember our logical position...
   195da:	b21b      	sxth	r3, r3
				            for (uint8_t xts = 0; xts < textsize_x; xts++) {
   195dc:	428b      	cmp	r3, r1
   195de:	d1e0      	bne.n	195a2 <ST7735_t3::drawGFXFontChar(unsigned int)+0x5fa>
   195e0:	9b07      	ldr	r3, [sp, #28]
   195e2:	46ce      	mov	lr, r9
   195e4:	9802      	ldr	r0, [sp, #8]
   195e6:	4418      	add	r0, r3
								pfbPixel++;
   195e8:	9b06      	ldr	r3, [sp, #24]
   195ea:	3001      	adds	r0, #1
   195ec:	441e      	add	r6, r3
   195ee:	b203      	sxth	r3, r0
				            bits <<= 1;
   195f0:	0064      	lsls	r4, r4, #1
				        for(xx=0; xx<w; xx++) {
   195f2:	4557      	cmp	r7, sl
				            bits <<= 1;
   195f4:	b2e4      	uxtb	r4, r4
				        for(xx=0; xx<w; xx++) {
   195f6:	d1bb      	bne.n	19570 <ST7735_t3::drawGFXFontChar(unsigned int)+0x5c8>
   195f8:	e9dd a915 	ldrd	sl, r9, [sp, #84]	; 0x54
				        while (x++ < x_end) {
   195fc:	9910      	ldr	r1, [sp, #64]	; 0x40
   195fe:	1c6a      	adds	r2, r5, #1
   19600:	4299      	cmp	r1, r3
   19602:	b212      	sxth	r2, r2
   19604:	f77f af67 	ble.w	194d6 <ST7735_t3::drawGFXFontChar(unsigned int)+0x52e>
   19608:	4608      	mov	r0, r1
							if (x >= _displayclipx1) {
   1960a:	f9bb 101c 	ldrsh.w	r1, [fp, #28]
   1960e:	1c53      	adds	r3, r2, #1
   19610:	4291      	cmp	r1, r2
   19612:	b21b      	sxth	r3, r3
   19614:	dc02      	bgt.n	1961c <ST7735_t3::drawGFXFontChar(unsigned int)+0x674>
				        		*pfbPixel = textbgcolor;
   19616:	f8bb 1036 	ldrh.w	r1, [fp, #54]	; 0x36
   1961a:	8031      	strh	r1, [r6, #0]
				        while (x++ < x_end) {
   1961c:	4290      	cmp	r0, r2
							pfbPixel++;
   1961e:	f106 0602 	add.w	r6, r6, #2
				        while (x++ < x_end) {
   19622:	461a      	mov	r2, r3
   19624:	dcf1      	bgt.n	1960a <ST7735_t3::drawGFXFontChar(unsigned int)+0x662>
   19626:	e756      	b.n	194d6 <ST7735_t3::drawGFXFontChar(unsigned int)+0x52e>
				            			*pfbPixel = textcolor;
   19628:	f8bb e034 	ldrh.w	lr, [fp, #52]	; 0x34
   1962c:	f8a2 e000 	strh.w	lr, [r2]
   19630:	e7d1      	b.n	195d6 <ST7735_t3::drawGFXFontChar(unsigned int)+0x62e>
				        while (x++ < x_end) {
   19632:	b29d      	uxth	r5, r3
   19634:	e7dc      	b.n	195f0 <ST7735_t3::drawGFXFontChar(unsigned int)+0x648>
   19636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19638:	940e      	str	r4, [sp, #56]	; 0x38
   1963a:	930c      	str	r3, [sp, #48]	; 0x30
   1963c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
			for(yy=0; (yy<h) && (y < _displayclipy2); yy++) {
   19640:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19642:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19644:	3301      	adds	r3, #1
   19646:	9319      	str	r3, [sp, #100]	; 0x64
   19648:	b2db      	uxtb	r3, r3
   1964a:	429a      	cmp	r2, r3
   1964c:	f63f af2b 	bhi.w	194a6 <ST7735_t3::drawGFXFontChar(unsigned int)+0x4fe>
   19650:	f8dd e010 	ldr.w	lr, [sp, #16]
			while (y < y_end) {
   19654:	9e1c      	ldr	r6, [sp, #112]	; 0x70
   19656:	45b1      	cmp	r9, r6
   19658:	da6e      	bge.n	19738 <ST7735_t3::drawGFXFontChar(unsigned int)+0x790>
   1965a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1965c:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
   19660:	e009      	b.n	19676 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6ce>
				pfbPixel_row += _width;
   19662:	f109 0901 	add.w	r9, r9, #1
   19666:	f9bb 3026 	ldrsh.w	r3, [fp, #38]	; 0x26
   1966a:	fa0f f989 	sxth.w	r9, r9
   1966e:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
			while (y < y_end) {
   19672:	454e      	cmp	r6, r9
   19674:	d060      	beq.n	19738 <ST7735_t3::drawGFXFontChar(unsigned int)+0x790>
				if (y >= _displayclipy1) {
   19676:	f9bb 301e 	ldrsh.w	r3, [fp, #30]
   1967a:	454b      	cmp	r3, r9
   1967c:	dcf1      	bgt.n	19662 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6ba>
					for (int16_t xx = x_start; xx < x_end; xx++) {
   1967e:	42bc      	cmp	r4, r7
   19680:	ddef      	ble.n	19662 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6ba>
   19682:	463b      	mov	r3, r7
   19684:	4671      	mov	r1, lr
   19686:	e003      	b.n	19690 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6e8>
   19688:	b203      	sxth	r3, r0
						pfbPixel++;
   1968a:	3102      	adds	r1, #2
					for (int16_t xx = x_start; xx < x_end; xx++) {
   1968c:	429c      	cmp	r4, r3
   1968e:	d0e8      	beq.n	19662 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6ba>
						if ((xx >= _displayclipx1) && (xx >= x_offset_cursor)) {
   19690:	f9bb 201c 	ldrsh.w	r2, [fp, #28]
   19694:	1c58      	adds	r0, r3, #1
   19696:	42aa      	cmp	r2, r5
   19698:	bfb8      	it	lt
   1969a:	462a      	movlt	r2, r5
   1969c:	4293      	cmp	r3, r2
   1969e:	dbf3      	blt.n	19688 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6e0>
							if ((xx >= _gfx_last_char_x_write) || (*pfbPixel != _gfx_last_char_textcolor))
   196a0:	f9bb 2070 	ldrsh.w	r2, [fp, #112]	; 0x70
   196a4:	429a      	cmp	r2, r3
   196a6:	dd04      	ble.n	196b2 <ST7735_t3::drawGFXFontChar(unsigned int)+0x70a>
   196a8:	880a      	ldrh	r2, [r1, #0]
   196aa:	f8bb 3072 	ldrh.w	r3, [fp, #114]	; 0x72
   196ae:	429a      	cmp	r2, r3
   196b0:	d0ea      	beq.n	19688 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6e0>
			        			*pfbPixel = textbgcolor;
   196b2:	f8bb 3036 	ldrh.w	r3, [fp, #54]	; 0x36
   196b6:	800b      	strh	r3, [r1, #0]
   196b8:	e7e6      	b.n	19688 <ST7735_t3::drawGFXFontChar(unsigned int)+0x6e0>
				        for(xx=0; xx<w; xx++) {
   196ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   196bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   196be:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   196c2:	920f      	str	r2, [sp, #60]	; 0x3c
   196c4:	e79a      	b.n	195fc <ST7735_t3::drawGFXFontChar(unsigned int)+0x654>
						while (x < x_left_fill) {
   196c6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   196c8:	9e04      	ldr	r6, [sp, #16]
   196ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   196cc:	e73f      	b.n	1954e <ST7735_t3::drawGFXFontChar(unsigned int)+0x5a6>
			writecommand_last(ST7735_NOP);
   196ce:	2100      	movs	r1, #0
   196d0:	4658      	mov	r0, fp
   196d2:	f7fb fd7d 	bl	151d0 <ST7735_t3::writecommand_last(unsigned char)>
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   196d6:	f8db 30b8 	ldr.w	r3, [fp, #184]	; 0xb8
   196da:	b11b      	cbz	r3, 196e4 <ST7735_t3::drawGFXFontChar(unsigned int)+0x73c>
   196dc:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
    *(base+33) = mask;
   196e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   196e4:	f89b 3009 	ldrb.w	r3, [fp, #9]
   196e8:	b333      	cbz	r3, 19738 <ST7735_t3::drawGFXFontChar(unsigned int)+0x790>
   196ea:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
		if (interruptMasksUsed) {
   196ee:	7cda      	ldrb	r2, [r3, #19]
   196f0:	b312      	cbz	r2, 19738 <ST7735_t3::drawGFXFontChar(unsigned int)+0x790>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   196f2:	07d6      	lsls	r6, r2, #31
   196f4:	d504      	bpl.n	19700 <ST7735_t3::drawGFXFontChar(unsigned int)+0x758>
   196f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
   196f8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   196fc:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   19700:	0795      	lsls	r5, r2, #30
   19702:	d504      	bpl.n	1970e <ST7735_t3::drawGFXFontChar(unsigned int)+0x766>
   19704:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   19706:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1970a:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   1970e:	0754      	lsls	r4, r2, #29
   19710:	d504      	bpl.n	1971c <ST7735_t3::drawGFXFontChar(unsigned int)+0x774>
   19712:	6b18      	ldr	r0, [r3, #48]	; 0x30
   19714:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   19718:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   1971c:	0710      	lsls	r0, r2, #28
   1971e:	d504      	bpl.n	1972a <ST7735_t3::drawGFXFontChar(unsigned int)+0x782>
   19720:	6b58      	ldr	r0, [r3, #52]	; 0x34
   19722:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   19726:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   1972a:	06d1      	lsls	r1, r2, #27
   1972c:	d504      	bpl.n	19738 <ST7735_t3::drawGFXFontChar(unsigned int)+0x790>
   1972e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19730:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   19734:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		_gfx_last_char_x_write = x_end;
   19738:	9b10      	ldr	r3, [sp, #64]	; 0x40
		_gfx_last_char_textcolor = textcolor;
   1973a:	f8bb 1034 	ldrh.w	r1, [fp, #52]	; 0x34
		_gfx_last_cursor_x = cursor_x + _originx; 
   1973e:	f8bb 2018 	ldrh.w	r2, [fp, #24]
		_gfx_last_char_x_write = x_end;
   19742:	f8ab 3070 	strh.w	r3, [fp, #112]	; 0x70
		_gfx_last_cursor_x = cursor_x + _originx; 
   19746:	f8bb 300a 	ldrh.w	r3, [fp, #10]
		_gfx_last_char_textcolor = textcolor;
   1974a:	f8ab 1072 	strh.w	r1, [fp, #114]	; 0x72
		_gfx_last_cursor_x = cursor_x + _originx; 
   1974e:	441a      	add	r2, r3
		_gfx_c_last = c;
   19750:	9912      	ldr	r1, [sp, #72]	; 0x48
		_gfx_last_cursor_x = cursor_x + _originx; 
   19752:	f8ab 206c 	strh.w	r2, [fp, #108]	; 0x6c
		_gfx_c_last = c;
   19756:	f8cb 1068 	str.w	r1, [fp, #104]	; 0x68
		_gfx_last_cursor_y = cursor_y + _originy;
   1975a:	f8bb 200c 	ldrh.w	r2, [fp, #12]
   1975e:	f8bb 101a 	ldrh.w	r1, [fp, #26]
   19762:	440a      	add	r2, r1
		_gfx_last_char_textbgcolor = textbgcolor;
   19764:	f8bb 1036 	ldrh.w	r1, [fp, #54]	; 0x36
		_gfx_last_cursor_y = cursor_y + _originy;
   19768:	f8ab 206e 	strh.w	r2, [fp, #110]	; 0x6e
		_gfx_last_char_textbgcolor = textbgcolor;
   1976c:	f8ab 1074 	strh.w	r1, [fp, #116]	; 0x74
   19770:	e5bc      	b.n	192ec <ST7735_t3::drawGFXFontChar(unsigned int)+0x344>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   19772:	f89b 3009 	ldrb.w	r3, [fp, #9]
   19776:	2b00      	cmp	r3, #0
   19778:	f040 81a0 	bne.w	19abc <ST7735_t3::drawGFXFontChar(unsigned int)+0xb14>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   1977c:	f8db 30c0 	ldr.w	r3, [fp, #192]	; 0xc0
   19780:	2b00      	cmp	r3, #0
   19782:	f000 8195 	beq.w	19ab0 <ST7735_t3::drawGFXFontChar(unsigned int)+0xb08>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   19786:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
   1978a:	b11a      	cbz	r2, 19794 <ST7735_t3::drawGFXFontChar(unsigned int)+0x7ec>
   1978c:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
    *(base+34) = mask;
   19790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
			setAddr((x_start >= _displayclipx1) ? x_start : _displayclipx1, 
   19794:	9b11      	ldr	r3, [sp, #68]	; 0x44
        writecommand(ST7735_CASET); // Column addr set
   19796:	4658      	mov	r0, fp
   19798:	212a      	movs	r1, #42	; 0x2a
   1979a:	4553      	cmp	r3, sl
   1979c:	bfac      	ite	ge
   1979e:	f8bd a044 	ldrhge.w	sl, [sp, #68]	; 0x44
   197a2:	fa1f fa8a 	uxthlt.w	sl, sl
   197a6:	45b9      	cmp	r9, r7
   197a8:	bfb4      	ite	lt
   197aa:	b2bf      	uxthlt	r7, r7
   197ac:	9f02      	ldrge	r7, [sp, #8]
   197ae:	f7fb fc7b 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(x0+_xstart);   // XSTART 
   197b2:	f8bb 307a 	ldrh.w	r3, [fp, #122]	; 0x7a
   197b6:	eb0a 0103 	add.w	r1, sl, r3
   197ba:	b289      	uxth	r1, r1
   197bc:	f7fb ffca 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(x1+_xstart);   // XEND
   197c0:	f8bb 107a 	ldrh.w	r1, [fp, #122]	; 0x7a
   197c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
   197c6:	3901      	subs	r1, #1
   197c8:	4421      	add	r1, r4
   197ca:	b289      	uxth	r1, r1
   197cc:	f7fb ffc2 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writecommand(ST7735_RASET); // Row addr set
   197d0:	212b      	movs	r1, #43	; 0x2b
   197d2:	f7fb fc69 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
        writedata16(y0+_ystart);   // YSTART
   197d6:	f8bb 307c 	ldrh.w	r3, [fp, #124]	; 0x7c
   197da:	18f9      	adds	r1, r7, r3
   197dc:	b289      	uxth	r1, r1
   197de:	f7fb ffb9 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
        writedata16(y1+_ystart);   // YEND
   197e2:	f8bb 107c 	ldrh.w	r1, [fp, #124]	; 0x7c
   197e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   197e8:	3901      	subs	r1, #1
   197ea:	4419      	add	r1, r3
   197ec:	b289      	uxth	r1, r1
   197ee:	f7fb ffb1 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
			writecommand(ST7735_RAMWR);
   197f2:	212c      	movs	r1, #44	; 0x2c
   197f4:	f7fb fc58 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
			while (y_top_fill--) {
   197f8:	1e73      	subs	r3, r6, #1
   197fa:	b2db      	uxtb	r3, r3
   197fc:	f1b8 0f00 	cmp.w	r8, #0
   19800:	d03b      	beq.n	1987a <ST7735_t3::drawGFXFontChar(unsigned int)+0x8d2>
   19802:	9a02      	ldr	r2, [sp, #8]
   19804:	b29e      	uxth	r6, r3
   19806:	4627      	mov	r7, r4
   19808:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
   1980c:	3201      	adds	r2, #1
   1980e:	441a      	add	r2, r3
   19810:	b215      	sxth	r5, r2
   19812:	e005      	b.n	19820 <ST7735_t3::drawGFXFontChar(unsigned int)+0x878>
				y++;
   19814:	f109 0901 	add.w	r9, r9, #1
   19818:	fa0f f989 	sxth.w	r9, r9
			while (y_top_fill--) {
   1981c:	45a9      	cmp	r9, r5
   1981e:	d027      	beq.n	19870 <ST7735_t3::drawGFXFontChar(unsigned int)+0x8c8>
				if ( (y >= _displayclipy1) && (y < _displayclipy2)) {
   19820:	f9bb 301e 	ldrsh.w	r3, [fp, #30]
   19824:	454b      	cmp	r3, r9
   19826:	dcf5      	bgt.n	19814 <ST7735_t3::drawGFXFontChar(unsigned int)+0x86c>
   19828:	f9bb 3022 	ldrsh.w	r3, [fp, #34]	; 0x22
   1982c:	454b      	cmp	r3, r9
   1982e:	ddf1      	ble.n	19814 <ST7735_t3::drawGFXFontChar(unsigned int)+0x86c>
					for (int16_t xx = x_start; xx < x_end; xx++) {
   19830:	4547      	cmp	r7, r8
   19832:	ddef      	ble.n	19814 <ST7735_t3::drawGFXFontChar(unsigned int)+0x86c>
   19834:	4644      	mov	r4, r8
   19836:	e008      	b.n	1984a <ST7735_t3::drawGFXFontChar(unsigned int)+0x8a2>
							writedata16(gfxFontLastCharPosFG(xx,y)? _gfx_last_char_textcolor : (xx < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   19838:	f8bb 1072 	ldrh.w	r1, [fp, #114]	; 0x72
   1983c:	4658      	mov	r0, fp
   1983e:	f7fb ff89 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
					for (int16_t xx = x_start; xx < x_end; xx++) {
   19842:	3401      	adds	r4, #1
   19844:	b224      	sxth	r4, r4
   19846:	42a7      	cmp	r7, r4
   19848:	d0e4      	beq.n	19814 <ST7735_t3::drawGFXFontChar(unsigned int)+0x86c>
						if (xx >= _displayclipx1) {
   1984a:	f9bb 301c 	ldrsh.w	r3, [fp, #28]
							writedata16(gfxFontLastCharPosFG(xx,y)? _gfx_last_char_textcolor : (xx < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   1984e:	4621      	mov	r1, r4
   19850:	464a      	mov	r2, r9
						if (xx >= _displayclipx1) {
   19852:	42a3      	cmp	r3, r4
   19854:	dcf5      	bgt.n	19842 <ST7735_t3::drawGFXFontChar(unsigned int)+0x89a>
							writedata16(gfxFontLastCharPosFG(xx,y)? _gfx_last_char_textcolor : (xx < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   19856:	4658      	mov	r0, fp
   19858:	f7ff fb54 	bl	18f04 <ST7735_t3::gfxFontLastCharPosFG(short, short)>
   1985c:	2800      	cmp	r0, #0
   1985e:	d1eb      	bne.n	19838 <ST7735_t3::drawGFXFontChar(unsigned int)+0x890>
   19860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19862:	42a3      	cmp	r3, r4
   19864:	bfcc      	ite	gt
   19866:	f8bb 1074 	ldrhgt.w	r1, [fp, #116]	; 0x74
   1986a:	f8bb 1036 	ldrhle.w	r1, [fp, #54]	; 0x36
   1986e:	e7e5      	b.n	1983c <ST7735_t3::drawGFXFontChar(unsigned int)+0x894>
   19870:	9b02      	ldr	r3, [sp, #8]
   19872:	4433      	add	r3, r6
   19874:	3301      	adds	r3, #1
   19876:	fa0f f983 	sxth.w	r9, r3
			for(yy=0; (yy<h) && (y < _displayclipy2); yy++) {
   1987a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1987c:	2b00      	cmp	r3, #0
   1987e:	f000 80dd 	beq.w	19a3c <ST7735_t3::drawGFXFontChar(unsigned int)+0xa94>
   19882:	9a11      	ldr	r2, [sp, #68]	; 0x44
    uint8_t  xx, yy, bits = 0, bit = 0;
   19884:	2300      	movs	r3, #0
   19886:	9907      	ldr	r1, [sp, #28]
   19888:	9304      	str	r3, [sp, #16]
   1988a:	428a      	cmp	r2, r1
   1988c:	9305      	str	r3, [sp, #20]
			for(yy=0; (yy<h) && (y < _displayclipy2); yy++) {
   1988e:	930d      	str	r3, [sp, #52]	; 0x34
   19890:	bfb8      	it	lt
   19892:	460a      	movlt	r2, r1
   19894:	920c      	str	r2, [sp, #48]	; 0x30
   19896:	f9bb 2022 	ldrsh.w	r2, [fp, #34]	; 0x22
   1989a:	454a      	cmp	r2, r9
   1989c:	f340 80ce 	ble.w	19a3c <ST7735_t3::drawGFXFontChar(unsigned int)+0xa94>
				for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2); yts++) {
   198a0:	f89b 1045 	ldrb.w	r1, [fp, #69]	; 0x45
   198a4:	2900      	cmp	r1, #0
   198a6:	f000 80c1 	beq.w	19a2c <ST7735_t3::drawGFXFontChar(unsigned int)+0xa84>
   198aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   198ac:	f04f 0a00 	mov.w	sl, #0
   198b0:	9a04      	ldr	r2, [sp, #16]
   198b2:	189a      	adds	r2, r3, r2
   198b4:	b2d3      	uxtb	r3, r2
   198b6:	9302      	str	r3, [sp, #8]
   198b8:	e014      	b.n	198e4 <ST7735_t3::drawGFXFontChar(unsigned int)+0x93c>
   198ba:	9b04      	ldr	r3, [sp, #16]
   198bc:	9e05      	ldr	r6, [sp, #20]
   198be:	9306      	str	r3, [sp, #24]
   198c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   198c2:	4698      	mov	r8, r3
   198c4:	f10a 0a01 	add.w	sl, sl, #1
   198c8:	f109 0901 	add.w	r9, r9, #1
   198cc:	fa5f fa8a 	uxtb.w	sl, sl
   198d0:	fa0f f989 	sxth.w	r9, r9
   198d4:	4551      	cmp	r1, sl
   198d6:	f240 80a4 	bls.w	19a22 <ST7735_t3::drawGFXFontChar(unsigned int)+0xa7a>
   198da:	f9bb 2022 	ldrsh.w	r2, [fp, #34]	; 0x22
   198de:	454a      	cmp	r2, r9
   198e0:	f340 809f 	ble.w	19a22 <ST7735_t3::drawGFXFontChar(unsigned int)+0xa7a>
					if (y >= _displayclipy1) {
   198e4:	f9bb 201e 	ldrsh.w	r2, [fp, #30]
   198e8:	454a      	cmp	r2, r9
   198ea:	dce6      	bgt.n	198ba <ST7735_t3::drawGFXFontChar(unsigned int)+0x912>
						while (x < x_left_fill) {
   198ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   198ee:	9d07      	ldr	r5, [sp, #28]
   198f0:	42ab      	cmp	r3, r5
   198f2:	da1c      	bge.n	1992e <ST7735_t3::drawGFXFontChar(unsigned int)+0x986>
   198f4:	461c      	mov	r4, r3
   198f6:	e008      	b.n	1990a <ST7735_t3::drawGFXFontChar(unsigned int)+0x962>
								writedata16(gfxFontLastCharPosFG(x,y)? _gfx_last_char_textcolor :  textbgcolor);
   198f8:	f8bb 1072 	ldrh.w	r1, [fp, #114]	; 0x72
   198fc:	4658      	mov	r0, fp
   198fe:	f7fb ff29 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
							x++;
   19902:	3401      	adds	r4, #1
   19904:	b224      	sxth	r4, r4
						while (x < x_left_fill) {
   19906:	42a5      	cmp	r5, r4
   19908:	d011      	beq.n	1992e <ST7735_t3::drawGFXFontChar(unsigned int)+0x986>
							if ( (x >= _displayclipx1) && (x < _displayclipx2) ) {
   1990a:	f9bb 301c 	ldrsh.w	r3, [fp, #28]
   1990e:	42a3      	cmp	r3, r4
   19910:	dcf7      	bgt.n	19902 <ST7735_t3::drawGFXFontChar(unsigned int)+0x95a>
   19912:	f9bb 3020 	ldrsh.w	r3, [fp, #32]
								writedata16(gfxFontLastCharPosFG(x,y)? _gfx_last_char_textcolor :  textbgcolor);
   19916:	4621      	mov	r1, r4
   19918:	464a      	mov	r2, r9
							if ( (x >= _displayclipx1) && (x < _displayclipx2) ) {
   1991a:	42a3      	cmp	r3, r4
   1991c:	ddf1      	ble.n	19902 <ST7735_t3::drawGFXFontChar(unsigned int)+0x95a>
								writedata16(gfxFontLastCharPosFG(x,y)? _gfx_last_char_textcolor :  textbgcolor);
   1991e:	4658      	mov	r0, fp
   19920:	f7ff faf0 	bl	18f04 <ST7735_t3::gfxFontLastCharPosFG(short, short)>
   19924:	2800      	cmp	r0, #0
   19926:	d1e7      	bne.n	198f8 <ST7735_t3::drawGFXFontChar(unsigned int)+0x950>
   19928:	f8bb 1036 	ldrh.w	r1, [fp, #54]	; 0x36
   1992c:	e7e6      	b.n	198fc <ST7735_t3::drawGFXFontChar(unsigned int)+0x954>
				        for(xx=0; xx<w; xx++) {
   1992e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19930:	2b00      	cmp	r3, #0
   19932:	f000 80b6 	beq.w	19aa2 <ST7735_t3::drawGFXFontChar(unsigned int)+0xafa>
   19936:	9b02      	ldr	r3, [sp, #8]
   19938:	f8cd a020 	str.w	sl, [sp, #32]
   1993c:	9306      	str	r3, [sp, #24]
   1993e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19940:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19942:	f89b 1044 	ldrb.w	r1, [fp, #68]	; 0x44
   19946:	469a      	mov	sl, r3
   19948:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
				            if(!(bit++ & 7)) {
   1994c:	463a      	mov	r2, r7
   1994e:	3701      	adds	r7, #1
   19950:	0753      	lsls	r3, r2, #29
   19952:	b2ff      	uxtb	r7, r7
   19954:	d106      	bne.n	19964 <ST7735_t3::drawGFXFontChar(unsigned int)+0x9bc>
				                bits = bitmap[bo++];
   19956:	f10a 0201 	add.w	r2, sl, #1
   1995a:	9b03      	ldr	r3, [sp, #12]
   1995c:	f813 600a 	ldrb.w	r6, [r3, sl]
   19960:	fa1f fa82 	uxth.w	sl, r2
				            for (uint8_t xts = 0; xts < textsize_x; xts++) {
   19964:	b309      	cbz	r1, 199aa <ST7735_t3::drawGFXFontChar(unsigned int)+0xa02>
   19966:	2500      	movs	r5, #0
				            		if (bits & 0x80)
   19968:	fa4f f886 	sxtb.w	r8, r6
								if ( (x >= _displayclipx1) && (x < _displayclipx2)) {
   1996c:	f9bb 301c 	ldrsh.w	r3, [fp, #28]
   19970:	42a3      	cmp	r3, r4
   19972:	dc14      	bgt.n	1999e <ST7735_t3::drawGFXFontChar(unsigned int)+0x9f6>
   19974:	f9bb 3020 	ldrsh.w	r3, [fp, #32]
   19978:	42a3      	cmp	r3, r4
   1997a:	dd10      	ble.n	1999e <ST7735_t3::drawGFXFontChar(unsigned int)+0x9f6>
				            		if (bits & 0x80)
   1997c:	f1b8 0f00 	cmp.w	r8, #0
   19980:	db44      	blt.n	19a0c <ST7735_t3::drawGFXFontChar(unsigned int)+0xa64>
										writedata16(gfxFontLastCharPosFG(x,y)? _gfx_last_char_textcolor : (x < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   19982:	464a      	mov	r2, r9
   19984:	4621      	mov	r1, r4
   19986:	4658      	mov	r0, fp
   19988:	f7ff fabc 	bl	18f04 <ST7735_t3::gfxFontLastCharPosFG(short, short)>
   1998c:	2800      	cmp	r0, #0
   1998e:	d035      	beq.n	199fc <ST7735_t3::drawGFXFontChar(unsigned int)+0xa54>
   19990:	f8bb 1072 	ldrh.w	r1, [fp, #114]	; 0x72
   19994:	4658      	mov	r0, fp
   19996:	f7fb fedd 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
   1999a:	f89b 1044 	ldrb.w	r1, [fp, #68]	; 0x44
				            for (uint8_t xts = 0; xts < textsize_x; xts++) {
   1999e:	3501      	adds	r5, #1
   199a0:	3401      	adds	r4, #1
   199a2:	b2ed      	uxtb	r5, r5
   199a4:	b224      	sxth	r4, r4
   199a6:	42a9      	cmp	r1, r5
   199a8:	d8e0      	bhi.n	1996c <ST7735_t3::drawGFXFontChar(unsigned int)+0x9c4>
				        for(xx=0; xx<w; xx++) {
   199aa:	9b02      	ldr	r3, [sp, #8]
				            bits <<= 1;
   199ac:	0076      	lsls	r6, r6, #1
				        for(xx=0; xx<w; xx++) {
   199ae:	429f      	cmp	r7, r3
				            bits <<= 1;
   199b0:	b2f6      	uxtb	r6, r6
				        for(xx=0; xx<w; xx++) {
   199b2:	d1cb      	bne.n	1994c <ST7735_t3::drawGFXFontChar(unsigned int)+0x9a4>
   199b4:	46d0      	mov	r8, sl
   199b6:	f8dd a020 	ldr.w	sl, [sp, #32]
				        while (x < x_end) {
   199ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   199bc:	42a3      	cmp	r3, r4
   199be:	dd2d      	ble.n	19a1c <ST7735_t3::drawGFXFontChar(unsigned int)+0xa74>
   199c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   199c2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   199c4:	e008      	b.n	199d8 <ST7735_t3::drawGFXFontChar(unsigned int)+0xa30>
								writedata16(gfxFontLastCharPosFG(x,y)? _gfx_last_char_textcolor : (x < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   199c6:	f8bb 1072 	ldrh.w	r1, [fp, #114]	; 0x72
   199ca:	4658      	mov	r0, fp
   199cc:	f7fb fec2 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
				        	x++;
   199d0:	3401      	adds	r4, #1
   199d2:	b224      	sxth	r4, r4
				        while (x < x_end) {
   199d4:	42a5      	cmp	r5, r4
   199d6:	d021      	beq.n	19a1c <ST7735_t3::drawGFXFontChar(unsigned int)+0xa74>
							if (x >= _displayclipx1) {
   199d8:	f9bb 301c 	ldrsh.w	r3, [fp, #28]
								writedata16(gfxFontLastCharPosFG(x,y)? _gfx_last_char_textcolor : (x < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   199dc:	4621      	mov	r1, r4
   199de:	464a      	mov	r2, r9
   199e0:	4658      	mov	r0, fp
							if (x >= _displayclipx1) {
   199e2:	42a3      	cmp	r3, r4
   199e4:	dcf4      	bgt.n	199d0 <ST7735_t3::drawGFXFontChar(unsigned int)+0xa28>
								writedata16(gfxFontLastCharPosFG(x,y)? _gfx_last_char_textcolor : (x < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   199e6:	f7ff fa8d 	bl	18f04 <ST7735_t3::gfxFontLastCharPosFG(short, short)>
   199ea:	2800      	cmp	r0, #0
   199ec:	d1eb      	bne.n	199c6 <ST7735_t3::drawGFXFontChar(unsigned int)+0xa1e>
   199ee:	42a7      	cmp	r7, r4
   199f0:	bfcc      	ite	gt
   199f2:	f8bb 1074 	ldrhgt.w	r1, [fp, #116]	; 0x74
   199f6:	f8bb 1036 	ldrhle.w	r1, [fp, #54]	; 0x36
   199fa:	e7e6      	b.n	199ca <ST7735_t3::drawGFXFontChar(unsigned int)+0xa22>
										writedata16(gfxFontLastCharPosFG(x,y)? _gfx_last_char_textcolor : (x < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   199fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   199fe:	42a3      	cmp	r3, r4
   19a00:	bfcc      	ite	gt
   19a02:	f8bb 1074 	ldrhgt.w	r1, [fp, #116]	; 0x74
   19a06:	f8bb 1036 	ldrhle.w	r1, [fp, #54]	; 0x36
   19a0a:	e7c3      	b.n	19994 <ST7735_t3::drawGFXFontChar(unsigned int)+0x9ec>
										writedata16(textcolor);
   19a0c:	f8bb 1034 	ldrh.w	r1, [fp, #52]	; 0x34
   19a10:	4658      	mov	r0, fp
   19a12:	f7fb fe9f 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
   19a16:	f89b 1044 	ldrb.w	r1, [fp, #68]	; 0x44
   19a1a:	e7c0      	b.n	1999e <ST7735_t3::drawGFXFontChar(unsigned int)+0x9f6>
   19a1c:	f89b 1045 	ldrb.w	r1, [fp, #69]	; 0x45
   19a20:	e750      	b.n	198c4 <ST7735_t3::drawGFXFontChar(unsigned int)+0x91c>
   19a22:	9b06      	ldr	r3, [sp, #24]
   19a24:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   19a28:	e9cd 3604 	strd	r3, r6, [sp, #16]
			for(yy=0; (yy<h) && (y < _displayclipy2); yy++) {
   19a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19a2e:	3301      	adds	r3, #1
   19a30:	b2da      	uxtb	r2, r3
   19a32:	930d      	str	r3, [sp, #52]	; 0x34
   19a34:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19a36:	4293      	cmp	r3, r2
   19a38:	f63f af2d 	bhi.w	19896 <ST7735_t3::drawGFXFontChar(unsigned int)+0x8ee>
			while (y < y_end) {
   19a3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   19a3e:	4599      	cmp	r9, r3
   19a40:	f6bf ae45 	bge.w	196ce <ST7735_t3::drawGFXFontChar(unsigned int)+0x726>
   19a44:	9d10      	ldr	r5, [sp, #64]	; 0x40
   19a46:	9e1c      	ldr	r6, [sp, #112]	; 0x70
   19a48:	9f11      	ldr	r7, [sp, #68]	; 0x44
   19a4a:	e006      	b.n	19a5a <ST7735_t3::drawGFXFontChar(unsigned int)+0xab2>
				y++;
   19a4c:	f109 0901 	add.w	r9, r9, #1
   19a50:	fa0f f989 	sxth.w	r9, r9
			while (y < y_end) {
   19a54:	454e      	cmp	r6, r9
   19a56:	f43f ae3a 	beq.w	196ce <ST7735_t3::drawGFXFontChar(unsigned int)+0x726>
				if (y >= _displayclipy1) {
   19a5a:	f9bb 301e 	ldrsh.w	r3, [fp, #30]
   19a5e:	454b      	cmp	r3, r9
   19a60:	dcf4      	bgt.n	19a4c <ST7735_t3::drawGFXFontChar(unsigned int)+0xaa4>
					for (int16_t xx = x_start; xx < x_end; xx++) {
   19a62:	42bd      	cmp	r5, r7
   19a64:	ddf2      	ble.n	19a4c <ST7735_t3::drawGFXFontChar(unsigned int)+0xaa4>
   19a66:	463c      	mov	r4, r7
   19a68:	e008      	b.n	19a7c <ST7735_t3::drawGFXFontChar(unsigned int)+0xad4>
							writedata16(gfxFontLastCharPosFG(xx,y)? _gfx_last_char_textcolor : (xx < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   19a6a:	f8bb 1072 	ldrh.w	r1, [fp, #114]	; 0x72
   19a6e:	4658      	mov	r0, fp
   19a70:	f7fb fe70 	bl	15754 <ST7735_t3::writedata16(unsigned short)>
					for (int16_t xx = x_start; xx < x_end; xx++) {
   19a74:	3401      	adds	r4, #1
   19a76:	b224      	sxth	r4, r4
   19a78:	42a5      	cmp	r5, r4
   19a7a:	d0e7      	beq.n	19a4c <ST7735_t3::drawGFXFontChar(unsigned int)+0xaa4>
						if (xx >= _displayclipx1 ) {
   19a7c:	f9bb 301c 	ldrsh.w	r3, [fp, #28]
							writedata16(gfxFontLastCharPosFG(xx,y)? _gfx_last_char_textcolor : (xx < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   19a80:	4621      	mov	r1, r4
   19a82:	464a      	mov	r2, r9
						if (xx >= _displayclipx1 ) {
   19a84:	42a3      	cmp	r3, r4
   19a86:	dcf5      	bgt.n	19a74 <ST7735_t3::drawGFXFontChar(unsigned int)+0xacc>
							writedata16(gfxFontLastCharPosFG(xx,y)? _gfx_last_char_textcolor : (xx < x_offset_cursor)? _gfx_last_char_textbgcolor : textbgcolor);
   19a88:	4658      	mov	r0, fp
   19a8a:	f7ff fa3b 	bl	18f04 <ST7735_t3::gfxFontLastCharPosFG(short, short)>
   19a8e:	2800      	cmp	r0, #0
   19a90:	d1eb      	bne.n	19a6a <ST7735_t3::drawGFXFontChar(unsigned int)+0xac2>
   19a92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19a94:	42a3      	cmp	r3, r4
   19a96:	bfcc      	ite	gt
   19a98:	f8bb 1074 	ldrhgt.w	r1, [fp, #116]	; 0x74
   19a9c:	f8bb 1036 	ldrhle.w	r1, [fp, #54]	; 0x36
   19aa0:	e7e5      	b.n	19a6e <ST7735_t3::drawGFXFontChar(unsigned int)+0xac6>
				        for(xx=0; xx<w; xx++) {
   19aa2:	9b04      	ldr	r3, [sp, #16]
   19aa4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19aa6:	9306      	str	r3, [sp, #24]
   19aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19aaa:	9e05      	ldr	r6, [sp, #20]
   19aac:	4698      	mov	r8, r3
   19aae:	e784      	b.n	199ba <ST7735_t3::drawGFXFontChar(unsigned int)+0xa12>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   19ab0:	f8db 3094 	ldr.w	r3, [fp, #148]	; 0x94
   19ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   19ab6:	f8cb 30a0 	str.w	r3, [fp, #160]	; 0xa0
   19aba:	e664      	b.n	19786 <ST7735_t3::drawGFXFontChar(unsigned int)+0x7de>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   19abc:	f10b 0384 	add.w	r3, fp, #132	; 0x84
   19ac0:	f8db 008c 	ldr.w	r0, [fp, #140]	; 0x8c
   19ac4:	e893 0006 	ldmia.w	r3, {r1, r2}
   19ac8:	f7f1 fc10 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
			setAddr((x_start >= _displayclipx1) ? x_start : _displayclipx1, 
   19acc:	f9bb a01c 	ldrsh.w	sl, [fp, #28]
					(y_start >= _displayclipy1) ? y_start : _displayclipy1, 
   19ad0:	f9bb 701e 	ldrsh.w	r7, [fp, #30]
   19ad4:	e652      	b.n	1977c <ST7735_t3::drawGFXFontChar(unsigned int)+0x7d4>
   19ad6:	bf00      	nop

00019ad8 <ST7735_t3::write(unsigned char const*, unsigned int)>:
	if (_center_x_text || _center_y_text ) {
   19ad8:	7b83      	ldrb	r3, [r0, #14]
{
   19ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ade:	4604      	mov	r4, r0
   19ae0:	b08a      	sub	sp, #40	; 0x28
   19ae2:	460d      	mov	r5, r1
   19ae4:	4617      	mov	r7, r2
	if (_center_x_text || _center_y_text ) {
   19ae6:	2b00      	cmp	r3, #0
   19ae8:	f040 80bb 	bne.w	19c62 <ST7735_t3::write(unsigned char const*, unsigned int)+0x18a>
   19aec:	7bc2      	ldrb	r2, [r0, #15]
   19aee:	2a00      	cmp	r2, #0
   19af0:	d156      	bne.n	19ba0 <ST7735_t3::write(unsigned char const*, unsigned int)+0xc8>
	while (cb) {
   19af2:	b1ef      	cbz	r7, 19b30 <ST7735_t3::write(unsigned char const*, unsigned int)+0x58>
   19af4:	19ee      	adds	r6, r5, r7
					cursor_x = 0;
   19af6:	f04f 0800 	mov.w	r8, #0
   19afa:	e00d      	b.n	19b18 <ST7735_t3::write(unsigned char const*, unsigned int)+0x40>
				cursor_y += font->line_space;
   19afc:	7e0b      	ldrb	r3, [r1, #24]
   19afe:	89a1      	ldrh	r1, [r4, #12]
				if(scrollEnable && isWritingScrollArea){
   19b00:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
				cursor_y += font->line_space;
   19b04:	440b      	add	r3, r1
   19b06:	81a3      	strh	r3, [r4, #12]
				if(scrollEnable && isWritingScrollArea){
   19b08:	b32a      	cbz	r2, 19b56 <ST7735_t3::write(unsigned char const*, unsigned int)+0x7e>
				if(scrollEnable && isWritingScrollArea){
   19b0a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   19b0e:	b313      	cbz	r3, 19b56 <ST7735_t3::write(unsigned char const*, unsigned int)+0x7e>
					cursor_x  = scroll_x;
   19b10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   19b12:	8163      	strh	r3, [r4, #10]
	while (cb) {
   19b14:	42b5      	cmp	r5, r6
   19b16:	d00b      	beq.n	19b30 <ST7735_t3::write(unsigned char const*, unsigned int)+0x58>
		if (font) {
   19b18:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
		uint8_t c = *buffer++;
   19b1a:	f815 3b01 	ldrb.w	r3, [r5], #1
		if (font) {
   19b1e:	b159      	cbz	r1, 19b38 <ST7735_t3::write(unsigned char const*, unsigned int)+0x60>
			if (c == '\n') {
   19b20:	2b0a      	cmp	r3, #10
   19b22:	d0eb      	beq.n	19afc <ST7735_t3::write(unsigned char const*, unsigned int)+0x24>
				drawFontChar(c);
   19b24:	4619      	mov	r1, r3
   19b26:	4620      	mov	r0, r4
   19b28:	f7fe fbc4 	bl	182b4 <ST7735_t3::drawFontChar(unsigned int)>
	while (cb) {
   19b2c:	42b5      	cmp	r5, r6
   19b2e:	d1f3      	bne.n	19b18 <ST7735_t3::write(unsigned char const*, unsigned int)+0x40>
}
   19b30:	4638      	mov	r0, r7
   19b32:	b00a      	add	sp, #40	; 0x28
   19b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (gfxFont)  {
   19b38:	6e22      	ldr	r2, [r4, #96]	; 0x60
   19b3a:	b1a2      	cbz	r2, 19b66 <ST7735_t3::write(unsigned char const*, unsigned int)+0x8e>
			if (c == '\n') {
   19b3c:	2b0a      	cmp	r3, #10
   19b3e:	d10d      	bne.n	19b5c <ST7735_t3::write(unsigned char const*, unsigned int)+0x84>
	            cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
   19b40:	7a92      	ldrb	r2, [r2, #10]
   19b42:	89a3      	ldrh	r3, [r4, #12]
   19b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   19b48:	fb01 3302 	mla	r3, r1, r2, r3
   19b4c:	81a3      	strh	r3, [r4, #12]
				if(scrollEnable && isWritingScrollArea){
   19b4e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   19b52:	2b00      	cmp	r3, #0
   19b54:	d1d9      	bne.n	19b0a <ST7735_t3::write(unsigned char const*, unsigned int)+0x32>
					cursor_x  = 0;
   19b56:	f8a4 800a 	strh.w	r8, [r4, #10]
   19b5a:	e7db      	b.n	19b14 <ST7735_t3::write(unsigned char const*, unsigned int)+0x3c>
				drawGFXFontChar(c);
   19b5c:	4619      	mov	r1, r3
   19b5e:	4620      	mov	r0, r4
   19b60:	f7ff fa22 	bl	18fa8 <ST7735_t3::drawGFXFontChar(unsigned int)>
   19b64:	e7d6      	b.n	19b14 <ST7735_t3::write(unsigned char const*, unsigned int)+0x3c>
			if (c == '\n') {
   19b66:	2b0a      	cmp	r3, #10
   19b68:	d035      	beq.n	19bd6 <ST7735_t3::write(unsigned char const*, unsigned int)+0xfe>
			} else if (c == '\r') {
   19b6a:	2b0d      	cmp	r3, #13
   19b6c:	d0d2      	beq.n	19b14 <ST7735_t3::write(unsigned char const*, unsigned int)+0x3c>
				if(scrollEnable && isWritingScrollArea && (cursor_y > (scroll_y+scroll_height - textsize_y*8))){
   19b6e:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   19b72:	2a00      	cmp	r2, #0
   19b74:	d03c      	beq.n	19bf0 <ST7735_t3::write(unsigned char const*, unsigned int)+0x118>
   19b76:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   19b7a:	2a00      	cmp	r2, #0
   19b7c:	d038      	beq.n	19bf0 <ST7735_t3::write(unsigned char const*, unsigned int)+0x118>
   19b7e:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
   19b82:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   19b86:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   19b8a:	4411      	add	r1, r2
   19b8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   19b90:	eba1 01c0 	sub.w	r1, r1, r0, lsl #3
   19b94:	428a      	cmp	r2, r1
   19b96:	f300 8098 	bgt.w	19cca <ST7735_t3::write(unsigned char const*, unsigned int)+0x1f2>
				drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   19b9a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   19b9e:	e02d      	b.n	19bfc <ST7735_t3::write(unsigned char const*, unsigned int)+0x124>
	  	getTextBounds(buffer, size, 0, 0, &x, &y, &strngWidth, &strngHeight);
   19ba0:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   19ba4:	9300      	str	r3, [sp, #0]
   19ba6:	9204      	str	r2, [sp, #16]
   19ba8:	aa09      	add	r2, sp, #36	; 0x24
   19baa:	9203      	str	r2, [sp, #12]
   19bac:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   19bb0:	9202      	str	r2, [sp, #8]
   19bb2:	aa08      	add	r2, sp, #32
   19bb4:	9201      	str	r2, [sp, #4]
   19bb6:	b2ba      	uxth	r2, r7
   19bb8:	f7fe fa9e 	bl	180f8 <ST7735_t3::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)>
		if (_center_y_text && strngHeight > 0){//Avoid operations for strngWidth = 0
   19bbc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   19bc0:	b133      	cbz	r3, 19bd0 <ST7735_t3::write(unsigned char const*, unsigned int)+0xf8>
		    cursor_y -= (y + strngHeight / 2);
   19bc2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   19bc6:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   19bca:	89a3      	ldrh	r3, [r4, #12]
   19bcc:	1a9b      	subs	r3, r3, r2
   19bce:	81a3      	strh	r3, [r4, #12]
		_center_x_text = false;
   19bd0:	2300      	movs	r3, #0
   19bd2:	81e3      	strh	r3, [r4, #14]
   19bd4:	e78d      	b.n	19af2 <ST7735_t3::write(unsigned char const*, unsigned int)+0x1a>
				cursor_y += textsize_y*8;
   19bd6:	89a3      	ldrh	r3, [r4, #12]
   19bd8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   19bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19be0:	81a3      	strh	r3, [r4, #12]
				if(scrollEnable && isWritingScrollArea){
   19be2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   19be6:	2b00      	cmp	r3, #0
   19be8:	d18f      	bne.n	19b0a <ST7735_t3::write(unsigned char const*, unsigned int)+0x32>
					cursor_x  = 0;
   19bea:	f8a4 800a 	strh.w	r8, [r4, #10]
   19bee:	e791      	b.n	19b14 <ST7735_t3::write(unsigned char const*, unsigned int)+0x3c>
				drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   19bf0:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
				cursor_y += font->line_space;
   19bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
	            cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
   19bf8:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
				drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   19bfc:	9003      	str	r0, [sp, #12]
   19bfe:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   19c02:	9002      	str	r0, [sp, #8]
   19c04:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
   19c06:	9001      	str	r0, [sp, #4]
   19c08:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
   19c0a:	9000      	str	r0, [sp, #0]
   19c0c:	4620      	mov	r0, r4
   19c0e:	f7fd fcd5 	bl	175bc <ST7735_t3::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)>
				cursor_x += textsize_x*6;
   19c12:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   19c16:	8963      	ldrh	r3, [r4, #10]
   19c18:	eb02 0042 	add.w	r0, r2, r2, lsl #1
				if(wrap && scrollEnable && isWritingScrollArea && (cursor_x > (scroll_x+scroll_width - textsize_x*6))){
   19c1c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
				cursor_x += textsize_x*6;
   19c20:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   19c24:	b21b      	sxth	r3, r3
   19c26:	8163      	strh	r3, [r4, #10]
				if(wrap && scrollEnable && isWritingScrollArea && (cursor_x > (scroll_x+scroll_width - textsize_x*6))){
   19c28:	2900      	cmp	r1, #0
   19c2a:	f43f af73 	beq.w	19b14 <ST7735_t3::write(unsigned char const*, unsigned int)+0x3c>
   19c2e:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   19c32:	2900      	cmp	r1, #0
   19c34:	d034      	beq.n	19ca0 <ST7735_t3::write(unsigned char const*, unsigned int)+0x1c8>
   19c36:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
   19c3a:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
   19c3e:	2900      	cmp	r1, #0
   19c40:	d131      	bne.n	19ca6 <ST7735_t3::write(unsigned char const*, unsigned int)+0x1ce>
   19c42:	0052      	lsls	r2, r2, #1
				else if (wrap && (cursor_x > (_width - textsize_x*6))) {
   19c44:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
   19c48:	440a      	add	r2, r1
   19c4a:	429a      	cmp	r2, r3
   19c4c:	f6bf af62 	bge.w	19b14 <ST7735_t3::write(unsigned char const*, unsigned int)+0x3c>
					cursor_y += textsize_y*8;
   19c50:	89a3      	ldrh	r3, [r4, #12]
   19c52:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
					cursor_x = 0;
   19c56:	f8a4 800a 	strh.w	r8, [r4, #10]
					cursor_y += textsize_y*8;
   19c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19c5e:	81a3      	strh	r3, [r4, #12]
					cursor_x = 0;
   19c60:	e758      	b.n	19b14 <ST7735_t3::write(unsigned char const*, unsigned int)+0x3c>
	  	getTextBounds(buffer, size, 0, 0, &x, &y, &strngWidth, &strngHeight);
   19c62:	f10d 0226 	add.w	r2, sp, #38	; 0x26
   19c66:	2300      	movs	r3, #0
   19c68:	9204      	str	r2, [sp, #16]
   19c6a:	aa09      	add	r2, sp, #36	; 0x24
   19c6c:	9300      	str	r3, [sp, #0]
   19c6e:	9203      	str	r2, [sp, #12]
   19c70:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   19c74:	9202      	str	r2, [sp, #8]
   19c76:	aa08      	add	r2, sp, #32
   19c78:	9201      	str	r2, [sp, #4]
   19c7a:	b2ba      	uxth	r2, r7
   19c7c:	f7fe fa3c 	bl	180f8 <ST7735_t3::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)>
		if (_center_x_text && strngWidth > 0){//Avoid operations for strngWidth = 0
   19c80:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   19c84:	b133      	cbz	r3, 19c94 <ST7735_t3::write(unsigned char const*, unsigned int)+0x1bc>
      		cursor_x -= (x + strngWidth / 2);
   19c86:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   19c8a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   19c8e:	8963      	ldrh	r3, [r4, #10]
   19c90:	1a9b      	subs	r3, r3, r2
   19c92:	8163      	strh	r3, [r4, #10]
		if (_center_y_text && strngHeight > 0){//Avoid operations for strngWidth = 0
   19c94:	7be3      	ldrb	r3, [r4, #15]
   19c96:	2b00      	cmp	r3, #0
   19c98:	d190      	bne.n	19bbc <ST7735_t3::write(unsigned char const*, unsigned int)+0xe4>
		_center_x_text = false;
   19c9a:	2300      	movs	r3, #0
   19c9c:	81e3      	strh	r3, [r4, #14]
   19c9e:	e728      	b.n	19af2 <ST7735_t3::write(unsigned char const*, unsigned int)+0x1a>
				if(wrap && scrollEnable && isWritingScrollArea && (cursor_x > (scroll_x+scroll_width - textsize_x*6))){
   19ca0:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
   19ca4:	e7cd      	b.n	19c42 <ST7735_t3::write(unsigned char const*, unsigned int)+0x16a>
   19ca6:	f9b4 002a 	ldrsh.w	r0, [r4, #42]	; 0x2a
   19caa:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
   19cae:	4401      	add	r1, r0
   19cb0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
   19cb4:	0052      	lsls	r2, r2, #1
   19cb6:	428b      	cmp	r3, r1
   19cb8:	ddc4      	ble.n	19c44 <ST7735_t3::write(unsigned char const*, unsigned int)+0x16c>
					cursor_y += textsize_y*8;
   19cba:	89a3      	ldrh	r3, [r4, #12]
   19cbc:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
					cursor_x = scroll_x;
   19cc0:	8160      	strh	r0, [r4, #10]
					cursor_y += textsize_y*8;
   19cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   19cc6:	81a3      	strh	r3, [r4, #12]
					cursor_x = scroll_x;
   19cc8:	e724      	b.n	19b14 <ST7735_t3::write(unsigned char const*, unsigned int)+0x3c>
					scrollTextArea(textsize_y*8);
   19cca:	00c1      	lsls	r1, r0, #3
   19ccc:	4620      	mov	r0, r4
   19cce:	9307      	str	r3, [sp, #28]
   19cd0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
   19cd4:	f7fd fc08 	bl	174e8 <ST7735_t3::scrollTextArea(unsigned char)>
					cursor_y -= textsize_y*8;
   19cd8:	89a2      	ldrh	r2, [r4, #12]
   19cda:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
					cursor_x = scroll_x;
   19cde:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
					cursor_y -= textsize_y*8;
   19ce2:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
					cursor_x = scroll_x;
   19ce6:	9b07      	ldr	r3, [sp, #28]
   19ce8:	8161      	strh	r1, [r4, #10]
					cursor_y -= textsize_y*8;
   19cea:	b212      	sxth	r2, r2
   19cec:	81a2      	strh	r2, [r4, #12]
					cursor_x = scroll_x;
   19cee:	e785      	b.n	19bfc <ST7735_t3::write(unsigned char const*, unsigned int)+0x124>

00019cf0 <_GLOBAL__sub_I__dma_dummy_rx>:
	};
#ifdef DEBUG_ASYNC_LEDS
	digitalWriteFast(DEBUG_PIN_3, LOW);
#endif
	#endif	
}
   19cf0:	b538      	push	{r3, r4, r5, lr}
   19cf2:	4c0d      	ldr	r4, [pc, #52]	; (19d28 <_GLOBAL__sub_I__dma_dummy_rx+0x38>)
   19cf4:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
		TCD = &tcddata;
   19cf8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   19cfc:	f104 0380 	add.w	r3, r4, #128	; 0x80
		begin();
   19d00:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
		TCD = &tcddata;
   19d04:	f844 4c20 	str.w	r4, [r4, #-32]
   19d08:	6222      	str	r2, [r4, #32]
ST7735DMA_Data ST7735_t3::_dma_data[3];   // one structure for each SPI buss... 
   19d0a:	34e0      	adds	r4, #224	; 0xe0
		begin();
   19d0c:	2100      	movs	r1, #0
		TCD = &tcddata;
   19d0e:	f844 3c80 	str.w	r3, [r4, #-128]
		begin();
   19d12:	f000 fd4b 	bl	1a7ac <DMAChannel::begin(bool)>
   19d16:	42ac      	cmp	r4, r5
   19d18:	d1ee      	bne.n	19cf8 <_GLOBAL__sub_I__dma_dummy_rx+0x8>
   19d1a:	4a04      	ldr	r2, [pc, #16]	; (19d2c <_GLOBAL__sub_I__dma_dummy_rx+0x3c>)
   19d1c:	2000      	movs	r0, #0
   19d1e:	4904      	ldr	r1, [pc, #16]	; (19d30 <_GLOBAL__sub_I__dma_dummy_rx+0x40>)
}
   19d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
ST7735DMA_Data ST7735_t3::_dma_data[3];   // one structure for each SPI buss... 
   19d24:	f005 bf30 	b.w	1fb88 <__aeabi_atexit>
   19d28:	2000a340 	.word	0x2000a340
   19d2c:	20009460 	.word	0x20009460
   19d30:	00014e7d 	.word	0x00014e7d

00019d34 <ST7796_t3::setRotation(unsigned char)>:
   19d34:	7a43      	ldrb	r3, [r0, #9]
	setOrigin();
}


void  ST7796_t3::setRotation(uint8_t m) 
{
   19d36:	b570      	push	{r4, r5, r6, lr}
   19d38:	4604      	mov	r4, r0
   19d3a:	460d      	mov	r5, r1
   19d3c:	2b00      	cmp	r3, #0
   19d3e:	f040 8109 	bne.w	19f54 <ST7796_t3::setRotation(unsigned char)+0x220>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   19d42:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19d46:	2b00      	cmp	r3, #0
   19d48:	f000 8111 	beq.w	19f6e <ST7796_t3::setRotation(unsigned char)+0x23a>
    if (_csport)DIRECT_WRITE_LOW(_csport, _cspinmask);
   19d4c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   19d50:	b11b      	cbz	r3, 19d5a <ST7796_t3::setRotation(unsigned char)+0x26>
   19d52:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+34) = mask;
   19d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  beginSPITransaction();
  writecommand(ST7735_MADCTL);
   19d5a:	2136      	movs	r1, #54	; 0x36
   19d5c:	4620      	mov	r0, r4
   19d5e:	f7fb f9a3 	bl	150a8 <ST7735_t3::writecommand(unsigned char)>
  rotation = m % 4; // can't be higher than 3
   19d62:	f005 0303 	and.w	r3, r5, #3
  switch (rotation) {
   19d66:	2b02      	cmp	r3, #2
  rotation = m % 4; // can't be higher than 3
   19d68:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  switch (rotation) {
   19d6c:	f000 8122 	beq.w	19fb4 <ST7796_t3::setRotation(unsigned char)+0x280>
   19d70:	2b03      	cmp	r3, #3
   19d72:	f000 8116 	beq.w	19fa2 <ST7796_t3::setRotation(unsigned char)+0x26e>
   19d76:	2b01      	cmp	r3, #1
   19d78:	f000 80ff 	beq.w	19f7a <ST7796_t3::setRotation(unsigned char)+0x246>
   case 0:
     writedata_last(ST77XX_MADCTL_MX | ST77XX_MADCTL_BGR);
   19d7c:	2148      	movs	r1, #72	; 0x48
   19d7e:	4620      	mov	r0, r4
   19d80:	f7fb fce6 	bl	15750 <ST7735_t3::writedata_last(unsigned char)>

     _xstart = _colstart;
   19d84:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
     _ystart = _rowstart;
   19d88:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
     break;
  case 2:
     writedata_last(ST77XX_MADCTL_MY | ST77XX_MADCTL_BGR); 
     _xstart = _colstart2;
     _ystart = _rowstart2;
     _width = _screenWidth;
   19d8c:	f9b4 c082 	ldrsh.w	ip, [r4, #130]	; 0x82
     _height = _screenHeight;
   19d90:	f9b4 0080 	ldrsh.w	r0, [r4, #128]	; 0x80
     _xstart = _colstart2;
   19d94:	f8a4 207a 	strh.w	r2, [r4, #122]	; 0x7a
     _ystart = _rowstart2;
   19d98:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
     _width = _screenWidth;
   19d9c:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
     _height = _screenHeight;
   19da0:	8520      	strh	r0, [r4, #40]	; 0x28
    if (_csport)DIRECT_WRITE_HIGH(_csport, _cspinmask);
   19da2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
     _height = _screenWidth;
     _width = _screenHeight;
     break;
  }

  _rot = m;  
   19da6:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
   19daa:	b11b      	cbz	r3, 19db4 <ST7796_t3::setRotation(unsigned char)+0x80>
   19dac:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    *(base+33) = mask;
   19db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (hwSPI) _pspi->endTransaction();  
   19db4:	7a63      	ldrb	r3, [r4, #9]
   19db6:	2b00      	cmp	r3, #0
   19db8:	f040 80a1 	bne.w	19efe <ST7796_t3::setRotation(unsigned char)+0x1ca>
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   19dbc:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   19dc0:	2200      	movs	r2, #0
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   19dc2:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
   19dc6:	4563      	cmp	r3, ip
   19dc8:	461d      	mov	r5, r3
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19dca:	4463      	add	r3, ip
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   19dcc:	6122      	str	r2, [r4, #16]
   19dce:	bfa8      	it	ge
   19dd0:	4665      	movge	r5, ip
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19dd2:	180a      	adds	r2, r1, r0
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19dd4:	4563      	cmp	r3, ip
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   19dd6:	f8a4 c014 	strh.w	ip, [r4, #20]
   19dda:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   19dde:	82e0      	strh	r0, [r4, #22]
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19de0:	bfa8      	it	ge
   19de2:	4663      	movge	r3, ip
   19de4:	4281      	cmp	r1, r0
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   19de6:	fa0f fe85 	sxth.w	lr, r5
   19dea:	bfa8      	it	ge
   19dec:	4601      	movge	r1, r0
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19dee:	4282      	cmp	r2, r0
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19df0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   19df4:	f8a4 e01c 	strh.w	lr, [r4, #28]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19df8:	bfa8      	it	ge
   19dfa:	4602      	movge	r2, r0
   19dfc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19e00:	b21b      	sxth	r3, r3
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19e02:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19e06:	8423      	strh	r3, [r4, #32]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19e08:	b212      	sxth	r2, r2
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   19e0a:	4282      	cmp	r2, r0
   19e0c:	bf08      	it	eq
   19e0e:	4563      	cmpeq	r3, ip
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   19e10:	fa0f fc81 	sxth.w	ip, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19e14:	8462      	strh	r2, [r4, #34]	; 0x22
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   19e16:	bf0c      	ite	eq
   19e18:	2001      	moveq	r0, #1
   19e1a:	2000      	movne	r0, #0
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   19e1c:	459e      	cmp	lr, r3
   19e1e:	bf18      	it	ne
   19e20:	4594      	cmpne	ip, r2
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   19e22:	f8a4 c01e 	strh.w	ip, [r4, #30]
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   19e26:	f000 0001 	and.w	r0, r0, #1
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   19e2a:	bf0c      	ite	eq
   19e2c:	2201      	moveq	r2, #1
   19e2e:	2200      	movne	r2, #0
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   19e30:	4329      	orrs	r1, r5
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   19e32:	4d65      	ldr	r5, [pc, #404]	; (19fc8 <ST7796_t3::setRotation(unsigned char)+0x294>)
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   19e34:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   19e38:	bf18      	it	ne
   19e3a:	2000      	movne	r0, #0
   19e3c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
		yield();
   19e40:	f003 fbca 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   19e44:	782b      	ldrb	r3, [r5, #0]
   19e46:	b11b      	cbz	r3, 19e50 <ST7796_t3::setRotation(unsigned char)+0x11c>
   19e48:	4b60      	ldr	r3, [pc, #384]	; (19fcc <ST7796_t3::setRotation(unsigned char)+0x298>)
   19e4a:	781b      	ldrb	r3, [r3, #0]
   19e4c:	07da      	lsls	r2, r3, #31
   19e4e:	d451      	bmi.n	19ef4 <ST7796_t3::setRotation(unsigned char)+0x1c0>
	int16_t width(void) const { return _width; };
   19e50:	f9b4 c026 	ldrsh.w	ip, [r4, #38]	; 0x26
		_originx = x; _originy = y; 
   19e54:	2300      	movs	r3, #0
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   19e56:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
	int16_t height(void) const { return _height; }
   19e5a:	f9b4 e028 	ldrsh.w	lr, [r4, #40]	; 0x28
   19e5e:	4562      	cmp	r2, ip
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   19e60:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
		_originx = x; _originy = y; 
   19e64:	61a3      	str	r3, [r4, #24]
   19e66:	bfa8      	it	ge
   19e68:	4662      	movge	r2, ip
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19e6a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
   19e6e:	4571      	cmp	r1, lr
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19e70:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
   19e74:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   19e78:	bfa8      	it	ge
   19e7a:	4671      	movge	r1, lr
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19e7c:	4563      	cmp	r3, ip
   19e7e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   19e82:	bfa8      	it	ge
   19e84:	4663      	movge	r3, ip
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19e86:	4570      	cmp	r0, lr
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19e88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   19e8c:	ea42 0601 	orr.w	r6, r2, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19e90:	bfa8      	it	ge
   19e92:	4670      	movge	r0, lr
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   19e94:	b212      	sxth	r2, r2
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   19e96:	459c      	cmp	ip, r3
   19e98:	bf08      	it	eq
   19e9a:	2e00      	cmpeq	r6, #0
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   19e9c:	b209      	sxth	r1, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19e9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19ea2:	8423      	strh	r3, [r4, #32]
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   19ea4:	bf0c      	ite	eq
   19ea6:	f04f 0c01 	moveq.w	ip, #1
   19eaa:	f04f 0c00 	movne.w	ip, #0
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   19eae:	8460      	strh	r0, [r4, #34]	; 0x22
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   19eb0:	4586      	cmp	lr, r0
   19eb2:	bf14      	ite	ne
   19eb4:	f04f 0c00 	movne.w	ip, #0
   19eb8:	f00c 0c01 	andeq.w	ip, ip, #1
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   19ebc:	4281      	cmp	r1, r0
   19ebe:	bf18      	it	ne
   19ec0:	429a      	cmpne	r2, r3
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   19ec2:	83e1      	strh	r1, [r4, #30]
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   19ec4:	bf0c      	ite	eq
   19ec6:	2301      	moveq	r3, #1
   19ec8:	2300      	movne	r3, #0
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   19eca:	f884 c025 	strb.w	ip, [r4, #37]	; 0x25
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   19ece:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   19ed2:	83a2      	strh	r2, [r4, #28]
		yield();
   19ed4:	f003 fb80 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   19ed8:	782b      	ldrb	r3, [r5, #0]
   19eda:	b13b      	cbz	r3, 19eec <ST7796_t3::setRotation(unsigned char)+0x1b8>
   19edc:	4b3b      	ldr	r3, [pc, #236]	; (19fcc <ST7796_t3::setRotation(unsigned char)+0x298>)
   19ede:	781b      	ldrb	r3, [r3, #0]
   19ee0:	07db      	lsls	r3, r3, #31
   19ee2:	d503      	bpl.n	19eec <ST7796_t3::setRotation(unsigned char)+0x1b8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
   19ee4:	4a3a      	ldr	r2, [pc, #232]	; (19fd0 <ST7796_t3::setRotation(unsigned char)+0x29c>)
   19ee6:	4b3b      	ldr	r3, [pc, #236]	; (19fd4 <ST7796_t3::setRotation(unsigned char)+0x2a0>)
   19ee8:	6812      	ldr	r2, [r2, #0]
   19eea:	681b      	ldr	r3, [r3, #0]
  endSPITransaction();
//  Serial.printf("Set rotation %d start(%d %d) row: %d, col: %d\n", m, _xstart, _ystart, _rowstart, _colstart);
  setClipRect();
  setOrigin();
	
	cursor_x = 0;
   19eec:	2300      	movs	r3, #0
   19eee:	8163      	strh	r3, [r4, #10]
	cursor_y = 0;
   19ef0:	81a3      	strh	r3, [r4, #12]
}
   19ef2:	bd70      	pop	{r4, r5, r6, pc}
   19ef4:	4a36      	ldr	r2, [pc, #216]	; (19fd0 <ST7796_t3::setRotation(unsigned char)+0x29c>)
   19ef6:	4b37      	ldr	r3, [pc, #220]	; (19fd4 <ST7796_t3::setRotation(unsigned char)+0x2a0>)
   19ef8:	6812      	ldr	r2, [r2, #0]
   19efa:	681b      	ldr	r3, [r3, #0]
   19efc:	e7a8      	b.n	19e50 <ST7796_t3::setRotation(unsigned char)+0x11c>
    if (hwSPI) _pspi->endTransaction();  
   19efe:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
		if (interruptMasksUsed) {
   19f02:	7cd3      	ldrb	r3, [r2, #19]
   19f04:	2b00      	cmp	r3, #0
   19f06:	f43f af59 	beq.w	19dbc <ST7796_t3::setRotation(unsigned char)+0x88>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   19f0a:	07dd      	lsls	r5, r3, #31
   19f0c:	d504      	bpl.n	19f18 <ST7796_t3::setRotation(unsigned char)+0x1e4>
   19f0e:	6a95      	ldr	r5, [r2, #40]	; 0x28
   19f10:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   19f14:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   19f18:	0799      	lsls	r1, r3, #30
   19f1a:	d504      	bpl.n	19f26 <ST7796_t3::setRotation(unsigned char)+0x1f2>
   19f1c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
   19f1e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   19f22:	f8c1 5104 	str.w	r5, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   19f26:	075e      	lsls	r6, r3, #29
   19f28:	d504      	bpl.n	19f34 <ST7796_t3::setRotation(unsigned char)+0x200>
   19f2a:	6b15      	ldr	r5, [r2, #48]	; 0x30
   19f2c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   19f30:	f8c1 5108 	str.w	r5, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   19f34:	071d      	lsls	r5, r3, #28
   19f36:	d504      	bpl.n	19f42 <ST7796_t3::setRotation(unsigned char)+0x20e>
   19f38:	6b55      	ldr	r5, [r2, #52]	; 0x34
   19f3a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   19f3e:	f8c1 510c 	str.w	r5, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   19f42:	06d9      	lsls	r1, r3, #27
   19f44:	f57f af3a 	bpl.w	19dbc <ST7796_t3::setRotation(unsigned char)+0x88>
   19f48:	6b92      	ldr	r2, [r2, #56]	; 0x38
   19f4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   19f4e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   19f52:	e733      	b.n	19dbc <ST7796_t3::setRotation(unsigned char)+0x88>
    if (hwSPI) _pspi->beginTransaction(_spiSettings);
   19f54:	f100 0384 	add.w	r3, r0, #132	; 0x84
   19f58:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
   19f5c:	e893 0006 	ldmia.w	r3, {r1, r2}
   19f60:	f7f1 f9c4 	bl	b2ec <SPIClass::beginTransaction(SPISettings)>
    if (!_dcport) _spi_tcr_current = _pimxrt_spi->TCR;  // Only if DC is on hardware CS 
   19f64:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   19f68:	2b00      	cmp	r3, #0
   19f6a:	f47f aeef 	bne.w	19d4c <ST7796_t3::setRotation(unsigned char)+0x18>
   19f6e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   19f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   19f74:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   19f78:	e6e8      	b.n	19d4c <ST7796_t3::setRotation(unsigned char)+0x18>
     writedata_last(ST77XX_MADCTL_MV | ST77XX_MADCTL_BGR);
   19f7a:	2128      	movs	r1, #40	; 0x28
   19f7c:	4620      	mov	r0, r4
   19f7e:	f7fb fbe7 	bl	15750 <ST7735_t3::writedata_last(unsigned char)>
     _xstart = _rowstart;
   19f82:	f8b4 2078 	ldrh.w	r2, [r4, #120]	; 0x78
     _ystart = _colstart2;
   19f86:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
     _height = _screenWidth;
   19f8a:	f9b4 0082 	ldrsh.w	r0, [r4, #130]	; 0x82
     _width = _screenHeight;
   19f8e:	f9b4 c080 	ldrsh.w	ip, [r4, #128]	; 0x80
     _xstart = _rowstart2;
   19f92:	f8a4 207a 	strh.w	r2, [r4, #122]	; 0x7a
     _ystart = _colstart;
   19f96:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
     _height = _screenWidth;
   19f9a:	8520      	strh	r0, [r4, #40]	; 0x28
     _width = _screenHeight;
   19f9c:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
     break;
   19fa0:	e6ff      	b.n	19da2 <ST7796_t3::setRotation(unsigned char)+0x6e>
     writedata_last(ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_BGR);
   19fa2:	21e8      	movs	r1, #232	; 0xe8
   19fa4:	4620      	mov	r0, r4
   19fa6:	f7fb fbd3 	bl	15750 <ST7735_t3::writedata_last(unsigned char)>
     _xstart = _rowstart2;
   19faa:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
     _ystart = _colstart;
   19fae:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   19fb2:	e7ea      	b.n	19f8a <ST7796_t3::setRotation(unsigned char)+0x256>
     writedata_last(ST77XX_MADCTL_MY | ST77XX_MADCTL_BGR); 
   19fb4:	2188      	movs	r1, #136	; 0x88
   19fb6:	4620      	mov	r0, r4
   19fb8:	f7fb fbca 	bl	15750 <ST7735_t3::writedata_last(unsigned char)>
     _xstart = _colstart2;
   19fbc:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
     _ystart = _rowstart2;
   19fc0:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   19fc4:	e6e2      	b.n	19d8c <ST7796_t3::setRotation(unsigned char)+0x58>
   19fc6:	bf00      	nop
   19fc8:	200136f9 	.word	0x200136f9
   19fcc:	200136f8 	.word	0x200136f8
   19fd0:	20013554 	.word	0x20013554
   19fd4:	20013690 	.word	0x20013690

00019fd8 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)>:
ST7796_t3::ST7796_t3(uint8_t CS, uint8_t RS, uint8_t RST) : 
   19fd8:	b570      	push	{r4, r5, r6, lr}
   19fda:	4604      	mov	r4, r0
      ST7735_t3(CS, RS, RST) 
   19fdc:	f7fa ff60 	bl	14ea0 <ST7735_t3::ST7735_t3(unsigned char, unsigned char, unsigned char)>
   19fe0:	4b5c      	ldr	r3, [pc, #368]	; (1a154 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x17c>)
  tabcolor = INIT_ST7789_TABCOLOR;
   19fe2:	202a      	movs	r0, #42	; 0x2a
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   19fe4:	f9b4 c026 	ldrsh.w	ip, [r4, #38]	; 0x26
      ST7735_t3(CS, RS, RST) 
   19fe8:	2200      	movs	r2, #0
   19fea:	6023      	str	r3, [r4, #0]
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   19fec:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   19ff0:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
   19ff4:	4563      	cmp	r3, ip
   19ff6:	461d      	mov	r5, r3
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   19ff8:	4463      	add	r3, ip
  tabcolor = INIT_ST7789_TABCOLOR;
   19ffa:	7220      	strb	r0, [r4, #8]
   19ffc:	bfa8      	it	ge
   19ffe:	4665      	movge	r5, ip
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a000:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a004:	4563      	cmp	r3, ip
      ST7735_t3(CS, RS, RST) 
   1a006:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
	cursor_y  = cursor_x    = 0;
   1a00a:	8162      	strh	r2, [r4, #10]
   1a00c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1a010:	bfa8      	it	ge
   1a012:	4663      	movge	r3, ip
   1a014:	81a2      	strh	r2, [r4, #12]
   1a016:	4288      	cmp	r0, r1
	font      = NULL;
   1a018:	64e2      	str	r2, [r4, #76]	; 0x4c
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   1a01a:	6122      	str	r2, [r4, #16]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a01c:	eb00 0201 	add.w	r2, r0, r1
   1a020:	bfa8      	it	ge
   1a022:	4608      	movge	r0, r1
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a028:	428a      	cmp	r2, r1
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a02a:	fa0f fe85 	sxth.w	lr, r5
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a02e:	b21b      	sxth	r3, r3
   1a030:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a034:	bfa8      	it	ge
   1a036:	460a      	movge	r2, r1
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   1a038:	f8a4 c014 	strh.w	ip, [r4, #20]
   1a03c:	82e1      	strh	r1, [r4, #22]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a03e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a042:	8423      	strh	r3, [r4, #32]
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a044:	f8a4 e01c 	strh.w	lr, [r4, #28]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a048:	b212      	sxth	r2, r2
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a04a:	4291      	cmp	r1, r2
   1a04c:	bf08      	it	eq
   1a04e:	459c      	cmpeq	ip, r3
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a050:	fa0f fc80 	sxth.w	ip, r0
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a054:	8462      	strh	r2, [r4, #34]	; 0x22
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a056:	bf0c      	ite	eq
   1a058:	2101      	moveq	r1, #1
   1a05a:	2100      	movne	r1, #0
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a05c:	459e      	cmp	lr, r3
   1a05e:	bf18      	it	ne
   1a060:	4594      	cmpne	ip, r2
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a062:	f8a4 c01e 	strh.w	ip, [r4, #30]
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a066:	f001 0301 	and.w	r3, r1, #1
  _screenHeight = 480;
   1a06a:	493b      	ldr	r1, [pc, #236]	; (1a158 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x180>)
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a06c:	bf0c      	ite	eq
   1a06e:	2201      	moveq	r2, #1
   1a070:	2200      	movne	r2, #0
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a072:	4328      	orrs	r0, r5
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   1a074:	4d39      	ldr	r5, [pc, #228]	; (1a15c <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x184>)
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a076:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	textcolor = textbgcolor = 0xFFFF;
   1a07a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a07e:	bf18      	it	ne
   1a080:	2300      	movne	r3, #0
  _screenHeight = 480;
   1a082:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	textcolor = textbgcolor = 0xFFFF;
   1a086:	6362      	str	r2, [r4, #52]	; 0x34
   1a088:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	textsize_x  = 1;
   1a08c:	f240 1301 	movw	r3, #257	; 0x101
   1a090:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	wrap      = true;
   1a094:	2301      	movs	r3, #1
   1a096:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		yield();
   1a09a:	f003 fa9d 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   1a09e:	782b      	ldrb	r3, [r5, #0]
   1a0a0:	b11b      	cbz	r3, 1a0aa <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0xd2>
   1a0a2:	4b2f      	ldr	r3, [pc, #188]	; (1a160 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x188>)
   1a0a4:	781b      	ldrb	r3, [r3, #0]
   1a0a6:	07da      	lsls	r2, r3, #31
   1a0a8:	d44f      	bmi.n	1a14a <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x172>
	int16_t width(void) const { return _width; };
   1a0aa:	f9b4 c026 	ldrsh.w	ip, [r4, #38]	; 0x26
		_originx = x; _originy = y; 
   1a0ae:	2300      	movs	r3, #0
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a0b0:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
	int16_t height(void) const { return _height; }
   1a0b4:	f9b4 e028 	ldrsh.w	lr, [r4, #40]	; 0x28
   1a0b8:	4562      	cmp	r2, ip
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a0ba:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
		_originx = x; _originy = y; 
   1a0be:	61a3      	str	r3, [r4, #24]
   1a0c0:	bfa8      	it	ge
   1a0c2:	4662      	movge	r2, ip
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a0c4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
   1a0c8:	4571      	cmp	r1, lr
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a0ca:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
   1a0ce:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1a0d2:	bfa8      	it	ge
   1a0d4:	4671      	movge	r1, lr
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a0d6:	4563      	cmp	r3, ip
   1a0d8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1a0dc:	bfa8      	it	ge
   1a0de:	4663      	movge	r3, ip
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a0e0:	4570      	cmp	r0, lr
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a0e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a0e6:	ea42 0601 	orr.w	r6, r2, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a0ea:	bfa8      	it	ge
   1a0ec:	4670      	movge	r0, lr
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a0ee:	b212      	sxth	r2, r2
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a0f0:	459c      	cmp	ip, r3
   1a0f2:	bf08      	it	eq
   1a0f4:	2e00      	cmpeq	r6, #0
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a0f6:	b209      	sxth	r1, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a0f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a0fc:	8423      	strh	r3, [r4, #32]
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a0fe:	bf0c      	ite	eq
   1a100:	f04f 0c01 	moveq.w	ip, #1
   1a104:	f04f 0c00 	movne.w	ip, #0
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a108:	8460      	strh	r0, [r4, #34]	; 0x22
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a10a:	4586      	cmp	lr, r0
   1a10c:	bf14      	ite	ne
   1a10e:	f04f 0c00 	movne.w	ip, #0
   1a112:	f00c 0c01 	andeq.w	ip, ip, #1
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a116:	4281      	cmp	r1, r0
   1a118:	bf18      	it	ne
   1a11a:	429a      	cmpne	r2, r3
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a11c:	83e1      	strh	r1, [r4, #30]
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a11e:	bf0c      	ite	eq
   1a120:	2301      	moveq	r3, #1
   1a122:	2300      	movne	r3, #0
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a124:	f884 c025 	strb.w	ip, [r4, #37]	; 0x25
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a128:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a12c:	83a2      	strh	r2, [r4, #28]
		yield();
   1a12e:	f003 fa53 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   1a132:	782b      	ldrb	r3, [r5, #0]
   1a134:	b13b      	cbz	r3, 1a146 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x16e>
   1a136:	4b0a      	ldr	r3, [pc, #40]	; (1a160 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x188>)
   1a138:	781b      	ldrb	r3, [r3, #0]
   1a13a:	07db      	lsls	r3, r3, #31
   1a13c:	d503      	bpl.n	1a146 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x16e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
   1a13e:	4a09      	ldr	r2, [pc, #36]	; (1a164 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x18c>)
   1a140:	4b09      	ldr	r3, [pc, #36]	; (1a168 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x190>)
   1a142:	6812      	ldr	r2, [r2, #0]
   1a144:	681b      	ldr	r3, [r3, #0]
}
   1a146:	4620      	mov	r0, r4
   1a148:	bd70      	pop	{r4, r5, r6, pc}
   1a14a:	4a06      	ldr	r2, [pc, #24]	; (1a164 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x18c>)
   1a14c:	4b06      	ldr	r3, [pc, #24]	; (1a168 <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0x190>)
   1a14e:	6812      	ldr	r2, [r2, #0]
   1a150:	681b      	ldr	r3, [r3, #0]
   1a152:	e7aa      	b.n	1a0aa <ST7796_t3::ST7796_t3(unsigned char, unsigned char, unsigned char)+0xd2>
   1a154:	20003f88 	.word	0x20003f88
   1a158:	014001e0 	.word	0x014001e0
   1a15c:	200136f9 	.word	0x200136f9
   1a160:	200136f8 	.word	0x200136f8
   1a164:	20013554 	.word	0x20013554
   1a168:	20013690 	.word	0x20013690

0001a16c <ST7796_t3::init(unsigned short, unsigned short, unsigned char)>:
    ST7796S_DISPON, DELAY,
      120
};

void  ST7796_t3::init(uint16_t width, uint16_t height, uint8_t mode)
{
   1a16c:	b570      	push	{r4, r5, r6, lr}
   1a16e:	4604      	mov	r4, r0
   1a170:	b082      	sub	sp, #8
   1a172:	460d      	mov	r5, r1
   1a174:	4616      	mov	r6, r2
  Serial.printf("ST7796_t3::init mode: %x\n", mode);
   1a176:	4976      	ldr	r1, [pc, #472]	; (1a350 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1e4>)
{
   1a178:	461a      	mov	r2, r3
  Serial.printf("ST7796_t3::init mode: %x\n", mode);
   1a17a:	4876      	ldr	r0, [pc, #472]	; (1a354 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1e8>)
   1a17c:	9301      	str	r3, [sp, #4]
   1a17e:	f000 fdb5 	bl	1acec <Print::printf(char const*, ...)>
	commonInit(NULL, mode);
   1a182:	9a01      	ldr	r2, [sp, #4]
   1a184:	2100      	movs	r1, #0
   1a186:	4620      	mov	r0, r4
   1a188:	f7fb fd90 	bl	15cac <ST7735_t3::commonInit(unsigned char const*, unsigned char)>
  if ((width == 320) && (height == 480)) {
   1a18c:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
   1a190:	f040 80c8 	bne.w	1a324 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1b8>
   1a194:	f5b6 7ff0 	cmp.w	r6, #480	; 0x1e0
   1a198:	f040 80c4 	bne.w	1a324 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1b8>
    _colstart = 0;   
   1a19c:	2300      	movs	r3, #0
   1a19e:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
    _colstart2 = 0; 
    _rowstart = 0;   
   1a1a2:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    _colstart2 = 0; 
   1a1a6:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
  _height = height;
  _width = width;
  _screenHeight = height;
  _screenWidth = width;   

  commandList(cmd_ST7796);
   1a1aa:	496b      	ldr	r1, [pc, #428]	; (1a358 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1ec>)
   1a1ac:	4620      	mov	r0, r4
  _height = height;
   1a1ae:	8526      	strh	r6, [r4, #40]	; 0x28
  _width = width;
   1a1b0:	84e5      	strh	r5, [r4, #38]	; 0x26
  _screenHeight = height;
   1a1b2:	f8a4 6080 	strh.w	r6, [r4, #128]	; 0x80
  _screenWidth = width;   
   1a1b6:	f8a4 5082 	strh.w	r5, [r4, #130]	; 0x82
  commandList(cmd_ST7796);
   1a1ba:	f7fb fc69 	bl	15a90 <ST7735_t3::commandList(unsigned char const*)>
  setRotation(0);
   1a1be:	6823      	ldr	r3, [r4, #0]
   1a1c0:	2100      	movs	r1, #0
   1a1c2:	4620      	mov	r0, r4
   1a1c4:	691b      	ldr	r3, [r3, #16]
   1a1c6:	4798      	blx	r3
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   1a1c8:	f9b4 6026 	ldrsh.w	r6, [r4, #38]	; 0x26
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a1cc:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
  cursor_y  = cursor_x    = 0;
   1a1d0:	2200      	movs	r2, #0
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   1a1d2:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
   1a1d6:	42b3      	cmp	r3, r6
   1a1d8:	461d      	mov	r5, r3
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a1da:	4433      	add	r3, r6
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a1dc:	f9b4 001a 	ldrsh.w	r0, [r4, #26]
   1a1e0:	bfa8      	it	ge
   1a1e2:	4635      	movge	r5, r6
   1a1e4:	8162      	strh	r2, [r4, #10]
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a1e6:	42b3      	cmp	r3, r6
   1a1e8:	81a2      	strh	r2, [r4, #12]
  textsize_x = textsize_y = 1;
  textcolor = textbgcolor = 0xFFFF;
  wrap      = true;
  font      = NULL;
   1a1ea:	64e2      	str	r2, [r4, #76]	; 0x4c
   1a1ec:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1a1f0:	bfa8      	it	ge
   1a1f2:	4633      	movge	r3, r6
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   1a1f4:	6122      	str	r2, [r4, #16]
   1a1f6:	4288      	cmp	r0, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a1f8:	eb00 0201 	add.w	r2, r0, r1
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a1fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a200:	fa0f fc85 	sxth.w	ip, r5
   1a204:	bfa8      	it	ge
   1a206:	4608      	movge	r0, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a208:	428a      	cmp	r2, r1
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a20a:	b21b      	sxth	r3, r3
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   1a20c:	82a6      	strh	r6, [r4, #20]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a20e:	bfa8      	it	ge
   1a210:	460a      	movge	r2, r1
   1a212:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
			 _clipx1 = 0; _clipy1 = 0; _clipx2 = _width; _clipy2 = _height; 
   1a216:	82e1      	strh	r1, [r4, #22]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a218:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a21c:	8423      	strh	r3, [r4, #32]
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a21e:	f8a4 c01c 	strh.w	ip, [r4, #28]
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a222:	b212      	sxth	r2, r2
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a224:	4291      	cmp	r1, r2
   1a226:	bf08      	it	eq
   1a228:	429e      	cmpeq	r6, r3
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a22a:	b206      	sxth	r6, r0
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a22c:	8462      	strh	r2, [r4, #34]	; 0x22
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a22e:	bf0c      	ite	eq
   1a230:	2101      	moveq	r1, #1
   1a232:	2100      	movne	r1, #0
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a234:	459c      	cmp	ip, r3
   1a236:	bf18      	it	ne
   1a238:	4296      	cmpne	r6, r2
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a23a:	83e6      	strh	r6, [r4, #30]
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a23c:	f001 0301 	and.w	r3, r1, #1
  textsize_x = textsize_y = 1;
   1a240:	f240 1101 	movw	r1, #257	; 0x101
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a244:	bf0c      	ite	eq
   1a246:	2201      	moveq	r2, #1
   1a248:	2200      	movne	r2, #0
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a24a:	4328      	orrs	r0, r5
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   1a24c:	4d43      	ldr	r5, [pc, #268]	; (1a35c <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1f0>)
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a24e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  textcolor = textbgcolor = 0xFFFF;
   1a252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a256:	bf18      	it	ne
   1a258:	2300      	movne	r3, #0
  textsize_x = textsize_y = 1;
   1a25a:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
  textcolor = textbgcolor = 0xFFFF;
   1a25e:	6362      	str	r2, [r4, #52]	; 0x34
   1a260:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  wrap      = true;
   1a264:	2301      	movs	r3, #1
   1a266:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		yield();
   1a26a:	f003 f9b5 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   1a26e:	782b      	ldrb	r3, [r5, #0]
   1a270:	b13b      	cbz	r3, 1a282 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x116>
   1a272:	4b3b      	ldr	r3, [pc, #236]	; (1a360 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1f4>)
   1a274:	781b      	ldrb	r3, [r3, #0]
   1a276:	07da      	lsls	r2, r3, #31
   1a278:	d503      	bpl.n	1a282 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x116>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
   1a27a:	4a3a      	ldr	r2, [pc, #232]	; (1a364 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1f8>)
   1a27c:	4b3a      	ldr	r3, [pc, #232]	; (1a368 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1fc>)
   1a27e:	6812      	ldr	r2, [r2, #0]
   1a280:	681b      	ldr	r3, [r3, #0]
	int16_t width(void) const { return _width; };
   1a282:	f9b4 c026 	ldrsh.w	ip, [r4, #38]	; 0x26
		_originx = x; _originy = y; 
   1a286:	2300      	movs	r3, #0
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a288:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
	int16_t height(void) const { return _height; }
   1a28c:	f9b4 6028 	ldrsh.w	r6, [r4, #40]	; 0x28
   1a290:	4562      	cmp	r2, ip
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a292:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
		_originx = x; _originy = y; 
   1a296:	61a3      	str	r3, [r4, #24]
   1a298:	bfa8      	it	ge
   1a29a:	4662      	movge	r2, ip
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a29c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
   1a2a0:	42b1      	cmp	r1, r6
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a2a2:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
   1a2a6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1a2aa:	bfa8      	it	ge
   1a2ac:	4631      	movge	r1, r6
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a2ae:	4563      	cmp	r3, ip
   1a2b0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1a2b4:	bfa8      	it	ge
   1a2b6:	4663      	movge	r3, ip
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a2b8:	42b0      	cmp	r0, r6
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a2ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a2be:	ea42 0e01 	orr.w	lr, r2, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a2c2:	bfa8      	it	ge
   1a2c4:	4630      	movge	r0, r6
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a2c6:	b212      	sxth	r2, r2
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a2c8:	459c      	cmp	ip, r3
   1a2ca:	bf08      	it	eq
   1a2cc:	f1be 0f00 	cmpeq.w	lr, #0
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a2d0:	b209      	sxth	r1, r1
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a2d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
		_displayclipx2 = max(0,min(_clipx2+_originx, width()));
   1a2d6:	8423      	strh	r3, [r4, #32]
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a2d8:	bf0c      	ite	eq
   1a2da:	f04f 0c01 	moveq.w	ip, #1
   1a2de:	f04f 0c00 	movne.w	ip, #0
		_displayclipy2 = max(0,min(_clipy2+_originy, height()));
   1a2e2:	8460      	strh	r0, [r4, #34]	; 0x22
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a2e4:	4286      	cmp	r6, r0
   1a2e6:	bf14      	ite	ne
   1a2e8:	f04f 0c00 	movne.w	ip, #0
   1a2ec:	f00c 0c01 	andeq.w	ip, ip, #1
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a2f0:	4281      	cmp	r1, r0
   1a2f2:	bf18      	it	ne
   1a2f4:	429a      	cmpne	r2, r3
		_displayclipy1 = max(0,min(_clipy1+_originy, height()));
   1a2f6:	83e1      	strh	r1, [r4, #30]
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a2f8:	bf0c      	ite	eq
   1a2fa:	2301      	moveq	r3, #1
   1a2fc:	2300      	movne	r3, #0
		_standard =  (_displayclipx1 == 0) && (_displayclipx2 == _width) && (_displayclipy1 == 0) && (_displayclipy2 == _height);
   1a2fe:	f884 c025 	strb.w	ip, [r4, #37]	; 0x25
		_invisible = (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
   1a302:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		_displayclipx1 = max(0,min(_clipx1+_originx, width()));
   1a306:	83a2      	strh	r2, [r4, #28]
		yield();
   1a308:	f003 f966 	bl	1d5d8 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
   1a30c:	782b      	ldrb	r3, [r5, #0]
   1a30e:	b13b      	cbz	r3, 1a320 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1b4>
   1a310:	4b13      	ldr	r3, [pc, #76]	; (1a360 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1f4>)
   1a312:	781b      	ldrb	r3, [r3, #0]
   1a314:	07db      	lsls	r3, r3, #31
   1a316:	d503      	bpl.n	1a320 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1b4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
   1a318:	4a12      	ldr	r2, [pc, #72]	; (1a364 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1f8>)
   1a31a:	4b13      	ldr	r3, [pc, #76]	; (1a368 <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x1fc>)
   1a31c:	6812      	ldr	r2, [r2, #0]
   1a31e:	681b      	ldr	r3, [r3, #0]
  setClipRect();
  setOrigin();
  
}
   1a320:	b002      	add	sp, #8
   1a322:	bd70      	pop	{r4, r5, r6, pc}
    _rowstart = _rowstart2 = (int)((480 - height) / 2);
   1a324:	f5d6 73f0 	rsbs	r3, r6, #480	; 0x1e0
   1a328:	bf48      	it	mi
   1a32a:	3301      	addmi	r3, #1
   1a32c:	f3c3 0347 	ubfx	r3, r3, #1, #8
   1a330:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
   1a334:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    _colstart = _colstart2 = (int)((320 - width) / 2);
   1a338:	f5d5 73a0 	rsbs	r3, r5, #320	; 0x140
   1a33c:	bf48      	it	mi
   1a33e:	3301      	addmi	r3, #1
   1a340:	f3c3 0347 	ubfx	r3, r3, #1, #8
   1a344:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   1a348:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
   1a34c:	e72d      	b.n	1a1aa <ST7796_t3::init(unsigned short, unsigned short, unsigned char)+0x3e>
   1a34e:	bf00      	nop
   1a350:	20003c18 	.word	0x20003c18
   1a354:	20008ba0 	.word	0x20008ba0
   1a358:	6000221c 	.word	0x6000221c
   1a35c:	200136f9 	.word	0x200136f9
   1a360:	200136f8 	.word	0x200136f8
   1a364:	20013554 	.word	0x20013554
   1a368:	20013690 	.word	0x20013690

0001a36c <AudioStream::update_all()>:
   1a36c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1a370:	2240      	movs	r2, #64	; 0x40
   1a372:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
   1a376:	4770      	bx	lr

0001a378 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
   1a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   1a37a:	4b14      	ldr	r3, [pc, #80]	; (1a3cc <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
   1a37c:	4d14      	ldr	r5, [pc, #80]	; (1a3d0 <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
   1a37e:	681c      	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
   1a380:	686e      	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
   1a382:	b19c      	cbz	r4, 1a3ac <software_isr()+0x34>
		if (p->active) {
   1a384:	7a23      	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
   1a386:	4620      	mov	r0, r4
		if (p->active) {
   1a388:	b16b      	cbz	r3, 1a3a6 <software_isr()+0x2e>
			p->update();
   1a38a:	6823      	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
   1a38c:	686f      	ldr	r7, [r5, #4]
			p->update();
   1a38e:	681b      	ldr	r3, [r3, #0]
   1a390:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   1a392:	686b      	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   1a394:	88e1      	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   1a396:	1bdb      	subs	r3, r3, r7
			p->cpu_cycles = cycles;
   1a398:	f3c3 128f 	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   1a39c:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
   1a3a0:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   1a3a2:	bf38      	it	cc
   1a3a4:	80e2      	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
   1a3a6:	6964      	ldr	r4, [r4, #20]
   1a3a8:	2c00      	cmp	r4, #0
   1a3aa:	d1eb      	bne.n	1a384 <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   1a3ac:	4b08      	ldr	r3, [pc, #32]	; (1a3d0 <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   1a3ae:	4a09      	ldr	r2, [pc, #36]	; (1a3d4 <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   1a3b0:	685b      	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   1a3b2:	8810      	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   1a3b4:	1b9b      	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
   1a3b6:	4c08      	ldr	r4, [pc, #32]	; (1a3d8 <software_isr()+0x60>)
   1a3b8:	f3c3 118f 	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   1a3bc:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
   1a3c0:	8021      	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
   1a3c2:	bf38      	it	cc
   1a3c4:	8011      	strhcc	r1, [r2, #0]

	asm("DSB");
   1a3c6:	f3bf 8f4f 	dsb	sy
}
   1a3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a3cc:	2000adc4 	.word	0x2000adc4
   1a3d0:	e0001000 	.word	0xe0001000
   1a3d4:	200136c2 	.word	0x200136c2
   1a3d8:	200136c0 	.word	0x200136c0

0001a3dc <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
            { return (*static_cast<C*>(storage_ptr))(
   1a3dc:	6803      	ldr	r3, [r0, #0]
   1a3de:	4718      	bx	r3

0001a3e0 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
   1a3e0:	680b      	ldr	r3, [r1, #0]
   1a3e2:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
   1a3e4:	4770      	bx	lr
   1a3e6:	bf00      	nop

0001a3e8 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
   1a3e8:	680b      	ldr	r3, [r1, #0]
   1a3ea:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
   1a3ec:	4770      	bx	lr
   1a3ee:	bf00      	nop

0001a3f0 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
   1a3f0:	4770      	bx	lr
   1a3f2:	bf00      	nop

0001a3f4 <AudioStream::allocate()>:
{
   1a3f4:	b430      	push	{r4, r5}
	__disable_irq();
   1a3f6:	b672      	cpsid	i
	index = memory_pool_first_mask;
   1a3f8:	4d24      	ldr	r5, [pc, #144]	; (1a48c <AudioStream::allocate()+0x98>)
	p += index;
   1a3fa:	4c25      	ldr	r4, [pc, #148]	; (1a490 <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
   1a3fc:	882a      	ldrh	r2, [r5, #0]
		if (p >= end) {
   1a3fe:	f104 0170 	add.w	r1, r4, #112	; 0x70
	p += index;
   1a402:	eb04 0382 	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
   1a406:	428b      	cmp	r3, r1
   1a408:	d23c      	bcs.n	1a484 <AudioStream::allocate()+0x90>
   1a40a:	f104 016f 	add.w	r1, r4, #111	; 0x6f
   1a40e:	1c50      	adds	r0, r2, #1
   1a410:	1ac9      	subs	r1, r1, r3
   1a412:	eb00 0091 	add.w	r0, r0, r1, lsr #2
   1a416:	e002      	b.n	1a41e <AudioStream::allocate()+0x2a>
		index++;
   1a418:	3201      	adds	r2, #1
		if (p >= end) {
   1a41a:	4282      	cmp	r2, r0
   1a41c:	d032      	beq.n	1a484 <AudioStream::allocate()+0x90>
		index++;
   1a41e:	469c      	mov	ip, r3
		avail = *p;
   1a420:	f853 1b04 	ldr.w	r1, [r3], #4
		if (avail) break;
   1a424:	2900      	cmp	r1, #0
   1a426:	d0f7      	beq.n	1a418 <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
   1a428:	fab1 f081 	clz	r0, r1
	avail &= ~(0x80000000 >> n);
   1a42c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1a430:	40c3      	lsrs	r3, r0
   1a432:	ea21 0103 	bic.w	r1, r1, r3
	*p = avail;
   1a436:	f8cc 1000 	str.w	r1, [ip]
	if (!avail) index++;
   1a43a:	b901      	cbnz	r1, 1a43e <AudioStream::allocate()+0x4a>
   1a43c:	3201      	adds	r2, #1
	used = memory_used + 1;
   1a43e:	4b15      	ldr	r3, [pc, #84]	; (1a494 <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
   1a440:	802a      	strh	r2, [r5, #0]
	used = memory_used + 1;
   1a442:	881a      	ldrh	r2, [r3, #0]
	memory_used = used;
   1a444:	3201      	adds	r2, #1
   1a446:	b291      	uxth	r1, r2
   1a448:	8019      	strh	r1, [r3, #0]
	__enable_irq();
   1a44a:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
   1a44c:	ebac 0c04 	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
   1a450:	f641 737c 	movw	r3, #8060	; 0x1f7c
   1a454:	ebc0 6400 	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
   1a458:	ea4f 0cac 	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
   1a45c:	ebc0 1084 	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
   1a460:	2401      	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
   1a462:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
   1a466:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
   1a46a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1a46e:	480a      	ldr	r0, [pc, #40]	; (1a498 <AudioStream::allocate()+0xa4>)
   1a470:	6800      	ldr	r0, [r0, #0]
	block->ref_count = 1;
   1a472:	54c4      	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
   1a474:	4418      	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
   1a476:	4b09      	ldr	r3, [pc, #36]	; (1a49c <AudioStream::allocate()+0xa8>)
   1a478:	881c      	ldrh	r4, [r3, #0]
   1a47a:	4294      	cmp	r4, r2
}
   1a47c:	bc30      	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
   1a47e:	bf38      	it	cc
   1a480:	8019      	strhcc	r1, [r3, #0]
}
   1a482:	4770      	bx	lr
			__enable_irq();
   1a484:	b662      	cpsie	i
			return NULL;
   1a486:	2000      	movs	r0, #0
}
   1a488:	bc30      	pop	{r4, r5}
   1a48a:	4770      	bx	lr
   1a48c:	200136c4 	.word	0x200136c4
   1a490:	2000adc8 	.word	0x2000adc8
   1a494:	200136bc 	.word	0x200136bc
   1a498:	2000adc0 	.word	0x2000adc0
   1a49c:	200136be 	.word	0x200136be

0001a4a0 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   1a4a0:	8842      	ldrh	r2, [r0, #2]
	__disable_irq();
   1a4a2:	b672      	cpsid	i
	if (block->ref_count > 1) {
   1a4a4:	7803      	ldrb	r3, [r0, #0]
   1a4a6:	2b01      	cmp	r3, #1
   1a4a8:	d903      	bls.n	1a4b2 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
   1a4aa:	3b01      	subs	r3, #1
   1a4ac:	7003      	strb	r3, [r0, #0]
	__enable_irq();
   1a4ae:	b662      	cpsie	i
}
   1a4b0:	4770      	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   1a4b2:	43d1      	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
   1a4b4:	0953      	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
   1a4b6:	480b      	ldr	r0, [pc, #44]	; (1a4e4 <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   1a4b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a4bc:	f001 011f 	and.w	r1, r1, #31
   1a4c0:	40ca      	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
   1a4c2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   1a4c6:	430a      	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   1a4c8:	4907      	ldr	r1, [pc, #28]	; (1a4e8 <AudioStream::release(audio_block_struct*)+0x48>)
   1a4ca:	f8b1 c000 	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
   1a4ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   1a4d2:	459c      	cmp	ip, r3
		memory_used--;
   1a4d4:	4a05      	ldr	r2, [pc, #20]	; (1a4ec <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   1a4d6:	bf88      	it	hi
   1a4d8:	800b      	strhhi	r3, [r1, #0]
		memory_used--;
   1a4da:	8813      	ldrh	r3, [r2, #0]
   1a4dc:	3b01      	subs	r3, #1
   1a4de:	8013      	strh	r3, [r2, #0]
	__enable_irq();
   1a4e0:	b662      	cpsie	i
}
   1a4e2:	4770      	bx	lr
   1a4e4:	2000adc8 	.word	0x2000adc8
   1a4e8:	200136c4 	.word	0x200136c4
   1a4ec:	200136bc 	.word	0x200136bc

0001a4f0 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   1a4f0:	68c3      	ldr	r3, [r0, #12]
   1a4f2:	b913      	cbnz	r3, 1a4fa <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
   1a4f4:	e01d      	b.n	1a532 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
   1a4f6:	68db      	ldr	r3, [r3, #12]
   1a4f8:	b1e3      	cbz	r3, 1a534 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
   1a4fa:	7a18      	ldrb	r0, [r3, #8]
   1a4fc:	4290      	cmp	r0, r2
   1a4fe:	d1fa      	bne.n	1a4f6 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
   1a500:	b410      	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
   1a502:	6858      	ldr	r0, [r3, #4]
   1a504:	f893 c009 	ldrb.w	ip, [r3, #9]
   1a508:	6900      	ldr	r0, [r0, #16]
   1a50a:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
   1a50e:	b154      	cbz	r4, 1a526 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   1a510:	68db      	ldr	r3, [r3, #12]
   1a512:	b12b      	cbz	r3, 1a520 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
   1a514:	7a18      	ldrb	r0, [r3, #8]
   1a516:	4290      	cmp	r0, r2
   1a518:	d0f3      	beq.n	1a502 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   1a51a:	68db      	ldr	r3, [r3, #12]
   1a51c:	2b00      	cmp	r3, #0
   1a51e:	d1f9      	bne.n	1a514 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
   1a520:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a524:	4770      	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
   1a526:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
   1a52a:	7808      	ldrb	r0, [r1, #0]
   1a52c:	3001      	adds	r0, #1
   1a52e:	7008      	strb	r0, [r1, #0]
   1a530:	e7ee      	b.n	1a510 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
   1a532:	4770      	bx	lr
   1a534:	4770      	bx	lr
   1a536:	bf00      	nop

0001a538 <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
   1a538:	7a43      	ldrb	r3, [r0, #9]
   1a53a:	428b      	cmp	r3, r1
   1a53c:	d906      	bls.n	1a54c <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
   1a53e:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
   1a540:	2200      	movs	r2, #0
	in = inputQueue[index];
   1a542:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
   1a546:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	return in;
   1a54a:	4770      	bx	lr
	if (index >= num_inputs) return NULL;
   1a54c:	2000      	movs	r0, #0
}
   1a54e:	4770      	bx	lr

0001a550 <AudioStream::receiveWritable(unsigned int)>:
{
   1a550:	b538      	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
   1a552:	7a43      	ldrb	r3, [r0, #9]
   1a554:	428b      	cmp	r3, r1
   1a556:	d91b      	bls.n	1a590 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
   1a558:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
   1a55a:	2200      	movs	r2, #0
	in = inputQueue[index];
   1a55c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
   1a560:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
   1a564:	b1a4      	cbz	r4, 1a590 <AudioStream::receiveWritable(unsigned int)+0x40>
   1a566:	7823      	ldrb	r3, [r4, #0]
   1a568:	2b01      	cmp	r3, #1
   1a56a:	d801      	bhi.n	1a570 <AudioStream::receiveWritable(unsigned int)+0x20>
}
   1a56c:	4620      	mov	r0, r4
   1a56e:	bd38      	pop	{r3, r4, r5, pc}
		p = allocate();
   1a570:	f7ff ff40 	bl	1a3f4 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
   1a574:	4605      	mov	r5, r0
   1a576:	b128      	cbz	r0, 1a584 <AudioStream::receiveWritable(unsigned int)+0x34>
   1a578:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a57c:	1d21      	adds	r1, r4, #4
   1a57e:	3004      	adds	r0, #4
   1a580:	f001 fb52 	bl	1bc28 <memcpy>
		in->ref_count--;
   1a584:	7823      	ldrb	r3, [r4, #0]
   1a586:	3b01      	subs	r3, #1
   1a588:	7023      	strb	r3, [r4, #0]
		p = allocate();
   1a58a:	462c      	mov	r4, r5
}
   1a58c:	4620      	mov	r0, r4
   1a58e:	bd38      	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
   1a590:	2400      	movs	r4, #0
}
   1a592:	4620      	mov	r0, r4
   1a594:	bd38      	pop	{r3, r4, r5, pc}
   1a596:	bf00      	nop

0001a598 <AudioConnection::AudioConnection()>:
	: src(NULL), dst(NULL),
   1a598:	2200      	movs	r2, #0
	next_dest = AudioStream::unused;
   1a59a:	4904      	ldr	r1, [pc, #16]	; (1a5ac <AudioConnection::AudioConnection()+0x14>)
	: src(NULL), dst(NULL),
   1a59c:	e9c0 2200 	strd	r2, r2, [r0]
	  src_index(0), dest_index(0),
   1a5a0:	8102      	strh	r2, [r0, #8]
	  isConnected(false)
   1a5a2:	7402      	strb	r2, [r0, #16]
	next_dest = AudioStream::unused;
   1a5a4:	680a      	ldr	r2, [r1, #0]
	AudioStream::unused = this;
   1a5a6:	6008      	str	r0, [r1, #0]
	next_dest = AudioStream::unused;
   1a5a8:	60c2      	str	r2, [r0, #12]
}
   1a5aa:	4770      	bx	lr
   1a5ac:	2000ae38 	.word	0x2000ae38

0001a5b0 <AudioConnection::connect()>:
		if (isConnected) // already connected
   1a5b0:	7c03      	ldrb	r3, [r0, #16]
   1a5b2:	b9fb      	cbnz	r3, 1a5f4 <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
   1a5b4:	6803      	ldr	r3, [r0, #0]
   1a5b6:	4601      	mov	r1, r0
   1a5b8:	b1fb      	cbz	r3, 1a5fa <AudioConnection::connect()+0x4a>
   1a5ba:	6843      	ldr	r3, [r0, #4]
   1a5bc:	b1eb      	cbz	r3, 1a5fa <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
   1a5be:	7a42      	ldrb	r2, [r0, #9]
   1a5c0:	7a5b      	ldrb	r3, [r3, #9]
   1a5c2:	429a      	cmp	r2, r3
   1a5c4:	d21c      	bcs.n	1a600 <AudioConnection::connect()+0x50>
{
   1a5c6:	b430      	push	{r4, r5}
		__disable_irq();
   1a5c8:	b672      	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
   1a5ca:	4b2b      	ldr	r3, [pc, #172]	; (1a678 <AudioConnection::connect()+0xc8>)
   1a5cc:	681c      	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
   1a5ce:	b1ec      	cbz	r4, 1a60c <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
   1a5d0:	68e3      	ldr	r3, [r4, #12]
			while (p)
   1a5d2:	b1c3      	cbz	r3, 1a606 <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
   1a5d4:	6848      	ldr	r0, [r1, #4]
   1a5d6:	e001      	b.n	1a5dc <AudioConnection::connect()+0x2c>
				p = p->next_dest;
   1a5d8:	68db      	ldr	r3, [r3, #12]
			while (p)
   1a5da:	b1a3      	cbz	r3, 1a606 <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
   1a5dc:	685a      	ldr	r2, [r3, #4]
   1a5de:	4282      	cmp	r2, r0
   1a5e0:	d1fa      	bne.n	1a5d8 <AudioConnection::connect()+0x28>
   1a5e2:	f893 c009 	ldrb.w	ip, [r3, #9]
   1a5e6:	7a4a      	ldrb	r2, [r1, #9]
   1a5e8:	4594      	cmp	ip, r2
   1a5ea:	d1f5      	bne.n	1a5d8 <AudioConnection::connect()+0x28>
					__enable_irq();
   1a5ec:	b662      	cpsie	i
					return 4;
   1a5ee:	2004      	movs	r0, #4
}
   1a5f0:	bc30      	pop	{r4, r5}
   1a5f2:	4770      	bx	lr
	int result = 1;
   1a5f4:	2001      	movs	r0, #1
	__enable_irq();
   1a5f6:	b662      	cpsie	i
}
   1a5f8:	4770      	bx	lr
			result = 3;
   1a5fa:	2003      	movs	r0, #3
	__enable_irq();
   1a5fc:	b662      	cpsie	i
}
   1a5fe:	4770      	bx	lr
			result = 2;
   1a600:	2002      	movs	r0, #2
	__enable_irq();
   1a602:	b662      	cpsie	i
}
   1a604:	4770      	bx	lr
			s = s->next_update;
   1a606:	6964      	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
   1a608:	2c00      	cmp	r4, #0
   1a60a:	d1e1      	bne.n	1a5d0 <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
   1a60c:	4c1b      	ldr	r4, [pc, #108]	; (1a67c <AudioConnection::connect()+0xcc>)
   1a60e:	6823      	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
   1a610:	b143      	cbz	r3, 1a624 <AudioConnection::connect()+0x74>
   1a612:	4299      	cmp	r1, r3
   1a614:	d102      	bne.n	1a61c <AudioConnection::connect()+0x6c>
   1a616:	e00b      	b.n	1a630 <AudioConnection::connect()+0x80>
   1a618:	4299      	cmp	r1, r3
   1a61a:	d007      	beq.n	1a62c <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
   1a61c:	461a      	mov	r2, r3
   1a61e:	68db      	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
   1a620:	2b00      	cmp	r3, #0
   1a622:	d1f9      	bne.n	1a618 <AudioConnection::connect()+0x68>
			result = 5;
   1a624:	2005      	movs	r0, #5
	__enable_irq();
   1a626:	b662      	cpsie	i
}
   1a628:	bc30      	pop	{r4, r5}
   1a62a:	4770      	bx	lr
			pp = &((*pp)->next_dest);
   1a62c:	f102 040c 	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
   1a630:	680d      	ldr	r5, [r1, #0]
   1a632:	68e8      	ldr	r0, [r5, #12]
		if (p == NULL) 
   1a634:	b1e8      	cbz	r0, 1a672 <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
   1a636:	68c3      	ldr	r3, [r0, #12]
   1a638:	b91b      	cbnz	r3, 1a642 <AudioConnection::connect()+0x92>
   1a63a:	e008      	b.n	1a64e <AudioConnection::connect()+0x9e>
   1a63c:	68da      	ldr	r2, [r3, #12]
   1a63e:	b13a      	cbz	r2, 1a650 <AudioConnection::connect()+0xa0>
   1a640:	4613      	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
   1a642:	4281      	cmp	r1, r0
   1a644:	4618      	mov	r0, r3
   1a646:	d1f9      	bne.n	1a63c <AudioConnection::connect()+0x8c>
					__enable_irq();
   1a648:	b662      	cpsie	i
					return 6;
   1a64a:	2006      	movs	r0, #6
   1a64c:	e7d0      	b.n	1a5f0 <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
   1a64e:	4603      	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
   1a650:	60d9      	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
   1a652:	68cb      	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
   1a654:	2000      	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
   1a656:	6023      	str	r3, [r4, #0]
		src->active = true;
   1a658:	2301      	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
   1a65a:	60c8      	str	r0, [r1, #12]
		src->numConnections++;
   1a65c:	7aaa      	ldrb	r2, [r5, #10]
		src->active = true;
   1a65e:	722b      	strb	r3, [r5, #8]
		src->numConnections++;
   1a660:	441a      	add	r2, r3
   1a662:	72aa      	strb	r2, [r5, #10]
		dst->numConnections++;
   1a664:	684a      	ldr	r2, [r1, #4]
   1a666:	7a94      	ldrb	r4, [r2, #10]
		dst->active = true;
   1a668:	7213      	strb	r3, [r2, #8]
		dst->numConnections++;
   1a66a:	441c      	add	r4, r3
   1a66c:	7294      	strb	r4, [r2, #10]
		isConnected = true;
   1a66e:	740b      	strb	r3, [r1, #16]
		result = 0;
   1a670:	e7d9      	b.n	1a626 <AudioConnection::connect()+0x76>
			src->destination_list = this;
   1a672:	60e9      	str	r1, [r5, #12]
   1a674:	e7ed      	b.n	1a652 <AudioConnection::connect()+0xa2>
   1a676:	bf00      	nop
   1a678:	2000adc4 	.word	0x2000adc4
   1a67c:	2000ae38 	.word	0x2000ae38

0001a680 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
{
   1a680:	b510      	push	{r4, lr}
	if (!isConnected)
   1a682:	7c04      	ldrb	r4, [r0, #16]
{
   1a684:	f89d e008 	ldrb.w	lr, [sp, #8]
	if (!isConnected)
   1a688:	b10c      	cbz	r4, 1a68e <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xe>
}
   1a68a:	2001      	movs	r0, #1
   1a68c:	bd10      	pop	{r4, pc}
		src_index = sourceOutput;
   1a68e:	7202      	strb	r2, [r0, #8]
		dest_index = destinationInput;
   1a690:	f880 e009 	strb.w	lr, [r0, #9]
		dst = &destination;
   1a694:	e9c0 1300 	strd	r1, r3, [r0]
}
   1a698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		result = connect();
   1a69c:	f7ff bf88 	b.w	1a5b0 <AudioConnection::connect()>

0001a6a0 <AudioConnection::disconnect()>:
{
   1a6a0:	b538      	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
   1a6a2:	7c03      	ldrb	r3, [r0, #16]
   1a6a4:	2b00      	cmp	r3, #0
   1a6a6:	d036      	beq.n	1a716 <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
   1a6a8:	6843      	ldr	r3, [r0, #4]
   1a6aa:	4604      	mov	r4, r0
   1a6ac:	7a42      	ldrb	r2, [r0, #9]
   1a6ae:	7a5b      	ldrb	r3, [r3, #9]
   1a6b0:	429a      	cmp	r2, r3
   1a6b2:	d238      	bcs.n	1a726 <AudioConnection::disconnect()+0x86>
	__disable_irq();
   1a6b4:	b672      	cpsid	i
	p = src->destination_list;
   1a6b6:	6801      	ldr	r1, [r0, #0]
   1a6b8:	68cb      	ldr	r3, [r1, #12]
	if (p == NULL) {
   1a6ba:	2b00      	cmp	r3, #0
   1a6bc:	d02d      	beq.n	1a71a <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
   1a6be:	4298      	cmp	r0, r3
   1a6c0:	d033      	beq.n	1a72a <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
   1a6c2:	461a      	mov	r2, r3
   1a6c4:	68db      	ldr	r3, [r3, #12]
   1a6c6:	429c      	cmp	r4, r3
   1a6c8:	d02a      	beq.n	1a720 <AudioConnection::disconnect()+0x80>
		while (p)
   1a6ca:	2b00      	cmp	r3, #0
   1a6cc:	d1f9      	bne.n	1a6c2 <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
   1a6ce:	6862      	ldr	r2, [r4, #4]
   1a6d0:	7a60      	ldrb	r0, [r4, #9]
   1a6d2:	6913      	ldr	r3, [r2, #16]
   1a6d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a6d8:	b148      	cbz	r0, 1a6ee <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
   1a6da:	f7ff fee1 	bl	1a4a0 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
   1a6de:	b672      	cpsid	i
		dst->inputQueue[dest_index] = NULL;
   1a6e0:	6862      	ldr	r2, [r4, #4]
   1a6e2:	2500      	movs	r5, #0
   1a6e4:	7a60      	ldrb	r0, [r4, #9]
   1a6e6:	6913      	ldr	r3, [r2, #16]
	src->numConnections--;
   1a6e8:	6821      	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
   1a6ea:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
   1a6ee:	7a8b      	ldrb	r3, [r1, #10]
   1a6f0:	3b01      	subs	r3, #1
   1a6f2:	b2db      	uxtb	r3, r3
   1a6f4:	728b      	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
   1a6f6:	b903      	cbnz	r3, 1a6fa <AudioConnection::disconnect()+0x5a>
		src->active = false;
   1a6f8:	720b      	strb	r3, [r1, #8]
	dst->numConnections--;
   1a6fa:	7a93      	ldrb	r3, [r2, #10]
   1a6fc:	3b01      	subs	r3, #1
   1a6fe:	b2db      	uxtb	r3, r3
   1a700:	7293      	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
   1a702:	b903      	cbnz	r3, 1a706 <AudioConnection::disconnect()+0x66>
		dst->active = false;
   1a704:	7213      	strb	r3, [r2, #8]
	next_dest = dst->unused;
   1a706:	4b0a      	ldr	r3, [pc, #40]	; (1a730 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
   1a708:	2000      	movs	r0, #0
	next_dest = dst->unused;
   1a70a:	681a      	ldr	r2, [r3, #0]
	isConnected = false;
   1a70c:	7420      	strb	r0, [r4, #16]
	dst->unused = this;
   1a70e:	601c      	str	r4, [r3, #0]
	next_dest = dst->unused;
   1a710:	60e2      	str	r2, [r4, #12]
	__enable_irq();
   1a712:	b662      	cpsie	i
}
   1a714:	bd38      	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
   1a716:	2001      	movs	r0, #1
}
   1a718:	bd38      	pop	{r3, r4, r5, pc}
		__enable_irq();
   1a71a:	b662      	cpsie	i
		return 3;
   1a71c:	2003      	movs	r0, #3
}
   1a71e:	bd38      	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
   1a720:	68e3      	ldr	r3, [r4, #12]
   1a722:	60d3      	str	r3, [r2, #12]
				break;
   1a724:	e7d3      	b.n	1a6ce <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
   1a726:	2002      	movs	r0, #2
}
   1a728:	bd38      	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
   1a72a:	68c3      	ldr	r3, [r0, #12]
			src->destination_list = NULL;
   1a72c:	60cb      	str	r3, [r1, #12]
   1a72e:	e7ce      	b.n	1a6ce <AudioConnection::disconnect()+0x2e>
   1a730:	2000ae38 	.word	0x2000ae38

0001a734 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
   1a734:	b510      	push	{r4, lr}
   1a736:	4604      	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
   1a738:	f7ff ffb2 	bl	1a6a0 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
   1a73c:	4a09      	ldr	r2, [pc, #36]	; (1a764 <AudioConnection::~AudioConnection()+0x30>)
   1a73e:	6813      	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
   1a740:	b143      	cbz	r3, 1a754 <AudioConnection::~AudioConnection()+0x20>
   1a742:	429c      	cmp	r4, r3
   1a744:	d102      	bne.n	1a74c <AudioConnection::~AudioConnection()+0x18>
   1a746:	e008      	b.n	1a75a <AudioConnection::~AudioConnection()+0x26>
   1a748:	429c      	cmp	r4, r3
   1a74a:	d005      	beq.n	1a758 <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
   1a74c:	461a      	mov	r2, r3
   1a74e:	68db      	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
   1a750:	2b00      	cmp	r3, #0
   1a752:	d1f9      	bne.n	1a748 <AudioConnection::~AudioConnection()+0x14>
}
   1a754:	4620      	mov	r0, r4
   1a756:	bd10      	pop	{r4, pc}
		pp = &((*pp)->next_dest);
   1a758:	320c      	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
   1a75a:	68e3      	ldr	r3, [r4, #12]
}
   1a75c:	4620      	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
   1a75e:	6013      	str	r3, [r2, #0]
}
   1a760:	bd10      	pop	{r4, pc}
   1a762:	bf00      	nop
   1a764:	2000ae38 	.word	0x2000ae38

0001a768 <AudioStream::update_setup()>:
	if (update_scheduled) return false;
   1a768:	4b0c      	ldr	r3, [pc, #48]	; (1a79c <AudioStream::update_setup()+0x34>)
   1a76a:	781a      	ldrb	r2, [r3, #0]
   1a76c:	b99a      	cbnz	r2, 1a796 <AudioStream::update_setup()+0x2e>
   1a76e:	4a0c      	ldr	r2, [pc, #48]	; (1a7a0 <AudioStream::update_setup()+0x38>)
   1a770:	490c      	ldr	r1, [pc, #48]	; (1a7a4 <AudioStream::update_setup()+0x3c>)
{
   1a772:	b410      	push	{r4}
   1a774:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   1a778:	480b      	ldr	r0, [pc, #44]	; (1a7a8 <AudioStream::update_setup()+0x40>)
   1a77a:	24d0      	movs	r4, #208	; 0xd0
	update_scheduled = true;
   1a77c:	2201      	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   1a77e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   1a782:	f880 4046 	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   1a786:	2440      	movs	r4, #64	; 0x40
	update_scheduled = true;
   1a788:	4610      	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   1a78a:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
}
   1a78e:	f85d 4b04 	ldr.w	r4, [sp], #4
	update_scheduled = true;
   1a792:	701a      	strb	r2, [r3, #0]
}
   1a794:	4770      	bx	lr
	if (update_scheduled) return false;
   1a796:	2000      	movs	r0, #0
}
   1a798:	4770      	bx	lr
   1a79a:	bf00      	nop
   1a79c:	200136db 	.word	0x200136db
   1a7a0:	2000a000 	.word	0x2000a000
   1a7a4:	0001a379 	.word	0x0001a379
   1a7a8:	e000e400 	.word	0xe000e400

0001a7ac <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
   1a7ac:	b470      	push	{r4, r5, r6}
	uint32_t ch = 0;

	__disable_irq();
   1a7ae:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
   1a7b0:	b921      	cbnz	r1, 1a7bc <DMAChannel::begin(bool)+0x10>
   1a7b2:	6803      	ldr	r3, [r0, #0]
   1a7b4:	b113      	cbz	r3, 1a7bc <DMAChannel::begin(bool)+0x10>
   1a7b6:	7902      	ldrb	r2, [r0, #4]
   1a7b8:	2a0f      	cmp	r2, #15
   1a7ba:	d945      	bls.n	1a848 <DMAChannel::begin(bool)+0x9c>
	  && (dma_channel_allocated_mask & (1 << channel))
   1a7bc:	4c29      	ldr	r4, [pc, #164]	; (1a864 <DMAChannel::begin(bool)+0xb8>)
   1a7be:	8821      	ldrh	r1, [r4, #0]
{
   1a7c0:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
   1a7c2:	fa41 f203 	asr.w	r2, r1, r3
   1a7c6:	f012 0201 	ands.w	r2, r2, #1
   1a7ca:	d008      	beq.n	1a7de <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
   1a7cc:	3301      	adds	r3, #1
   1a7ce:	2b10      	cmp	r3, #16
   1a7d0:	d1f7      	bne.n	1a7c2 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
   1a7d2:	b662      	cpsie	i
			TCD = (TCD_t *)0;
   1a7d4:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
   1a7d6:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
   1a7d8:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	volatile uint8_t *dchpri = &DMA_DCHPRI3;
	dchpri[(ch & 0x1C) | (3 - (ch & 0x03))] |= DMA_DCHPRI_ECP | DMA_DCHPRI_DPA;
}
   1a7da:	bc70      	pop	{r4, r5, r6}
   1a7dc:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
   1a7de:	f04f 0c01 	mov.w	ip, #1
   1a7e2:	fa0c fc03 	lsl.w	ip, ip, r3
   1a7e6:	ea41 010c 	orr.w	r1, r1, ip
   1a7ea:	8021      	strh	r1, [r4, #0]
			__enable_irq();
   1a7ec:	b662      	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   1a7ee:	4d1e      	ldr	r5, [pc, #120]	; (1a868 <DMAChannel::begin(bool)+0xbc>)
	channel = ch;
   1a7f0:	fa5f fc83 	uxtb.w	ip, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   1a7f4:	491d      	ldr	r1, [pc, #116]	; (1a86c <DMAChannel::begin(bool)+0xc0>)
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   1a7f6:	f240 4682 	movw	r6, #1154	; 0x482
	channel = ch;
   1a7fa:	f880 c004 	strb.w	ip, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   1a7fe:	6fec      	ldr	r4, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   1a800:	4419      	add	r1, r3
	dchpri[(ch & 0x1C) | (3 - (ch & 0x03))] |= DMA_DCHPRI_ECP | DMA_DCHPRI_DPA;
   1a802:	f083 0303 	eor.w	r3, r3, #3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   1a806:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   1a80a:	0149      	lsls	r1, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   1a80c:	67ec      	str	r4, [r5, #124]	; 0x7c
	dchpri[(ch & 0x1C) | (3 - (ch & 0x03))] |= DMA_DCHPRI_ECP | DMA_DCHPRI_DPA;
   1a80e:	f5a5 359f 	sub.w	r5, r5, #81408	; 0x13e00
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   1a812:	4c17      	ldr	r4, [pc, #92]	; (1a870 <DMAChannel::begin(bool)+0xc4>)
	dchpri[(ch & 0x1C) | (3 - (ch & 0x03))] |= DMA_DCHPRI_ECP | DMA_DCHPRI_DPA;
   1a814:	f5a5 7580 	sub.w	r5, r5, #256	; 0x100
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   1a818:	6026      	str	r6, [r4, #0]
	DMA_CERQ = ch;
   1a81a:	f884 c01a 	strb.w	ip, [r4, #26]
	DMA_CERR = ch;
   1a81e:	f884 c01e 	strb.w	ip, [r4, #30]
	DMA_CEEI = ch;
   1a822:	f884 c018 	strb.w	ip, [r4, #24]
	DMA_CINT = ch;
   1a826:	f884 c01f 	strb.w	ip, [r4, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   1a82a:	6001      	str	r1, [r0, #0]
	*p++ = 0;
   1a82c:	e9c1 2200 	strd	r2, r2, [r1]
	*p++ = 0;
   1a830:	e9c1 2202 	strd	r2, r2, [r1, #8]
	*p++ = 0;
   1a834:	e9c1 2204 	strd	r2, r2, [r1, #16]
	*p++ = 0;
   1a838:	e9c1 2206 	strd	r2, r2, [r1, #24]
	dchpri[(ch & 0x1C) | (3 - (ch & 0x03))] |= DMA_DCHPRI_ECP | DMA_DCHPRI_DPA;
   1a83c:	5d5a      	ldrb	r2, [r3, r5]
   1a83e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
   1a842:	555a      	strb	r2, [r3, r5]
}
   1a844:	bc70      	pop	{r4, r5, r6}
   1a846:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
   1a848:	4c06      	ldr	r4, [pc, #24]	; (1a864 <DMAChannel::begin(bool)+0xb8>)
   1a84a:	8821      	ldrh	r1, [r4, #0]
   1a84c:	fa41 f502 	asr.w	r5, r1, r2
   1a850:	07ed      	lsls	r5, r5, #31
   1a852:	d5b5      	bpl.n	1a7c0 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
   1a854:	4d05      	ldr	r5, [pc, #20]	; (1a86c <DMAChannel::begin(bool)+0xc0>)
   1a856:	4415      	add	r5, r2
   1a858:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
   1a85c:	d1b0      	bne.n	1a7c0 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
   1a85e:	b662      	cpsie	i
		return;
   1a860:	e7bb      	b.n	1a7da <DMAChannel::begin(bool)+0x2e>
   1a862:	bf00      	nop
   1a864:	200136ce 	.word	0x200136ce
   1a868:	400fc000 	.word	0x400fc000
   1a86c:	02007480 	.word	0x02007480
   1a870:	400e8000 	.word	0x400e8000

0001a874 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
   1a874:	7903      	ldrb	r3, [r0, #4]
   1a876:	2b0f      	cmp	r3, #15
   1a878:	d811      	bhi.n	1a89e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
   1a87a:	4a09      	ldr	r2, [pc, #36]	; (1a8a0 <DMAChannel::release()+0x2c>)
   1a87c:	7693      	strb	r3, [r2, #26]
	__disable_irq();
   1a87e:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
   1a880:	4908      	ldr	r1, [pc, #32]	; (1a8a4 <DMAChannel::release()+0x30>)
   1a882:	2201      	movs	r2, #1
   1a884:	f890 c004 	ldrb.w	ip, [r0, #4]
   1a888:	880b      	ldrh	r3, [r1, #0]
   1a88a:	fa02 f20c 	lsl.w	r2, r2, ip
   1a88e:	ea23 0302 	bic.w	r3, r3, r2
   1a892:	800b      	strh	r3, [r1, #0]
	__enable_irq();
   1a894:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
   1a896:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
   1a898:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
   1a89a:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
   1a89c:	6003      	str	r3, [r0, #0]
}
   1a89e:	4770      	bx	lr
   1a8a0:	400e8000 	.word	0x400e8000
   1a8a4:	200136ce 	.word	0x200136ce

0001a8a8 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1a8a8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   1a8ac:	b672      	cpsid	i
	if (_triggered == false) {
   1a8ae:	7f43      	ldrb	r3, [r0, #29]
   1a8b0:	b95b      	cbnz	r3, 1a8ca <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
   1a8b2:	7f01      	ldrb	r1, [r0, #28]
   1a8b4:	2901      	cmp	r1, #1
{
   1a8b6:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
   1a8b8:	d00b      	beq.n	1a8d2 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
   1a8ba:	2903      	cmp	r1, #3
   1a8bc:	d013      	beq.n	1a8e6 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
   1a8be:	2301      	movs	r3, #1
   1a8c0:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   1a8c2:	b902      	cbnz	r2, 1a8c6 <EventResponder::triggerEventNotImmediate()+0x1e>
   1a8c4:	b662      	cpsie	i
}
   1a8c6:	bc30      	pop	{r4, r5}
   1a8c8:	4770      	bx	lr
   1a8ca:	b90a      	cbnz	r2, 1a8d0 <EventResponder::triggerEventNotImmediate()+0x28>
   1a8cc:	b662      	cpsie	i
   1a8ce:	4770      	bx	lr
   1a8d0:	4770      	bx	lr
			if (firstYield == nullptr) {
   1a8d2:	4c12      	ldr	r4, [pc, #72]	; (1a91c <EventResponder::triggerEventNotImmediate()+0x74>)
   1a8d4:	6821      	ldr	r1, [r4, #0]
   1a8d6:	b1b1      	cbz	r1, 1a906 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
   1a8d8:	4911      	ldr	r1, [pc, #68]	; (1a920 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
   1a8da:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
   1a8dc:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
   1a8de:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
   1a8e0:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
   1a8e2:	6158      	str	r0, [r3, #20]
				lastYield = this;
   1a8e4:	e7eb      	b.n	1a8be <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
   1a8e6:	4d0f      	ldr	r5, [pc, #60]	; (1a924 <EventResponder::triggerEventNotImmediate()+0x7c>)
   1a8e8:	490f      	ldr	r1, [pc, #60]	; (1a928 <EventResponder::triggerEventNotImmediate()+0x80>)
   1a8ea:	682c      	ldr	r4, [r5, #0]
   1a8ec:	b18c      	cbz	r4, 1a912 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
   1a8ee:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
   1a8f0:	680b      	ldr	r3, [r1, #0]
   1a8f2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
   1a8f4:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   1a8f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1a8fa:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
   1a8fe:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   1a900:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
   1a904:	e7db      	b.n	1a8be <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
   1a906:	4b06      	ldr	r3, [pc, #24]	; (1a920 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
   1a908:	6020      	str	r0, [r4, #0]
				lastYield = this;
   1a90a:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
   1a90c:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
   1a910:	e7d5      	b.n	1a8be <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
   1a912:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
   1a916:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
   1a918:	e7ed      	b.n	1a8f6 <EventResponder::triggerEventNotImmediate()+0x4e>
   1a91a:	bf00      	nop
   1a91c:	2000aeb0 	.word	0x2000aeb0
   1a920:	2000aebc 	.word	0x2000aebc
   1a924:	2000aeb8 	.word	0x2000aeb8
   1a928:	2000aeb4 	.word	0x2000aeb4

0001a92c <EventResponder::runFromInterrupt()>:
{
   1a92c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1a92e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   1a932:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   1a934:	4c0c      	ldr	r4, [pc, #48]	; (1a968 <EventResponder::runFromInterrupt()+0x3c>)
   1a936:	6820      	ldr	r0, [r4, #0]
		if (first) {
   1a938:	b180      	cbz	r0, 1a95c <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
   1a93a:	4e0c      	ldr	r6, [pc, #48]	; (1a96c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
   1a93c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
   1a93e:	6943      	ldr	r3, [r0, #20]
   1a940:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
   1a942:	b173      	cbz	r3, 1a962 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
   1a944:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
   1a946:	b902      	cbnz	r2, 1a94a <EventResponder::runFromInterrupt()+0x1e>
   1a948:	b662      	cpsie	i
			(*(first->_function))(*first);
   1a94a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
   1a94c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
   1a94e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1a950:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   1a954:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   1a956:	6820      	ldr	r0, [r4, #0]
		if (first) {
   1a958:	2800      	cmp	r0, #0
   1a95a:	d1f0      	bne.n	1a93e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
   1a95c:	b902      	cbnz	r2, 1a960 <EventResponder::runFromInterrupt()+0x34>
   1a95e:	b662      	cpsie	i
}
   1a960:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
   1a962:	6033      	str	r3, [r6, #0]
   1a964:	e7ef      	b.n	1a946 <EventResponder::runFromInterrupt()+0x1a>
   1a966:	bf00      	nop
   1a968:	2000aeb8 	.word	0x2000aeb8
   1a96c:	2000aeb4 	.word	0x2000aeb4

0001a970 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
   1a970:	f7ff bfdc 	b.w	1a92c <EventResponder::runFromInterrupt()>

0001a974 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   1a974:	4904      	ldr	r1, [pc, #16]	; (1a988 <systick_isr+0x14>)
	systick_millis_count++;
   1a976:	4a05      	ldr	r2, [pc, #20]	; (1a98c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
   1a978:	6849      	ldr	r1, [r1, #4]
   1a97a:	4b05      	ldr	r3, [pc, #20]	; (1a990 <systick_isr+0x1c>)
   1a97c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
   1a97e:	6813      	ldr	r3, [r2, #0]
   1a980:	3301      	adds	r3, #1
   1a982:	6013      	str	r3, [r2, #0]
}
   1a984:	4770      	bx	lr
   1a986:	bf00      	nop
   1a988:	e0001000 	.word	0xe0001000
   1a98c:	20013554 	.word	0x20013554
   1a990:	20013550 	.word	0x20013550

0001a994 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
   1a994:	4770      	bx	lr
   1a996:	bf00      	nop

0001a998 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   1a998:	4770      	bx	lr
   1a99a:	bf00      	nop

0001a99c <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   1a99c:	4770      	bx	lr
   1a99e:	bf00      	nop

0001a9a0 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
   1a9a0:	4770      	bx	lr
   1a9a2:	bf00      	nop

0001a9a4 <pit_isr()>:

//FASTRUN
static void pit_isr()
{
   1a9a4:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   1a9a6:	4c1a      	ldr	r4, [pc, #104]	; (1aa10 <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   1a9a8:	4d1a      	ldr	r5, [pc, #104]	; (1aa14 <pit_isr()+0x70>)
   1a9aa:	6823      	ldr	r3, [r4, #0]
   1a9ac:	42ab      	cmp	r3, r5
   1a9ae:	d002      	beq.n	1a9b6 <pit_isr()+0x12>
   1a9b0:	4a19      	ldr	r2, [pc, #100]	; (1aa18 <pit_isr()+0x74>)
   1a9b2:	68d1      	ldr	r1, [r2, #12]
   1a9b4:	bb29      	cbnz	r1, 1aa02 <pit_isr()+0x5e>
   1a9b6:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   1a9b8:	42ab      	cmp	r3, r5
   1a9ba:	d002      	beq.n	1a9c2 <pit_isr()+0x1e>
   1a9bc:	4a16      	ldr	r2, [pc, #88]	; (1aa18 <pit_isr()+0x74>)
   1a9be:	69d1      	ldr	r1, [r2, #28]
   1a9c0:	b9c9      	cbnz	r1, 1a9f6 <pit_isr()+0x52>
   1a9c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   1a9c4:	42ab      	cmp	r3, r5
   1a9c6:	d002      	beq.n	1a9ce <pit_isr()+0x2a>
   1a9c8:	4a13      	ldr	r2, [pc, #76]	; (1aa18 <pit_isr()+0x74>)
   1a9ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   1a9cc:	b969      	cbnz	r1, 1a9ea <pit_isr()+0x46>
   1a9ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
   1a9d0:	42ab      	cmp	r3, r5
   1a9d2:	d009      	beq.n	1a9e8 <pit_isr()+0x44>
   1a9d4:	4a10      	ldr	r2, [pc, #64]	; (1aa18 <pit_isr()+0x74>)
   1a9d6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   1a9d8:	b131      	cbz	r1, 1a9e8 <pit_isr()+0x44>
   1a9da:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   1a9dc:	681b      	ldr	r3, [r3, #0]
   1a9de:	480f      	ldr	r0, [pc, #60]	; (1aa1c <pit_isr()+0x78>)
   1a9e0:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
   1a9e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a9e6:	4718      	bx	r3
   1a9e8:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   1a9ea:	2101      	movs	r1, #1
   1a9ec:	681b      	ldr	r3, [r3, #0]
   1a9ee:	480c      	ldr	r0, [pc, #48]	; (1aa20 <pit_isr()+0x7c>)
   1a9f0:	62d1      	str	r1, [r2, #44]	; 0x2c
   1a9f2:	4798      	blx	r3
        );
   1a9f4:	e7eb      	b.n	1a9ce <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   1a9f6:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   1a9f8:	681b      	ldr	r3, [r3, #0]
   1a9fa:	480a      	ldr	r0, [pc, #40]	; (1aa24 <pit_isr()+0x80>)
   1a9fc:	61d1      	str	r1, [r2, #28]
   1a9fe:	4798      	blx	r3
        );
   1aa00:	e7df      	b.n	1a9c2 <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   1aa02:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
   1aa04:	681b      	ldr	r3, [r3, #0]
   1aa06:	f104 0008 	add.w	r0, r4, #8
   1aa0a:	60d1      	str	r1, [r2, #12]
   1aa0c:	4798      	blx	r3
        );
   1aa0e:	e7d2      	b.n	1a9b6 <pit_isr()+0x12>
   1aa10:	2000a2c0 	.word	0x2000a2c0
   1aa14:	20003ab8 	.word	0x20003ab8
   1aa18:	40084100 	.word	0x40084100
   1aa1c:	2000a310 	.word	0x2000a310
   1aa20:	2000a2f8 	.word	0x2000a2f8
   1aa24:	2000a2e0 	.word	0x2000a2e0

0001aa28 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   1aa28:	b538      	push	{r3, r4, r5, lr}
   1aa2a:	4c06      	ldr	r4, [pc, #24]	; (1aa44 <__tcf_0+0x1c>)
   1aa2c:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   1aa30:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1aa34:	4620      	mov	r0, r4
   1aa36:	3c18      	subs	r4, #24
   1aa38:	68db      	ldr	r3, [r3, #12]
   1aa3a:	4798      	blx	r3
   1aa3c:	42ac      	cmp	r4, r5
   1aa3e:	d1f7      	bne.n	1aa30 <__tcf_0+0x8>
   1aa40:	bd38      	pop	{r3, r4, r5, pc}
   1aa42:	bf00      	nop
   1aa44:	2000a310 	.word	0x2000a310

0001aa48 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
   1aa48:	6803      	ldr	r3, [r0, #0]
{
   1aa4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa4e:	4604      	mov	r4, r0
   1aa50:	b088      	sub	sp, #32
   1aa52:	4617      	mov	r7, r2
	if (channel) {
   1aa54:	2b00      	cmp	r3, #0
   1aa56:	d04b      	beq.n	1aaf0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
   1aa58:	2200      	movs	r2, #0
   1aa5a:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
   1aa5c:	2201      	movs	r2, #1
   1aa5e:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
   1aa60:	4d30      	ldr	r5, [pc, #192]	; (1ab24 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
   1aa62:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   1aa64:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 1ab48 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
   1aa68:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
   1aa6a:	f851 3b08 	ldr.w	r3, [r1], #8
   1aa6e:	112d      	asrs	r5, r5, #4
   1aa70:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
   1aa72:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   1aa74:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
   1aa78:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   1aa7a:	00f6      	lsls	r6, r6, #3
   1aa7c:	f106 0008 	add.w	r0, r6, #8
   1aa80:	f858 3006 	ldr.w	r3, [r8, r6]
   1aa84:	4440      	add	r0, r8
   1aa86:	68db      	ldr	r3, [r3, #12]
   1aa88:	9001      	str	r0, [sp, #4]
   1aa8a:	4798      	blx	r3
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
   1aa8c:	4a26      	ldr	r2, [pc, #152]	; (1ab28 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
   1aa8e:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
   1aa90:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
   1aa94:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
   1aa96:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
   1aa9a:	689b      	ldr	r3, [r3, #8]
   1aa9c:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   1aa9e:	9b02      	ldr	r3, [sp, #8]
   1aaa0:	a804      	add	r0, sp, #16
   1aaa2:	68db      	ldr	r3, [r3, #12]
   1aaa4:	4798      	blx	r3
	channel->LDVAL = cycles;
   1aaa6:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
   1aaa8:	2203      	movs	r2, #3
   1aaaa:	4820      	ldr	r0, [pc, #128]	; (1ab2c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
   1aaac:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
   1aaae:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
   1aab0:	4a1f      	ldr	r2, [pc, #124]	; (1ab30 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
   1aab2:	7923      	ldrb	r3, [r4, #4]
   1aab4:	4c1f      	ldr	r4, [pc, #124]	; (1ab34 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
   1aab6:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   1aab8:	7813      	ldrb	r3, [r2, #0]
   1aaba:	7851      	ldrb	r1, [r2, #1]
   1aabc:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
   1aac0:	428b      	cmp	r3, r1
   1aac2:	bf28      	it	cs
   1aac4:	460b      	movcs	r3, r1
   1aac6:	7891      	ldrb	r1, [r2, #2]
   1aac8:	78d2      	ldrb	r2, [r2, #3]
   1aaca:	428b      	cmp	r3, r1
   1aacc:	bf28      	it	cs
   1aace:	460b      	movcs	r3, r1
   1aad0:	4293      	cmp	r3, r2
   1aad2:	bf28      	it	cs
   1aad4:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   1aad6:	4c18      	ldr	r4, [pc, #96]	; (1ab38 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
   1aad8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1aadc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
   1aae0:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   1aae2:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
   1aae6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
   1aaea:	b008      	add	sp, #32
   1aaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   1aaf0:	4a12      	ldr	r2, [pc, #72]	; (1ab3c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
   1aaf2:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1aaf4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   1aaf8:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
   1aafa:	2201      	movs	r2, #1
   1aafc:	4b10      	ldr	r3, [pc, #64]	; (1ab40 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
   1aafe:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
   1ab00:	4a10      	ldr	r2, [pc, #64]	; (1ab44 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
   1ab02:	4613      	mov	r3, r2
   1ab04:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   1ab06:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
   1ab08:	6898      	ldr	r0, [r3, #8]
   1ab0a:	2800      	cmp	r0, #0
   1ab0c:	d0a8      	beq.n	1aa60 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   1ab0e:	3310      	adds	r3, #16
   1ab10:	4293      	cmp	r3, r2
   1ab12:	6023      	str	r3, [r4, #0]
   1ab14:	d1f8      	bne.n	1ab08 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
   1ab16:	2300      	movs	r3, #0
				return false;
   1ab18:	4618      	mov	r0, r3
				channel = NULL;
   1ab1a:	6023      	str	r3, [r4, #0]
}
   1ab1c:	b008      	add	sp, #32
   1ab1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab22:	bf00      	nop
   1ab24:	bff7bf00 	.word	0xbff7bf00
   1ab28:	20003ab8 	.word	0x20003ab8
   1ab2c:	2000a000 	.word	0x2000a000
   1ab30:	20009440 	.word	0x20009440
   1ab34:	0001a9a5 	.word	0x0001a9a5
   1ab38:	e000e400 	.word	0xe000e400
   1ab3c:	400fc000 	.word	0x400fc000
   1ab40:	40084000 	.word	0x40084000
   1ab44:	40084100 	.word	0x40084100
   1ab48:	2000a2c0 	.word	0x2000a2c0

0001ab4c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
   1ab4c:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
   1ab4e:	4b06      	ldr	r3, [pc, #24]	; (1ab68 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   1ab50:	2000      	movs	r0, #0
   1ab52:	4c06      	ldr	r4, [pc, #24]	; (1ab6c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
   1ab54:	4a06      	ldr	r2, [pc, #24]	; (1ab70 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
   1ab56:	601c      	str	r4, [r3, #0]
   1ab58:	619c      	str	r4, [r3, #24]
   1ab5a:	631c      	str	r4, [r3, #48]	; 0x30
   1ab5c:	649c      	str	r4, [r3, #72]	; 0x48
   1ab5e:	4905      	ldr	r1, [pc, #20]	; (1ab74 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
   1ab60:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   1ab64:	f005 b810 	b.w	1fb88 <__aeabi_atexit>
   1ab68:	2000a2c0 	.word	0x2000a2c0
   1ab6c:	20003ab8 	.word	0x20003ab8
   1ab70:	20009460 	.word	0x20009460
   1ab74:	0001aa29 	.word	0x0001aa29

0001ab78 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   1ab78:	4608      	mov	r0, r1
   1ab7a:	f002 bc99 	b.w	1d4b0 <usb_serial_putchar>
   1ab7e:	bf00      	nop

0001ab80 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
		base = 10;
   1ab80:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
   1ab82:	b570      	push	{r4, r5, r6, lr}
		base = 10;
   1ab84:	bf08      	it	eq
   1ab86:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
   1ab88:	b08a      	sub	sp, #40	; 0x28
	if (n == 0) {
   1ab8a:	b391      	cbz	r1, 1abf2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		i = sizeof(buf) - 1;
   1ab8c:	f04f 0e21 	mov.w	lr, #33	; 0x21
   1ab90:	e001      	b.n	1ab96 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
			i--;
   1ab92:	fa5f fe86 	uxtb.w	lr, r6
   1ab96:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
			digit = n % base;
   1ab9a:	fbb1 f5f2 	udiv	r5, r1, r2
   1ab9e:	fb02 1415 	mls	r4, r2, r5, r1
   1aba2:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1aba6:	2c09      	cmp	r4, #9
   1aba8:	f10c 0437 	add.w	r4, ip, #55	; 0x37
   1abac:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   1abb0:	bf98      	it	ls
   1abb2:	fa5f f48c 	uxtbls.w	r4, ip
   1abb6:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
   1abba:	bf88      	it	hi
   1abbc:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
   1abbe:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1abc0:	44ec      	add	ip, sp
			n /= base;
   1abc2:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1abc4:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
   1abc8:	d2e3      	bcs.n	1ab92 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
	if (sign) {
   1abca:	b14b      	cbz	r3, 1abe0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
   1abcc:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
		buf[i] = '-';
   1abd0:	222d      	movs	r2, #45	; 0x2d
		i--;
   1abd2:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
   1abd6:	f10e 0328 	add.w	r3, lr, #40	; 0x28
   1abda:	446b      	add	r3, sp
   1abdc:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
   1abe0:	6803      	ldr	r3, [r0, #0]
   1abe2:	a901      	add	r1, sp, #4
   1abe4:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
   1abe8:	685b      	ldr	r3, [r3, #4]
   1abea:	4471      	add	r1, lr
   1abec:	4798      	blx	r3
}
   1abee:	b00a      	add	sp, #40	; 0x28
   1abf0:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
   1abf2:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
   1abf4:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
   1abf8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
   1abfc:	e7e5      	b.n	1abca <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
   1abfe:	bf00      	nop

0001ac00 <Print::write(unsigned char const*, unsigned int)>:
{
   1ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
   1ac04:	460c      	mov	r4, r1
   1ac06:	b1d1      	cbz	r1, 1ac3e <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
   1ac08:	b1ea      	cbz	r2, 1ac46 <Print::write(unsigned char const*, unsigned int)+0x46>
   1ac0a:	4680      	mov	r8, r0
   1ac0c:	188e      	adds	r6, r1, r2
	size_t count = 0;
   1ac0e:	2500      	movs	r5, #0
   1ac10:	4f0e      	ldr	r7, [pc, #56]	; (1ac4c <Print::write(unsigned char const*, unsigned int)+0x4c>)
   1ac12:	e004      	b.n	1ac1e <Print::write(unsigned char const*, unsigned int)+0x1e>
   1ac14:	f002 fc4c 	bl	1d4b0 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
   1ac18:	42b4      	cmp	r4, r6
   1ac1a:	4405      	add	r5, r0
   1ac1c:	d00c      	beq.n	1ac38 <Print::write(unsigned char const*, unsigned int)+0x38>
   1ac1e:	f8d8 3000 	ldr.w	r3, [r8]
   1ac22:	f814 0b01 	ldrb.w	r0, [r4], #1
   1ac26:	681b      	ldr	r3, [r3, #0]
   1ac28:	42bb      	cmp	r3, r7
   1ac2a:	d0f3      	beq.n	1ac14 <Print::write(unsigned char const*, unsigned int)+0x14>
   1ac2c:	4601      	mov	r1, r0
   1ac2e:	4640      	mov	r0, r8
   1ac30:	4798      	blx	r3
   1ac32:	42b4      	cmp	r4, r6
   1ac34:	4405      	add	r5, r0
   1ac36:	d1f2      	bne.n	1ac1e <Print::write(unsigned char const*, unsigned int)+0x1e>
}
   1ac38:	4628      	mov	r0, r5
   1ac3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
   1ac3e:	460d      	mov	r5, r1
}
   1ac40:	4628      	mov	r0, r5
   1ac42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
   1ac46:	4615      	mov	r5, r2
   1ac48:	e7f6      	b.n	1ac38 <Print::write(unsigned char const*, unsigned int)+0x38>
   1ac4a:	bf00      	nop
   1ac4c:	0001ab79 	.word	0x0001ab79

0001ac50 <Print::print(String const&)>:
{
   1ac50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
   1ac54:	688c      	ldr	r4, [r1, #8]
   1ac56:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
   1ac58:	b1dc      	cbz	r4, 1ac92 <Print::print(String const&)+0x42>
	unsigned int index = 0;
   1ac5a:	2500      	movs	r5, #0
   1ac5c:	4688      	mov	r8, r1
   1ac5e:	4606      	mov	r6, r0
	size_t count = 0;
   1ac60:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
   1ac62:	462b      	mov	r3, r5
   1ac64:	2221      	movs	r2, #33	; 0x21
   1ac66:	a901      	add	r1, sp, #4
   1ac68:	4640      	mov	r0, r8
   1ac6a:	f000 faaf 	bl	1b1cc <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
   1ac6e:	2c20      	cmp	r4, #32
   1ac70:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
   1ac72:	6833      	ldr	r3, [r6, #0]
   1ac74:	bf28      	it	cs
   1ac76:	2220      	movcs	r2, #32
   1ac78:	a901      	add	r1, sp, #4
   1ac7a:	4630      	mov	r0, r6
   1ac7c:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
   1ac7e:	1aa4      	subs	r4, r4, r2
		index += nbytes;
   1ac80:	4415      	add	r5, r2
		count += write(buffer, nbytes);
   1ac82:	4798      	blx	r3
   1ac84:	4407      	add	r7, r0
	while (len > 0) {
   1ac86:	2c00      	cmp	r4, #0
   1ac88:	d1eb      	bne.n	1ac62 <Print::print(String const&)+0x12>
}
   1ac8a:	4638      	mov	r0, r7
   1ac8c:	b00a      	add	sp, #40	; 0x28
   1ac8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
   1ac92:	4627      	mov	r7, r4
}
   1ac94:	4638      	mov	r0, r7
   1ac96:	b00a      	add	sp, #40	; 0x28
   1ac98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ac9c <Print::print(long)>:
	if (n < 0) {
   1ac9c:	2900      	cmp	r1, #0
   1ac9e:	db03      	blt.n	1aca8 <Print::print(long)+0xc>
	uint8_t sign=0;
   1aca0:	2300      	movs	r3, #0
	if (base == 0) {
   1aca2:	220a      	movs	r2, #10
   1aca4:	f7ff bf6c 	b.w	1ab80 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
   1aca8:	4249      	negs	r1, r1
		sign = '-';
   1acaa:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
   1acac:	220a      	movs	r2, #10
   1acae:	f7ff bf67 	b.w	1ab80 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
   1acb2:	bf00      	nop

0001acb4 <Print::println()>:
{
   1acb4:	b500      	push	{lr}
	return write(buf, 2);
   1acb6:	6803      	ldr	r3, [r0, #0]
{
   1acb8:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
   1acba:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
   1acbe:	2202      	movs	r2, #2
   1acc0:	a901      	add	r1, sp, #4
   1acc2:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
   1acc4:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
   1acc8:	4798      	blx	r3
}
   1acca:	b003      	add	sp, #12
   1accc:	f85d fb04 	ldr.w	pc, [sp], #4

0001acd0 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   1acd0:	4b05      	ldr	r3, [pc, #20]	; (1ace8 <_write+0x18>)
   1acd2:	2802      	cmp	r0, #2
   1acd4:	bf88      	it	hi
   1acd6:	4603      	movhi	r3, r0
{
   1acd8:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   1acda:	681c      	ldr	r4, [r3, #0]
   1acdc:	4618      	mov	r0, r3
   1acde:	6863      	ldr	r3, [r4, #4]
}
   1ace0:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   1ace4:	4718      	bx	r3
   1ace6:	bf00      	nop
   1ace8:	20008ba0 	.word	0x20008ba0

0001acec <Print::printf(char const*, ...)>:
{
   1acec:	b40e      	push	{r1, r2, r3}
   1acee:	b500      	push	{lr}
   1acf0:	b082      	sub	sp, #8
   1acf2:	aa03      	add	r2, sp, #12
   1acf4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
   1acf8:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
   1acfa:	f007 fa23 	bl	22144 <vdprintf>
}
   1acfe:	b002      	add	sp, #8
   1ad00:	f85d eb04 	ldr.w	lr, [sp], #4
   1ad04:	b003      	add	sp, #12
   1ad06:	4770      	bx	lr

0001ad08 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
   1ad08:	eeb4 0b40 	vcmp.f64	d0, d0
{
   1ad0c:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
   1ad0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   1ad12:	4605      	mov	r5, r0
   1ad14:	ed2d 8b02 	vpush	{d8}
   1ad18:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
   1ad1a:	d67c      	bvs.n	1ae16 <Print::printFloat(double, unsigned char)+0x10e>
  { return __builtin_isinf(__x); }
   1ad1c:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
   1ad20:	ed9f 6b47 	vldr	d6, [pc, #284]	; 1ae40 <Print::printFloat(double, unsigned char)+0x138>
   1ad24:	eeb4 7b46 	vcmp.f64	d7, d6
   1ad28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad2c:	dc6b      	bgt.n	1ae06 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
   1ad2e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 1ae48 <Print::printFloat(double, unsigned char)+0x140>
   1ad32:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1ad36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad3a:	dc5a      	bgt.n	1adf2 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
   1ad3c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 1ae50 <Print::printFloat(double, unsigned char)+0x148>
   1ad40:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1ad44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad48:	d453      	bmi.n	1adf2 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
   1ad4a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   1ad4e:	460c      	mov	r4, r1
   1ad50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ad54:	d45b      	bmi.n	1ae0e <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
   1ad56:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
   1ad58:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
   1ad5c:	2c00      	cmp	r4, #0
   1ad5e:	d05e      	beq.n	1ae1e <Print::printFloat(double, unsigned char)+0x116>
   1ad60:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
   1ad64:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 1ae58 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
   1ad68:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
   1ad6c:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
   1ad70:	fa5f f28c 	uxtb.w	r2, ip
   1ad74:	42a2      	cmp	r2, r4
   1ad76:	d3f7      	bcc.n	1ad68 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
   1ad78:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
   1ad7c:	220a      	movs	r2, #10
   1ad7e:	4628      	mov	r0, r5
   1ad80:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
   1ad84:	eeb8 8b67 	vcvt.f64.u32	d8, s15
   1ad88:	ee17 1a90 	vmov	r1, s15
   1ad8c:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
   1ad90:	f7ff fef6 	bl	1ab80 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
   1ad94:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
   1ad96:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
   1ad9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
   1ad9e:	4606      	mov	r6, r0
		buf[0] = '.';
   1ada0:	bf28      	it	cs
   1ada2:	240f      	movcs	r4, #15
   1ada4:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
   1ada8:	f10d 0309 	add.w	r3, sp, #9
   1adac:	aa02      	add	r2, sp, #8
   1adae:	1e61      	subs	r1, r4, #1
   1adb0:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
   1adb4:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
   1adb8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
   1adbc:	edcd 7a01 	vstr	s15, [sp, #4]
   1adc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
   1adc4:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
   1adc8:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
   1adca:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
   1adce:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
   1add2:	4291      	cmp	r1, r2
			remainder -= n; 
   1add4:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
   1add8:	d1ec      	bne.n	1adb4 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
   1adda:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
   1addc:	3401      	adds	r4, #1
		count += write(buf, count);
   1adde:	a902      	add	r1, sp, #8
   1ade0:	4628      	mov	r0, r5
   1ade2:	685b      	ldr	r3, [r3, #4]
   1ade4:	b2e2      	uxtb	r2, r4
   1ade6:	4798      	blx	r3
	}
	return count;
}
   1ade8:	4630      	mov	r0, r6
   1adea:	b006      	add	sp, #24
   1adec:	ecbd 8b02 	vpop	{d8}
   1adf0:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
   1adf2:	682b      	ldr	r3, [r5, #0]
   1adf4:	2203      	movs	r2, #3
   1adf6:	491a      	ldr	r1, [pc, #104]	; (1ae60 <Print::printFloat(double, unsigned char)+0x158>)
   1adf8:	685b      	ldr	r3, [r3, #4]
   1adfa:	b006      	add	sp, #24
   1adfc:	ecbd 8b02 	vpop	{d8}
   1ae00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ae04:	4718      	bx	r3
   1ae06:	6803      	ldr	r3, [r0, #0]
   1ae08:	2203      	movs	r2, #3
   1ae0a:	4916      	ldr	r1, [pc, #88]	; (1ae64 <Print::printFloat(double, unsigned char)+0x15c>)
   1ae0c:	e7f4      	b.n	1adf8 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
   1ae0e:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
   1ae12:	2301      	movs	r3, #1
   1ae14:	e7a0      	b.n	1ad58 <Print::printFloat(double, unsigned char)+0x50>
   1ae16:	6803      	ldr	r3, [r0, #0]
   1ae18:	2203      	movs	r2, #3
   1ae1a:	4913      	ldr	r1, [pc, #76]	; (1ae68 <Print::printFloat(double, unsigned char)+0x160>)
   1ae1c:	e7ec      	b.n	1adf8 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
   1ae1e:	ee30 0b07 	vadd.f64	d0, d0, d7
   1ae22:	220a      	movs	r2, #10
   1ae24:	4628      	mov	r0, r5
   1ae26:	eefc 7bc0 	vcvt.u32.f64	s15, d0
   1ae2a:	ee17 1a90 	vmov	r1, s15
}
   1ae2e:	b006      	add	sp, #24
   1ae30:	ecbd 8b02 	vpop	{d8}
   1ae34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ae38:	f7ff bea2 	b.w	1ab80 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
   1ae3c:	f3af 8000 	nop.w
   1ae40:	ffffffff 	.word	0xffffffff
   1ae44:	7fefffff 	.word	0x7fefffff
   1ae48:	e0000000 	.word	0xe0000000
   1ae4c:	41efffff 	.word	0x41efffff
   1ae50:	e0000000 	.word	0xe0000000
   1ae54:	c1efffff 	.word	0xc1efffff
   1ae58:	9999999a 	.word	0x9999999a
   1ae5c:	3fb99999 	.word	0x3fb99999
   1ae60:	20003ab4 	.word	0x20003ab4
   1ae64:	20003ab0 	.word	0x20003ab0
   1ae68:	20003aac 	.word	0x20003aac

0001ae6c <random(long, long)>:
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
   1ae6c:	4288      	cmp	r0, r1
   1ae6e:	db00      	blt.n	1ae72 <random(long, long)+0x6>
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
}
   1ae70:	4770      	bx	lr
{
   1ae72:	b430      	push	{r4, r5}
	x = seed;
   1ae74:	4c12      	ldr	r4, [pc, #72]	; (1aec0 <random(long, long)+0x54>)
	int32_t diff = howbig - howsmall;
   1ae76:	1a09      	subs	r1, r1, r0
	x = seed;
   1ae78:	6823      	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
   1ae7a:	b1eb      	cbz	r3, 1aeb8 <random(long, long)+0x4c>
	lo = x % 127773;
   1ae7c:	4a11      	ldr	r2, [pc, #68]	; (1aec4 <random(long, long)+0x58>)
   1ae7e:	4d12      	ldr	r5, [pc, #72]	; (1aec8 <random(long, long)+0x5c>)
   1ae80:	fb82 2c03 	smull	r2, ip, r2, r3
   1ae84:	17da      	asrs	r2, r3, #31
   1ae86:	449c      	add	ip, r3
   1ae88:	ebc2 422c 	rsb	r2, r2, ip, asr #16
	x = 16807 * lo - 2836 * hi;
   1ae8c:	f244 1ca7 	movw	ip, #16807	; 0x41a7
	lo = x % 127773;
   1ae90:	fb05 3312 	mls	r3, r5, r2, r3
	x = 16807 * lo - 2836 * hi;
   1ae94:	4d0d      	ldr	r5, [pc, #52]	; (1aecc <random(long, long)+0x60>)
   1ae96:	fb05 f202 	mul.w	r2, r5, r2
   1ae9a:	fb0c 2203 	mla	r2, ip, r3, r2
	if (x < 0) x += 0x7FFFFFFF;
   1ae9e:	2a00      	cmp	r2, #0
   1aea0:	da0c      	bge.n	1aebc <random(long, long)+0x50>
   1aea2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1aea6:	4413      	add	r3, r2
	seed = x;
   1aea8:	6023      	str	r3, [r4, #0]
	return random() % howbig;
   1aeaa:	fbb3 f2f1 	udiv	r2, r3, r1
   1aeae:	fb01 3312 	mls	r3, r1, r2, r3
}
   1aeb2:	bc30      	pop	{r4, r5}
	return random(diff) + howsmall;
   1aeb4:	4418      	add	r0, r3
}
   1aeb6:	4770      	bx	lr
   1aeb8:	4b05      	ldr	r3, [pc, #20]	; (1aed0 <random(long, long)+0x64>)
   1aeba:	e7f5      	b.n	1aea8 <random(long, long)+0x3c>
	seed = x;
   1aebc:	4613      	mov	r3, r2
   1aebe:	e7f3      	b.n	1aea8 <random(long, long)+0x3c>
   1aec0:	2000ad88 	.word	0x2000ad88
   1aec4:	834e0b5f 	.word	0x834e0b5f
   1aec8:	0001f31d 	.word	0x0001f31d
   1aecc:	fffff4ec 	.word	0xfffff4ec
   1aed0:	1f0cce42 	.word	0x1f0cce42

0001aed4 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
   1aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   1aed6:	2600      	movs	r6, #0
String::String(const char *cstr)
   1aed8:	4604      	mov	r4, r0
	capacity = 0;
   1aeda:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
   1aede:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
   1aee0:	b129      	cbz	r1, 1aeee <String::String(char const*)+0x1a>
   1aee2:	4608      	mov	r0, r1
   1aee4:	460d      	mov	r5, r1
   1aee6:	f007 fc2b 	bl	22740 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
   1aeea:	4607      	mov	r7, r0
   1aeec:	b908      	cbnz	r0, 1aef2 <String::String(char const*)+0x1e>
}
   1aeee:	4620      	mov	r0, r4
   1aef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1aef2:	3001      	adds	r0, #1
   1aef4:	f005 faf2 	bl	204dc <malloc>
	if (newbuffer) {
   1aef8:	2800      	cmp	r0, #0
   1aefa:	d0f8      	beq.n	1aeee <String::String(char const*)+0x1a>
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
   1aefc:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
   1aefe:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
   1af00:	6020      	str	r0, [r4, #0]
	len = length;
   1af02:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
   1af06:	f007 fb37 	bl	22578 <strcpy>
}
   1af0a:	4620      	mov	r0, r4
   1af0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af0e:	bf00      	nop

0001af10 <String::String(String const&)>:
String::String(const String &value)
   1af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   1af12:	4288      	cmp	r0, r1
	buffer = NULL;
   1af14:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
   1af18:	4604      	mov	r4, r0
	len = 0;
   1af1a:	6085      	str	r5, [r0, #8]
	capacity = 0;
   1af1c:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
   1af20:	d002      	beq.n	1af28 <String::String(String const&)+0x18>
   1af22:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
   1af24:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
   1af26:	b90e      	cbnz	r6, 1af2c <String::String(String const&)+0x1c>
}
   1af28:	4620      	mov	r0, r4
   1af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1af2c:	1c70      	adds	r0, r6, #1
   1af2e:	f005 fad5 	bl	204dc <malloc>
	if (newbuffer) {
   1af32:	2800      	cmp	r0, #0
   1af34:	d0f8      	beq.n	1af28 <String::String(String const&)+0x18>
	strcpy(buffer, cstr);
   1af36:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
   1af38:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
   1af3a:	6020      	str	r0, [r4, #0]
	len = length;
   1af3c:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
   1af40:	f007 fb1a 	bl	22578 <strcpy>
}
   1af44:	4620      	mov	r0, r4
   1af46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001af48 <String::~String()>:
String::~String()
   1af48:	b510      	push	{r4, lr}
   1af4a:	4604      	mov	r4, r0
	free(buffer);
   1af4c:	6800      	ldr	r0, [r0, #0]
   1af4e:	f005 facd 	bl	204ec <free>
}
   1af52:	4620      	mov	r0, r4
   1af54:	bd10      	pop	{r4, pc}
   1af56:	bf00      	nop

0001af58 <String::copy(char const*, unsigned int)>:
{
   1af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af5a:	4604      	mov	r4, r0
	if (length == 0) {
   1af5c:	4615      	mov	r5, r2
   1af5e:	b932      	cbnz	r2, 1af6e <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
   1af60:	6803      	ldr	r3, [r0, #0]
   1af62:	b103      	cbz	r3, 1af66 <String::copy(char const*, unsigned int)+0xe>
   1af64:	701a      	strb	r2, [r3, #0]
		len = 0;
   1af66:	2300      	movs	r3, #0
}
   1af68:	4620      	mov	r0, r4
		len = 0;
   1af6a:	60a3      	str	r3, [r4, #8]
}
   1af6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
   1af6e:	6843      	ldr	r3, [r0, #4]
   1af70:	460e      	mov	r6, r1
   1af72:	429a      	cmp	r2, r3
   1af74:	d91c      	bls.n	1afb0 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1af76:	1c51      	adds	r1, r2, #1
   1af78:	6800      	ldr	r0, [r0, #0]
   1af7a:	f005 fd7b 	bl	20a74 <realloc>
	if (newbuffer) {
   1af7e:	4607      	mov	r7, r0
   1af80:	b160      	cbz	r0, 1af9c <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
   1af82:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
   1af84:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
   1af88:	b90b      	cbnz	r3, 1af8e <String::copy(char const*, unsigned int)+0x36>
   1af8a:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
   1af8c:	6827      	ldr	r7, [r4, #0]
   1af8e:	4631      	mov	r1, r6
   1af90:	4638      	mov	r0, r7
	len = length;
   1af92:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
   1af94:	f007 faf0 	bl	22578 <strcpy>
}
   1af98:	4620      	mov	r0, r4
   1af9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
   1af9c:	6820      	ldr	r0, [r4, #0]
   1af9e:	b110      	cbz	r0, 1afa6 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
   1afa0:	f005 faa4 	bl	204ec <free>
			buffer = NULL;
   1afa4:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
   1afa6:	2300      	movs	r3, #0
}
   1afa8:	4620      	mov	r0, r4
		len = capacity = 0;
   1afaa:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
   1afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
   1afb0:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
   1afb2:	4631      	mov	r1, r6
	len = length;
   1afb4:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
   1afb6:	4638      	mov	r0, r7
   1afb8:	f007 fade 	bl	22578 <strcpy>
	return *this;
   1afbc:	e7ec      	b.n	1af98 <String::copy(char const*, unsigned int)+0x40>
   1afbe:	bf00      	nop

0001afc0 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
   1afc0:	b510      	push	{r4, lr}
	buffer = NULL;
   1afc2:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
   1afc4:	b08a      	sub	sp, #40	; 0x28
   1afc6:	4604      	mov	r4, r0
	itoa(value, buf, base);
   1afc8:	4608      	mov	r0, r1
   1afca:	a901      	add	r1, sp, #4
	len = 0;
   1afcc:	60a3      	str	r3, [r4, #8]
	capacity = 0;
   1afce:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
   1afd2:	f005 fa6d 	bl	204b0 <itoa>
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
   1afd6:	a801      	add	r0, sp, #4
   1afd8:	f007 fbb2 	bl	22740 <strlen>
   1afdc:	a901      	add	r1, sp, #4
   1afde:	4602      	mov	r2, r0
   1afe0:	4620      	mov	r0, r4
   1afe2:	f7ff ffb9 	bl	1af58 <String::copy(char const*, unsigned int)>
}
   1afe6:	4620      	mov	r0, r4
   1afe8:	b00a      	add	sp, #40	; 0x28
   1afea:	bd10      	pop	{r4, pc}

0001afec <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
   1afec:	b530      	push	{r4, r5, lr}
	buffer = NULL;
   1afee:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
   1aff0:	4604      	mov	r4, r0
   1aff2:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
   1aff4:	1c88      	adds	r0, r1, #2
	len = 0;
   1aff6:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
   1aff8:	466a      	mov	r2, sp
	capacity = 0;
   1affa:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
   1affe:	f000 fef3 	bl	1bde8 <dtostrf>
	if (cstr) {
   1b002:	4605      	mov	r5, r0
   1b004:	b148      	cbz	r0, 1b01a <String::String(float, unsigned char)+0x2e>
		copy(cstr, strlen(cstr));
   1b006:	f007 fb9b 	bl	22740 <strlen>
   1b00a:	4629      	mov	r1, r5
   1b00c:	4602      	mov	r2, r0
   1b00e:	4620      	mov	r0, r4
   1b010:	f7ff ffa2 	bl	1af58 <String::copy(char const*, unsigned int)>
}
   1b014:	4620      	mov	r0, r4
   1b016:	b00b      	add	sp, #44	; 0x2c
   1b018:	bd30      	pop	{r4, r5, pc}
	} else {
		len = 0;
   1b01a:	60a0      	str	r0, [r4, #8]
}
   1b01c:	4620      	mov	r0, r4
   1b01e:	b00b      	add	sp, #44	; 0x2c
   1b020:	bd30      	pop	{r4, r5, pc}
   1b022:	bf00      	nop

0001b024 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
   1b024:	4281      	cmp	r1, r0
   1b026:	d003      	beq.n	1b030 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
   1b028:	688a      	ldr	r2, [r1, #8]
   1b02a:	6809      	ldr	r1, [r1, #0]
   1b02c:	f7ff bf94 	b.w	1af58 <String::copy(char const*, unsigned int)>
}
   1b030:	4770      	bx	lr
   1b032:	bf00      	nop

0001b034 <String::operator=(String&&)>:
	if (this != &rval) move(rval);
   1b034:	4288      	cmp	r0, r1
{
   1b036:	b538      	push	{r3, r4, r5, lr}
   1b038:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
   1b03a:	d00e      	beq.n	1b05a <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
   1b03c:	6800      	ldr	r0, [r0, #0]
   1b03e:	460c      	mov	r4, r1
   1b040:	b108      	cbz	r0, 1b046 <String::operator=(String&&)+0x12>
   1b042:	f005 fa53 	bl	204ec <free>
	len = rhs.len;
   1b046:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
   1b048:	2300      	movs	r3, #0
	capacity = rhs.capacity;
   1b04a:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
   1b04e:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
   1b050:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
   1b054:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
   1b058:	60a3      	str	r3, [r4, #8]
}
   1b05a:	4628      	mov	r0, r5
   1b05c:	bd38      	pop	{r3, r4, r5, pc}
   1b05e:	bf00      	nop

0001b060 <String::operator=(char const*)>:
{
   1b060:	b538      	push	{r3, r4, r5, lr}
   1b062:	4605      	mov	r5, r0
	if (cstr) {
   1b064:	460c      	mov	r4, r1
   1b066:	b149      	cbz	r1, 1b07c <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
   1b068:	4608      	mov	r0, r1
   1b06a:	f007 fb69 	bl	22740 <strlen>
   1b06e:	4621      	mov	r1, r4
   1b070:	4602      	mov	r2, r0
   1b072:	4628      	mov	r0, r5
   1b074:	f7ff ff70 	bl	1af58 <String::copy(char const*, unsigned int)>
	}
	return *this;
}
   1b078:	4628      	mov	r0, r5
   1b07a:	bd38      	pop	{r3, r4, r5, pc}
   1b07c:	4628      	mov	r0, r5
		len = 0;
   1b07e:	60a9      	str	r1, [r5, #8]
}
   1b080:	bd38      	pop	{r3, r4, r5, pc}
   1b082:	bf00      	nop

0001b084 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
   1b084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b088:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
   1b08a:	6800      	ldr	r0, [r0, #0]
{
   1b08c:	460d      	mov	r5, r1
   1b08e:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
   1b090:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
   1b092:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
   1b094:	d809      	bhi.n	1b0aa <String::append(char const*, unsigned int)+0x26>
   1b096:	18c2      	adds	r2, r0, r3
   1b098:	4291      	cmp	r1, r2
   1b09a:	d206      	bcs.n	1b0aa <String::append(char const*, unsigned int)+0x26>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
   1b09c:	1a0f      	subs	r7, r1, r0
		self = true;
   1b09e:	f04f 0901 	mov.w	r9, #1
	}
	if (length == 0 || !reserve(newlen)) return *this;
   1b0a2:	b936      	cbnz	r6, 1b0b2 <String::append(char const*, unsigned int)+0x2e>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
   1b0a4:	4620      	mov	r0, r4
   1b0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
   1b0aa:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
   1b0ae:	2e00      	cmp	r6, #0
   1b0b0:	d0f8      	beq.n	1b0a4 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
   1b0b2:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
   1b0b6:	6862      	ldr	r2, [r4, #4]
   1b0b8:	4590      	cmp	r8, r2
   1b0ba:	d90c      	bls.n	1b0d6 <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1b0bc:	f108 0101 	add.w	r1, r8, #1
   1b0c0:	f005 fcd8 	bl	20a74 <realloc>
	if (newbuffer) {
   1b0c4:	2800      	cmp	r0, #0
   1b0c6:	d0ed      	beq.n	1b0a4 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
   1b0c8:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
   1b0ca:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
   1b0ce:	b913      	cbnz	r3, 1b0d6 <String::append(char const*, unsigned int)+0x52>
   1b0d0:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
   1b0d2:	6820      	ldr	r0, [r4, #0]
   1b0d4:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
   1b0d6:	f1b9 0f00 	cmp.w	r9, #0
   1b0da:	d108      	bne.n	1b0ee <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
   1b0dc:	4629      	mov	r1, r5
   1b0de:	4418      	add	r0, r3
   1b0e0:	f007 fa4a 	bl	22578 <strcpy>
}
   1b0e4:	4620      	mov	r0, r4
	len = newlen;
   1b0e6:	f8c4 8008 	str.w	r8, [r4, #8]
}
   1b0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
   1b0ee:	4632      	mov	r2, r6
   1b0f0:	19c1      	adds	r1, r0, r7
   1b0f2:	4418      	add	r0, r3
   1b0f4:	f000 fd98 	bl	1bc28 <memcpy>
		buffer[newlen] = 0;
   1b0f8:	6823      	ldr	r3, [r4, #0]
   1b0fa:	2200      	movs	r2, #0
   1b0fc:	f803 2008 	strb.w	r2, [r3, r8]
   1b100:	e7f0      	b.n	1b0e4 <String::append(char const*, unsigned int)+0x60>
   1b102:	bf00      	nop

0001b104 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
   1b104:	b510      	push	{r4, lr}
   1b106:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   1b108:	2300      	movs	r3, #0
{
   1b10a:	4604      	mov	r4, r0
	append(buf, 1);
   1b10c:	2201      	movs	r2, #1
	buf[0] = c;
   1b10e:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
   1b112:	a901      	add	r1, sp, #4
	buf[1] = 0;
   1b114:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
   1b118:	f7ff ffb4 	bl	1b084 <String::append(char const*, unsigned int)>
	return *this;
}
   1b11c:	4620      	mov	r0, r4
   1b11e:	b002      	add	sp, #8
   1b120:	bd10      	pop	{r4, pc}
   1b122:	bf00      	nop

0001b124 <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   1b124:	b510      	push	{r4, lr}
   1b126:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
   1b128:	688a      	ldr	r2, [r1, #8]
   1b12a:	6809      	ldr	r1, [r1, #0]
   1b12c:	f7ff ffaa 	bl	1b084 <String::append(char const*, unsigned int)>
	return a;
}
   1b130:	4620      	mov	r0, r4
   1b132:	bd10      	pop	{r4, pc}

0001b134 <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   1b134:	b538      	push	{r3, r4, r5, lr}
   1b136:	4605      	mov	r5, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
   1b138:	b141      	cbz	r1, 1b14c <operator+(StringSumHelper const&, char const*)+0x18>
   1b13a:	460c      	mov	r4, r1
   1b13c:	4608      	mov	r0, r1
   1b13e:	f007 faff 	bl	22740 <strlen>
   1b142:	4602      	mov	r2, r0
   1b144:	4621      	mov	r1, r4
   1b146:	4628      	mov	r0, r5
   1b148:	f7ff ff9c 	bl	1b084 <String::append(char const*, unsigned int)>
	return a;
}
   1b14c:	4628      	mov	r0, r5
   1b14e:	bd38      	pop	{r3, r4, r5, pc}

0001b150 <operator+(StringSumHelper const&, int)>:
	a.append(c);
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
   1b150:	b510      	push	{r4, lr}
   1b152:	460b      	mov	r3, r1
   1b154:	b084      	sub	sp, #16
   1b156:	4604      	mov	r4, r0
	ltoa((long)num, buf, 10);
   1b158:	220a      	movs	r2, #10
   1b15a:	a901      	add	r1, sp, #4
   1b15c:	4618      	mov	r0, r3
   1b15e:	f000 fe33 	bl	1bdc8 <ltoa>
	append(buf, strlen(buf));
   1b162:	a801      	add	r0, sp, #4
   1b164:	f007 faec 	bl	22740 <strlen>
   1b168:	a901      	add	r1, sp, #4
   1b16a:	4602      	mov	r2, r0
   1b16c:	4620      	mov	r0, r4
   1b16e:	f7ff ff89 	bl	1b084 <String::append(char const*, unsigned int)>
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append((long)num);
	return a;
}
   1b172:	4620      	mov	r0, r4
   1b174:	b004      	add	sp, #16
   1b176:	bd10      	pop	{r4, pc}

0001b178 <operator+(StringSumHelper const&, double)>:
	a.append(num);
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, double num)
{
   1b178:	b510      	push	{r4, lr}
   1b17a:	b088      	sub	sp, #32
	dtostrf(num, 4, 2, buf); 
   1b17c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
{
   1b180:	4604      	mov	r4, r0
	dtostrf(num, 4, 2, buf); 
   1b182:	2102      	movs	r1, #2
   1b184:	466a      	mov	r2, sp
   1b186:	2004      	movs	r0, #4
   1b188:	f000 fe2e 	bl	1bde8 <dtostrf>
	append(buf, strlen(buf));
   1b18c:	4668      	mov	r0, sp
   1b18e:	f007 fad7 	bl	22740 <strlen>
   1b192:	4669      	mov	r1, sp
   1b194:	4602      	mov	r2, r0
   1b196:	4620      	mov	r0, r4
   1b198:	f7ff ff74 	bl	1b084 <String::append(char const*, unsigned int)>
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(num);
	return a;
}
   1b19c:	4620      	mov	r0, r4
   1b19e:	b008      	add	sp, #32
   1b1a0:	bd10      	pop	{r4, pc}
   1b1a2:	bf00      	nop

0001b1a4 <String::startsWith(String const&) const>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
   1b1a4:	688a      	ldr	r2, [r1, #8]
{
   1b1a6:	b508      	push	{r3, lr}
	if (len < s2.len) return 0;
   1b1a8:	6883      	ldr	r3, [r0, #8]
   1b1aa:	4293      	cmp	r3, r2
   1b1ac:	d309      	bcc.n	1b1c2 <String::startsWith(String const&) const+0x1e>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   1b1ae:	6800      	ldr	r0, [r0, #0]
   1b1b0:	b130      	cbz	r0, 1b1c0 <String::startsWith(String const&) const+0x1c>
   1b1b2:	6809      	ldr	r1, [r1, #0]
   1b1b4:	b139      	cbz	r1, 1b1c6 <String::startsWith(String const&) const+0x22>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   1b1b6:	f007 f8f5 	bl	223a4 <strncmp>
   1b1ba:	fab0 f080 	clz	r0, r0
   1b1be:	0940      	lsrs	r0, r0, #5
}
   1b1c0:	bd08      	pop	{r3, pc}
	if (len < s2.len) return 0;
   1b1c2:	2000      	movs	r0, #0
}
   1b1c4:	bd08      	pop	{r3, pc}
	if (len < s2.len) return 0;
   1b1c6:	4608      	mov	r0, r1
}
   1b1c8:	bd08      	pop	{r3, pc}
   1b1ca:	bf00      	nop

0001b1cc <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
   1b1cc:	b1c2      	cbz	r2, 1b200 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
   1b1ce:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
   1b1d0:	fab1 f681 	clz	r6, r1
   1b1d4:	460c      	mov	r4, r1
   1b1d6:	0976      	lsrs	r6, r6, #5
   1b1d8:	b119      	cbz	r1, 1b1e2 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
   1b1da:	6885      	ldr	r5, [r0, #8]
   1b1dc:	429d      	cmp	r5, r3
   1b1de:	d801      	bhi.n	1b1e4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
   1b1e0:	700e      	strb	r6, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   1b1e2:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
   1b1e4:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
   1b1e6:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	strncpy((char *)buf, buffer + index, n);
   1b1ea:	6801      	ldr	r1, [r0, #0]
   1b1ec:	4620      	mov	r0, r4
   1b1ee:	4565      	cmp	r5, ip
   1b1f0:	4419      	add	r1, r3
   1b1f2:	bf28      	it	cs
   1b1f4:	4665      	movcs	r5, ip
   1b1f6:	462a      	mov	r2, r5
   1b1f8:	f007 f91a 	bl	22430 <strncpy>
	buf[n] = 0;
   1b1fc:	5566      	strb	r6, [r4, r5]
}
   1b1fe:	bd70      	pop	{r4, r5, r6, pc}
   1b200:	4770      	bx	lr
   1b202:	bf00      	nop

0001b204 <String::toUpperCase()>:
	}
	return *this;
}

String & String::toUpperCase(void)
{
   1b204:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
   1b206:	6804      	ldr	r4, [r0, #0]
{
   1b208:	4605      	mov	r5, r0
	if (!buffer) return *this;
   1b20a:	b144      	cbz	r4, 1b21e <String::toUpperCase()+0x1a>
	for (char *p = buffer; *p; p++) {
   1b20c:	7820      	ldrb	r0, [r4, #0]
   1b20e:	b130      	cbz	r0, 1b21e <String::toUpperCase()+0x1a>
		*p = toupper(*p);
   1b210:	f005 f944 	bl	2049c <toupper>
   1b214:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
   1b216:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   1b21a:	2800      	cmp	r0, #0
   1b21c:	d1f8      	bne.n	1b210 <String::toUpperCase()+0xc>
	}
	return *this;
}
   1b21e:	4628      	mov	r0, r5
   1b220:	bd38      	pop	{r3, r4, r5, pc}
   1b222:	bf00      	nop

0001b224 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   1b224:	6800      	ldr	r0, [r0, #0]
   1b226:	b108      	cbz	r0, 1b22c <String::toInt() const+0x8>
   1b228:	f005 b934 	b.w	20494 <atol>
	return 0;
}
   1b22c:	4770      	bx	lr
   1b22e:	bf00      	nop

0001b230 <String::toFloat() const>:

float String::toFloat(void) const
{
	if (buffer) return strtof(buffer, (char **)NULL);
   1b230:	6800      	ldr	r0, [r0, #0]
   1b232:	b110      	cbz	r0, 1b23a <String::toFloat() const+0xa>
   1b234:	2100      	movs	r1, #0
   1b236:	f006 bd4f 	b.w	21cd8 <strtof>
	return 0.0;
}
   1b23a:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1b240 <String::toFloat() const+0x10>
   1b23e:	4770      	bx	lr
   1b240:	00000000 	.word	0x00000000

0001b244 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   1b244:	49a2      	ldr	r1, [pc, #648]	; (1b4d0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   1b246:	4ba3      	ldr	r3, [pc, #652]	; (1b4d4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
   1b248:	4288      	cmp	r0, r1
{
   1b24a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
   1b24e:	4ca2      	ldr	r4, [pc, #648]	; (1b4d8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   1b250:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
   1b252:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
   1b254:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
   1b258:	d91b      	bls.n	1b292 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
   1b25a:	4ba0      	ldr	r3, [pc, #640]	; (1b4dc <set_arm_clock+0x298>)
   1b25c:	4298      	cmp	r0, r3
   1b25e:	f240 8102 	bls.w	1b466 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   1b262:	1ac3      	subs	r3, r0, r3
   1b264:	499e      	ldr	r1, [pc, #632]	; (1b4e0 <set_arm_clock+0x29c>)
   1b266:	0a1b      	lsrs	r3, r3, #8
   1b268:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   1b26c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   1b270:	09db      	lsrs	r3, r3, #7
   1b272:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1b276:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1b27a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   1b27e:	428b      	cmp	r3, r1
   1b280:	bf28      	it	cs
   1b282:	460b      	movcs	r3, r1
   1b284:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
   1b288:	4b96      	ldr	r3, [pc, #600]	; (1b4e4 <set_arm_clock+0x2a0>)
   1b28a:	fba3 3707 	umull	r3, r7, r3, r7
   1b28e:	08ff      	lsrs	r7, r7, #3
   1b290:	e004      	b.n	1b29c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
   1b292:	4f95      	ldr	r7, [pc, #596]	; (1b4e8 <set_arm_clock+0x2a4>)
   1b294:	42b8      	cmp	r0, r7
   1b296:	bf8c      	ite	hi
   1b298:	270e      	movhi	r7, #14
   1b29a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   1b29c:	498d      	ldr	r1, [pc, #564]	; (1b4d4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   1b29e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   1b2a2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   1b2a6:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   1b2a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   1b2ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   1b2b0:	d20c      	bcs.n	1b2cc <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   1b2b2:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   1b2b6:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   1b2ba:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
   1b2be:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   1b2c2:	680b      	ldr	r3, [r1, #0]
   1b2c4:	2b00      	cmp	r3, #0
   1b2c6:	dafc      	bge.n	1b2c2 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   1b2c8:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
   1b2cc:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
   1b2d0:	d124      	bne.n	1b31c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
   1b2d2:	4986      	ldr	r1, [pc, #536]	; (1b4ec <set_arm_clock+0x2a8>)
   1b2d4:	690c      	ldr	r4, [r1, #16]
   1b2d6:	4986      	ldr	r1, [pc, #536]	; (1b4f0 <set_arm_clock+0x2ac>)
   1b2d8:	43a1      	bics	r1, r4
   1b2da:	f000 80ea 	beq.w	1b4b2 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   1b2de:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
   1b2e2:	4634      	mov	r4, r6
   1b2e4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   1b2e8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
   1b2ec:	d004      	beq.n	1b2f8 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
   1b2ee:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   1b2f2:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
   1b2f4:	4b77      	ldr	r3, [pc, #476]	; (1b4d4 <set_arm_clock+0x290>)
   1b2f6:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   1b2f8:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   1b2fc:	d007      	beq.n	1b30e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
   1b2fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
   1b302:	4974      	ldr	r1, [pc, #464]	; (1b4d4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
   1b304:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
   1b306:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   1b308:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1b30a:	071a      	lsls	r2, r3, #28
   1b30c:	d4fc      	bmi.n	1b308 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
   1b30e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
   1b312:	4a70      	ldr	r2, [pc, #448]	; (1b4d4 <set_arm_clock+0x290>)
   1b314:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   1b316:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1b318:	069b      	lsls	r3, r3, #26
   1b31a:	d4fc      	bmi.n	1b316 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
   1b31c:	4c75      	ldr	r4, [pc, #468]	; (1b4f4 <set_arm_clock+0x2b0>)
   1b31e:	42a0      	cmp	r0, r4
   1b320:	f200 80ce 	bhi.w	1b4c0 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
   1b324:	f04f 0c01 	mov.w	ip, #1
   1b328:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
   1b32a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
   1b32c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
   1b330:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
   1b334:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   1b338:	42a2      	cmp	r2, r4
   1b33a:	d818      	bhi.n	1b36e <set_arm_clock+0x12a>
		if (div_arm < 8) {
   1b33c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
   1b340:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
   1b344:	f040 808d 	bne.w	1b462 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
   1b348:	f1bc 0f04 	cmp.w	ip, #4
   1b34c:	f200 8091 	bhi.w	1b472 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
   1b350:	180a      	adds	r2, r1, r0
   1b352:	42a2      	cmp	r2, r4
   1b354:	f200 80a4 	bhi.w	1b4a0 <set_arm_clock+0x25c>
   1b358:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
   1b35c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
   1b35e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   1b362:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
   1b366:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   1b36a:	42a2      	cmp	r2, r4
   1b36c:	d9e6      	bls.n	1b33c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   1b36e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   1b372:	028c      	lsls	r4, r1, #10
   1b374:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   1b378:	485f      	ldr	r0, [pc, #380]	; (1b4f8 <set_arm_clock+0x2b4>)
   1b37a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
   1b37c:	4a5f      	ldr	r2, [pc, #380]	; (1b4fc <set_arm_clock+0x2b8>)
   1b37e:	4290      	cmp	r0, r2
   1b380:	d97f      	bls.n	1b482 <set_arm_clock+0x23e>
   1b382:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 1b528 <set_arm_clock+0x2e4>
   1b386:	226c      	movs	r2, #108	; 0x6c
   1b388:	485d      	ldr	r0, [pc, #372]	; (1b500 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   1b38a:	4d58      	ldr	r5, [pc, #352]	; (1b4ec <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
   1b38c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   1b390:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
   1b394:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   1b398:	f8df c190 	ldr.w	ip, [pc, #400]	; 1b52c <set_arm_clock+0x2e8>
   1b39c:	ea0e 0c0c 	and.w	ip, lr, ip
   1b3a0:	45d4      	cmp	ip, sl
   1b3a2:	d009      	beq.n	1b3b8 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
   1b3a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   1b3a8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   1b3ac:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
   1b3b0:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   1b3b2:	682a      	ldr	r2, [r5, #0]
   1b3b4:	2a00      	cmp	r2, #0
   1b3b6:	dafc      	bge.n	1b3b2 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
   1b3b8:	4a46      	ldr	r2, [pc, #280]	; (1b4d4 <set_arm_clock+0x290>)
   1b3ba:	6915      	ldr	r5, [r2, #16]
   1b3bc:	f005 0507 	and.w	r5, r5, #7
   1b3c0:	429d      	cmp	r5, r3
   1b3c2:	d003      	beq.n	1b3cc <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   1b3c4:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   1b3c6:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1b3c8:	03dd      	lsls	r5, r3, #15
   1b3ca:	d4fc      	bmi.n	1b3c6 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   1b3cc:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
   1b3d0:	d009      	beq.n	1b3e6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
   1b3d2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   1b3d6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
   1b3da:	4a3e      	ldr	r2, [pc, #248]	; (1b4d4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   1b3dc:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
   1b3de:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   1b3e0:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1b3e2:	0799      	lsls	r1, r3, #30
   1b3e4:	d4fc      	bmi.n	1b3e0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   1b3e6:	4947      	ldr	r1, [pc, #284]	; (1b504 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
   1b3e8:	4a47      	ldr	r2, [pc, #284]	; (1b508 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   1b3ea:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
   1b3ec:	4291      	cmp	r1, r2
   1b3ee:	d83c      	bhi.n	1b46a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   1b3f0:	4b46      	ldr	r3, [pc, #280]	; (1b50c <set_arm_clock+0x2c8>)
   1b3f2:	09c9      	lsrs	r1, r1, #7
   1b3f4:	fba3 3101 	umull	r3, r1, r3, r1
   1b3f8:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
   1b3fa:	1e4b      	subs	r3, r1, #1
   1b3fc:	021b      	lsls	r3, r3, #8
   1b3fe:	ea86 0203 	eor.w	r2, r6, r3
   1b402:	f412 7f40 	tst.w	r2, #768	; 0x300
   1b406:	d006      	beq.n	1b416 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
   1b408:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   1b40c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
   1b410:	4a30      	ldr	r2, [pc, #192]	; (1b4d4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   1b412:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
   1b414:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   1b416:	4a2f      	ldr	r2, [pc, #188]	; (1b4d4 <set_arm_clock+0x290>)
   1b418:	6953      	ldr	r3, [r2, #20]
   1b41a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   1b41e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   1b420:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1b422:	069b      	lsls	r3, r3, #26
   1b424:	d4fc      	bmi.n	1b420 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   1b426:	4b3a      	ldr	r3, [pc, #232]	; (1b510 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   1b428:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   1b42a:	fba3 2300 	umull	r2, r3, r3, r0
   1b42e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b432:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
   1b436:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   1b43a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
   1b43e:	4a35      	ldr	r2, [pc, #212]	; (1b514 <set_arm_clock+0x2d0>)
   1b440:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
   1b442:	4a35      	ldr	r2, [pc, #212]	; (1b518 <set_arm_clock+0x2d4>)
   1b444:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   1b446:	4a35      	ldr	r2, [pc, #212]	; (1b51c <set_arm_clock+0x2d8>)
   1b448:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   1b44a:	d208      	bcs.n	1b45e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   1b44c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   1b450:	4a21      	ldr	r2, [pc, #132]	; (1b4d8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   1b452:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
   1b456:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   1b458:	6813      	ldr	r3, [r2, #0]
   1b45a:	2b00      	cmp	r3, #0
   1b45c:	dafc      	bge.n	1b458 <set_arm_clock+0x214>
	}

	return frequency;
}
   1b45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b462:	4673      	mov	r3, lr
   1b464:	e762      	b.n	1b32c <set_arm_clock+0xe8>
   1b466:	2712      	movs	r7, #18
   1b468:	e718      	b.n	1b29c <set_arm_clock+0x58>
   1b46a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
   1b46e:	2104      	movs	r1, #4
   1b470:	e7c5      	b.n	1b3fe <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   1b472:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   1b476:	4820      	ldr	r0, [pc, #128]	; (1b4f8 <set_arm_clock+0x2b4>)
   1b478:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   1b47a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   1b47c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   1b47e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   1b482:	4a27      	ldr	r2, [pc, #156]	; (1b520 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   1b484:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1b530 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   1b488:	fba2 2000 	umull	r2, r0, r2, r0
   1b48c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
   1b48e:	4825      	ldr	r0, [pc, #148]	; (1b524 <set_arm_clock+0x2e0>)
   1b490:	2a36      	cmp	r2, #54	; 0x36
   1b492:	bf38      	it	cc
   1b494:	2236      	movcc	r2, #54	; 0x36
   1b496:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   1b49a:	ea42 0a0a 	orr.w	sl, r2, sl
   1b49e:	e774      	b.n	1b38a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   1b4a0:	ea4f 248c 	mov.w	r4, ip, lsl #10
   1b4a4:	2300      	movs	r3, #0
   1b4a6:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
   1b4aa:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
   1b4ae:	46ac      	mov	ip, r5
   1b4b0:	e762      	b.n	1b378 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   1b4b2:	461d      	mov	r5, r3
   1b4b4:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
   1b4b8:	4611      	mov	r1, r2
   1b4ba:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   1b4be:	e713      	b.n	1b2e8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
   1b4c0:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
   1b4c2:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   1b4c6:	4602      	mov	r2, r0
   1b4c8:	4631      	mov	r1, r6
   1b4ca:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
   1b4cc:	46e6      	mov	lr, ip
   1b4ce:	e753      	b.n	1b378 <set_arm_clock+0x134>
   1b4d0:	1f78a400 	.word	0x1f78a400
   1b4d4:	400fc000 	.word	0x400fc000
   1b4d8:	40080000 	.word	0x40080000
   1b4dc:	23c34600 	.word	0x23c34600
   1b4e0:	004cb223 	.word	0x004cb223
   1b4e4:	51eb851f 	.word	0x51eb851f
   1b4e8:	016e3600 	.word	0x016e3600
   1b4ec:	400d8000 	.word	0x400d8000
   1b4f0:	80003040 	.word	0x80003040
   1b4f4:	269fb1ff 	.word	0x269fb1ff
   1b4f8:	005b8d80 	.word	0x005b8d80
   1b4fc:	4df67eff 	.word	0x4df67eff
   1b500:	4d3f6400 	.word	0x4d3f6400
   1b504:	08f0d17f 	.word	0x08f0d17f
   1b508:	2cb4177f 	.word	0x2cb4177f
   1b50c:	00e5109f 	.word	0x00e5109f
   1b510:	431bde83 	.word	0x431bde83
   1b514:	20008aac 	.word	0x20008aac
   1b518:	20008aa8 	.word	0x20008aa8
   1b51c:	20013324 	.word	0x20013324
   1b520:	165e9f81 	.word	0x165e9f81
   1b524:	00b71b00 	.word	0x00b71b00
   1b528:	8000206c 	.word	0x8000206c
   1b52c:	8001307f 	.word	0x8001307f
   1b530:	80002000 	.word	0x80002000

0001b534 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
   1b534:	b900      	cbnz	r0, 1b538 <delay+0x4>
   1b536:	4770      	bx	lr
{
   1b538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   1b53c:	2101      	movs	r1, #1
   1b53e:	4681      	mov	r9, r0
   1b540:	4c21      	ldr	r4, [pc, #132]	; (1b5c8 <delay+0x94>)
   1b542:	4d22      	ldr	r5, [pc, #136]	; (1b5cc <delay+0x98>)
   1b544:	4e22      	ldr	r6, [pc, #136]	; (1b5d0 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   1b546:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   1b54a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   1b54c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   1b54e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   1b552:	2b00      	cmp	r3, #0
   1b554:	d1f7      	bne.n	1b546 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   1b556:	491f      	ldr	r1, [pc, #124]	; (1b5d4 <delay+0xa0>)
   1b558:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   1b55a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1b55e:	f8df a078 	ldr.w	sl, [pc, #120]	; 1b5d8 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
   1b562:	1a1b      	subs	r3, r3, r0
   1b564:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
   1b566:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1b56a:	f8da 2000 	ldr.w	r2, [sl]
   1b56e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
   1b572:	455a      	cmp	r2, fp
   1b574:	bf94      	ite	ls
   1b576:	4490      	addls	r8, r2
   1b578:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   1b57a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
   1b57e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   1b580:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   1b582:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   1b586:	2b00      	cmp	r3, #0
   1b588:	d1f7      	bne.n	1b57a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   1b58a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1b58c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
   1b590:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
   1b592:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1b596:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
   1b59a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
   1b59e:	bf94      	ite	ls
   1b5a0:	4462      	addls	r2, ip
   1b5a2:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
   1b5a6:	eba2 0208 	sub.w	r2, r2, r8
   1b5aa:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1b5ae:	d306      	bcc.n	1b5be <delay+0x8a>
			if (--msec == 0) return;
   1b5b0:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
   1b5b4:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
   1b5b8:	d1df      	bne.n	1b57a <delay+0x46>
}
   1b5ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
   1b5be:	f002 f80b 	bl	1d5d8 <yield>
		while ((micros() - start) >= 1000) {
   1b5c2:	4904      	ldr	r1, [pc, #16]	; (1b5d4 <delay+0xa0>)
   1b5c4:	e7d9      	b.n	1b57a <delay+0x46>
   1b5c6:	bf00      	nop
   1b5c8:	20013558 	.word	0x20013558
   1b5cc:	20013554 	.word	0x20013554
   1b5d0:	20013550 	.word	0x20013550
   1b5d4:	e0001000 	.word	0xe0001000
   1b5d8:	20013324 	.word	0x20013324

0001b5dc <micros>:
{
   1b5dc:	b430      	push	{r4, r5}
   1b5de:	4b0f      	ldr	r3, [pc, #60]	; (1b61c <micros+0x40>)
   1b5e0:	f04f 0c01 	mov.w	ip, #1
   1b5e4:	4d0e      	ldr	r5, [pc, #56]	; (1b620 <micros+0x44>)
   1b5e6:	4c0f      	ldr	r4, [pc, #60]	; (1b624 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   1b5e8:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
   1b5ec:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
   1b5ee:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   1b5f0:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
   1b5f4:	2a00      	cmp	r2, #0
   1b5f6:	d1f7      	bne.n	1b5e8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   1b5f8:	4b0b      	ldr	r3, [pc, #44]	; (1b628 <micros+0x4c>)
   1b5fa:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1b5fc:	4a0b      	ldr	r2, [pc, #44]	; (1b62c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
   1b5fe:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
   1b600:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1b604:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
   1b606:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   1b60a:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
   1b60e:	bc30      	pop	{r4, r5}
   1b610:	428a      	cmp	r2, r1
   1b612:	bf94      	ite	ls
   1b614:	1880      	addls	r0, r0, r2
   1b616:	1840      	addhi	r0, r0, r1
   1b618:	4770      	bx	lr
   1b61a:	bf00      	nop
   1b61c:	20013558 	.word	0x20013558
   1b620:	20013554 	.word	0x20013554
   1b624:	20013550 	.word	0x20013550
   1b628:	e0001000 	.word	0xe0001000
   1b62c:	20013324 	.word	0x20013324

0001b630 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
   1b630:	2836      	cmp	r0, #54	; 0x36
   1b632:	d816      	bhi.n	1b662 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
   1b634:	0102      	lsls	r2, r0, #4
   1b636:	4b10      	ldr	r3, [pc, #64]	; (1b678 <digitalWrite+0x48>)
   1b638:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
   1b63c:	589b      	ldr	r3, [r3, r2]
{
   1b63e:	b410      	push	{r4}
	mask = p->mask;
   1b640:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
   1b642:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
   1b644:	4214      	tst	r4, r2
   1b646:	d005      	beq.n	1b654 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
   1b648:	b961      	cbnz	r1, 1b664 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   1b64a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
   1b64e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
   1b652:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   1b654:	6883      	ldr	r3, [r0, #8]
		if (val) {
   1b656:	b151      	cbz	r1, 1b66e <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   1b658:	4a08      	ldr	r2, [pc, #32]	; (1b67c <digitalWrite+0x4c>)
}
   1b65a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   1b65e:	601a      	str	r2, [r3, #0]
}
   1b660:	4770      	bx	lr
   1b662:	4770      	bx	lr
   1b664:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
   1b668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   1b66c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   1b66e:	4a04      	ldr	r2, [pc, #16]	; (1b680 <digitalWrite+0x50>)
}
   1b670:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   1b674:	601a      	str	r2, [r3, #0]
}
   1b676:	4770      	bx	lr
   1b678:	20004be8 	.word	0x20004be8
   1b67c:	0001f038 	.word	0x0001f038
   1b680:	00013038 	.word	0x00013038

0001b684 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
   1b684:	2836      	cmp	r0, #54	; 0x36
   1b686:	d80b      	bhi.n	1b6a0 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
   1b688:	4b06      	ldr	r3, [pc, #24]	; (1b6a4 <digitalRead+0x20>)
   1b68a:	0102      	lsls	r2, r0, #4
   1b68c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
   1b690:	589a      	ldr	r2, [r3, r2]
   1b692:	68c3      	ldr	r3, [r0, #12]
   1b694:	6892      	ldr	r2, [r2, #8]
   1b696:	421a      	tst	r2, r3
   1b698:	bf14      	ite	ne
   1b69a:	2001      	movne	r0, #1
   1b69c:	2000      	moveq	r0, #0
   1b69e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
   1b6a0:	2000      	movs	r0, #0
}
   1b6a2:	4770      	bx	lr
   1b6a4:	20004be8 	.word	0x20004be8

0001b6a8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
   1b6a8:	2836      	cmp	r0, #54	; 0x36
   1b6aa:	d829      	bhi.n	1b700 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
   1b6ac:	4b16      	ldr	r3, [pc, #88]	; (1b708 <pinMode+0x60>)
   1b6ae:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   1b6b0:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
   1b6b2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   1b6b6:	589a      	ldr	r2, [r3, r2]
{
   1b6b8:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   1b6ba:	6853      	ldr	r3, [r2, #4]
   1b6bc:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   1b6be:	d00e      	beq.n	1b6de <pinMode+0x36>
   1b6c0:	2904      	cmp	r1, #4
   1b6c2:	d00c      	beq.n	1b6de <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   1b6c4:	ea23 0304 	bic.w	r3, r3, r4
   1b6c8:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
   1b6ca:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
   1b6cc:	b1a9      	cbz	r1, 1b6fa <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
   1b6ce:	2902      	cmp	r1, #2
   1b6d0:	d017      	beq.n	1b702 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
   1b6d2:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   1b6d4:	bf0c      	ite	eq
   1b6d6:	4a0d      	ldreq	r2, [pc, #52]	; (1b70c <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
   1b6d8:	4a0d      	ldrne	r2, [pc, #52]	; (1b710 <pinMode+0x68>)
   1b6da:	601a      	str	r2, [r3, #0]
   1b6dc:	e007      	b.n	1b6ee <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
   1b6de:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
   1b6e0:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
   1b6e2:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
   1b6e4:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
   1b6e6:	d008      	beq.n	1b6fa <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
   1b6e8:	f640 0238 	movw	r2, #2104	; 0x838
   1b6ec:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
   1b6ee:	6843      	ldr	r3, [r0, #4]
   1b6f0:	2215      	movs	r2, #21
}
   1b6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
   1b6f6:	601a      	str	r2, [r3, #0]
}
   1b6f8:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
   1b6fa:	2238      	movs	r2, #56	; 0x38
   1b6fc:	601a      	str	r2, [r3, #0]
   1b6fe:	e7f6      	b.n	1b6ee <pinMode+0x46>
   1b700:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   1b702:	4a04      	ldr	r2, [pc, #16]	; (1b714 <pinMode+0x6c>)
   1b704:	601a      	str	r2, [r3, #0]
   1b706:	e7f2      	b.n	1b6ee <pinMode+0x46>
   1b708:	20004be8 	.word	0x20004be8
   1b70c:	00013038 	.word	0x00013038
   1b710:	00010038 	.word	0x00010038
   1b714:	0001f038 	.word	0x0001f038

0001b718 <flash_wait>:
{
   1b718:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   1b71a:	4a12      	ldr	r2, [pc, #72]	; (1b764 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
   1b71c:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   1b71e:	4b12      	ldr	r3, [pc, #72]	; (1b768 <flash_wait+0x50>)
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
   1b720:	2101      	movs	r1, #1
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
   1b722:	4d12      	ldr	r5, [pc, #72]	; (1b76c <flash_wait+0x54>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
   1b724:	4c12      	ldr	r4, [pc, #72]	; (1b770 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   1b726:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   1b72a:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
   1b72e:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
   1b732:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
   1b736:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   1b73a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
   1b73e:	6953      	ldr	r3, [r2, #20]
   1b740:	07db      	lsls	r3, r3, #31
   1b742:	d5fc      	bpl.n	1b73e <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   1b744:	6151      	str	r1, [r2, #20]
	} while (status & 1);
   1b746:	7823      	ldrb	r3, [r4, #0]
   1b748:	07db      	lsls	r3, r3, #31
   1b74a:	d4f0      	bmi.n	1b72e <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
   1b74c:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
   1b74e:	4905      	ldr	r1, [pc, #20]	; (1b764 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
   1b750:	f043 0301 	orr.w	r3, r3, #1
   1b754:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
   1b756:	680b      	ldr	r3, [r1, #0]
   1b758:	07db      	lsls	r3, r3, #31
   1b75a:	d4fc      	bmi.n	1b756 <flash_wait+0x3e>
	__enable_irq();
   1b75c:	b662      	cpsie	i
}
   1b75e:	bc30      	pop	{r4, r5}
   1b760:	4770      	bx	lr
   1b762:	bf00      	nop
   1b764:	402a8000 	.word	0x402a8000
   1b768:	24010405 	.word	0x24010405
   1b76c:	000f0001 	.word	0x000f0001
   1b770:	402a8100 	.word	0x402a8100

0001b774 <eeprom_initialize>:
{
   1b774:	b570      	push	{r4, r5, r6, lr}
   1b776:	4c0e      	ldr	r4, [pc, #56]	; (1b7b0 <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
   1b778:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
   1b77c:	4e0d      	ldr	r6, [pc, #52]	; (1b7b4 <eeprom_initialize+0x40>)
   1b77e:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1b782:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
   1b786:	2100      	movs	r1, #0
   1b788:	e002      	b.n	1b790 <eeprom_initialize+0x1c>
		} while (p < end);
   1b78a:	42b3      	cmp	r3, r6
			index++;
   1b78c:	b281      	uxth	r1, r0
		} while (p < end);
   1b78e:	d204      	bcs.n	1b79a <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
   1b790:	881a      	ldrh	r2, [r3, #0]
			index++;
   1b792:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
   1b794:	3302      	adds	r3, #2
   1b796:	4572      	cmp	r2, lr
   1b798:	d1f7      	bne.n	1b78a <eeprom_initialize+0x16>
		sector_index[sector] = index;
   1b79a:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
   1b79e:	42ac      	cmp	r4, r5
   1b7a0:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
   1b7a4:	d1ed      	bne.n	1b782 <eeprom_initialize+0xe>
	initialized = 1;
   1b7a6:	4b04      	ldr	r3, [pc, #16]	; (1b7b8 <eeprom_initialize+0x44>)
   1b7a8:	2201      	movs	r2, #1
   1b7aa:	701a      	strb	r2, [r3, #0]
}
   1b7ac:	bd70      	pop	{r4, r5, r6, pc}
   1b7ae:	bf00      	nop
   1b7b0:	20013326 	.word	0x20013326
   1b7b4:	607c1000 	.word	0x607c1000
   1b7b8:	200136f1 	.word	0x200136f1

0001b7bc <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
   1b7bc:	f241 03bb 	movw	r3, #4283	; 0x10bb
   1b7c0:	4298      	cmp	r0, r3
   1b7c2:	d82f      	bhi.n	1b824 <eeprom_read_byte+0x68>
	if (!initialized) eeprom_initialize();
   1b7c4:	4b18      	ldr	r3, [pc, #96]	; (1b828 <eeprom_read_byte+0x6c>)
{
   1b7c6:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
   1b7c8:	781b      	ldrb	r3, [r3, #0]
   1b7ca:	4604      	mov	r4, r0
   1b7cc:	b33b      	cbz	r3, 1b81e <eeprom_read_byte+0x62>
	sector = (addr >> 2) % FLASH_SECTORS;
   1b7ce:	08a0      	lsrs	r0, r4, #2
   1b7d0:	4b16      	ldr	r3, [pc, #88]	; (1b82c <eeprom_read_byte+0x70>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   1b7d2:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
   1b7d6:	4c16      	ldr	r4, [pc, #88]	; (1b830 <eeprom_read_byte+0x74>)
	sector = (addr >> 2) % FLASH_SECTORS;
   1b7d8:	fba3 2300 	umull	r2, r3, r3, r0
   1b7dc:	1ac2      	subs	r2, r0, r3
   1b7de:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1b7e2:	4a14      	ldr	r2, [pc, #80]	; (1b834 <eeprom_read_byte+0x78>)
	sector = (addr >> 2) % FLASH_SECTORS;
   1b7e4:	095b      	lsrs	r3, r3, #5
   1b7e6:	ebc3 1e83 	rsb	lr, r3, r3, lsl #6
   1b7ea:	469c      	mov	ip, r3
   1b7ec:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   1b7f0:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
   1b7f4:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
   1b7f6:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1b7fa:	441a      	add	r2, r3
	end = p + sector_index[sector];
   1b7fc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1b800:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
   1b802:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
   1b806:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
   1b80a:	d907      	bls.n	1b81c <eeprom_read_byte+0x60>
		uint32_t val = *p++;
   1b80c:	881a      	ldrh	r2, [r3, #0]
   1b80e:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
   1b810:	b2d4      	uxtb	r4, r2
   1b812:	428c      	cmp	r4, r1
   1b814:	bf08      	it	eq
   1b816:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
   1b818:	459c      	cmp	ip, r3
   1b81a:	d8f7      	bhi.n	1b80c <eeprom_read_byte+0x50>
}
   1b81c:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
   1b81e:	f7ff ffa9 	bl	1b774 <eeprom_initialize>
   1b822:	e7d4      	b.n	1b7ce <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
   1b824:	20ff      	movs	r0, #255	; 0xff
}
   1b826:	4770      	bx	lr
   1b828:	200136f1 	.word	0x200136f1
   1b82c:	04104105 	.word	0x04104105
   1b830:	20013328 	.word	0x20013328
   1b834:	000607c0 	.word	0x000607c0

0001b838 <eepromemu_flash_write>:
{
   1b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b83a:	460f      	mov	r7, r1
   1b83c:	4616      	mov	r6, r2
	__disable_irq();
   1b83e:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   1b840:	4b34      	ldr	r3, [pc, #208]	; (1b914 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   1b842:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   1b846:	4a34      	ldr	r2, [pc, #208]	; (1b918 <eepromemu_flash_write+0xe0>)
   1b848:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   1b84a:	2202      	movs	r2, #2
   1b84c:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
   1b84e:	2200      	movs	r2, #0
   1b850:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   1b854:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   1b858:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
   1b85c:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
   1b860:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1b864:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b868:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   1b86c:	2201      	movs	r2, #1
   1b86e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   1b872:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1b876:	1982      	adds	r2, r0, r6
	asm("dsb");
   1b878:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   1b87c:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
   1b880:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
   1b884:	3320      	adds	r3, #32
	} while (location < end_addr);
   1b886:	429a      	cmp	r2, r3
   1b888:	d8fa      	bhi.n	1b880 <eepromemu_flash_write+0x48>
	asm("dsb");
   1b88a:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1b88e:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   1b892:	4d20      	ldr	r5, [pc, #128]	; (1b914 <eepromemu_flash_write+0xdc>)
   1b894:	696b      	ldr	r3, [r5, #20]
   1b896:	07da      	lsls	r2, r3, #31
   1b898:	d5fc      	bpl.n	1b894 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   1b89a:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
   1b89c:	491f      	ldr	r1, [pc, #124]	; (1b91c <eepromemu_flash_write+0xe4>)
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   1b89e:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
   1b8a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   1b8a4:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   1b8a6:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
   1b8aa:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
   1b8ae:	f242 2101 	movw	r1, #8705	; 0x2201
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   1b8b2:	4c18      	ldr	r4, [pc, #96]	; (1b914 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
   1b8b4:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
   1b8b8:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
   1b8bc:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   1b8c0:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   1b8c4:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   1b8c8:	4d15      	ldr	r5, [pc, #84]	; (1b920 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   1b8ca:	e001      	b.n	1b8d0 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
   1b8cc:	065b      	lsls	r3, r3, #25
   1b8ce:	d409      	bmi.n	1b8e4 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   1b8d0:	6963      	ldr	r3, [r4, #20]
   1b8d2:	f013 0001 	ands.w	r0, r3, #1
   1b8d6:	d0f9      	beq.n	1b8cc <eepromemu_flash_write+0x94>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
   1b8d8:	2341      	movs	r3, #65	; 0x41
   1b8da:	6163      	str	r3, [r4, #20]
}
   1b8dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
   1b8e0:	f7ff bf1a 	b.w	1b718 <flash_wait>
			if (wrlen > 8) wrlen = 8;
   1b8e4:	2e08      	cmp	r6, #8
   1b8e6:	d80a      	bhi.n	1b8fe <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
   1b8e8:	b136      	cbz	r6, 1b8f8 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   1b8ea:	4632      	mov	r2, r6
   1b8ec:	4639      	mov	r1, r7
				src += wrlen;
   1b8ee:	4437      	add	r7, r6
				len -= wrlen;
   1b8f0:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   1b8f2:	4628      	mov	r0, r5
   1b8f4:	f000 f998 	bl	1bc28 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
   1b8f8:	2340      	movs	r3, #64	; 0x40
   1b8fa:	6163      	str	r3, [r4, #20]
   1b8fc:	e7e8      	b.n	1b8d0 <eepromemu_flash_write+0x98>
   1b8fe:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
   1b902:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   1b904:	4639      	mov	r1, r7
   1b906:	4632      	mov	r2, r6
				src += wrlen;
   1b908:	4437      	add	r7, r6
				len -= wrlen;
   1b90a:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   1b90c:	4628      	mov	r0, r5
   1b90e:	f000 f98b 	bl	1bc28 <memcpy>
				len -= wrlen;
   1b912:	e7f1      	b.n	1b8f8 <eepromemu_flash_write+0xc0>
   1b914:	402a8000 	.word	0x402a8000
   1b918:	5af05af0 	.word	0x5af05af0
   1b91c:	08180432 	.word	0x08180432
   1b920:	402a8180 	.word	0x402a8180

0001b924 <eepromemu_flash_erase_sector>:
{
   1b924:	b410      	push	{r4}
	__disable_irq();
   1b926:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   1b928:	4b28      	ldr	r3, [pc, #160]	; (1b9cc <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   1b92a:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   1b92c:	4c28      	ldr	r4, [pc, #160]	; (1b9d0 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT61 = 0;
   1b92e:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   1b930:	619c      	str	r4, [r3, #24]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1b932:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   1b936:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   1b938:	f240 4106 	movw	r1, #1030	; 0x406
   1b93c:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   1b940:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
   1b942:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
   1b946:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
   1b94a:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
   1b94e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
   1b952:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1b956:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
   1b95a:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   1b95c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
   1b960:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
   1b964:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
   1b968:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
   1b96c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
   1b970:	4299      	cmp	r1, r3
   1b972:	bf34      	ite	cc
   1b974:	2101      	movcc	r1, #1
   1b976:	2180      	movcs	r1, #128	; 0x80
   1b978:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
   1b97c:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
   1b97e:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
   1b982:	461a      	mov	r2, r3
	} while (location < end_addr);
   1b984:	f103 0320 	add.w	r3, r3, #32
   1b988:	d1f8      	bne.n	1b97c <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
   1b98a:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1b98e:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   1b992:	4a0e      	ldr	r2, [pc, #56]	; (1b9cc <eepromemu_flash_erase_sector+0xa8>)
   1b994:	6953      	ldr	r3, [r2, #20]
   1b996:	07d9      	lsls	r1, r3, #31
   1b998:	d5fc      	bpl.n	1b994 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   1b99a:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
   1b99c:	490d      	ldr	r1, [pc, #52]	; (1b9d4 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   1b99e:	4b0e      	ldr	r3, [pc, #56]	; (1b9d8 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   1b9a0:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   1b9a2:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
   1b9a4:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1b9a8:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   1b9ac:	4907      	ldr	r1, [pc, #28]	; (1b9cc <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   1b9ae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   1b9b2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   1b9b6:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   1b9ba:	694b      	ldr	r3, [r1, #20]
   1b9bc:	07db      	lsls	r3, r3, #31
   1b9be:	d5fc      	bpl.n	1b9ba <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   1b9c0:	2301      	movs	r3, #1
}
   1b9c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   1b9c6:	614b      	str	r3, [r1, #20]
	flash_wait();
   1b9c8:	f7ff bea6 	b.w	1b718 <flash_wait>
   1b9cc:	402a8000 	.word	0x402a8000
   1b9d0:	5af05af0 	.word	0x5af05af0
   1b9d4:	08180420 	.word	0x08180420
   1b9d8:	00fff000 	.word	0x00fff000

0001b9dc <eeprom_write_byte>:
	if (addr > E2END) return;
   1b9dc:	f241 03bb 	movw	r3, #4283	; 0x10bb
   1b9e0:	4298      	cmp	r0, r3
   1b9e2:	f200 8089 	bhi.w	1baf8 <eeprom_write_byte+0x11c>
	if (!initialized) eeprom_initialize();
   1b9e6:	4b46      	ldr	r3, [pc, #280]	; (1bb00 <eeprom_write_byte+0x124>)
{
   1b9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
   1b9ec:	781b      	ldrb	r3, [r3, #0]
{
   1b9ee:	b0c2      	sub	sp, #264	; 0x108
   1b9f0:	4605      	mov	r5, r0
   1b9f2:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
   1b9f4:	2b00      	cmp	r3, #0
   1b9f6:	d07c      	beq.n	1baf2 <eeprom_write_byte+0x116>
	sector = (addr >> 2) % FLASH_SECTORS; 
   1b9f8:	08ab      	lsrs	r3, r5, #2
   1b9fa:	4e42      	ldr	r6, [pc, #264]	; (1bb04 <eeprom_write_byte+0x128>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   1b9fc:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
   1ba00:	4f41      	ldr	r7, [pc, #260]	; (1bb08 <eeprom_write_byte+0x12c>)
	sector = (addr >> 2) % FLASH_SECTORS; 
   1ba02:	fba6 2603 	umull	r2, r6, r6, r3
   1ba06:	1b9a      	subs	r2, r3, r6
   1ba08:	eb06 0652 	add.w	r6, r6, r2, lsr #1
   1ba0c:	0976      	lsrs	r6, r6, #5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   1ba0e:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
   1ba12:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
   1ba16:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1ba18:	4b3c      	ldr	r3, [pc, #240]	; (1bb0c <eeprom_write_byte+0x130>)
	end = p + sector_index[sector];
   1ba1a:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1ba1e:	4433      	add	r3, r6
	end = p + sector_index[sector];
   1ba20:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1ba22:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
   1ba26:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
   1ba2a:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
   1ba2e:	d964      	bls.n	1bafa <eeprom_write_byte+0x11e>
   1ba30:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
   1ba32:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
   1ba36:	881a      	ldrh	r2, [r3, #0]
   1ba38:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
   1ba3a:	b2d1      	uxtb	r1, r2
   1ba3c:	42a9      	cmp	r1, r5
   1ba3e:	bf08      	it	eq
   1ba40:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
   1ba44:	4298      	cmp	r0, r3
   1ba46:	d8f6      	bhi.n	1ba36 <eeprom_write_byte+0x5a>
	if (data == olddata) return;
   1ba48:	45e1      	cmp	r9, ip
   1ba4a:	d041      	beq.n	1bad0 <eeprom_write_byte+0xf4>
	if (sector_index[sector] < 2048) {
   1ba4c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   1ba50:	d341      	bcc.n	1bad6 <eeprom_write_byte+0xfa>
		memset(buf, 0xFF, sizeof(buf));
   1ba52:	ac02      	add	r4, sp, #8
   1ba54:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ba58:	21ff      	movs	r1, #255	; 0xff
   1ba5a:	4620      	mov	r0, r4
   1ba5c:	f006 fc50 	bl	22300 <memset>
		while (p < end) {
   1ba60:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   1ba64:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1ba68:	4642      	mov	r2, r8
   1ba6a:	4298      	cmp	r0, r3
   1ba6c:	bf34      	ite	cc
   1ba6e:	2001      	movcc	r0, #1
   1ba70:	f44f 6000 	movcs.w	r0, #2048	; 0x800
   1ba74:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
   1ba78:	4613      	mov	r3, r2
   1ba7a:	3202      	adds	r2, #2
   1ba7c:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
   1ba7e:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
   1ba80:	b2d9      	uxtb	r1, r3
   1ba82:	ea4f 2313 	mov.w	r3, r3, lsr #8
   1ba86:	5463      	strb	r3, [r4, r1]
		while (p < end) {
   1ba88:	d1f6      	bne.n	1ba78 <eeprom_write_byte+0x9c>
		buf[offset] = data;
   1ba8a:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
   1ba8e:	f10d 0907 	add.w	r9, sp, #7
   1ba92:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
   1ba96:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
   1ba98:	464c      	mov	r4, r9
   1ba9a:	4640      	mov	r0, r8
   1ba9c:	f7ff ff42 	bl	1b924 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
   1baa0:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
   1baa4:	eb08 0045 	add.w	r0, r8, r5, lsl #1
   1baa8:	2202      	movs	r2, #2
   1baaa:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
   1baae:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
   1bab0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
   1bab4:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
   1bab8:	d006      	beq.n	1bac8 <eeprom_write_byte+0xec>
				uint16_t newval = i | (buf[i] << 8);
   1baba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
   1babe:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
   1bac0:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
   1bac4:	f7ff feb8 	bl	1b838 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
   1bac8:	45a2      	cmp	sl, r4
   1baca:	d1e9      	bne.n	1baa0 <eeprom_write_byte+0xc4>
		sector_index[sector] = index;
   1bacc:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
   1bad0:	b042      	add	sp, #264	; 0x108
   1bad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
   1bad6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
   1bada:	a902      	add	r1, sp, #8
   1badc:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
   1bade:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
   1bae0:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
   1bae4:	f7ff fea8 	bl	1b838 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
   1bae8:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
   1baec:	b042      	add	sp, #264	; 0x108
   1baee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
   1baf2:	f7ff fe3f 	bl	1b774 <eeprom_initialize>
   1baf6:	e77f      	b.n	1b9f8 <eeprom_write_byte+0x1c>
   1baf8:	4770      	bx	lr
	uint8_t olddata=0xFF;
   1bafa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bafe:	e7a3      	b.n	1ba48 <eeprom_write_byte+0x6c>
   1bb00:	200136f1 	.word	0x200136f1
   1bb04:	04104105 	.word	0x04104105
   1bb08:	20013328 	.word	0x20013328
   1bb0c:	000607c0 	.word	0x000607c0

0001bb10 <dummy_isr>:
static void dummy_isr() {};
   1bb10:	4770      	bx	lr
   1bb12:	bf00      	nop

0001bb14 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
   1bb14:	2836      	cmp	r0, #54	; 0x36
   1bb16:	d858      	bhi.n	1bbca <attachInterrupt+0xb6>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
   1bb18:	0100      	lsls	r0, r0, #4
{
   1bb1a:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
   1bb1c:	4c34      	ldr	r4, [pc, #208]	; (1bbf0 <attachInterrupt+0xdc>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
   1bb1e:	4d35      	ldr	r5, [pc, #212]	; (1bbf4 <attachInterrupt+0xe0>)
	volatile uint32_t *gpio = portOutputRegister(pin);
   1bb20:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
   1bb22:	42ab      	cmp	r3, r5
   1bb24:	d056      	beq.n	1bbd4 <attachInterrupt+0xc0>
   1bb26:	d849      	bhi.n	1bbbc <attachInterrupt+0xa8>
   1bb28:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
   1bb2c:	d04b      	beq.n	1bbc6 <attachInterrupt+0xb2>
   1bb2e:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   1bb32:	42ab      	cmp	r3, r5
   1bb34:	d140      	bne.n	1bbb8 <attachInterrupt+0xa4>
   1bb36:	4d30      	ldr	r5, [pc, #192]	; (1bbf8 <attachInterrupt+0xe4>)
	volatile uint32_t *mux = portConfigRegister(pin);
   1bb38:	4420      	add	r0, r4
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   1bb3a:	4e30      	ldr	r6, [pc, #192]	; (1bbfc <attachInterrupt+0xe8>)
   1bb3c:	4c30      	ldr	r4, [pc, #192]	; (1bc00 <attachInterrupt+0xec>)
   1bb3e:	f8c4 62b4 	str.w	r6, [r4, #692]	; 0x2b4
	volatile uint32_t *pad = portControlRegister(pin);
   1bb42:	e9d0 c401 	ldrd	ip, r4, [r0, #4]
	uint32_t mask = digitalPinToBitMask(pin);
   1bb46:	68c0      	ldr	r0, [r0, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
   1bb48:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
   1bb4c:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
   1bb50:	2a04      	cmp	r2, #4
   1bb52:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
   1bb56:	d82f      	bhi.n	1bbb8 <attachInterrupt+0xa4>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   1bb58:	695e      	ldr	r6, [r3, #20]
   1bb5a:	ea26 0600 	bic.w	r6, r6, r0
   1bb5e:	615e      	str	r6, [r3, #20]
	*mux = 5;			// pin is GPIO
   1bb60:	f04f 0605 	mov.w	r6, #5
   1bb64:	f8cc 6000 	str.w	r6, [ip]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
   1bb68:	6826      	ldr	r6, [r4, #0]
   1bb6a:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
   1bb6e:	6026      	str	r6, [r4, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
   1bb70:	685c      	ldr	r4, [r3, #4]
   1bb72:	ea24 0400 	bic.w	r4, r4, r0
   1bb76:	605c      	str	r4, [r3, #4]
   1bb78:	4c22      	ldr	r4, [pc, #136]	; (1bc04 <attachInterrupt+0xf0>)
   1bb7a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
   1bb7e:	fa90 f2a0 	rbit	r2, r0
   1bb82:	fab2 f282 	clz	r2, r2
	table[index] = function;
   1bb86:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   1bb8a:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
   1bb8e:	d01d      	beq.n	1bbcc <attachInterrupt+0xb8>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
   1bb90:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
   1bb92:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
   1bb94:	ea01 0105 	and.w	r1, r1, r5
   1bb98:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
   1bb9a:	dc1d      	bgt.n	1bbd8 <attachInterrupt+0xc4>
			uint32_t shift = index * 2;
   1bb9c:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
   1bb9e:	2503      	movs	r5, #3
   1bba0:	68d9      	ldr	r1, [r3, #12]
   1bba2:	4094      	lsls	r4, r2
   1bba4:	fa05 f202 	lsl.w	r2, r5, r2
   1bba8:	ea21 0202 	bic.w	r2, r1, r2
   1bbac:	4322      	orrs	r2, r4
   1bbae:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
   1bbb0:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
   1bbb2:	695a      	ldr	r2, [r3, #20]
   1bbb4:	4302      	orrs	r2, r0
   1bbb6:	615a      	str	r2, [r3, #20]
}
   1bbb8:	bcf0      	pop	{r4, r5, r6, r7}
   1bbba:	4770      	bx	lr
	switch((uint32_t)gpio) {
   1bbbc:	4d12      	ldr	r5, [pc, #72]	; (1bc08 <attachInterrupt+0xf4>)
   1bbbe:	42ab      	cmp	r3, r5
   1bbc0:	d1fa      	bne.n	1bbb8 <attachInterrupt+0xa4>
			table = isr_table_gpio4;
   1bbc2:	4d12      	ldr	r5, [pc, #72]	; (1bc0c <attachInterrupt+0xf8>)
   1bbc4:	e7b8      	b.n	1bb38 <attachInterrupt+0x24>
			table = isr_table_gpio1;
   1bbc6:	4d12      	ldr	r5, [pc, #72]	; (1bc10 <attachInterrupt+0xfc>)
   1bbc8:	e7b6      	b.n	1bb38 <attachInterrupt+0x24>
   1bbca:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
   1bbcc:	69da      	ldr	r2, [r3, #28]
   1bbce:	4302      	orrs	r2, r0
   1bbd0:	61da      	str	r2, [r3, #28]
   1bbd2:	e7ed      	b.n	1bbb0 <attachInterrupt+0x9c>
			table = isr_table_gpio3;
   1bbd4:	4d0f      	ldr	r5, [pc, #60]	; (1bc14 <attachInterrupt+0x100>)
   1bbd6:	e7af      	b.n	1bb38 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
   1bbd8:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   1bbda:	2503      	movs	r5, #3
   1bbdc:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
   1bbde:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   1bbe0:	4094      	lsls	r4, r2
   1bbe2:	fa05 f202 	lsl.w	r2, r5, r2
   1bbe6:	ea21 0202 	bic.w	r2, r1, r2
   1bbea:	4322      	orrs	r2, r4
   1bbec:	611a      	str	r2, [r3, #16]
   1bbee:	e7df      	b.n	1bbb0 <attachInterrupt+0x9c>
   1bbf0:	20004be8 	.word	0x20004be8
   1bbf4:	42008000 	.word	0x42008000
   1bbf8:	20009ae4 	.word	0x20009ae4
   1bbfc:	00000021 	.word	0x00000021
   1bc00:	2000a000 	.word	0x2000a000
   1bc04:	20003404 	.word	0x20003404
   1bc08:	4200c000 	.word	0x4200c000
   1bc0c:	20009be4 	.word	0x20009be4
   1bc10:	20009a64 	.word	0x20009a64
   1bc14:	20009b64 	.word	0x20009b64

0001bc18 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   1bc18:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   1bc1a:	f7ea fc99 	bl	6550 <setup>
	while (1) {
		loop();
   1bc1e:	f7eb fb03 	bl	7228 <loop>
		yield();
   1bc22:	f001 fcd9 	bl	1d5d8 <yield>
	while (1) {
   1bc26:	e7fa      	b.n	1bc1e <main+0x6>

0001bc28 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
   1bc28:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
   1bc2a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
   1bc2e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
   1bc32:	d16d      	bne.n	1bd10 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
   1bc34:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
   1bc36:	d341      	bcc.n	1bcbc <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   1bc38:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc3c:	f840 3b04 	str.w	r3, [r0], #4
   1bc40:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc44:	f840 3b04 	str.w	r3, [r0], #4
   1bc48:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc4c:	f840 3b04 	str.w	r3, [r0], #4
   1bc50:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc54:	f840 3b04 	str.w	r3, [r0], #4
   1bc58:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc5c:	f840 3b04 	str.w	r3, [r0], #4
   1bc60:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc64:	f840 3b04 	str.w	r3, [r0], #4
   1bc68:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc6c:	f840 3b04 	str.w	r3, [r0], #4
   1bc70:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc74:	f840 3b04 	str.w	r3, [r0], #4
   1bc78:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc7c:	f840 3b04 	str.w	r3, [r0], #4
   1bc80:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc84:	f840 3b04 	str.w	r3, [r0], #4
   1bc88:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc8c:	f840 3b04 	str.w	r3, [r0], #4
   1bc90:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc94:	f840 3b04 	str.w	r3, [r0], #4
   1bc98:	f851 3b04 	ldr.w	r3, [r1], #4
   1bc9c:	f840 3b04 	str.w	r3, [r0], #4
   1bca0:	f851 3b04 	ldr.w	r3, [r1], #4
   1bca4:	f840 3b04 	str.w	r3, [r0], #4
   1bca8:	f851 3b04 	ldr.w	r3, [r1], #4
   1bcac:	f840 3b04 	str.w	r3, [r0], #4
   1bcb0:	f851 3b04 	ldr.w	r3, [r1], #4
   1bcb4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
   1bcb8:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
   1bcba:	d2bd      	bcs.n	1bc38 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
   1bcbc:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
   1bcbe:	d311      	bcc.n	1bce4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   1bcc0:	f851 3b04 	ldr.w	r3, [r1], #4
   1bcc4:	f840 3b04 	str.w	r3, [r0], #4
   1bcc8:	f851 3b04 	ldr.w	r3, [r1], #4
   1bccc:	f840 3b04 	str.w	r3, [r0], #4
   1bcd0:	f851 3b04 	ldr.w	r3, [r1], #4
   1bcd4:	f840 3b04 	str.w	r3, [r0], #4
   1bcd8:	f851 3b04 	ldr.w	r3, [r1], #4
   1bcdc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
   1bce0:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
   1bce2:	d2ed      	bcs.n	1bcc0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
   1bce4:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
   1bce6:	d305      	bcc.n	1bcf4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
   1bce8:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
   1bcec:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
   1bcf0:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
   1bcf2:	d2f9      	bcs.n	1bce8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
   1bcf4:	3204      	adds	r2, #4
	beq	.Ldone
   1bcf6:	d008      	beq.n	1bd0a <memcpy+0xe2>

	lsls	r2, r2, #31
   1bcf8:	07d2      	lsls	r2, r2, #31
	itt ne
   1bcfa:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   1bcfc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   1bd00:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
   1bd04:	d301      	bcc.n	1bd0a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
   1bd06:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
   1bd08:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   1bd0a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   1bd0c:	4770      	bx	lr
   1bd0e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
   1bd10:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
   1bd12:	d313      	bcc.n	1bd3c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
   1bd14:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
   1bd16:	d08d      	beq.n	1bc34 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
   1bd18:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
   1bd1c:	d08a      	beq.n	1bc34 <memcpy+0xc>

	rsb	r3, #4
   1bd1e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
   1bd22:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
   1bd24:	07db      	lsls	r3, r3, #31
	itt ne
   1bd26:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   1bd28:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   1bd2c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
   1bd30:	d380      	bcc.n	1bc34 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
   1bd32:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
   1bd36:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
   1bd3a:	e77b      	b.n	1bc34 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
   1bd3c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
   1bd3e:	d3d9      	bcc.n	1bcf4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
   1bd40:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
   1bd42:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
   1bd46:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
   1bd4a:	d2f9      	bcs.n	1bd40 <memcpy+0x118>

	ldrb	r3, [r1]
   1bd4c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
   1bd4e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
   1bd50:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
   1bd52:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
   1bd54:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
   1bd56:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   1bd58:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   1bd5a:	4770      	bx	lr

0001bd5c <operator new(unsigned int)>:
#include <cstdlib>
#include <new>

void * operator new(size_t size)
{
	return malloc(size);
   1bd5c:	f004 bbbe 	b.w	204dc <malloc>

0001bd60 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
   1bd60:	f004 bbc4 	b.w	204ec <free>

0001bd64 <ultoa>:
	int i=0, j;
   1bd64:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
   1bd68:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
   1bd6a:	4666      	mov	r6, ip
	int i=0, j;
   1bd6c:	2400      	movs	r4, #0
   1bd6e:	e000      	b.n	1bd72 <ultoa+0xe>
		i++;
   1bd70:	3401      	adds	r4, #1
		digit = val % radix;
   1bd72:	fbb0 f5f2 	udiv	r5, r0, r2
   1bd76:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1bd7a:	2b09      	cmp	r3, #9
   1bd7c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
   1bd80:	f103 0330 	add.w	r3, r3, #48	; 0x30
   1bd84:	fa5f fe8e 	uxtb.w	lr, lr
   1bd88:	bf98      	it	ls
   1bd8a:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
   1bd8e:	4290      	cmp	r0, r2
		val /= radix;
   1bd90:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1bd92:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
   1bd96:	d2eb      	bcs.n	1bd70 <ultoa+0xc>
	buf[i + 1] = 0;
   1bd98:	1c63      	adds	r3, r4, #1
   1bd9a:	2200      	movs	r2, #0
   1bd9c:	18c8      	adds	r0, r1, r3
   1bd9e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
   1bda0:	b17c      	cbz	r4, 1bdc2 <ultoa+0x5e>
		t = buf[j];
   1bda2:	4662      	mov	r2, ip
   1bda4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
   1bda8:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
   1bdac:	eba1 030c 	sub.w	r3, r1, ip
   1bdb0:	3202      	adds	r2, #2
		buf[j] = buf[i];
   1bdb2:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
   1bdb6:	3b01      	subs	r3, #1
   1bdb8:	1a52      	subs	r2, r2, r1
		buf[i] = t;
   1bdba:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
   1bdbc:	4423      	add	r3, r4
   1bdbe:	429a      	cmp	r2, r3
   1bdc0:	dbef      	blt.n	1bda2 <ultoa+0x3e>
}
   1bdc2:	4608      	mov	r0, r1
   1bdc4:	bd70      	pop	{r4, r5, r6, pc}
   1bdc6:	bf00      	nop

0001bdc8 <ltoa>:
	if (val >= 0) {
   1bdc8:	1e03      	subs	r3, r0, #0
   1bdca:	db01      	blt.n	1bdd0 <ltoa+0x8>
		return ultoa(val, buf, radix);
   1bdcc:	f7ff bfca 	b.w	1bd64 <ultoa>
		buf[0] = '-';
   1bdd0:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
		ultoa(-val, buf + 1, radix);
   1bdd4:	4258      	negs	r0, r3
{
   1bdd6:	b510      	push	{r4, lr}
   1bdd8:	460c      	mov	r4, r1
		buf[0] = '-';
   1bdda:	f801 cb01 	strb.w	ip, [r1], #1
		ultoa(-val, buf + 1, radix);
   1bdde:	f7ff ffc1 	bl	1bd64 <ultoa>
}
   1bde2:	4620      	mov	r0, r4
   1bde4:	bd10      	pop	{r4, pc}
   1bde6:	bf00      	nop

0001bde8 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
   1bde8:	eeb4 0a40 	vcmp.f32	s0, s0
{
   1bdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
   1bdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   1bdf4:	4616      	mov	r6, r2
	int awidth = abs(width);
   1bdf6:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
   1bdfa:	4607      	mov	r7, r0
   1bdfc:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
   1be00:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
   1be04:	eeb0 8a40 	vmov.f32	s16, s0
   1be08:	b085      	sub	sp, #20
	if (isnanf(val)) {
   1be0a:	f180 8148 	bvs.w	1c09e <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
   1be0e:	eef0 7ac0 	vabs.f32	s15, s0
   1be12:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 1c128 <dtostrf+0x340>
   1be16:	eef4 7a47 	vcmp.f32	s15, s14
   1be1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1be1e:	dd29      	ble.n	1be74 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
   1be20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   1be24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1be28:	f100 80ed 	bmi.w	1c006 <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1be2c:	2a03      	cmp	r2, #3
   1be2e:	f340 8091 	ble.w	1bf54 <dtostrf+0x16c>
   1be32:	2303      	movs	r3, #3
		if (width<0) {
   1be34:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1be36:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
   1be3a:	f2c0 8085 	blt.w	1bf48 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
   1be3e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1be42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1be46:	f100 816a 	bmi.w	1c11e <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   1be4a:	2149      	movs	r1, #73	; 0x49
   1be4c:	234e      	movs	r3, #78	; 0x4e
   1be4e:	2046      	movs	r0, #70	; 0x46
   1be50:	1cf4      	adds	r4, r6, #3
   1be52:	7031      	strb	r1, [r6, #0]
   1be54:	70b0      	strb	r0, [r6, #2]
   1be56:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
   1be58:	b122      	cbz	r2, 1be64 <dtostrf+0x7c>
			*buf++ = ' ';
   1be5a:	4620      	mov	r0, r4
   1be5c:	2120      	movs	r1, #32
   1be5e:	4414      	add	r4, r2
   1be60:	f006 fa4e 	bl	22300 <memset>
			awidth--;
		}
		*buf = 0;
   1be64:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
   1be66:	4620      	mov	r0, r4
		*buf = 0;
   1be68:	7023      	strb	r3, [r4, #0]
}
   1be6a:	b005      	add	sp, #20
   1be6c:	ecbd 8b02 	vpop	{d8}
   1be70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
   1be74:	4689      	mov	r9, r1
   1be76:	460d      	mov	r5, r1
   1be78:	aa02      	add	r2, sp, #8
   1be7a:	a901      	add	r1, sp, #4
   1be7c:	4648      	mov	r0, r9
   1be7e:	f006 fb47 	bl	22510 <fcvtf>
	if (precision == 0 && decpt == 0) {
   1be82:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
   1be86:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
   1be88:	ea59 030a 	orrs.w	r3, r9, sl
   1be8c:	d172      	bne.n	1bf74 <dtostrf+0x18c>
		decpt++;
   1be8e:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
   1be90:	7802      	ldrb	r2, [r0, #0]
   1be92:	4ca6      	ldr	r4, [pc, #664]	; (1c12c <dtostrf+0x344>)
		decpt++;
   1be94:	469a      	mov	sl, r3
   1be96:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
   1be98:	4ba5      	ldr	r3, [pc, #660]	; (1c130 <dtostrf+0x348>)
		decpt++;
   1be9a:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
   1be9c:	2a34      	cmp	r2, #52	; 0x34
   1be9e:	bf88      	it	hi
   1bea0:	461c      	movhi	r4, r3
	if (sign) reqd++;
   1bea2:	9b02      	ldr	r3, [sp, #8]
   1bea4:	2b00      	cmp	r3, #0
   1bea6:	d07d      	beq.n	1bfa4 <dtostrf+0x1bc>
   1bea8:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
   1beac:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
   1beb0:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
   1beb4:	f1bb 0f00 	cmp.w	fp, #0
   1beb8:	f340 80a1 	ble.w	1bffe <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
   1bebc:	465a      	mov	r2, fp
   1bebe:	2120      	movs	r1, #32
   1bec0:	4630      	mov	r0, r6
		e += pad;
   1bec2:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
   1bec4:	f006 fa1c 	bl	22300 <memset>
   1bec8:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
   1becc:	222d      	movs	r2, #45	; 0x2d
   1bece:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
   1bed2:	f1ba 0f00 	cmp.w	sl, #0
   1bed6:	d177      	bne.n	1bfc8 <dtostrf+0x1e0>
   1bed8:	f1b9 0f00 	cmp.w	r9, #0
   1bedc:	d006      	beq.n	1beec <dtostrf+0x104>
		*p++ = '0';
   1bede:	461a      	mov	r2, r3
   1bee0:	2130      	movs	r1, #48	; 0x30
   1bee2:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
   1bee6:	212e      	movs	r1, #46	; 0x2e
   1bee8:	7059      	strb	r1, [r3, #1]
   1beea:	4613      	mov	r3, r2
	while (p < e) {
   1beec:	42ab      	cmp	r3, r5
   1beee:	d21f      	bcs.n	1bf30 <dtostrf+0x148>
		*p++ = *s++;
   1bef0:	46a4      	mov	ip, r4
   1bef2:	4619      	mov	r1, r3
   1bef4:	f81c 2b01 	ldrb.w	r2, [ip], #1
   1bef8:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
   1befc:	42a9      	cmp	r1, r5
   1befe:	d018      	beq.n	1bf32 <dtostrf+0x14a>
   1bf00:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
   1bf02:	202e      	movs	r0, #46	; 0x2e
   1bf04:	3c01      	subs	r4, #1
   1bf06:	e00b      	b.n	1bf20 <dtostrf+0x138>
   1bf08:	7058      	strb	r0, [r3, #1]
   1bf0a:	3302      	adds	r3, #2
		if (p == e) break;
   1bf0c:	3c01      	subs	r4, #1
	while (p < e) {
   1bf0e:	42ab      	cmp	r3, r5
		*p++ = *s++;
   1bf10:	4619      	mov	r1, r3
	while (p < e) {
   1bf12:	d20d      	bcs.n	1bf30 <dtostrf+0x148>
		*p++ = *s++;
   1bf14:	f81c 2b01 	ldrb.w	r2, [ip], #1
   1bf18:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
   1bf1c:	42a9      	cmp	r1, r5
   1bf1e:	d008      	beq.n	1bf32 <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
   1bf20:	9401      	str	r4, [sp, #4]
   1bf22:	2c00      	cmp	r4, #0
   1bf24:	d0f0      	beq.n	1bf08 <dtostrf+0x120>
   1bf26:	460b      	mov	r3, r1
		if (p == e) break;
   1bf28:	3c01      	subs	r4, #1
	while (p < e) {
   1bf2a:	42ab      	cmp	r3, r5
		*p++ = *s++;
   1bf2c:	4619      	mov	r1, r3
	while (p < e) {
   1bf2e:	d3f1      	bcc.n	1bf14 <dtostrf+0x12c>
   1bf30:	461d      	mov	r5, r3
	if (width < 0) {
   1bf32:	2f00      	cmp	r7, #0
   1bf34:	db6b      	blt.n	1c00e <dtostrf+0x226>
	return buf;
   1bf36:	4634      	mov	r4, r6
	*p = 0;
   1bf38:	2300      	movs	r3, #0
}
   1bf3a:	4620      	mov	r0, r4
	*p = 0;
   1bf3c:	702b      	strb	r3, [r5, #0]
}
   1bf3e:	b005      	add	sp, #20
   1bf40:	ecbd 8b02 	vpop	{d8}
   1bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
   1bf48:	b122      	cbz	r2, 1bf54 <dtostrf+0x16c>
				*buf++ = ' ';
   1bf4a:	4630      	mov	r0, r6
   1bf4c:	2120      	movs	r1, #32
   1bf4e:	4416      	add	r6, r2
   1bf50:	f006 f9d6 	bl	22300 <memset>
		if (val<0) *buf++ = '-';
   1bf54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1bf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1bf5c:	f140 80bd 	bpl.w	1c0da <dtostrf+0x2f2>
   1bf60:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   1bf62:	2249      	movs	r2, #73	; 0x49
   1bf64:	234e      	movs	r3, #78	; 0x4e
   1bf66:	2046      	movs	r0, #70	; 0x46
   1bf68:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
   1bf6a:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   1bf6c:	70f0      	strb	r0, [r6, #3]
   1bf6e:	7072      	strb	r2, [r6, #1]
   1bf70:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   1bf72:	e777      	b.n	1be64 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
   1bf74:	f1ca 0300 	rsb	r3, sl, #0
   1bf78:	4599      	cmp	r9, r3
   1bf7a:	da57      	bge.n	1c02c <dtostrf+0x244>
		decpt = -precision;
   1bf7c:	f04f 0801 	mov.w	r8, #1
   1bf80:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
   1bf84:	4c69      	ldr	r4, [pc, #420]	; (1c12c <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
   1bf86:	45c2      	cmp	sl, r8
		decpt = -precision;
   1bf88:	4640      	mov	r0, r8
   1bf8a:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
   1bf8e:	bfb8      	it	lt
   1bf90:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
   1bf94:	f1ba 0f00 	cmp.w	sl, #0
   1bf98:	d152      	bne.n	1c040 <dtostrf+0x258>
	if (sign) reqd++;
   1bf9a:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
   1bf9c:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
   1bfa0:	2b00      	cmp	r3, #0
   1bfa2:	d181      	bne.n	1bea8 <dtostrf+0xc0>
	pad = width - reqd;
   1bfa4:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
   1bfa8:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
   1bfac:	f1bb 0f00 	cmp.w	fp, #0
   1bfb0:	dd27      	ble.n	1c002 <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
   1bfb2:	465a      	mov	r2, fp
   1bfb4:	2120      	movs	r1, #32
   1bfb6:	4630      	mov	r0, r6
		e += pad;
   1bfb8:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
   1bfba:	f006 f9a1 	bl	22300 <memset>
   1bfbe:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
   1bfc2:	f1ba 0f00 	cmp.w	sl, #0
   1bfc6:	d087      	beq.n	1bed8 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
   1bfc8:	f1ba 0f00 	cmp.w	sl, #0
   1bfcc:	da8e      	bge.n	1beec <dtostrf+0x104>
   1bfce:	f1b9 0f00 	cmp.w	r9, #0
   1bfd2:	d08b      	beq.n	1beec <dtostrf+0x104>
		*p++ = '0';
   1bfd4:	4618      	mov	r0, r3
		*p++ = '.';
   1bfd6:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
   1bfd8:	2130      	movs	r1, #48	; 0x30
   1bfda:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
   1bfde:	705a      	strb	r2, [r3, #1]
   1bfe0:	4602      	mov	r2, r0
   1bfe2:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
   1bfe4:	3301      	adds	r3, #1
			*p++ = '0';
   1bfe6:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
   1bfea:	d1fb      	bne.n	1bfe4 <dtostrf+0x1fc>
			*p++ = '0';
   1bfec:	f1ba 0f00 	cmp.w	sl, #0
   1bff0:	9301      	str	r3, [sp, #4]
   1bff2:	f1ca 0300 	rsb	r3, sl, #0
   1bff6:	bfa8      	it	ge
   1bff8:	2301      	movge	r3, #1
   1bffa:	4403      	add	r3, r0
   1bffc:	e776      	b.n	1beec <dtostrf+0x104>
	if (pad > 0) {
   1bffe:	4633      	mov	r3, r6
   1c000:	e764      	b.n	1becc <dtostrf+0xe4>
   1c002:	4633      	mov	r3, r6
   1c004:	e765      	b.n	1bed2 <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1c006:	2a04      	cmp	r2, #4
   1c008:	ddaa      	ble.n	1bf60 <dtostrf+0x178>
   1c00a:	2304      	movs	r3, #4
   1c00c:	e712      	b.n	1be34 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
   1c00e:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
   1c010:	f1b8 0f00 	cmp.w	r8, #0
   1c014:	ea6f 0208 	mvn.w	r2, r8
   1c018:	da8d      	bge.n	1bf36 <dtostrf+0x14e>
   1c01a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1c01e:	2120      	movs	r1, #32
   1c020:	4628      	mov	r0, r5
   1c022:	3201      	adds	r2, #1
   1c024:	4415      	add	r5, r2
   1c026:	f006 f96b 	bl	22300 <memset>
   1c02a:	e784      	b.n	1bf36 <dtostrf+0x14e>
	reqd = strlen(s);
   1c02c:	f006 fb88 	bl	22740 <strlen>
   1c030:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
   1c032:	45c2      	cmp	sl, r8
   1c034:	bfb8      	it	lt
   1c036:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
   1c03a:	f1ba 0f00 	cmp.w	sl, #0
   1c03e:	d0ac      	beq.n	1bf9a <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
   1c040:	f1ba 0f00 	cmp.w	sl, #0
   1c044:	f6bf af2d 	bge.w	1bea2 <dtostrf+0xba>
   1c048:	f1b9 0f00 	cmp.w	r9, #0
   1c04c:	f43f af29 	beq.w	1bea2 <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
   1c050:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
   1c054:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
   1c058:	4283      	cmp	r3, r0
   1c05a:	f4bf af22 	bcs.w	1bea2 <dtostrf+0xba>
			while (newPrecision > 0) {
   1c05e:	f1b9 0f00 	cmp.w	r9, #0
   1c062:	dd05      	ble.n	1c070 <dtostrf+0x288>
				val *= 10.0f;
   1c064:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
   1c068:	3d01      	subs	r5, #1
				val *= 10.0f;
   1c06a:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
   1c06e:	d1fb      	bne.n	1c068 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   1c070:	aa02      	add	r2, sp, #8
   1c072:	eeb0 0a48 	vmov.f32	s0, s16
   1c076:	4628      	mov	r0, r5
   1c078:	a903      	add	r1, sp, #12
   1c07a:	f006 fa49 	bl	22510 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   1c07e:	f8dd a004 	ldr.w	sl, [sp, #4]
   1c082:	9b03      	ldr	r3, [sp, #12]
   1c084:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   1c088:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   1c08a:	eba3 030a 	sub.w	r3, r3, sl
   1c08e:	4293      	cmp	r3, r2
   1c090:	f47f af07 	bne.w	1bea2 <dtostrf+0xba>
   1c094:	f10a 0a01 	add.w	sl, sl, #1
   1c098:	f8cd a004 	str.w	sl, [sp, #4]
   1c09c:	e701      	b.n	1bea2 <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
   1c09e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   1c0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c0a6:	bf4c      	ite	mi
   1c0a8:	2304      	movmi	r3, #4
   1c0aa:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1c0ac:	4293      	cmp	r3, r2
   1c0ae:	da22      	bge.n	1c0f6 <dtostrf+0x30e>
		if (width<0) {
   1c0b0:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1c0b2:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
   1c0b6:	db18      	blt.n	1c0ea <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   1c0b8:	ee10 3a10 	vmov	r3, s0
   1c0bc:	2b00      	cmp	r3, #0
   1c0be:	da02      	bge.n	1c0c6 <dtostrf+0x2de>
   1c0c0:	232d      	movs	r3, #45	; 0x2d
   1c0c2:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   1c0c6:	234e      	movs	r3, #78	; 0x4e
   1c0c8:	2141      	movs	r1, #65	; 0x41
   1c0ca:	1cf4      	adds	r4, r6, #3
   1c0cc:	7033      	strb	r3, [r6, #0]
   1c0ce:	7071      	strb	r1, [r6, #1]
   1c0d0:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   1c0d2:	2a00      	cmp	r2, #0
   1c0d4:	f47f aec1 	bne.w	1be5a <dtostrf+0x72>
   1c0d8:	e6c4      	b.n	1be64 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   1c0da:	2149      	movs	r1, #73	; 0x49
   1c0dc:	224e      	movs	r2, #78	; 0x4e
   1c0de:	2346      	movs	r3, #70	; 0x46
   1c0e0:	1cf4      	adds	r4, r6, #3
   1c0e2:	7031      	strb	r1, [r6, #0]
   1c0e4:	7072      	strb	r2, [r6, #1]
   1c0e6:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   1c0e8:	e6bc      	b.n	1be64 <dtostrf+0x7c>
			while (awidth) {
   1c0ea:	b122      	cbz	r2, 1c0f6 <dtostrf+0x30e>
				*buf++ = ' ';
   1c0ec:	4630      	mov	r0, r6
   1c0ee:	2120      	movs	r1, #32
   1c0f0:	4416      	add	r6, r2
   1c0f2:	f006 f905 	bl	22300 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   1c0f6:	ee18 3a10 	vmov	r3, s16
   1c0fa:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   1c0fc:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   1c100:	db05      	blt.n	1c10e <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   1c102:	2241      	movs	r2, #65	; 0x41
   1c104:	1cf4      	adds	r4, r6, #3
   1c106:	7033      	strb	r3, [r6, #0]
   1c108:	7072      	strb	r2, [r6, #1]
   1c10a:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   1c10c:	e6aa      	b.n	1be64 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   1c10e:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   1c110:	2241      	movs	r2, #65	; 0x41
   1c112:	1d34      	adds	r4, r6, #4
   1c114:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   1c116:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   1c118:	70b2      	strb	r2, [r6, #2]
   1c11a:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
   1c11c:	e6a2      	b.n	1be64 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
   1c11e:	232d      	movs	r3, #45	; 0x2d
   1c120:	f806 3b01 	strb.w	r3, [r6], #1
   1c124:	e691      	b.n	1be4a <dtostrf+0x62>
   1c126:	bf00      	nop
   1c128:	7f7fffff 	.word	0x7f7fffff
   1c12c:	20004f58 	.word	0x20004f58
   1c130:	20004f5c 	.word	0x20004f5c

0001c134 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   1c134:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
   1c136:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   1c138:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
   1c13c:	4619      	mov	r1, r3
{
   1c13e:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1c140:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   1c144:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1c148:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1c14c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
   1c150:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
   1c154:	460a      	mov	r2, r1
	p->FFILT0 = 0;
   1c156:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   1c15a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   1c15e:	b29b      	uxth	r3, r3
   1c160:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   1c164:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1c168:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
   1c16c:	3101      	adds	r1, #1
   1c16e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   1c172:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1c174:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   1c176:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   1c17a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   1c17c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   1c17e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   1c180:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   1c182:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
   1c186:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   1c188:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   1c18a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   1c18c:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
   1c18e:	d1eb      	bne.n	1c168 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   1c190:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   1c194:	b29b      	uxth	r3, r3
   1c196:	f043 030f 	orr.w	r3, r3, #15
   1c19a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   1c19e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   1c1a2:	b29b      	uxth	r3, r3
   1c1a4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
   1c1a8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   1c1ac:	bd10      	pop	{r4, pc}
   1c1ae:	bf00      	nop

0001c1b0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1c1b0:	4b37      	ldr	r3, [pc, #220]	; (1c290 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   1c1b2:	4a38      	ldr	r2, [pc, #224]	; (1c294 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1c1b4:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
   1c1b6:	4838      	ldr	r0, [pc, #224]	; (1c298 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1c1b8:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
   1c1bc:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1c1be:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1c1c0:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   1c1c4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1c1c8:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1c1cc:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   1c1d0:	430a      	orrs	r2, r1
   1c1d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
   1c1d6:	f7ff ffad 	bl	1c134 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
   1c1da:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   1c1de:	f7ff ffa9 	bl	1c134 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
   1c1e2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   1c1e6:	f7ff ffa5 	bl	1c134 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
   1c1ea:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   1c1ee:	f7ff ffa1 	bl	1c134 <flexpwm_init>
	for (i=0; i < 4; i++) {
   1c1f2:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   1c1f4:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1c1f8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
   1c1fc:	4611      	mov	r1, r2
   1c1fe:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   1c202:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   1c206:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   1c208:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   1c20a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   1c20c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1c20e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1c212:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1c214:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   1c216:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   1c21a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1c21c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   1c21e:	d1ee      	bne.n	1c1fe <pwm_init+0x4e>
   1c220:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   1c222:	481e      	ldr	r0, [pc, #120]	; (1c29c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1c224:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1c228:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   1c22c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1c22e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1c232:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   1c236:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   1c23a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   1c23e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   1c240:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   1c242:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   1c244:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1c246:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1c24a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1c24c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   1c24e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   1c252:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1c254:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   1c256:	d1ee      	bne.n	1c236 <pwm_init+0x86>
   1c258:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   1c25a:	4811      	ldr	r0, [pc, #68]	; (1c2a0 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1c25c:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1c25e:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   1c262:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1c264:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1c268:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   1c26c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   1c270:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   1c274:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   1c276:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   1c278:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   1c27a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1c27c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1c27e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1c280:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   1c282:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   1c286:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1c288:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
   1c28c:	d1ee      	bne.n	1c26c <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   1c28e:	bd70      	pop	{r4, r5, r6, pc}
   1c290:	400fc000 	.word	0x400fc000
   1c294:	fc030000 	.word	0xfc030000
   1c298:	403dc000 	.word	0x403dc000
   1c29c:	401e0000 	.word	0x401e0000
   1c2a0:	401e4000 	.word	0x401e4000

0001c2a4 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
   1c2a4:	4a07      	ldr	r2, [pc, #28]	; (1c2c4 <rtc_get+0x20>)
   1c2a6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
   1c2a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
   1c2aa:	4619      	mov	r1, r3
   1c2ac:	4684      	mov	ip, r0
   1c2ae:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
   1c2b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
   1c2b2:	4299      	cmp	r1, r3
   1c2b4:	d1f9      	bne.n	1c2aa <rtc_get+0x6>
   1c2b6:	4584      	cmp	ip, r0
   1c2b8:	d1f7      	bne.n	1c2aa <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
   1c2ba:	0bdb      	lsrs	r3, r3, #15
}
   1c2bc:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   1c2c0:	4770      	bx	lr
   1c2c2:	bf00      	nop
   1c2c4:	400d4000 	.word	0x400d4000

0001c2c8 <unused_interrupt_vector>:
	__disable_irq();
   1c2c8:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
   1c2ca:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
   1c2ce:	4c52      	ldr	r4, [pc, #328]	; (1c418 <unused_interrupt_vector+0x150>)
   1c2d0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
   1c2d4:	f01e 0f04 	tst.w	lr, #4
   1c2d8:	bf0c      	ite	eq
   1c2da:	f3ef 8208 	mrseq	r2, MSP
   1c2de:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
   1c2e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
   1c2e6:	4e4d      	ldr	r6, [pc, #308]	; (1c41c <unused_interrupt_vector+0x154>)
	while (p < end) {
   1c2e8:	4d4d      	ldr	r5, [pc, #308]	; (1c420 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
   1c2ea:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
   1c2ee:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
   1c2f2:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
   1c2f6:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
   1c2fa:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
   1c2fe:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
   1c302:	6993      	ldr	r3, [r2, #24]
   1c304:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
   1c308:	69d3      	ldr	r3, [r2, #28]
   1c30a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
   1c30e:	f000 f8d3 	bl	1c4b8 <tempmonGetTemp>
   1c312:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
   1c316:	f7ff ffc5 	bl	1c2a4 <rtc_get>
	info->len = sizeof(*info) / 4;
   1c31a:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
   1c31c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
   1c320:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
   1c324:	460b      	mov	r3, r1
   1c326:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   1c32a:	493e      	ldr	r1, [pc, #248]	; (1c424 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
   1c32c:	1d30      	adds	r0, r6, #4
   1c32e:	405a      	eors	r2, r3
   1c330:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   1c332:	f002 0301 	and.w	r3, r2, #1
   1c336:	3c01      	subs	r4, #1
   1c338:	fb01 f303 	mul.w	r3, r1, r3
   1c33c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
   1c340:	d1f7      	bne.n	1c332 <unused_interrupt_vector+0x6a>
	while (p < end) {
   1c342:	42a8      	cmp	r0, r5
   1c344:	d002      	beq.n	1c34c <unused_interrupt_vector+0x84>
		crc ^= *p++;
   1c346:	6873      	ldr	r3, [r6, #4]
   1c348:	4606      	mov	r6, r0
   1c34a:	e7ef      	b.n	1c32c <unused_interrupt_vector+0x64>
	info->crc = crc;
   1c34c:	4b32      	ldr	r3, [pc, #200]	; (1c418 <unused_interrupt_vector+0x150>)
   1c34e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
   1c352:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   1c356:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1c35a:	4930      	ldr	r1, [pc, #192]	; (1c41c <unused_interrupt_vector+0x154>)
   1c35c:	4a32      	ldr	r2, [pc, #200]	; (1c428 <unused_interrupt_vector+0x160>)
   1c35e:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
   1c362:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
   1c366:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1c36a:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   1c36e:	4a2f      	ldr	r2, [pc, #188]	; (1c42c <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
   1c370:	2502      	movs	r5, #2
   1c372:	482f      	ldr	r0, [pc, #188]	; (1c430 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   1c374:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   1c376:	492f      	ldr	r1, [pc, #188]	; (1c434 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   1c378:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   1c37c:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
   1c37e:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   1c380:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   1c382:	482d      	ldr	r0, [pc, #180]	; (1c438 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   1c384:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1c388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c38c:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   1c38e:	680b      	ldr	r3, [r1, #0]
   1c390:	4283      	cmp	r3, r0
   1c392:	d83d      	bhi.n	1c410 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
   1c394:	4d26      	ldr	r5, [pc, #152]	; (1c430 <unused_interrupt_vector+0x168>)
   1c396:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
   1c398:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1c39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
   1c3a0:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   1c3a2:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
   1c3a4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
   1c3a8:	4924      	ldr	r1, [pc, #144]	; (1c43c <unused_interrupt_vector+0x174>)
   1c3aa:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   1c3ae:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
   1c3b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
   1c3b6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
   1c3ba:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
   1c3be:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
   1c3c2:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
   1c3c6:	e001      	b.n	1c3cc <unused_interrupt_vector+0x104>
		usb_isr();
   1c3c8:	f000 f968 	bl	1c69c <usb_isr>
		if (PIT_TFLG0) {
   1c3cc:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   1c3d0:	2b00      	cmp	r3, #0
   1c3d2:	d0f9      	beq.n	1c3c8 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
   1c3d4:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
   1c3d6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
   1c3da:	2c4f      	cmp	r4, #79	; 0x4f
   1c3dc:	d9f4      	bls.n	1c3c8 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   1c3de:	4b18      	ldr	r3, [pc, #96]	; (1c440 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
   1c3e0:	2002      	movs	r0, #2
   1c3e2:	4918      	ldr	r1, [pc, #96]	; (1c444 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   1c3e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
   1c3e8:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   1c3ec:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   1c3ee:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   1c3f2:	b93b      	cbnz	r3, 1c404 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
   1c3f4:	4814      	ldr	r0, [pc, #80]	; (1c448 <unused_interrupt_vector+0x180>)
   1c3f6:	4915      	ldr	r1, [pc, #84]	; (1c44c <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   1c3f8:	4a0d      	ldr	r2, [pc, #52]	; (1c430 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
   1c3fa:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   1c3fc:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   1c400:	2b00      	cmp	r3, #0
   1c402:	d0fa      	beq.n	1c3fa <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
   1c404:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1c408:	4a11      	ldr	r2, [pc, #68]	; (1c450 <unused_interrupt_vector+0x188>)
   1c40a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
   1c40e:	e7fe      	b.n	1c40e <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   1c410:	f7fe ff18 	bl	1b244 <set_arm_clock>
   1c414:	e7be      	b.n	1c394 <unused_interrupt_vector+0xcc>
   1c416:	bf00      	nop
   1c418:	2027ff00 	.word	0x2027ff00
   1c41c:	2027ff80 	.word	0x2027ff80
   1c420:	2027ffa8 	.word	0x2027ffa8
   1c424:	edb88320 	.word	0xedb88320
   1c428:	2027ffa0 	.word	0x2027ffa0
   1c42c:	400fc000 	.word	0x400fc000
   1c430:	40084000 	.word	0x40084000
   1c434:	20008aac 	.word	0x20008aac
   1c438:	0bcd3d80 	.word	0x0bcd3d80
   1c43c:	00249f00 	.word	0x00249f00
   1c440:	400d9000 	.word	0x400d9000
   1c444:	402e0000 	.word	0x402e0000
   1c448:	400f8000 	.word	0x400f8000
   1c44c:	0bad00f1 	.word	0x0bad00f1
   1c450:	05fa0004 	.word	0x05fa0004

0001c454 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
   1c454:	490a      	ldr	r1, [pc, #40]	; (1c480 <_sbrk+0x2c>)
   1c456:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
   1c458:	b138      	cbz	r0, 1c46a <_sbrk+0x16>
{
   1c45a:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
   1c45c:	1813      	adds	r3, r2, r0
   1c45e:	4809      	ldr	r0, [pc, #36]	; (1c484 <_sbrk+0x30>)
   1c460:	4283      	cmp	r3, r0
   1c462:	d804      	bhi.n	1c46e <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
   1c464:	4610      	mov	r0, r2
                __brkval = prev + incr;
   1c466:	600b      	str	r3, [r1, #0]
}
   1c468:	bd08      	pop	{r3, pc}
   1c46a:	4610      	mov	r0, r2
   1c46c:	4770      	bx	lr
                        errno = ENOMEM;
   1c46e:	f006 f87d 	bl	2256c <__errno>
   1c472:	230c      	movs	r3, #12
                        return (void *)-1;
   1c474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
   1c478:	6003      	str	r3, [r0, #0]
}
   1c47a:	4610      	mov	r0, r2
   1c47c:	bd08      	pop	{r3, pc}
   1c47e:	bf00      	nop
   1c480:	2000945c 	.word	0x2000945c
   1c484:	20280000 	.word	0x20280000

0001c488 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
   1c488:	2000      	movs	r0, #0
   1c48a:	4770      	bx	lr

0001c48c <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
   1c48c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c490:	4770      	bx	lr
   1c492:	bf00      	nop

0001c494 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
   1c494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
   1c498:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   1c49a:	604b      	str	r3, [r1, #4]
}
   1c49c:	4770      	bx	lr
   1c49e:	bf00      	nop

0001c4a0 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
   1c4a0:	2001      	movs	r0, #1
   1c4a2:	4770      	bx	lr

0001c4a4 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
   1c4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c4a8:	4770      	bx	lr
   1c4aa:	bf00      	nop

0001c4ac <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
   1c4ac:	bf30      	wfi
   1c4ae:	e7fd      	b.n	1c4ac <__cxa_pure_virtual>

0001c4b0 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
   1c4b0:	bf30      	wfi
   1c4b2:	e7fd      	b.n	1c4b0 <abort>

0001c4b4 <Panic_Temp_isr>:
  unused_interrupt_vector();
   1c4b4:	f7ff bf08 	b.w	1c2c8 <unused_interrupt_vector>

0001c4b8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
   1c4b8:	4a12      	ldr	r2, [pc, #72]	; (1c504 <tempmonGetTemp+0x4c>)
   1c4ba:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1c4be:	075b      	lsls	r3, r3, #29
   1c4c0:	d5fb      	bpl.n	1c4ba <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   1c4c2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   1c4c6:	4810      	ldr	r0, [pc, #64]	; (1c508 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   1c4c8:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   1c4cc:	490f      	ldr	r1, [pc, #60]	; (1c50c <tempmonGetTemp+0x54>)
   1c4ce:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   1c4d2:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   1c4d6:	ed91 6a00 	vldr	s12, [r1]
   1c4da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   1c4de:	4a0c      	ldr	r2, [pc, #48]	; (1c510 <tempmonGetTemp+0x58>)
   1c4e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1c4e4:	4b0b      	ldr	r3, [pc, #44]	; (1c514 <tempmonGetTemp+0x5c>)
   1c4e6:	edd2 6a00 	vldr	s13, [r2]
   1c4ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1c4ee:	ed93 7a00 	vldr	s14, [r3]
   1c4f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   1c4f6:	ee67 7a86 	vmul.f32	s15, s15, s12
   1c4fa:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
   1c4fe:	ee37 0a40 	vsub.f32	s0, s14, s0
   1c502:	4770      	bx	lr
   1c504:	400d8100 	.word	0x400d8100
   1c508:	20013314 	.word	0x20013314
   1c50c:	2001331c 	.word	0x2001331c
   1c510:	20013320 	.word	0x20013320
   1c514:	20013318 	.word	0x20013318

0001c518 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   1c518:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   1c51a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
   1c51c:	b11b      	cbz	r3, 1c526 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
   1c51e:	6853      	ldr	r3, [r2, #4]
   1c520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1c524:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
   1c526:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
   1c528:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
   1c52a:	b33c      	cbz	r4, 1c57c <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
   1c52c:	4b1a      	ldr	r3, [pc, #104]	; (1c598 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
   1c52e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
   1c530:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   1c534:	420c      	tst	r4, r1
   1c536:	d11d      	bne.n	1c574 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
   1c538:	4e18      	ldr	r6, [pc, #96]	; (1c59c <schedule_transfer+0x84>)
   1c53a:	6877      	ldr	r7, [r6, #4]
   1c53c:	e004      	b.n	1c548 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   1c53e:	6874      	ldr	r4, [r6, #4]
   1c540:	1be4      	subs	r4, r4, r7
   1c542:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
   1c546:	d20b      	bcs.n	1c560 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   1c548:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   1c54c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
   1c550:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
   1c554:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   1c558:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   1c55c:	0464      	lsls	r4, r4, #17
   1c55e:	d5ee      	bpl.n	1c53e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
   1c560:	400d      	ands	r5, r1
   1c562:	d107      	bne.n	1c574 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
   1c564:	4c0c      	ldr	r4, [pc, #48]	; (1c598 <schedule_transfer+0x80>)
		endpoint->status = 0;
   1c566:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
   1c56a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1c56e:	430b      	orrs	r3, r1
   1c570:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
   1c574:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   1c576:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
   1c578:	bcf0      	pop	{r4, r5, r6, r7}
   1c57a:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
   1c57c:	4d06      	ldr	r5, [pc, #24]	; (1c598 <schedule_transfer+0x80>)
	endpoint->status = 0;
   1c57e:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
   1c582:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   1c586:	430b      	orrs	r3, r1
   1c588:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
   1c58c:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
   1c58e:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   1c590:	b662      	cpsie	i
}
   1c592:	bcf0      	pop	{r4, r5, r6, r7}
   1c594:	4770      	bx	lr
   1c596:	bf00      	nop
   1c598:	402e0000 	.word	0x402e0000
   1c59c:	e0001000 	.word	0xe0001000

0001c5a0 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
   1c5a0:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
   1c5a2:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
   1c5a4:	b19d      	cbz	r5, 1c5ce <run_callbacks+0x2e>
   1c5a6:	4606      	mov	r6, r0
   1c5a8:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
   1c5aa:	2400      	movs	r4, #0
   1c5ac:	e003      	b.n	1c5b6 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
   1c5ae:	6812      	ldr	r2, [r2, #0]
		count++;
   1c5b0:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
   1c5b2:	2a01      	cmp	r2, #1
   1c5b4:	d00c      	beq.n	1c5d0 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
   1c5b6:	6853      	ldr	r3, [r2, #4]
   1c5b8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
   1c5bc:	d0f7      	beq.n	1c5ae <run_callbacks+0xe>
			ep->first_transfer = t;
   1c5be:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   1c5c0:	b12c      	cbz	r4, 1c5ce <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
   1c5c2:	4628      	mov	r0, r5
		ep->callback_function(first);
   1c5c4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
   1c5c6:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
   1c5c8:	4798      	blx	r3
	while (count) {
   1c5ca:	3c01      	subs	r4, #1
   1c5cc:	d1f9      	bne.n	1c5c2 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
   1c5ce:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
   1c5d0:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
   1c5d4:	e7f4      	b.n	1c5c0 <run_callbacks+0x20>
   1c5d6:	bf00      	nop

0001c5d8 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
   1c5d8:	b430      	push	{r4, r5}
	if (len > 0) {
   1c5da:	b9d9      	cbnz	r1, 1c614 <endpoint0_transmit.constprop.0+0x3c>
   1c5dc:	4c1f      	ldr	r4, [pc, #124]	; (1c65c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
   1c5de:	4b20      	ldr	r3, [pc, #128]	; (1c660 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
   1c5e0:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1c5e2:	4a20      	ldr	r2, [pc, #128]	; (1c664 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
   1c5e4:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1c5e6:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
   1c5ea:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1c5ec:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
   1c5ee:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1c5f2:	2480      	movs	r4, #128	; 0x80
   1c5f4:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1c5f6:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
   1c5fa:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   1c5fe:	481a      	ldr	r0, [pc, #104]	; (1c668 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
   1c600:	432b      	orrs	r3, r5
   1c602:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   1c606:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
   1c608:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   1c60c:	2b00      	cmp	r3, #0
   1c60e:	d1fb      	bne.n	1c608 <endpoint0_transmit.constprop.0+0x30>
}
   1c610:	bc30      	pop	{r4, r5}
   1c612:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   1c614:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
   1c616:	4b15      	ldr	r3, [pc, #84]	; (1c66c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   1c618:	4c10      	ldr	r4, [pc, #64]	; (1c65c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
   1c61a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   1c61c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   1c620:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
   1c622:	4a10      	ldr	r2, [pc, #64]	; (1c664 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   1c624:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   1c626:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
   1c62a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   1c62c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   1c62e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   1c632:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
   1c634:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   1c636:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   1c63a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   1c63e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
   1c640:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
   1c642:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
   1c644:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
   1c646:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   1c64a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c64e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   1c652:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   1c656:	2b00      	cmp	r3, #0
   1c658:	d1fb      	bne.n	1c652 <endpoint0_transmit.constprop.0+0x7a>
   1c65a:	e7c0      	b.n	1c5de <endpoint0_transmit.constprop.0+0x6>
   1c65c:	20000000 	.word	0x20000000
   1c660:	2000a5c0 	.word	0x2000a5c0
   1c664:	402e0000 	.word	0x402e0000
   1c668:	200106e8 	.word	0x200106e8
   1c66c:	2000a5e0 	.word	0x2000a5e0

0001c670 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
   1c670:	4908      	ldr	r1, [pc, #32]	; (1c694 <usb_stop_sof_interrupts+0x24>)
   1c672:	2201      	movs	r2, #1
   1c674:	780b      	ldrb	r3, [r1, #0]
   1c676:	fa02 f000 	lsl.w	r0, r2, r0
   1c67a:	ea23 0000 	bic.w	r0, r3, r0
   1c67e:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
   1c680:	b930      	cbnz	r0, 1c690 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   1c682:	4a05      	ldr	r2, [pc, #20]	; (1c698 <usb_stop_sof_interrupts+0x28>)
   1c684:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
   1c688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1c68c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
   1c690:	4770      	bx	lr
   1c692:	bf00      	nop
   1c694:	200136f4 	.word	0x200136f4
   1c698:	402e0000 	.word	0x402e0000

0001c69c <usb_isr>:
{
   1c69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
   1c6a0:	4c97      	ldr	r4, [pc, #604]	; (1c900 <usb_isr+0x264>)
{
   1c6a2:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
   1c6a4:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   1c6a8:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
   1c6aa:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   1c6ae:	d553      	bpl.n	1c758 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
   1c6b0:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
   1c6b4:	2a00      	cmp	r2, #0
   1c6b6:	d04a      	beq.n	1c74e <usb_isr+0xb2>
   1c6b8:	4e92      	ldr	r6, [pc, #584]	; (1c904 <usb_isr+0x268>)
   1c6ba:	f8df a260 	ldr.w	sl, [pc, #608]	; 1c91c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
   1c6be:	f8df 9274 	ldr.w	r9, [pc, #628]	; 1c934 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
   1c6c2:	f8df b274 	ldr.w	fp, [pc, #628]	; 1c938 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   1c6c6:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1c93c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
   1c6ca:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
   1c6ce:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
   1c6d2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1c6d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1c6da:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
   1c6de:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1c6e2:	049d      	lsls	r5, r3, #18
   1c6e4:	d5f5      	bpl.n	1c6d2 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
   1c6e6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1c6ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1c6ee:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   1c6f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1c6f6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
   1c6fa:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
   1c6fe:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
   1c702:	d1fa      	bne.n	1c6fa <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
   1c704:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
   1c706:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
   1c708:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
   1c70c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
   1c710:	f000 81cf 	beq.w	1cab2 <usb_isr+0x416>
   1c714:	f200 80db 	bhi.w	1c8ce <usb_isr+0x232>
   1c718:	f240 3102 	movw	r1, #770	; 0x302
   1c71c:	428b      	cmp	r3, r1
   1c71e:	f000 81e7 	beq.w	1caf0 <usb_isr+0x454>
   1c722:	f200 809a 	bhi.w	1c85a <usb_isr+0x1be>
   1c726:	2b82      	cmp	r3, #130	; 0x82
   1c728:	f000 81cb 	beq.w	1cac2 <usb_isr+0x426>
   1c72c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1c730:	f040 808a 	bne.w	1c848 <usb_isr+0x1ac>
		if (endpoint > 7) break;
   1c734:	f010 0f78 	tst.w	r0, #120	; 0x78
   1c738:	b283      	uxth	r3, r0
   1c73a:	f000 8203 	beq.w	1cb44 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
   1c73e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1c742:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   1c746:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
   1c74a:	2a00      	cmp	r2, #0
   1c74c:	d1bd      	bne.n	1c6ca <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
   1c74e:	4a6c      	ldr	r2, [pc, #432]	; (1c900 <usb_isr+0x264>)
   1c750:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
   1c754:	2b00      	cmp	r3, #0
   1c756:	d142      	bne.n	1c7de <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
   1c758:	067e      	lsls	r6, r7, #25
   1c75a:	d516      	bpl.n	1c78a <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   1c75c:	4b68      	ldr	r3, [pc, #416]	; (1c900 <usb_isr+0x264>)
   1c75e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
   1c762:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
   1c766:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   1c76a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   1c76e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   1c772:	2c00      	cmp	r4, #0
   1c774:	d1fb      	bne.n	1c76e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   1c776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c77a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
   1c77e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
   1c782:	f000 fd2d 	bl	1d1e0 <usb_serial_reset>
		endpointN_notify_mask = 0;
   1c786:	4b60      	ldr	r3, [pc, #384]	; (1c908 <usb_isr+0x26c>)
   1c788:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
   1c78a:	01fc      	lsls	r4, r7, #7
   1c78c:	d503      	bpl.n	1c796 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
   1c78e:	4b5f      	ldr	r3, [pc, #380]	; (1c90c <usb_isr+0x270>)
   1c790:	681b      	ldr	r3, [r3, #0]
   1c792:	b103      	cbz	r3, 1c796 <usb_isr+0xfa>
   1c794:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
   1c796:	01b8      	lsls	r0, r7, #6
   1c798:	d503      	bpl.n	1c7a2 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
   1c79a:	4b5d      	ldr	r3, [pc, #372]	; (1c910 <usb_isr+0x274>)
   1c79c:	681b      	ldr	r3, [r3, #0]
   1c79e:	b103      	cbz	r3, 1c7a2 <usb_isr+0x106>
   1c7a0:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
   1c7a2:	0779      	lsls	r1, r7, #29
   1c7a4:	d508      	bpl.n	1c7b8 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
   1c7a6:	4b56      	ldr	r3, [pc, #344]	; (1c900 <usb_isr+0x264>)
   1c7a8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   1c7ac:	f413 7300 	ands.w	r3, r3, #512	; 0x200
   1c7b0:	d047      	beq.n	1c842 <usb_isr+0x1a6>
			usb_high_speed = 1;
   1c7b2:	4b58      	ldr	r3, [pc, #352]	; (1c914 <usb_isr+0x278>)
   1c7b4:	2201      	movs	r2, #1
   1c7b6:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
   1c7b8:	4b51      	ldr	r3, [pc, #324]	; (1c900 <usb_isr+0x264>)
   1c7ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   1c7be:	061a      	lsls	r2, r3, #24
   1c7c0:	d50a      	bpl.n	1c7d8 <usb_isr+0x13c>
   1c7c2:	063b      	lsls	r3, r7, #24
   1c7c4:	d508      	bpl.n	1c7d8 <usb_isr+0x13c>
		if (usb_reboot_timer) {
   1c7c6:	4a54      	ldr	r2, [pc, #336]	; (1c918 <usb_isr+0x27c>)
   1c7c8:	7813      	ldrb	r3, [r2, #0]
   1c7ca:	b12b      	cbz	r3, 1c7d8 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
   1c7cc:	3b01      	subs	r3, #1
   1c7ce:	b2db      	uxtb	r3, r3
   1c7d0:	7013      	strb	r3, [r2, #0]
   1c7d2:	2b00      	cmp	r3, #0
   1c7d4:	f000 8272 	beq.w	1ccbc <usb_isr+0x620>
}
   1c7d8:	b003      	add	sp, #12
   1c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
   1c7de:	494f      	ldr	r1, [pc, #316]	; (1c91c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
   1c7e0:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
   1c7e4:	6808      	ldr	r0, [r1, #0]
   1c7e6:	4203      	tst	r3, r0
   1c7e8:	f040 81d1 	bne.w	1cb8e <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
   1c7ec:	4a46      	ldr	r2, [pc, #280]	; (1c908 <usb_isr+0x26c>)
   1c7ee:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
   1c7f0:	401c      	ands	r4, r3
   1c7f2:	d0b1      	beq.n	1c758 <usb_isr+0xbc>
				while (tx) {
   1c7f4:	ea5f 4814 	movs.w	r8, r4, lsr #16
   1c7f8:	d010      	beq.n	1c81c <usb_isr+0x180>
   1c7fa:	4e42      	ldr	r6, [pc, #264]	; (1c904 <usb_isr+0x268>)
					tx &= ~(1<<p);
   1c7fc:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
   1c800:	fa98 f5a8 	rbit	r5, r8
   1c804:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   1c808:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
   1c80c:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   1c810:	3040      	adds	r0, #64	; 0x40
   1c812:	f7ff fec5 	bl	1c5a0 <run_callbacks>
				while (tx) {
   1c816:	ea38 0805 	bics.w	r8, r8, r5
   1c81a:	d1f1      	bne.n	1c800 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
   1c81c:	b2a4      	uxth	r4, r4
				while(rx) {
   1c81e:	2c00      	cmp	r4, #0
   1c820:	d09a      	beq.n	1c758 <usb_isr+0xbc>
   1c822:	4e38      	ldr	r6, [pc, #224]	; (1c904 <usb_isr+0x268>)
					rx &= ~(1<<p);
   1c824:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
   1c828:	fa94 f5a4 	rbit	r5, r4
   1c82c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
   1c830:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
   1c834:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
   1c838:	f7ff feb2 	bl	1c5a0 <run_callbacks>
				while(rx) {
   1c83c:	43ac      	bics	r4, r5
   1c83e:	d1f3      	bne.n	1c828 <usb_isr+0x18c>
   1c840:	e78a      	b.n	1c758 <usb_isr+0xbc>
			usb_high_speed = 0;
   1c842:	4a34      	ldr	r2, [pc, #208]	; (1c914 <usb_isr+0x278>)
   1c844:	7013      	strb	r3, [r2, #0]
   1c846:	e7b7      	b.n	1c7b8 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
   1c848:	2b80      	cmp	r3, #128	; 0x80
   1c84a:	f47f af78 	bne.w	1c73e <usb_isr+0xa2>
		reply_buffer[0] = 0;
   1c84e:	4834      	ldr	r0, [pc, #208]	; (1c920 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
   1c850:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
   1c852:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   1c854:	f7ff fec0 	bl	1c5d8 <endpoint0_transmit.constprop.0>
		return;
   1c858:	e775      	b.n	1c746 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
   1c85a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1c85e:	f000 810b 	beq.w	1ca78 <usb_isr+0x3dc>
   1c862:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
   1c866:	2b01      	cmp	r3, #1
   1c868:	f63f af69 	bhi.w	1c73e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   1c86c:	4b2d      	ldr	r3, [pc, #180]	; (1c924 <usb_isr+0x288>)
   1c86e:	685d      	ldr	r5, [r3, #4]
   1c870:	2d00      	cmp	r5, #0
   1c872:	f43f af64 	beq.w	1c73e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   1c876:	fa1f fc8c 	uxth.w	ip, ip
   1c87a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   1c87e:	e004      	b.n	1c88a <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   1c880:	691d      	ldr	r5, [r3, #16]
   1c882:	330c      	adds	r3, #12
   1c884:	2d00      	cmp	r5, #0
   1c886:	f43f af5a 	beq.w	1c73e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   1c88a:	881a      	ldrh	r2, [r3, #0]
   1c88c:	4572      	cmp	r2, lr
   1c88e:	d1f7      	bne.n	1c880 <usb_isr+0x1e4>
   1c890:	885a      	ldrh	r2, [r3, #2]
   1c892:	4562      	cmp	r2, ip
   1c894:	d1f4      	bne.n	1c880 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
   1c896:	ea4f 221e 	mov.w	r2, lr, lsr #8
   1c89a:	2a03      	cmp	r2, #3
   1c89c:	f000 81a5 	beq.w	1cbea <usb_isr+0x54e>
					datalen = list->length;
   1c8a0:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
   1c8a2:	0c00      	lsrs	r0, r0, #16
   1c8a4:	4282      	cmp	r2, r0
   1c8a6:	bf28      	it	cs
   1c8a8:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
   1c8aa:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   1c8ae:	f040 81a1 	bne.w	1cbf4 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
   1c8b2:	4b18      	ldr	r3, [pc, #96]	; (1c914 <usb_isr+0x278>)
   1c8b4:	491c      	ldr	r1, [pc, #112]	; (1c928 <usb_isr+0x28c>)
   1c8b6:	7818      	ldrb	r0, [r3, #0]
   1c8b8:	4b1c      	ldr	r3, [pc, #112]	; (1c92c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
   1c8ba:	9201      	str	r2, [sp, #4]
   1c8bc:	2800      	cmp	r0, #0
   1c8be:	bf18      	it	ne
   1c8c0:	4619      	movne	r1, r3
   1c8c2:	481b      	ldr	r0, [pc, #108]	; (1c930 <usb_isr+0x294>)
   1c8c4:	f7ff f9b0 	bl	1bc28 <memcpy>
   1c8c8:	4d19      	ldr	r5, [pc, #100]	; (1c930 <usb_isr+0x294>)
   1c8ca:	9a01      	ldr	r2, [sp, #4]
   1c8cc:	e1e1      	b.n	1cc92 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
   1c8ce:	f242 2121 	movw	r1, #8737	; 0x2221
   1c8d2:	428b      	cmp	r3, r1
   1c8d4:	d07c      	beq.n	1c9d0 <usb_isr+0x334>
   1c8d6:	d933      	bls.n	1c940 <usb_isr+0x2a4>
   1c8d8:	f242 3121 	movw	r1, #8993	; 0x2321
   1c8dc:	428b      	cmp	r3, r1
   1c8de:	f000 8081 	beq.w	1c9e4 <usb_isr+0x348>
   1c8e2:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
   1c8e6:	428b      	cmp	r3, r1
   1c8e8:	f47f af29 	bne.w	1c73e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
   1c8ec:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
   1c8f0:	b283      	uxth	r3, r0
   1c8f2:	f47f af24 	bne.w	1c73e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
   1c8f6:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
   1c8fa:	f363 0c0f 	bfi	ip, r3, #0, #16
   1c8fe:	e7b5      	b.n	1c86c <usb_isr+0x1d0>
   1c900:	402e0000 	.word	0x402e0000
   1c904:	20000000 	.word	0x20000000
   1c908:	200106ec 	.word	0x200106ec
   1c90c:	20013694 	.word	0x20013694
   1c910:	20013698 	.word	0x20013698
   1c914:	200136fa 	.word	0x200136fa
   1c918:	200136fb 	.word	0x200136fb
   1c91c:	200106e8 	.word	0x200106e8
   1c920:	200132dc 	.word	0x200132dc
   1c924:	200088e0 	.word	0x200088e0
   1c928:	600022ac 	.word	0x600022ac
   1c92c:	60002310 	.word	0x60002310
   1c930:	202036e0 	.word	0x202036e0
   1c934:	200106e0 	.word	0x200106e0
   1c938:	b8c6cf5d 	.word	0xb8c6cf5d
   1c93c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
   1c940:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
   1c944:	d066      	beq.n	1ca14 <usb_isr+0x378>
   1c946:	f242 0121 	movw	r1, #8225	; 0x2021
   1c94a:	428b      	cmp	r3, r1
   1c94c:	f47f aef7 	bne.w	1c73e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
   1c950:	0c03      	lsrs	r3, r0, #16
   1c952:	2b07      	cmp	r3, #7
   1c954:	f47f aef3 	bne.w	1c73e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
   1c958:	4bb2      	ldr	r3, [pc, #712]	; (1cc24 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
   1c95a:	49b3      	ldr	r1, [pc, #716]	; (1cc28 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
   1c95c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   1c95e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
   1c960:	49b2      	ldr	r1, [pc, #712]	; (1cc2c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
   1c962:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   1c964:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
   1c968:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
   1c96c:	2201      	movs	r2, #1
   1c96e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   1c970:	4aaf      	ldr	r2, [pc, #700]	; (1cc30 <usb_isr+0x594>)
   1c972:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   1c974:	4aaf      	ldr	r2, [pc, #700]	; (1cc34 <usb_isr+0x598>)
   1c976:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
   1c978:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   1c97c:	f041 0101 	orr.w	r1, r1, #1
   1c980:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
   1c984:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   1c988:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   1c98c:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   1c98e:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
   1c990:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1c994:	2b00      	cmp	r3, #0
   1c996:	d1fb      	bne.n	1c990 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
   1c998:	4aa7      	ldr	r2, [pc, #668]	; (1cc38 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   1c99a:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   1c99c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
   1c99e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1c9a0:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   1c9a2:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1c9a4:	f248 0380 	movw	r3, #32896	; 0x8080
   1c9a8:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1c9aa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1c9ae:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1c9b2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1c9b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1c9ba:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   1c9be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1c9c2:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
   1c9c6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1c9ca:	2b00      	cmp	r3, #0
   1c9cc:	d1fb      	bne.n	1c9c6 <usb_isr+0x32a>
   1c9ce:	e6ba      	b.n	1c746 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
   1c9d0:	b280      	uxth	r0, r0
   1c9d2:	b938      	cbnz	r0, 1c9e4 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   1c9d4:	4b99      	ldr	r3, [pc, #612]	; (1cc3c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
   1c9d6:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   1c9da:	6819      	ldr	r1, [r3, #0]
   1c9dc:	4b98      	ldr	r3, [pc, #608]	; (1cc40 <usb_isr+0x5a4>)
   1c9de:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   1c9e0:	4b98      	ldr	r3, [pc, #608]	; (1cc44 <usb_isr+0x5a8>)
   1c9e2:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
   1c9e4:	4b94      	ldr	r3, [pc, #592]	; (1cc38 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
   1c9e6:	2200      	movs	r2, #0
   1c9e8:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
   1c9ea:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   1c9ec:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1c9ee:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   1c9f0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1c9f2:	2280      	movs	r2, #128	; 0x80
   1c9f4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1c9f6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1c9fa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1c9fe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1ca02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ca06:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1ca0a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1ca0e:	2b00      	cmp	r3, #0
   1ca10:	d1fb      	bne.n	1ca0a <usb_isr+0x36e>
   1ca12:	e698      	b.n	1c746 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
   1ca14:	f3c2 4207 	ubfx	r2, r2, #16, #8
   1ca18:	4b8b      	ldr	r3, [pc, #556]	; (1cc48 <usb_isr+0x5ac>)
   1ca1a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   1ca1c:	4b8b      	ldr	r3, [pc, #556]	; (1cc4c <usb_isr+0x5b0>)
   1ca1e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   1ca22:	4b8b      	ldr	r3, [pc, #556]	; (1cc50 <usb_isr+0x5b4>)
   1ca24:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
   1ca28:	4b8a      	ldr	r3, [pc, #552]	; (1cc54 <usb_isr+0x5b8>)
   1ca2a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
   1ca2e:	f000 fbd9 	bl	1d1e4 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
   1ca32:	2280      	movs	r2, #128	; 0x80
   1ca34:	4629      	mov	r1, r5
   1ca36:	4888      	ldr	r0, [pc, #544]	; (1cc58 <usb_isr+0x5bc>)
   1ca38:	f005 fc62 	bl	22300 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
   1ca3c:	4b87      	ldr	r3, [pc, #540]	; (1cc5c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1ca3e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
   1ca40:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
   1ca44:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
   1ca48:	4b7b      	ldr	r3, [pc, #492]	; (1cc38 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   1ca4a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1ca4c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
   1ca4e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1ca50:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
   1ca52:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1ca54:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1ca56:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1ca5a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1ca5e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1ca62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ca66:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   1ca6a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
   1ca6e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1ca72:	2b00      	cmp	r3, #0
   1ca74:	d1fb      	bne.n	1ca6e <usb_isr+0x3d2>
   1ca76:	e666      	b.n	1c746 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
   1ca78:	4b6f      	ldr	r3, [pc, #444]	; (1cc38 <usb_isr+0x59c>)
   1ca7a:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
   1ca7c:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   1ca7e:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1ca80:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
   1ca82:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1ca84:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1ca86:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1ca88:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1ca8c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1ca90:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1ca94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1ca98:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1ca9c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1caa0:	2b00      	cmp	r3, #0
   1caa2:	d1fb      	bne.n	1ca9c <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
   1caa4:	0c13      	lsrs	r3, r2, #16
   1caa6:	065b      	lsls	r3, r3, #25
   1caa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1caac:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
   1cab0:	e649      	b.n	1c746 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
   1cab2:	4b65      	ldr	r3, [pc, #404]	; (1cc48 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
   1cab4:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
   1cab6:	486a      	ldr	r0, [pc, #424]	; (1cc60 <usb_isr+0x5c4>)
   1cab8:	781b      	ldrb	r3, [r3, #0]
   1caba:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   1cabc:	f7ff fd8c 	bl	1c5d8 <endpoint0_transmit.constprop.0>
		return;
   1cac0:	e641      	b.n	1c746 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
   1cac2:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
   1cac4:	f010 0078 	ands.w	r0, r0, #120	; 0x78
   1cac8:	f47f ae39 	bne.w	1c73e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
   1cacc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   1cad0:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
   1cad4:	4a62      	ldr	r2, [pc, #392]	; (1cc60 <usb_isr+0x5c4>)
   1cad6:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   1cad8:	0618      	lsls	r0, r3, #24
   1cada:	f100 809e 	bmi.w	1cc1a <usb_isr+0x57e>
   1cade:	07cb      	lsls	r3, r1, #31
   1cae0:	d501      	bpl.n	1cae6 <usb_isr+0x44a>
			reply_buffer[0] = 1;
   1cae2:	2301      	movs	r3, #1
   1cae4:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   1cae6:	2102      	movs	r1, #2
   1cae8:	485d      	ldr	r0, [pc, #372]	; (1cc60 <usb_isr+0x5c4>)
   1caea:	f7ff fd75 	bl	1c5d8 <endpoint0_transmit.constprop.0>
		return;
   1caee:	e62a      	b.n	1c746 <usb_isr+0xaa>
		if (endpoint > 7) break;
   1caf0:	f010 0f78 	tst.w	r0, #120	; 0x78
   1caf4:	b283      	uxth	r3, r0
   1caf6:	f47f ae22 	bne.w	1c73e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
   1cafa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   1cafe:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   1cb02:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   1cb06:	bf14      	ite	ne
   1cb08:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   1cb0c:	f043 0301 	orreq.w	r3, r3, #1
   1cb10:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   1cb14:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   1cb16:	4b48      	ldr	r3, [pc, #288]	; (1cc38 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   1cb18:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   1cb1a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1cb1c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1cb1e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   1cb20:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1cb22:	2280      	movs	r2, #128	; 0x80
   1cb24:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1cb26:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1cb2a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1cb2e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1cb32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1cb36:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1cb3a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1cb3e:	2b00      	cmp	r3, #0
   1cb40:	d1fb      	bne.n	1cb3a <usb_isr+0x49e>
   1cb42:	e600      	b.n	1c746 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
   1cb44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   1cb48:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   1cb4c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   1cb50:	bf14      	ite	ne
   1cb52:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   1cb56:	f023 0301 	biceq.w	r3, r3, #1
   1cb5a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   1cb5e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   1cb60:	4b35      	ldr	r3, [pc, #212]	; (1cc38 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
   1cb62:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   1cb64:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   1cb66:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1cb68:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   1cb6a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1cb6c:	2280      	movs	r2, #128	; 0x80
   1cb6e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   1cb70:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1cb74:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1cb78:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1cb7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1cb80:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1cb84:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1cb88:	2b00      	cmp	r3, #0
   1cb8a:	d1fb      	bne.n	1cb84 <usb_isr+0x4e8>
   1cb8c:	e5db      	b.n	1c746 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
   1cb8e:	2000      	movs	r0, #0
   1cb90:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   1cb92:	4926      	ldr	r1, [pc, #152]	; (1cc2c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   1cb94:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   1cb96:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   1cb98:	f242 0121 	movw	r1, #8225	; 0x2021
   1cb9c:	428c      	cmp	r4, r1
   1cb9e:	f47f ae25 	bne.w	1c7ec <usb_isr+0x150>
   1cba2:	b280      	uxth	r0, r0
   1cba4:	2800      	cmp	r0, #0
   1cba6:	f47f ae21 	bne.w	1c7ec <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   1cbaa:	492e      	ldr	r1, [pc, #184]	; (1cc64 <usb_isr+0x5c8>)
   1cbac:	4c2e      	ldr	r4, [pc, #184]	; (1cc68 <usb_isr+0x5cc>)
   1cbae:	c903      	ldmia	r1, {r0, r1}
   1cbb0:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
   1cbb2:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   1cbb4:	ea4f 4111 	mov.w	r1, r1, lsr #16
   1cbb8:	6020      	str	r0, [r4, #0]
   1cbba:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
   1cbbc:	f47f ae16 	bne.w	1c7ec <usb_isr+0x150>
	__disable_irq();
   1cbc0:	b672      	cpsid	i
	sof_usage |= (1 << interface);
   1cbc2:	482a      	ldr	r0, [pc, #168]	; (1cc6c <usb_isr+0x5d0>)
   1cbc4:	7801      	ldrb	r1, [r0, #0]
   1cbc6:	f041 0108 	orr.w	r1, r1, #8
   1cbca:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
   1cbcc:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
   1cbd0:	060d      	lsls	r5, r1, #24
   1cbd2:	d405      	bmi.n	1cbe0 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   1cbd4:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   1cbd6:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   1cbd8:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   1cbdc:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
   1cbe0:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
   1cbe2:	4a23      	ldr	r2, [pc, #140]	; (1cc70 <usb_isr+0x5d4>)
   1cbe4:	2150      	movs	r1, #80	; 0x50
   1cbe6:	7011      	strb	r1, [r2, #0]
   1cbe8:	e600      	b.n	1c7ec <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
   1cbea:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
   1cbec:	782a      	ldrb	r2, [r5, #0]
   1cbee:	4282      	cmp	r2, r0
   1cbf0:	bf28      	it	cs
   1cbf2:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
   1cbf4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   1cbf8:	d144      	bne.n	1cc84 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
   1cbfa:	4b1e      	ldr	r3, [pc, #120]	; (1cc74 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
   1cbfc:	4d1e      	ldr	r5, [pc, #120]	; (1cc78 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
   1cbfe:	7818      	ldrb	r0, [r3, #0]
   1cc00:	491e      	ldr	r1, [pc, #120]	; (1cc7c <usb_isr+0x5e0>)
   1cc02:	4b1f      	ldr	r3, [pc, #124]	; (1cc80 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
   1cc04:	9201      	str	r2, [sp, #4]
   1cc06:	2800      	cmp	r0, #0
   1cc08:	bf18      	it	ne
   1cc0a:	4619      	movne	r1, r3
   1cc0c:	4628      	mov	r0, r5
   1cc0e:	f7ff f80b 	bl	1bc28 <memcpy>
					usb_descriptor_buffer[1] = 7;
   1cc12:	2307      	movs	r3, #7
   1cc14:	706b      	strb	r3, [r5, #1]
   1cc16:	9a01      	ldr	r2, [sp, #4]
   1cc18:	e03b      	b.n	1cc92 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   1cc1a:	03c9      	lsls	r1, r1, #15
   1cc1c:	f53f af61 	bmi.w	1cae2 <usb_isr+0x446>
   1cc20:	e761      	b.n	1cae6 <usb_isr+0x44a>
   1cc22:	bf00      	nop
   1cc24:	2000a5e0 	.word	0x2000a5e0
   1cc28:	200116e0 	.word	0x200116e0
   1cc2c:	2000a780 	.word	0x2000a780
   1cc30:	00070080 	.word	0x00070080
   1cc34:	200126e0 	.word	0x200126e0
   1cc38:	2000a5c0 	.word	0x2000a5c0
   1cc3c:	20013554 	.word	0x20013554
   1cc40:	20013690 	.word	0x20013690
   1cc44:	200136f8 	.word	0x200136f8
   1cc48:	200136f9 	.word	0x200136f9
   1cc4c:	00cc0002 	.word	0x00cc0002
   1cc50:	000200c8 	.word	0x000200c8
   1cc54:	00c80002 	.word	0x00c80002
   1cc58:	20000080 	.word	0x20000080
   1cc5c:	74d59319 	.word	0x74d59319
   1cc60:	200132dc 	.word	0x200132dc
   1cc64:	200106e0 	.word	0x200106e0
   1cc68:	20013688 	.word	0x20013688
   1cc6c:	200136f4 	.word	0x200136f4
   1cc70:	200136fb 	.word	0x200136fb
   1cc74:	200136fa 	.word	0x200136fa
   1cc78:	202036e0 	.word	0x202036e0
   1cc7c:	60002310 	.word	0x60002310
   1cc80:	600022ac 	.word	0x600022ac
					memcpy(usb_descriptor_buffer, list->addr, datalen);
   1cc84:	4629      	mov	r1, r5
   1cc86:	4d10      	ldr	r5, [pc, #64]	; (1ccc8 <usb_isr+0x62c>)
   1cc88:	9201      	str	r2, [sp, #4]
   1cc8a:	4628      	mov	r0, r5
   1cc8c:	f7fe ffcc 	bl	1bc28 <memcpy>
   1cc90:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   1cc92:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
   1cc96:	4415      	add	r5, r2
	asm("dsb");
   1cc98:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   1cc9c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   1cca0:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
   1cca4:	3320      	adds	r3, #32
	} while (location < end_addr);
   1cca6:	429d      	cmp	r5, r3
   1cca8:	d8fa      	bhi.n	1cca0 <usb_isr+0x604>
	asm("dsb");
   1ccaa:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1ccae:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
   1ccb2:	4805      	ldr	r0, [pc, #20]	; (1ccc8 <usb_isr+0x62c>)
   1ccb4:	4611      	mov	r1, r2
   1ccb6:	f7ff fc8f 	bl	1c5d8 <endpoint0_transmit.constprop.0>
				return;
   1ccba:	e544      	b.n	1c746 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
   1ccbc:	2003      	movs	r0, #3
   1ccbe:	f7ff fcd7 	bl	1c670 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
   1ccc2:	f00b fd25 	bl	28710 <___reboot_Teensyduino__veneer>
   1ccc6:	bf00      	nop
   1ccc8:	202036e0 	.word	0x202036e0

0001cccc <usb_config_rx>:
{
   1cccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ccd0:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   1ccd2:	1e83      	subs	r3, r0, #2
   1ccd4:	2b02      	cmp	r3, #2
   1ccd6:	d901      	bls.n	1ccdc <usb_config_rx+0x10>
}
   1ccd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   1ccdc:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1cd2c <usb_config_rx+0x60>
   1cce0:	4615      	mov	r5, r2
   1cce2:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
   1cce4:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   1cce6:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   1ccea:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   1ccec:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   1ccf0:	2100      	movs	r1, #0
   1ccf2:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1ccf6:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
   1ccf8:	f005 fb02 	bl	22300 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1ccfc:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
   1cd00:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1cd02:	0952      	lsrs	r2, r2, #5
   1cd04:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
   1cd08:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
   1cd0c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   1cd10:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
   1cd14:	2f00      	cmp	r7, #0
   1cd16:	d0df      	beq.n	1ccd8 <usb_config_rx+0xc>
   1cd18:	4a03      	ldr	r2, [pc, #12]	; (1cd28 <usb_config_rx+0x5c>)
   1cd1a:	40b3      	lsls	r3, r6
   1cd1c:	6811      	ldr	r1, [r2, #0]
   1cd1e:	430b      	orrs	r3, r1
   1cd20:	6013      	str	r3, [r2, #0]
}
   1cd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cd26:	bf00      	nop
   1cd28:	200106ec 	.word	0x200106ec
   1cd2c:	20000000 	.word	0x20000000

0001cd30 <usb_config_tx>:
{
   1cd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cd34:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   1cd36:	1e81      	subs	r1, r0, #2
   1cd38:	2902      	cmp	r1, #2
   1cd3a:	d901      	bls.n	1cd40 <usb_config_tx+0x10>
}
   1cd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   1cd40:	01c7      	lsls	r7, r0, #7
   1cd42:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1cd90 <usb_config_tx+0x60>
   1cd46:	4692      	mov	sl, r2
   1cd48:	4604      	mov	r4, r0
   1cd4a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
   1cd4c:	223c      	movs	r2, #60	; 0x3c
   1cd4e:	2100      	movs	r1, #0
   1cd50:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   1cd52:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1cd56:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
   1cd58:	f108 0004 	add.w	r0, r8, #4
   1cd5c:	f005 fad0 	bl	22300 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1cd60:	faba f28a 	clz	r2, sl
   1cd64:	0952      	lsrs	r2, r2, #5
   1cd66:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
   1cd6a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
   1cd6e:	2201      	movs	r2, #1
	qh->callback_function = callback;
   1cd70:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   1cd74:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
   1cd78:	2e00      	cmp	r6, #0
   1cd7a:	d0df      	beq.n	1cd3c <usb_config_tx+0xc>
   1cd7c:	4b03      	ldr	r3, [pc, #12]	; (1cd8c <usb_config_tx+0x5c>)
   1cd7e:	3410      	adds	r4, #16
   1cd80:	6819      	ldr	r1, [r3, #0]
   1cd82:	40a2      	lsls	r2, r4
   1cd84:	430a      	orrs	r2, r1
   1cd86:	601a      	str	r2, [r3, #0]
}
   1cd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cd8c:	200106ec 	.word	0x200106ec
   1cd90:	20000000 	.word	0x20000000

0001cd94 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
   1cd94:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
   1cd96:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
   1cd98:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
   1cd9a:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
   1cd9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
   1cda2:	b410      	push	{r4}
	transfer->next = 1;
   1cda4:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
   1cda6:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
   1cda8:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
   1cdac:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
   1cdae:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
   1cdb2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
   1cdb6:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
   1cdb8:	6181      	str	r1, [r0, #24]
}
   1cdba:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
   1cdbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
   1cdc2:	4770      	bx	lr

0001cdc4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   1cdc4:	1e83      	subs	r3, r0, #2
{
   1cdc6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   1cdc8:	2b02      	cmp	r3, #2
   1cdca:	d900      	bls.n	1cdce <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
   1cdcc:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   1cdce:	4b06      	ldr	r3, [pc, #24]	; (1cde8 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
   1cdd0:	f100 0110 	add.w	r1, r0, #16
   1cdd4:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   1cdd8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
   1cddc:	fa0c f101 	lsl.w	r1, ip, r1
   1cde0:	3040      	adds	r0, #64	; 0x40
   1cde2:	f7ff bb99 	b.w	1c518 <schedule_transfer>
   1cde6:	bf00      	nop
   1cde8:	20000000 	.word	0x20000000

0001cdec <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   1cdec:	1e83      	subs	r3, r0, #2
{
   1cdee:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   1cdf0:	2b02      	cmp	r3, #2
   1cdf2:	d900      	bls.n	1cdf6 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
   1cdf4:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
   1cdf6:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
   1cdf8:	4b02      	ldr	r3, [pc, #8]	; (1ce04 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
   1cdfa:	4081      	lsls	r1, r0
   1cdfc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
   1ce00:	f7ff bb8a 	b.w	1c518 <schedule_transfer>
   1ce04:	20000000 	.word	0x20000000

0001ce08 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
   1ce08:	6840      	ldr	r0, [r0, #4]
#endif
}
   1ce0a:	4770      	bx	lr

0001ce0c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   1ce0c:	4a12      	ldr	r2, [pc, #72]	; (1ce58 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   1ce0e:	4b13      	ldr	r3, [pc, #76]	; (1ce5c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   1ce10:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
   1ce14:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
   1ce18:	4298      	cmp	r0, r3
{
   1ce1a:	b510      	push	{r4, lr}
   1ce1c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
   1ce1e:	d202      	bcs.n	1ce26 <usb_init_serialnumber+0x1a>
   1ce20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ce24:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
   1ce26:	4c0e      	ldr	r4, [pc, #56]	; (1ce60 <usb_init_serialnumber+0x54>)
   1ce28:	a901      	add	r1, sp, #4
   1ce2a:	220a      	movs	r2, #10
   1ce2c:	f7fe ff9a 	bl	1bd64 <ultoa>
	for (i=0; i<10; i++) {
   1ce30:	a901      	add	r1, sp, #4
   1ce32:	2300      	movs	r3, #0
   1ce34:	4620      	mov	r0, r4
		char c = buf[i];
   1ce36:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
   1ce3a:	3301      	adds	r3, #1
		if (!c) break;
   1ce3c:	b13a      	cbz	r2, 1ce4e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
   1ce3e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
   1ce40:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
   1ce44:	d1f7      	bne.n	1ce36 <usb_init_serialnumber+0x2a>
   1ce46:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   1ce48:	7023      	strb	r3, [r4, #0]
}
   1ce4a:	b004      	add	sp, #16
   1ce4c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   1ce4e:	005b      	lsls	r3, r3, #1
   1ce50:	b2db      	uxtb	r3, r3
   1ce52:	7023      	strb	r3, [r4, #0]
}
   1ce54:	b004      	add	sp, #16
   1ce56:	bd10      	pop	{r4, pc}
   1ce58:	401f4400 	.word	0x401f4400
   1ce5c:	00989680 	.word	0x00989680
   1ce60:	20009ca0 	.word	0x20009ca0

0001ce64 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
   1ce64:	f000 badc 	b.w	1d420 <usb_serial_flush_input>

0001ce68 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
   1ce68:	f000 baac 	b.w	1d3c4 <usb_serial_peekchar>

0001ce6c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
   1ce6c:	f000 bb10 	b.w	1d490 <usb_serial_getchar>

0001ce70 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
   1ce70:	f000 baca 	b.w	1d408 <usb_serial_available>

0001ce74 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   1ce74:	f000 bb66 	b.w	1d544 <usb_serial_flush_output>

0001ce78 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   1ce78:	f000 bb3c 	b.w	1d4f4 <usb_serial_write_buffer_free>

0001ce7c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   1ce7c:	4608      	mov	r0, r1
   1ce7e:	4611      	mov	r1, r2
   1ce80:	f000 bb2c 	b.w	1d4dc <usb_serial_write>

0001ce84 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   1ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   1ce86:	4c14      	ldr	r4, [pc, #80]	; (1ced8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1ce88:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   1ce8c:	4e13      	ldr	r6, [pc, #76]	; (1cedc <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1ce8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   1ce92:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   1ce96:	4f12      	ldr	r7, [pc, #72]	; (1cee0 <rx_queue_transfer+0x5c>)
   1ce98:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
   1ce9c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1ce9e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   1cea2:	4621      	mov	r1, r4
   1cea4:	883a      	ldrh	r2, [r7, #0]
   1cea6:	4630      	mov	r0, r6
   1cea8:	f7ff ff74 	bl	1cd94 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
   1ceac:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
   1ceae:	4423      	add	r3, r4
	asm("dsb");
   1ceb0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   1ceb4:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
   1ceb8:	3420      	adds	r4, #32
	} while (location < end_addr);
   1ceba:	42a3      	cmp	r3, r4
   1cebc:	d8fa      	bhi.n	1ceb4 <rx_queue_transfer+0x30>
	asm("dsb");
   1cebe:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1cec2:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
   1cec6:	2003      	movs	r0, #3
   1cec8:	4631      	mov	r1, r6
   1ceca:	f7ff ff8f 	bl	1cdec <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   1cece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   1ced2:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
   1ced6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ced8:	20203760 	.word	0x20203760
   1cedc:	2000a600 	.word	0x2000a600
   1cee0:	200136d0 	.word	0x200136d0

0001cee4 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   1cee4:	4b24      	ldr	r3, [pc, #144]	; (1cf78 <rx_event+0x94>)
{
   1cee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   1ceea:	881c      	ldrh	r4, [r3, #0]
   1ceec:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
   1ceee:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   1cef0:	f3c3 430e 	ubfx	r3, r3, #16, #15
   1cef4:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   1cef6:	2c00      	cmp	r4, #0
   1cef8:	dd24      	ble.n	1cf44 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
   1cefa:	4920      	ldr	r1, [pc, #128]	; (1cf7c <rx_event+0x98>)
		if (head != rx_tail) {
   1cefc:	4820      	ldr	r0, [pc, #128]	; (1cf80 <rx_event+0x9c>)
		uint32_t head = rx_head;
   1cefe:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
   1cf00:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
   1cf02:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
   1cf04:	4e1f      	ldr	r6, [pc, #124]	; (1cf84 <rx_event+0xa0>)
		if (head != rx_tail) {
   1cf06:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
   1cf08:	481f      	ldr	r0, [pc, #124]	; (1cf88 <rx_event+0xa4>)
		if (head != rx_tail) {
   1cf0a:	d007      	beq.n	1cf1c <rx_event+0x38>
			uint32_t ii = rx_list[head];
   1cf0c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
   1cf10:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
   1cf14:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
   1cf18:	4294      	cmp	r4, r2
   1cf1a:	d918      	bls.n	1cf4e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   1cf1c:	3301      	adds	r3, #1
		rx_index[i] = 0;
   1cf1e:	2200      	movs	r2, #0
		rx_count[i] = len;
   1cf20:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
   1cf24:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
   1cf26:	4e19      	ldr	r6, [pc, #100]	; (1cf8c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
   1cf28:	bf88      	it	hi
   1cf2a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
   1cf2c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
   1cf30:	bf98      	it	ls
   1cf32:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
   1cf34:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
   1cf36:	4b16      	ldr	r3, [pc, #88]	; (1cf90 <rx_event+0xac>)
		rx_head = head;
   1cf38:	700a      	strb	r2, [r1, #0]
		rx_available += len;
   1cf3a:	681a      	ldr	r2, [r3, #0]
   1cf3c:	4414      	add	r4, r2
   1cf3e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   1cf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
   1cf44:	4628      	mov	r0, r5
}
   1cf46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
   1cf4a:	f7ff bf9b 	b.w	1ce84 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   1cf4e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
   1cf52:	4910      	ldr	r1, [pc, #64]	; (1cf94 <rx_event+0xb0>)
   1cf54:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
   1cf56:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   1cf58:	4408      	add	r0, r1
   1cf5a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
   1cf5e:	f7fe fe63 	bl	1bc28 <memcpy>
				rx_available += len;
   1cf62:	4a0b      	ldr	r2, [pc, #44]	; (1cf90 <rx_event+0xac>)
				rx_queue_transfer(i);
   1cf64:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
   1cf66:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
   1cf6a:	6813      	ldr	r3, [r2, #0]
   1cf6c:	4423      	add	r3, r4
}
   1cf6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
   1cf72:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
   1cf74:	f7ff bf86 	b.w	1ce84 <rx_queue_transfer>
   1cf78:	200136d0 	.word	0x200136d0
   1cf7c:	200136f2 	.word	0x200136f2
   1cf80:	200136f3 	.word	0x200136f3
   1cf84:	200132e8 	.word	0x200132e8
   1cf88:	20013308 	.word	0x20013308
   1cf8c:	200132f8 	.word	0x200132f8
   1cf90:	200132e4 	.word	0x200132e4
   1cf94:	20203760 	.word	0x20203760

0001cf98 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
   1cf98:	4b1d      	ldr	r3, [pc, #116]	; (1d010 <usb_serial_flush_callback+0x78>)
   1cf9a:	781a      	ldrb	r2, [r3, #0]
   1cf9c:	2a00      	cmp	r2, #0
   1cf9e:	d136      	bne.n	1d00e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
   1cfa0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   1cfa4:	4a1b      	ldr	r2, [pc, #108]	; (1d014 <usb_serial_flush_callback+0x7c>)
   1cfa6:	7812      	ldrb	r2, [r2, #0]
   1cfa8:	b38a      	cbz	r2, 1d00e <usb_serial_flush_callback+0x76>
{
   1cfaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
   1cfae:	4d1a      	ldr	r5, [pc, #104]	; (1d018 <usb_serial_flush_callback+0x80>)
   1cfb0:	882a      	ldrh	r2, [r5, #0]
   1cfb2:	b352      	cbz	r2, 1d00a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
   1cfb4:	4e19      	ldr	r6, [pc, #100]	; (1d01c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
   1cfb6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   1cfba:	4f19      	ldr	r7, [pc, #100]	; (1d020 <usb_serial_flush_callback+0x88>)
   1cfbc:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   1cfbe:	4c19      	ldr	r4, [pc, #100]	; (1d024 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   1cfc0:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   1cfc4:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   1cfc8:	4642      	mov	r2, r8
   1cfca:	4638      	mov	r0, r7
   1cfcc:	4621      	mov	r1, r4
   1cfce:	f7ff fee1 	bl	1cd94 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   1cfd2:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
   1cfd6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   1cfda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1cfde:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   1cfe2:	3420      	adds	r4, #32
	} while (location < end_addr);
   1cfe4:	42a2      	cmp	r2, r4
   1cfe6:	d8fa      	bhi.n	1cfde <usb_serial_flush_callback+0x46>
	asm("dsb");
   1cfe8:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1cfec:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   1cff0:	2004      	movs	r0, #4
   1cff2:	4639      	mov	r1, r7
   1cff4:	f7ff fee6 	bl	1cdc4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   1cff8:	7833      	ldrb	r3, [r6, #0]
   1cffa:	3301      	adds	r3, #1
   1cffc:	b2db      	uxtb	r3, r3
   1cffe:	2b03      	cmp	r3, #3
   1d000:	bf88      	it	hi
   1d002:	2300      	movhi	r3, #0
   1d004:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   1d006:	2300      	movs	r3, #0
   1d008:	802b      	strh	r3, [r5, #0]
}
   1d00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d00e:	4770      	bx	lr
   1d010:	200136f7 	.word	0x200136f7
   1d014:	200136f9 	.word	0x200136f9
   1d018:	200136d2 	.word	0x200136d2
   1d01c:	200136f6 	.word	0x200136f6
   1d020:	2000a700 	.word	0x2000a700
   1d024:	20204760 	.word	0x20204760

0001d028 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
   1d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d02c:	b085      	sub	sp, #20
	while (size > 0) {
   1d02e:	e9cd 1001 	strd	r1, r0, [sp, #4]
   1d032:	2900      	cmp	r1, #0
   1d034:	f000 80bf 	beq.w	1d1b6 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
   1d038:	2300      	movs	r3, #0
   1d03a:	4c60      	ldr	r4, [pc, #384]	; (1d1bc <usb_serial_write.part.0+0x194>)
   1d03c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 1d1d8 <usb_serial_write.part.0+0x1b0>
   1d040:	f8df a198 	ldr.w	sl, [pc, #408]	; 1d1dc <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
   1d044:	4f5e      	ldr	r7, [pc, #376]	; (1d1c0 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
   1d046:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
   1d048:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
   1d04a:	4a5e      	ldr	r2, [pc, #376]	; (1d1c4 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
   1d04c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
   1d04e:	4b5e      	ldr	r3, [pc, #376]	; (1d1c8 <usb_serial_write.part.0+0x1a0>)
   1d050:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
   1d052:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
   1d056:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
   1d05a:	2b00      	cmp	r3, #0
   1d05c:	f040 80a7 	bne.w	1d1ae <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
   1d060:	461e      	mov	r6, r3
		int waiting=0;
   1d062:	461d      	mov	r5, r3
			tx_noautoflush = 0;
   1d064:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
   1d066:	4648      	mov	r0, r9
   1d068:	f7ff fece 	bl	1ce08 <usb_transfer_status>
			if (!(status & 0x80)) {
   1d06c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   1d070:	f000 808c 	beq.w	1d18c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
   1d074:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
   1d078:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
   1d07c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
   1d080:	b905      	cbnz	r5, 1d084 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
   1d082:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
   1d084:	2b00      	cmp	r3, #0
   1d086:	d17d      	bne.n	1d184 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
   1d088:	683b      	ldr	r3, [r7, #0]
   1d08a:	1b9b      	subs	r3, r3, r6
   1d08c:	2b78      	cmp	r3, #120	; 0x78
   1d08e:	f200 8087 	bhi.w	1d1a0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
   1d092:	4b4e      	ldr	r3, [pc, #312]	; (1d1cc <usb_serial_write.part.0+0x1a4>)
   1d094:	781b      	ldrb	r3, [r3, #0]
   1d096:	2b00      	cmp	r3, #0
   1d098:	d074      	beq.n	1d184 <usb_serial_write.part.0+0x15c>
			yield();
   1d09a:	f000 fa9d 	bl	1d5d8 <yield>
			tx_noautoflush = 1;
   1d09e:	2201      	movs	r2, #1
		while (!tx_available) {
   1d0a0:	f8b8 3000 	ldrh.w	r3, [r8]
   1d0a4:	4615      	mov	r5, r2
			tx_noautoflush = 1;
   1d0a6:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
   1d0a8:	2b00      	cmp	r3, #0
   1d0aa:	d0dc      	beq.n	1d066 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   1d0ac:	4a46      	ldr	r2, [pc, #280]	; (1d1c8 <usb_serial_write.part.0+0x1a0>)
   1d0ae:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   1d0b2:	7811      	ldrb	r1, [r2, #0]
   1d0b4:	461a      	mov	r2, r3
   1d0b6:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
   1d0ba:	4d45      	ldr	r5, [pc, #276]	; (1d1d0 <usb_serial_write.part.0+0x1a8>)
   1d0bc:	02c9      	lsls	r1, r1, #11
   1d0be:	4428      	add	r0, r5
		if (size >= tx_available) {
   1d0c0:	9d01      	ldr	r5, [sp, #4]
   1d0c2:	4295      	cmp	r5, r2
   1d0c4:	d217      	bcs.n	1d0f6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
   1d0c6:	9303      	str	r3, [sp, #12]
   1d0c8:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
   1d0cc:	462a      	mov	r2, r5
   1d0ce:	f7fe fdab 	bl	1bc28 <memcpy>
			tx_available -= size;
   1d0d2:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   1d0d4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
   1d0d8:	1b5b      	subs	r3, r3, r5
   1d0da:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   1d0de:	4b3d      	ldr	r3, [pc, #244]	; (1d1d4 <usb_serial_write.part.0+0x1ac>)
   1d0e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
   1d0e4:	f3bf 8f4f 	dsb	sy
			sent += size;
   1d0e8:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
   1d0ea:	2300      	movs	r3, #0
			sent += size;
   1d0ec:	4428      	add	r0, r5
		tx_noautoflush = 0;
   1d0ee:	7023      	strb	r3, [r4, #0]
}
   1d0f0:	b005      	add	sp, #20
   1d0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   1d0f6:	4b36      	ldr	r3, [pc, #216]	; (1d1d0 <usb_serial_write.part.0+0x1a8>)
   1d0f8:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
   1d0fa:	9902      	ldr	r1, [sp, #8]
   1d0fc:	f7fe fd94 	bl	1bc28 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
   1d100:	2300      	movs	r3, #0
   1d102:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d106:	4629      	mov	r1, r5
   1d108:	4648      	mov	r0, r9
   1d10a:	f7ff fe43 	bl	1cd94 <usb_prepare_transfer>
	asm("dsb");
   1d10e:	f3bf 8f4f 	dsb	sy
   1d112:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
   1d116:	f505 6300 	add.w	r3, r5, #2048	; 0x800
   1d11a:	4293      	cmp	r3, r2
   1d11c:	bf34      	ite	cc
   1d11e:	2301      	movcc	r3, #1
   1d120:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
   1d122:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1d126:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   1d12a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
   1d12e:	3520      	adds	r5, #32
	} while (location < end_addr);
   1d130:	42ab      	cmp	r3, r5
   1d132:	d1fa      	bne.n	1d12a <usb_serial_write.part.0+0x102>
	asm("dsb");
   1d134:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1d138:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
   1d13c:	2004      	movs	r0, #4
   1d13e:	4649      	mov	r1, r9
   1d140:	f7ff fe40 	bl	1cdc4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
   1d144:	4a20      	ldr	r2, [pc, #128]	; (1d1c8 <usb_serial_write.part.0+0x1a0>)
   1d146:	7813      	ldrb	r3, [r2, #0]
   1d148:	3301      	adds	r3, #1
   1d14a:	b2db      	uxtb	r3, r3
   1d14c:	2b03      	cmp	r3, #3
   1d14e:	bf84      	itt	hi
   1d150:	2300      	movhi	r3, #0
   1d152:	4a1d      	ldrhi	r2, [pc, #116]	; (1d1c8 <usb_serial_write.part.0+0x1a0>)
   1d154:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
   1d156:	f8b8 3000 	ldrh.w	r3, [r8]
   1d15a:	9a01      	ldr	r2, [sp, #4]
   1d15c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
   1d15e:	9a00      	ldr	r2, [sp, #0]
   1d160:	441a      	add	r2, r3
			size -= tx_available;
   1d162:	9101      	str	r1, [sp, #4]
			sent += tx_available;
   1d164:	9200      	str	r2, [sp, #0]
			data += tx_available;
   1d166:	9a02      	ldr	r2, [sp, #8]
   1d168:	441a      	add	r2, r3
			tx_available = 0;
   1d16a:	2300      	movs	r3, #0
			data += tx_available;
   1d16c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
   1d16e:	4a19      	ldr	r2, [pc, #100]	; (1d1d4 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
   1d170:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
   1d174:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
   1d178:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
   1d17c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
   1d17e:	2900      	cmp	r1, #0
   1d180:	f47f af62 	bne.w	1d048 <usb_serial_write.part.0+0x20>
	return sent;
   1d184:	9800      	ldr	r0, [sp, #0]
}
   1d186:	b005      	add	sp, #20
   1d188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
   1d18c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   1d190:	4b0d      	ldr	r3, [pc, #52]	; (1d1c8 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
   1d192:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   1d196:	7819      	ldrb	r1, [r3, #0]
				break;
   1d198:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
   1d19a:	f8a8 2000 	strh.w	r2, [r8]
				break;
   1d19e:	e78a      	b.n	1d0b6 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
   1d1a0:	2301      	movs	r3, #1
				return sent;
   1d1a2:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
   1d1a4:	f88a 3000 	strb.w	r3, [sl]
}
   1d1a8:	b005      	add	sp, #20
   1d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   1d1ae:	461a      	mov	r2, r3
   1d1b0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   1d1b4:	e77f      	b.n	1d0b6 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
   1d1b6:	9801      	ldr	r0, [sp, #4]
	return sent;
   1d1b8:	e7e5      	b.n	1d186 <usb_serial_write.part.0+0x15e>
   1d1ba:	bf00      	nop
   1d1bc:	200136f7 	.word	0x200136f7
   1d1c0:	20013554 	.word	0x20013554
   1d1c4:	2000a700 	.word	0x2000a700
   1d1c8:	200136f6 	.word	0x200136f6
   1d1cc:	200136f9 	.word	0x200136f9
   1d1d0:	20204760 	.word	0x20204760
   1d1d4:	402e0000 	.word	0x402e0000
   1d1d8:	200136d2 	.word	0x200136d2
   1d1dc:	200136f5 	.word	0x200136f5

0001d1e0 <usb_serial_reset>:
}
   1d1e0:	4770      	bx	lr
   1d1e2:	bf00      	nop

0001d1e4 <usb_serial_configure>:
	if (usb_high_speed) {
   1d1e4:	4b2d      	ldr	r3, [pc, #180]	; (1d29c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
   1d1e6:	2100      	movs	r1, #0
   1d1e8:	2280      	movs	r2, #128	; 0x80
   1d1ea:	482d      	ldr	r0, [pc, #180]	; (1d2a0 <usb_serial_configure+0xbc>)
{
   1d1ec:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
   1d1ee:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
   1d1f0:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
   1d1f2:	4d2c      	ldr	r5, [pc, #176]	; (1d2a4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
   1d1f4:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
   1d1f6:	4e2c      	ldr	r6, [pc, #176]	; (1d2a8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
   1d1f8:	bf0c      	ite	eq
   1d1fa:	2340      	moveq	r3, #64	; 0x40
   1d1fc:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
   1d200:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
   1d202:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
   1d204:	f005 f87c 	bl	22300 <memset>
	tx_head = 0;
   1d208:	4a28      	ldr	r2, [pc, #160]	; (1d2ac <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   1d20a:	4621      	mov	r1, r4
	tx_available = 0;
   1d20c:	4b28      	ldr	r3, [pc, #160]	; (1d2b0 <usb_serial_configure+0xcc>)
	tx_head = 0;
   1d20e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   1d210:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d214:	4827      	ldr	r0, [pc, #156]	; (1d2b4 <usb_serial_configure+0xd0>)
	tx_available = 0;
   1d216:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   1d218:	f005 f872 	bl	22300 <memset>
	memset(rx_count, 0, sizeof(rx_count));
   1d21c:	4a26      	ldr	r2, [pc, #152]	; (1d2b8 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   1d21e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
   1d220:	4b26      	ldr	r3, [pc, #152]	; (1d2bc <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   1d222:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
   1d224:	e9c2 4400 	strd	r4, r4, [r2]
   1d228:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
   1d22c:	4a24      	ldr	r2, [pc, #144]	; (1d2c0 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
   1d22e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
   1d232:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
   1d234:	4a23      	ldr	r2, [pc, #140]	; (1d2c4 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
   1d236:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
   1d23a:	4b23      	ldr	r3, [pc, #140]	; (1d2c8 <usb_serial_configure+0xe4>)
   1d23c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   1d23e:	4623      	mov	r3, r4
	rx_available = 0;
   1d240:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   1d242:	4622      	mov	r2, r4
   1d244:	f7ff fd74 	bl	1cd30 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   1d248:	4622      	mov	r2, r4
   1d24a:	8831      	ldrh	r1, [r6, #0]
   1d24c:	2003      	movs	r0, #3
   1d24e:	4b1f      	ldr	r3, [pc, #124]	; (1d2cc <usb_serial_configure+0xe8>)
   1d250:	f7ff fd3c 	bl	1cccc <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
   1d254:	4623      	mov	r3, r4
   1d256:	2201      	movs	r2, #1
   1d258:	8829      	ldrh	r1, [r5, #0]
   1d25a:	2004      	movs	r0, #4
   1d25c:	f7ff fd68 	bl	1cd30 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   1d260:	4620      	mov	r0, r4
   1d262:	3401      	adds	r4, #1
   1d264:	f7ff fe0e 	bl	1ce84 <rx_queue_transfer>
   1d268:	2c08      	cmp	r4, #8
   1d26a:	d1f9      	bne.n	1d260 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
   1d26c:	4b18      	ldr	r3, [pc, #96]	; (1d2d0 <usb_serial_configure+0xec>)
   1d26e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
   1d270:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
   1d272:	4818      	ldr	r0, [pc, #96]	; (1d2d4 <usb_serial_configure+0xf0>)
   1d274:	4c18      	ldr	r4, [pc, #96]	; (1d2d8 <usb_serial_configure+0xf4>)
   1d276:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
   1d278:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
   1d27c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
   1d280:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   1d284:	4915      	ldr	r1, [pc, #84]	; (1d2dc <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
   1d286:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   1d28a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   1d28e:	b121      	cbz	r1, 1d29a <usb_serial_configure+0xb6>
   1d290:	4a13      	ldr	r2, [pc, #76]	; (1d2e0 <usb_serial_configure+0xfc>)
   1d292:	7813      	ldrb	r3, [r2, #0]
   1d294:	f043 0301 	orr.w	r3, r3, #1
   1d298:	7013      	strb	r3, [r2, #0]
}
   1d29a:	bd70      	pop	{r4, r5, r6, pc}
   1d29c:	200136fa 	.word	0x200136fa
   1d2a0:	2000a700 	.word	0x2000a700
   1d2a4:	200136d4 	.word	0x200136d4
   1d2a8:	200136d0 	.word	0x200136d0
   1d2ac:	200136f6 	.word	0x200136f6
   1d2b0:	200136d2 	.word	0x200136d2
   1d2b4:	2000a600 	.word	0x2000a600
   1d2b8:	200132e8 	.word	0x200132e8
   1d2bc:	200132f8 	.word	0x200132f8
   1d2c0:	200136f2 	.word	0x200136f2
   1d2c4:	200132e4 	.word	0x200132e4
   1d2c8:	200136f3 	.word	0x200136f3
   1d2cc:	0001cee5 	.word	0x0001cee5
   1d2d0:	402e0000 	.word	0x402e0000
   1d2d4:	20013694 	.word	0x20013694
   1d2d8:	0001cf99 	.word	0x0001cf99
   1d2dc:	00000000 	.word	0x00000000
   1d2e0:	200136fc 	.word	0x200136fc

0001d2e4 <usb_serial_read>:
{
   1d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1d2e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1d2ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
   1d2f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1d3bc <usb_serial_read+0xd8>
{
   1d2f4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1d2f6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
   1d2fa:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
   1d2fc:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
   1d300:	2900      	cmp	r1, #0
   1d302:	d04f      	beq.n	1d3a4 <usb_serial_read+0xc0>
   1d304:	4680      	mov	r8, r0
   1d306:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
   1d308:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
   1d30a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1d3c0 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
   1d30e:	4b26      	ldr	r3, [pc, #152]	; (1d3a8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
   1d310:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   1d314:	4925      	ldr	r1, [pc, #148]	; (1d3ac <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
   1d316:	781b      	ldrb	r3, [r3, #0]
   1d318:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
   1d31a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
   1d31e:	d03f      	beq.n	1d3a0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
   1d320:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
   1d322:	4b23      	ldr	r3, [pc, #140]	; (1d3b0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   1d324:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
   1d326:	bf28      	it	cs
   1d328:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
   1d32a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
   1d32c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   1d330:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
   1d334:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
   1d336:	4b1f      	ldr	r3, [pc, #124]	; (1d3b4 <usb_serial_read+0xd0>)
   1d338:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
   1d33c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
   1d340:	42aa      	cmp	r2, r5
   1d342:	d21c      	bcs.n	1d37e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   1d344:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
   1d348:	4918      	ldr	r1, [pc, #96]	; (1d3ac <usb_serial_read+0xc8>)
			rx_available -= len;
   1d34a:	4c1b      	ldr	r4, [pc, #108]	; (1d3b8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   1d34c:	4461      	add	r1, ip
   1d34e:	9201      	str	r2, [sp, #4]
   1d350:	f7fe fc6a 	bl	1bc28 <memcpy>
			rx_available -= len;
   1d354:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
   1d356:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
   1d35a:	4658      	mov	r0, fp
			rx_index[i] += len;
   1d35c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
   1d35e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
   1d362:	442a      	add	r2, r5
			rx_available -= len;
   1d364:	4439      	add	r1, r7
			rx_index[i] += len;
   1d366:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
   1d36a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
   1d36c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1d370:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1d374:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   1d378:	b003      	add	sp, #12
   1d37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   1d37e:	462a      	mov	r2, r5
			count += avail;
   1d380:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   1d382:	f7fe fc51 	bl	1bc28 <memcpy>
			rx_available -= avail;
   1d386:	490c      	ldr	r1, [pc, #48]	; (1d3b8 <usb_serial_read+0xd4>)
			rx_tail = tail;
   1d388:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
   1d38a:	4630      	mov	r0, r6
			rx_available -= avail;
   1d38c:	680a      	ldr	r2, [r1, #0]
			p += avail;
   1d38e:	44a8      	add	r8, r5
			rx_available -= avail;
   1d390:	1b52      	subs	r2, r2, r5
   1d392:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
   1d394:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
   1d398:	f7ff fd74 	bl	1ce84 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
   1d39c:	45bb      	cmp	fp, r7
   1d39e:	d8b6      	bhi.n	1d30e <usb_serial_read+0x2a>
	return count;
   1d3a0:	4638      	mov	r0, r7
   1d3a2:	e7e3      	b.n	1d36c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
   1d3a4:	4608      	mov	r0, r1
   1d3a6:	e7e1      	b.n	1d36c <usb_serial_read+0x88>
   1d3a8:	200136f2 	.word	0x200136f2
   1d3ac:	20203760 	.word	0x20203760
   1d3b0:	20013308 	.word	0x20013308
   1d3b4:	200132e8 	.word	0x200132e8
   1d3b8:	200132e4 	.word	0x200132e4
   1d3bc:	200136f3 	.word	0x200136f3
   1d3c0:	200132f8 	.word	0x200132f8

0001d3c4 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
   1d3c4:	4b0b      	ldr	r3, [pc, #44]	; (1d3f4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
   1d3c6:	4a0c      	ldr	r2, [pc, #48]	; (1d3f8 <usb_serial_peekchar+0x34>)
   1d3c8:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
   1d3ca:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
   1d3cc:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
   1d3ce:	428a      	cmp	r2, r1
   1d3d0:	d00d      	beq.n	1d3ee <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
   1d3d2:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
   1d3d4:	4809      	ldr	r0, [pc, #36]	; (1d3fc <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   1d3d6:	4a0a      	ldr	r2, [pc, #40]	; (1d400 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
   1d3d8:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   1d3da:	490a      	ldr	r1, [pc, #40]	; (1d404 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
   1d3dc:	bf28      	it	cs
   1d3de:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
   1d3e0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   1d3e2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
   1d3e6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
   1d3ea:	5c58      	ldrb	r0, [r3, r1]
   1d3ec:	4770      	bx	lr
	if (tail == rx_head) return -1;
   1d3ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d3f2:	4770      	bx	lr
   1d3f4:	200136f2 	.word	0x200136f2
   1d3f8:	200136f3 	.word	0x200136f3
   1d3fc:	20013308 	.word	0x20013308
   1d400:	20203760 	.word	0x20203760
   1d404:	200132f8 	.word	0x200132f8

0001d408 <usb_serial_available>:
	uint32_t n = rx_available;
   1d408:	4b04      	ldr	r3, [pc, #16]	; (1d41c <usb_serial_available+0x14>)
{
   1d40a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
   1d40c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
   1d40e:	b10c      	cbz	r4, 1d414 <usb_serial_available+0xc>
}
   1d410:	4620      	mov	r0, r4
   1d412:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
   1d414:	f000 f8e0 	bl	1d5d8 <yield>
}
   1d418:	4620      	mov	r0, r4
   1d41a:	bd10      	pop	{r4, pc}
   1d41c:	200132e4 	.word	0x200132e4

0001d420 <usb_serial_flush_input>:
{
   1d420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
   1d424:	4e14      	ldr	r6, [pc, #80]	; (1d478 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
   1d426:	4d15      	ldr	r5, [pc, #84]	; (1d47c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
   1d428:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
   1d42a:	782a      	ldrb	r2, [r5, #0]
   1d42c:	4293      	cmp	r3, r2
   1d42e:	d021      	beq.n	1d474 <usb_serial_flush_input+0x54>
   1d430:	b2dc      	uxtb	r4, r3
   1d432:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1d484 <usb_serial_flush_input+0x64>
   1d436:	f8df b050 	ldr.w	fp, [pc, #80]	; 1d488 <usb_serial_flush_input+0x68>
   1d43a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1d48c <usb_serial_flush_input+0x6c>
   1d43e:	4f10      	ldr	r7, [pc, #64]	; (1d480 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
   1d440:	3401      	adds	r4, #1
   1d442:	2c08      	cmp	r4, #8
		rx_tail = tail;
   1d444:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
   1d448:	d901      	bls.n	1d44e <usb_serial_flush_input+0x2e>
   1d44a:	2400      	movs	r4, #0
   1d44c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
   1d44e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
   1d452:	f8db 3000 	ldr.w	r3, [fp]
   1d456:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
   1d45a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
   1d45e:	1a52      	subs	r2, r2, r1
   1d460:	1a9b      	subs	r3, r3, r2
   1d462:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
   1d466:	f7ff fd0d 	bl	1ce84 <rx_queue_transfer>
		rx_tail = tail;
   1d46a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
   1d46e:	782b      	ldrb	r3, [r5, #0]
   1d470:	42a3      	cmp	r3, r4
   1d472:	d1e5      	bne.n	1d440 <usb_serial_flush_input+0x20>
}
   1d474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d478:	200136f3 	.word	0x200136f3
   1d47c:	200136f2 	.word	0x200136f2
   1d480:	200132f8 	.word	0x200132f8
   1d484:	20013308 	.word	0x20013308
   1d488:	200132e4 	.word	0x200132e4
   1d48c:	200132e8 	.word	0x200132e8

0001d490 <usb_serial_getchar>:
{
   1d490:	b500      	push	{lr}
   1d492:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
   1d494:	2101      	movs	r1, #1
   1d496:	f10d 0007 	add.w	r0, sp, #7
   1d49a:	f7ff ff23 	bl	1d2e4 <usb_serial_read>
   1d49e:	b120      	cbz	r0, 1d4aa <usb_serial_getchar+0x1a>
   1d4a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   1d4a4:	b003      	add	sp, #12
   1d4a6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   1d4aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d4ae:	e7f9      	b.n	1d4a4 <usb_serial_getchar+0x14>

0001d4b0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
   1d4b0:	4b09      	ldr	r3, [pc, #36]	; (1d4d8 <usb_serial_putchar+0x28>)
{
   1d4b2:	b500      	push	{lr}
   1d4b4:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
   1d4b6:	781b      	ldrb	r3, [r3, #0]
{
   1d4b8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
   1d4bc:	b13b      	cbz	r3, 1d4ce <usb_serial_putchar+0x1e>
   1d4be:	2101      	movs	r1, #1
   1d4c0:	f10d 0007 	add.w	r0, sp, #7
   1d4c4:	f7ff fdb0 	bl	1d028 <usb_serial_write.part.0>
}
   1d4c8:	b003      	add	sp, #12
   1d4ca:	f85d fb04 	ldr.w	pc, [sp], #4
   1d4ce:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1d4d2:	b003      	add	sp, #12
   1d4d4:	f85d fb04 	ldr.w	pc, [sp], #4
   1d4d8:	200136f9 	.word	0x200136f9

0001d4dc <usb_serial_write>:
	if (!usb_configuration) return 0;
   1d4dc:	4b04      	ldr	r3, [pc, #16]	; (1d4f0 <usb_serial_write+0x14>)
   1d4de:	781b      	ldrb	r3, [r3, #0]
   1d4e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1d4e4:	b10b      	cbz	r3, 1d4ea <usb_serial_write+0xe>
   1d4e6:	f7ff bd9f 	b.w	1d028 <usb_serial_write.part.0>
}
   1d4ea:	4610      	mov	r0, r2
   1d4ec:	4770      	bx	lr
   1d4ee:	bf00      	nop
   1d4f0:	200136f9 	.word	0x200136f9

0001d4f4 <usb_serial_write_buffer_free>:
{
   1d4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
   1d4f8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
   1d4fa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1d540 <usb_serial_write_buffer_free+0x4c>
   1d4fe:	2301      	movs	r3, #1
   1d500:	4d0d      	ldr	r5, [pc, #52]	; (1d538 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
   1d502:	4627      	mov	r7, r4
   1d504:	4e0d      	ldr	r6, [pc, #52]	; (1d53c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
   1d506:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
   1d50a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   1d50c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
   1d50e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
   1d510:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
   1d512:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
   1d516:	d005      	beq.n	1d524 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   1d518:	f7ff fc76 	bl	1ce08 <usb_transfer_status>
   1d51c:	0603      	lsls	r3, r0, #24
   1d51e:	bf58      	it	pl
   1d520:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
   1d524:	2c04      	cmp	r4, #4
   1d526:	d1f0      	bne.n	1d50a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
   1d528:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   1d52c:	2300      	movs	r3, #0
}
   1d52e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
   1d530:	f888 3000 	strb.w	r3, [r8]
}
   1d534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d538:	2000a700 	.word	0x2000a700
   1d53c:	200136f6 	.word	0x200136f6
   1d540:	200136f7 	.word	0x200136f7

0001d544 <usb_serial_flush_output>:
{
   1d544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
   1d548:	4b1d      	ldr	r3, [pc, #116]	; (1d5c0 <usb_serial_flush_output+0x7c>)
   1d54a:	781b      	ldrb	r3, [r3, #0]
   1d54c:	b113      	cbz	r3, 1d554 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
   1d54e:	4d1d      	ldr	r5, [pc, #116]	; (1d5c4 <usb_serial_flush_output+0x80>)
   1d550:	882a      	ldrh	r2, [r5, #0]
   1d552:	b90a      	cbnz	r2, 1d558 <usb_serial_flush_output+0x14>
}
   1d554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
   1d558:	4e1b      	ldr	r6, [pc, #108]	; (1d5c8 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
   1d55a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   1d55e:	491b      	ldr	r1, [pc, #108]	; (1d5cc <usb_serial_flush_output+0x88>)
   1d560:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   1d562:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   1d564:	4c1a      	ldr	r4, [pc, #104]	; (1d5d0 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   1d566:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
   1d56a:	4f1a      	ldr	r7, [pc, #104]	; (1d5d4 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   1d56c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
   1d570:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   1d572:	4640      	mov	r0, r8
	tx_noautoflush = 1;
   1d574:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   1d576:	4621      	mov	r1, r4
   1d578:	2300      	movs	r3, #0
   1d57a:	f7ff fc0b 	bl	1cd94 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   1d57e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
   1d582:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   1d586:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1d58a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   1d58e:	3420      	adds	r4, #32
	} while (location < end_addr);
   1d590:	42a2      	cmp	r2, r4
   1d592:	d8fa      	bhi.n	1d58a <usb_serial_flush_output+0x46>
	asm("dsb");
   1d594:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1d598:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   1d59c:	2004      	movs	r0, #4
   1d59e:	4641      	mov	r1, r8
   1d5a0:	f7ff fc10 	bl	1cdc4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   1d5a4:	7833      	ldrb	r3, [r6, #0]
   1d5a6:	3301      	adds	r3, #1
   1d5a8:	b2db      	uxtb	r3, r3
   1d5aa:	2b03      	cmp	r3, #3
   1d5ac:	bf88      	it	hi
   1d5ae:	2300      	movhi	r3, #0
   1d5b0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   1d5b2:	2300      	movs	r3, #0
   1d5b4:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
   1d5b6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   1d5ba:	703b      	strb	r3, [r7, #0]
}
   1d5bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d5c0:	200136f9 	.word	0x200136f9
   1d5c4:	200136d2 	.word	0x200136d2
   1d5c8:	200136f6 	.word	0x200136f6
   1d5cc:	2000a700 	.word	0x2000a700
   1d5d0:	20204760 	.word	0x20204760
   1d5d4:	200136f7 	.word	0x200136f7

0001d5d8 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
   1d5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
   1d5dc:	4b2d      	ldr	r3, [pc, #180]	; (1d694 <yield+0xbc>)
   1d5de:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
   1d5e0:	b166      	cbz	r6, 1d5fc <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
   1d5e2:	4f2d      	ldr	r7, [pc, #180]	; (1d698 <yield+0xc0>)
   1d5e4:	783b      	ldrb	r3, [r7, #0]
   1d5e6:	b94b      	cbnz	r3, 1d5fc <yield+0x24>
	running = 1;
   1d5e8:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   1d5ea:	07f1      	lsls	r1, r6, #31
	running = 1;
   1d5ec:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   1d5ee:	d443      	bmi.n	1d678 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
   1d5f0:	07b2      	lsls	r2, r6, #30
   1d5f2:	d426      	bmi.n	1d642 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
   1d5f4:	2300      	movs	r3, #0
   1d5f6:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
   1d5f8:	0773      	lsls	r3, r6, #29
   1d5fa:	d401      	bmi.n	1d600 <yield+0x28>
		EventResponder::runFromYield();
	}
};
   1d5fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
   1d600:	4b26      	ldr	r3, [pc, #152]	; (1d69c <yield+0xc4>)
   1d602:	681a      	ldr	r2, [r3, #0]
   1d604:	2a00      	cmp	r2, #0
   1d606:	d0f9      	beq.n	1d5fc <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   1d608:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
   1d60c:	2a00      	cmp	r2, #0
   1d60e:	d1f5      	bne.n	1d5fc <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   1d610:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
   1d614:	b672      	cpsid	i
		EventResponder *first = firstYield;
   1d616:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
   1d618:	2800      	cmp	r0, #0
   1d61a:	d034      	beq.n	1d686 <yield+0xae>
		if (runningFromYield) {
   1d61c:	4c20      	ldr	r4, [pc, #128]	; (1d6a0 <yield+0xc8>)
   1d61e:	7821      	ldrb	r1, [r4, #0]
   1d620:	2900      	cmp	r1, #0
   1d622:	d130      	bne.n	1d686 <yield+0xae>
		runningFromYield = true;
   1d624:	2201      	movs	r2, #1
   1d626:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
   1d628:	6942      	ldr	r2, [r0, #20]
   1d62a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
   1d62c:	2a00      	cmp	r2, #0
   1d62e:	d02e      	beq.n	1d68e <yield+0xb6>
			firstYield->_prev = nullptr;
   1d630:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
   1d632:	b905      	cbnz	r5, 1d636 <yield+0x5e>
   1d634:	b662      	cpsie	i
		first->_triggered = false;
   1d636:	2500      	movs	r5, #0
		(*(first->_function))(*first);
   1d638:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
   1d63a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   1d63c:	4798      	blx	r3
		runningFromYield = false;
   1d63e:	7025      	strb	r5, [r4, #0]
   1d640:	e7dc      	b.n	1d5fc <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1d642:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1d6a8 <yield+0xd0>
   1d646:	f898 3000 	ldrb.w	r3, [r8]
   1d64a:	2b00      	cmp	r3, #0
   1d64c:	d0d2      	beq.n	1d5f4 <yield+0x1c>
   1d64e:	2500      	movs	r5, #0
   1d650:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d6ac <yield+0xd4>
   1d654:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
   1d656:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1d65a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   1d65c:	6823      	ldr	r3, [r4, #0]
   1d65e:	4620      	mov	r0, r4
   1d660:	691b      	ldr	r3, [r3, #16]
   1d662:	4798      	blx	r3
   1d664:	b110      	cbz	r0, 1d66c <yield+0x94>
   1d666:	6963      	ldr	r3, [r4, #20]
   1d668:	689b      	ldr	r3, [r3, #8]
   1d66a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1d66c:	f898 2000 	ldrb.w	r2, [r8]
   1d670:	b2eb      	uxtb	r3, r5
   1d672:	429a      	cmp	r2, r3
   1d674:	d8ef      	bhi.n	1d656 <yield+0x7e>
   1d676:	e7bd      	b.n	1d5f4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
   1d678:	f7ff fec6 	bl	1d408 <usb_serial_available>
		if (Serial.available()) serialEvent();
   1d67c:	2800      	cmp	r0, #0
   1d67e:	d0b7      	beq.n	1d5f0 <yield+0x18>
   1d680:	f3af 8000 	nop.w
   1d684:	e7b4      	b.n	1d5f0 <yield+0x18>
		if (doit) __enable_irq();
   1d686:	2d00      	cmp	r5, #0
   1d688:	d1b8      	bne.n	1d5fc <yield+0x24>
   1d68a:	b662      	cpsie	i
   1d68c:	e7b6      	b.n	1d5fc <yield+0x24>
			lastYield = nullptr;
   1d68e:	4b05      	ldr	r3, [pc, #20]	; (1d6a4 <yield+0xcc>)
   1d690:	601a      	str	r2, [r3, #0]
   1d692:	e7ce      	b.n	1d632 <yield+0x5a>
   1d694:	200136fc 	.word	0x200136fc
   1d698:	200136e0 	.word	0x200136e0
   1d69c:	2000aeb0 	.word	0x2000aeb0
   1d6a0:	200136de 	.word	0x200136de
   1d6a4:	2000aebc 	.word	0x2000aebc
   1d6a8:	200136df 	.word	0x200136df
   1d6ac:	2000af38 	.word	0x2000af38

0001d6b0 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
   1d6b0:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
   1d6b2:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
   1d6b6:	b15b      	cbz	r3, 1d6d0 <sm_align_pool+0x20>
   1d6b8:	b1ba      	cbz	r2, 1d6ea <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
   1d6ba:	4b0f      	ldr	r3, [pc, #60]	; (1d6f8 <sm_align_pool+0x48>)
   1d6bc:	fba3 1302 	umull	r1, r3, r3, r2
   1d6c0:	08db      	lsrs	r3, r3, #3
   1d6c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d6c6:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   1d6ca:	d10a      	bne.n	1d6e2 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
   1d6cc:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
   1d6ce:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
   1d6d0:	4b09      	ldr	r3, [pc, #36]	; (1d6f8 <sm_align_pool+0x48>)
   1d6d2:	fba3 1302 	umull	r1, r3, r3, r2
   1d6d6:	08db      	lsrs	r3, r3, #3
   1d6d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
   1d6dc:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   1d6e0:	d001      	beq.n	1d6e6 <sm_align_pool+0x36>
   1d6e2:	1ad2      	subs	r2, r2, r3
   1d6e4:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
   1d6e6:	2af0      	cmp	r2, #240	; 0xf0
   1d6e8:	d8f0      	bhi.n	1d6cc <sm_align_pool+0x1c>
		errno = ENOSPC;
   1d6ea:	f004 ff3f 	bl	2256c <__errno>
   1d6ee:	221c      	movs	r2, #28
   1d6f0:	4603      	mov	r3, r0
   1d6f2:	2000      	movs	r0, #0
   1d6f4:	601a      	str	r2, [r3, #0]
}
   1d6f6:	bd08      	pop	{r3, pc}
   1d6f8:	aaaaaaab 	.word	0xaaaaaaab

0001d6fc <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
   1d6fc:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
   1d6fe:	4604      	mov	r4, r0
   1d700:	b338      	cbz	r0, 1d752 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
   1d702:	b119      	cbz	r1, 1d70c <sm_set_pool+0x10>
   1d704:	fab2 f682 	clz	r6, r2
   1d708:	0976      	lsrs	r6, r6, #5
   1d70a:	b9a2      	cbnz	r2, 1d736 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
   1d70c:	6820      	ldr	r0, [r4, #0]
   1d70e:	b300      	cbz	r0, 1d752 <sm_set_pool+0x56>
   1d710:	6862      	ldr	r2, [r4, #4]
   1d712:	b1f2      	cbz	r2, 1d752 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
   1d714:	4b18      	ldr	r3, [pc, #96]	; (1d778 <sm_set_pool+0x7c>)
   1d716:	4919      	ldr	r1, [pc, #100]	; (1d77c <sm_set_pool+0x80>)
   1d718:	fb02 f303 	mul.w	r3, r2, r3
   1d71c:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
   1d720:	d317      	bcc.n	1d752 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   1d722:	68a3      	ldr	r3, [r4, #8]
   1d724:	b9e3      	cbnz	r3, 1d760 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
   1d726:	2200      	movs	r2, #0
			return 1;
   1d728:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
   1d72a:	6022      	str	r2, [r4, #0]
   1d72c:	6062      	str	r2, [r4, #4]
   1d72e:	60a2      	str	r2, [r4, #8]
   1d730:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
   1d732:	4618      	mov	r0, r3
   1d734:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
   1d736:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
   1d738:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
   1d73a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
   1d73e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
   1d740:	f7ff ffb6 	bl	1d6b0 <sm_align_pool>
   1d744:	4603      	mov	r3, r0
   1d746:	2800      	cmp	r0, #0
   1d748:	d0f3      	beq.n	1d732 <sm_set_pool+0x36>
	if (do_zero) {
   1d74a:	b96d      	cbnz	r5, 1d768 <sm_set_pool+0x6c>
	return 1;
   1d74c:	2301      	movs	r3, #1
}
   1d74e:	4618      	mov	r0, r3
   1d750:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   1d752:	f004 ff0b 	bl	2256c <__errno>
   1d756:	2216      	movs	r2, #22
		return 0;
   1d758:	2300      	movs	r3, #0
		errno = EINVAL;
   1d75a:	6002      	str	r2, [r0, #0]
}
   1d75c:	4618      	mov	r0, r3
   1d75e:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   1d760:	2100      	movs	r1, #0
   1d762:	f004 fdcd 	bl	22300 <memset>
   1d766:	e7de      	b.n	1d726 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
   1d768:	6862      	ldr	r2, [r4, #4]
   1d76a:	4631      	mov	r1, r6
   1d76c:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
   1d76e:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
   1d770:	f004 fdc6 	bl	22300 <memset>
	return 1;
   1d774:	2301      	movs	r3, #1
   1d776:	e7dc      	b.n	1d732 <sm_set_pool+0x36>
   1d778:	aaaaaaab 	.word	0xaaaaaaab
   1d77c:	15555555 	.word	0x15555555

0001d780 <arm_radix4_butterfly_q15>:
   1d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d784:	469b      	mov	fp, r3
   1d786:	b091      	sub	sp, #68	; 0x44
   1d788:	088b      	lsrs	r3, r1, #2
   1d78a:	4606      	mov	r6, r0
   1d78c:	900e      	str	r0, [sp, #56]	; 0x38
   1d78e:	2500      	movs	r5, #0
   1d790:	4618      	mov	r0, r3
   1d792:	9103      	str	r1, [sp, #12]
   1d794:	930f      	str	r3, [sp, #60]	; 0x3c
   1d796:	4637      	mov	r7, r6
   1d798:	0081      	lsls	r1, r0, #2
   1d79a:	4682      	mov	sl, r0
   1d79c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1d7a0:	4696      	mov	lr, r2
   1d7a2:	1870      	adds	r0, r6, r1
   1d7a4:	9207      	str	r2, [sp, #28]
   1d7a6:	009b      	lsls	r3, r3, #2
   1d7a8:	462c      	mov	r4, r5
   1d7aa:	1846      	adds	r6, r0, r1
   1d7ac:	462a      	mov	r2, r5
   1d7ae:	9304      	str	r3, [sp, #16]
   1d7b0:	4431      	add	r1, r6
   1d7b2:	9601      	str	r6, [sp, #4]
   1d7b4:	f8cd b008 	str.w	fp, [sp, #8]
   1d7b8:	683b      	ldr	r3, [r7, #0]
   1d7ba:	fa93 fc22 	shadd16	ip, r3, r2
   1d7be:	fa9c fc22 	shadd16	ip, ip, r2
   1d7c2:	9b01      	ldr	r3, [sp, #4]
   1d7c4:	681b      	ldr	r3, [r3, #0]
   1d7c6:	fa93 f322 	shadd16	r3, r3, r2
   1d7ca:	fa93 f322 	shadd16	r3, r3, r2
   1d7ce:	fa9c f813 	qadd16	r8, ip, r3
   1d7d2:	fadc fc13 	qsub16	ip, ip, r3
   1d7d6:	6803      	ldr	r3, [r0, #0]
   1d7d8:	fa93 f322 	shadd16	r3, r3, r2
   1d7dc:	fa93 f922 	shadd16	r9, r3, r2
   1d7e0:	680b      	ldr	r3, [r1, #0]
   1d7e2:	fa93 f322 	shadd16	r3, r3, r2
   1d7e6:	fa93 f322 	shadd16	r3, r3, r2
   1d7ea:	fa99 f313 	qadd16	r3, r9, r3
   1d7ee:	fa98 f923 	shadd16	r9, r8, r3
   1d7f2:	f847 9b04 	str.w	r9, [r7], #4
   1d7f6:	fad8 f313 	qsub16	r3, r8, r3
   1d7fa:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
   1d7fe:	fb29 fb03 	smuad	fp, r9, r3
   1d802:	fb49 f913 	smusdx	r9, r9, r3
   1d806:	6803      	ldr	r3, [r0, #0]
   1d808:	fa93 f322 	shadd16	r3, r3, r2
   1d80c:	fa93 f822 	shadd16	r8, r3, r2
   1d810:	4b78      	ldr	r3, [pc, #480]	; (1d9f4 <arm_radix4_butterfly_q15+0x274>)
   1d812:	ea09 0303 	and.w	r3, r9, r3
   1d816:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
   1d81a:	f840 3b04 	str.w	r3, [r0], #4
   1d81e:	680b      	ldr	r3, [r1, #0]
   1d820:	fa93 f322 	shadd16	r3, r3, r2
   1d824:	fa93 f322 	shadd16	r3, r3, r2
   1d828:	fad8 f313 	qsub16	r3, r8, r3
   1d82c:	faac f913 	qasx	r9, ip, r3
   1d830:	faec fc13 	qsax	ip, ip, r3
   1d834:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
   1d838:	fb23 f80c 	smuad	r8, r3, ip
   1d83c:	fb43 fc1c 	smusdx	ip, r3, ip
   1d840:	4b6c      	ldr	r3, [pc, #432]	; (1d9f4 <arm_radix4_butterfly_q15+0x274>)
   1d842:	9e01      	ldr	r6, [sp, #4]
   1d844:	ea0c 0303 	and.w	r3, ip, r3
   1d848:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
   1d84c:	f846 3b04 	str.w	r3, [r6], #4
   1d850:	9601      	str	r6, [sp, #4]
   1d852:	462e      	mov	r6, r5
   1d854:	f85e 3005 	ldr.w	r3, [lr, r5]
   1d858:	fb23 fc09 	smuad	ip, r3, r9
   1d85c:	fb43 f919 	smusdx	r9, r3, r9
   1d860:	4b64      	ldr	r3, [pc, #400]	; (1d9f4 <arm_radix4_butterfly_q15+0x274>)
   1d862:	f1ba 0a01 	subs.w	sl, sl, #1
   1d866:	9d02      	ldr	r5, [sp, #8]
   1d868:	ea09 0303 	and.w	r3, r9, r3
   1d86c:	442c      	add	r4, r5
   1d86e:	9d04      	ldr	r5, [sp, #16]
   1d870:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
   1d874:	442e      	add	r6, r5
   1d876:	f841 3b04 	str.w	r3, [r1], #4
   1d87a:	4635      	mov	r5, r6
   1d87c:	d19c      	bne.n	1d7b8 <arm_radix4_butterfly_q15+0x38>
   1d87e:	f8dd b008 	ldr.w	fp, [sp, #8]
   1d882:	ea4f 038b 	mov.w	r3, fp, lsl #2
   1d886:	9309      	str	r3, [sp, #36]	; 0x24
   1d888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d88a:	2b04      	cmp	r3, #4
   1d88c:	f240 8086 	bls.w	1d99c <arm_radix4_butterfly_q15+0x21c>
   1d890:	f8cd a010 	str.w	sl, [sp, #16]
   1d894:	930c      	str	r3, [sp, #48]	; 0x30
   1d896:	9302      	str	r3, [sp, #8]
   1d898:	9a02      	ldr	r2, [sp, #8]
   1d89a:	2100      	movs	r1, #0
   1d89c:	0893      	lsrs	r3, r2, #2
   1d89e:	9105      	str	r1, [sp, #20]
   1d8a0:	0097      	lsls	r7, r2, #2
   1d8a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d8a4:	930d      	str	r3, [sp, #52]	; 0x34
   1d8a6:	9206      	str	r2, [sp, #24]
   1d8a8:	1e5a      	subs	r2, r3, #1
   1d8aa:	009b      	lsls	r3, r3, #2
   1d8ac:	9108      	str	r1, [sp, #32]
   1d8ae:	920a      	str	r2, [sp, #40]	; 0x28
   1d8b0:	930b      	str	r3, [sp, #44]	; 0x2c
   1d8b2:	9907      	ldr	r1, [sp, #28]
   1d8b4:	9a08      	ldr	r2, [sp, #32]
   1d8b6:	460d      	mov	r5, r1
   1d8b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1d8ba:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1d8be:	4611      	mov	r1, r2
   1d8c0:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
   1d8c4:	9a07      	ldr	r2, [sp, #28]
   1d8c6:	9e06      	ldr	r6, [sp, #24]
   1d8c8:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
   1d8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d8ce:	1930      	adds	r0, r6, r4
   1d8d0:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
   1d8d4:	18cb      	adds	r3, r1, r3
   1d8d6:	9a05      	ldr	r2, [sp, #20]
   1d8d8:	1825      	adds	r5, r4, r0
   1d8da:	9308      	str	r3, [sp, #32]
   1d8dc:	9b03      	ldr	r3, [sp, #12]
   1d8de:	442c      	add	r4, r5
   1d8e0:	4293      	cmp	r3, r2
   1d8e2:	d946      	bls.n	1d972 <arm_radix4_butterfly_q15+0x1f2>
   1d8e4:	9b02      	ldr	r3, [sp, #8]
   1d8e6:	9501      	str	r5, [sp, #4]
   1d8e8:	eb03 0e02 	add.w	lr, r3, r2
   1d8ec:	9a01      	ldr	r2, [sp, #4]
   1d8ee:	6833      	ldr	r3, [r6, #0]
   1d8f0:	6812      	ldr	r2, [r2, #0]
   1d8f2:	fa93 fa12 	qadd16	sl, r3, r2
   1d8f6:	fad3 f312 	qsub16	r3, r3, r2
   1d8fa:	6801      	ldr	r1, [r0, #0]
   1d8fc:	6822      	ldr	r2, [r4, #0]
   1d8fe:	fa91 f112 	qadd16	r1, r1, r2
   1d902:	fa9a f221 	shadd16	r2, sl, r1
   1d906:	9d04      	ldr	r5, [sp, #16]
   1d908:	fa92 f225 	shadd16	r2, r2, r5
   1d90c:	6032      	str	r2, [r6, #0]
   1d90e:	443e      	add	r6, r7
   1d910:	fada f121 	shsub16	r1, sl, r1
   1d914:	fb28 fb01 	smuad	fp, r8, r1
   1d918:	fb48 f211 	smusdx	r2, r8, r1
   1d91c:	4935      	ldr	r1, [pc, #212]	; (1d9f4 <arm_radix4_butterfly_q15+0x274>)
   1d91e:	f8d0 a000 	ldr.w	sl, [r0]
   1d922:	4011      	ands	r1, r2
   1d924:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
   1d928:	6001      	str	r1, [r0, #0]
   1d92a:	4438      	add	r0, r7
   1d92c:	6822      	ldr	r2, [r4, #0]
   1d92e:	fada f212 	qsub16	r2, sl, r2
   1d932:	faa3 f122 	shasx	r1, r3, r2
   1d936:	fae3 f322 	shsax	r3, r3, r2
   1d93a:	fb2c fb03 	smuad	fp, ip, r3
   1d93e:	fb4c f313 	smusdx	r3, ip, r3
   1d942:	4a2c      	ldr	r2, [pc, #176]	; (1d9f4 <arm_radix4_butterfly_q15+0x274>)
   1d944:	401a      	ands	r2, r3
   1d946:	9b01      	ldr	r3, [sp, #4]
   1d948:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
   1d94c:	601a      	str	r2, [r3, #0]
   1d94e:	443b      	add	r3, r7
   1d950:	9301      	str	r3, [sp, #4]
   1d952:	fb29 f201 	smuad	r2, r9, r1
   1d956:	fb49 f111 	smusdx	r1, r9, r1
   1d95a:	4b26      	ldr	r3, [pc, #152]	; (1d9f4 <arm_radix4_butterfly_q15+0x274>)
   1d95c:	46f2      	mov	sl, lr
   1d95e:	9d02      	ldr	r5, [sp, #8]
   1d960:	400b      	ands	r3, r1
   1d962:	44ae      	add	lr, r5
   1d964:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
   1d968:	6023      	str	r3, [r4, #0]
   1d96a:	443c      	add	r4, r7
   1d96c:	9b03      	ldr	r3, [sp, #12]
   1d96e:	4553      	cmp	r3, sl
   1d970:	d8bc      	bhi.n	1d8ec <arm_radix4_butterfly_q15+0x16c>
   1d972:	9a06      	ldr	r2, [sp, #24]
   1d974:	9b05      	ldr	r3, [sp, #20]
   1d976:	3204      	adds	r2, #4
   1d978:	3301      	adds	r3, #1
   1d97a:	9206      	str	r2, [sp, #24]
   1d97c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d97e:	9305      	str	r3, [sp, #20]
   1d980:	4293      	cmp	r3, r2
   1d982:	d996      	bls.n	1d8b2 <arm_radix4_butterfly_q15+0x132>
   1d984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1d988:	089b      	lsrs	r3, r3, #2
   1d98a:	9202      	str	r2, [sp, #8]
   1d98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d98e:	2b04      	cmp	r3, #4
   1d990:	930c      	str	r3, [sp, #48]	; 0x30
   1d992:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1d996:	9209      	str	r2, [sp, #36]	; 0x24
   1d998:	f63f af7e 	bhi.w	1d898 <arm_radix4_butterfly_q15+0x118>
   1d99c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1d99e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1d9a0:	3410      	adds	r4, #16
   1d9a2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1d9a6:	f854 7c08 	ldr.w	r7, [r4, #-8]
   1d9aa:	fa93 f117 	qadd16	r1, r3, r7
   1d9ae:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   1d9b2:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1d9b6:	fa92 f510 	qadd16	r5, r2, r0
   1d9ba:	fa91 f525 	shadd16	r5, r1, r5
   1d9be:	f844 5c10 	str.w	r5, [r4, #-16]
   1d9c2:	fa92 f510 	qadd16	r5, r2, r0
   1d9c6:	fad1 f125 	shsub16	r1, r1, r5
   1d9ca:	f844 1c0c 	str.w	r1, [r4, #-12]
   1d9ce:	fad3 f317 	qsub16	r3, r3, r7
   1d9d2:	fad2 f210 	qsub16	r2, r2, r0
   1d9d6:	fae3 f122 	shsax	r1, r3, r2
   1d9da:	f844 1c08 	str.w	r1, [r4, #-8]
   1d9de:	faa3 f322 	shasx	r3, r3, r2
   1d9e2:	3e01      	subs	r6, #1
   1d9e4:	f844 3c04 	str.w	r3, [r4, #-4]
   1d9e8:	f104 0410 	add.w	r4, r4, #16
   1d9ec:	d1d9      	bne.n	1d9a2 <arm_radix4_butterfly_q15+0x222>
   1d9ee:	b011      	add	sp, #68	; 0x44
   1d9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9f4:	ffff0000 	.word	0xffff0000

0001d9f8 <arm_radix4_butterfly_inverse_q15>:
   1d9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9fc:	469b      	mov	fp, r3
   1d9fe:	b091      	sub	sp, #68	; 0x44
   1da00:	088b      	lsrs	r3, r1, #2
   1da02:	4606      	mov	r6, r0
   1da04:	900e      	str	r0, [sp, #56]	; 0x38
   1da06:	2500      	movs	r5, #0
   1da08:	4618      	mov	r0, r3
   1da0a:	9103      	str	r1, [sp, #12]
   1da0c:	930f      	str	r3, [sp, #60]	; 0x3c
   1da0e:	4637      	mov	r7, r6
   1da10:	0081      	lsls	r1, r0, #2
   1da12:	4682      	mov	sl, r0
   1da14:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1da18:	4696      	mov	lr, r2
   1da1a:	1870      	adds	r0, r6, r1
   1da1c:	9207      	str	r2, [sp, #28]
   1da1e:	009b      	lsls	r3, r3, #2
   1da20:	462c      	mov	r4, r5
   1da22:	1846      	adds	r6, r0, r1
   1da24:	462a      	mov	r2, r5
   1da26:	9304      	str	r3, [sp, #16]
   1da28:	4431      	add	r1, r6
   1da2a:	9601      	str	r6, [sp, #4]
   1da2c:	f8cd b008 	str.w	fp, [sp, #8]
   1da30:	683b      	ldr	r3, [r7, #0]
   1da32:	fa93 fc22 	shadd16	ip, r3, r2
   1da36:	fa9c fc22 	shadd16	ip, ip, r2
   1da3a:	9b01      	ldr	r3, [sp, #4]
   1da3c:	681b      	ldr	r3, [r3, #0]
   1da3e:	fa93 f322 	shadd16	r3, r3, r2
   1da42:	fa93 f322 	shadd16	r3, r3, r2
   1da46:	fa9c f813 	qadd16	r8, ip, r3
   1da4a:	fadc fc13 	qsub16	ip, ip, r3
   1da4e:	6803      	ldr	r3, [r0, #0]
   1da50:	fa93 f322 	shadd16	r3, r3, r2
   1da54:	fa93 f922 	shadd16	r9, r3, r2
   1da58:	680b      	ldr	r3, [r1, #0]
   1da5a:	fa93 f322 	shadd16	r3, r3, r2
   1da5e:	fa93 f322 	shadd16	r3, r3, r2
   1da62:	fa99 f313 	qadd16	r3, r9, r3
   1da66:	fa98 f923 	shadd16	r9, r8, r3
   1da6a:	f847 9b04 	str.w	r9, [r7], #4
   1da6e:	fad8 f313 	qsub16	r3, r8, r3
   1da72:	f85e 9034 	ldr.w	r9, [lr, r4, lsl #3]
   1da76:	fb49 fb03 	smusd	fp, r9, r3
   1da7a:	fb29 f913 	smuadx	r9, r9, r3
   1da7e:	6803      	ldr	r3, [r0, #0]
   1da80:	fa93 f322 	shadd16	r3, r3, r2
   1da84:	fa93 f822 	shadd16	r8, r3, r2
   1da88:	4b78      	ldr	r3, [pc, #480]	; (1dc6c <arm_radix4_butterfly_inverse_q15+0x274>)
   1da8a:	ea09 0303 	and.w	r3, r9, r3
   1da8e:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
   1da92:	f840 3b04 	str.w	r3, [r0], #4
   1da96:	680b      	ldr	r3, [r1, #0]
   1da98:	fa93 f322 	shadd16	r3, r3, r2
   1da9c:	fa93 f322 	shadd16	r3, r3, r2
   1daa0:	fad8 f313 	qsub16	r3, r8, r3
   1daa4:	faec f913 	qsax	r9, ip, r3
   1daa8:	faac fc13 	qasx	ip, ip, r3
   1daac:	f85e 3024 	ldr.w	r3, [lr, r4, lsl #2]
   1dab0:	fb43 f80c 	smusd	r8, r3, ip
   1dab4:	fb23 fc1c 	smuadx	ip, r3, ip
   1dab8:	4b6c      	ldr	r3, [pc, #432]	; (1dc6c <arm_radix4_butterfly_inverse_q15+0x274>)
   1daba:	9e01      	ldr	r6, [sp, #4]
   1dabc:	ea0c 0303 	and.w	r3, ip, r3
   1dac0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
   1dac4:	f846 3b04 	str.w	r3, [r6], #4
   1dac8:	9601      	str	r6, [sp, #4]
   1daca:	462e      	mov	r6, r5
   1dacc:	f85e 3005 	ldr.w	r3, [lr, r5]
   1dad0:	fb43 fc09 	smusd	ip, r3, r9
   1dad4:	fb23 f919 	smuadx	r9, r3, r9
   1dad8:	4b64      	ldr	r3, [pc, #400]	; (1dc6c <arm_radix4_butterfly_inverse_q15+0x274>)
   1dada:	f1ba 0a01 	subs.w	sl, sl, #1
   1dade:	9d02      	ldr	r5, [sp, #8]
   1dae0:	ea09 0303 	and.w	r3, r9, r3
   1dae4:	442c      	add	r4, r5
   1dae6:	9d04      	ldr	r5, [sp, #16]
   1dae8:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
   1daec:	442e      	add	r6, r5
   1daee:	f841 3b04 	str.w	r3, [r1], #4
   1daf2:	4635      	mov	r5, r6
   1daf4:	d19c      	bne.n	1da30 <arm_radix4_butterfly_inverse_q15+0x38>
   1daf6:	f8dd b008 	ldr.w	fp, [sp, #8]
   1dafa:	ea4f 038b 	mov.w	r3, fp, lsl #2
   1dafe:	9309      	str	r3, [sp, #36]	; 0x24
   1db00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1db02:	2b04      	cmp	r3, #4
   1db04:	f240 8086 	bls.w	1dc14 <arm_radix4_butterfly_inverse_q15+0x21c>
   1db08:	f8cd a010 	str.w	sl, [sp, #16]
   1db0c:	930c      	str	r3, [sp, #48]	; 0x30
   1db0e:	9302      	str	r3, [sp, #8]
   1db10:	9a02      	ldr	r2, [sp, #8]
   1db12:	2100      	movs	r1, #0
   1db14:	0893      	lsrs	r3, r2, #2
   1db16:	9105      	str	r1, [sp, #20]
   1db18:	0097      	lsls	r7, r2, #2
   1db1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1db1c:	930d      	str	r3, [sp, #52]	; 0x34
   1db1e:	9206      	str	r2, [sp, #24]
   1db20:	1e5a      	subs	r2, r3, #1
   1db22:	009b      	lsls	r3, r3, #2
   1db24:	9108      	str	r1, [sp, #32]
   1db26:	920a      	str	r2, [sp, #40]	; 0x28
   1db28:	930b      	str	r3, [sp, #44]	; 0x2c
   1db2a:	9907      	ldr	r1, [sp, #28]
   1db2c:	9a08      	ldr	r2, [sp, #32]
   1db2e:	460d      	mov	r5, r1
   1db30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1db32:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1db36:	4611      	mov	r1, r2
   1db38:	f855 c022 	ldr.w	ip, [r5, r2, lsl #2]
   1db3c:	9a07      	ldr	r2, [sp, #28]
   1db3e:	9e06      	ldr	r6, [sp, #24]
   1db40:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
   1db44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1db46:	1930      	adds	r0, r6, r4
   1db48:	f852 8031 	ldr.w	r8, [r2, r1, lsl #3]
   1db4c:	18cb      	adds	r3, r1, r3
   1db4e:	9a05      	ldr	r2, [sp, #20]
   1db50:	1825      	adds	r5, r4, r0
   1db52:	9308      	str	r3, [sp, #32]
   1db54:	9b03      	ldr	r3, [sp, #12]
   1db56:	442c      	add	r4, r5
   1db58:	4293      	cmp	r3, r2
   1db5a:	d946      	bls.n	1dbea <arm_radix4_butterfly_inverse_q15+0x1f2>
   1db5c:	9b02      	ldr	r3, [sp, #8]
   1db5e:	9501      	str	r5, [sp, #4]
   1db60:	eb03 0e02 	add.w	lr, r3, r2
   1db64:	9a01      	ldr	r2, [sp, #4]
   1db66:	6833      	ldr	r3, [r6, #0]
   1db68:	6812      	ldr	r2, [r2, #0]
   1db6a:	fa93 fa12 	qadd16	sl, r3, r2
   1db6e:	fad3 f312 	qsub16	r3, r3, r2
   1db72:	6801      	ldr	r1, [r0, #0]
   1db74:	6822      	ldr	r2, [r4, #0]
   1db76:	fa91 f112 	qadd16	r1, r1, r2
   1db7a:	fa9a f221 	shadd16	r2, sl, r1
   1db7e:	9d04      	ldr	r5, [sp, #16]
   1db80:	fa92 f225 	shadd16	r2, r2, r5
   1db84:	6032      	str	r2, [r6, #0]
   1db86:	443e      	add	r6, r7
   1db88:	fada f121 	shsub16	r1, sl, r1
   1db8c:	fb48 fb01 	smusd	fp, r8, r1
   1db90:	fb28 f211 	smuadx	r2, r8, r1
   1db94:	4935      	ldr	r1, [pc, #212]	; (1dc6c <arm_radix4_butterfly_inverse_q15+0x274>)
   1db96:	f8d0 a000 	ldr.w	sl, [r0]
   1db9a:	4011      	ands	r1, r2
   1db9c:	ea41 411b 	orr.w	r1, r1, fp, lsr #16
   1dba0:	6001      	str	r1, [r0, #0]
   1dba2:	4438      	add	r0, r7
   1dba4:	6822      	ldr	r2, [r4, #0]
   1dba6:	fada f212 	qsub16	r2, sl, r2
   1dbaa:	fae3 f122 	shsax	r1, r3, r2
   1dbae:	faa3 f322 	shasx	r3, r3, r2
   1dbb2:	fb4c fb03 	smusd	fp, ip, r3
   1dbb6:	fb2c f313 	smuadx	r3, ip, r3
   1dbba:	4a2c      	ldr	r2, [pc, #176]	; (1dc6c <arm_radix4_butterfly_inverse_q15+0x274>)
   1dbbc:	401a      	ands	r2, r3
   1dbbe:	9b01      	ldr	r3, [sp, #4]
   1dbc0:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
   1dbc4:	601a      	str	r2, [r3, #0]
   1dbc6:	443b      	add	r3, r7
   1dbc8:	9301      	str	r3, [sp, #4]
   1dbca:	fb49 f201 	smusd	r2, r9, r1
   1dbce:	fb29 f111 	smuadx	r1, r9, r1
   1dbd2:	4b26      	ldr	r3, [pc, #152]	; (1dc6c <arm_radix4_butterfly_inverse_q15+0x274>)
   1dbd4:	46f2      	mov	sl, lr
   1dbd6:	9d02      	ldr	r5, [sp, #8]
   1dbd8:	400b      	ands	r3, r1
   1dbda:	44ae      	add	lr, r5
   1dbdc:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
   1dbe0:	6023      	str	r3, [r4, #0]
   1dbe2:	443c      	add	r4, r7
   1dbe4:	9b03      	ldr	r3, [sp, #12]
   1dbe6:	4553      	cmp	r3, sl
   1dbe8:	d8bc      	bhi.n	1db64 <arm_radix4_butterfly_inverse_q15+0x16c>
   1dbea:	9a06      	ldr	r2, [sp, #24]
   1dbec:	9b05      	ldr	r3, [sp, #20]
   1dbee:	3204      	adds	r2, #4
   1dbf0:	3301      	adds	r3, #1
   1dbf2:	9206      	str	r2, [sp, #24]
   1dbf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1dbf6:	9305      	str	r3, [sp, #20]
   1dbf8:	4293      	cmp	r3, r2
   1dbfa:	d996      	bls.n	1db2a <arm_radix4_butterfly_inverse_q15+0x132>
   1dbfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1dbfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1dc00:	089b      	lsrs	r3, r3, #2
   1dc02:	9202      	str	r2, [sp, #8]
   1dc04:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dc06:	2b04      	cmp	r3, #4
   1dc08:	930c      	str	r3, [sp, #48]	; 0x30
   1dc0a:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1dc0e:	9209      	str	r2, [sp, #36]	; 0x24
   1dc10:	f63f af7e 	bhi.w	1db10 <arm_radix4_butterfly_inverse_q15+0x118>
   1dc14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1dc16:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1dc18:	3410      	adds	r4, #16
   1dc1a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1dc1e:	f854 7c08 	ldr.w	r7, [r4, #-8]
   1dc22:	fa93 f117 	qadd16	r1, r3, r7
   1dc26:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   1dc2a:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1dc2e:	fa92 f510 	qadd16	r5, r2, r0
   1dc32:	fa91 f525 	shadd16	r5, r1, r5
   1dc36:	f844 5c10 	str.w	r5, [r4, #-16]
   1dc3a:	fa92 f510 	qadd16	r5, r2, r0
   1dc3e:	fad1 f125 	shsub16	r1, r1, r5
   1dc42:	f844 1c0c 	str.w	r1, [r4, #-12]
   1dc46:	fad3 f317 	qsub16	r3, r3, r7
   1dc4a:	fad2 f210 	qsub16	r2, r2, r0
   1dc4e:	faa3 f122 	shasx	r1, r3, r2
   1dc52:	f844 1c08 	str.w	r1, [r4, #-8]
   1dc56:	fae3 f322 	shsax	r3, r3, r2
   1dc5a:	3e01      	subs	r6, #1
   1dc5c:	f844 3c04 	str.w	r3, [r4, #-4]
   1dc60:	f104 0410 	add.w	r4, r4, #16
   1dc64:	d1d9      	bne.n	1dc1a <arm_radix4_butterfly_inverse_q15+0x222>
   1dc66:	b011      	add	sp, #68	; 0x44
   1dc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc6c:	ffff0000 	.word	0xffff0000

0001dc70 <arm_cfft_radix4_q15>:
   1dc70:	b570      	push	{r4, r5, r6, lr}
   1dc72:	7883      	ldrb	r3, [r0, #2]
   1dc74:	4604      	mov	r4, r0
   1dc76:	460d      	mov	r5, r1
   1dc78:	2b01      	cmp	r3, #1
   1dc7a:	6862      	ldr	r2, [r4, #4]
   1dc7c:	8983      	ldrh	r3, [r0, #12]
   1dc7e:	4608      	mov	r0, r1
   1dc80:	8821      	ldrh	r1, [r4, #0]
   1dc82:	d005      	beq.n	1dc90 <arm_cfft_radix4_q15+0x20>
   1dc84:	f7ff fd7c 	bl	1d780 <arm_radix4_butterfly_q15>
   1dc88:	78e3      	ldrb	r3, [r4, #3]
   1dc8a:	2b01      	cmp	r3, #1
   1dc8c:	d005      	beq.n	1dc9a <arm_cfft_radix4_q15+0x2a>
   1dc8e:	bd70      	pop	{r4, r5, r6, pc}
   1dc90:	f7ff feb2 	bl	1d9f8 <arm_radix4_butterfly_inverse_q15>
   1dc94:	78e3      	ldrb	r3, [r4, #3]
   1dc96:	2b01      	cmp	r3, #1
   1dc98:	d1f9      	bne.n	1dc8e <arm_cfft_radix4_q15+0x1e>
   1dc9a:	4628      	mov	r0, r5
   1dc9c:	68a3      	ldr	r3, [r4, #8]
   1dc9e:	89e2      	ldrh	r2, [r4, #14]
   1dca0:	8821      	ldrh	r1, [r4, #0]
   1dca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dca6:	f000 b9f1 	b.w	1e08c <arm_bitreversal_q15>
   1dcaa:	bf00      	nop

0001dcac <arm_cfft_radix4_init_q15>:
   1dcac:	b410      	push	{r4}
   1dcae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   1dcb2:	4604      	mov	r4, r0
   1dcb4:	4821      	ldr	r0, [pc, #132]	; (1dd3c <arm_cfft_radix4_init_q15+0x90>)
   1dcb6:	70a2      	strb	r2, [r4, #2]
   1dcb8:	70e3      	strb	r3, [r4, #3]
   1dcba:	8021      	strh	r1, [r4, #0]
   1dcbc:	6060      	str	r0, [r4, #4]
   1dcbe:	d033      	beq.n	1dd28 <arm_cfft_radix4_init_q15+0x7c>
   1dcc0:	d80b      	bhi.n	1dcda <arm_cfft_radix4_init_q15+0x2e>
   1dcc2:	2910      	cmp	r1, #16
   1dcc4:	d026      	beq.n	1dd14 <arm_cfft_radix4_init_q15+0x68>
   1dcc6:	2940      	cmp	r1, #64	; 0x40
   1dcc8:	d116      	bne.n	1dcf8 <arm_cfft_radix4_init_q15+0x4c>
   1dcca:	4b1d      	ldr	r3, [pc, #116]	; (1dd40 <arm_cfft_radix4_init_q15+0x94>)
   1dccc:	2000      	movs	r0, #0
   1dcce:	81a1      	strh	r1, [r4, #12]
   1dcd0:	81e1      	strh	r1, [r4, #14]
   1dcd2:	60a3      	str	r3, [r4, #8]
   1dcd4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dcd8:	4770      	bx	lr
   1dcda:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1dcde:	d010      	beq.n	1dd02 <arm_cfft_radix4_init_q15+0x56>
   1dce0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
   1dce4:	d108      	bne.n	1dcf8 <arm_cfft_radix4_init_q15+0x4c>
   1dce6:	2301      	movs	r3, #1
   1dce8:	4a16      	ldr	r2, [pc, #88]	; (1dd44 <arm_cfft_radix4_init_q15+0x98>)
   1dcea:	2000      	movs	r0, #0
   1dcec:	81a3      	strh	r3, [r4, #12]
   1dcee:	81e3      	strh	r3, [r4, #14]
   1dcf0:	60a2      	str	r2, [r4, #8]
   1dcf2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dcf6:	4770      	bx	lr
   1dcf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dcfc:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dd00:	4770      	bx	lr
   1dd02:	2304      	movs	r3, #4
   1dd04:	4a10      	ldr	r2, [pc, #64]	; (1dd48 <arm_cfft_radix4_init_q15+0x9c>)
   1dd06:	2000      	movs	r0, #0
   1dd08:	81a3      	strh	r3, [r4, #12]
   1dd0a:	81e3      	strh	r3, [r4, #14]
   1dd0c:	60a2      	str	r2, [r4, #8]
   1dd0e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dd12:	4770      	bx	lr
   1dd14:	f44f 7380 	mov.w	r3, #256	; 0x100
   1dd18:	4a0c      	ldr	r2, [pc, #48]	; (1dd4c <arm_cfft_radix4_init_q15+0xa0>)
   1dd1a:	2000      	movs	r0, #0
   1dd1c:	81a3      	strh	r3, [r4, #12]
   1dd1e:	81e3      	strh	r3, [r4, #14]
   1dd20:	60a2      	str	r2, [r4, #8]
   1dd22:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dd26:	4770      	bx	lr
   1dd28:	2310      	movs	r3, #16
   1dd2a:	4a09      	ldr	r2, [pc, #36]	; (1dd50 <arm_cfft_radix4_init_q15+0xa4>)
   1dd2c:	2000      	movs	r0, #0
   1dd2e:	81a3      	strh	r3, [r4, #12]
   1dd30:	81e3      	strh	r3, [r4, #14]
   1dd32:	60a2      	str	r2, [r4, #8]
   1dd34:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dd38:	4770      	bx	lr
   1dd3a:	bf00      	nop
   1dd3c:	200057d8 	.word	0x200057d8
   1dd40:	20004446 	.word	0x20004446
   1dd44:	200043c8 	.word	0x200043c8
   1dd48:	200043ce 	.word	0x200043ce
   1dd4c:	200045c6 	.word	0x200045c6
   1dd50:	200043e6 	.word	0x200043e6

0001dd54 <arm_fir_init_q15>:
   1dd54:	b570      	push	{r4, r5, r6, lr}
   1dd56:	f011 0501 	ands.w	r5, r1, #1
   1dd5a:	d10d      	bne.n	1dd78 <arm_fir_init_q15+0x24>
   1dd5c:	461e      	mov	r6, r3
   1dd5e:	9b04      	ldr	r3, [sp, #16]
   1dd60:	4604      	mov	r4, r0
   1dd62:	8001      	strh	r1, [r0, #0]
   1dd64:	18cb      	adds	r3, r1, r3
   1dd66:	6082      	str	r2, [r0, #8]
   1dd68:	4629      	mov	r1, r5
   1dd6a:	4630      	mov	r0, r6
   1dd6c:	005a      	lsls	r2, r3, #1
   1dd6e:	f004 fac7 	bl	22300 <memset>
   1dd72:	6066      	str	r6, [r4, #4]
   1dd74:	4628      	mov	r0, r5
   1dd76:	bd70      	pop	{r4, r5, r6, pc}
   1dd78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dd7c:	bd70      	pop	{r4, r5, r6, pc}
   1dd7e:	bf00      	nop

0001dd80 <arm_fir_fast_q15>:
   1dd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd84:	4605      	mov	r5, r0
   1dd86:	b093      	sub	sp, #76	; 0x4c
   1dd88:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   1dd8c:	686c      	ldr	r4, [r5, #4]
   1dd8e:	9010      	str	r0, [sp, #64]	; 0x40
   1dd90:	8800      	ldrh	r0, [r0, #0]
   1dd92:	4626      	mov	r6, r4
   1dd94:	940a      	str	r4, [sp, #40]	; 0x28
   1dd96:	4484      	add	ip, r0
   1dd98:	68ac      	ldr	r4, [r5, #8]
   1dd9a:	9311      	str	r3, [sp, #68]	; 0x44
   1dd9c:	089b      	lsrs	r3, r3, #2
   1dd9e:	4627      	mov	r7, r4
   1dda0:	9406      	str	r4, [sp, #24]
   1dda2:	eb06 044c 	add.w	r4, r6, ip, lsl #1
   1dda6:	910c      	str	r1, [sp, #48]	; 0x30
   1dda8:	900e      	str	r0, [sp, #56]	; 0x38
   1ddaa:	920d      	str	r2, [sp, #52]	; 0x34
   1ddac:	940b      	str	r4, [sp, #44]	; 0x2c
   1ddae:	930f      	str	r3, [sp, #60]	; 0x3c
   1ddb0:	f000 80c2 	beq.w	1df38 <arm_fir_fast_q15+0x1b8>
   1ddb4:	4625      	mov	r5, r4
   1ddb6:	4604      	mov	r4, r0
   1ddb8:	0880      	lsrs	r0, r0, #2
   1ddba:	3208      	adds	r2, #8
   1ddbc:	f004 0403 	and.w	r4, r4, #3
   1ddc0:	f101 0a08 	add.w	sl, r1, #8
   1ddc4:	00c1      	lsls	r1, r0, #3
   1ddc6:	9203      	str	r2, [sp, #12]
   1ddc8:	9407      	str	r4, [sp, #28]
   1ddca:	462c      	mov	r4, r5
   1ddcc:	f106 0208 	add.w	r2, r6, #8
   1ddd0:	9302      	str	r3, [sp, #8]
   1ddd2:	3408      	adds	r4, #8
   1ddd4:	187b      	adds	r3, r7, r1
   1ddd6:	9005      	str	r0, [sp, #20]
   1ddd8:	9400      	str	r4, [sp, #0]
   1ddda:	9109      	str	r1, [sp, #36]	; 0x24
   1dddc:	9201      	str	r2, [sp, #4]
   1ddde:	9308      	str	r3, [sp, #32]
   1dde0:	f93a 3c08 	ldrsh.w	r3, [sl, #-8]
   1dde4:	9900      	ldr	r1, [sp, #0]
   1dde6:	9c01      	ldr	r4, [sp, #4]
   1dde8:	f821 3c08 	strh.w	r3, [r1, #-8]
   1ddec:	f93a 3c06 	ldrsh.w	r3, [sl, #-6]
   1ddf0:	46a6      	mov	lr, r4
   1ddf2:	f821 3c06 	strh.w	r3, [r1, #-6]
   1ddf6:	f93a 3c04 	ldrsh.w	r3, [sl, #-4]
   1ddfa:	f821 3c04 	strh.w	r3, [r1, #-4]
   1ddfe:	f93a 3c02 	ldrsh.w	r3, [sl, #-2]
   1de02:	f821 3c02 	strh.w	r3, [r1, #-2]
   1de06:	9905      	ldr	r1, [sp, #20]
   1de08:	f854 5c08 	ldr.w	r5, [r4, #-8]
   1de0c:	f854 4c04 	ldr.w	r4, [r4, #-4]
   1de10:	2900      	cmp	r1, #0
   1de12:	f000 8113 	beq.w	1e03c <arm_fir_fast_q15+0x2bc>
   1de16:	f10e 0308 	add.w	r3, lr, #8
   1de1a:	9806      	ldr	r0, [sp, #24]
   1de1c:	4688      	mov	r8, r1
   1de1e:	b2a1      	uxth	r1, r4
   1de20:	461a      	mov	r2, r3
   1de22:	9304      	str	r3, [sp, #16]
   1de24:	2300      	movs	r3, #0
   1de26:	f100 0c08 	add.w	ip, r0, #8
   1de2a:	4696      	mov	lr, r2
   1de2c:	460a      	mov	r2, r1
   1de2e:	461e      	mov	r6, r3
   1de30:	4618      	mov	r0, r3
   1de32:	461f      	mov	r7, r3
   1de34:	46a9      	mov	r9, r5
   1de36:	f85c 1c08 	ldr.w	r1, [ip, #-8]
   1de3a:	fb25 7701 	smlad	r7, r5, r1, r7
   1de3e:	fb24 6601 	smlad	r6, r4, r1, r6
   1de42:	f8df b244 	ldr.w	fp, [pc, #580]	; 1e088 <arm_fir_fast_q15+0x308>
   1de46:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   1de4a:	ea09 0b0b 	and.w	fp, r9, fp
   1de4e:	ea42 020b 	orr.w	r2, r2, fp
   1de52:	fb22 0011 	smladx	r0, r2, r1, r0
   1de56:	4a8c      	ldr	r2, [pc, #560]	; (1e088 <arm_fir_fast_q15+0x308>)
   1de58:	fa1f f985 	uxth.w	r9, r5
   1de5c:	4022      	ands	r2, r4
   1de5e:	ea49 0202 	orr.w	r2, r9, r2
   1de62:	fb22 3111 	smladx	r1, r2, r1, r3
   1de66:	f85c 3c04 	ldr.w	r3, [ip, #-4]
   1de6a:	fb24 7703 	smlad	r7, r4, r3, r7
   1de6e:	f85e 4c04 	ldr.w	r4, [lr, #-4]
   1de72:	fb25 6603 	smlad	r6, r5, r3, r6
   1de76:	fb22 0013 	smladx	r0, r2, r3, r0
   1de7a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 1e088 <arm_fir_fast_q15+0x308>
   1de7e:	b2a2      	uxth	r2, r4
   1de80:	ea05 0909 	and.w	r9, r5, r9
   1de84:	ea42 0909 	orr.w	r9, r2, r9
   1de88:	fb29 1313 	smladx	r3, r9, r3, r1
   1de8c:	f1b8 0801 	subs.w	r8, r8, #1
   1de90:	f10c 0c08 	add.w	ip, ip, #8
   1de94:	f10e 0e08 	add.w	lr, lr, #8
   1de98:	d1cc      	bne.n	1de34 <arm_fir_fast_q15+0xb4>
   1de9a:	9a01      	ldr	r2, [sp, #4]
   1de9c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1de9e:	440a      	add	r2, r1
   1dea0:	4696      	mov	lr, r2
   1dea2:	9a08      	ldr	r2, [sp, #32]
   1dea4:	9907      	ldr	r1, [sp, #28]
   1dea6:	b199      	cbz	r1, 1ded0 <arm_fir_fast_q15+0x150>
   1dea8:	6811      	ldr	r1, [r2, #0]
   1deaa:	fb25 7701 	smlad	r7, r5, r1, r7
   1deae:	fb24 6601 	smlad	r6, r4, r1, r6
   1deb2:	4a75      	ldr	r2, [pc, #468]	; (1e088 <arm_fir_fast_q15+0x308>)
   1deb4:	fa1f fc84 	uxth.w	ip, r4
   1deb8:	402a      	ands	r2, r5
   1deba:	ea4c 0202 	orr.w	r2, ip, r2
   1debe:	fb22 0011 	smladx	r0, r2, r1, r0
   1dec2:	4a71      	ldr	r2, [pc, #452]	; (1e088 <arm_fir_fast_q15+0x308>)
   1dec4:	f8be 5000 	ldrh.w	r5, [lr]
   1dec8:	4022      	ands	r2, r4
   1deca:	432a      	orrs	r2, r5
   1decc:	fb22 3311 	smladx	r3, r2, r1, r3
   1ded0:	9a00      	ldr	r2, [sp, #0]
   1ded2:	13f6      	asrs	r6, r6, #15
   1ded4:	f306 060f 	ssat	r6, #16, r6
   1ded8:	3208      	adds	r2, #8
   1deda:	b2b6      	uxth	r6, r6
   1dedc:	13db      	asrs	r3, r3, #15
   1dede:	f10a 0a08 	add.w	sl, sl, #8
   1dee2:	9200      	str	r2, [sp, #0]
   1dee4:	13ff      	asrs	r7, r7, #15
   1dee6:	9a04      	ldr	r2, [sp, #16]
   1dee8:	13c0      	asrs	r0, r0, #15
   1deea:	f303 030f 	ssat	r3, #16, r3
   1deee:	9201      	str	r2, [sp, #4]
   1def0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   1def4:	9a03      	ldr	r2, [sp, #12]
   1def6:	f307 070f 	ssat	r7, #16, r7
   1defa:	f102 0308 	add.w	r3, r2, #8
   1defe:	b2bf      	uxth	r7, r7
   1df00:	f300 000f 	ssat	r0, #16, r0
   1df04:	9303      	str	r3, [sp, #12]
   1df06:	ea47 4000 	orr.w	r0, r7, r0, lsl #16
   1df0a:	9b02      	ldr	r3, [sp, #8]
   1df0c:	f842 0c08 	str.w	r0, [r2, #-8]
   1df10:	3b01      	subs	r3, #1
   1df12:	f842 6c04 	str.w	r6, [r2, #-4]
   1df16:	9302      	str	r3, [sp, #8]
   1df18:	f47f af62 	bne.w	1dde0 <arm_fir_fast_q15+0x60>
   1df1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1df1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1df20:	00db      	lsls	r3, r3, #3
   1df22:	441a      	add	r2, r3
   1df24:	920b      	str	r2, [sp, #44]	; 0x2c
   1df26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1df28:	441a      	add	r2, r3
   1df2a:	920c      	str	r2, [sp, #48]	; 0x30
   1df2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1df2e:	441a      	add	r2, r3
   1df30:	920d      	str	r2, [sp, #52]	; 0x34
   1df32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1df34:	441a      	add	r2, r3
   1df36:	920a      	str	r2, [sp, #40]	; 0x28
   1df38:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1df3a:	f013 0a03 	ands.w	sl, r3, #3
   1df3e:	d03c      	beq.n	1dfba <arm_fir_fast_q15+0x23a>
   1df40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1df42:	4657      	mov	r7, sl
   1df44:	f8cd a000 	str.w	sl, [sp]
   1df48:	f1a3 0c02 	sub.w	ip, r3, #2
   1df4c:	9b06      	ldr	r3, [sp, #24]
   1df4e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   1df52:	f103 0804 	add.w	r8, r3, #4
   1df56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1df58:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   1df5c:	ea4f 0953 	mov.w	r9, r3, lsr #1
   1df60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1df62:	f103 0e04 	add.w	lr, r3, #4
   1df66:	f93a 2b02 	ldrsh.w	r2, [sl], #2
   1df6a:	4644      	mov	r4, r8
   1df6c:	4670      	mov	r0, lr
   1df6e:	464d      	mov	r5, r9
   1df70:	2300      	movs	r3, #0
   1df72:	f82c 2f02 	strh.w	r2, [ip, #2]!
   1df76:	f934 2c04 	ldrsh.w	r2, [r4, #-4]
   1df7a:	3d01      	subs	r5, #1
   1df7c:	f930 6c04 	ldrsh.w	r6, [r0, #-4]
   1df80:	f104 0404 	add.w	r4, r4, #4
   1df84:	f930 1c02 	ldrsh.w	r1, [r0, #-2]
   1df88:	f100 0004 	add.w	r0, r0, #4
   1df8c:	fb06 3302 	mla	r3, r6, r2, r3
   1df90:	f934 2c06 	ldrsh.w	r2, [r4, #-6]
   1df94:	fb01 3302 	mla	r3, r1, r2, r3
   1df98:	d1ed      	bne.n	1df76 <arm_fir_fast_q15+0x1f6>
   1df9a:	3f01      	subs	r7, #1
   1df9c:	ea4f 33e3 	mov.w	r3, r3, asr #15
   1dfa0:	f10e 0e02 	add.w	lr, lr, #2
   1dfa4:	f303 030f 	ssat	r3, #16, r3
   1dfa8:	f82b 3b02 	strh.w	r3, [fp], #2
   1dfac:	d1db      	bne.n	1df66 <arm_fir_fast_q15+0x1e6>
   1dfae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dfb0:	f8dd a000 	ldr.w	sl, [sp]
   1dfb4:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   1dfb8:	930a      	str	r3, [sp, #40]	; 0x28
   1dfba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1dfbc:	1e5f      	subs	r7, r3, #1
   1dfbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1dfc0:	08bd      	lsrs	r5, r7, #2
   1dfc2:	685e      	ldr	r6, [r3, #4]
   1dfc4:	d02c      	beq.n	1e020 <arm_fir_fast_q15+0x2a0>
   1dfc6:	980a      	ldr	r0, [sp, #40]	; 0x28
   1dfc8:	f106 0310 	add.w	r3, r6, #16
   1dfcc:	4602      	mov	r2, r0
   1dfce:	3210      	adds	r2, #16
   1dfd0:	4296      	cmp	r6, r2
   1dfd2:	bf38      	it	cc
   1dfd4:	4298      	cmpcc	r0, r3
   1dfd6:	bf2c      	ite	cs
   1dfd8:	2301      	movcs	r3, #1
   1dfda:	2300      	movcc	r3, #0
   1dfdc:	2d02      	cmp	r5, #2
   1dfde:	bf94      	ite	ls
   1dfe0:	2300      	movls	r3, #0
   1dfe2:	f003 0301 	andhi.w	r3, r3, #1
   1dfe6:	b393      	cbz	r3, 1e04e <arm_fir_fast_q15+0x2ce>
   1dfe8:	4603      	mov	r3, r0
   1dfea:	4333      	orrs	r3, r6
   1dfec:	079b      	lsls	r3, r3, #30
   1dfee:	d12e      	bne.n	1e04e <arm_fir_fast_q15+0x2ce>
   1dff0:	f100 0208 	add.w	r2, r0, #8
   1dff4:	f106 0308 	add.w	r3, r6, #8
   1dff8:	2100      	movs	r1, #0
   1dffa:	3101      	adds	r1, #1
   1dffc:	f852 4c08 	ldr.w	r4, [r2, #-8]
   1e000:	f852 0c04 	ldr.w	r0, [r2, #-4]
   1e004:	3308      	adds	r3, #8
   1e006:	428d      	cmp	r5, r1
   1e008:	f843 4c10 	str.w	r4, [r3, #-16]
   1e00c:	f843 0c0c 	str.w	r0, [r3, #-12]
   1e010:	f102 0208 	add.w	r2, r2, #8
   1e014:	d1f1      	bne.n	1dffa <arm_fir_fast_q15+0x27a>
   1e016:	00ed      	lsls	r5, r5, #3
   1e018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e01a:	442e      	add	r6, r5
   1e01c:	442b      	add	r3, r5
   1e01e:	930a      	str	r3, [sp, #40]	; 0x28
   1e020:	f017 0303 	ands.w	r3, r7, #3
   1e024:	d007      	beq.n	1e036 <arm_fir_fast_q15+0x2b6>
   1e026:	3e02      	subs	r6, #2
   1e028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e02a:	f932 1b02 	ldrsh.w	r1, [r2], #2
   1e02e:	3b01      	subs	r3, #1
   1e030:	f826 1f02 	strh.w	r1, [r6, #2]!
   1e034:	d1f9      	bne.n	1e02a <arm_fir_fast_q15+0x2aa>
   1e036:	b013      	add	sp, #76	; 0x4c
   1e038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e03c:	460f      	mov	r7, r1
   1e03e:	460b      	mov	r3, r1
   1e040:	460e      	mov	r6, r1
   1e042:	4608      	mov	r0, r1
   1e044:	f10e 0108 	add.w	r1, lr, #8
   1e048:	9a06      	ldr	r2, [sp, #24]
   1e04a:	9104      	str	r1, [sp, #16]
   1e04c:	e72a      	b.n	1dea4 <arm_fir_fast_q15+0x124>
   1e04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e050:	f106 0208 	add.w	r2, r6, #8
   1e054:	4629      	mov	r1, r5
   1e056:	3308      	adds	r3, #8
   1e058:	f933 0c08 	ldrsh.w	r0, [r3, #-8]
   1e05c:	3901      	subs	r1, #1
   1e05e:	f103 0308 	add.w	r3, r3, #8
   1e062:	f102 0208 	add.w	r2, r2, #8
   1e066:	f822 0c10 	strh.w	r0, [r2, #-16]
   1e06a:	f933 0c0e 	ldrsh.w	r0, [r3, #-14]
   1e06e:	f822 0c0e 	strh.w	r0, [r2, #-14]
   1e072:	f933 0c0c 	ldrsh.w	r0, [r3, #-12]
   1e076:	f822 0c0c 	strh.w	r0, [r2, #-12]
   1e07a:	f933 0c0a 	ldrsh.w	r0, [r3, #-10]
   1e07e:	f822 0c0a 	strh.w	r0, [r2, #-10]
   1e082:	d1e9      	bne.n	1e058 <arm_fir_fast_q15+0x2d8>
   1e084:	e7c7      	b.n	1e016 <arm_fir_fast_q15+0x296>
   1e086:	bf00      	nop
   1e088:	ffff0000 	.word	0xffff0000

0001e08c <arm_bitreversal_q15>:
   1e08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e090:	0849      	lsrs	r1, r1, #1
   1e092:	2600      	movs	r6, #0
   1e094:	ea4f 0a42 	mov.w	sl, r2, lsl #1
   1e098:	4605      	mov	r5, r0
   1e09a:	f101 0c01 	add.w	ip, r1, #1
   1e09e:	f1a1 0e02 	sub.w	lr, r1, #2
   1e0a2:	eb00 0781 	add.w	r7, r0, r1, lsl #2
   1e0a6:	4634      	mov	r4, r6
   1e0a8:	e011      	b.n	1e0ce <arm_bitreversal_q15+0x42>
   1e0aa:	42b4      	cmp	r4, r6
   1e0ac:	d90d      	bls.n	1e0ca <arm_bitreversal_q15+0x3e>
   1e0ae:	f8d5 9008 	ldr.w	r9, [r5, #8]
   1e0b2:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
   1e0b6:	60aa      	str	r2, [r5, #8]
   1e0b8:	f840 9024 	str.w	r9, [r0, r4, lsl #2]
   1e0bc:	f8d7 900c 	ldr.w	r9, [r7, #12]
   1e0c0:	f850 2028 	ldr.w	r2, [r0, r8, lsl #2]
   1e0c4:	60fa      	str	r2, [r7, #12]
   1e0c6:	f840 9028 	str.w	r9, [r0, r8, lsl #2]
   1e0ca:	3508      	adds	r5, #8
   1e0cc:	3708      	adds	r7, #8
   1e0ce:	440c      	add	r4, r1
   1e0d0:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1e0d4:	3602      	adds	r6, #2
   1e0d6:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
   1e0da:	4576      	cmp	r6, lr
   1e0dc:	606a      	str	r2, [r5, #4]
   1e0de:	f840 8024 	str.w	r8, [r0, r4, lsl #2]
   1e0e2:	881c      	ldrh	r4, [r3, #0]
   1e0e4:	4453      	add	r3, sl
   1e0e6:	eb0c 0804 	add.w	r8, ip, r4
   1e0ea:	d9de      	bls.n	1e0aa <arm_bitreversal_q15+0x1e>
   1e0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e0f0 <logf>:
   1e0f0:	ee10 3a10 	vmov	r3, s0
   1e0f4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   1e0f8:	ee10 2a10 	vmov	r2, s0
   1e0fc:	d038      	beq.n	1e170 <logf+0x80>
   1e0fe:	f5a3 0100 	sub.w	r1, r3, #8388608	; 0x800000
   1e102:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
   1e106:	d236      	bcs.n	1e176 <logf+0x86>
   1e108:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
   1e10c:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
   1e110:	4926      	ldr	r1, [pc, #152]	; (1e1ac <logf+0xbc>)
   1e112:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
   1e116:	f3c3 40c3 	ubfx	r0, r3, #19, #4
   1e11a:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   1e11e:	ed91 4b40 	vldr	d4, [r1, #256]	; 0x100
   1e122:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
   1e126:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
   1e12a:	ed91 6b42 	vldr	d6, [r1, #264]	; 0x108
   1e12e:	0dd9      	lsrs	r1, r3, #23
   1e130:	05c9      	lsls	r1, r1, #23
   1e132:	ed90 2b00 	vldr	d2, [r0]
   1e136:	1a52      	subs	r2, r2, r1
   1e138:	ee03 2a90 	vmov	s7, r2
   1e13c:	ed90 1b02 	vldr	d1, [r0, #8]
   1e140:	15db      	asrs	r3, r3, #23
   1e142:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
   1e146:	eea2 0b03 	vfma.f64	d0, d2, d3
   1e14a:	ee03 3a90 	vmov	s7, r3
   1e14e:	ee20 2b00 	vmul.f64	d2, d0, d0
   1e152:	eea5 7b00 	vfma.f64	d7, d5, d0
   1e156:	eeb8 3be3 	vcvt.f64.s32	d3, s7
   1e15a:	eea6 7b02 	vfma.f64	d7, d6, d2
   1e15e:	eea3 1b04 	vfma.f64	d1, d3, d4
   1e162:	ee30 0b01 	vadd.f64	d0, d0, d1
   1e166:	eea2 0b07 	vfma.f64	d0, d2, d7
   1e16a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   1e16e:	4770      	bx	lr
   1e170:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 1e1b0 <logf+0xc0>
   1e174:	4770      	bx	lr
   1e176:	0059      	lsls	r1, r3, #1
   1e178:	d014      	beq.n	1e1a4 <logf+0xb4>
   1e17a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1e17e:	d014      	beq.n	1e1aa <logf+0xba>
   1e180:	2b00      	cmp	r3, #0
   1e182:	db0b      	blt.n	1e19c <logf+0xac>
   1e184:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   1e188:	d208      	bcs.n	1e19c <logf+0xac>
   1e18a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 1e1b4 <logf+0xc4>
   1e18e:	ee60 7a27 	vmul.f32	s15, s0, s15
   1e192:	ee17 3a90 	vmov	r3, s15
   1e196:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
   1e19a:	e7b5      	b.n	1e108 <logf+0x18>
   1e19c:	ee00 3a10 	vmov	s0, r3
   1e1a0:	f000 bae6 	b.w	1e770 <__math_invalidf>
   1e1a4:	2001      	movs	r0, #1
   1e1a6:	f000 bad1 	b.w	1e74c <__math_divzerof>
   1e1aa:	4770      	bx	lr
   1e1ac:	20001780 	.word	0x20001780
   1e1b0:	00000000 	.word	0x00000000
   1e1b4:	4b000000 	.word	0x4b000000

0001e1b8 <pow>:
   1e1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1bc:	ec5b ab10 	vmov	sl, fp, d0
   1e1c0:	ed2d 8b0a 	vpush	{d8-d12}
   1e1c4:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
   1e1c8:	ee11 ea90 	vmov	lr, s3
   1e1cc:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   1e1d0:	f240 70fd 	movw	r0, #2045	; 0x7fd
   1e1d4:	4286      	cmp	r6, r0
   1e1d6:	ee10 1a10 	vmov	r1, s0
   1e1da:	ee11 3a10 	vmov	r3, s2
   1e1de:	b089      	sub	sp, #36	; 0x24
   1e1e0:	465a      	mov	r2, fp
   1e1e2:	4665      	mov	r5, ip
   1e1e4:	ea4f 541e 	mov.w	r4, lr, lsr #20
   1e1e8:	f200 80c6 	bhi.w	1e378 <pow+0x1c0>
   1e1ec:	f3c4 060a 	ubfx	r6, r4, #0, #11
   1e1f0:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
   1e1f4:	2e7f      	cmp	r6, #127	; 0x7f
   1e1f6:	bf98      	it	ls
   1e1f8:	2000      	movls	r0, #0
   1e1fa:	f200 80bd 	bhi.w	1e378 <pow+0x1c0>
   1e1fe:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
   1e202:	4ce1      	ldr	r4, [pc, #900]	; (1e588 <pow+0x3d0>)
   1e204:	4be1      	ldr	r3, [pc, #900]	; (1e58c <pow+0x3d4>)
   1e206:	4414      	add	r4, r2
   1e208:	f3c4 3546 	ubfx	r5, r4, #13, #7
   1e20c:	eb03 1645 	add.w	r6, r3, r5, lsl #5
   1e210:	ed93 6b00 	vldr	d6, [r3]
   1e214:	ed93 7b02 	vldr	d7, [r3, #8]
   1e218:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
   1e21c:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
   1e220:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
   1e224:	0d26      	lsrs	r6, r4, #20
   1e226:	1524      	asrs	r4, r4, #20
   1e228:	ee05 4a90 	vmov	s11, r4
   1e22c:	0536      	lsls	r6, r6, #20
   1e22e:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
   1e232:	eeb8 5be5 	vcvt.f64.s32	d5, s11
   1e236:	1b95      	subs	r5, r2, r6
   1e238:	eea5 2b06 	vfma.f64	d2, d5, d6
   1e23c:	eea5 9b07 	vfma.f64	d9, d5, d7
   1e240:	ed93 ab04 	vldr	d10, [r3, #16]
   1e244:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
   1e248:	ed93 bb08 	vldr	d11, [r3, #32]
   1e24c:	ed93 7b06 	vldr	d7, [r3, #24]
   1e250:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
   1e254:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
   1e258:	1e0c      	subs	r4, r1, #0
   1e25a:	ec45 4b1c 	vmov	d12, r4, r5
   1e25e:	eeac 0b08 	vfma.f64	d0, d12, d8
   1e262:	eea0 3b05 	vfma.f64	d3, d0, d5
   1e266:	eea0 6b04 	vfma.f64	d6, d0, d4
   1e26a:	ee20 5b0a 	vmul.f64	d5, d0, d10
   1e26e:	ee30 4b02 	vadd.f64	d4, d0, d2
   1e272:	ee20 8b05 	vmul.f64	d8, d0, d5
   1e276:	eea0 7b0b 	vfma.f64	d7, d0, d11
   1e27a:	eea8 6b03 	vfma.f64	d6, d8, d3
   1e27e:	ee32 2b44 	vsub.f64	d2, d2, d4
   1e282:	eea8 7b06 	vfma.f64	d7, d8, d6
   1e286:	ee32 2b00 	vadd.f64	d2, d2, d0
   1e28a:	eeb0 3b48 	vmov.f64	d3, d8
   1e28e:	ee39 2b02 	vadd.f64	d2, d9, d2
   1e292:	ee95 3b00 	vfnms.f64	d3, d5, d0
   1e296:	ee34 5b08 	vadd.f64	d5, d4, d8
   1e29a:	ee20 0b08 	vmul.f64	d0, d0, d8
   1e29e:	ee34 4b45 	vsub.f64	d4, d4, d5
   1e2a2:	ee32 6b03 	vadd.f64	d6, d2, d3
   1e2a6:	ee34 4b08 	vadd.f64	d4, d4, d8
   1e2aa:	ee36 6b04 	vadd.f64	d6, d6, d4
   1e2ae:	eea0 6b07 	vfma.f64	d6, d0, d7
   1e2b2:	ee35 4b06 	vadd.f64	d4, d5, d6
   1e2b6:	ee21 8b04 	vmul.f64	d8, d1, d4
   1e2ba:	ee18 2a90 	vmov	r2, s17
   1e2be:	eeb0 7b48 	vmov.f64	d7, d8
   1e2c2:	f3c2 550a 	ubfx	r5, r2, #20, #11
   1e2c6:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
   1e2ca:	18eb      	adds	r3, r5, r3
   1e2cc:	2b3e      	cmp	r3, #62	; 0x3e
   1e2ce:	ee91 7b04 	vfnms.f64	d7, d1, d4
   1e2d2:	ee35 5b44 	vsub.f64	d5, d5, d4
   1e2d6:	ee35 5b06 	vadd.f64	d5, d5, d6
   1e2da:	eea1 7b05 	vfma.f64	d7, d1, d5
   1e2de:	f200 8093 	bhi.w	1e408 <pow+0x250>
   1e2e2:	4bab      	ldr	r3, [pc, #684]	; (1e590 <pow+0x3d8>)
   1e2e4:	ed93 4b02 	vldr	d4, [r3, #8]
   1e2e8:	ed93 5b00 	vldr	d5, [r3]
   1e2ec:	eeb0 1b44 	vmov.f64	d1, d4
   1e2f0:	ed93 2b04 	vldr	d2, [r3, #16]
   1e2f4:	eea8 1b05 	vfma.f64	d1, d8, d5
   1e2f8:	ed93 6b06 	vldr	d6, [r3, #24]
   1e2fc:	ee11 1a10 	vmov	r1, s2
   1e300:	ee31 1b44 	vsub.f64	d1, d1, d4
   1e304:	f001 027f 	and.w	r2, r1, #127	; 0x7f
   1e308:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
   1e30c:	eea1 8b02 	vfma.f64	d8, d1, d2
   1e310:	eea1 8b06 	vfma.f64	d8, d1, d6
   1e314:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
   1e318:	ee37 7b08 	vadd.f64	d7, d7, d8
   1e31c:	ee27 2b07 	vmul.f64	d2, d7, d7
   1e320:	1892      	adds	r2, r2, r2
   1e322:	f102 040f 	add.w	r4, r2, #15
   1e326:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1e32a:	eea7 6b04 	vfma.f64	d6, d7, d4
   1e32e:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
   1e332:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   1e336:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
   1e33a:	ed93 5b08 	vldr	d5, [r3, #32]
   1e33e:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
   1e342:	6857      	ldr	r7, [r2, #4]
   1e344:	eea7 5b03 	vfma.f64	d5, d7, d3
   1e348:	1840      	adds	r0, r0, r1
   1e34a:	2400      	movs	r4, #0
   1e34c:	ee22 3b02 	vmul.f64	d3, d2, d2
   1e350:	ee37 7b04 	vadd.f64	d7, d7, d4
   1e354:	19a2      	adds	r2, r4, r6
   1e356:	eea2 7b05 	vfma.f64	d7, d2, d5
   1e35a:	eb07 3340 	add.w	r3, r7, r0, lsl #13
   1e35e:	eea3 7b06 	vfma.f64	d7, d3, d6
   1e362:	2d00      	cmp	r5, #0
   1e364:	d05f      	beq.n	1e426 <pow+0x26e>
   1e366:	ec43 2b10 	vmov	d0, r2, r3
   1e36a:	eea7 0b00 	vfma.f64	d0, d7, d0
   1e36e:	b009      	add	sp, #36	; 0x24
   1e370:	ecbd 8b0a 	vpop	{d8-d12}
   1e374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e378:	18d8      	adds	r0, r3, r3
   1e37a:	eb4e 090e 	adc.w	r9, lr, lr
   1e37e:	1e46      	subs	r6, r0, #1
   1e380:	4637      	mov	r7, r6
   1e382:	f06f 0801 	mvn.w	r8, #1
   1e386:	f149 36ff 	adc.w	r6, r9, #4294967295	; 0xffffffff
   1e38a:	45b8      	cmp	r8, r7
   1e38c:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
   1e390:	eb77 0606 	sbcs.w	r6, r7, r6
   1e394:	f0c0 8120 	bcc.w	1e5d8 <pow+0x420>
   1e398:	1848      	adds	r0, r1, r1
   1e39a:	eb42 0902 	adc.w	r9, r2, r2
   1e39e:	1e46      	subs	r6, r0, #1
   1e3a0:	4637      	mov	r7, r6
   1e3a2:	f169 0600 	sbc.w	r6, r9, #0
   1e3a6:	45b8      	cmp	r8, r7
   1e3a8:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
   1e3ac:	eb77 0606 	sbcs.w	r6, r7, r6
   1e3b0:	f0c0 8139 	bcc.w	1e626 <pow+0x46e>
   1e3b4:	2a00      	cmp	r2, #0
   1e3b6:	db6a      	blt.n	1e48e <pow+0x2d6>
   1e3b8:	2000      	movs	r0, #0
   1e3ba:	f3c4 060a 	ubfx	r6, r4, #0, #11
   1e3be:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
   1e3c2:	2b7f      	cmp	r3, #127	; 0x7f
   1e3c4:	f240 77ff 	movw	r7, #2047	; 0x7ff
   1e3c8:	d94f      	bls.n	1e46a <pow+0x2b2>
   1e3ca:	4b72      	ldr	r3, [pc, #456]	; (1e594 <pow+0x3dc>)
   1e3cc:	2000      	movs	r0, #0
   1e3ce:	429a      	cmp	r2, r3
   1e3d0:	bf08      	it	eq
   1e3d2:	4281      	cmpeq	r1, r0
   1e3d4:	f000 80fd 	beq.w	1e5d2 <pow+0x41a>
   1e3d8:	f240 35bd 	movw	r5, #957	; 0x3bd
   1e3dc:	42ae      	cmp	r6, r5
   1e3de:	f240 8091 	bls.w	1e504 <pow+0x34c>
   1e3e2:	2901      	cmp	r1, #1
   1e3e4:	eb72 0303 	sbcs.w	r3, r2, r3
   1e3e8:	bf34      	ite	cc
   1e3ea:	2301      	movcc	r3, #1
   1e3ec:	2300      	movcs	r3, #0
   1e3ee:	42bc      	cmp	r4, r7
   1e3f0:	bf8c      	ite	hi
   1e3f2:	2400      	movhi	r4, #0
   1e3f4:	2401      	movls	r4, #1
   1e3f6:	42a3      	cmp	r3, r4
   1e3f8:	d10e      	bne.n	1e418 <pow+0x260>
   1e3fa:	b009      	add	sp, #36	; 0x24
   1e3fc:	ecbd 8b0a 	vpop	{d8-d12}
   1e400:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e404:	f000 bd18 	b.w	1ee38 <__math_uflow>
   1e408:	2b00      	cmp	r3, #0
   1e40a:	f2c0 80ce 	blt.w	1e5aa <pow+0x3f2>
   1e40e:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
   1e412:	d975      	bls.n	1e500 <pow+0x348>
   1e414:	2a00      	cmp	r2, #0
   1e416:	dbf0      	blt.n	1e3fa <pow+0x242>
   1e418:	b009      	add	sp, #36	; 0x24
   1e41a:	ecbd 8b0a 	vpop	{d8-d12}
   1e41e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e422:	f000 bd11 	b.w	1ee48 <__math_oflow>
   1e426:	42a1      	cmp	r1, r4
   1e428:	f280 8113 	bge.w	1e652 <pow+0x49a>
   1e42c:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
   1e430:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   1e434:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   1e438:	4610      	mov	r0, r2
   1e43a:	ec41 0b15 	vmov	d5, r0, r1
   1e43e:	ee27 7b05 	vmul.f64	d7, d7, d5
   1e442:	ee35 6b07 	vadd.f64	d6, d5, d7
   1e446:	eeb0 4bc6 	vabs.f64	d4, d6
   1e44a:	eeb4 4bc3 	vcmpe.f64	d4, d3
   1e44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e452:	d461      	bmi.n	1e518 <pow+0x360>
   1e454:	ed9f 0b48 	vldr	d0, [pc, #288]	; 1e578 <pow+0x3c0>
   1e458:	ee26 0b00 	vmul.f64	d0, d6, d0
   1e45c:	b009      	add	sp, #36	; 0x24
   1e45e:	ecbd 8b0a 	vpop	{d8-d12}
   1e462:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e466:	f000 bd1f 	b.w	1eea8 <__math_check_uflow>
   1e46a:	2d00      	cmp	r5, #0
   1e46c:	f47f aec7 	bne.w	1e1fe <pow+0x46>
   1e470:	ed9f 7b43 	vldr	d7, [pc, #268]	; 1e580 <pow+0x3c8>
   1e474:	ec4b ab16 	vmov	d6, sl, fp
   1e478:	ee26 7b07 	vmul.f64	d7, d6, d7
   1e47c:	ec53 2b17 	vmov	r2, r3, d7
   1e480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1e484:	ee17 1a10 	vmov	r1, s14
   1e488:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
   1e48c:	e6b7      	b.n	1e1fe <pow+0x46>
   1e48e:	f3c4 060a 	ubfx	r6, r4, #0, #11
   1e492:	f240 30fe 	movw	r0, #1022	; 0x3fe
   1e496:	4286      	cmp	r6, r0
   1e498:	dd7e      	ble.n	1e598 <pow+0x3e0>
   1e49a:	f240 4033 	movw	r0, #1075	; 0x433
   1e49e:	4286      	cmp	r6, r0
   1e4a0:	f300 80fa 	bgt.w	1e698 <pow+0x4e0>
   1e4a4:	1b80      	subs	r0, r0, r6
   1e4a6:	f1a0 0520 	sub.w	r5, r0, #32
   1e4aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e4ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e4b2:	4087      	lsls	r7, r0
   1e4b4:	fa09 f905 	lsl.w	r9, r9, r5
   1e4b8:	f1c0 0820 	rsb	r8, r0, #32
   1e4bc:	9501      	str	r5, [sp, #4]
   1e4be:	ea47 0509 	orr.w	r5, r7, r9
   1e4c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e4c6:	fa27 f908 	lsr.w	r9, r7, r8
   1e4ca:	ea45 0509 	orr.w	r5, r5, r9
   1e4ce:	4087      	lsls	r7, r0
   1e4d0:	ea23 0707 	bic.w	r7, r3, r7
   1e4d4:	ea2e 0505 	bic.w	r5, lr, r5
   1e4d8:	433d      	orrs	r5, r7
   1e4da:	d15d      	bne.n	1e598 <pow+0x3e0>
   1e4dc:	9d01      	ldr	r5, [sp, #4]
   1e4de:	40c3      	lsrs	r3, r0
   1e4e0:	fa0e f808 	lsl.w	r8, lr, r8
   1e4e4:	ea43 0308 	orr.w	r3, r3, r8
   1e4e8:	fa2e fe05 	lsr.w	lr, lr, r5
   1e4ec:	ea43 030e 	orr.w	r3, r3, lr
   1e4f0:	f003 0301 	and.w	r3, r3, #1
   1e4f4:	0498      	lsls	r0, r3, #18
   1e4f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   1e4fa:	f3cc 050a 	ubfx	r5, ip, #0, #11
   1e4fe:	e75e      	b.n	1e3be <pow+0x206>
   1e500:	2500      	movs	r5, #0
   1e502:	e6ee      	b.n	1e2e2 <pow+0x12a>
   1e504:	4288      	cmp	r0, r1
   1e506:	4193      	sbcs	r3, r2
   1e508:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1e50c:	bf34      	ite	cc
   1e50e:	ee31 0b00 	vaddcc.f64	d0, d1, d0
   1e512:	ee30 0b41 	vsubcs.f64	d0, d0, d1
   1e516:	e72a      	b.n	1e36e <pow+0x1b6>
   1e518:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
   1e51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e520:	ee35 5b46 	vsub.f64	d5, d5, d6
   1e524:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
   1e528:	ee35 5b07 	vadd.f64	d5, d5, d7
   1e52c:	bf58      	it	pl
   1e52e:	eeb0 4b43 	vmovpl.f64	d4, d3
   1e532:	ee36 3b04 	vadd.f64	d3, d6, d4
   1e536:	ee34 7b43 	vsub.f64	d7, d4, d3
   1e53a:	ee37 7b06 	vadd.f64	d7, d7, d6
   1e53e:	ee37 7b05 	vadd.f64	d7, d7, d5
   1e542:	ee37 7b03 	vadd.f64	d7, d7, d3
   1e546:	ee37 6b44 	vsub.f64	d6, d7, d4
   1e54a:	eeb5 6b40 	vcmp.f64	d6, #0.0
   1e54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e552:	d104      	bne.n	1e55e <pow+0x3a6>
   1e554:	462a      	mov	r2, r5
   1e556:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   1e55a:	ec43 2b16 	vmov	d6, r2, r3
   1e55e:	ed9f 5b06 	vldr	d5, [pc, #24]	; 1e578 <pow+0x3c0>
   1e562:	ed8d 5b04 	vstr	d5, [sp, #16]
   1e566:	ed9d 7b04 	vldr	d7, [sp, #16]
   1e56a:	ee27 7b05 	vmul.f64	d7, d7, d5
   1e56e:	ed8d 7b06 	vstr	d7, [sp, #24]
   1e572:	e76f      	b.n	1e454 <pow+0x29c>
   1e574:	f3af 8000 	nop.w
   1e578:	00000000 	.word	0x00000000
   1e57c:	00100000 	.word	0x00100000
   1e580:	00000000 	.word	0x00000000
   1e584:	43300000 	.word	0x43300000
   1e588:	c0196aab 	.word	0xc0196aab
   1e58c:	20001990 	.word	0x20001990
   1e590:	20000680 	.word	0x20000680
   1e594:	3ff00000 	.word	0x3ff00000
   1e598:	ec4b ab10 	vmov	d0, sl, fp
   1e59c:	b009      	add	sp, #36	; 0x24
   1e59e:	ecbd 8b0a 	vpop	{d8-d12}
   1e5a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5a6:	f000 bc6f 	b.w	1ee88 <__math_invalid>
   1e5aa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1e5ae:	ee38 0b00 	vadd.f64	d0, d8, d0
   1e5b2:	2800      	cmp	r0, #0
   1e5b4:	f43f aedb 	beq.w	1e36e <pow+0x1b6>
   1e5b8:	eeb1 0b40 	vneg.f64	d0, d0
   1e5bc:	e6d7      	b.n	1e36e <pow+0x1b6>
   1e5be:	1849      	adds	r1, r1, r1
   1e5c0:	4b59      	ldr	r3, [pc, #356]	; (1e728 <pow+0x570>)
   1e5c2:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
   1e5c6:	f04f 0000 	mov.w	r0, #0
   1e5ca:	4152      	adcs	r2, r2
   1e5cc:	4288      	cmp	r0, r1
   1e5ce:	4193      	sbcs	r3, r2
   1e5d0:	d35d      	bcc.n	1e68e <pow+0x4d6>
   1e5d2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1e5d6:	e6ca      	b.n	1e36e <pow+0x1b6>
   1e5d8:	ea50 0409 	orrs.w	r4, r0, r9
   1e5dc:	d0ef      	beq.n	1e5be <pow+0x406>
   1e5de:	4c53      	ldr	r4, [pc, #332]	; (1e72c <pow+0x574>)
   1e5e0:	2500      	movs	r5, #0
   1e5e2:	42a2      	cmp	r2, r4
   1e5e4:	bf08      	it	eq
   1e5e6:	42a9      	cmpeq	r1, r5
   1e5e8:	d047      	beq.n	1e67a <pow+0x4c2>
   1e5ea:	1849      	adds	r1, r1, r1
   1e5ec:	4b50      	ldr	r3, [pc, #320]	; (1e730 <pow+0x578>)
   1e5ee:	4152      	adcs	r2, r2
   1e5f0:	428d      	cmp	r5, r1
   1e5f2:	eb73 0402 	sbcs.w	r4, r3, r2
   1e5f6:	d34a      	bcc.n	1e68e <pow+0x4d6>
   1e5f8:	4599      	cmp	r9, r3
   1e5fa:	bf08      	it	eq
   1e5fc:	42a8      	cmpeq	r0, r5
   1e5fe:	d146      	bne.n	1e68e <pow+0x4d6>
   1e600:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e604:	429a      	cmp	r2, r3
   1e606:	bf08      	it	eq
   1e608:	42a9      	cmpeq	r1, r5
   1e60a:	d0e2      	beq.n	1e5d2 <pow+0x41a>
   1e60c:	429a      	cmp	r2, r3
   1e60e:	ea6f 0e0e 	mvn.w	lr, lr
   1e612:	bf34      	ite	cc
   1e614:	2200      	movcc	r2, #0
   1e616:	2201      	movcs	r2, #1
   1e618:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   1e61c:	4572      	cmp	r2, lr
   1e61e:	d077      	beq.n	1e710 <pow+0x558>
   1e620:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 1e718 <pow+0x560>
   1e624:	e6a3      	b.n	1e36e <pow+0x1b6>
   1e626:	ec4b ab17 	vmov	d7, sl, fp
   1e62a:	2a00      	cmp	r2, #0
   1e62c:	ee27 0b07 	vmul.f64	d0, d7, d7
   1e630:	db34      	blt.n	1e69c <pow+0x4e4>
   1e632:	2200      	movs	r2, #0
   1e634:	ea50 0909 	orrs.w	r9, r0, r9
   1e638:	d15d      	bne.n	1e6f6 <pow+0x53e>
   1e63a:	f1be 0f00 	cmp.w	lr, #0
   1e63e:	f6bf ae96 	bge.w	1e36e <pow+0x1b6>
   1e642:	4610      	mov	r0, r2
   1e644:	b009      	add	sp, #36	; 0x24
   1e646:	ecbd 8b0a 	vpop	{d8-d12}
   1e64a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e64e:	f000 bc03 	b.w	1ee58 <__math_divzero>
   1e652:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
   1e656:	ed9f 6b32 	vldr	d6, [pc, #200]	; 1e720 <pow+0x568>
   1e65a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
   1e65e:	4610      	mov	r0, r2
   1e660:	ec41 0b10 	vmov	d0, r0, r1
   1e664:	eea7 0b00 	vfma.f64	d0, d7, d0
   1e668:	ee20 0b06 	vmul.f64	d0, d0, d6
   1e66c:	b009      	add	sp, #36	; 0x24
   1e66e:	ecbd 8b0a 	vpop	{d8-d12}
   1e672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e676:	f000 bc23 	b.w	1eec0 <__math_check_oflow>
   1e67a:	18db      	adds	r3, r3, r3
   1e67c:	4a2a      	ldr	r2, [pc, #168]	; (1e728 <pow+0x570>)
   1e67e:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
   1e682:	eb4e 0e0e 	adc.w	lr, lr, lr
   1e686:	429d      	cmp	r5, r3
   1e688:	eb72 020e 	sbcs.w	r2, r2, lr
   1e68c:	d2a1      	bcs.n	1e5d2 <pow+0x41a>
   1e68e:	ec4b ab17 	vmov	d7, sl, fp
   1e692:	ee37 0b01 	vadd.f64	d0, d7, d1
   1e696:	e66a      	b.n	1e36e <pow+0x1b6>
   1e698:	2000      	movs	r0, #0
   1e69a:	e72c      	b.n	1e4f6 <pow+0x33e>
   1e69c:	f3c4 020a 	ubfx	r2, r4, #0, #11
   1e6a0:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
   1e6a4:	2934      	cmp	r1, #52	; 0x34
   1e6a6:	d8c4      	bhi.n	1e632 <pow+0x47a>
   1e6a8:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
   1e6ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e6b0:	f1a2 051d 	sub.w	r5, r2, #29
   1e6b4:	3203      	adds	r2, #3
   1e6b6:	fa01 f705 	lsl.w	r7, r1, r5
   1e6ba:	fa01 f402 	lsl.w	r4, r1, r2
   1e6be:	f1c2 0620 	rsb	r6, r2, #32
   1e6c2:	433c      	orrs	r4, r7
   1e6c4:	fa21 f706 	lsr.w	r7, r1, r6
   1e6c8:	433c      	orrs	r4, r7
   1e6ca:	4091      	lsls	r1, r2
   1e6cc:	ea23 0101 	bic.w	r1, r3, r1
   1e6d0:	ea2e 0404 	bic.w	r4, lr, r4
   1e6d4:	4321      	orrs	r1, r4
   1e6d6:	d1ac      	bne.n	1e632 <pow+0x47a>
   1e6d8:	fa23 f202 	lsr.w	r2, r3, r2
   1e6dc:	fa0e f606 	lsl.w	r6, lr, r6
   1e6e0:	4332      	orrs	r2, r6
   1e6e2:	fa2e f505 	lsr.w	r5, lr, r5
   1e6e6:	432a      	orrs	r2, r5
   1e6e8:	f012 0201 	ands.w	r2, r2, #1
   1e6ec:	d0a2      	beq.n	1e634 <pow+0x47c>
   1e6ee:	eeb1 0b40 	vneg.f64	d0, d0
   1e6f2:	2201      	movs	r2, #1
   1e6f4:	e79e      	b.n	1e634 <pow+0x47c>
   1e6f6:	f1be 0f00 	cmp.w	lr, #0
   1e6fa:	f6bf ae38 	bge.w	1e36e <pow+0x1b6>
   1e6fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1e702:	ee86 7b00 	vdiv.f64	d7, d6, d0
   1e706:	ed8d 7b02 	vstr	d7, [sp, #8]
   1e70a:	ed9d 0b02 	vldr	d0, [sp, #8]
   1e70e:	e62e      	b.n	1e36e <pow+0x1b6>
   1e710:	ee21 0b01 	vmul.f64	d0, d1, d1
   1e714:	e62b      	b.n	1e36e <pow+0x1b6>
   1e716:	bf00      	nop
	...
   1e724:	7f000000 	.word	0x7f000000
   1e728:	fff00000 	.word	0xfff00000
   1e72c:	3ff00000 	.word	0x3ff00000
   1e730:	ffe00000 	.word	0xffe00000

0001e734 <with_errnof>:
   1e734:	b510      	push	{r4, lr}
   1e736:	b082      	sub	sp, #8
   1e738:	ed8d 0a01 	vstr	s0, [sp, #4]
   1e73c:	4604      	mov	r4, r0
   1e73e:	f003 ff15 	bl	2256c <__errno>
   1e742:	ed9d 0a01 	vldr	s0, [sp, #4]
   1e746:	6004      	str	r4, [r0, #0]
   1e748:	b002      	add	sp, #8
   1e74a:	bd10      	pop	{r4, pc}

0001e74c <__math_divzerof>:
   1e74c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 1e76c <__math_divzerof+0x20>
   1e750:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   1e754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1e758:	2800      	cmp	r0, #0
   1e75a:	f04f 0022 	mov.w	r0, #34	; 0x22
   1e75e:	fe47 7a27 	vseleq.f32	s15, s14, s15
   1e762:	ee87 0a80 	vdiv.f32	s0, s15, s0
   1e766:	f7ff bfe5 	b.w	1e734 <with_errnof>
   1e76a:	bf00      	nop
   1e76c:	00000000 	.word	0x00000000

0001e770 <__math_invalidf>:
   1e770:	ee70 7a40 	vsub.f32	s15, s0, s0
   1e774:	eeb4 0a40 	vcmp.f32	s0, s0
   1e778:	ee87 7aa7 	vdiv.f32	s14, s15, s15
   1e77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e780:	eeb0 0a47 	vmov.f32	s0, s14
   1e784:	d602      	bvs.n	1e78c <__math_invalidf+0x1c>
   1e786:	2021      	movs	r0, #33	; 0x21
   1e788:	f7ff bfd4 	b.w	1e734 <with_errnof>
   1e78c:	4770      	bx	lr
   1e78e:	bf00      	nop

0001e790 <log10f>:
   1e790:	b508      	push	{r3, lr}
   1e792:	ed2d 8b02 	vpush	{d8}
   1e796:	eeb0 8a40 	vmov.f32	s16, s0
   1e79a:	f000 f8fd 	bl	1e998 <__ieee754_log10f>
   1e79e:	eeb4 8a48 	vcmp.f32	s16, s16
   1e7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e7a6:	d60f      	bvs.n	1e7c8 <log10f+0x38>
   1e7a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1e7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e7b0:	d80a      	bhi.n	1e7c8 <log10f+0x38>
   1e7b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   1e7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e7ba:	d108      	bne.n	1e7ce <log10f+0x3e>
   1e7bc:	f003 fed6 	bl	2256c <__errno>
   1e7c0:	2322      	movs	r3, #34	; 0x22
   1e7c2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 1e7e8 <log10f+0x58>
   1e7c6:	6003      	str	r3, [r0, #0]
   1e7c8:	ecbd 8b02 	vpop	{d8}
   1e7cc:	bd08      	pop	{r3, pc}
   1e7ce:	f003 fecd 	bl	2256c <__errno>
   1e7d2:	ecbd 8b02 	vpop	{d8}
   1e7d6:	4603      	mov	r3, r0
   1e7d8:	2221      	movs	r2, #33	; 0x21
   1e7da:	601a      	str	r2, [r3, #0]
   1e7dc:	4803      	ldr	r0, [pc, #12]	; (1e7ec <log10f+0x5c>)
   1e7de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e7e2:	f000 b8c1 	b.w	1e968 <nanf>
   1e7e6:	bf00      	nop
   1e7e8:	ff800000 	.word	0xff800000
   1e7ec:	200039f8 	.word	0x200039f8

0001e7f0 <sqrtf>:
   1e7f0:	b508      	push	{r3, lr}
   1e7f2:	ed2d 8b02 	vpush	{d8}
   1e7f6:	eeb0 8a40 	vmov.f32	s16, s0
   1e7fa:	f000 f8bf 	bl	1e97c <__ieee754_sqrtf>
   1e7fe:	eeb4 8a48 	vcmp.f32	s16, s16
   1e802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e806:	d606      	bvs.n	1e816 <sqrtf+0x26>
   1e808:	eddf 8a09 	vldr	s17, [pc, #36]	; 1e830 <sqrtf+0x40>
   1e80c:	eeb4 8ae8 	vcmpe.f32	s16, s17
   1e810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e814:	d402      	bmi.n	1e81c <sqrtf+0x2c>
   1e816:	ecbd 8b02 	vpop	{d8}
   1e81a:	bd08      	pop	{r3, pc}
   1e81c:	f003 fea6 	bl	2256c <__errno>
   1e820:	ee88 0aa8 	vdiv.f32	s0, s17, s17
   1e824:	ecbd 8b02 	vpop	{d8}
   1e828:	2321      	movs	r3, #33	; 0x21
   1e82a:	6003      	str	r3, [r0, #0]
   1e82c:	bd08      	pop	{r3, pc}
   1e82e:	bf00      	nop
	...

0001e838 <log10>:
   1e838:	b508      	push	{r3, lr}
   1e83a:	ed2d 8b02 	vpush	{d8}
   1e83e:	eeb0 8b40 	vmov.f64	d8, d0
   1e842:	f000 f909 	bl	1ea58 <__ieee754_log10>
   1e846:	eeb4 8b48 	vcmp.f64	d8, d8
   1e84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e84e:	d60f      	bvs.n	1e870 <log10+0x38>
   1e850:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   1e854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e858:	d80a      	bhi.n	1e870 <log10+0x38>
   1e85a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1e85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e862:	d108      	bne.n	1e876 <log10+0x3e>
   1e864:	f003 fe82 	bl	2256c <__errno>
   1e868:	ed9f 0b09 	vldr	d0, [pc, #36]	; 1e890 <log10+0x58>
   1e86c:	2322      	movs	r3, #34	; 0x22
   1e86e:	6003      	str	r3, [r0, #0]
   1e870:	ecbd 8b02 	vpop	{d8}
   1e874:	bd08      	pop	{r3, pc}
   1e876:	f003 fe79 	bl	2256c <__errno>
   1e87a:	ecbd 8b02 	vpop	{d8}
   1e87e:	4603      	mov	r3, r0
   1e880:	2221      	movs	r2, #33	; 0x21
   1e882:	601a      	str	r2, [r3, #0]
   1e884:	4804      	ldr	r0, [pc, #16]	; (1e898 <log10+0x60>)
   1e886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e88a:	f000 b87d 	b.w	1e988 <nan>
   1e88e:	bf00      	nop
   1e890:	00000000 	.word	0x00000000
   1e894:	fff00000 	.word	0xfff00000
   1e898:	200039f8 	.word	0x200039f8
   1e89c:	00000000 	.word	0x00000000

0001e8a0 <sqrt>:
   1e8a0:	b508      	push	{r3, lr}
   1e8a2:	ed2d 8b04 	vpush	{d8-d9}
   1e8a6:	eeb0 8b40 	vmov.f64	d8, d0
   1e8aa:	f000 f863 	bl	1e974 <__ieee754_sqrt>
   1e8ae:	eeb4 8b48 	vcmp.f64	d8, d8
   1e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e8b6:	d606      	bvs.n	1e8c6 <sqrt+0x26>
   1e8b8:	ed9f 9b09 	vldr	d9, [pc, #36]	; 1e8e0 <sqrt+0x40>
   1e8bc:	eeb4 8bc9 	vcmpe.f64	d8, d9
   1e8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e8c4:	d402      	bmi.n	1e8cc <sqrt+0x2c>
   1e8c6:	ecbd 8b04 	vpop	{d8-d9}
   1e8ca:	bd08      	pop	{r3, pc}
   1e8cc:	f003 fe4e 	bl	2256c <__errno>
   1e8d0:	ee89 0b09 	vdiv.f64	d0, d9, d9
   1e8d4:	ecbd 8b04 	vpop	{d8-d9}
   1e8d8:	2321      	movs	r3, #33	; 0x21
   1e8da:	6003      	str	r3, [r0, #0]
   1e8dc:	bd08      	pop	{r3, pc}
   1e8de:	bf00      	nop
	...

0001e8e8 <cos>:
   1e8e8:	eeb0 7b40 	vmov.f64	d7, d0
   1e8ec:	ee17 3a90 	vmov	r3, s15
   1e8f0:	4a1b      	ldr	r2, [pc, #108]	; (1e960 <cos+0x78>)
   1e8f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1e8f6:	4293      	cmp	r3, r2
   1e8f8:	dd1b      	ble.n	1e932 <cos+0x4a>
   1e8fa:	4a1a      	ldr	r2, [pc, #104]	; (1e964 <cos+0x7c>)
   1e8fc:	4293      	cmp	r3, r2
   1e8fe:	dd02      	ble.n	1e906 <cos+0x1e>
   1e900:	ee30 0b40 	vsub.f64	d0, d0, d0
   1e904:	4770      	bx	lr
   1e906:	b500      	push	{lr}
   1e908:	b085      	sub	sp, #20
   1e90a:	4668      	mov	r0, sp
   1e90c:	f000 f92c 	bl	1eb68 <__ieee754_rem_pio2>
   1e910:	f000 0003 	and.w	r0, r0, #3
   1e914:	2801      	cmp	r0, #1
   1e916:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e91a:	ed9d 0b00 	vldr	d0, [sp]
   1e91e:	d00c      	beq.n	1e93a <cos+0x52>
   1e920:	2802      	cmp	r0, #2
   1e922:	d012      	beq.n	1e94a <cos+0x62>
   1e924:	b170      	cbz	r0, 1e944 <cos+0x5c>
   1e926:	2001      	movs	r0, #1
   1e928:	f000 ffba 	bl	1f8a0 <__kernel_sin>
   1e92c:	b005      	add	sp, #20
   1e92e:	f85d fb04 	ldr.w	pc, [sp], #4
   1e932:	ed9f 1b09 	vldr	d1, [pc, #36]	; 1e958 <cos+0x70>
   1e936:	f000 bf1b 	b.w	1f770 <__kernel_cos>
   1e93a:	f000 ffb1 	bl	1f8a0 <__kernel_sin>
   1e93e:	eeb1 0b40 	vneg.f64	d0, d0
   1e942:	e7f3      	b.n	1e92c <cos+0x44>
   1e944:	f000 ff14 	bl	1f770 <__kernel_cos>
   1e948:	e7f0      	b.n	1e92c <cos+0x44>
   1e94a:	f000 ff11 	bl	1f770 <__kernel_cos>
   1e94e:	eeb1 0b40 	vneg.f64	d0, d0
   1e952:	e7eb      	b.n	1e92c <cos+0x44>
   1e954:	f3af 8000 	nop.w
	...
   1e960:	3fe921fb 	.word	0x3fe921fb
   1e964:	7fefffff 	.word	0x7fefffff

0001e968 <nanf>:
   1e968:	ed9f 0a01 	vldr	s0, [pc, #4]	; 1e970 <nanf+0x8>
   1e96c:	4770      	bx	lr
   1e96e:	bf00      	nop
   1e970:	7fc00000 	.word	0x7fc00000

0001e974 <__ieee754_sqrt>:
   1e974:	eeb1 0bc0 	vsqrt.f64	d0, d0
   1e978:	4770      	bx	lr
   1e97a:	bf00      	nop

0001e97c <__ieee754_sqrtf>:
   1e97c:	eeb1 0ac0 	vsqrt.f32	s0, s0
   1e980:	4770      	bx	lr
   1e982:	bf00      	nop
   1e984:	0000      	movs	r0, r0
	...

0001e988 <nan>:
   1e988:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1e990 <nan+0x8>
   1e98c:	4770      	bx	lr
   1e98e:	bf00      	nop
   1e990:	00000000 	.word	0x00000000
   1e994:	7ff80000 	.word	0x7ff80000

0001e998 <__ieee754_log10f>:
   1e998:	b508      	push	{r3, lr}
   1e99a:	ee10 3a10 	vmov	r3, s0
   1e99e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
   1e9a2:	ed2d 8b02 	vpush	{d8}
   1e9a6:	d02b      	beq.n	1ea00 <__ieee754_log10f+0x68>
   1e9a8:	2b00      	cmp	r3, #0
   1e9aa:	db32      	blt.n	1ea12 <__ieee754_log10f+0x7a>
   1e9ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1e9b0:	da41      	bge.n	1ea36 <__ieee754_log10f+0x9e>
   1e9b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1e9b6:	db35      	blt.n	1ea24 <__ieee754_log10f+0x8c>
   1e9b8:	2100      	movs	r1, #0
   1e9ba:	15da      	asrs	r2, r3, #23
   1e9bc:	3a7f      	subs	r2, #127	; 0x7f
   1e9be:	440a      	add	r2, r1
   1e9c0:	0fd1      	lsrs	r1, r2, #31
   1e9c2:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
   1e9c6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1e9ca:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1e9ce:	ee07 2a90 	vmov	s15, r2
   1e9d2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
   1e9d6:	ee00 3a10 	vmov	s0, r3
   1e9da:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   1e9de:	f7ff fb87 	bl	1e0f0 <logf>
   1e9e2:	eddf 7a17 	vldr	s15, [pc, #92]	; 1ea40 <__ieee754_log10f+0xa8>
   1e9e6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 1ea44 <__ieee754_log10f+0xac>
   1e9ea:	ee20 0a27 	vmul.f32	s0, s0, s15
   1e9ee:	eddf 7a16 	vldr	s15, [pc, #88]	; 1ea48 <__ieee754_log10f+0xb0>
   1e9f2:	eea8 0a07 	vfma.f32	s0, s16, s14
   1e9f6:	eea8 0a27 	vfma.f32	s0, s16, s15
   1e9fa:	ecbd 8b02 	vpop	{d8}
   1e9fe:	bd08      	pop	{r3, pc}
   1ea00:	ecbd 8b02 	vpop	{d8}
   1ea04:	ed9f 7a11 	vldr	s14, [pc, #68]	; 1ea4c <__ieee754_log10f+0xb4>
   1ea08:	eddf 7a11 	vldr	s15, [pc, #68]	; 1ea50 <__ieee754_log10f+0xb8>
   1ea0c:	ee87 0a27 	vdiv.f32	s0, s14, s15
   1ea10:	bd08      	pop	{r3, pc}
   1ea12:	ecbd 8b02 	vpop	{d8}
   1ea16:	ee70 7a40 	vsub.f32	s15, s0, s0
   1ea1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 1ea50 <__ieee754_log10f+0xb8>
   1ea1e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1ea22:	bd08      	pop	{r3, pc}
   1ea24:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1ea54 <__ieee754_log10f+0xbc>
   1ea28:	ee60 7a27 	vmul.f32	s15, s0, s15
   1ea2c:	f06f 0118 	mvn.w	r1, #24
   1ea30:	ee17 3a90 	vmov	r3, s15
   1ea34:	e7c1      	b.n	1e9ba <__ieee754_log10f+0x22>
   1ea36:	ecbd 8b02 	vpop	{d8}
   1ea3a:	ee30 0a00 	vadd.f32	s0, s0, s0
   1ea3e:	bd08      	pop	{r3, pc}
   1ea40:	3ede5bd9 	.word	0x3ede5bd9
   1ea44:	355427db 	.word	0x355427db
   1ea48:	3e9a2080 	.word	0x3e9a2080
   1ea4c:	cc000000 	.word	0xcc000000
   1ea50:	00000000 	.word	0x00000000
   1ea54:	4c000000 	.word	0x4c000000

0001ea58 <__ieee754_log10>:
   1ea58:	b500      	push	{lr}
   1ea5a:	ed2d 8b02 	vpush	{d8}
   1ea5e:	b083      	sub	sp, #12
   1ea60:	ed8d 0b00 	vstr	d0, [sp]
   1ea64:	9b01      	ldr	r3, [sp, #4]
   1ea66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ea6a:	da1d      	bge.n	1eaa8 <__ieee754_log10+0x50>
   1ea6c:	9900      	ldr	r1, [sp, #0]
   1ea6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   1ea72:	430a      	orrs	r2, r1
   1ea74:	d046      	beq.n	1eb04 <__ieee754_log10+0xac>
   1ea76:	2b00      	cmp	r3, #0
   1ea78:	db4f      	blt.n	1eb1a <__ieee754_log10+0xc2>
   1ea7a:	ed9d 6b00 	vldr	d6, [sp]
   1ea7e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 1eb30 <__ieee754_log10+0xd8>
   1ea82:	ee26 7b07 	vmul.f64	d7, d6, d7
   1ea86:	ed8d 7b00 	vstr	d7, [sp]
   1ea8a:	9b01      	ldr	r3, [sp, #4]
   1ea8c:	4a34      	ldr	r2, [pc, #208]	; (1eb60 <__ieee754_log10+0x108>)
   1ea8e:	4293      	cmp	r3, r2
   1ea90:	f06f 0135 	mvn.w	r1, #53	; 0x35
   1ea94:	dd0d      	ble.n	1eab2 <__ieee754_log10+0x5a>
   1ea96:	ed9d 7b00 	vldr	d7, [sp]
   1ea9a:	ee37 0b07 	vadd.f64	d0, d7, d7
   1ea9e:	b003      	add	sp, #12
   1eaa0:	ecbd 8b02 	vpop	{d8}
   1eaa4:	f85d fb04 	ldr.w	pc, [sp], #4
   1eaa8:	4a2d      	ldr	r2, [pc, #180]	; (1eb60 <__ieee754_log10+0x108>)
   1eaaa:	4293      	cmp	r3, r2
   1eaac:	f04f 0100 	mov.w	r1, #0
   1eab0:	dcf1      	bgt.n	1ea96 <__ieee754_log10+0x3e>
   1eab2:	1518      	asrs	r0, r3, #20
   1eab4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   1eab8:	4408      	add	r0, r1
   1eaba:	f240 3cff 	movw	ip, #1023	; 0x3ff
   1eabe:	f3c3 0113 	ubfx	r1, r3, #0, #20
   1eac2:	e9dd 2300 	ldrd	r2, r3, [sp]
   1eac6:	ebac 7cd0 	sub.w	ip, ip, r0, lsr #31
   1eaca:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1eace:	ee07 0a90 	vmov	s15, r0
   1ead2:	ea41 530c 	orr.w	r3, r1, ip, lsl #20
   1ead6:	ec43 2b10 	vmov	d0, r2, r3
   1eada:	eeb8 8be7 	vcvt.f64.s32	d8, s15
   1eade:	f000 fa03 	bl	1eee8 <log>
   1eae2:	ed9f 5b15 	vldr	d5, [pc, #84]	; 1eb38 <__ieee754_log10+0xe0>
   1eae6:	ed9f 6b16 	vldr	d6, [pc, #88]	; 1eb40 <__ieee754_log10+0xe8>
   1eaea:	ee20 0b05 	vmul.f64	d0, d0, d5
   1eaee:	ed9f 7b16 	vldr	d7, [pc, #88]	; 1eb48 <__ieee754_log10+0xf0>
   1eaf2:	eea8 0b06 	vfma.f64	d0, d8, d6
   1eaf6:	eea8 0b07 	vfma.f64	d0, d8, d7
   1eafa:	b003      	add	sp, #12
   1eafc:	ecbd 8b02 	vpop	{d8}
   1eb00:	f85d fb04 	ldr.w	pc, [sp], #4
   1eb04:	ed9f 6b12 	vldr	d6, [pc, #72]	; 1eb50 <__ieee754_log10+0xf8>
   1eb08:	ed9f 7b13 	vldr	d7, [pc, #76]	; 1eb58 <__ieee754_log10+0x100>
   1eb0c:	ee86 0b07 	vdiv.f64	d0, d6, d7
   1eb10:	b003      	add	sp, #12
   1eb12:	ecbd 8b02 	vpop	{d8}
   1eb16:	f85d fb04 	ldr.w	pc, [sp], #4
   1eb1a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 1eb58 <__ieee754_log10+0x100>
   1eb1e:	ed9d 6b00 	vldr	d6, [sp]
   1eb22:	ee36 6b46 	vsub.f64	d6, d6, d6
   1eb26:	ee86 0b07 	vdiv.f64	d0, d6, d7
   1eb2a:	e7b8      	b.n	1ea9e <__ieee754_log10+0x46>
   1eb2c:	f3af 8000 	nop.w
   1eb30:	00000000 	.word	0x00000000
   1eb34:	43500000 	.word	0x43500000
   1eb38:	1526e50e 	.word	0x1526e50e
   1eb3c:	3fdbcb7b 	.word	0x3fdbcb7b
   1eb40:	11f12b36 	.word	0x11f12b36
   1eb44:	3d59fef3 	.word	0x3d59fef3
   1eb48:	509f6000 	.word	0x509f6000
   1eb4c:	3fd34413 	.word	0x3fd34413
   1eb50:	00000000 	.word	0x00000000
   1eb54:	c3500000 	.word	0xc3500000
	...
   1eb60:	7fefffff 	.word	0x7fefffff
   1eb64:	00000000 	.word	0x00000000

0001eb68 <__ieee754_rem_pio2>:
   1eb68:	b570      	push	{r4, r5, r6, lr}
   1eb6a:	ec53 2b10 	vmov	r2, r3, d0
   1eb6e:	499c      	ldr	r1, [pc, #624]	; (1ede0 <__ieee754_rem_pio2+0x278>)
   1eb70:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1eb74:	428d      	cmp	r5, r1
   1eb76:	b088      	sub	sp, #32
   1eb78:	4604      	mov	r4, r0
   1eb7a:	dd6a      	ble.n	1ec52 <__ieee754_rem_pio2+0xea>
   1eb7c:	4999      	ldr	r1, [pc, #612]	; (1ede4 <__ieee754_rem_pio2+0x27c>)
   1eb7e:	428d      	cmp	r5, r1
   1eb80:	461e      	mov	r6, r3
   1eb82:	dc1b      	bgt.n	1ebbc <__ieee754_rem_pio2+0x54>
   1eb84:	2b00      	cmp	r3, #0
   1eb86:	ed9f 7b86 	vldr	d7, [pc, #536]	; 1eda0 <__ieee754_rem_pio2+0x238>
   1eb8a:	f340 80eb 	ble.w	1ed64 <__ieee754_rem_pio2+0x1fc>
   1eb8e:	ee30 7b47 	vsub.f64	d7, d0, d7
   1eb92:	f5a1 211b 	sub.w	r1, r1, #634880	; 0x9b000
   1eb96:	f5a1 61f0 	sub.w	r1, r1, #1920	; 0x780
   1eb9a:	428d      	cmp	r5, r1
   1eb9c:	d06a      	beq.n	1ec74 <__ieee754_rem_pio2+0x10c>
   1eb9e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 1eda8 <__ieee754_rem_pio2+0x240>
   1eba2:	2001      	movs	r0, #1
   1eba4:	ee37 5b46 	vsub.f64	d5, d7, d6
   1eba8:	ee37 7b45 	vsub.f64	d7, d7, d5
   1ebac:	ed84 5b00 	vstr	d5, [r4]
   1ebb0:	ee37 7b46 	vsub.f64	d7, d7, d6
   1ebb4:	ed84 7b02 	vstr	d7, [r4, #8]
   1ebb8:	b008      	add	sp, #32
   1ebba:	bd70      	pop	{r4, r5, r6, pc}
   1ebbc:	498a      	ldr	r1, [pc, #552]	; (1ede8 <__ieee754_rem_pio2+0x280>)
   1ebbe:	428d      	cmp	r5, r1
   1ebc0:	dd60      	ble.n	1ec84 <__ieee754_rem_pio2+0x11c>
   1ebc2:	498a      	ldr	r1, [pc, #552]	; (1edec <__ieee754_rem_pio2+0x284>)
   1ebc4:	428d      	cmp	r5, r1
   1ebc6:	dc4d      	bgt.n	1ec64 <__ieee754_rem_pio2+0xfc>
   1ebc8:	152a      	asrs	r2, r5, #20
   1ebca:	ee10 0a10 	vmov	r0, s0
   1ebce:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
   1ebd2:	eba5 5102 	sub.w	r1, r5, r2, lsl #20
   1ebd6:	ec41 0b17 	vmov	d7, r0, r1
   1ebda:	ed9f 5b75 	vldr	d5, [pc, #468]	; 1edb0 <__ieee754_rem_pio2+0x248>
   1ebde:	eebd 6bc7 	vcvt.s32.f64	s12, d7
   1ebe2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
   1ebe6:	ee37 7b46 	vsub.f64	d7, d7, d6
   1ebea:	ee27 7b05 	vmul.f64	d7, d7, d5
   1ebee:	eefd 4bc7 	vcvt.s32.f64	s9, d7
   1ebf2:	ed8d 6b02 	vstr	d6, [sp, #8]
   1ebf6:	eeb8 6be4 	vcvt.f64.s32	d6, s9
   1ebfa:	ee37 7b46 	vsub.f64	d7, d7, d6
   1ebfe:	ee27 7b05 	vmul.f64	d7, d7, d5
   1ec02:	eeb5 7b40 	vcmp.f64	d7, #0.0
   1ec06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ec0a:	ed8d 6b04 	vstr	d6, [sp, #16]
   1ec0e:	ed8d 7b06 	vstr	d7, [sp, #24]
   1ec12:	f040 8096 	bne.w	1ed42 <__ieee754_rem_pio2+0x1da>
   1ec16:	ee14 3a90 	vmov	r3, s9
   1ec1a:	2b00      	cmp	r3, #0
   1ec1c:	bf0c      	ite	eq
   1ec1e:	2301      	moveq	r3, #1
   1ec20:	2302      	movne	r3, #2
   1ec22:	4973      	ldr	r1, [pc, #460]	; (1edf0 <__ieee754_rem_pio2+0x288>)
   1ec24:	9101      	str	r1, [sp, #4]
   1ec26:	2102      	movs	r1, #2
   1ec28:	9100      	str	r1, [sp, #0]
   1ec2a:	a802      	add	r0, sp, #8
   1ec2c:	4621      	mov	r1, r4
   1ec2e:	f000 fa57 	bl	1f0e0 <__kernel_rem_pio2>
   1ec32:	2e00      	cmp	r6, #0
   1ec34:	dac0      	bge.n	1ebb8 <__ieee754_rem_pio2+0x50>
   1ec36:	ed94 6b00 	vldr	d6, [r4]
   1ec3a:	ed94 7b02 	vldr	d7, [r4, #8]
   1ec3e:	eeb1 6b46 	vneg.f64	d6, d6
   1ec42:	eeb1 7b47 	vneg.f64	d7, d7
   1ec46:	ed84 6b00 	vstr	d6, [r4]
   1ec4a:	ed84 7b02 	vstr	d7, [r4, #8]
   1ec4e:	4240      	negs	r0, r0
   1ec50:	e7b2      	b.n	1ebb8 <__ieee754_rem_pio2+0x50>
   1ec52:	2000      	movs	r0, #0
   1ec54:	2100      	movs	r1, #0
   1ec56:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1ec5a:	2000      	movs	r0, #0
   1ec5c:	ed84 0b00 	vstr	d0, [r4]
   1ec60:	b008      	add	sp, #32
   1ec62:	bd70      	pop	{r4, r5, r6, pc}
   1ec64:	ee30 7b40 	vsub.f64	d7, d0, d0
   1ec68:	2000      	movs	r0, #0
   1ec6a:	ed84 7b02 	vstr	d7, [r4, #8]
   1ec6e:	ed84 7b00 	vstr	d7, [r4]
   1ec72:	e7a1      	b.n	1ebb8 <__ieee754_rem_pio2+0x50>
   1ec74:	ed9f 5b50 	vldr	d5, [pc, #320]	; 1edb8 <__ieee754_rem_pio2+0x250>
   1ec78:	ed9f 6b51 	vldr	d6, [pc, #324]	; 1edc0 <__ieee754_rem_pio2+0x258>
   1ec7c:	ee37 7b45 	vsub.f64	d7, d7, d5
   1ec80:	2001      	movs	r0, #1
   1ec82:	e78f      	b.n	1eba4 <__ieee754_rem_pio2+0x3c>
   1ec84:	f000 fe64 	bl	1f950 <fabs>
   1ec88:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   1ec8c:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 1edc8 <__ieee754_rem_pio2+0x260>
   1ec90:	eea0 7b05 	vfma.f64	d7, d0, d5
   1ec94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
   1ec98:	ed9f 3b41 	vldr	d3, [pc, #260]	; 1eda0 <__ieee754_rem_pio2+0x238>
   1ec9c:	ee17 0a90 	vmov	r0, s15
   1eca0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 1eda8 <__ieee754_rem_pio2+0x240>
   1eca4:	281f      	cmp	r0, #31
   1eca6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1ecaa:	eeb1 4b45 	vneg.f64	d4, d5
   1ecae:	eea5 0b43 	vfms.f64	d0, d5, d3
   1ecb2:	ee25 7b06 	vmul.f64	d7, d5, d6
   1ecb6:	dc1c      	bgt.n	1ecf2 <__ieee754_rem_pio2+0x18a>
   1ecb8:	4b4e      	ldr	r3, [pc, #312]	; (1edf4 <__ieee754_rem_pio2+0x28c>)
   1ecba:	1e42      	subs	r2, r0, #1
   1ecbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ecc0:	42ab      	cmp	r3, r5
   1ecc2:	d016      	beq.n	1ecf2 <__ieee754_rem_pio2+0x18a>
   1ecc4:	ee30 6b47 	vsub.f64	d6, d0, d7
   1ecc8:	ed84 6b00 	vstr	d6, [r4]
   1eccc:	ee30 0b46 	vsub.f64	d0, d0, d6
   1ecd0:	ee30 0b47 	vsub.f64	d0, d0, d7
   1ecd4:	2e00      	cmp	r6, #0
   1ecd6:	ed84 0b02 	vstr	d0, [r4, #8]
   1ecda:	f6bf af6d 	bge.w	1ebb8 <__ieee754_rem_pio2+0x50>
   1ecde:	eeb1 6b46 	vneg.f64	d6, d6
   1ece2:	eeb1 0b40 	vneg.f64	d0, d0
   1ece6:	ed84 6b00 	vstr	d6, [r4]
   1ecea:	ed84 0b02 	vstr	d0, [r4, #8]
   1ecee:	4240      	negs	r0, r0
   1ecf0:	e762      	b.n	1ebb8 <__ieee754_rem_pio2+0x50>
   1ecf2:	ee30 6b47 	vsub.f64	d6, d0, d7
   1ecf6:	ee16 3a90 	vmov	r3, s13
   1ecfa:	f3c3 530a 	ubfx	r3, r3, #20, #11
   1ecfe:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
   1ed02:	2b10      	cmp	r3, #16
   1ed04:	ea4f 5225 	mov.w	r2, r5, asr #20
   1ed08:	ddde      	ble.n	1ecc8 <__ieee754_rem_pio2+0x160>
   1ed0a:	eeb0 3b40 	vmov.f64	d3, d0
   1ed0e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 1edb8 <__ieee754_rem_pio2+0x250>
   1ed12:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 1edc0 <__ieee754_rem_pio2+0x258>
   1ed16:	eea4 3b06 	vfma.f64	d3, d4, d6
   1ed1a:	ee30 7b43 	vsub.f64	d7, d0, d3
   1ed1e:	eea4 7b06 	vfma.f64	d7, d4, d6
   1ed22:	ee95 7b02 	vfnms.f64	d7, d5, d2
   1ed26:	ee33 6b47 	vsub.f64	d6, d3, d7
   1ed2a:	ee16 3a90 	vmov	r3, s13
   1ed2e:	f3c3 530a 	ubfx	r3, r3, #20, #11
   1ed32:	1ad2      	subs	r2, r2, r3
   1ed34:	2a31      	cmp	r2, #49	; 0x31
   1ed36:	dc06      	bgt.n	1ed46 <__ieee754_rem_pio2+0x1de>
   1ed38:	eeb0 0b43 	vmov.f64	d0, d3
   1ed3c:	ed84 6b00 	vstr	d6, [r4]
   1ed40:	e7c4      	b.n	1eccc <__ieee754_rem_pio2+0x164>
   1ed42:	2303      	movs	r3, #3
   1ed44:	e76d      	b.n	1ec22 <__ieee754_rem_pio2+0xba>
   1ed46:	ed9f 6b22 	vldr	d6, [pc, #136]	; 1edd0 <__ieee754_rem_pio2+0x268>
   1ed4a:	eeb0 0b43 	vmov.f64	d0, d3
   1ed4e:	ed9f 2b22 	vldr	d2, [pc, #136]	; 1edd8 <__ieee754_rem_pio2+0x270>
   1ed52:	eea4 0b06 	vfma.f64	d0, d4, d6
   1ed56:	ee33 7b40 	vsub.f64	d7, d3, d0
   1ed5a:	eea4 7b06 	vfma.f64	d7, d4, d6
   1ed5e:	ee95 7b02 	vfnms.f64	d7, d5, d2
   1ed62:	e7af      	b.n	1ecc4 <__ieee754_rem_pio2+0x15c>
   1ed64:	4924      	ldr	r1, [pc, #144]	; (1edf8 <__ieee754_rem_pio2+0x290>)
   1ed66:	ee30 7b07 	vadd.f64	d7, d0, d7
   1ed6a:	428d      	cmp	r5, r1
   1ed6c:	d00e      	beq.n	1ed8c <__ieee754_rem_pio2+0x224>
   1ed6e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 1eda8 <__ieee754_rem_pio2+0x240>
   1ed72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ed76:	ee37 5b06 	vadd.f64	d5, d7, d6
   1ed7a:	ee37 7b45 	vsub.f64	d7, d7, d5
   1ed7e:	ed84 5b00 	vstr	d5, [r4]
   1ed82:	ee37 7b06 	vadd.f64	d7, d7, d6
   1ed86:	ed84 7b02 	vstr	d7, [r4, #8]
   1ed8a:	e715      	b.n	1ebb8 <__ieee754_rem_pio2+0x50>
   1ed8c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 1edb8 <__ieee754_rem_pio2+0x250>
   1ed90:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 1edc0 <__ieee754_rem_pio2+0x258>
   1ed94:	ee37 7b05 	vadd.f64	d7, d7, d5
   1ed98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ed9c:	e7eb      	b.n	1ed76 <__ieee754_rem_pio2+0x20e>
   1ed9e:	bf00      	nop
   1eda0:	54400000 	.word	0x54400000
   1eda4:	3ff921fb 	.word	0x3ff921fb
   1eda8:	1a626331 	.word	0x1a626331
   1edac:	3dd0b461 	.word	0x3dd0b461
   1edb0:	00000000 	.word	0x00000000
   1edb4:	41700000 	.word	0x41700000
   1edb8:	1a600000 	.word	0x1a600000
   1edbc:	3dd0b461 	.word	0x3dd0b461
   1edc0:	2e037073 	.word	0x2e037073
   1edc4:	3ba3198a 	.word	0x3ba3198a
   1edc8:	6dc9c883 	.word	0x6dc9c883
   1edcc:	3fe45f30 	.word	0x3fe45f30
   1edd0:	2e000000 	.word	0x2e000000
   1edd4:	3ba3198a 	.word	0x3ba3198a
   1edd8:	252049c1 	.word	0x252049c1
   1eddc:	397b839a 	.word	0x397b839a
   1ede0:	3fe921fb 	.word	0x3fe921fb
   1ede4:	4002d97b 	.word	0x4002d97b
   1ede8:	413921fb 	.word	0x413921fb
   1edec:	7fefffff 	.word	0x7fefffff
   1edf0:	200087d8 	.word	0x200087d8
   1edf4:	200055a4 	.word	0x200055a4
   1edf8:	3ff921fb 	.word	0x3ff921fb

0001edfc <with_errno>:
   1edfc:	b510      	push	{r4, lr}
   1edfe:	b082      	sub	sp, #8
   1ee00:	ed8d 0b00 	vstr	d0, [sp]
   1ee04:	4604      	mov	r4, r0
   1ee06:	f003 fbb1 	bl	2256c <__errno>
   1ee0a:	ed9d 0b00 	vldr	d0, [sp]
   1ee0e:	6004      	str	r4, [r0, #0]
   1ee10:	b002      	add	sp, #8
   1ee12:	bd10      	pop	{r4, pc}

0001ee14 <xflow>:
   1ee14:	b082      	sub	sp, #8
   1ee16:	b158      	cbz	r0, 1ee30 <xflow+0x1c>
   1ee18:	eeb1 7b40 	vneg.f64	d7, d0
   1ee1c:	ed8d 7b00 	vstr	d7, [sp]
   1ee20:	ed9d 7b00 	vldr	d7, [sp]
   1ee24:	2022      	movs	r0, #34	; 0x22
   1ee26:	ee20 0b07 	vmul.f64	d0, d0, d7
   1ee2a:	b002      	add	sp, #8
   1ee2c:	f7ff bfe6 	b.w	1edfc <with_errno>
   1ee30:	eeb0 7b40 	vmov.f64	d7, d0
   1ee34:	e7f2      	b.n	1ee1c <xflow+0x8>
   1ee36:	bf00      	nop

0001ee38 <__math_uflow>:
   1ee38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1ee40 <__math_uflow+0x8>
   1ee3c:	f7ff bfea 	b.w	1ee14 <xflow>
   1ee40:	00000000 	.word	0x00000000
   1ee44:	10000000 	.word	0x10000000

0001ee48 <__math_oflow>:
   1ee48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1ee50 <__math_oflow+0x8>
   1ee4c:	f7ff bfe2 	b.w	1ee14 <xflow>
   1ee50:	00000000 	.word	0x00000000
   1ee54:	70000000 	.word	0x70000000

0001ee58 <__math_divzero>:
   1ee58:	b082      	sub	sp, #8
   1ee5a:	2800      	cmp	r0, #0
   1ee5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1ee60:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
   1ee64:	fe06 7b07 	vseleq.f64	d7, d6, d7
   1ee68:	ed8d 7b00 	vstr	d7, [sp]
   1ee6c:	ed9d 0b00 	vldr	d0, [sp]
   1ee70:	ed9f 7b03 	vldr	d7, [pc, #12]	; 1ee80 <__math_divzero+0x28>
   1ee74:	2022      	movs	r0, #34	; 0x22
   1ee76:	ee80 0b07 	vdiv.f64	d0, d0, d7
   1ee7a:	b002      	add	sp, #8
   1ee7c:	f7ff bfbe 	b.w	1edfc <with_errno>
	...

0001ee88 <__math_invalid>:
   1ee88:	eeb4 0b40 	vcmp.f64	d0, d0
   1ee8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ee90:	ee30 7b40 	vsub.f64	d7, d0, d0
   1ee94:	ee87 6b07 	vdiv.f64	d6, d7, d7
   1ee98:	eeb0 0b46 	vmov.f64	d0, d6
   1ee9c:	d602      	bvs.n	1eea4 <__math_invalid+0x1c>
   1ee9e:	2021      	movs	r0, #33	; 0x21
   1eea0:	f7ff bfac 	b.w	1edfc <with_errno>
   1eea4:	4770      	bx	lr
   1eea6:	bf00      	nop

0001eea8 <__math_check_uflow>:
   1eea8:	eeb5 0b40 	vcmp.f64	d0, #0.0
   1eeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1eeb0:	d000      	beq.n	1eeb4 <__math_check_uflow+0xc>
   1eeb2:	4770      	bx	lr
   1eeb4:	2022      	movs	r0, #34	; 0x22
   1eeb6:	f7ff bfa1 	b.w	1edfc <with_errno>
   1eeba:	bf00      	nop
   1eebc:	0000      	movs	r0, r0
	...

0001eec0 <__math_check_oflow>:
   1eec0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 1eee0 <__math_check_oflow+0x20>
   1eec4:	eeb0 7bc0 	vabs.f64	d7, d0
   1eec8:	eeb4 7b46 	vcmp.f64	d7, d6
   1eecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1eed0:	dc00      	bgt.n	1eed4 <__math_check_oflow+0x14>
   1eed2:	4770      	bx	lr
   1eed4:	2022      	movs	r0, #34	; 0x22
   1eed6:	f7ff bf91 	b.w	1edfc <with_errno>
   1eeda:	bf00      	nop
   1eedc:	f3af 8000 	nop.w
   1eee0:	ffffffff 	.word	0xffffffff
   1eee4:	7fefffff 	.word	0x7fefffff

0001eee8 <log>:
   1eee8:	b570      	push	{r4, r5, r6, lr}
   1eeea:	ec53 2b10 	vmov	r2, r3, d0
   1eeee:	4c78      	ldr	r4, [pc, #480]	; (1f0d0 <log+0x1e8>)
   1eef0:	f103 4c40 	add.w	ip, r3, #3221225472	; 0xc0000000
   1eef4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1eef8:	f50c 1c90 	add.w	ip, ip, #1179648	; 0x120000
   1eefc:	4295      	cmp	r5, r2
   1eefe:	eb74 040c 	sbcs.w	r4, r4, ip
   1ef02:	ed2d 8b06 	vpush	{d8-d10}
   1ef06:	ee10 0a10 	vmov	r0, s0
   1ef0a:	461e      	mov	r6, r3
   1ef0c:	d252      	bcs.n	1efb4 <log+0xcc>
   1ef0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   1ef12:	f1ae 0510 	sub.w	r5, lr, #16
   1ef16:	f647 74df 	movw	r4, #32735	; 0x7fdf
   1ef1a:	42a5      	cmp	r5, r4
   1ef1c:	f200 809f 	bhi.w	1f05e <log+0x176>
   1ef20:	eebf 8b00 	vmov.f64	d8, #240	; 0xbf800000 -1.0
   1ef24:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
   1ef28:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
   1ef2c:	f3c3 3246 	ubfx	r2, r3, #13, #7
   1ef30:	ea4f 5c13 	mov.w	ip, r3, lsr #20
   1ef34:	151b      	asrs	r3, r3, #20
   1ef36:	ee07 3a90 	vmov	s15, r3
   1ef3a:	4b66      	ldr	r3, [pc, #408]	; (1f0d4 <log+0x1ec>)
   1ef3c:	eb03 1402 	add.w	r4, r3, r2, lsl #4
   1ef40:	ed93 6b00 	vldr	d6, [r3]
   1ef44:	ed94 1b26 	vldr	d1, [r4, #152]	; 0x98
   1ef48:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   1ef4c:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
   1ef50:	eeb8 9be7 	vcvt.f64.s32	d9, s15
   1ef54:	ed93 5b02 	vldr	d5, [r3, #8]
   1ef58:	eea6 1b09 	vfma.f64	d1, d6, d9
   1ef5c:	ed93 2b04 	vldr	d2, [r3, #16]
   1ef60:	ed93 3b08 	vldr	d3, [r3, #32]
   1ef64:	ed93 7b06 	vldr	d7, [r3, #24]
   1ef68:	ed94 0b24 	vldr	d0, [r4, #144]	; 0x90
   1ef6c:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
   1ef70:	1e02      	subs	r2, r0, #0
   1ef72:	eba6 030c 	sub.w	r3, r6, ip
   1ef76:	ec43 2b1a 	vmov	d10, r2, r3
   1ef7a:	eeaa 8b00 	vfma.f64	d8, d10, d0
   1ef7e:	eea4 6b08 	vfma.f64	d6, d4, d8
   1ef82:	eea3 7b08 	vfma.f64	d7, d3, d8
   1ef86:	ee28 4b08 	vmul.f64	d4, d8, d8
   1ef8a:	eea6 7b04 	vfma.f64	d7, d6, d4
   1ef8e:	ee38 6b01 	vadd.f64	d6, d8, d1
   1ef92:	ee31 0b46 	vsub.f64	d0, d1, d6
   1ef96:	ee30 0b08 	vadd.f64	d0, d0, d8
   1ef9a:	ee28 8b04 	vmul.f64	d8, d8, d4
   1ef9e:	eea5 0b09 	vfma.f64	d0, d5, d9
   1efa2:	eea2 0b04 	vfma.f64	d0, d2, d4
   1efa6:	eea8 0b07 	vfma.f64	d0, d8, d7
   1efaa:	ee30 0b06 	vadd.f64	d0, d0, d6
   1efae:	ecbd 8b06 	vpop	{d8-d10}
   1efb2:	bd70      	pop	{r4, r5, r6, pc}
   1efb4:	4c48      	ldr	r4, [pc, #288]	; (1f0d8 <log+0x1f0>)
   1efb6:	42a3      	cmp	r3, r4
   1efb8:	bf08      	it	eq
   1efba:	2a00      	cmpeq	r2, #0
   1efbc:	d079      	beq.n	1f0b2 <log+0x1ca>
   1efbe:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
   1efc2:	ee30 1b41 	vsub.f64	d1, d0, d1
   1efc6:	4943      	ldr	r1, [pc, #268]	; (1f0d4 <log+0x1ec>)
   1efc8:	ee21 ab01 	vmul.f64	d10, d1, d1
   1efcc:	ed91 3b12 	vldr	d3, [r1, #72]	; 0x48
   1efd0:	ed91 4b18 	vldr	d4, [r1, #96]	; 0x60
   1efd4:	ed91 7b10 	vldr	d7, [r1, #64]	; 0x40
   1efd8:	ed91 6b16 	vldr	d6, [r1, #88]	; 0x58
   1efdc:	eea3 7b01 	vfma.f64	d7, d3, d1
   1efe0:	eea4 6b01 	vfma.f64	d6, d4, d1
   1efe4:	ed91 3b1e 	vldr	d3, [r1, #120]	; 0x78
   1efe8:	ed91 4b1c 	vldr	d4, [r1, #112]	; 0x70
   1efec:	ed91 8b0e 	vldr	d8, [r1, #56]	; 0x38
   1eff0:	eea3 4b01 	vfma.f64	d4, d3, d1
   1eff4:	ed9f 9b30 	vldr	d9, [pc, #192]	; 1f0b8 <log+0x1d0>
   1eff8:	ed91 5b14 	vldr	d5, [r1, #80]	; 0x50
   1effc:	ed91 0b20 	vldr	d0, [r1, #128]	; 0x80
   1f000:	eea5 7b0a 	vfma.f64	d7, d5, d10
   1f004:	eeb0 5b41 	vmov.f64	d5, d1
   1f008:	ed91 2b1a 	vldr	d2, [r1, #104]	; 0x68
   1f00c:	eea0 4b0a 	vfma.f64	d4, d0, d10
   1f010:	eea1 5b09 	vfma.f64	d5, d1, d9
   1f014:	ed91 3b22 	vldr	d3, [r1, #136]	; 0x88
   1f018:	eea1 5b49 	vfms.f64	d5, d1, d9
   1f01c:	eea2 6b0a 	vfma.f64	d6, d2, d10
   1f020:	eeb0 0b41 	vmov.f64	d0, d1
   1f024:	ee21 ab0a 	vmul.f64	d10, d1, d10
   1f028:	eea3 4b0a 	vfma.f64	d4, d3, d10
   1f02c:	eea4 6b0a 	vfma.f64	d6, d4, d10
   1f030:	ee25 4b05 	vmul.f64	d4, d5, d5
   1f034:	eea6 7b0a 	vfma.f64	d7, d6, d10
   1f038:	eea4 0b08 	vfma.f64	d0, d4, d8
   1f03c:	ee31 6b45 	vsub.f64	d6, d1, d5
   1f040:	ee31 5b05 	vadd.f64	d5, d1, d5
   1f044:	ee28 6b06 	vmul.f64	d6, d8, d6
   1f048:	ee31 1b40 	vsub.f64	d1, d1, d0
   1f04c:	eea4 1b08 	vfma.f64	d1, d4, d8
   1f050:	eea6 1b05 	vfma.f64	d1, d6, d5
   1f054:	eea7 1b0a 	vfma.f64	d1, d7, d10
   1f058:	ee30 0b01 	vadd.f64	d0, d0, d1
   1f05c:	e7a7      	b.n	1efae <log+0xc6>
   1f05e:	1894      	adds	r4, r2, r2
   1f060:	eb43 0503 	adc.w	r5, r3, r3
   1f064:	432c      	orrs	r4, r5
   1f066:	d01d      	beq.n	1f0a4 <log+0x1bc>
   1f068:	4c1c      	ldr	r4, [pc, #112]	; (1f0dc <log+0x1f4>)
   1f06a:	42a3      	cmp	r3, r4
   1f06c:	bf08      	it	eq
   1f06e:	2a00      	cmpeq	r2, #0
   1f070:	d09d      	beq.n	1efae <log+0xc6>
   1f072:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
   1f076:	d10d      	bne.n	1f094 <log+0x1ac>
   1f078:	f647 71f0 	movw	r1, #32752	; 0x7ff0
   1f07c:	ea31 010e 	bics.w	r1, r1, lr
   1f080:	d008      	beq.n	1f094 <log+0x1ac>
   1f082:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 1f0c0 <log+0x1d8>
   1f086:	ee20 7b07 	vmul.f64	d7, d0, d7
   1f08a:	ec51 0b17 	vmov	r0, r1, d7
   1f08e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   1f092:	e745      	b.n	1ef20 <log+0x38>
   1f094:	ecbd 8b06 	vpop	{d8-d10}
   1f098:	ec43 2b10 	vmov	d0, r2, r3
   1f09c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f0a0:	f7ff bef2 	b.w	1ee88 <__math_invalid>
   1f0a4:	ecbd 8b06 	vpop	{d8-d10}
   1f0a8:	2001      	movs	r0, #1
   1f0aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f0ae:	f7ff bed3 	b.w	1ee58 <__math_divzero>
   1f0b2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 1f0c8 <log+0x1e0>
   1f0b6:	e77a      	b.n	1efae <log+0xc6>
   1f0b8:	00000000 	.word	0x00000000
   1f0bc:	41a00000 	.word	0x41a00000
   1f0c0:	00000000 	.word	0x00000000
   1f0c4:	43300000 	.word	0x43300000
	...
   1f0d0:	000308ff 	.word	0x000308ff
   1f0d4:	20000ef0 	.word	0x20000ef0
   1f0d8:	3ff00000 	.word	0x3ff00000
   1f0dc:	7ff00000 	.word	0x7ff00000

0001f0e0 <__kernel_rem_pio2>:
   1f0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0e4:	ed2d 8b08 	vpush	{d8-d11}
   1f0e8:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   1f0ec:	461c      	mov	r4, r3
   1f0ee:	9304      	str	r3, [sp, #16]
   1f0f0:	9107      	str	r1, [sp, #28]
   1f0f2:	4bab      	ldr	r3, [pc, #684]	; (1f3a0 <__kernel_rem_pio2+0x2c0>)
   1f0f4:	99a6      	ldr	r1, [sp, #664]	; 0x298
   1f0f6:	f112 0f14 	cmn.w	r2, #20
   1f0fa:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   1f0fe:	4682      	mov	sl, r0
   1f100:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1f104:	f2c0 8299 	blt.w	1f63a <__kernel_rem_pio2+0x55a>
   1f108:	49a6      	ldr	r1, [pc, #664]	; (1f3a4 <__kernel_rem_pio2+0x2c4>)
   1f10a:	1ed3      	subs	r3, r2, #3
   1f10c:	fb81 0103 	smull	r0, r1, r1, r3
   1f110:	17db      	asrs	r3, r3, #31
   1f112:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1f116:	9303      	str	r3, [sp, #12]
   1f118:	3301      	adds	r3, #1
   1f11a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1f11e:	00db      	lsls	r3, r3, #3
   1f120:	18d3      	adds	r3, r2, r3
   1f122:	9306      	str	r3, [sp, #24]
   1f124:	9b03      	ldr	r3, [sp, #12]
   1f126:	eb15 0108 	adds.w	r1, r5, r8
   1f12a:	eba3 0308 	sub.w	r3, r3, r8
   1f12e:	d41a      	bmi.n	1f166 <__kernel_rem_pio2+0x86>
   1f130:	3101      	adds	r1, #1
   1f132:	ed9f 6b95 	vldr	d6, [pc, #596]	; 1f388 <__kernel_rem_pio2+0x2a8>
   1f136:	98a7      	ldr	r0, [sp, #668]	; 0x29c
   1f138:	4419      	add	r1, r3
   1f13a:	aa1c      	add	r2, sp, #112	; 0x70
   1f13c:	e00a      	b.n	1f154 <__kernel_rem_pio2+0x74>
   1f13e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1f142:	ee07 4a90 	vmov	s15, r4
   1f146:	3301      	adds	r3, #1
   1f148:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1f14c:	428b      	cmp	r3, r1
   1f14e:	eca2 7b02 	vstmia	r2!, {d7}
   1f152:	d008      	beq.n	1f166 <__kernel_rem_pio2+0x86>
   1f154:	2b00      	cmp	r3, #0
   1f156:	daf2      	bge.n	1f13e <__kernel_rem_pio2+0x5e>
   1f158:	eeb0 7b46 	vmov.f64	d7, d6
   1f15c:	3301      	adds	r3, #1
   1f15e:	428b      	cmp	r3, r1
   1f160:	eca2 7b02 	vstmia	r2!, {d7}
   1f164:	d1f6      	bne.n	1f154 <__kernel_rem_pio2+0x74>
   1f166:	2d00      	cmp	r5, #0
   1f168:	f2c0 82c9 	blt.w	1f6fe <__kernel_rem_pio2+0x61e>
   1f16c:	9b04      	ldr	r3, [sp, #16]
   1f16e:	aa1c      	add	r2, sp, #112	; 0x70
   1f170:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1f174:	ae6c      	add	r6, sp, #432	; 0x1b0
   1f176:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   1f17a:	4640      	mov	r0, r8
   1f17c:	18ef      	adds	r7, r5, r3
   1f17e:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   1f182:	f1b8 0f00 	cmp.w	r8, #0
   1f186:	ed9f 7b80 	vldr	d7, [pc, #512]	; 1f388 <__kernel_rem_pio2+0x2a8>
   1f18a:	db09      	blt.n	1f1a0 <__kernel_rem_pio2+0xc0>
   1f18c:	4622      	mov	r2, r4
   1f18e:	4653      	mov	r3, sl
   1f190:	ecb3 5b02 	vldmia	r3!, {d5}
   1f194:	ed32 6b02 	vldmdb	r2!, {d6}
   1f198:	428b      	cmp	r3, r1
   1f19a:	eea5 7b06 	vfma.f64	d7, d5, d6
   1f19e:	d1f7      	bne.n	1f190 <__kernel_rem_pio2+0xb0>
   1f1a0:	3001      	adds	r0, #1
   1f1a2:	42b8      	cmp	r0, r7
   1f1a4:	eca6 7b02 	vstmia	r6!, {d7}
   1f1a8:	f104 0408 	add.w	r4, r4, #8
   1f1ac:	d1e9      	bne.n	1f182 <__kernel_rem_pio2+0xa2>
   1f1ae:	af08      	add	r7, sp, #32
   1f1b0:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   1f1b4:	ed9f 9b76 	vldr	d9, [pc, #472]	; 1f390 <__kernel_rem_pio2+0x2b0>
   1f1b8:	ed9f 8b77 	vldr	d8, [pc, #476]	; 1f398 <__kernel_rem_pio2+0x2b8>
   1f1bc:	3b04      	subs	r3, #4
   1f1be:	f8dd b018 	ldr.w	fp, [sp, #24]
   1f1c2:	9305      	str	r3, [sp, #20]
   1f1c4:	eb0a 040c 	add.w	r4, sl, ip
   1f1c8:	eb07 0985 	add.w	r9, r7, r5, lsl #2
   1f1cc:	ae6c      	add	r6, sp, #432	; 0x1b0
   1f1ce:	4629      	mov	r1, r5
   1f1d0:	9501      	str	r5, [sp, #4]
   1f1d2:	ab94      	add	r3, sp, #592	; 0x250
   1f1d4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1f1d8:	2900      	cmp	r1, #0
   1f1da:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
   1f1de:	dd16      	ble.n	1f20e <__kernel_rem_pio2+0x12e>
   1f1e0:	eb06 03c1 	add.w	r3, r6, r1, lsl #3
   1f1e4:	463a      	mov	r2, r7
   1f1e6:	ee20 7b09 	vmul.f64	d7, d0, d9
   1f1ea:	ed33 5b02 	vldmdb	r3!, {d5}
   1f1ee:	eeb0 6b40 	vmov.f64	d6, d0
   1f1f2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1f1f6:	42b3      	cmp	r3, r6
   1f1f8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1f1fc:	eea7 6b48 	vfms.f64	d6, d7, d8
   1f200:	eebd 6bc6 	vcvt.s32.f64	s12, d6
   1f204:	ee37 0b05 	vadd.f64	d0, d7, d5
   1f208:	eca2 6a01 	vstmia	r2!, {s12}
   1f20c:	d1eb      	bne.n	1f1e6 <__kernel_rem_pio2+0x106>
   1f20e:	4658      	mov	r0, fp
   1f210:	9102      	str	r1, [sp, #8]
   1f212:	f000 fba9 	bl	1f968 <scalbn>
   1f216:	eeb0 ab40 	vmov.f64	d10, d0
   1f21a:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
   1f21e:	ee2a 0b00 	vmul.f64	d0, d10, d0
   1f222:	f000 fc29 	bl	1fa78 <floor>
   1f226:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
   1f22a:	eea0 ab47 	vfms.f64	d10, d0, d7
   1f22e:	eebd bbca 	vcvt.s32.f64	s22, d10
   1f232:	f1bb 0f00 	cmp.w	fp, #0
   1f236:	eeb8 7bcb 	vcvt.f64.s32	d7, s22
   1f23a:	9902      	ldr	r1, [sp, #8]
   1f23c:	ee3a ab47 	vsub.f64	d10, d10, d7
   1f240:	dd74      	ble.n	1f32c <__kernel_rem_pio2+0x24c>
   1f242:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1f246:	f1cb 0318 	rsb	r3, fp, #24
   1f24a:	f857 202e 	ldr.w	r2, [r7, lr, lsl #2]
   1f24e:	fa42 fc03 	asr.w	ip, r2, r3
   1f252:	fa0c f303 	lsl.w	r3, ip, r3
   1f256:	1ad2      	subs	r2, r2, r3
   1f258:	f1cb 0017 	rsb	r0, fp, #23
   1f25c:	ee1b 3a10 	vmov	r3, s22
   1f260:	fa42 f500 	asr.w	r5, r2, r0
   1f264:	4463      	add	r3, ip
   1f266:	2d00      	cmp	r5, #0
   1f268:	f847 202e 	str.w	r2, [r7, lr, lsl #2]
   1f26c:	ee0b 3a10 	vmov	s22, r3
   1f270:	dc64      	bgt.n	1f33c <__kernel_rem_pio2+0x25c>
   1f272:	eeb5 ab40 	vcmp.f64	d10, #0.0
   1f276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f27a:	f040 80c4 	bne.w	1f406 <__kernel_rem_pio2+0x326>
   1f27e:	9b01      	ldr	r3, [sp, #4]
   1f280:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1f284:	4573      	cmp	r3, lr
   1f286:	dc0d      	bgt.n	1f2a4 <__kernel_rem_pio2+0x1c4>
   1f288:	ea4f 0c81 	mov.w	ip, r1, lsl #2
   1f28c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   1f290:	2000      	movs	r0, #0
   1f292:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1f296:	454b      	cmp	r3, r9
   1f298:	ea40 0002 	orr.w	r0, r0, r2
   1f29c:	d1f9      	bne.n	1f292 <__kernel_rem_pio2+0x1b2>
   1f29e:	2800      	cmp	r0, #0
   1f2a0:	f040 80f2 	bne.w	1f488 <__kernel_rem_pio2+0x3a8>
   1f2a4:	9b01      	ldr	r3, [sp, #4]
   1f2a6:	3b01      	subs	r3, #1
   1f2a8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   1f2ac:	2b00      	cmp	r3, #0
   1f2ae:	f040 80e6 	bne.w	1f47e <__kernel_rem_pio2+0x39e>
   1f2b2:	9b05      	ldr	r3, [sp, #20]
   1f2b4:	2501      	movs	r5, #1
   1f2b6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1f2ba:	3501      	adds	r5, #1
   1f2bc:	2a00      	cmp	r2, #0
   1f2be:	d0fa      	beq.n	1f2b6 <__kernel_rem_pio2+0x1d6>
   1f2c0:	f101 0e01 	add.w	lr, r1, #1
   1f2c4:	440d      	add	r5, r1
   1f2c6:	4670      	mov	r0, lr
   1f2c8:	9b04      	ldr	r3, [sp, #16]
   1f2ca:	4419      	add	r1, r3
   1f2cc:	9b03      	ldr	r3, [sp, #12]
   1f2ce:	eb03 0c0e 	add.w	ip, r3, lr
   1f2d2:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1f2d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
   1f2d8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1f2dc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1f2e0:	ab1c      	add	r3, sp, #112	; 0x70
   1f2e2:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
   1f2e6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1f2ea:	ed9c 7a01 	vldr	s14, [ip, #4]
   1f2ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1f2f2:	f1b8 0f00 	cmp.w	r8, #0
   1f2f6:	ed81 7b00 	vstr	d7, [r1]
   1f2fa:	f10c 0c04 	add.w	ip, ip, #4
   1f2fe:	460a      	mov	r2, r1
   1f300:	ed9f 6b21 	vldr	d6, [pc, #132]	; 1f388 <__kernel_rem_pio2+0x2a8>
   1f304:	f101 0108 	add.w	r1, r1, #8
   1f308:	db09      	blt.n	1f31e <__kernel_rem_pio2+0x23e>
   1f30a:	4653      	mov	r3, sl
   1f30c:	e001      	b.n	1f312 <__kernel_rem_pio2+0x232>
   1f30e:	ed32 7b02 	vldmdb	r2!, {d7}
   1f312:	ecb3 5b02 	vldmia	r3!, {d5}
   1f316:	42a3      	cmp	r3, r4
   1f318:	eea5 6b07 	vfma.f64	d6, d5, d7
   1f31c:	d1f7      	bne.n	1f30e <__kernel_rem_pio2+0x22e>
   1f31e:	3001      	adds	r0, #1
   1f320:	42a8      	cmp	r0, r5
   1f322:	ecae 6b02 	vstmia	lr!, {d6}
   1f326:	dde0      	ble.n	1f2ea <__kernel_rem_pio2+0x20a>
   1f328:	4629      	mov	r1, r5
   1f32a:	e752      	b.n	1f1d2 <__kernel_rem_pio2+0xf2>
   1f32c:	f040 809d 	bne.w	1f46a <__kernel_rem_pio2+0x38a>
   1f330:	1e4b      	subs	r3, r1, #1
   1f332:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
   1f336:	15ed      	asrs	r5, r5, #23
   1f338:	2d00      	cmp	r5, #0
   1f33a:	dd9a      	ble.n	1f272 <__kernel_rem_pio2+0x192>
   1f33c:	ee1b 3a10 	vmov	r3, s22
   1f340:	2900      	cmp	r1, #0
   1f342:	f103 0301 	add.w	r3, r3, #1
   1f346:	ee0b 3a10 	vmov	s22, r3
   1f34a:	f340 818c 	ble.w	1f666 <__kernel_rem_pio2+0x586>
   1f34e:	683a      	ldr	r2, [r7, #0]
   1f350:	2a00      	cmp	r2, #0
   1f352:	f040 8082 	bne.w	1f45a <__kernel_rem_pio2+0x37a>
   1f356:	2901      	cmp	r1, #1
   1f358:	d02d      	beq.n	1f3b6 <__kernel_rem_pio2+0x2d6>
   1f35a:	463b      	mov	r3, r7
   1f35c:	2001      	movs	r0, #1
   1f35e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1f362:	2a00      	cmp	r2, #0
   1f364:	d07c      	beq.n	1f460 <__kernel_rem_pio2+0x380>
   1f366:	1c43      	adds	r3, r0, #1
   1f368:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
   1f36c:	4299      	cmp	r1, r3
   1f36e:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   1f372:	dd1f      	ble.n	1f3b4 <__kernel_rem_pio2+0x2d4>
   1f374:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   1f378:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   1f37c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   1f380:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   1f384:	e011      	b.n	1f3aa <__kernel_rem_pio2+0x2ca>
   1f386:	bf00      	nop
	...
   1f394:	3e700000 	.word	0x3e700000
   1f398:	00000000 	.word	0x00000000
   1f39c:	41700000 	.word	0x41700000
   1f3a0:	20005484 	.word	0x20005484
   1f3a4:	2aaaaaab 	.word	0x2aaaaaab
   1f3a8:	681a      	ldr	r2, [r3, #0]
   1f3aa:	1a82      	subs	r2, r0, r2
   1f3ac:	f843 2b04 	str.w	r2, [r3], #4
   1f3b0:	4563      	cmp	r3, ip
   1f3b2:	d1f9      	bne.n	1f3a8 <__kernel_rem_pio2+0x2c8>
   1f3b4:	2201      	movs	r2, #1
   1f3b6:	f1bb 0f00 	cmp.w	fp, #0
   1f3ba:	dd0d      	ble.n	1f3d8 <__kernel_rem_pio2+0x2f8>
   1f3bc:	f1bb 0f01 	cmp.w	fp, #1
   1f3c0:	f000 8133 	beq.w	1f62a <__kernel_rem_pio2+0x54a>
   1f3c4:	f1bb 0f02 	cmp.w	fp, #2
   1f3c8:	d106      	bne.n	1f3d8 <__kernel_rem_pio2+0x2f8>
   1f3ca:	1e48      	subs	r0, r1, #1
   1f3cc:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   1f3d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1f3d4:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   1f3d8:	2d02      	cmp	r5, #2
   1f3da:	f47f af4a 	bne.w	1f272 <__kernel_rem_pio2+0x192>
   1f3de:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1f3e2:	ee30 ab4a 	vsub.f64	d10, d0, d10
   1f3e6:	2a00      	cmp	r2, #0
   1f3e8:	f43f af43 	beq.w	1f272 <__kernel_rem_pio2+0x192>
   1f3ec:	4658      	mov	r0, fp
   1f3ee:	9102      	str	r1, [sp, #8]
   1f3f0:	f000 faba 	bl	1f968 <scalbn>
   1f3f4:	ee3a ab40 	vsub.f64	d10, d10, d0
   1f3f8:	eeb5 ab40 	vcmp.f64	d10, #0.0
   1f3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f400:	9902      	ldr	r1, [sp, #8]
   1f402:	f43f af3c 	beq.w	1f27e <__kernel_rem_pio2+0x19e>
   1f406:	9c06      	ldr	r4, [sp, #24]
   1f408:	eeb0 0b4a 	vmov.f64	d0, d10
   1f40c:	4260      	negs	r0, r4
   1f40e:	46a8      	mov	r8, r5
   1f410:	468b      	mov	fp, r1
   1f412:	9d01      	ldr	r5, [sp, #4]
   1f414:	f000 faa8 	bl	1f968 <scalbn>
   1f418:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 1f720 <__kernel_rem_pio2+0x640>
   1f41c:	eeb4 0bc6 	vcmpe.f64	d0, d6
   1f420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f424:	f2c0 8147 	blt.w	1f6b6 <__kernel_rem_pio2+0x5d6>
   1f428:	ed9f 7bbf 	vldr	d7, [pc, #764]	; 1f728 <__kernel_rem_pio2+0x648>
   1f42c:	ee20 7b07 	vmul.f64	d7, d0, d7
   1f430:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1f434:	f10b 0201 	add.w	r2, fp, #1
   1f438:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1f43c:	eea5 0b46 	vfms.f64	d0, d5, d6
   1f440:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   1f444:	3418      	adds	r4, #24
   1f446:	ee10 3a10 	vmov	r3, s0
   1f44a:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   1f44e:	ee17 3a10 	vmov	r3, s14
   1f452:	9406      	str	r4, [sp, #24]
   1f454:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   1f458:	e02a      	b.n	1f4b0 <__kernel_rem_pio2+0x3d0>
   1f45a:	2301      	movs	r3, #1
   1f45c:	2000      	movs	r0, #0
   1f45e:	e783      	b.n	1f368 <__kernel_rem_pio2+0x288>
   1f460:	3001      	adds	r0, #1
   1f462:	4288      	cmp	r0, r1
   1f464:	f47f af7b 	bne.w	1f35e <__kernel_rem_pio2+0x27e>
   1f468:	e7a5      	b.n	1f3b6 <__kernel_rem_pio2+0x2d6>
   1f46a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   1f46e:	eeb4 abc7 	vcmpe.f64	d10, d7
   1f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f476:	f280 80e5 	bge.w	1f644 <__kernel_rem_pio2+0x564>
   1f47a:	2500      	movs	r5, #0
   1f47c:	e6f9      	b.n	1f272 <__kernel_rem_pio2+0x192>
   1f47e:	f101 0e01 	add.w	lr, r1, #1
   1f482:	4670      	mov	r0, lr
   1f484:	4675      	mov	r5, lr
   1f486:	e71f      	b.n	1f2c8 <__kernel_rem_pio2+0x1e8>
   1f488:	9b06      	ldr	r3, [sp, #24]
   1f48a:	f1a3 0118 	sub.w	r1, r3, #24
   1f48e:	f857 302e 	ldr.w	r3, [r7, lr, lsl #2]
   1f492:	9106      	str	r1, [sp, #24]
   1f494:	46a8      	mov	r8, r5
   1f496:	4672      	mov	r2, lr
   1f498:	9d01      	ldr	r5, [sp, #4]
   1f49a:	b94b      	cbnz	r3, 1f4b0 <__kernel_rem_pio2+0x3d0>
   1f49c:	f1ac 0304 	sub.w	r3, ip, #4
   1f4a0:	443b      	add	r3, r7
   1f4a2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   1f4a6:	3a01      	subs	r2, #1
   1f4a8:	3918      	subs	r1, #24
   1f4aa:	2800      	cmp	r0, #0
   1f4ac:	d0f9      	beq.n	1f4a2 <__kernel_rem_pio2+0x3c2>
   1f4ae:	9106      	str	r1, [sp, #24]
   1f4b0:	9806      	ldr	r0, [sp, #24]
   1f4b2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1f4b6:	9201      	str	r2, [sp, #4]
   1f4b8:	f000 fa56 	bl	1f968 <scalbn>
   1f4bc:	9a01      	ldr	r2, [sp, #4]
   1f4be:	2a00      	cmp	r2, #0
   1f4c0:	f2c0 8121 	blt.w	1f706 <__kernel_rem_pio2+0x626>
   1f4c4:	ed9f 6b98 	vldr	d6, [pc, #608]	; 1f728 <__kernel_rem_pio2+0x648>
   1f4c8:	f102 0c01 	add.w	ip, r2, #1
   1f4cc:	a96c      	add	r1, sp, #432	; 0x1b0
   1f4ce:	eb07 038c 	add.w	r3, r7, ip, lsl #2
   1f4d2:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
   1f4d6:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
   1f4da:	ed33 7a01 	vldmdb	r3!, {s14}
   1f4de:	42bb      	cmp	r3, r7
   1f4e0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1f4e4:	ee27 7b00 	vmul.f64	d7, d7, d0
   1f4e8:	ee20 0b06 	vmul.f64	d0, d0, d6
   1f4ec:	ed21 7b02 	vstmdb	r1!, {d7}
   1f4f0:	d1f3      	bne.n	1f4da <__kernel_rem_pio2+0x3fa>
   1f4f2:	ed9f 4b8f 	vldr	d4, [pc, #572]	; 1f730 <__kernel_rem_pio2+0x650>
   1f4f6:	f1ae 0308 	sub.w	r3, lr, #8
   1f4fa:	a96c      	add	r1, sp, #432	; 0x1b0
   1f4fc:	18ce      	adds	r6, r1, r3
   1f4fe:	2400      	movs	r4, #0
   1f500:	af44      	add	r7, sp, #272	; 0x110
   1f502:	2d00      	cmp	r5, #0
   1f504:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 1f738 <__kernel_rem_pio2+0x658>
   1f508:	db10      	blt.n	1f52c <__kernel_rem_pio2+0x44c>
   1f50a:	eeb0 6b44 	vmov.f64	d6, d4
   1f50e:	488c      	ldr	r0, [pc, #560]	; (1f740 <__kernel_rem_pio2+0x660>)
   1f510:	4631      	mov	r1, r6
   1f512:	2300      	movs	r3, #0
   1f514:	e003      	b.n	1f51e <__kernel_rem_pio2+0x43e>
   1f516:	429c      	cmp	r4, r3
   1f518:	db08      	blt.n	1f52c <__kernel_rem_pio2+0x44c>
   1f51a:	ecb0 6b02 	vldmia	r0!, {d6}
   1f51e:	ecb1 5b02 	vldmia	r1!, {d5}
   1f522:	3301      	adds	r3, #1
   1f524:	429d      	cmp	r5, r3
   1f526:	eea5 7b06 	vfma.f64	d7, d5, d6
   1f52a:	daf4      	bge.n	1f516 <__kernel_rem_pio2+0x436>
   1f52c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1f530:	4294      	cmp	r4, r2
   1f532:	ed83 7b00 	vstr	d7, [r3]
   1f536:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   1f53a:	f104 0301 	add.w	r3, r4, #1
   1f53e:	f1a6 0608 	sub.w	r6, r6, #8
   1f542:	d001      	beq.n	1f548 <__kernel_rem_pio2+0x468>
   1f544:	461c      	mov	r4, r3
   1f546:	e7dc      	b.n	1f502 <__kernel_rem_pio2+0x422>
   1f548:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1f54a:	2b02      	cmp	r3, #2
   1f54c:	dc1d      	bgt.n	1f58a <__kernel_rem_pio2+0x4aa>
   1f54e:	2b00      	cmp	r3, #0
   1f550:	f300 808b 	bgt.w	1f66a <__kernel_rem_pio2+0x58a>
   1f554:	d10f      	bne.n	1f576 <__kernel_rem_pio2+0x496>
   1f556:	ed9f 7b78 	vldr	d7, [pc, #480]	; 1f738 <__kernel_rem_pio2+0x658>
   1f55a:	44be      	add	lr, r7
   1f55c:	ed3e 6b02 	vldmdb	lr!, {d6}
   1f560:	4577      	cmp	r7, lr
   1f562:	ee37 7b06 	vadd.f64	d7, d7, d6
   1f566:	d1f9      	bne.n	1f55c <__kernel_rem_pio2+0x47c>
   1f568:	4643      	mov	r3, r8
   1f56a:	b10b      	cbz	r3, 1f570 <__kernel_rem_pio2+0x490>
   1f56c:	eeb1 7b47 	vneg.f64	d7, d7
   1f570:	9b07      	ldr	r3, [sp, #28]
   1f572:	ed83 7b00 	vstr	d7, [r3]
   1f576:	ee1b 3a10 	vmov	r3, s22
   1f57a:	f003 0007 	and.w	r0, r3, #7
   1f57e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   1f582:	ecbd 8b08 	vpop	{d8-d11}
   1f586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f58a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1f58c:	2b03      	cmp	r3, #3
   1f58e:	d1f2      	bne.n	1f576 <__kernel_rem_pio2+0x496>
   1f590:	2a00      	cmp	r2, #0
   1f592:	f000 80e3 	beq.w	1f75c <__kernel_rem_pio2+0x67c>
   1f596:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
   1f59a:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   1f59e:	ed30 6b02 	vldmdb	r0!, {d6}
   1f5a2:	eeb0 5b47 	vmov.f64	d5, d7
   1f5a6:	4287      	cmp	r7, r0
   1f5a8:	ee37 7b06 	vadd.f64	d7, d7, d6
   1f5ac:	ee36 6b47 	vsub.f64	d6, d6, d7
   1f5b0:	ed80 7b00 	vstr	d7, [r0]
   1f5b4:	ee36 6b05 	vadd.f64	d6, d6, d5
   1f5b8:	ed80 6b02 	vstr	d6, [r0, #8]
   1f5bc:	d1ef      	bne.n	1f59e <__kernel_rem_pio2+0x4be>
   1f5be:	2a01      	cmp	r2, #1
   1f5c0:	f340 80cc 	ble.w	1f75c <__kernel_rem_pio2+0x67c>
   1f5c4:	4439      	add	r1, r7
   1f5c6:	ed91 6b00 	vldr	d6, [r1]
   1f5ca:	00da      	lsls	r2, r3, #3
   1f5cc:	a946      	add	r1, sp, #280	; 0x118
   1f5ce:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1f5d2:	ed33 7b02 	vldmdb	r3!, {d7}
   1f5d6:	eeb0 5b46 	vmov.f64	d5, d6
   1f5da:	4299      	cmp	r1, r3
   1f5dc:	ee36 6b07 	vadd.f64	d6, d6, d7
   1f5e0:	ee37 7b46 	vsub.f64	d7, d7, d6
   1f5e4:	ed83 6b00 	vstr	d6, [r3]
   1f5e8:	ee37 7b05 	vadd.f64	d7, d7, d5
   1f5ec:	ed83 7b02 	vstr	d7, [r3, #8]
   1f5f0:	d1ef      	bne.n	1f5d2 <__kernel_rem_pio2+0x4f2>
   1f5f2:	ed9f 7b51 	vldr	d7, [pc, #324]	; 1f738 <__kernel_rem_pio2+0x658>
   1f5f6:	f102 0308 	add.w	r3, r2, #8
   1f5fa:	443b      	add	r3, r7
   1f5fc:	f107 0210 	add.w	r2, r7, #16
   1f600:	ed33 6b02 	vldmdb	r3!, {d6}
   1f604:	429a      	cmp	r2, r3
   1f606:	ee37 7b06 	vadd.f64	d7, d7, d6
   1f60a:	d1f9      	bne.n	1f600 <__kernel_rem_pio2+0x520>
   1f60c:	4643      	mov	r3, r8
   1f60e:	2b00      	cmp	r3, #0
   1f610:	d159      	bne.n	1f6c6 <__kernel_rem_pio2+0x5e6>
   1f612:	e9d7 0100 	ldrd	r0, r1, [r7]
   1f616:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1f61a:	9c07      	ldr	r4, [sp, #28]
   1f61c:	ed84 7b04 	vstr	d7, [r4, #16]
   1f620:	e9c4 0100 	strd	r0, r1, [r4]
   1f624:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1f628:	e7a5      	b.n	1f576 <__kernel_rem_pio2+0x496>
   1f62a:	1e48      	subs	r0, r1, #1
   1f62c:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   1f630:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1f634:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   1f638:	e6ce      	b.n	1f3d8 <__kernel_rem_pio2+0x2f8>
   1f63a:	2100      	movs	r1, #0
   1f63c:	f06f 0317 	mvn.w	r3, #23
   1f640:	9103      	str	r1, [sp, #12]
   1f642:	e56d      	b.n	1f120 <__kernel_rem_pio2+0x40>
   1f644:	ee1b 3a10 	vmov	r3, s22
   1f648:	2900      	cmp	r1, #0
   1f64a:	f103 0301 	add.w	r3, r3, #1
   1f64e:	ee0b 3a10 	vmov	s22, r3
   1f652:	bfc8      	it	gt
   1f654:	2502      	movgt	r5, #2
   1f656:	f73f ae7a 	bgt.w	1f34e <__kernel_rem_pio2+0x26e>
   1f65a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1f65e:	ee37 ab4a 	vsub.f64	d10, d7, d10
   1f662:	2502      	movs	r5, #2
   1f664:	e605      	b.n	1f272 <__kernel_rem_pio2+0x192>
   1f666:	2200      	movs	r2, #0
   1f668:	e6a5      	b.n	1f3b6 <__kernel_rem_pio2+0x2d6>
   1f66a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 1f738 <__kernel_rem_pio2+0x658>
   1f66e:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   1f672:	ed3c 6b02 	vldmdb	ip!, {d6}
   1f676:	4567      	cmp	r7, ip
   1f678:	ee37 7b06 	vadd.f64	d7, d7, d6
   1f67c:	d1f9      	bne.n	1f672 <__kernel_rem_pio2+0x592>
   1f67e:	4643      	mov	r3, r8
   1f680:	ed97 6b00 	vldr	d6, [r7]
   1f684:	bb8b      	cbnz	r3, 1f6ea <__kernel_rem_pio2+0x60a>
   1f686:	9b07      	ldr	r3, [sp, #28]
   1f688:	2a00      	cmp	r2, #0
   1f68a:	ed83 7b00 	vstr	d7, [r3]
   1f68e:	ee36 7b47 	vsub.f64	d7, d6, d7
   1f692:	dd0c      	ble.n	1f6ae <__kernel_rem_pio2+0x5ce>
   1f694:	a946      	add	r1, sp, #280	; 0x118
   1f696:	2301      	movs	r3, #1
   1f698:	ecb1 6b02 	vldmia	r1!, {d6}
   1f69c:	3301      	adds	r3, #1
   1f69e:	429a      	cmp	r2, r3
   1f6a0:	ee37 7b06 	vadd.f64	d7, d7, d6
   1f6a4:	daf8      	bge.n	1f698 <__kernel_rem_pio2+0x5b8>
   1f6a6:	4643      	mov	r3, r8
   1f6a8:	b10b      	cbz	r3, 1f6ae <__kernel_rem_pio2+0x5ce>
   1f6aa:	eeb1 7b47 	vneg.f64	d7, d7
   1f6ae:	9b07      	ldr	r3, [sp, #28]
   1f6b0:	ed83 7b02 	vstr	d7, [r3, #8]
   1f6b4:	e75f      	b.n	1f576 <__kernel_rem_pio2+0x496>
   1f6b6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   1f6ba:	465a      	mov	r2, fp
   1f6bc:	ee10 3a10 	vmov	r3, s0
   1f6c0:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   1f6c4:	e6f4      	b.n	1f4b0 <__kernel_rem_pio2+0x3d0>
   1f6c6:	ed97 5b00 	vldr	d5, [r7]
   1f6ca:	eeb1 7b47 	vneg.f64	d7, d7
   1f6ce:	ed97 6b02 	vldr	d6, [r7, #8]
   1f6d2:	eeb1 5b45 	vneg.f64	d5, d5
   1f6d6:	9b07      	ldr	r3, [sp, #28]
   1f6d8:	eeb1 6b46 	vneg.f64	d6, d6
   1f6dc:	ed83 5b00 	vstr	d5, [r3]
   1f6e0:	ed83 6b02 	vstr	d6, [r3, #8]
   1f6e4:	ed83 7b04 	vstr	d7, [r3, #16]
   1f6e8:	e745      	b.n	1f576 <__kernel_rem_pio2+0x496>
   1f6ea:	9b07      	ldr	r3, [sp, #28]
   1f6ec:	eeb1 5b47 	vneg.f64	d5, d7
   1f6f0:	2a00      	cmp	r2, #0
   1f6f2:	ed83 5b00 	vstr	d5, [r3]
   1f6f6:	ee36 7b47 	vsub.f64	d7, d6, d7
   1f6fa:	dccb      	bgt.n	1f694 <__kernel_rem_pio2+0x5b4>
   1f6fc:	e7d5      	b.n	1f6aa <__kernel_rem_pio2+0x5ca>
   1f6fe:	9b04      	ldr	r3, [sp, #16]
   1f700:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   1f704:	e553      	b.n	1f1ae <__kernel_rem_pio2+0xce>
   1f706:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1f708:	2b02      	cmp	r3, #2
   1f70a:	dc1b      	bgt.n	1f744 <__kernel_rem_pio2+0x664>
   1f70c:	2b00      	cmp	r3, #0
   1f70e:	dc21      	bgt.n	1f754 <__kernel_rem_pio2+0x674>
   1f710:	f47f af31 	bne.w	1f576 <__kernel_rem_pio2+0x496>
   1f714:	ed9f 7b08 	vldr	d7, [pc, #32]	; 1f738 <__kernel_rem_pio2+0x658>
   1f718:	e726      	b.n	1f568 <__kernel_rem_pio2+0x488>
   1f71a:	bf00      	nop
   1f71c:	f3af 8000 	nop.w
   1f720:	00000000 	.word	0x00000000
   1f724:	41700000 	.word	0x41700000
   1f728:	00000000 	.word	0x00000000
   1f72c:	3e700000 	.word	0x3e700000
   1f730:	40000000 	.word	0x40000000
   1f734:	3ff921fb 	.word	0x3ff921fb
	...
   1f740:	20000288 	.word	0x20000288
   1f744:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1f746:	2b03      	cmp	r3, #3
   1f748:	f47f af15 	bne.w	1f576 <__kernel_rem_pio2+0x496>
   1f74c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 1f768 <__kernel_rem_pio2+0x688>
   1f750:	af44      	add	r7, sp, #272	; 0x110
   1f752:	e75b      	b.n	1f60c <__kernel_rem_pio2+0x52c>
   1f754:	ed9f 7b04 	vldr	d7, [pc, #16]	; 1f768 <__kernel_rem_pio2+0x688>
   1f758:	af44      	add	r7, sp, #272	; 0x110
   1f75a:	e790      	b.n	1f67e <__kernel_rem_pio2+0x59e>
   1f75c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 1f768 <__kernel_rem_pio2+0x688>
   1f760:	e754      	b.n	1f60c <__kernel_rem_pio2+0x52c>
   1f762:	bf00      	nop
   1f764:	f3af 8000 	nop.w
	...

0001f770 <__kernel_cos>:
   1f770:	ee10 3a90 	vmov	r3, s1
   1f774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1f778:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1f77c:	ed2d 8b02 	vpush	{d8}
   1f780:	da2e      	bge.n	1f7e0 <__kernel_cos+0x70>
   1f782:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   1f786:	ee17 3a90 	vmov	r3, s15
   1f78a:	2b00      	cmp	r3, #0
   1f78c:	d065      	beq.n	1f85a <__kernel_cos+0xea>
   1f78e:	ee20 4b00 	vmul.f64	d4, d0, d0
   1f792:	ed9f 8b35 	vldr	d8, [pc, #212]	; 1f868 <__kernel_cos+0xf8>
   1f796:	ed9f 2b36 	vldr	d2, [pc, #216]	; 1f870 <__kernel_cos+0x100>
   1f79a:	ed9f 3b37 	vldr	d3, [pc, #220]	; 1f878 <__kernel_cos+0x108>
   1f79e:	eea4 2b08 	vfma.f64	d2, d4, d8
   1f7a2:	ed9f 5b37 	vldr	d5, [pc, #220]	; 1f880 <__kernel_cos+0x110>
   1f7a6:	eea4 3b02 	vfma.f64	d3, d4, d2
   1f7aa:	ed9f 6b37 	vldr	d6, [pc, #220]	; 1f888 <__kernel_cos+0x118>
   1f7ae:	eea4 5b03 	vfma.f64	d5, d4, d3
   1f7b2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 1f890 <__kernel_cos+0x120>
   1f7b6:	eea4 6b05 	vfma.f64	d6, d4, d5
   1f7ba:	eea4 7b06 	vfma.f64	d7, d4, d6
   1f7be:	ee24 7b07 	vmul.f64	d7, d4, d7
   1f7c2:	ee21 1b40 	vnmul.f64	d1, d1, d0
   1f7c6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   1f7ca:	eea4 1b07 	vfma.f64	d1, d4, d7
   1f7ce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1f7d2:	ee94 1b06 	vfnms.f64	d1, d4, d6
   1f7d6:	ecbd 8b02 	vpop	{d8}
   1f7da:	ee30 0b41 	vsub.f64	d0, d0, d1
   1f7de:	4770      	bx	lr
   1f7e0:	ed9f 8b21 	vldr	d8, [pc, #132]	; 1f868 <__kernel_cos+0xf8>
   1f7e4:	ee20 4b00 	vmul.f64	d4, d0, d0
   1f7e8:	ed9f 2b21 	vldr	d2, [pc, #132]	; 1f870 <__kernel_cos+0x100>
   1f7ec:	ed9f 3b22 	vldr	d3, [pc, #136]	; 1f878 <__kernel_cos+0x108>
   1f7f0:	eea4 2b08 	vfma.f64	d2, d4, d8
   1f7f4:	ed9f 5b22 	vldr	d5, [pc, #136]	; 1f880 <__kernel_cos+0x110>
   1f7f8:	eea2 3b04 	vfma.f64	d3, d2, d4
   1f7fc:	ed9f 6b22 	vldr	d6, [pc, #136]	; 1f888 <__kernel_cos+0x118>
   1f800:	eea3 5b04 	vfma.f64	d5, d3, d4
   1f804:	ed9f 7b22 	vldr	d7, [pc, #136]	; 1f890 <__kernel_cos+0x120>
   1f808:	eea5 6b04 	vfma.f64	d6, d5, d4
   1f80c:	4a22      	ldr	r2, [pc, #136]	; (1f898 <__kernel_cos+0x128>)
   1f80e:	eea6 7b04 	vfma.f64	d7, d6, d4
   1f812:	4293      	cmp	r3, r2
   1f814:	ee27 7b04 	vmul.f64	d7, d7, d4
   1f818:	ddd3      	ble.n	1f7c2 <__kernel_cos+0x52>
   1f81a:	4a20      	ldr	r2, [pc, #128]	; (1f89c <__kernel_cos+0x12c>)
   1f81c:	4293      	cmp	r3, r2
   1f81e:	dc17      	bgt.n	1f850 <__kernel_cos+0xe0>
   1f820:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
   1f824:	2000      	movs	r0, #0
   1f826:	f5a3 1100 	sub.w	r1, r3, #2097152	; 0x200000
   1f82a:	ec41 0b15 	vmov	d5, r0, r1
   1f82e:	ee36 6b45 	vsub.f64	d6, d6, d5
   1f832:	ee21 1b40 	vnmul.f64	d1, d1, d0
   1f836:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   1f83a:	eea4 1b07 	vfma.f64	d1, d4, d7
   1f83e:	ee94 5b03 	vfnms.f64	d5, d4, d3
   1f842:	ecbd 8b02 	vpop	{d8}
   1f846:	ee35 0b41 	vsub.f64	d0, d5, d1
   1f84a:	ee36 0b40 	vsub.f64	d0, d6, d0
   1f84e:	4770      	bx	lr
   1f850:	eeb6 6b07 	vmov.f64	d6, #103	; 0x3f380000  0.7187500
   1f854:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
   1f858:	e7eb      	b.n	1f832 <__kernel_cos+0xc2>
   1f85a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1f85e:	ecbd 8b02 	vpop	{d8}
   1f862:	4770      	bx	lr
   1f864:	f3af 8000 	nop.w
   1f868:	be8838d4 	.word	0xbe8838d4
   1f86c:	bda8fae9 	.word	0xbda8fae9
   1f870:	bdb4b1c4 	.word	0xbdb4b1c4
   1f874:	3e21ee9e 	.word	0x3e21ee9e
   1f878:	809c52ad 	.word	0x809c52ad
   1f87c:	be927e4f 	.word	0xbe927e4f
   1f880:	19cb1590 	.word	0x19cb1590
   1f884:	3efa01a0 	.word	0x3efa01a0
   1f888:	16c15177 	.word	0x16c15177
   1f88c:	bf56c16c 	.word	0xbf56c16c
   1f890:	5555554c 	.word	0x5555554c
   1f894:	3fa55555 	.word	0x3fa55555
   1f898:	3fd33332 	.word	0x3fd33332
   1f89c:	3fe90000 	.word	0x3fe90000

0001f8a0 <__kernel_sin>:
   1f8a0:	ee10 3a90 	vmov	r3, s1
   1f8a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1f8a8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1f8ac:	da04      	bge.n	1f8b8 <__kernel_sin+0x18>
   1f8ae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   1f8b2:	ee17 3a90 	vmov	r3, s15
   1f8b6:	b35b      	cbz	r3, 1f910 <__kernel_sin+0x70>
   1f8b8:	ee20 7b00 	vmul.f64	d7, d0, d0
   1f8bc:	ed9f 2b16 	vldr	d2, [pc, #88]	; 1f918 <__kernel_sin+0x78>
   1f8c0:	ed9f 3b17 	vldr	d3, [pc, #92]	; 1f920 <__kernel_sin+0x80>
   1f8c4:	ed9f 4b18 	vldr	d4, [pc, #96]	; 1f928 <__kernel_sin+0x88>
   1f8c8:	eea7 3b02 	vfma.f64	d3, d7, d2
   1f8cc:	ed9f 5b18 	vldr	d5, [pc, #96]	; 1f930 <__kernel_sin+0x90>
   1f8d0:	eea3 4b07 	vfma.f64	d4, d3, d7
   1f8d4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 1f938 <__kernel_sin+0x98>
   1f8d8:	eea4 5b07 	vfma.f64	d5, d4, d7
   1f8dc:	eea5 6b07 	vfma.f64	d6, d5, d7
   1f8e0:	ee20 5b07 	vmul.f64	d5, d0, d7
   1f8e4:	b930      	cbnz	r0, 1f8f4 <__kernel_sin+0x54>
   1f8e6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 1f940 <__kernel_sin+0xa0>
   1f8ea:	eea7 4b06 	vfma.f64	d4, d7, d6
   1f8ee:	eea4 0b05 	vfma.f64	d0, d4, d5
   1f8f2:	4770      	bx	lr
   1f8f4:	ed9f 4b14 	vldr	d4, [pc, #80]	; 1f948 <__kernel_sin+0xa8>
   1f8f8:	ee26 6b45 	vnmul.f64	d6, d6, d5
   1f8fc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   1f900:	eea1 6b03 	vfma.f64	d6, d1, d3
   1f904:	ee96 1b07 	vfnms.f64	d1, d6, d7
   1f908:	eea5 1b04 	vfma.f64	d1, d5, d4
   1f90c:	ee30 0b41 	vsub.f64	d0, d0, d1
   1f910:	4770      	bx	lr
   1f912:	bf00      	nop
   1f914:	f3af 8000 	nop.w
   1f918:	5acfd57c 	.word	0x5acfd57c
   1f91c:	3de5d93a 	.word	0x3de5d93a
   1f920:	8a2b9ceb 	.word	0x8a2b9ceb
   1f924:	be5ae5e6 	.word	0xbe5ae5e6
   1f928:	57b1fe7d 	.word	0x57b1fe7d
   1f92c:	3ec71de3 	.word	0x3ec71de3
   1f930:	19c161d5 	.word	0x19c161d5
   1f934:	bf2a01a0 	.word	0xbf2a01a0
   1f938:	1110f8a6 	.word	0x1110f8a6
   1f93c:	3f811111 	.word	0x3f811111
   1f940:	55555549 	.word	0x55555549
   1f944:	bfc55555 	.word	0xbfc55555
   1f948:	55555549 	.word	0x55555549
   1f94c:	3fc55555 	.word	0x3fc55555

0001f950 <fabs>:
   1f950:	ec51 0b10 	vmov	r0, r1, d0
   1f954:	ee10 2a10 	vmov	r2, s0
   1f958:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1f95c:	ec43 2b10 	vmov	d0, r2, r3
   1f960:	4770      	bx	lr
   1f962:	bf00      	nop
   1f964:	0000      	movs	r0, r0
	...

0001f968 <scalbn>:
   1f968:	ec53 2b10 	vmov	r2, r3, d0
   1f96c:	b410      	push	{r4}
   1f96e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   1f972:	4619      	mov	r1, r3
   1f974:	bb74      	cbnz	r4, 1f9d4 <scalbn+0x6c>
   1f976:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   1f97a:	4311      	orrs	r1, r2
   1f97c:	d027      	beq.n	1f9ce <scalbn+0x66>
   1f97e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 1fa40 <scalbn+0xd8>
   1f982:	493b      	ldr	r1, [pc, #236]	; (1fa70 <scalbn+0x108>)
   1f984:	ee20 7b07 	vmul.f64	d7, d0, d7
   1f988:	4288      	cmp	r0, r1
   1f98a:	ec53 2b17 	vmov	r2, r3, d7
   1f98e:	db43      	blt.n	1fa18 <scalbn+0xb0>
   1f990:	f3c3 540a 	ubfx	r4, r3, #20, #11
   1f994:	4619      	mov	r1, r3
   1f996:	3c36      	subs	r4, #54	; 0x36
   1f998:	f24c 3c50 	movw	ip, #50000	; 0xc350
   1f99c:	4560      	cmp	r0, ip
   1f99e:	dc22      	bgt.n	1f9e6 <scalbn+0x7e>
   1f9a0:	4420      	add	r0, r4
   1f9a2:	f240 74fe 	movw	r4, #2046	; 0x7fe
   1f9a6:	42a0      	cmp	r0, r4
   1f9a8:	dc1d      	bgt.n	1f9e6 <scalbn+0x7e>
   1f9aa:	2800      	cmp	r0, #0
   1f9ac:	dc29      	bgt.n	1fa02 <scalbn+0x9a>
   1f9ae:	f110 0f35 	cmn.w	r0, #53	; 0x35
   1f9b2:	db38      	blt.n	1fa26 <scalbn+0xbe>
   1f9b4:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   1f9b8:	3036      	adds	r0, #54	; 0x36
   1f9ba:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   1f9be:	ed9f 7b22 	vldr	d7, [pc, #136]	; 1fa48 <scalbn+0xe0>
   1f9c2:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   1f9c6:	ec43 2b10 	vmov	d0, r2, r3
   1f9ca:	ee20 0b07 	vmul.f64	d0, d0, d7
   1f9ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f9d2:	4770      	bx	lr
   1f9d4:	f240 7cff 	movw	ip, #2047	; 0x7ff
   1f9d8:	4564      	cmp	r4, ip
   1f9da:	d1dd      	bne.n	1f998 <scalbn+0x30>
   1f9dc:	ee30 0b00 	vadd.f64	d0, d0, d0
   1f9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f9e4:	4770      	bx	lr
   1f9e6:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 1fa50 <scalbn+0xe8>
   1f9ea:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 1fa58 <scalbn+0xf0>
   1f9ee:	eeb0 0b47 	vmov.f64	d0, d7
   1f9f2:	2b00      	cmp	r3, #0
   1f9f4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f9f8:	fe27 7b05 	vselge.f64	d7, d7, d5
   1f9fc:	ee27 0b00 	vmul.f64	d0, d7, d0
   1fa00:	4770      	bx	lr
   1fa02:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   1fa06:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   1fa0a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   1fa0e:	ec43 2b10 	vmov	d0, r2, r3
   1fa12:	f85d 4b04 	ldr.w	r4, [sp], #4
   1fa16:	4770      	bx	lr
   1fa18:	ed9f 0b11 	vldr	d0, [pc, #68]	; 1fa60 <scalbn+0xf8>
   1fa1c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1fa20:	ee27 0b00 	vmul.f64	d0, d7, d0
   1fa24:	4770      	bx	lr
   1fa26:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 1fa60 <scalbn+0xf8>
   1fa2a:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 1fa68 <scalbn+0x100>
   1fa2e:	eeb0 0b47 	vmov.f64	d0, d7
   1fa32:	2b00      	cmp	r3, #0
   1fa34:	fe27 7b05 	vselge.f64	d7, d7, d5
   1fa38:	ee27 0b00 	vmul.f64	d0, d7, d0
   1fa3c:	e7c7      	b.n	1f9ce <scalbn+0x66>
   1fa3e:	bf00      	nop
   1fa40:	00000000 	.word	0x00000000
   1fa44:	43500000 	.word	0x43500000
   1fa48:	00000000 	.word	0x00000000
   1fa4c:	3c900000 	.word	0x3c900000
   1fa50:	8800759c 	.word	0x8800759c
   1fa54:	7e37e43c 	.word	0x7e37e43c
   1fa58:	8800759c 	.word	0x8800759c
   1fa5c:	fe37e43c 	.word	0xfe37e43c
   1fa60:	c2f8f359 	.word	0xc2f8f359
   1fa64:	01a56e1f 	.word	0x01a56e1f
   1fa68:	c2f8f359 	.word	0xc2f8f359
   1fa6c:	81a56e1f 	.word	0x81a56e1f
   1fa70:	ffff3cb0 	.word	0xffff3cb0
   1fa74:	00000000 	.word	0x00000000

0001fa78 <floor>:
   1fa78:	b510      	push	{r4, lr}
   1fa7a:	b082      	sub	sp, #8
   1fa7c:	ed8d 0b00 	vstr	d0, [sp]
   1fa80:	9901      	ldr	r1, [sp, #4]
   1fa82:	9800      	ldr	r0, [sp, #0]
   1fa84:	f3c1 520a 	ubfx	r2, r1, #20, #11
   1fa88:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
   1fa8c:	2b13      	cmp	r3, #19
   1fa8e:	4684      	mov	ip, r0
   1fa90:	dc31      	bgt.n	1faf6 <floor+0x7e>
   1fa92:	2b00      	cmp	r3, #0
   1fa94:	db21      	blt.n	1fada <floor+0x62>
   1fa96:	4a3a      	ldr	r2, [pc, #232]	; (1fb80 <floor+0x108>)
   1fa98:	411a      	asrs	r2, r3
   1fa9a:	ea01 0402 	and.w	r4, r1, r2
   1fa9e:	4304      	orrs	r4, r0
   1faa0:	468e      	mov	lr, r1
   1faa2:	d02d      	beq.n	1fb00 <floor+0x88>
   1faa4:	ed9f 7b34 	vldr	d7, [pc, #208]	; 1fb78 <floor+0x100>
   1faa8:	ed9d 6b00 	vldr	d6, [sp]
   1faac:	ee36 7b07 	vadd.f64	d7, d6, d7
   1fab0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1fab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fab8:	dd09      	ble.n	1face <floor+0x56>
   1faba:	2900      	cmp	r1, #0
   1fabc:	da04      	bge.n	1fac8 <floor+0x50>
   1fabe:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1fac2:	fa41 f303 	asr.w	r3, r1, r3
   1fac6:	449e      	add	lr, r3
   1fac8:	ea2e 0102 	bic.w	r1, lr, r2
   1facc:	2000      	movs	r0, #0
   1face:	460b      	mov	r3, r1
   1fad0:	4602      	mov	r2, r0
   1fad2:	ec43 2b10 	vmov	d0, r2, r3
   1fad6:	b002      	add	sp, #8
   1fad8:	bd10      	pop	{r4, pc}
   1fada:	ed9f 7b27 	vldr	d7, [pc, #156]	; 1fb78 <floor+0x100>
   1fade:	ee30 7b07 	vadd.f64	d7, d0, d7
   1fae2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1fae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1faea:	ddf0      	ble.n	1face <floor+0x56>
   1faec:	2900      	cmp	r1, #0
   1faee:	db28      	blt.n	1fb42 <floor+0xca>
   1faf0:	2000      	movs	r0, #0
   1faf2:	4601      	mov	r1, r0
   1faf4:	e7eb      	b.n	1face <floor+0x56>
   1faf6:	2b33      	cmp	r3, #51	; 0x33
   1faf8:	dd06      	ble.n	1fb08 <floor+0x90>
   1fafa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1fafe:	d01b      	beq.n	1fb38 <floor+0xc0>
   1fb00:	ed9d 0b00 	vldr	d0, [sp]
   1fb04:	b002      	add	sp, #8
   1fb06:	bd10      	pop	{r4, pc}
   1fb08:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   1fb0c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   1fb10:	fa2e f202 	lsr.w	r2, lr, r2
   1fb14:	4210      	tst	r0, r2
   1fb16:	d0f3      	beq.n	1fb00 <floor+0x88>
   1fb18:	ed9f 7b17 	vldr	d7, [pc, #92]	; 1fb78 <floor+0x100>
   1fb1c:	ed9d 6b00 	vldr	d6, [sp]
   1fb20:	ee36 7b07 	vadd.f64	d7, d6, d7
   1fb24:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1fb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fb2c:	ddcf      	ble.n	1face <floor+0x56>
   1fb2e:	2900      	cmp	r1, #0
   1fb30:	db13      	blt.n	1fb5a <floor+0xe2>
   1fb32:	ea2c 0002 	bic.w	r0, ip, r2
   1fb36:	e7ca      	b.n	1face <floor+0x56>
   1fb38:	ed9d 7b00 	vldr	d7, [sp]
   1fb3c:	ee37 0b07 	vadd.f64	d0, d7, d7
   1fb40:	e7e0      	b.n	1fb04 <floor+0x8c>
   1fb42:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1fb46:	4301      	orrs	r1, r0
   1fb48:	4b0e      	ldr	r3, [pc, #56]	; (1fb84 <floor+0x10c>)
   1fb4a:	2900      	cmp	r1, #0
   1fb4c:	f04f 0000 	mov.w	r0, #0
   1fb50:	bf0c      	ite	eq
   1fb52:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   1fb56:	4619      	movne	r1, r3
   1fb58:	e7b9      	b.n	1face <floor+0x56>
   1fb5a:	2b14      	cmp	r3, #20
   1fb5c:	d009      	beq.n	1fb72 <floor+0xfa>
   1fb5e:	2401      	movs	r4, #1
   1fb60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   1fb64:	fa04 f303 	lsl.w	r3, r4, r3
   1fb68:	449c      	add	ip, r3
   1fb6a:	4560      	cmp	r0, ip
   1fb6c:	bf88      	it	hi
   1fb6e:	1909      	addhi	r1, r1, r4
   1fb70:	e7df      	b.n	1fb32 <floor+0xba>
   1fb72:	3101      	adds	r1, #1
   1fb74:	e7dd      	b.n	1fb32 <floor+0xba>
   1fb76:	bf00      	nop
   1fb78:	8800759c 	.word	0x8800759c
   1fb7c:	7e37e43c 	.word	0x7e37e43c
   1fb80:	000fffff 	.word	0x000fffff
   1fb84:	bff00000 	.word	0xbff00000

0001fb88 <__aeabi_atexit>:
   1fb88:	4603      	mov	r3, r0
   1fb8a:	4608      	mov	r0, r1
   1fb8c:	4619      	mov	r1, r3
   1fb8e:	f002 bcb9 	b.w	22504 <__cxa_atexit>
   1fb92:	bf00      	nop

0001fb94 <__aeabi_drsub>:
   1fb94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1fb98:	e002      	b.n	1fba0 <__adddf3>
   1fb9a:	bf00      	nop

0001fb9c <__aeabi_dsub>:
   1fb9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001fba0 <__adddf3>:
   1fba0:	b530      	push	{r4, r5, lr}
   1fba2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1fba6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1fbaa:	ea94 0f05 	teq	r4, r5
   1fbae:	bf08      	it	eq
   1fbb0:	ea90 0f02 	teqeq	r0, r2
   1fbb4:	bf1f      	itttt	ne
   1fbb6:	ea54 0c00 	orrsne.w	ip, r4, r0
   1fbba:	ea55 0c02 	orrsne.w	ip, r5, r2
   1fbbe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1fbc2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1fbc6:	f000 80e2 	beq.w	1fd8e <__adddf3+0x1ee>
   1fbca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1fbce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1fbd2:	bfb8      	it	lt
   1fbd4:	426d      	neglt	r5, r5
   1fbd6:	dd0c      	ble.n	1fbf2 <__adddf3+0x52>
   1fbd8:	442c      	add	r4, r5
   1fbda:	ea80 0202 	eor.w	r2, r0, r2
   1fbde:	ea81 0303 	eor.w	r3, r1, r3
   1fbe2:	ea82 0000 	eor.w	r0, r2, r0
   1fbe6:	ea83 0101 	eor.w	r1, r3, r1
   1fbea:	ea80 0202 	eor.w	r2, r0, r2
   1fbee:	ea81 0303 	eor.w	r3, r1, r3
   1fbf2:	2d36      	cmp	r5, #54	; 0x36
   1fbf4:	bf88      	it	hi
   1fbf6:	bd30      	pophi	{r4, r5, pc}
   1fbf8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1fbfc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1fc00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1fc04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1fc08:	d002      	beq.n	1fc10 <__adddf3+0x70>
   1fc0a:	4240      	negs	r0, r0
   1fc0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1fc10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1fc14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1fc18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1fc1c:	d002      	beq.n	1fc24 <__adddf3+0x84>
   1fc1e:	4252      	negs	r2, r2
   1fc20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1fc24:	ea94 0f05 	teq	r4, r5
   1fc28:	f000 80a7 	beq.w	1fd7a <__adddf3+0x1da>
   1fc2c:	f1a4 0401 	sub.w	r4, r4, #1
   1fc30:	f1d5 0e20 	rsbs	lr, r5, #32
   1fc34:	db0d      	blt.n	1fc52 <__adddf3+0xb2>
   1fc36:	fa02 fc0e 	lsl.w	ip, r2, lr
   1fc3a:	fa22 f205 	lsr.w	r2, r2, r5
   1fc3e:	1880      	adds	r0, r0, r2
   1fc40:	f141 0100 	adc.w	r1, r1, #0
   1fc44:	fa03 f20e 	lsl.w	r2, r3, lr
   1fc48:	1880      	adds	r0, r0, r2
   1fc4a:	fa43 f305 	asr.w	r3, r3, r5
   1fc4e:	4159      	adcs	r1, r3
   1fc50:	e00e      	b.n	1fc70 <__adddf3+0xd0>
   1fc52:	f1a5 0520 	sub.w	r5, r5, #32
   1fc56:	f10e 0e20 	add.w	lr, lr, #32
   1fc5a:	2a01      	cmp	r2, #1
   1fc5c:	fa03 fc0e 	lsl.w	ip, r3, lr
   1fc60:	bf28      	it	cs
   1fc62:	f04c 0c02 	orrcs.w	ip, ip, #2
   1fc66:	fa43 f305 	asr.w	r3, r3, r5
   1fc6a:	18c0      	adds	r0, r0, r3
   1fc6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1fc70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1fc74:	d507      	bpl.n	1fc86 <__adddf3+0xe6>
   1fc76:	f04f 0e00 	mov.w	lr, #0
   1fc7a:	f1dc 0c00 	rsbs	ip, ip, #0
   1fc7e:	eb7e 0000 	sbcs.w	r0, lr, r0
   1fc82:	eb6e 0101 	sbc.w	r1, lr, r1
   1fc86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1fc8a:	d31b      	bcc.n	1fcc4 <__adddf3+0x124>
   1fc8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1fc90:	d30c      	bcc.n	1fcac <__adddf3+0x10c>
   1fc92:	0849      	lsrs	r1, r1, #1
   1fc94:	ea5f 0030 	movs.w	r0, r0, rrx
   1fc98:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1fc9c:	f104 0401 	add.w	r4, r4, #1
   1fca0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1fca4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1fca8:	f080 809a 	bcs.w	1fde0 <__adddf3+0x240>
   1fcac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1fcb0:	bf08      	it	eq
   1fcb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1fcb6:	f150 0000 	adcs.w	r0, r0, #0
   1fcba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1fcbe:	ea41 0105 	orr.w	r1, r1, r5
   1fcc2:	bd30      	pop	{r4, r5, pc}
   1fcc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1fcc8:	4140      	adcs	r0, r0
   1fcca:	eb41 0101 	adc.w	r1, r1, r1
   1fcce:	3c01      	subs	r4, #1
   1fcd0:	bf28      	it	cs
   1fcd2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1fcd6:	d2e9      	bcs.n	1fcac <__adddf3+0x10c>
   1fcd8:	f091 0f00 	teq	r1, #0
   1fcdc:	bf04      	itt	eq
   1fcde:	4601      	moveq	r1, r0
   1fce0:	2000      	moveq	r0, #0
   1fce2:	fab1 f381 	clz	r3, r1
   1fce6:	bf08      	it	eq
   1fce8:	3320      	addeq	r3, #32
   1fcea:	f1a3 030b 	sub.w	r3, r3, #11
   1fcee:	f1b3 0220 	subs.w	r2, r3, #32
   1fcf2:	da0c      	bge.n	1fd0e <__adddf3+0x16e>
   1fcf4:	320c      	adds	r2, #12
   1fcf6:	dd08      	ble.n	1fd0a <__adddf3+0x16a>
   1fcf8:	f102 0c14 	add.w	ip, r2, #20
   1fcfc:	f1c2 020c 	rsb	r2, r2, #12
   1fd00:	fa01 f00c 	lsl.w	r0, r1, ip
   1fd04:	fa21 f102 	lsr.w	r1, r1, r2
   1fd08:	e00c      	b.n	1fd24 <__adddf3+0x184>
   1fd0a:	f102 0214 	add.w	r2, r2, #20
   1fd0e:	bfd8      	it	le
   1fd10:	f1c2 0c20 	rsble	ip, r2, #32
   1fd14:	fa01 f102 	lsl.w	r1, r1, r2
   1fd18:	fa20 fc0c 	lsr.w	ip, r0, ip
   1fd1c:	bfdc      	itt	le
   1fd1e:	ea41 010c 	orrle.w	r1, r1, ip
   1fd22:	4090      	lslle	r0, r2
   1fd24:	1ae4      	subs	r4, r4, r3
   1fd26:	bfa2      	ittt	ge
   1fd28:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1fd2c:	4329      	orrge	r1, r5
   1fd2e:	bd30      	popge	{r4, r5, pc}
   1fd30:	ea6f 0404 	mvn.w	r4, r4
   1fd34:	3c1f      	subs	r4, #31
   1fd36:	da1c      	bge.n	1fd72 <__adddf3+0x1d2>
   1fd38:	340c      	adds	r4, #12
   1fd3a:	dc0e      	bgt.n	1fd5a <__adddf3+0x1ba>
   1fd3c:	f104 0414 	add.w	r4, r4, #20
   1fd40:	f1c4 0220 	rsb	r2, r4, #32
   1fd44:	fa20 f004 	lsr.w	r0, r0, r4
   1fd48:	fa01 f302 	lsl.w	r3, r1, r2
   1fd4c:	ea40 0003 	orr.w	r0, r0, r3
   1fd50:	fa21 f304 	lsr.w	r3, r1, r4
   1fd54:	ea45 0103 	orr.w	r1, r5, r3
   1fd58:	bd30      	pop	{r4, r5, pc}
   1fd5a:	f1c4 040c 	rsb	r4, r4, #12
   1fd5e:	f1c4 0220 	rsb	r2, r4, #32
   1fd62:	fa20 f002 	lsr.w	r0, r0, r2
   1fd66:	fa01 f304 	lsl.w	r3, r1, r4
   1fd6a:	ea40 0003 	orr.w	r0, r0, r3
   1fd6e:	4629      	mov	r1, r5
   1fd70:	bd30      	pop	{r4, r5, pc}
   1fd72:	fa21 f004 	lsr.w	r0, r1, r4
   1fd76:	4629      	mov	r1, r5
   1fd78:	bd30      	pop	{r4, r5, pc}
   1fd7a:	f094 0f00 	teq	r4, #0
   1fd7e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1fd82:	bf06      	itte	eq
   1fd84:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1fd88:	3401      	addeq	r4, #1
   1fd8a:	3d01      	subne	r5, #1
   1fd8c:	e74e      	b.n	1fc2c <__adddf3+0x8c>
   1fd8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1fd92:	bf18      	it	ne
   1fd94:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1fd98:	d029      	beq.n	1fdee <__adddf3+0x24e>
   1fd9a:	ea94 0f05 	teq	r4, r5
   1fd9e:	bf08      	it	eq
   1fda0:	ea90 0f02 	teqeq	r0, r2
   1fda4:	d005      	beq.n	1fdb2 <__adddf3+0x212>
   1fda6:	ea54 0c00 	orrs.w	ip, r4, r0
   1fdaa:	bf04      	itt	eq
   1fdac:	4619      	moveq	r1, r3
   1fdae:	4610      	moveq	r0, r2
   1fdb0:	bd30      	pop	{r4, r5, pc}
   1fdb2:	ea91 0f03 	teq	r1, r3
   1fdb6:	bf1e      	ittt	ne
   1fdb8:	2100      	movne	r1, #0
   1fdba:	2000      	movne	r0, #0
   1fdbc:	bd30      	popne	{r4, r5, pc}
   1fdbe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1fdc2:	d105      	bne.n	1fdd0 <__adddf3+0x230>
   1fdc4:	0040      	lsls	r0, r0, #1
   1fdc6:	4149      	adcs	r1, r1
   1fdc8:	bf28      	it	cs
   1fdca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1fdce:	bd30      	pop	{r4, r5, pc}
   1fdd0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1fdd4:	bf3c      	itt	cc
   1fdd6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1fdda:	bd30      	popcc	{r4, r5, pc}
   1fddc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1fde0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1fde4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1fde8:	f04f 0000 	mov.w	r0, #0
   1fdec:	bd30      	pop	{r4, r5, pc}
   1fdee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1fdf2:	bf1a      	itte	ne
   1fdf4:	4619      	movne	r1, r3
   1fdf6:	4610      	movne	r0, r2
   1fdf8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1fdfc:	bf1c      	itt	ne
   1fdfe:	460b      	movne	r3, r1
   1fe00:	4602      	movne	r2, r0
   1fe02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1fe06:	bf06      	itte	eq
   1fe08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1fe0c:	ea91 0f03 	teqeq	r1, r3
   1fe10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1fe14:	bd30      	pop	{r4, r5, pc}
   1fe16:	bf00      	nop

0001fe18 <__aeabi_ui2d>:
   1fe18:	f090 0f00 	teq	r0, #0
   1fe1c:	bf04      	itt	eq
   1fe1e:	2100      	moveq	r1, #0
   1fe20:	4770      	bxeq	lr
   1fe22:	b530      	push	{r4, r5, lr}
   1fe24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1fe28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1fe2c:	f04f 0500 	mov.w	r5, #0
   1fe30:	f04f 0100 	mov.w	r1, #0
   1fe34:	e750      	b.n	1fcd8 <__adddf3+0x138>
   1fe36:	bf00      	nop

0001fe38 <__aeabi_i2d>:
   1fe38:	f090 0f00 	teq	r0, #0
   1fe3c:	bf04      	itt	eq
   1fe3e:	2100      	moveq	r1, #0
   1fe40:	4770      	bxeq	lr
   1fe42:	b530      	push	{r4, r5, lr}
   1fe44:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1fe48:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1fe4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1fe50:	bf48      	it	mi
   1fe52:	4240      	negmi	r0, r0
   1fe54:	f04f 0100 	mov.w	r1, #0
   1fe58:	e73e      	b.n	1fcd8 <__adddf3+0x138>
   1fe5a:	bf00      	nop

0001fe5c <__aeabi_f2d>:
   1fe5c:	0042      	lsls	r2, r0, #1
   1fe5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1fe62:	ea4f 0131 	mov.w	r1, r1, rrx
   1fe66:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1fe6a:	bf1f      	itttt	ne
   1fe6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1fe70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1fe74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1fe78:	4770      	bxne	lr
   1fe7a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1fe7e:	bf08      	it	eq
   1fe80:	4770      	bxeq	lr
   1fe82:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1fe86:	bf04      	itt	eq
   1fe88:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1fe8c:	4770      	bxeq	lr
   1fe8e:	b530      	push	{r4, r5, lr}
   1fe90:	f44f 7460 	mov.w	r4, #896	; 0x380
   1fe94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1fe98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1fe9c:	e71c      	b.n	1fcd8 <__adddf3+0x138>
   1fe9e:	bf00      	nop

0001fea0 <__aeabi_ul2d>:
   1fea0:	ea50 0201 	orrs.w	r2, r0, r1
   1fea4:	bf08      	it	eq
   1fea6:	4770      	bxeq	lr
   1fea8:	b530      	push	{r4, r5, lr}
   1feaa:	f04f 0500 	mov.w	r5, #0
   1feae:	e00a      	b.n	1fec6 <__aeabi_l2d+0x16>

0001feb0 <__aeabi_l2d>:
   1feb0:	ea50 0201 	orrs.w	r2, r0, r1
   1feb4:	bf08      	it	eq
   1feb6:	4770      	bxeq	lr
   1feb8:	b530      	push	{r4, r5, lr}
   1feba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1febe:	d502      	bpl.n	1fec6 <__aeabi_l2d+0x16>
   1fec0:	4240      	negs	r0, r0
   1fec2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1fec6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1feca:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1fece:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1fed2:	f43f aed8 	beq.w	1fc86 <__adddf3+0xe6>
   1fed6:	f04f 0203 	mov.w	r2, #3
   1feda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1fede:	bf18      	it	ne
   1fee0:	3203      	addne	r2, #3
   1fee2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1fee6:	bf18      	it	ne
   1fee8:	3203      	addne	r2, #3
   1feea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1feee:	f1c2 0320 	rsb	r3, r2, #32
   1fef2:	fa00 fc03 	lsl.w	ip, r0, r3
   1fef6:	fa20 f002 	lsr.w	r0, r0, r2
   1fefa:	fa01 fe03 	lsl.w	lr, r1, r3
   1fefe:	ea40 000e 	orr.w	r0, r0, lr
   1ff02:	fa21 f102 	lsr.w	r1, r1, r2
   1ff06:	4414      	add	r4, r2
   1ff08:	e6bd      	b.n	1fc86 <__adddf3+0xe6>
   1ff0a:	bf00      	nop

0001ff0c <__aeabi_frsub>:
   1ff0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1ff10:	e002      	b.n	1ff18 <__addsf3>
   1ff12:	bf00      	nop

0001ff14 <__aeabi_fsub>:
   1ff14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001ff18 <__addsf3>:
   1ff18:	0042      	lsls	r2, r0, #1
   1ff1a:	bf1f      	itttt	ne
   1ff1c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1ff20:	ea92 0f03 	teqne	r2, r3
   1ff24:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1ff28:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1ff2c:	d06a      	beq.n	20004 <__addsf3+0xec>
   1ff2e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1ff32:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1ff36:	bfc1      	itttt	gt
   1ff38:	18d2      	addgt	r2, r2, r3
   1ff3a:	4041      	eorgt	r1, r0
   1ff3c:	4048      	eorgt	r0, r1
   1ff3e:	4041      	eorgt	r1, r0
   1ff40:	bfb8      	it	lt
   1ff42:	425b      	neglt	r3, r3
   1ff44:	2b19      	cmp	r3, #25
   1ff46:	bf88      	it	hi
   1ff48:	4770      	bxhi	lr
   1ff4a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1ff4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ff52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1ff56:	bf18      	it	ne
   1ff58:	4240      	negne	r0, r0
   1ff5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1ff5e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1ff62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1ff66:	bf18      	it	ne
   1ff68:	4249      	negne	r1, r1
   1ff6a:	ea92 0f03 	teq	r2, r3
   1ff6e:	d03f      	beq.n	1fff0 <__addsf3+0xd8>
   1ff70:	f1a2 0201 	sub.w	r2, r2, #1
   1ff74:	fa41 fc03 	asr.w	ip, r1, r3
   1ff78:	eb10 000c 	adds.w	r0, r0, ip
   1ff7c:	f1c3 0320 	rsb	r3, r3, #32
   1ff80:	fa01 f103 	lsl.w	r1, r1, r3
   1ff84:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1ff88:	d502      	bpl.n	1ff90 <__addsf3+0x78>
   1ff8a:	4249      	negs	r1, r1
   1ff8c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1ff90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ff94:	d313      	bcc.n	1ffbe <__addsf3+0xa6>
   1ff96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1ff9a:	d306      	bcc.n	1ffaa <__addsf3+0x92>
   1ff9c:	0840      	lsrs	r0, r0, #1
   1ff9e:	ea4f 0131 	mov.w	r1, r1, rrx
   1ffa2:	f102 0201 	add.w	r2, r2, #1
   1ffa6:	2afe      	cmp	r2, #254	; 0xfe
   1ffa8:	d251      	bcs.n	2004e <__addsf3+0x136>
   1ffaa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1ffae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1ffb2:	bf08      	it	eq
   1ffb4:	f020 0001 	biceq.w	r0, r0, #1
   1ffb8:	ea40 0003 	orr.w	r0, r0, r3
   1ffbc:	4770      	bx	lr
   1ffbe:	0049      	lsls	r1, r1, #1
   1ffc0:	eb40 0000 	adc.w	r0, r0, r0
   1ffc4:	3a01      	subs	r2, #1
   1ffc6:	bf28      	it	cs
   1ffc8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   1ffcc:	d2ed      	bcs.n	1ffaa <__addsf3+0x92>
   1ffce:	fab0 fc80 	clz	ip, r0
   1ffd2:	f1ac 0c08 	sub.w	ip, ip, #8
   1ffd6:	ebb2 020c 	subs.w	r2, r2, ip
   1ffda:	fa00 f00c 	lsl.w	r0, r0, ip
   1ffde:	bfaa      	itet	ge
   1ffe0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1ffe4:	4252      	neglt	r2, r2
   1ffe6:	4318      	orrge	r0, r3
   1ffe8:	bfbc      	itt	lt
   1ffea:	40d0      	lsrlt	r0, r2
   1ffec:	4318      	orrlt	r0, r3
   1ffee:	4770      	bx	lr
   1fff0:	f092 0f00 	teq	r2, #0
   1fff4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1fff8:	bf06      	itte	eq
   1fffa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1fffe:	3201      	addeq	r2, #1
   20000:	3b01      	subne	r3, #1
   20002:	e7b5      	b.n	1ff70 <__addsf3+0x58>
   20004:	ea4f 0341 	mov.w	r3, r1, lsl #1
   20008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   2000c:	bf18      	it	ne
   2000e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   20012:	d021      	beq.n	20058 <__addsf3+0x140>
   20014:	ea92 0f03 	teq	r2, r3
   20018:	d004      	beq.n	20024 <__addsf3+0x10c>
   2001a:	f092 0f00 	teq	r2, #0
   2001e:	bf08      	it	eq
   20020:	4608      	moveq	r0, r1
   20022:	4770      	bx	lr
   20024:	ea90 0f01 	teq	r0, r1
   20028:	bf1c      	itt	ne
   2002a:	2000      	movne	r0, #0
   2002c:	4770      	bxne	lr
   2002e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   20032:	d104      	bne.n	2003e <__addsf3+0x126>
   20034:	0040      	lsls	r0, r0, #1
   20036:	bf28      	it	cs
   20038:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   2003c:	4770      	bx	lr
   2003e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   20042:	bf3c      	itt	cc
   20044:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   20048:	4770      	bxcc	lr
   2004a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   2004e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   20052:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   20056:	4770      	bx	lr
   20058:	ea7f 6222 	mvns.w	r2, r2, asr #24
   2005c:	bf16      	itet	ne
   2005e:	4608      	movne	r0, r1
   20060:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   20064:	4601      	movne	r1, r0
   20066:	0242      	lsls	r2, r0, #9
   20068:	bf06      	itte	eq
   2006a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   2006e:	ea90 0f01 	teqeq	r0, r1
   20072:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   20076:	4770      	bx	lr

00020078 <__aeabi_ui2f>:
   20078:	f04f 0300 	mov.w	r3, #0
   2007c:	e004      	b.n	20088 <__aeabi_i2f+0x8>
   2007e:	bf00      	nop

00020080 <__aeabi_i2f>:
   20080:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   20084:	bf48      	it	mi
   20086:	4240      	negmi	r0, r0
   20088:	ea5f 0c00 	movs.w	ip, r0
   2008c:	bf08      	it	eq
   2008e:	4770      	bxeq	lr
   20090:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   20094:	4601      	mov	r1, r0
   20096:	f04f 0000 	mov.w	r0, #0
   2009a:	e01c      	b.n	200d6 <__aeabi_l2f+0x2a>

0002009c <__aeabi_ul2f>:
   2009c:	ea50 0201 	orrs.w	r2, r0, r1
   200a0:	bf08      	it	eq
   200a2:	4770      	bxeq	lr
   200a4:	f04f 0300 	mov.w	r3, #0
   200a8:	e00a      	b.n	200c0 <__aeabi_l2f+0x14>
   200aa:	bf00      	nop

000200ac <__aeabi_l2f>:
   200ac:	ea50 0201 	orrs.w	r2, r0, r1
   200b0:	bf08      	it	eq
   200b2:	4770      	bxeq	lr
   200b4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   200b8:	d502      	bpl.n	200c0 <__aeabi_l2f+0x14>
   200ba:	4240      	negs	r0, r0
   200bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   200c0:	ea5f 0c01 	movs.w	ip, r1
   200c4:	bf02      	ittt	eq
   200c6:	4684      	moveq	ip, r0
   200c8:	4601      	moveq	r1, r0
   200ca:	2000      	moveq	r0, #0
   200cc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   200d0:	bf08      	it	eq
   200d2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   200d6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   200da:	fabc f28c 	clz	r2, ip
   200de:	3a08      	subs	r2, #8
   200e0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   200e4:	db10      	blt.n	20108 <__aeabi_l2f+0x5c>
   200e6:	fa01 fc02 	lsl.w	ip, r1, r2
   200ea:	4463      	add	r3, ip
   200ec:	fa00 fc02 	lsl.w	ip, r0, r2
   200f0:	f1c2 0220 	rsb	r2, r2, #32
   200f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   200f8:	fa20 f202 	lsr.w	r2, r0, r2
   200fc:	eb43 0002 	adc.w	r0, r3, r2
   20100:	bf08      	it	eq
   20102:	f020 0001 	biceq.w	r0, r0, #1
   20106:	4770      	bx	lr
   20108:	f102 0220 	add.w	r2, r2, #32
   2010c:	fa01 fc02 	lsl.w	ip, r1, r2
   20110:	f1c2 0220 	rsb	r2, r2, #32
   20114:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   20118:	fa21 f202 	lsr.w	r2, r1, r2
   2011c:	eb43 0002 	adc.w	r0, r3, r2
   20120:	bf08      	it	eq
   20122:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   20126:	4770      	bx	lr

00020128 <__aeabi_ldivmod>:
   20128:	b97b      	cbnz	r3, 2014a <__aeabi_ldivmod+0x22>
   2012a:	b972      	cbnz	r2, 2014a <__aeabi_ldivmod+0x22>
   2012c:	2900      	cmp	r1, #0
   2012e:	bfbe      	ittt	lt
   20130:	2000      	movlt	r0, #0
   20132:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   20136:	e006      	blt.n	20146 <__aeabi_ldivmod+0x1e>
   20138:	bf08      	it	eq
   2013a:	2800      	cmpeq	r0, #0
   2013c:	bf1c      	itt	ne
   2013e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   20142:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   20146:	f000 b9a3 	b.w	20490 <__aeabi_idiv0>
   2014a:	f1ad 0c08 	sub.w	ip, sp, #8
   2014e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   20152:	2900      	cmp	r1, #0
   20154:	db09      	blt.n	2016a <__aeabi_ldivmod+0x42>
   20156:	2b00      	cmp	r3, #0
   20158:	db1a      	blt.n	20190 <__aeabi_ldivmod+0x68>
   2015a:	f000 f835 	bl	201c8 <__udivmoddi4>
   2015e:	f8dd e004 	ldr.w	lr, [sp, #4]
   20162:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20166:	b004      	add	sp, #16
   20168:	4770      	bx	lr
   2016a:	4240      	negs	r0, r0
   2016c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20170:	2b00      	cmp	r3, #0
   20172:	db1b      	blt.n	201ac <__aeabi_ldivmod+0x84>
   20174:	f000 f828 	bl	201c8 <__udivmoddi4>
   20178:	f8dd e004 	ldr.w	lr, [sp, #4]
   2017c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20180:	b004      	add	sp, #16
   20182:	4240      	negs	r0, r0
   20184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20188:	4252      	negs	r2, r2
   2018a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2018e:	4770      	bx	lr
   20190:	4252      	negs	r2, r2
   20192:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   20196:	f000 f817 	bl	201c8 <__udivmoddi4>
   2019a:	f8dd e004 	ldr.w	lr, [sp, #4]
   2019e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   201a2:	b004      	add	sp, #16
   201a4:	4240      	negs	r0, r0
   201a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   201aa:	4770      	bx	lr
   201ac:	4252      	negs	r2, r2
   201ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   201b2:	f000 f809 	bl	201c8 <__udivmoddi4>
   201b6:	f8dd e004 	ldr.w	lr, [sp, #4]
   201ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   201be:	b004      	add	sp, #16
   201c0:	4252      	negs	r2, r2
   201c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   201c6:	4770      	bx	lr

000201c8 <__udivmoddi4>:
   201c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   201cc:	9e08      	ldr	r6, [sp, #32]
   201ce:	460d      	mov	r5, r1
   201d0:	4604      	mov	r4, r0
   201d2:	460f      	mov	r7, r1
   201d4:	2b00      	cmp	r3, #0
   201d6:	d14a      	bne.n	2026e <__udivmoddi4+0xa6>
   201d8:	428a      	cmp	r2, r1
   201da:	4694      	mov	ip, r2
   201dc:	d965      	bls.n	202aa <__udivmoddi4+0xe2>
   201de:	fab2 f382 	clz	r3, r2
   201e2:	b143      	cbz	r3, 201f6 <__udivmoddi4+0x2e>
   201e4:	fa02 fc03 	lsl.w	ip, r2, r3
   201e8:	f1c3 0220 	rsb	r2, r3, #32
   201ec:	409f      	lsls	r7, r3
   201ee:	fa20 f202 	lsr.w	r2, r0, r2
   201f2:	4317      	orrs	r7, r2
   201f4:	409c      	lsls	r4, r3
   201f6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   201fa:	fa1f f58c 	uxth.w	r5, ip
   201fe:	fbb7 f1fe 	udiv	r1, r7, lr
   20202:	0c22      	lsrs	r2, r4, #16
   20204:	fb0e 7711 	mls	r7, lr, r1, r7
   20208:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   2020c:	fb01 f005 	mul.w	r0, r1, r5
   20210:	4290      	cmp	r0, r2
   20212:	d90a      	bls.n	2022a <__udivmoddi4+0x62>
   20214:	eb1c 0202 	adds.w	r2, ip, r2
   20218:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
   2021c:	f080 811c 	bcs.w	20458 <__udivmoddi4+0x290>
   20220:	4290      	cmp	r0, r2
   20222:	f240 8119 	bls.w	20458 <__udivmoddi4+0x290>
   20226:	3902      	subs	r1, #2
   20228:	4462      	add	r2, ip
   2022a:	1a12      	subs	r2, r2, r0
   2022c:	b2a4      	uxth	r4, r4
   2022e:	fbb2 f0fe 	udiv	r0, r2, lr
   20232:	fb0e 2210 	mls	r2, lr, r0, r2
   20236:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   2023a:	fb00 f505 	mul.w	r5, r0, r5
   2023e:	42a5      	cmp	r5, r4
   20240:	d90a      	bls.n	20258 <__udivmoddi4+0x90>
   20242:	eb1c 0404 	adds.w	r4, ip, r4
   20246:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2024a:	f080 8107 	bcs.w	2045c <__udivmoddi4+0x294>
   2024e:	42a5      	cmp	r5, r4
   20250:	f240 8104 	bls.w	2045c <__udivmoddi4+0x294>
   20254:	4464      	add	r4, ip
   20256:	3802      	subs	r0, #2
   20258:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   2025c:	1b64      	subs	r4, r4, r5
   2025e:	2100      	movs	r1, #0
   20260:	b11e      	cbz	r6, 2026a <__udivmoddi4+0xa2>
   20262:	40dc      	lsrs	r4, r3
   20264:	2300      	movs	r3, #0
   20266:	e9c6 4300 	strd	r4, r3, [r6]
   2026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2026e:	428b      	cmp	r3, r1
   20270:	d908      	bls.n	20284 <__udivmoddi4+0xbc>
   20272:	2e00      	cmp	r6, #0
   20274:	f000 80ed 	beq.w	20452 <__udivmoddi4+0x28a>
   20278:	2100      	movs	r1, #0
   2027a:	e9c6 0500 	strd	r0, r5, [r6]
   2027e:	4608      	mov	r0, r1
   20280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20284:	fab3 f183 	clz	r1, r3
   20288:	2900      	cmp	r1, #0
   2028a:	d149      	bne.n	20320 <__udivmoddi4+0x158>
   2028c:	42ab      	cmp	r3, r5
   2028e:	d302      	bcc.n	20296 <__udivmoddi4+0xce>
   20290:	4282      	cmp	r2, r0
   20292:	f200 80f8 	bhi.w	20486 <__udivmoddi4+0x2be>
   20296:	1a84      	subs	r4, r0, r2
   20298:	eb65 0203 	sbc.w	r2, r5, r3
   2029c:	2001      	movs	r0, #1
   2029e:	4617      	mov	r7, r2
   202a0:	2e00      	cmp	r6, #0
   202a2:	d0e2      	beq.n	2026a <__udivmoddi4+0xa2>
   202a4:	e9c6 4700 	strd	r4, r7, [r6]
   202a8:	e7df      	b.n	2026a <__udivmoddi4+0xa2>
   202aa:	b902      	cbnz	r2, 202ae <__udivmoddi4+0xe6>
   202ac:	deff      	udf	#255	; 0xff
   202ae:	fab2 f382 	clz	r3, r2
   202b2:	2b00      	cmp	r3, #0
   202b4:	f040 8090 	bne.w	203d8 <__udivmoddi4+0x210>
   202b8:	1a8a      	subs	r2, r1, r2
   202ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
   202be:	fa1f fe8c 	uxth.w	lr, ip
   202c2:	2101      	movs	r1, #1
   202c4:	fbb2 f5f7 	udiv	r5, r2, r7
   202c8:	fb07 2015 	mls	r0, r7, r5, r2
   202cc:	0c22      	lsrs	r2, r4, #16
   202ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   202d2:	fb0e f005 	mul.w	r0, lr, r5
   202d6:	4290      	cmp	r0, r2
   202d8:	d908      	bls.n	202ec <__udivmoddi4+0x124>
   202da:	eb1c 0202 	adds.w	r2, ip, r2
   202de:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   202e2:	d202      	bcs.n	202ea <__udivmoddi4+0x122>
   202e4:	4290      	cmp	r0, r2
   202e6:	f200 80cb 	bhi.w	20480 <__udivmoddi4+0x2b8>
   202ea:	4645      	mov	r5, r8
   202ec:	1a12      	subs	r2, r2, r0
   202ee:	b2a4      	uxth	r4, r4
   202f0:	fbb2 f0f7 	udiv	r0, r2, r7
   202f4:	fb07 2210 	mls	r2, r7, r0, r2
   202f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   202fc:	fb0e fe00 	mul.w	lr, lr, r0
   20300:	45a6      	cmp	lr, r4
   20302:	d908      	bls.n	20316 <__udivmoddi4+0x14e>
   20304:	eb1c 0404 	adds.w	r4, ip, r4
   20308:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2030c:	d202      	bcs.n	20314 <__udivmoddi4+0x14c>
   2030e:	45a6      	cmp	lr, r4
   20310:	f200 80bb 	bhi.w	2048a <__udivmoddi4+0x2c2>
   20314:	4610      	mov	r0, r2
   20316:	eba4 040e 	sub.w	r4, r4, lr
   2031a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   2031e:	e79f      	b.n	20260 <__udivmoddi4+0x98>
   20320:	f1c1 0720 	rsb	r7, r1, #32
   20324:	408b      	lsls	r3, r1
   20326:	fa22 fc07 	lsr.w	ip, r2, r7
   2032a:	ea4c 0c03 	orr.w	ip, ip, r3
   2032e:	fa05 f401 	lsl.w	r4, r5, r1
   20332:	fa20 f307 	lsr.w	r3, r0, r7
   20336:	40fd      	lsrs	r5, r7
   20338:	ea4f 491c 	mov.w	r9, ip, lsr #16
   2033c:	4323      	orrs	r3, r4
   2033e:	fbb5 f8f9 	udiv	r8, r5, r9
   20342:	fa1f fe8c 	uxth.w	lr, ip
   20346:	fb09 5518 	mls	r5, r9, r8, r5
   2034a:	0c1c      	lsrs	r4, r3, #16
   2034c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   20350:	fb08 f50e 	mul.w	r5, r8, lr
   20354:	42a5      	cmp	r5, r4
   20356:	fa02 f201 	lsl.w	r2, r2, r1
   2035a:	fa00 f001 	lsl.w	r0, r0, r1
   2035e:	d90b      	bls.n	20378 <__udivmoddi4+0x1b0>
   20360:	eb1c 0404 	adds.w	r4, ip, r4
   20364:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   20368:	f080 8088 	bcs.w	2047c <__udivmoddi4+0x2b4>
   2036c:	42a5      	cmp	r5, r4
   2036e:	f240 8085 	bls.w	2047c <__udivmoddi4+0x2b4>
   20372:	f1a8 0802 	sub.w	r8, r8, #2
   20376:	4464      	add	r4, ip
   20378:	1b64      	subs	r4, r4, r5
   2037a:	b29d      	uxth	r5, r3
   2037c:	fbb4 f3f9 	udiv	r3, r4, r9
   20380:	fb09 4413 	mls	r4, r9, r3, r4
   20384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   20388:	fb03 fe0e 	mul.w	lr, r3, lr
   2038c:	45a6      	cmp	lr, r4
   2038e:	d908      	bls.n	203a2 <__udivmoddi4+0x1da>
   20390:	eb1c 0404 	adds.w	r4, ip, r4
   20394:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   20398:	d26c      	bcs.n	20474 <__udivmoddi4+0x2ac>
   2039a:	45a6      	cmp	lr, r4
   2039c:	d96a      	bls.n	20474 <__udivmoddi4+0x2ac>
   2039e:	3b02      	subs	r3, #2
   203a0:	4464      	add	r4, ip
   203a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   203a6:	fba3 9502 	umull	r9, r5, r3, r2
   203aa:	eba4 040e 	sub.w	r4, r4, lr
   203ae:	42ac      	cmp	r4, r5
   203b0:	46c8      	mov	r8, r9
   203b2:	46ae      	mov	lr, r5
   203b4:	d356      	bcc.n	20464 <__udivmoddi4+0x29c>
   203b6:	d053      	beq.n	20460 <__udivmoddi4+0x298>
   203b8:	b156      	cbz	r6, 203d0 <__udivmoddi4+0x208>
   203ba:	ebb0 0208 	subs.w	r2, r0, r8
   203be:	eb64 040e 	sbc.w	r4, r4, lr
   203c2:	fa04 f707 	lsl.w	r7, r4, r7
   203c6:	40ca      	lsrs	r2, r1
   203c8:	40cc      	lsrs	r4, r1
   203ca:	4317      	orrs	r7, r2
   203cc:	e9c6 7400 	strd	r7, r4, [r6]
   203d0:	4618      	mov	r0, r3
   203d2:	2100      	movs	r1, #0
   203d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   203d8:	f1c3 0120 	rsb	r1, r3, #32
   203dc:	fa02 fc03 	lsl.w	ip, r2, r3
   203e0:	fa20 f201 	lsr.w	r2, r0, r1
   203e4:	fa25 f101 	lsr.w	r1, r5, r1
   203e8:	409d      	lsls	r5, r3
   203ea:	432a      	orrs	r2, r5
   203ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
   203f0:	fa1f fe8c 	uxth.w	lr, ip
   203f4:	fbb1 f0f7 	udiv	r0, r1, r7
   203f8:	fb07 1510 	mls	r5, r7, r0, r1
   203fc:	0c11      	lsrs	r1, r2, #16
   203fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   20402:	fb00 f50e 	mul.w	r5, r0, lr
   20406:	428d      	cmp	r5, r1
   20408:	fa04 f403 	lsl.w	r4, r4, r3
   2040c:	d908      	bls.n	20420 <__udivmoddi4+0x258>
   2040e:	eb1c 0101 	adds.w	r1, ip, r1
   20412:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   20416:	d22f      	bcs.n	20478 <__udivmoddi4+0x2b0>
   20418:	428d      	cmp	r5, r1
   2041a:	d92d      	bls.n	20478 <__udivmoddi4+0x2b0>
   2041c:	3802      	subs	r0, #2
   2041e:	4461      	add	r1, ip
   20420:	1b49      	subs	r1, r1, r5
   20422:	b292      	uxth	r2, r2
   20424:	fbb1 f5f7 	udiv	r5, r1, r7
   20428:	fb07 1115 	mls	r1, r7, r5, r1
   2042c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   20430:	fb05 f10e 	mul.w	r1, r5, lr
   20434:	4291      	cmp	r1, r2
   20436:	d908      	bls.n	2044a <__udivmoddi4+0x282>
   20438:	eb1c 0202 	adds.w	r2, ip, r2
   2043c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   20440:	d216      	bcs.n	20470 <__udivmoddi4+0x2a8>
   20442:	4291      	cmp	r1, r2
   20444:	d914      	bls.n	20470 <__udivmoddi4+0x2a8>
   20446:	3d02      	subs	r5, #2
   20448:	4462      	add	r2, ip
   2044a:	1a52      	subs	r2, r2, r1
   2044c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
   20450:	e738      	b.n	202c4 <__udivmoddi4+0xfc>
   20452:	4631      	mov	r1, r6
   20454:	4630      	mov	r0, r6
   20456:	e708      	b.n	2026a <__udivmoddi4+0xa2>
   20458:	4639      	mov	r1, r7
   2045a:	e6e6      	b.n	2022a <__udivmoddi4+0x62>
   2045c:	4610      	mov	r0, r2
   2045e:	e6fb      	b.n	20258 <__udivmoddi4+0x90>
   20460:	4548      	cmp	r0, r9
   20462:	d2a9      	bcs.n	203b8 <__udivmoddi4+0x1f0>
   20464:	ebb9 0802 	subs.w	r8, r9, r2
   20468:	eb65 0e0c 	sbc.w	lr, r5, ip
   2046c:	3b01      	subs	r3, #1
   2046e:	e7a3      	b.n	203b8 <__udivmoddi4+0x1f0>
   20470:	4645      	mov	r5, r8
   20472:	e7ea      	b.n	2044a <__udivmoddi4+0x282>
   20474:	462b      	mov	r3, r5
   20476:	e794      	b.n	203a2 <__udivmoddi4+0x1da>
   20478:	4640      	mov	r0, r8
   2047a:	e7d1      	b.n	20420 <__udivmoddi4+0x258>
   2047c:	46d0      	mov	r8, sl
   2047e:	e77b      	b.n	20378 <__udivmoddi4+0x1b0>
   20480:	3d02      	subs	r5, #2
   20482:	4462      	add	r2, ip
   20484:	e732      	b.n	202ec <__udivmoddi4+0x124>
   20486:	4608      	mov	r0, r1
   20488:	e70a      	b.n	202a0 <__udivmoddi4+0xd8>
   2048a:	4464      	add	r4, ip
   2048c:	3802      	subs	r0, #2
   2048e:	e742      	b.n	20316 <__udivmoddi4+0x14e>

00020490 <__aeabi_idiv0>:
   20490:	4770      	bx	lr
   20492:	bf00      	nop

00020494 <atol>:
   20494:	220a      	movs	r2, #10
   20496:	2100      	movs	r1, #0
   20498:	f001 bd12 	b.w	21ec0 <strtol>

0002049c <toupper>:
   2049c:	4b03      	ldr	r3, [pc, #12]	; (204ac <toupper+0x10>)
   2049e:	5c1b      	ldrb	r3, [r3, r0]
   204a0:	f003 0303 	and.w	r3, r3, #3
   204a4:	2b02      	cmp	r3, #2
   204a6:	bf08      	it	eq
   204a8:	3820      	subeq	r0, #32
   204aa:	4770      	bx	lr
   204ac:	20004209 	.word	0x20004209

000204b0 <itoa>:
   204b0:	1e93      	subs	r3, r2, #2
   204b2:	2b22      	cmp	r3, #34	; 0x22
   204b4:	b510      	push	{r4, lr}
   204b6:	460c      	mov	r4, r1
   204b8:	d80c      	bhi.n	204d4 <itoa+0x24>
   204ba:	2a0a      	cmp	r2, #10
   204bc:	d003      	beq.n	204c6 <itoa+0x16>
   204be:	f001 fd0d 	bl	21edc <__utoa>
   204c2:	4620      	mov	r0, r4
   204c4:	bd10      	pop	{r4, pc}
   204c6:	2800      	cmp	r0, #0
   204c8:	daf9      	bge.n	204be <itoa+0xe>
   204ca:	232d      	movs	r3, #45	; 0x2d
   204cc:	f801 3b01 	strb.w	r3, [r1], #1
   204d0:	4240      	negs	r0, r0
   204d2:	e7f4      	b.n	204be <itoa+0xe>
   204d4:	2300      	movs	r3, #0
   204d6:	700b      	strb	r3, [r1, #0]
   204d8:	4618      	mov	r0, r3
   204da:	bd10      	pop	{r4, pc}

000204dc <malloc>:
   204dc:	4b02      	ldr	r3, [pc, #8]	; (204e8 <malloc+0xc>)
   204de:	4601      	mov	r1, r0
   204e0:	6818      	ldr	r0, [r3, #0]
   204e2:	f000 b80b 	b.w	204fc <_malloc_r>
   204e6:	bf00      	nop
   204e8:	200099ec 	.word	0x200099ec

000204ec <free>:
   204ec:	4b02      	ldr	r3, [pc, #8]	; (204f8 <free+0xc>)
   204ee:	4601      	mov	r1, r0
   204f0:	6818      	ldr	r0, [r3, #0]
   204f2:	f002 ba27 	b.w	22944 <_free_r>
   204f6:	bf00      	nop
   204f8:	200099ec 	.word	0x200099ec

000204fc <_malloc_r>:
   204fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20500:	f101 060b 	add.w	r6, r1, #11
   20504:	2e16      	cmp	r6, #22
   20506:	b083      	sub	sp, #12
   20508:	4604      	mov	r4, r0
   2050a:	d824      	bhi.n	20556 <_malloc_r+0x5a>
   2050c:	2910      	cmp	r1, #16
   2050e:	f200 80ba 	bhi.w	20686 <_malloc_r+0x18a>
   20512:	f000 faa3 	bl	20a5c <__malloc_lock>
   20516:	2610      	movs	r6, #16
   20518:	2218      	movs	r2, #24
   2051a:	2002      	movs	r0, #2
   2051c:	4fb5      	ldr	r7, [pc, #724]	; (207f4 <_malloc_r+0x2f8>)
   2051e:	443a      	add	r2, r7
   20520:	f1a2 0108 	sub.w	r1, r2, #8
   20524:	6853      	ldr	r3, [r2, #4]
   20526:	428b      	cmp	r3, r1
   20528:	f000 80ba 	beq.w	206a0 <_malloc_r+0x1a4>
   2052c:	685a      	ldr	r2, [r3, #4]
   2052e:	68d9      	ldr	r1, [r3, #12]
   20530:	f022 0203 	bic.w	r2, r2, #3
   20534:	441a      	add	r2, r3
   20536:	689d      	ldr	r5, [r3, #8]
   20538:	60e9      	str	r1, [r5, #12]
   2053a:	608d      	str	r5, [r1, #8]
   2053c:	6851      	ldr	r1, [r2, #4]
   2053e:	f041 0101 	orr.w	r1, r1, #1
   20542:	4620      	mov	r0, r4
   20544:	6051      	str	r1, [r2, #4]
   20546:	f103 0508 	add.w	r5, r3, #8
   2054a:	f000 fa8d 	bl	20a68 <__malloc_unlock>
   2054e:	4628      	mov	r0, r5
   20550:	b003      	add	sp, #12
   20552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20556:	f036 0607 	bics.w	r6, r6, #7
   2055a:	f100 8094 	bmi.w	20686 <_malloc_r+0x18a>
   2055e:	42b1      	cmp	r1, r6
   20560:	f200 8091 	bhi.w	20686 <_malloc_r+0x18a>
   20564:	f000 fa7a 	bl	20a5c <__malloc_lock>
   20568:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2056c:	f0c0 819a 	bcc.w	208a4 <_malloc_r+0x3a8>
   20570:	0a73      	lsrs	r3, r6, #9
   20572:	f000 808f 	beq.w	20694 <_malloc_r+0x198>
   20576:	2b04      	cmp	r3, #4
   20578:	f200 816f 	bhi.w	2085a <_malloc_r+0x35e>
   2057c:	09b3      	lsrs	r3, r6, #6
   2057e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   20582:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   20586:	00c3      	lsls	r3, r0, #3
   20588:	4f9a      	ldr	r7, [pc, #616]	; (207f4 <_malloc_r+0x2f8>)
   2058a:	443b      	add	r3, r7
   2058c:	f1a3 0508 	sub.w	r5, r3, #8
   20590:	685b      	ldr	r3, [r3, #4]
   20592:	429d      	cmp	r5, r3
   20594:	d106      	bne.n	205a4 <_malloc_r+0xa8>
   20596:	e00c      	b.n	205b2 <_malloc_r+0xb6>
   20598:	2900      	cmp	r1, #0
   2059a:	f280 8127 	bge.w	207ec <_malloc_r+0x2f0>
   2059e:	68db      	ldr	r3, [r3, #12]
   205a0:	429d      	cmp	r5, r3
   205a2:	d006      	beq.n	205b2 <_malloc_r+0xb6>
   205a4:	685a      	ldr	r2, [r3, #4]
   205a6:	f022 0203 	bic.w	r2, r2, #3
   205aa:	1b91      	subs	r1, r2, r6
   205ac:	290f      	cmp	r1, #15
   205ae:	ddf3      	ble.n	20598 <_malloc_r+0x9c>
   205b0:	4660      	mov	r0, ip
   205b2:	693d      	ldr	r5, [r7, #16]
   205b4:	f8df c250 	ldr.w	ip, [pc, #592]	; 20808 <_malloc_r+0x30c>
   205b8:	4565      	cmp	r5, ip
   205ba:	d07c      	beq.n	206b6 <_malloc_r+0x1ba>
   205bc:	686a      	ldr	r2, [r5, #4]
   205be:	f022 0203 	bic.w	r2, r2, #3
   205c2:	1b93      	subs	r3, r2, r6
   205c4:	2b0f      	cmp	r3, #15
   205c6:	f300 817b 	bgt.w	208c0 <_malloc_r+0x3c4>
   205ca:	2b00      	cmp	r3, #0
   205cc:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   205d0:	f280 816c 	bge.w	208ac <_malloc_r+0x3b0>
   205d4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   205d8:	f080 811a 	bcs.w	20810 <_malloc_r+0x314>
   205dc:	08d3      	lsrs	r3, r2, #3
   205de:	6879      	ldr	r1, [r7, #4]
   205e0:	3301      	adds	r3, #1
   205e2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   205e6:	2201      	movs	r2, #1
   205e8:	fa02 f20e 	lsl.w	r2, r2, lr
   205ec:	430a      	orrs	r2, r1
   205ee:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   205f2:	f8c5 e008 	str.w	lr, [r5, #8]
   205f6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   205fa:	3908      	subs	r1, #8
   205fc:	60e9      	str	r1, [r5, #12]
   205fe:	607a      	str	r2, [r7, #4]
   20600:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   20604:	f8ce 500c 	str.w	r5, [lr, #12]
   20608:	1083      	asrs	r3, r0, #2
   2060a:	2101      	movs	r1, #1
   2060c:	4099      	lsls	r1, r3
   2060e:	4291      	cmp	r1, r2
   20610:	d857      	bhi.n	206c2 <_malloc_r+0x1c6>
   20612:	4211      	tst	r1, r2
   20614:	d106      	bne.n	20624 <_malloc_r+0x128>
   20616:	f020 0003 	bic.w	r0, r0, #3
   2061a:	0049      	lsls	r1, r1, #1
   2061c:	4211      	tst	r1, r2
   2061e:	f100 0004 	add.w	r0, r0, #4
   20622:	d0fa      	beq.n	2061a <_malloc_r+0x11e>
   20624:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   20628:	464d      	mov	r5, r9
   2062a:	4686      	mov	lr, r0
   2062c:	f8d5 800c 	ldr.w	r8, [r5, #12]
   20630:	4545      	cmp	r5, r8
   20632:	d108      	bne.n	20646 <_malloc_r+0x14a>
   20634:	e11d      	b.n	20872 <_malloc_r+0x376>
   20636:	2b00      	cmp	r3, #0
   20638:	f280 8124 	bge.w	20884 <_malloc_r+0x388>
   2063c:	f8d8 800c 	ldr.w	r8, [r8, #12]
   20640:	4545      	cmp	r5, r8
   20642:	f000 8116 	beq.w	20872 <_malloc_r+0x376>
   20646:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2064a:	f022 0203 	bic.w	r2, r2, #3
   2064e:	1b93      	subs	r3, r2, r6
   20650:	2b0f      	cmp	r3, #15
   20652:	ddf0      	ble.n	20636 <_malloc_r+0x13a>
   20654:	4620      	mov	r0, r4
   20656:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   2065a:	eb08 0106 	add.w	r1, r8, r6
   2065e:	f046 0601 	orr.w	r6, r6, #1
   20662:	f8c8 6004 	str.w	r6, [r8, #4]
   20666:	60ec      	str	r4, [r5, #12]
   20668:	60a5      	str	r5, [r4, #8]
   2066a:	f043 0401 	orr.w	r4, r3, #1
   2066e:	e9c7 1104 	strd	r1, r1, [r7, #16]
   20672:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   20676:	604c      	str	r4, [r1, #4]
   20678:	f848 3002 	str.w	r3, [r8, r2]
   2067c:	f000 f9f4 	bl	20a68 <__malloc_unlock>
   20680:	f108 0508 	add.w	r5, r8, #8
   20684:	e002      	b.n	2068c <_malloc_r+0x190>
   20686:	230c      	movs	r3, #12
   20688:	6023      	str	r3, [r4, #0]
   2068a:	2500      	movs	r5, #0
   2068c:	4628      	mov	r0, r5
   2068e:	b003      	add	sp, #12
   20690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20694:	f44f 7300 	mov.w	r3, #512	; 0x200
   20698:	2040      	movs	r0, #64	; 0x40
   2069a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   2069e:	e773      	b.n	20588 <_malloc_r+0x8c>
   206a0:	68d3      	ldr	r3, [r2, #12]
   206a2:	429a      	cmp	r2, r3
   206a4:	bf08      	it	eq
   206a6:	3002      	addeq	r0, #2
   206a8:	f47f af40 	bne.w	2052c <_malloc_r+0x30>
   206ac:	693d      	ldr	r5, [r7, #16]
   206ae:	f8df c158 	ldr.w	ip, [pc, #344]	; 20808 <_malloc_r+0x30c>
   206b2:	4565      	cmp	r5, ip
   206b4:	d182      	bne.n	205bc <_malloc_r+0xc0>
   206b6:	687a      	ldr	r2, [r7, #4]
   206b8:	1083      	asrs	r3, r0, #2
   206ba:	2101      	movs	r1, #1
   206bc:	4099      	lsls	r1, r3
   206be:	4291      	cmp	r1, r2
   206c0:	d9a7      	bls.n	20612 <_malloc_r+0x116>
   206c2:	68bd      	ldr	r5, [r7, #8]
   206c4:	686b      	ldr	r3, [r5, #4]
   206c6:	f023 0903 	bic.w	r9, r3, #3
   206ca:	454e      	cmp	r6, r9
   206cc:	d803      	bhi.n	206d6 <_malloc_r+0x1da>
   206ce:	eba9 0306 	sub.w	r3, r9, r6
   206d2:	2b0f      	cmp	r3, #15
   206d4:	dc7a      	bgt.n	207cc <_malloc_r+0x2d0>
   206d6:	f8df b134 	ldr.w	fp, [pc, #308]	; 2080c <_malloc_r+0x310>
   206da:	4b47      	ldr	r3, [pc, #284]	; (207f8 <_malloc_r+0x2fc>)
   206dc:	f8db 2000 	ldr.w	r2, [fp]
   206e0:	681b      	ldr	r3, [r3, #0]
   206e2:	3201      	adds	r2, #1
   206e4:	4433      	add	r3, r6
   206e6:	eb05 0a09 	add.w	sl, r5, r9
   206ea:	f000 8133 	beq.w	20954 <_malloc_r+0x458>
   206ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   206f2:	330f      	adds	r3, #15
   206f4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   206f8:	f028 080f 	bic.w	r8, r8, #15
   206fc:	4641      	mov	r1, r8
   206fe:	4620      	mov	r0, r4
   20700:	f001 ff0c 	bl	2251c <_sbrk_r>
   20704:	1c41      	adds	r1, r0, #1
   20706:	4602      	mov	r2, r0
   20708:	f000 80f3 	beq.w	208f2 <_malloc_r+0x3f6>
   2070c:	4582      	cmp	sl, r0
   2070e:	f200 80ee 	bhi.w	208ee <_malloc_r+0x3f2>
   20712:	4b3a      	ldr	r3, [pc, #232]	; (207fc <_malloc_r+0x300>)
   20714:	6819      	ldr	r1, [r3, #0]
   20716:	4441      	add	r1, r8
   20718:	6019      	str	r1, [r3, #0]
   2071a:	4608      	mov	r0, r1
   2071c:	f000 814e 	beq.w	209bc <_malloc_r+0x4c0>
   20720:	f8db 1000 	ldr.w	r1, [fp]
   20724:	9301      	str	r3, [sp, #4]
   20726:	3101      	adds	r1, #1
   20728:	bf1b      	ittet	ne
   2072a:	eba2 010a 	subne.w	r1, r2, sl
   2072e:	1809      	addne	r1, r1, r0
   20730:	f8cb 2000 	streq.w	r2, [fp]
   20734:	6019      	strne	r1, [r3, #0]
   20736:	f012 0b07 	ands.w	fp, r2, #7
   2073a:	f000 8117 	beq.w	2096c <_malloc_r+0x470>
   2073e:	f1cb 0108 	rsb	r1, fp, #8
   20742:	440a      	add	r2, r1
   20744:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   20748:	4490      	add	r8, r2
   2074a:	3108      	adds	r1, #8
   2074c:	eba1 0108 	sub.w	r1, r1, r8
   20750:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   20754:	4651      	mov	r1, sl
   20756:	4620      	mov	r0, r4
   20758:	9200      	str	r2, [sp, #0]
   2075a:	f001 fedf 	bl	2251c <_sbrk_r>
   2075e:	1c42      	adds	r2, r0, #1
   20760:	e9dd 2300 	ldrd	r2, r3, [sp]
   20764:	f000 814f 	beq.w	20a06 <_malloc_r+0x50a>
   20768:	1a80      	subs	r0, r0, r2
   2076a:	eb00 080a 	add.w	r8, r0, sl
   2076e:	6819      	ldr	r1, [r3, #0]
   20770:	60ba      	str	r2, [r7, #8]
   20772:	f048 0001 	orr.w	r0, r8, #1
   20776:	4451      	add	r1, sl
   20778:	42bd      	cmp	r5, r7
   2077a:	6050      	str	r0, [r2, #4]
   2077c:	6019      	str	r1, [r3, #0]
   2077e:	f000 8129 	beq.w	209d4 <_malloc_r+0x4d8>
   20782:	f1b9 0f0f 	cmp.w	r9, #15
   20786:	f240 8127 	bls.w	209d8 <_malloc_r+0x4dc>
   2078a:	6868      	ldr	r0, [r5, #4]
   2078c:	f1a9 0c0c 	sub.w	ip, r9, #12
   20790:	f02c 0c07 	bic.w	ip, ip, #7
   20794:	f000 0001 	and.w	r0, r0, #1
   20798:	ea40 000c 	orr.w	r0, r0, ip
   2079c:	6068      	str	r0, [r5, #4]
   2079e:	f04f 0e05 	mov.w	lr, #5
   207a2:	eb05 000c 	add.w	r0, r5, ip
   207a6:	f1bc 0f0f 	cmp.w	ip, #15
   207aa:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   207ae:	f200 8132 	bhi.w	20a16 <_malloc_r+0x51a>
   207b2:	6850      	ldr	r0, [r2, #4]
   207b4:	4615      	mov	r5, r2
   207b6:	4b12      	ldr	r3, [pc, #72]	; (20800 <_malloc_r+0x304>)
   207b8:	681a      	ldr	r2, [r3, #0]
   207ba:	428a      	cmp	r2, r1
   207bc:	bf38      	it	cc
   207be:	6019      	strcc	r1, [r3, #0]
   207c0:	4b10      	ldr	r3, [pc, #64]	; (20804 <_malloc_r+0x308>)
   207c2:	681a      	ldr	r2, [r3, #0]
   207c4:	428a      	cmp	r2, r1
   207c6:	bf38      	it	cc
   207c8:	6019      	strcc	r1, [r3, #0]
   207ca:	e094      	b.n	208f6 <_malloc_r+0x3fa>
   207cc:	19aa      	adds	r2, r5, r6
   207ce:	f043 0301 	orr.w	r3, r3, #1
   207d2:	f046 0601 	orr.w	r6, r6, #1
   207d6:	606e      	str	r6, [r5, #4]
   207d8:	4620      	mov	r0, r4
   207da:	60ba      	str	r2, [r7, #8]
   207dc:	6053      	str	r3, [r2, #4]
   207de:	f000 f943 	bl	20a68 <__malloc_unlock>
   207e2:	3508      	adds	r5, #8
   207e4:	4628      	mov	r0, r5
   207e6:	b003      	add	sp, #12
   207e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207ec:	68d9      	ldr	r1, [r3, #12]
   207ee:	441a      	add	r2, r3
   207f0:	e6a1      	b.n	20536 <_malloc_r+0x3a>
   207f2:	bf00      	nop
   207f4:	200095d0 	.word	0x200095d0
   207f8:	2000c990 	.word	0x2000c990
   207fc:	2000c960 	.word	0x2000c960
   20800:	2000c988 	.word	0x2000c988
   20804:	2000c98c 	.word	0x2000c98c
   20808:	200095d8 	.word	0x200095d8
   2080c:	200099d8 	.word	0x200099d8
   20810:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   20814:	ea4f 2352 	mov.w	r3, r2, lsr #9
   20818:	d363      	bcc.n	208e2 <_malloc_r+0x3e6>
   2081a:	2b14      	cmp	r3, #20
   2081c:	f200 80b7 	bhi.w	2098e <_malloc_r+0x492>
   20820:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   20824:	00c9      	lsls	r1, r1, #3
   20826:	335b      	adds	r3, #91	; 0x5b
   20828:	eb07 0e01 	add.w	lr, r7, r1
   2082c:	5879      	ldr	r1, [r7, r1]
   2082e:	f1ae 0e08 	sub.w	lr, lr, #8
   20832:	458e      	cmp	lr, r1
   20834:	f000 8091 	beq.w	2095a <_malloc_r+0x45e>
   20838:	684b      	ldr	r3, [r1, #4]
   2083a:	f023 0303 	bic.w	r3, r3, #3
   2083e:	4293      	cmp	r3, r2
   20840:	d902      	bls.n	20848 <_malloc_r+0x34c>
   20842:	6889      	ldr	r1, [r1, #8]
   20844:	458e      	cmp	lr, r1
   20846:	d1f7      	bne.n	20838 <_malloc_r+0x33c>
   20848:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   2084c:	687a      	ldr	r2, [r7, #4]
   2084e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   20852:	f8ce 5008 	str.w	r5, [lr, #8]
   20856:	60cd      	str	r5, [r1, #12]
   20858:	e6d6      	b.n	20608 <_malloc_r+0x10c>
   2085a:	2b14      	cmp	r3, #20
   2085c:	d959      	bls.n	20912 <_malloc_r+0x416>
   2085e:	2b54      	cmp	r3, #84	; 0x54
   20860:	f200 809d 	bhi.w	2099e <_malloc_r+0x4a2>
   20864:	0b33      	lsrs	r3, r6, #12
   20866:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2086a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   2086e:	00c3      	lsls	r3, r0, #3
   20870:	e68a      	b.n	20588 <_malloc_r+0x8c>
   20872:	f10e 0e01 	add.w	lr, lr, #1
   20876:	f01e 0f03 	tst.w	lr, #3
   2087a:	f105 0508 	add.w	r5, r5, #8
   2087e:	f47f aed5 	bne.w	2062c <_malloc_r+0x130>
   20882:	e051      	b.n	20928 <_malloc_r+0x42c>
   20884:	4442      	add	r2, r8
   20886:	4645      	mov	r5, r8
   20888:	6853      	ldr	r3, [r2, #4]
   2088a:	f8d8 100c 	ldr.w	r1, [r8, #12]
   2088e:	f043 0301 	orr.w	r3, r3, #1
   20892:	6053      	str	r3, [r2, #4]
   20894:	f855 3f08 	ldr.w	r3, [r5, #8]!
   20898:	4620      	mov	r0, r4
   2089a:	60d9      	str	r1, [r3, #12]
   2089c:	608b      	str	r3, [r1, #8]
   2089e:	f000 f8e3 	bl	20a68 <__malloc_unlock>
   208a2:	e6f3      	b.n	2068c <_malloc_r+0x190>
   208a4:	08f0      	lsrs	r0, r6, #3
   208a6:	f106 0208 	add.w	r2, r6, #8
   208aa:	e637      	b.n	2051c <_malloc_r+0x20>
   208ac:	442a      	add	r2, r5
   208ae:	4620      	mov	r0, r4
   208b0:	6853      	ldr	r3, [r2, #4]
   208b2:	f043 0301 	orr.w	r3, r3, #1
   208b6:	6053      	str	r3, [r2, #4]
   208b8:	3508      	adds	r5, #8
   208ba:	f000 f8d5 	bl	20a68 <__malloc_unlock>
   208be:	e6e5      	b.n	2068c <_malloc_r+0x190>
   208c0:	19a9      	adds	r1, r5, r6
   208c2:	4620      	mov	r0, r4
   208c4:	f046 0601 	orr.w	r6, r6, #1
   208c8:	f043 0401 	orr.w	r4, r3, #1
   208cc:	606e      	str	r6, [r5, #4]
   208ce:	e9c7 1104 	strd	r1, r1, [r7, #16]
   208d2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   208d6:	604c      	str	r4, [r1, #4]
   208d8:	50ab      	str	r3, [r5, r2]
   208da:	f000 f8c5 	bl	20a68 <__malloc_unlock>
   208de:	3508      	adds	r5, #8
   208e0:	e6d4      	b.n	2068c <_malloc_r+0x190>
   208e2:	0993      	lsrs	r3, r2, #6
   208e4:	f103 0139 	add.w	r1, r3, #57	; 0x39
   208e8:	00c9      	lsls	r1, r1, #3
   208ea:	3338      	adds	r3, #56	; 0x38
   208ec:	e79c      	b.n	20828 <_malloc_r+0x32c>
   208ee:	42bd      	cmp	r5, r7
   208f0:	d05f      	beq.n	209b2 <_malloc_r+0x4b6>
   208f2:	68bd      	ldr	r5, [r7, #8]
   208f4:	6868      	ldr	r0, [r5, #4]
   208f6:	f020 0803 	bic.w	r8, r0, #3
   208fa:	4546      	cmp	r6, r8
   208fc:	eba8 0306 	sub.w	r3, r8, r6
   20900:	d802      	bhi.n	20908 <_malloc_r+0x40c>
   20902:	2b0f      	cmp	r3, #15
   20904:	f73f af62 	bgt.w	207cc <_malloc_r+0x2d0>
   20908:	4620      	mov	r0, r4
   2090a:	f000 f8ad 	bl	20a68 <__malloc_unlock>
   2090e:	2500      	movs	r5, #0
   20910:	e6bc      	b.n	2068c <_malloc_r+0x190>
   20912:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   20916:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   2091a:	00c3      	lsls	r3, r0, #3
   2091c:	e634      	b.n	20588 <_malloc_r+0x8c>
   2091e:	f859 3908 	ldr.w	r3, [r9], #-8
   20922:	454b      	cmp	r3, r9
   20924:	f040 8096 	bne.w	20a54 <_malloc_r+0x558>
   20928:	f010 0f03 	tst.w	r0, #3
   2092c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   20930:	d1f5      	bne.n	2091e <_malloc_r+0x422>
   20932:	687b      	ldr	r3, [r7, #4]
   20934:	ea23 0301 	bic.w	r3, r3, r1
   20938:	607b      	str	r3, [r7, #4]
   2093a:	0049      	lsls	r1, r1, #1
   2093c:	4299      	cmp	r1, r3
   2093e:	f63f aec0 	bhi.w	206c2 <_malloc_r+0x1c6>
   20942:	b919      	cbnz	r1, 2094c <_malloc_r+0x450>
   20944:	e6bd      	b.n	206c2 <_malloc_r+0x1c6>
   20946:	0049      	lsls	r1, r1, #1
   20948:	f10e 0e04 	add.w	lr, lr, #4
   2094c:	4219      	tst	r1, r3
   2094e:	d0fa      	beq.n	20946 <_malloc_r+0x44a>
   20950:	4670      	mov	r0, lr
   20952:	e667      	b.n	20624 <_malloc_r+0x128>
   20954:	f103 0810 	add.w	r8, r3, #16
   20958:	e6d0      	b.n	206fc <_malloc_r+0x200>
   2095a:	109a      	asrs	r2, r3, #2
   2095c:	f04f 0801 	mov.w	r8, #1
   20960:	687b      	ldr	r3, [r7, #4]
   20962:	fa08 f202 	lsl.w	r2, r8, r2
   20966:	431a      	orrs	r2, r3
   20968:	607a      	str	r2, [r7, #4]
   2096a:	e770      	b.n	2084e <_malloc_r+0x352>
   2096c:	eb02 0108 	add.w	r1, r2, r8
   20970:	4249      	negs	r1, r1
   20972:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   20976:	4651      	mov	r1, sl
   20978:	4620      	mov	r0, r4
   2097a:	9200      	str	r2, [sp, #0]
   2097c:	f001 fdce 	bl	2251c <_sbrk_r>
   20980:	1c43      	adds	r3, r0, #1
   20982:	e9dd 2300 	ldrd	r2, r3, [sp]
   20986:	f47f aeef 	bne.w	20768 <_malloc_r+0x26c>
   2098a:	46da      	mov	sl, fp
   2098c:	e6ef      	b.n	2076e <_malloc_r+0x272>
   2098e:	2b54      	cmp	r3, #84	; 0x54
   20990:	d825      	bhi.n	209de <_malloc_r+0x4e2>
   20992:	0b13      	lsrs	r3, r2, #12
   20994:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   20998:	00c9      	lsls	r1, r1, #3
   2099a:	336e      	adds	r3, #110	; 0x6e
   2099c:	e744      	b.n	20828 <_malloc_r+0x32c>
   2099e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   209a2:	d825      	bhi.n	209f0 <_malloc_r+0x4f4>
   209a4:	0bf3      	lsrs	r3, r6, #15
   209a6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   209aa:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   209ae:	00c3      	lsls	r3, r0, #3
   209b0:	e5ea      	b.n	20588 <_malloc_r+0x8c>
   209b2:	4b29      	ldr	r3, [pc, #164]	; (20a58 <_malloc_r+0x55c>)
   209b4:	6818      	ldr	r0, [r3, #0]
   209b6:	4440      	add	r0, r8
   209b8:	6018      	str	r0, [r3, #0]
   209ba:	e6b1      	b.n	20720 <_malloc_r+0x224>
   209bc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   209c0:	f1bc 0f00 	cmp.w	ip, #0
   209c4:	f47f aeac 	bne.w	20720 <_malloc_r+0x224>
   209c8:	68bd      	ldr	r5, [r7, #8]
   209ca:	44c8      	add	r8, r9
   209cc:	f048 0001 	orr.w	r0, r8, #1
   209d0:	6068      	str	r0, [r5, #4]
   209d2:	e6f0      	b.n	207b6 <_malloc_r+0x2ba>
   209d4:	4615      	mov	r5, r2
   209d6:	e6ee      	b.n	207b6 <_malloc_r+0x2ba>
   209d8:	2301      	movs	r3, #1
   209da:	6053      	str	r3, [r2, #4]
   209dc:	e794      	b.n	20908 <_malloc_r+0x40c>
   209de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   209e2:	d823      	bhi.n	20a2c <_malloc_r+0x530>
   209e4:	0bd3      	lsrs	r3, r2, #15
   209e6:	f103 0178 	add.w	r1, r3, #120	; 0x78
   209ea:	00c9      	lsls	r1, r1, #3
   209ec:	3377      	adds	r3, #119	; 0x77
   209ee:	e71b      	b.n	20828 <_malloc_r+0x32c>
   209f0:	f240 5254 	movw	r2, #1364	; 0x554
   209f4:	4293      	cmp	r3, r2
   209f6:	d823      	bhi.n	20a40 <_malloc_r+0x544>
   209f8:	0cb3      	lsrs	r3, r6, #18
   209fa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   209fe:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   20a02:	00c3      	lsls	r3, r0, #3
   20a04:	e5c0      	b.n	20588 <_malloc_r+0x8c>
   20a06:	f1ab 0b08 	sub.w	fp, fp, #8
   20a0a:	44d8      	add	r8, fp
   20a0c:	eba8 0802 	sub.w	r8, r8, r2
   20a10:	f04f 0a00 	mov.w	sl, #0
   20a14:	e6ab      	b.n	2076e <_malloc_r+0x272>
   20a16:	f105 0108 	add.w	r1, r5, #8
   20a1a:	4620      	mov	r0, r4
   20a1c:	9300      	str	r3, [sp, #0]
   20a1e:	f001 ff91 	bl	22944 <_free_r>
   20a22:	68bd      	ldr	r5, [r7, #8]
   20a24:	9b00      	ldr	r3, [sp, #0]
   20a26:	6868      	ldr	r0, [r5, #4]
   20a28:	6819      	ldr	r1, [r3, #0]
   20a2a:	e6c4      	b.n	207b6 <_malloc_r+0x2ba>
   20a2c:	f240 5154 	movw	r1, #1364	; 0x554
   20a30:	428b      	cmp	r3, r1
   20a32:	d80b      	bhi.n	20a4c <_malloc_r+0x550>
   20a34:	0c93      	lsrs	r3, r2, #18
   20a36:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   20a3a:	00c9      	lsls	r1, r1, #3
   20a3c:	337c      	adds	r3, #124	; 0x7c
   20a3e:	e6f3      	b.n	20828 <_malloc_r+0x32c>
   20a40:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   20a44:	207f      	movs	r0, #127	; 0x7f
   20a46:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   20a4a:	e59d      	b.n	20588 <_malloc_r+0x8c>
   20a4c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   20a50:	237e      	movs	r3, #126	; 0x7e
   20a52:	e6e9      	b.n	20828 <_malloc_r+0x32c>
   20a54:	687b      	ldr	r3, [r7, #4]
   20a56:	e770      	b.n	2093a <_malloc_r+0x43e>
   20a58:	2000c960 	.word	0x2000c960

00020a5c <__malloc_lock>:
   20a5c:	4801      	ldr	r0, [pc, #4]	; (20a64 <__malloc_lock+0x8>)
   20a5e:	f001 be11 	b.w	22684 <__retarget_lock_acquire_recursive>
   20a62:	bf00      	nop
   20a64:	2000c958 	.word	0x2000c958

00020a68 <__malloc_unlock>:
   20a68:	4801      	ldr	r0, [pc, #4]	; (20a70 <__malloc_unlock+0x8>)
   20a6a:	f001 be0d 	b.w	22688 <__retarget_lock_release_recursive>
   20a6e:	bf00      	nop
   20a70:	2000c958 	.word	0x2000c958

00020a74 <realloc>:
   20a74:	b410      	push	{r4}
   20a76:	4c04      	ldr	r4, [pc, #16]	; (20a88 <realloc+0x14>)
   20a78:	4603      	mov	r3, r0
   20a7a:	460a      	mov	r2, r1
   20a7c:	6820      	ldr	r0, [r4, #0]
   20a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
   20a82:	4619      	mov	r1, r3
   20a84:	f000 b802 	b.w	20a8c <_realloc_r>
   20a88:	200099ec 	.word	0x200099ec

00020a8c <_realloc_r>:
   20a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a90:	4617      	mov	r7, r2
   20a92:	2900      	cmp	r1, #0
   20a94:	f000 8098 	beq.w	20bc8 <_realloc_r+0x13c>
   20a98:	460c      	mov	r4, r1
   20a9a:	f107 050b 	add.w	r5, r7, #11
   20a9e:	4680      	mov	r8, r0
   20aa0:	f7ff ffdc 	bl	20a5c <__malloc_lock>
   20aa4:	2d16      	cmp	r5, #22
   20aa6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   20aaa:	d85b      	bhi.n	20b64 <_realloc_r+0xd8>
   20aac:	2510      	movs	r5, #16
   20aae:	462a      	mov	r2, r5
   20ab0:	42af      	cmp	r7, r5
   20ab2:	d85c      	bhi.n	20b6e <_realloc_r+0xe2>
   20ab4:	f021 0603 	bic.w	r6, r1, #3
   20ab8:	4296      	cmp	r6, r2
   20aba:	f1a4 0908 	sub.w	r9, r4, #8
   20abe:	da62      	bge.n	20b86 <_realloc_r+0xfa>
   20ac0:	4bbc      	ldr	r3, [pc, #752]	; (20db4 <_realloc_r+0x328>)
   20ac2:	f8d3 c008 	ldr.w	ip, [r3, #8]
   20ac6:	eb09 0006 	add.w	r0, r9, r6
   20aca:	4584      	cmp	ip, r0
   20acc:	f000 8097 	beq.w	20bfe <_realloc_r+0x172>
   20ad0:	f8d0 c004 	ldr.w	ip, [r0, #4]
   20ad4:	f02c 0301 	bic.w	r3, ip, #1
   20ad8:	4403      	add	r3, r0
   20ada:	685b      	ldr	r3, [r3, #4]
   20adc:	07db      	lsls	r3, r3, #31
   20ade:	d468      	bmi.n	20bb2 <_realloc_r+0x126>
   20ae0:	f02c 0c03 	bic.w	ip, ip, #3
   20ae4:	eb06 030c 	add.w	r3, r6, ip
   20ae8:	4293      	cmp	r3, r2
   20aea:	da47      	bge.n	20b7c <_realloc_r+0xf0>
   20aec:	07cb      	lsls	r3, r1, #31
   20aee:	d410      	bmi.n	20b12 <_realloc_r+0x86>
   20af0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   20af4:	eba9 0a03 	sub.w	sl, r9, r3
   20af8:	f8da 3004 	ldr.w	r3, [sl, #4]
   20afc:	f023 0103 	bic.w	r1, r3, #3
   20b00:	448c      	add	ip, r1
   20b02:	44b4      	add	ip, r6
   20b04:	4594      	cmp	ip, r2
   20b06:	f280 8111 	bge.w	20d2c <_realloc_r+0x2a0>
   20b0a:	1873      	adds	r3, r6, r1
   20b0c:	4293      	cmp	r3, r2
   20b0e:	f280 80e8 	bge.w	20ce2 <_realloc_r+0x256>
   20b12:	4639      	mov	r1, r7
   20b14:	4640      	mov	r0, r8
   20b16:	f7ff fcf1 	bl	204fc <_malloc_r>
   20b1a:	4607      	mov	r7, r0
   20b1c:	b1e0      	cbz	r0, 20b58 <_realloc_r+0xcc>
   20b1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20b22:	f023 0301 	bic.w	r3, r3, #1
   20b26:	444b      	add	r3, r9
   20b28:	f1a0 0208 	sub.w	r2, r0, #8
   20b2c:	4293      	cmp	r3, r2
   20b2e:	f000 80d2 	beq.w	20cd6 <_realloc_r+0x24a>
   20b32:	1f32      	subs	r2, r6, #4
   20b34:	2a24      	cmp	r2, #36	; 0x24
   20b36:	f200 80f5 	bhi.w	20d24 <_realloc_r+0x298>
   20b3a:	2a13      	cmp	r2, #19
   20b3c:	f200 80ac 	bhi.w	20c98 <_realloc_r+0x20c>
   20b40:	4603      	mov	r3, r0
   20b42:	4622      	mov	r2, r4
   20b44:	6811      	ldr	r1, [r2, #0]
   20b46:	6019      	str	r1, [r3, #0]
   20b48:	6851      	ldr	r1, [r2, #4]
   20b4a:	6059      	str	r1, [r3, #4]
   20b4c:	6892      	ldr	r2, [r2, #8]
   20b4e:	609a      	str	r2, [r3, #8]
   20b50:	4621      	mov	r1, r4
   20b52:	4640      	mov	r0, r8
   20b54:	f001 fef6 	bl	22944 <_free_r>
   20b58:	4640      	mov	r0, r8
   20b5a:	f7ff ff85 	bl	20a68 <__malloc_unlock>
   20b5e:	4638      	mov	r0, r7
   20b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b64:	f025 0507 	bic.w	r5, r5, #7
   20b68:	2d00      	cmp	r5, #0
   20b6a:	462a      	mov	r2, r5
   20b6c:	daa0      	bge.n	20ab0 <_realloc_r+0x24>
   20b6e:	230c      	movs	r3, #12
   20b70:	f8c8 3000 	str.w	r3, [r8]
   20b74:	2700      	movs	r7, #0
   20b76:	4638      	mov	r0, r7
   20b78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b7c:	461e      	mov	r6, r3
   20b7e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   20b82:	60d3      	str	r3, [r2, #12]
   20b84:	609a      	str	r2, [r3, #8]
   20b86:	1b73      	subs	r3, r6, r5
   20b88:	2b0f      	cmp	r3, #15
   20b8a:	d822      	bhi.n	20bd2 <_realloc_r+0x146>
   20b8c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   20b90:	f003 0301 	and.w	r3, r3, #1
   20b94:	4333      	orrs	r3, r6
   20b96:	444e      	add	r6, r9
   20b98:	f8c9 3004 	str.w	r3, [r9, #4]
   20b9c:	6873      	ldr	r3, [r6, #4]
   20b9e:	f043 0301 	orr.w	r3, r3, #1
   20ba2:	6073      	str	r3, [r6, #4]
   20ba4:	4640      	mov	r0, r8
   20ba6:	4627      	mov	r7, r4
   20ba8:	f7ff ff5e 	bl	20a68 <__malloc_unlock>
   20bac:	4638      	mov	r0, r7
   20bae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20bb2:	07c9      	lsls	r1, r1, #31
   20bb4:	d4ad      	bmi.n	20b12 <_realloc_r+0x86>
   20bb6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   20bba:	eba9 0a03 	sub.w	sl, r9, r3
   20bbe:	f8da 1004 	ldr.w	r1, [sl, #4]
   20bc2:	f021 0103 	bic.w	r1, r1, #3
   20bc6:	e7a0      	b.n	20b0a <_realloc_r+0x7e>
   20bc8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bcc:	4611      	mov	r1, r2
   20bce:	f7ff bc95 	b.w	204fc <_malloc_r>
   20bd2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   20bd6:	eb09 0105 	add.w	r1, r9, r5
   20bda:	f002 0201 	and.w	r2, r2, #1
   20bde:	444e      	add	r6, r9
   20be0:	f043 0301 	orr.w	r3, r3, #1
   20be4:	432a      	orrs	r2, r5
   20be6:	f8c9 2004 	str.w	r2, [r9, #4]
   20bea:	604b      	str	r3, [r1, #4]
   20bec:	6873      	ldr	r3, [r6, #4]
   20bee:	f043 0301 	orr.w	r3, r3, #1
   20bf2:	3108      	adds	r1, #8
   20bf4:	6073      	str	r3, [r6, #4]
   20bf6:	4640      	mov	r0, r8
   20bf8:	f001 fea4 	bl	22944 <_free_r>
   20bfc:	e7d2      	b.n	20ba4 <_realloc_r+0x118>
   20bfe:	f8dc 0004 	ldr.w	r0, [ip, #4]
   20c02:	f020 0b03 	bic.w	fp, r0, #3
   20c06:	eb06 0c0b 	add.w	ip, r6, fp
   20c0a:	f105 0010 	add.w	r0, r5, #16
   20c0e:	4584      	cmp	ip, r0
   20c10:	da4d      	bge.n	20cae <_realloc_r+0x222>
   20c12:	07c9      	lsls	r1, r1, #31
   20c14:	f53f af7d 	bmi.w	20b12 <_realloc_r+0x86>
   20c18:	f854 1c08 	ldr.w	r1, [r4, #-8]
   20c1c:	eba9 0a01 	sub.w	sl, r9, r1
   20c20:	f8da 1004 	ldr.w	r1, [sl, #4]
   20c24:	f021 0103 	bic.w	r1, r1, #3
   20c28:	448b      	add	fp, r1
   20c2a:	44b3      	add	fp, r6
   20c2c:	4558      	cmp	r0, fp
   20c2e:	f73f af6c 	bgt.w	20b0a <_realloc_r+0x7e>
   20c32:	4657      	mov	r7, sl
   20c34:	f8da 100c 	ldr.w	r1, [sl, #12]
   20c38:	f857 0f08 	ldr.w	r0, [r7, #8]!
   20c3c:	1f32      	subs	r2, r6, #4
   20c3e:	2a24      	cmp	r2, #36	; 0x24
   20c40:	60c1      	str	r1, [r0, #12]
   20c42:	6088      	str	r0, [r1, #8]
   20c44:	f200 80db 	bhi.w	20dfe <_realloc_r+0x372>
   20c48:	2a13      	cmp	r2, #19
   20c4a:	f240 80d6 	bls.w	20dfa <_realloc_r+0x36e>
   20c4e:	6821      	ldr	r1, [r4, #0]
   20c50:	f8ca 1008 	str.w	r1, [sl, #8]
   20c54:	6861      	ldr	r1, [r4, #4]
   20c56:	f8ca 100c 	str.w	r1, [sl, #12]
   20c5a:	2a1b      	cmp	r2, #27
   20c5c:	f200 80df 	bhi.w	20e1e <_realloc_r+0x392>
   20c60:	3408      	adds	r4, #8
   20c62:	f10a 0210 	add.w	r2, sl, #16
   20c66:	6821      	ldr	r1, [r4, #0]
   20c68:	6011      	str	r1, [r2, #0]
   20c6a:	6861      	ldr	r1, [r4, #4]
   20c6c:	6051      	str	r1, [r2, #4]
   20c6e:	68a1      	ldr	r1, [r4, #8]
   20c70:	6091      	str	r1, [r2, #8]
   20c72:	eb0a 0105 	add.w	r1, sl, r5
   20c76:	ebab 0205 	sub.w	r2, fp, r5
   20c7a:	f042 0201 	orr.w	r2, r2, #1
   20c7e:	6099      	str	r1, [r3, #8]
   20c80:	604a      	str	r2, [r1, #4]
   20c82:	f8da 3004 	ldr.w	r3, [sl, #4]
   20c86:	f003 0301 	and.w	r3, r3, #1
   20c8a:	432b      	orrs	r3, r5
   20c8c:	4640      	mov	r0, r8
   20c8e:	f8ca 3004 	str.w	r3, [sl, #4]
   20c92:	f7ff fee9 	bl	20a68 <__malloc_unlock>
   20c96:	e76e      	b.n	20b76 <_realloc_r+0xea>
   20c98:	6823      	ldr	r3, [r4, #0]
   20c9a:	6003      	str	r3, [r0, #0]
   20c9c:	6863      	ldr	r3, [r4, #4]
   20c9e:	6043      	str	r3, [r0, #4]
   20ca0:	2a1b      	cmp	r2, #27
   20ca2:	d868      	bhi.n	20d76 <_realloc_r+0x2ea>
   20ca4:	f104 0208 	add.w	r2, r4, #8
   20ca8:	f100 0308 	add.w	r3, r0, #8
   20cac:	e74a      	b.n	20b44 <_realloc_r+0xb8>
   20cae:	eb09 0205 	add.w	r2, r9, r5
   20cb2:	609a      	str	r2, [r3, #8]
   20cb4:	ebac 0305 	sub.w	r3, ip, r5
   20cb8:	f043 0301 	orr.w	r3, r3, #1
   20cbc:	6053      	str	r3, [r2, #4]
   20cbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20cc2:	f003 0301 	and.w	r3, r3, #1
   20cc6:	432b      	orrs	r3, r5
   20cc8:	4640      	mov	r0, r8
   20cca:	f844 3c04 	str.w	r3, [r4, #-4]
   20cce:	f7ff fecb 	bl	20a68 <__malloc_unlock>
   20cd2:	4627      	mov	r7, r4
   20cd4:	e74f      	b.n	20b76 <_realloc_r+0xea>
   20cd6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   20cda:	f023 0303 	bic.w	r3, r3, #3
   20cde:	441e      	add	r6, r3
   20ce0:	e751      	b.n	20b86 <_realloc_r+0xfa>
   20ce2:	4657      	mov	r7, sl
   20ce4:	f8da 100c 	ldr.w	r1, [sl, #12]
   20ce8:	f857 0f08 	ldr.w	r0, [r7, #8]!
   20cec:	1f32      	subs	r2, r6, #4
   20cee:	2a24      	cmp	r2, #36	; 0x24
   20cf0:	60c1      	str	r1, [r0, #12]
   20cf2:	6088      	str	r0, [r1, #8]
   20cf4:	d84c      	bhi.n	20d90 <_realloc_r+0x304>
   20cf6:	2a13      	cmp	r2, #19
   20cf8:	d948      	bls.n	20d8c <_realloc_r+0x300>
   20cfa:	6821      	ldr	r1, [r4, #0]
   20cfc:	f8ca 1008 	str.w	r1, [sl, #8]
   20d00:	6861      	ldr	r1, [r4, #4]
   20d02:	f8ca 100c 	str.w	r1, [sl, #12]
   20d06:	2a1b      	cmp	r2, #27
   20d08:	d856      	bhi.n	20db8 <_realloc_r+0x32c>
   20d0a:	3408      	adds	r4, #8
   20d0c:	f10a 0210 	add.w	r2, sl, #16
   20d10:	461e      	mov	r6, r3
   20d12:	6823      	ldr	r3, [r4, #0]
   20d14:	6013      	str	r3, [r2, #0]
   20d16:	6863      	ldr	r3, [r4, #4]
   20d18:	6053      	str	r3, [r2, #4]
   20d1a:	68a3      	ldr	r3, [r4, #8]
   20d1c:	6093      	str	r3, [r2, #8]
   20d1e:	46d1      	mov	r9, sl
   20d20:	463c      	mov	r4, r7
   20d22:	e730      	b.n	20b86 <_realloc_r+0xfa>
   20d24:	4621      	mov	r1, r4
   20d26:	f001 fa6f 	bl	22208 <memmove>
   20d2a:	e711      	b.n	20b50 <_realloc_r+0xc4>
   20d2c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   20d30:	4657      	mov	r7, sl
   20d32:	60cb      	str	r3, [r1, #12]
   20d34:	6099      	str	r1, [r3, #8]
   20d36:	f857 1f08 	ldr.w	r1, [r7, #8]!
   20d3a:	f8da 300c 	ldr.w	r3, [sl, #12]
   20d3e:	60cb      	str	r3, [r1, #12]
   20d40:	1f32      	subs	r2, r6, #4
   20d42:	2a24      	cmp	r2, #36	; 0x24
   20d44:	6099      	str	r1, [r3, #8]
   20d46:	d82d      	bhi.n	20da4 <_realloc_r+0x318>
   20d48:	2a13      	cmp	r2, #19
   20d4a:	d929      	bls.n	20da0 <_realloc_r+0x314>
   20d4c:	6823      	ldr	r3, [r4, #0]
   20d4e:	f8ca 3008 	str.w	r3, [sl, #8]
   20d52:	6863      	ldr	r3, [r4, #4]
   20d54:	f8ca 300c 	str.w	r3, [sl, #12]
   20d58:	2a1b      	cmp	r2, #27
   20d5a:	d842      	bhi.n	20de2 <_realloc_r+0x356>
   20d5c:	3408      	adds	r4, #8
   20d5e:	f10a 0310 	add.w	r3, sl, #16
   20d62:	6822      	ldr	r2, [r4, #0]
   20d64:	601a      	str	r2, [r3, #0]
   20d66:	6862      	ldr	r2, [r4, #4]
   20d68:	605a      	str	r2, [r3, #4]
   20d6a:	68a2      	ldr	r2, [r4, #8]
   20d6c:	609a      	str	r2, [r3, #8]
   20d6e:	4666      	mov	r6, ip
   20d70:	46d1      	mov	r9, sl
   20d72:	463c      	mov	r4, r7
   20d74:	e707      	b.n	20b86 <_realloc_r+0xfa>
   20d76:	68a3      	ldr	r3, [r4, #8]
   20d78:	6083      	str	r3, [r0, #8]
   20d7a:	68e3      	ldr	r3, [r4, #12]
   20d7c:	60c3      	str	r3, [r0, #12]
   20d7e:	2a24      	cmp	r2, #36	; 0x24
   20d80:	d026      	beq.n	20dd0 <_realloc_r+0x344>
   20d82:	f104 0210 	add.w	r2, r4, #16
   20d86:	f100 0310 	add.w	r3, r0, #16
   20d8a:	e6db      	b.n	20b44 <_realloc_r+0xb8>
   20d8c:	463a      	mov	r2, r7
   20d8e:	e7bf      	b.n	20d10 <_realloc_r+0x284>
   20d90:	4621      	mov	r1, r4
   20d92:	4638      	mov	r0, r7
   20d94:	461e      	mov	r6, r3
   20d96:	46d1      	mov	r9, sl
   20d98:	f001 fa36 	bl	22208 <memmove>
   20d9c:	463c      	mov	r4, r7
   20d9e:	e6f2      	b.n	20b86 <_realloc_r+0xfa>
   20da0:	463b      	mov	r3, r7
   20da2:	e7de      	b.n	20d62 <_realloc_r+0x2d6>
   20da4:	4621      	mov	r1, r4
   20da6:	4638      	mov	r0, r7
   20da8:	4666      	mov	r6, ip
   20daa:	46d1      	mov	r9, sl
   20dac:	f001 fa2c 	bl	22208 <memmove>
   20db0:	463c      	mov	r4, r7
   20db2:	e6e8      	b.n	20b86 <_realloc_r+0xfa>
   20db4:	200095d0 	.word	0x200095d0
   20db8:	68a1      	ldr	r1, [r4, #8]
   20dba:	f8ca 1010 	str.w	r1, [sl, #16]
   20dbe:	68e1      	ldr	r1, [r4, #12]
   20dc0:	f8ca 1014 	str.w	r1, [sl, #20]
   20dc4:	2a24      	cmp	r2, #36	; 0x24
   20dc6:	d020      	beq.n	20e0a <_realloc_r+0x37e>
   20dc8:	3410      	adds	r4, #16
   20dca:	f10a 0218 	add.w	r2, sl, #24
   20dce:	e79f      	b.n	20d10 <_realloc_r+0x284>
   20dd0:	6923      	ldr	r3, [r4, #16]
   20dd2:	6103      	str	r3, [r0, #16]
   20dd4:	6961      	ldr	r1, [r4, #20]
   20dd6:	6141      	str	r1, [r0, #20]
   20dd8:	f104 0218 	add.w	r2, r4, #24
   20ddc:	f100 0318 	add.w	r3, r0, #24
   20de0:	e6b0      	b.n	20b44 <_realloc_r+0xb8>
   20de2:	68a3      	ldr	r3, [r4, #8]
   20de4:	f8ca 3010 	str.w	r3, [sl, #16]
   20de8:	68e3      	ldr	r3, [r4, #12]
   20dea:	f8ca 3014 	str.w	r3, [sl, #20]
   20dee:	2a24      	cmp	r2, #36	; 0x24
   20df0:	d021      	beq.n	20e36 <_realloc_r+0x3aa>
   20df2:	3410      	adds	r4, #16
   20df4:	f10a 0318 	add.w	r3, sl, #24
   20df8:	e7b3      	b.n	20d62 <_realloc_r+0x2d6>
   20dfa:	463a      	mov	r2, r7
   20dfc:	e733      	b.n	20c66 <_realloc_r+0x1da>
   20dfe:	4621      	mov	r1, r4
   20e00:	4638      	mov	r0, r7
   20e02:	f001 fa01 	bl	22208 <memmove>
   20e06:	4b16      	ldr	r3, [pc, #88]	; (20e60 <_realloc_r+0x3d4>)
   20e08:	e733      	b.n	20c72 <_realloc_r+0x1e6>
   20e0a:	6922      	ldr	r2, [r4, #16]
   20e0c:	f8ca 2018 	str.w	r2, [sl, #24]
   20e10:	6962      	ldr	r2, [r4, #20]
   20e12:	f8ca 201c 	str.w	r2, [sl, #28]
   20e16:	3418      	adds	r4, #24
   20e18:	f10a 0220 	add.w	r2, sl, #32
   20e1c:	e778      	b.n	20d10 <_realloc_r+0x284>
   20e1e:	68a1      	ldr	r1, [r4, #8]
   20e20:	f8ca 1010 	str.w	r1, [sl, #16]
   20e24:	68e1      	ldr	r1, [r4, #12]
   20e26:	f8ca 1014 	str.w	r1, [sl, #20]
   20e2a:	2a24      	cmp	r2, #36	; 0x24
   20e2c:	d00d      	beq.n	20e4a <_realloc_r+0x3be>
   20e2e:	3410      	adds	r4, #16
   20e30:	f10a 0218 	add.w	r2, sl, #24
   20e34:	e717      	b.n	20c66 <_realloc_r+0x1da>
   20e36:	6923      	ldr	r3, [r4, #16]
   20e38:	f8ca 3018 	str.w	r3, [sl, #24]
   20e3c:	6963      	ldr	r3, [r4, #20]
   20e3e:	f8ca 301c 	str.w	r3, [sl, #28]
   20e42:	3418      	adds	r4, #24
   20e44:	f10a 0320 	add.w	r3, sl, #32
   20e48:	e78b      	b.n	20d62 <_realloc_r+0x2d6>
   20e4a:	6922      	ldr	r2, [r4, #16]
   20e4c:	f8ca 2018 	str.w	r2, [sl, #24]
   20e50:	6962      	ldr	r2, [r4, #20]
   20e52:	f8ca 201c 	str.w	r2, [sl, #28]
   20e56:	3418      	adds	r4, #24
   20e58:	f10a 0220 	add.w	r2, sl, #32
   20e5c:	e703      	b.n	20c66 <_realloc_r+0x1da>
   20e5e:	bf00      	nop
   20e60:	200095d0 	.word	0x200095d0
   20e64:	00000000 	.word	0x00000000

00020e68 <_strtod_l>:
   20e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e6c:	ed2d 8b10 	vpush	{d8-d15}
   20e70:	b097      	sub	sp, #92	; 0x5c
   20e72:	468a      	mov	sl, r1
   20e74:	2100      	movs	r1, #0
   20e76:	9207      	str	r2, [sp, #28]
   20e78:	9112      	str	r1, [sp, #72]	; 0x48
   20e7a:	2200      	movs	r2, #0
   20e7c:	2100      	movs	r1, #0
   20e7e:	e9cd 1204 	strd	r1, r2, [sp, #16]
   20e82:	4680      	mov	r8, r0
   20e84:	4651      	mov	r1, sl
   20e86:	9111      	str	r1, [sp, #68]	; 0x44
   20e88:	460f      	mov	r7, r1
   20e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   20e8e:	2a2d      	cmp	r2, #45	; 0x2d
   20e90:	d85e      	bhi.n	20f50 <_strtod_l+0xe8>
   20e92:	a001      	add	r0, pc, #4	; (adr r0, 20e98 <_strtod_l+0x30>)
   20e94:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   20e98:	00021039 	.word	0x00021039
   20e9c:	00020f51 	.word	0x00020f51
   20ea0:	00020f51 	.word	0x00020f51
   20ea4:	00020f51 	.word	0x00020f51
   20ea8:	00020f51 	.word	0x00020f51
   20eac:	00020f51 	.word	0x00020f51
   20eb0:	00020f51 	.word	0x00020f51
   20eb4:	00020f51 	.word	0x00020f51
   20eb8:	00020f51 	.word	0x00020f51
   20ebc:	00020e87 	.word	0x00020e87
   20ec0:	00020e87 	.word	0x00020e87
   20ec4:	00020e87 	.word	0x00020e87
   20ec8:	00020e87 	.word	0x00020e87
   20ecc:	00020e87 	.word	0x00020e87
   20ed0:	00020f51 	.word	0x00020f51
   20ed4:	00020f51 	.word	0x00020f51
   20ed8:	00020f51 	.word	0x00020f51
   20edc:	00020f51 	.word	0x00020f51
   20ee0:	00020f51 	.word	0x00020f51
   20ee4:	00020f51 	.word	0x00020f51
   20ee8:	00020f51 	.word	0x00020f51
   20eec:	00020f51 	.word	0x00020f51
   20ef0:	00020f51 	.word	0x00020f51
   20ef4:	00020f51 	.word	0x00020f51
   20ef8:	00020f51 	.word	0x00020f51
   20efc:	00020f51 	.word	0x00020f51
   20f00:	00020f51 	.word	0x00020f51
   20f04:	00020f51 	.word	0x00020f51
   20f08:	00020f51 	.word	0x00020f51
   20f0c:	00020f51 	.word	0x00020f51
   20f10:	00020f51 	.word	0x00020f51
   20f14:	00020f51 	.word	0x00020f51
   20f18:	00020e87 	.word	0x00020e87
   20f1c:	00020f51 	.word	0x00020f51
   20f20:	00020f51 	.word	0x00020f51
   20f24:	00020f51 	.word	0x00020f51
   20f28:	00020f51 	.word	0x00020f51
   20f2c:	00020f51 	.word	0x00020f51
   20f30:	00020f51 	.word	0x00020f51
   20f34:	00020f51 	.word	0x00020f51
   20f38:	00020f51 	.word	0x00020f51
   20f3c:	00020f51 	.word	0x00020f51
   20f40:	00020f51 	.word	0x00020f51
   20f44:	00021673 	.word	0x00021673
   20f48:	00020f51 	.word	0x00020f51
   20f4c:	0002165f 	.word	0x0002165f
   20f50:	2100      	movs	r1, #0
   20f52:	9109      	str	r1, [sp, #36]	; 0x24
   20f54:	2a30      	cmp	r2, #48	; 0x30
   20f56:	d07d      	beq.n	21054 <_strtod_l+0x1ec>
   20f58:	2300      	movs	r3, #0
   20f5a:	9308      	str	r3, [sp, #32]
   20f5c:	2a2f      	cmp	r2, #47	; 0x2f
   20f5e:	4614      	mov	r4, r2
   20f60:	f240 84cd 	bls.w	218fe <_strtod_l+0xa96>
   20f64:	f04f 0900 	mov.w	r9, #0
   20f68:	4638      	mov	r0, r7
   20f6a:	464e      	mov	r6, r9
   20f6c:	464d      	mov	r5, r9
   20f6e:	e012      	b.n	20f96 <_strtod_l+0x12e>
   20f70:	3001      	adds	r0, #1
   20f72:	2d08      	cmp	r5, #8
   20f74:	9011      	str	r0, [sp, #68]	; 0x44
   20f76:	bfc8      	it	gt
   20f78:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   20f7c:	7804      	ldrb	r4, [r0, #0]
   20f7e:	bfc6      	itte	gt
   20f80:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   20f84:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
   20f88:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
   20f8c:	2c2f      	cmp	r4, #47	; 0x2f
   20f8e:	f105 0501 	add.w	r5, r5, #1
   20f92:	4622      	mov	r2, r4
   20f94:	dd6f      	ble.n	21076 <_strtod_l+0x20e>
   20f96:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   20f9a:	2c39      	cmp	r4, #57	; 0x39
   20f9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   20fa0:	dde6      	ble.n	20f70 <_strtod_l+0x108>
   20fa2:	499f      	ldr	r1, [pc, #636]	; (21220 <_strtod_l+0x3b8>)
   20fa4:	2201      	movs	r2, #1
   20fa6:	f001 f9fd 	bl	223a4 <strncmp>
   20faa:	2800      	cmp	r0, #0
   20fac:	d137      	bne.n	2101e <_strtod_l+0x1b6>
   20fae:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20fb0:	461a      	mov	r2, r3
   20fb2:	3301      	adds	r3, #1
   20fb4:	9311      	str	r3, [sp, #68]	; 0x44
   20fb6:	7854      	ldrb	r4, [r2, #1]
   20fb8:	2d00      	cmp	r5, #0
   20fba:	f040 8543 	bne.w	21a44 <_strtod_l+0xbdc>
   20fbe:	2c30      	cmp	r4, #48	; 0x30
   20fc0:	f040 8524 	bne.w	21a0c <_strtod_l+0xba4>
   20fc4:	f1c3 0201 	rsb	r2, r3, #1
   20fc8:	1898      	adds	r0, r3, r2
   20fca:	3301      	adds	r3, #1
   20fcc:	9311      	str	r3, [sp, #68]	; 0x44
   20fce:	781c      	ldrb	r4, [r3, #0]
   20fd0:	2c30      	cmp	r4, #48	; 0x30
   20fd2:	d0f9      	beq.n	20fc8 <_strtod_l+0x160>
   20fd4:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   20fd8:	2b08      	cmp	r3, #8
   20fda:	f200 8301 	bhi.w	215e0 <_strtod_l+0x778>
   20fde:	9f11      	ldr	r7, [sp, #68]	; 0x44
   20fe0:	1c43      	adds	r3, r0, #1
   20fe2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   20fe6:	930b      	str	r3, [sp, #44]	; 0x2c
   20fe8:	2501      	movs	r5, #1
   20fea:	46bc      	mov	ip, r7
   20fec:	f04f 0e00 	mov.w	lr, #0
   20ff0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   20ff4:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
   20ff8:	2000      	movs	r0, #0
   20ffa:	f10c 0301 	add.w	r3, ip, #1
   20ffe:	9311      	str	r3, [sp, #68]	; 0x44
   21000:	f89c 4001 	ldrb.w	r4, [ip, #1]
   21004:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   21008:	2909      	cmp	r1, #9
   2100a:	f200 82bb 	bhi.w	21584 <_strtod_l+0x71c>
   2100e:	3001      	adds	r0, #1
   21010:	468b      	mov	fp, r1
   21012:	2900      	cmp	r1, #0
   21014:	f040 844f 	bne.w	218b6 <_strtod_l+0xa4e>
   21018:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   2101c:	e7ed      	b.n	20ffa <_strtod_l+0x192>
   2101e:	2000      	movs	r0, #0
   21020:	2c65      	cmp	r4, #101	; 0x65
   21022:	46ae      	mov	lr, r5
   21024:	900b      	str	r0, [sp, #44]	; 0x2c
   21026:	4684      	mov	ip, r0
   21028:	d001      	beq.n	2102e <_strtod_l+0x1c6>
   2102a:	2c45      	cmp	r4, #69	; 0x45
   2102c:	d130      	bne.n	21090 <_strtod_l+0x228>
   2102e:	2d00      	cmp	r5, #0
   21030:	d16b      	bne.n	2110a <_strtod_l+0x2a2>
   21032:	9b08      	ldr	r3, [sp, #32]
   21034:	4303      	orrs	r3, r0
   21036:	d167      	bne.n	21108 <_strtod_l+0x2a0>
   21038:	9b07      	ldr	r3, [sp, #28]
   2103a:	ed9f 8b77 	vldr	d8, [pc, #476]	; 21218 <_strtod_l+0x3b0>
   2103e:	b113      	cbz	r3, 21046 <_strtod_l+0x1de>
   21040:	9b07      	ldr	r3, [sp, #28]
   21042:	f8c3 a000 	str.w	sl, [r3]
   21046:	eeb0 0b48 	vmov.f64	d0, d8
   2104a:	b017      	add	sp, #92	; 0x5c
   2104c:	ecbd 8b10 	vpop	{d8-d15}
   21050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21054:	787a      	ldrb	r2, [r7, #1]
   21056:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2105a:	2a58      	cmp	r2, #88	; 0x58
   2105c:	f000 840c 	beq.w	21878 <_strtod_l+0xa10>
   21060:	3701      	adds	r7, #1
   21062:	9711      	str	r7, [sp, #68]	; 0x44
   21064:	783a      	ldrb	r2, [r7, #0]
   21066:	2a30      	cmp	r2, #48	; 0x30
   21068:	d0fa      	beq.n	21060 <_strtod_l+0x1f8>
   2106a:	2a00      	cmp	r2, #0
   2106c:	f000 80b7 	beq.w	211de <_strtod_l+0x376>
   21070:	2301      	movs	r3, #1
   21072:	9308      	str	r3, [sp, #32]
   21074:	e772      	b.n	20f5c <_strtod_l+0xf4>
   21076:	496a      	ldr	r1, [pc, #424]	; (21220 <_strtod_l+0x3b8>)
   21078:	2201      	movs	r2, #1
   2107a:	f001 f993 	bl	223a4 <strncmp>
   2107e:	2800      	cmp	r0, #0
   21080:	f000 80c0 	beq.w	21204 <_strtod_l+0x39c>
   21084:	46ae      	mov	lr, r5
   21086:	f04f 0c00 	mov.w	ip, #0
   2108a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   2108e:	4660      	mov	r0, ip
   21090:	f04f 0b00 	mov.w	fp, #0
   21094:	2d00      	cmp	r5, #0
   21096:	d07e      	beq.n	21196 <_strtod_l+0x32e>
   21098:	ee07 6a90 	vmov	s15, r6
   2109c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2109e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   210a2:	ebab 0303 	sub.w	r3, fp, r3
   210a6:	f1be 0f00 	cmp.w	lr, #0
   210aa:	bf08      	it	eq
   210ac:	46ae      	moveq	lr, r5
   210ae:	2d10      	cmp	r5, #16
   210b0:	930a      	str	r3, [sp, #40]	; 0x28
   210b2:	462b      	mov	r3, r5
   210b4:	bfa8      	it	ge
   210b6:	2310      	movge	r3, #16
   210b8:	2d09      	cmp	r5, #9
   210ba:	ed8d 7b04 	vstr	d7, [sp, #16]
   210be:	dd0c      	ble.n	210da <_strtod_l+0x272>
   210c0:	4a58      	ldr	r2, [pc, #352]	; (21224 <_strtod_l+0x3bc>)
   210c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   210c6:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
   210ca:	ee06 9a90 	vmov	s13, r9
   210ce:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   210d2:	eea7 6b05 	vfma.f64	d6, d7, d5
   210d6:	ed8d 6b04 	vstr	d6, [sp, #16]
   210da:	2d0f      	cmp	r5, #15
   210dc:	f300 80a8 	bgt.w	21230 <_strtod_l+0x3c8>
   210e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   210e2:	2a00      	cmp	r2, #0
   210e4:	f000 83e4 	beq.w	218b0 <_strtod_l+0xa48>
   210e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   210ea:	f340 833c 	ble.w	21766 <_strtod_l+0x8fe>
   210ee:	2a16      	cmp	r2, #22
   210f0:	f340 8498 	ble.w	21a24 <_strtod_l+0xbbc>
   210f4:	990a      	ldr	r1, [sp, #40]	; 0x28
   210f6:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   210fa:	428a      	cmp	r2, r1
   210fc:	f280 84a6 	bge.w	21a4c <_strtod_l+0xbe4>
   21100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21102:	1aeb      	subs	r3, r5, r3
   21104:	4413      	add	r3, r2
   21106:	e099      	b.n	2123c <_strtod_l+0x3d4>
   21108:	2500      	movs	r5, #0
   2110a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   2110e:	f10a 0301 	add.w	r3, sl, #1
   21112:	9311      	str	r3, [sp, #68]	; 0x44
   21114:	f89a 4001 	ldrb.w	r4, [sl, #1]
   21118:	2c2b      	cmp	r4, #43	; 0x2b
   2111a:	f000 825e 	beq.w	215da <_strtod_l+0x772>
   2111e:	2c2d      	cmp	r4, #45	; 0x2d
   21120:	f000 81f7 	beq.w	21512 <_strtod_l+0x6aa>
   21124:	2300      	movs	r3, #0
   21126:	930a      	str	r3, [sp, #40]	; 0x28
   21128:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   2112c:	2b09      	cmp	r3, #9
   2112e:	f200 81eb 	bhi.w	21508 <_strtod_l+0x6a0>
   21132:	2c30      	cmp	r4, #48	; 0x30
   21134:	d105      	bne.n	21142 <_strtod_l+0x2da>
   21136:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21138:	3301      	adds	r3, #1
   2113a:	9311      	str	r3, [sp, #68]	; 0x44
   2113c:	781c      	ldrb	r4, [r3, #0]
   2113e:	2c30      	cmp	r4, #48	; 0x30
   21140:	d0fa      	beq.n	21138 <_strtod_l+0x2d0>
   21142:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   21146:	2b08      	cmp	r3, #8
   21148:	d8a2      	bhi.n	21090 <_strtod_l+0x228>
   2114a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2114c:	920c      	str	r2, [sp, #48]	; 0x30
   2114e:	1c53      	adds	r3, r2, #1
   21150:	9311      	str	r3, [sp, #68]	; 0x44
   21152:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   21156:	7854      	ldrb	r4, [r2, #1]
   21158:	2c2f      	cmp	r4, #47	; 0x2f
   2115a:	dc07      	bgt.n	2116c <_strtod_l+0x304>
   2115c:	e3de      	b.n	2191c <_strtod_l+0xab4>
   2115e:	3301      	adds	r3, #1
   21160:	9311      	str	r3, [sp, #68]	; 0x44
   21162:	784c      	ldrb	r4, [r1, #1]
   21164:	2c2f      	cmp	r4, #47	; 0x2f
   21166:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
   2116a:	dd06      	ble.n	2117a <_strtod_l+0x312>
   2116c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   21170:	2c39      	cmp	r4, #57	; 0x39
   21172:	4619      	mov	r1, r3
   21174:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   21178:	ddf1      	ble.n	2115e <_strtod_l+0x2f6>
   2117a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2117c:	1a9b      	subs	r3, r3, r2
   2117e:	2b08      	cmp	r3, #8
   21180:	f340 83cc 	ble.w	2191c <_strtod_l+0xab4>
   21184:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
   21188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2118a:	2b00      	cmp	r3, #0
   2118c:	d082      	beq.n	21094 <_strtod_l+0x22c>
   2118e:	f1cb 0b00 	rsb	fp, fp, #0
   21192:	2d00      	cmp	r5, #0
   21194:	d180      	bne.n	21098 <_strtod_l+0x230>
   21196:	9b08      	ldr	r3, [sp, #32]
   21198:	4303      	orrs	r3, r0
   2119a:	d120      	bne.n	211de <_strtod_l+0x376>
   2119c:	f1bc 0f00 	cmp.w	ip, #0
   211a0:	f47f af4a 	bne.w	21038 <_strtod_l+0x1d0>
   211a4:	2c69      	cmp	r4, #105	; 0x69
   211a6:	f000 83cf 	beq.w	21948 <_strtod_l+0xae0>
   211aa:	f300 82f3 	bgt.w	21794 <_strtod_l+0x92c>
   211ae:	2c49      	cmp	r4, #73	; 0x49
   211b0:	f000 83ca 	beq.w	21948 <_strtod_l+0xae0>
   211b4:	2c4e      	cmp	r4, #78	; 0x4e
   211b6:	f47f af3f 	bne.w	21038 <_strtod_l+0x1d0>
   211ba:	491b      	ldr	r1, [pc, #108]	; (21228 <_strtod_l+0x3c0>)
   211bc:	a811      	add	r0, sp, #68	; 0x44
   211be:	f001 ffe3 	bl	23188 <__match>
   211c2:	2800      	cmp	r0, #0
   211c4:	f43f af38 	beq.w	21038 <_strtod_l+0x1d0>
   211c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   211ca:	781b      	ldrb	r3, [r3, #0]
   211cc:	2b28      	cmp	r3, #40	; 0x28
   211ce:	f000 84f2 	beq.w	21bb6 <_strtod_l+0xd4e>
   211d2:	4816      	ldr	r0, [pc, #88]	; (2122c <_strtod_l+0x3c4>)
   211d4:	f7fd fbd8 	bl	1e988 <nan>
   211d8:	eeb0 8b40 	vmov.f64	d8, d0
   211dc:	e001      	b.n	211e2 <_strtod_l+0x37a>
   211de:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 21218 <_strtod_l+0x3b0>
   211e2:	9a07      	ldr	r2, [sp, #28]
   211e4:	b10a      	cbz	r2, 211ea <_strtod_l+0x382>
   211e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   211e8:	6013      	str	r3, [r2, #0]
   211ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   211ec:	2b00      	cmp	r3, #0
   211ee:	f43f af2a 	beq.w	21046 <_strtod_l+0x1de>
   211f2:	eeb1 8b48 	vneg.f64	d8, d8
   211f6:	eeb0 0b48 	vmov.f64	d0, d8
   211fa:	b017      	add	sp, #92	; 0x5c
   211fc:	ecbd 8b10 	vpop	{d8-d15}
   21200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21204:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21206:	900b      	str	r0, [sp, #44]	; 0x2c
   21208:	1c5a      	adds	r2, r3, #1
   2120a:	9211      	str	r2, [sp, #68]	; 0x44
   2120c:	785c      	ldrb	r4, [r3, #1]
   2120e:	46ae      	mov	lr, r5
   21210:	e6f8      	b.n	21004 <_strtod_l+0x19c>
   21212:	bf00      	nop
   21214:	f3af 8000 	nop.w
	...
   21220:	20003a58 	.word	0x20003a58
   21224:	200018c8 	.word	0x200018c8
   21228:	2000438c 	.word	0x2000438c
   2122c:	200039f8 	.word	0x200039f8
   21230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21232:	1aeb      	subs	r3, r5, r3
   21234:	4413      	add	r3, r2
   21236:	2b00      	cmp	r3, #0
   21238:	f340 82b0 	ble.w	2179c <_strtod_l+0x934>
   2123c:	f013 010f 	ands.w	r1, r3, #15
   21240:	d00a      	beq.n	21258 <_strtod_l+0x3f0>
   21242:	4ac3      	ldr	r2, [pc, #780]	; (21550 <_strtod_l+0x6e8>)
   21244:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   21248:	ed9d 6b04 	vldr	d6, [sp, #16]
   2124c:	ed92 7b00 	vldr	d7, [r2]
   21250:	ee27 7b06 	vmul.f64	d7, d7, d6
   21254:	ed8d 7b04 	vstr	d7, [sp, #16]
   21258:	f033 020f 	bics.w	r2, r3, #15
   2125c:	f040 8238 	bne.w	216d0 <_strtod_l+0x868>
   21260:	2300      	movs	r3, #0
   21262:	9308      	str	r3, [sp, #32]
   21264:	9600      	str	r6, [sp, #0]
   21266:	462b      	mov	r3, r5
   21268:	4672      	mov	r2, lr
   2126a:	4639      	mov	r1, r7
   2126c:	4640      	mov	r0, r8
   2126e:	f003 febb 	bl	24fe8 <__s2b>
   21272:	4681      	mov	r9, r0
   21274:	2800      	cmp	r0, #0
   21276:	f000 82e1 	beq.w	2183c <_strtod_l+0x9d4>
   2127a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2127c:	eba3 0b0b 	sub.w	fp, r3, fp
   21280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21282:	ed9f eba9 	vldr	d14, [pc, #676]	; 21528 <_strtod_l+0x6c0>
   21286:	2b00      	cmp	r3, #0
   21288:	ed9f cba9 	vldr	d12, [pc, #676]	; 21530 <_strtod_l+0x6c8>
   2128c:	ed9f dbaa 	vldr	d13, [pc, #680]	; 21538 <_strtod_l+0x6d0>
   21290:	ed9f bbab 	vldr	d11, [pc, #684]	; 21540 <_strtod_l+0x6d8>
   21294:	bfb4      	ite	lt
   21296:	465a      	movlt	r2, fp
   21298:	2200      	movge	r2, #0
   2129a:	f04f 0a00 	mov.w	sl, #0
   2129e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   212a2:	920b      	str	r2, [sp, #44]	; 0x2c
   212a4:	930c      	str	r3, [sp, #48]	; 0x30
   212a6:	4654      	mov	r4, sl
   212a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   212ac:	4640      	mov	r0, r8
   212ae:	f003 fe19 	bl	24ee4 <_Balloc>
   212b2:	4606      	mov	r6, r0
   212b4:	2800      	cmp	r0, #0
   212b6:	f000 810e 	beq.w	214d6 <_strtod_l+0x66e>
   212ba:	f8d9 2010 	ldr.w	r2, [r9, #16]
   212be:	ed9d 8b04 	vldr	d8, [sp, #16]
   212c2:	3202      	adds	r2, #2
   212c4:	0092      	lsls	r2, r2, #2
   212c6:	f109 010c 	add.w	r1, r9, #12
   212ca:	300c      	adds	r0, #12
   212cc:	f7fa fcac 	bl	1bc28 <memcpy>
   212d0:	eeb0 0b48 	vmov.f64	d0, d8
   212d4:	aa14      	add	r2, sp, #80	; 0x50
   212d6:	a913      	add	r1, sp, #76	; 0x4c
   212d8:	4640      	mov	r0, r8
   212da:	f004 fa41 	bl	25760 <__d2b>
   212de:	9012      	str	r0, [sp, #72]	; 0x48
   212e0:	2800      	cmp	r0, #0
   212e2:	f000 80e4 	beq.w	214ae <_strtod_l+0x646>
   212e6:	2101      	movs	r1, #1
   212e8:	4640      	mov	r0, r8
   212ea:	f003 ff25 	bl	25138 <__i2b>
   212ee:	4604      	mov	r4, r0
   212f0:	2800      	cmp	r0, #0
   212f2:	f000 80f0 	beq.w	214d6 <_strtod_l+0x66e>
   212f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   212f8:	2a00      	cmp	r2, #0
   212fa:	f2c0 80de 	blt.w	214ba <_strtod_l+0x652>
   212fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21300:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   21302:	eb02 0b03 	add.w	fp, r2, r3
   21306:	9b08      	ldr	r3, [sp, #32]
   21308:	9d14      	ldr	r5, [sp, #80]	; 0x50
   2130a:	1ad2      	subs	r2, r2, r3
   2130c:	442a      	add	r2, r5
   2130e:	4b91      	ldr	r3, [pc, #580]	; (21554 <_strtod_l+0x6ec>)
   21310:	3a01      	subs	r2, #1
   21312:	429a      	cmp	r2, r3
   21314:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   21318:	f280 8098 	bge.w	2144c <_strtod_l+0x5e4>
   2131c:	1a99      	subs	r1, r3, r2
   2131e:	291f      	cmp	r1, #31
   21320:	eba5 0501 	sub.w	r5, r5, r1
   21324:	f300 80e3 	bgt.w	214ee <_strtod_l+0x686>
   21328:	2201      	movs	r2, #1
   2132a:	fa02 f301 	lsl.w	r3, r2, r1
   2132e:	930d      	str	r3, [sp, #52]	; 0x34
   21330:	2300      	movs	r3, #0
   21332:	930e      	str	r3, [sp, #56]	; 0x38
   21334:	442f      	add	r7, r5
   21336:	9b08      	ldr	r3, [sp, #32]
   21338:	445d      	add	r5, fp
   2133a:	45ab      	cmp	fp, r5
   2133c:	465a      	mov	r2, fp
   2133e:	441f      	add	r7, r3
   21340:	bfa8      	it	ge
   21342:	462a      	movge	r2, r5
   21344:	42ba      	cmp	r2, r7
   21346:	bfa8      	it	ge
   21348:	463a      	movge	r2, r7
   2134a:	2a00      	cmp	r2, #0
   2134c:	dd03      	ble.n	21356 <_strtod_l+0x4ee>
   2134e:	1aad      	subs	r5, r5, r2
   21350:	1abf      	subs	r7, r7, r2
   21352:	ebab 0b02 	sub.w	fp, fp, r2
   21356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21358:	2b00      	cmp	r3, #0
   2135a:	f300 8088 	bgt.w	2146e <_strtod_l+0x606>
   2135e:	2d00      	cmp	r5, #0
   21360:	f300 809c 	bgt.w	2149c <_strtod_l+0x634>
   21364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21366:	2b00      	cmp	r3, #0
   21368:	f300 80b7 	bgt.w	214da <_strtod_l+0x672>
   2136c:	2f00      	cmp	r7, #0
   2136e:	f300 80a9 	bgt.w	214c4 <_strtod_l+0x65c>
   21372:	f1bb 0f00 	cmp.w	fp, #0
   21376:	dd08      	ble.n	2138a <_strtod_l+0x522>
   21378:	4621      	mov	r1, r4
   2137a:	465a      	mov	r2, fp
   2137c:	4640      	mov	r0, r8
   2137e:	f004 f817 	bl	253b0 <__lshift>
   21382:	4604      	mov	r4, r0
   21384:	2800      	cmp	r0, #0
   21386:	f000 80a6 	beq.w	214d6 <_strtod_l+0x66e>
   2138a:	9912      	ldr	r1, [sp, #72]	; 0x48
   2138c:	4632      	mov	r2, r6
   2138e:	4640      	mov	r0, r8
   21390:	f004 f8a8 	bl	254e4 <__mdiff>
   21394:	4682      	mov	sl, r0
   21396:	2800      	cmp	r0, #0
   21398:	f000 809d 	beq.w	214d6 <_strtod_l+0x66e>
   2139c:	2300      	movs	r3, #0
   2139e:	68c5      	ldr	r5, [r0, #12]
   213a0:	60c3      	str	r3, [r0, #12]
   213a2:	4621      	mov	r1, r4
   213a4:	f004 f87c 	bl	254a0 <__mcmp>
   213a8:	2800      	cmp	r0, #0
   213aa:	f2c0 83c7 	blt.w	21b3c <_strtod_l+0xcd4>
   213ae:	f000 8361 	beq.w	21a74 <_strtod_l+0xc0c>
   213b2:	4621      	mov	r1, r4
   213b4:	4650      	mov	r0, sl
   213b6:	f004 fa3d 	bl	25834 <__ratio>
   213ba:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   213be:	eeb4 0bc7 	vcmpe.f64	d0, d7
   213c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   213c6:	d846      	bhi.n	21456 <_strtod_l+0x5ee>
   213c8:	2d00      	cmp	r5, #0
   213ca:	f000 80cb 	beq.w	21564 <_strtod_l+0x6fc>
   213ce:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   213d2:	9805      	ldr	r0, [sp, #20]
   213d4:	4b60      	ldr	r3, [pc, #384]	; (21558 <_strtod_l+0x6f0>)
   213d6:	2200      	movs	r2, #0
   213d8:	4960      	ldr	r1, [pc, #384]	; (2155c <_strtod_l+0x6f4>)
   213da:	f8df c184 	ldr.w	ip, [pc, #388]	; 21560 <_strtod_l+0x6f8>
   213de:	ea00 0701 	and.w	r7, r0, r1
   213e2:	4567      	cmp	r7, ip
   213e4:	f000 80d4 	beq.w	21590 <_strtod_l+0x728>
   213e8:	9908      	ldr	r1, [sp, #32]
   213ea:	b159      	cbz	r1, 21404 <_strtod_l+0x59c>
   213ec:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
   213f0:	d808      	bhi.n	21404 <_strtod_l+0x59c>
   213f2:	eeb4 9bcb 	vcmpe.f64	d9, d11
   213f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   213fa:	f240 8156 	bls.w	216aa <_strtod_l+0x842>
   213fe:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   21402:	1bcb      	subs	r3, r1, r7
   21404:	eeb0 0b48 	vmov.f64	d0, d8
   21408:	ec43 2b1a 	vmov	d10, r2, r3
   2140c:	f004 f914 	bl	25638 <__ulp>
   21410:	eeaa 8b00 	vfma.f64	d8, d10, d0
   21414:	ed8d 8b04 	vstr	d8, [sp, #16]
   21418:	ee18 3a90 	vmov	r3, s17
   2141c:	9a08      	ldr	r2, [sp, #32]
   2141e:	b922      	cbnz	r2, 2142a <_strtod_l+0x5c2>
   21420:	4a4e      	ldr	r2, [pc, #312]	; (2155c <_strtod_l+0x6f4>)
   21422:	401a      	ands	r2, r3
   21424:	4297      	cmp	r7, r2
   21426:	f000 80e4 	beq.w	215f2 <_strtod_l+0x78a>
   2142a:	9912      	ldr	r1, [sp, #72]	; 0x48
   2142c:	4640      	mov	r0, r8
   2142e:	f003 fd7f 	bl	24f30 <_Bfree>
   21432:	4631      	mov	r1, r6
   21434:	4640      	mov	r0, r8
   21436:	f003 fd7b 	bl	24f30 <_Bfree>
   2143a:	4621      	mov	r1, r4
   2143c:	4640      	mov	r0, r8
   2143e:	f003 fd77 	bl	24f30 <_Bfree>
   21442:	4651      	mov	r1, sl
   21444:	4640      	mov	r0, r8
   21446:	f003 fd73 	bl	24f30 <_Bfree>
   2144a:	e72d      	b.n	212a8 <_strtod_l+0x440>
   2144c:	2301      	movs	r3, #1
   2144e:	2100      	movs	r1, #0
   21450:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   21454:	e76e      	b.n	21334 <_strtod_l+0x4cc>
   21456:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   2145a:	ee20 9b09 	vmul.f64	d9, d0, d9
   2145e:	2d00      	cmp	r5, #0
   21460:	d15f      	bne.n	21522 <_strtod_l+0x6ba>
   21462:	eeb1 7b49 	vneg.f64	d7, d9
   21466:	9805      	ldr	r0, [sp, #20]
   21468:	ec53 2b17 	vmov	r2, r3, d7
   2146c:	e7b4      	b.n	213d8 <_strtod_l+0x570>
   2146e:	4621      	mov	r1, r4
   21470:	461a      	mov	r2, r3
   21472:	4640      	mov	r0, r8
   21474:	f003 ff3c 	bl	252f0 <__pow5mult>
   21478:	4604      	mov	r4, r0
   2147a:	b360      	cbz	r0, 214d6 <_strtod_l+0x66e>
   2147c:	4601      	mov	r1, r0
   2147e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   21480:	4640      	mov	r0, r8
   21482:	f003 fe87 	bl	25194 <__multiply>
   21486:	b330      	cbz	r0, 214d6 <_strtod_l+0x66e>
   21488:	900f      	str	r0, [sp, #60]	; 0x3c
   2148a:	9912      	ldr	r1, [sp, #72]	; 0x48
   2148c:	4640      	mov	r0, r8
   2148e:	f003 fd4f 	bl	24f30 <_Bfree>
   21492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21494:	9212      	str	r2, [sp, #72]	; 0x48
   21496:	2d00      	cmp	r5, #0
   21498:	f77f af64 	ble.w	21364 <_strtod_l+0x4fc>
   2149c:	9912      	ldr	r1, [sp, #72]	; 0x48
   2149e:	462a      	mov	r2, r5
   214a0:	4640      	mov	r0, r8
   214a2:	f003 ff85 	bl	253b0 <__lshift>
   214a6:	9012      	str	r0, [sp, #72]	; 0x48
   214a8:	2800      	cmp	r0, #0
   214aa:	f47f af5b 	bne.w	21364 <_strtod_l+0x4fc>
   214ae:	2322      	movs	r3, #34	; 0x22
   214b0:	ed9f 8b25 	vldr	d8, [pc, #148]	; 21548 <_strtod_l+0x6e0>
   214b4:	f8c8 3000 	str.w	r3, [r8]
   214b8:	e0bc      	b.n	21634 <_strtod_l+0x7cc>
   214ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   214bc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   214c0:	1a9f      	subs	r7, r3, r2
   214c2:	e720      	b.n	21306 <_strtod_l+0x49e>
   214c4:	4631      	mov	r1, r6
   214c6:	463a      	mov	r2, r7
   214c8:	4640      	mov	r0, r8
   214ca:	f003 ff71 	bl	253b0 <__lshift>
   214ce:	4606      	mov	r6, r0
   214d0:	2800      	cmp	r0, #0
   214d2:	f47f af4e 	bne.w	21372 <_strtod_l+0x50a>
   214d6:	9812      	ldr	r0, [sp, #72]	; 0x48
   214d8:	e7e9      	b.n	214ae <_strtod_l+0x646>
   214da:	4631      	mov	r1, r6
   214dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   214de:	4640      	mov	r0, r8
   214e0:	f003 ff06 	bl	252f0 <__pow5mult>
   214e4:	4606      	mov	r6, r0
   214e6:	2800      	cmp	r0, #0
   214e8:	f47f af40 	bne.w	2136c <_strtod_l+0x504>
   214ec:	e7f3      	b.n	214d6 <_strtod_l+0x66e>
   214ee:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   214f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   214f6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   214fa:	2101      	movs	r1, #1
   214fc:	32e2      	adds	r2, #226	; 0xe2
   214fe:	fa01 f302 	lsl.w	r3, r1, r2
   21502:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   21506:	e715      	b.n	21334 <_strtod_l+0x4cc>
   21508:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   2150c:	f04f 0b00 	mov.w	fp, #0
   21510:	e5c0      	b.n	21094 <_strtod_l+0x22c>
   21512:	2301      	movs	r3, #1
   21514:	930a      	str	r3, [sp, #40]	; 0x28
   21516:	f10a 0302 	add.w	r3, sl, #2
   2151a:	9311      	str	r3, [sp, #68]	; 0x44
   2151c:	f89a 4002 	ldrb.w	r4, [sl, #2]
   21520:	e602      	b.n	21128 <_strtod_l+0x2c0>
   21522:	eeb0 7b49 	vmov.f64	d7, d9
   21526:	e79e      	b.n	21466 <_strtod_l+0x5fe>
   21528:	94a03595 	.word	0x94a03595
   2152c:	3fcfffff 	.word	0x3fcfffff
   21530:	94a03595 	.word	0x94a03595
   21534:	3fdfffff 	.word	0x3fdfffff
   21538:	35afe535 	.word	0x35afe535
   2153c:	3fe00000 	.word	0x3fe00000
   21540:	ffc00000 	.word	0xffc00000
   21544:	41dfffff 	.word	0x41dfffff
   21548:	00000000 	.word	0x00000000
   2154c:	7ff00000 	.word	0x7ff00000
   21550:	200018c8 	.word	0x200018c8
   21554:	fffffc02 	.word	0xfffffc02
   21558:	3ff00000 	.word	0x3ff00000
   2155c:	7ff00000 	.word	0x7ff00000
   21560:	7fe00000 	.word	0x7fe00000
   21564:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   21568:	2900      	cmp	r1, #0
   2156a:	f000 8085 	beq.w	21678 <_strtod_l+0x810>
   2156e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   21572:	2901      	cmp	r1, #1
   21574:	f000 81d8 	beq.w	21928 <_strtod_l+0xac0>
   21578:	4610      	mov	r0, r2
   2157a:	4bb7      	ldr	r3, [pc, #732]	; (21858 <_strtod_l+0x9f0>)
   2157c:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   21580:	2200      	movs	r2, #0
   21582:	e729      	b.n	213d8 <_strtod_l+0x570>
   21584:	2c65      	cmp	r4, #101	; 0x65
   21586:	f04f 0c01 	mov.w	ip, #1
   2158a:	f43f adbe 	beq.w	2110a <_strtod_l+0x2a2>
   2158e:	e54c      	b.n	2102a <_strtod_l+0x1c2>
   21590:	ec43 2b1a 	vmov	d10, r2, r3
   21594:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   21598:	9305      	str	r3, [sp, #20]
   2159a:	ed9d fb04 	vldr	d15, [sp, #16]
   2159e:	eeb0 0b4f 	vmov.f64	d0, d15
   215a2:	f004 f849 	bl	25638 <__ulp>
   215a6:	49ad      	ldr	r1, [pc, #692]	; (2185c <_strtod_l+0x9f4>)
   215a8:	eeaa fb00 	vfma.f64	d15, d10, d0
   215ac:	ee1f 3a90 	vmov	r3, s31
   215b0:	4aab      	ldr	r2, [pc, #684]	; (21860 <_strtod_l+0x9f8>)
   215b2:	4019      	ands	r1, r3
   215b4:	4291      	cmp	r1, r2
   215b6:	ed8d fb04 	vstr	d15, [sp, #16]
   215ba:	d972      	bls.n	216a2 <_strtod_l+0x83a>
   215bc:	4ba9      	ldr	r3, [pc, #676]	; (21864 <_strtod_l+0x9fc>)
   215be:	ee18 2a90 	vmov	r2, s17
   215c2:	429a      	cmp	r2, r3
   215c4:	d103      	bne.n	215ce <_strtod_l+0x766>
   215c6:	ee18 3a10 	vmov	r3, s16
   215ca:	3301      	adds	r3, #1
   215cc:	d083      	beq.n	214d6 <_strtod_l+0x66e>
   215ce:	4aa5      	ldr	r2, [pc, #660]	; (21864 <_strtod_l+0x9fc>)
   215d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   215d4:	e9cd 3204 	strd	r3, r2, [sp, #16]
   215d8:	e727      	b.n	2142a <_strtod_l+0x5c2>
   215da:	2300      	movs	r3, #0
   215dc:	930a      	str	r3, [sp, #40]	; 0x28
   215de:	e79a      	b.n	21516 <_strtod_l+0x6ae>
   215e0:	2c65      	cmp	r4, #101	; 0x65
   215e2:	f000 80d0 	beq.w	21786 <_strtod_l+0x91e>
   215e6:	2c45      	cmp	r4, #69	; 0x45
   215e8:	f000 80cd 	beq.w	21786 <_strtod_l+0x91e>
   215ec:	f04f 0c01 	mov.w	ip, #1
   215f0:	e5d1      	b.n	21196 <_strtod_l+0x32e>
   215f2:	ec51 0b19 	vmov	r0, r1, d9
   215f6:	930d      	str	r3, [sp, #52]	; 0x34
   215f8:	f007 f852 	bl	286a0 <__aeabi_d2lz>
   215fc:	f7fe fc58 	bl	1feb0 <__aeabi_l2d>
   21600:	9b04      	ldr	r3, [sp, #16]
   21602:	431d      	orrs	r5, r3
   21604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21606:	ec41 0b17 	vmov	d7, r0, r1
   2160a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   2160e:	431d      	orrs	r5, r3
   21610:	ee39 9b47 	vsub.f64	d9, d9, d7
   21614:	f000 80a0 	beq.w	21758 <_strtod_l+0x8f0>
   21618:	eeb4 9bcc 	vcmpe.f64	d9, d12
   2161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21620:	d405      	bmi.n	2162e <_strtod_l+0x7c6>
   21622:	eeb4 9bcd 	vcmpe.f64	d9, d13
   21626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2162a:	f77f aefe 	ble.w	2142a <_strtod_l+0x5c2>
   2162e:	ed9d 8b04 	vldr	d8, [sp, #16]
   21632:	9812      	ldr	r0, [sp, #72]	; 0x48
   21634:	4601      	mov	r1, r0
   21636:	4640      	mov	r0, r8
   21638:	f003 fc7a 	bl	24f30 <_Bfree>
   2163c:	4631      	mov	r1, r6
   2163e:	4640      	mov	r0, r8
   21640:	f003 fc76 	bl	24f30 <_Bfree>
   21644:	4621      	mov	r1, r4
   21646:	4640      	mov	r0, r8
   21648:	f003 fc72 	bl	24f30 <_Bfree>
   2164c:	4649      	mov	r1, r9
   2164e:	4640      	mov	r0, r8
   21650:	f003 fc6e 	bl	24f30 <_Bfree>
   21654:	4651      	mov	r1, sl
   21656:	4640      	mov	r0, r8
   21658:	f003 fc6a 	bl	24f30 <_Bfree>
   2165c:	e5c1      	b.n	211e2 <_strtod_l+0x37a>
   2165e:	2201      	movs	r2, #1
   21660:	9209      	str	r2, [sp, #36]	; 0x24
   21662:	1c79      	adds	r1, r7, #1
   21664:	9111      	str	r1, [sp, #68]	; 0x44
   21666:	787a      	ldrb	r2, [r7, #1]
   21668:	2a00      	cmp	r2, #0
   2166a:	f43f ace5 	beq.w	21038 <_strtod_l+0x1d0>
   2166e:	460f      	mov	r7, r1
   21670:	e470      	b.n	20f54 <_strtod_l+0xec>
   21672:	2200      	movs	r2, #0
   21674:	9209      	str	r2, [sp, #36]	; 0x24
   21676:	e7f4      	b.n	21662 <_strtod_l+0x7fa>
   21678:	f3c2 0313 	ubfx	r3, r2, #0, #20
   2167c:	4610      	mov	r0, r2
   2167e:	2b00      	cmp	r3, #0
   21680:	f47f af7b 	bne.w	2157a <_strtod_l+0x712>
   21684:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   21688:	eeb4 0bc7 	vcmpe.f64	d0, d7
   2168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21690:	f100 81d3 	bmi.w	21a3a <_strtod_l+0xbd2>
   21694:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   21698:	ee20 9b09 	vmul.f64	d9, d0, d9
   2169c:	eeb1 7b49 	vneg.f64	d7, d9
   216a0:	e6e2      	b.n	21468 <_strtod_l+0x600>
   216a2:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   216a6:	9305      	str	r3, [sp, #20]
   216a8:	e6b8      	b.n	2141c <_strtod_l+0x5b4>
   216aa:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   216ae:	ee19 3a10 	vmov	r3, s18
   216b2:	2b01      	cmp	r3, #1
   216b4:	bf38      	it	cc
   216b6:	2301      	movcc	r3, #1
   216b8:	ee09 3a10 	vmov	s18, r3
   216bc:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   216c0:	2d00      	cmp	r5, #0
   216c2:	f040 813e 	bne.w	21942 <_strtod_l+0xada>
   216c6:	eeb1 7b49 	vneg.f64	d7, d9
   216ca:	ec53 2b17 	vmov	r2, r3, d7
   216ce:	e696      	b.n	213fe <_strtod_l+0x596>
   216d0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   216d4:	f300 80b2 	bgt.w	2183c <_strtod_l+0x9d4>
   216d8:	2a10      	cmp	r2, #16
   216da:	ea4f 1322 	mov.w	r3, r2, asr #4
   216de:	f340 8286 	ble.w	21bee <_strtod_l+0xd86>
   216e2:	4c61      	ldr	r4, [pc, #388]	; (21868 <_strtod_l+0xa00>)
   216e4:	ed9d 7b04 	vldr	d7, [sp, #16]
   216e8:	2000      	movs	r0, #0
   216ea:	4622      	mov	r2, r4
   216ec:	4601      	mov	r1, r0
   216ee:	f013 0f01 	tst.w	r3, #1
   216f2:	f101 0101 	add.w	r1, r1, #1
   216f6:	ea4f 0363 	mov.w	r3, r3, asr #1
   216fa:	d004      	beq.n	21706 <_strtod_l+0x89e>
   216fc:	ed92 6b00 	vldr	d6, [r2]
   21700:	2001      	movs	r0, #1
   21702:	ee27 7b06 	vmul.f64	d7, d7, d6
   21706:	2b01      	cmp	r3, #1
   21708:	f102 0208 	add.w	r2, r2, #8
   2170c:	d1ef      	bne.n	216ee <_strtod_l+0x886>
   2170e:	b108      	cbz	r0, 21714 <_strtod_l+0x8ac>
   21710:	ed8d 7b04 	vstr	d7, [sp, #16]
   21714:	9b05      	ldr	r3, [sp, #20]
   21716:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   2171a:	9305      	str	r3, [sp, #20]
   2171c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   21720:	ed9d 6b04 	vldr	d6, [sp, #16]
   21724:	ed94 7b00 	vldr	d7, [r4]
   21728:	4b4c      	ldr	r3, [pc, #304]	; (2185c <_strtod_l+0x9f4>)
   2172a:	ee27 7b06 	vmul.f64	d7, d7, d6
   2172e:	ee17 2a90 	vmov	r2, s15
   21732:	494e      	ldr	r1, [pc, #312]	; (2186c <_strtod_l+0xa04>)
   21734:	4013      	ands	r3, r2
   21736:	428b      	cmp	r3, r1
   21738:	ed8d 7b04 	vstr	d7, [sp, #16]
   2173c:	d87e      	bhi.n	2183c <_strtod_l+0x9d4>
   2173e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   21742:	428b      	cmp	r3, r1
   21744:	f240 81d6 	bls.w	21af4 <_strtod_l+0xc8c>
   21748:	4c46      	ldr	r4, [pc, #280]	; (21864 <_strtod_l+0x9fc>)
   2174a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2174e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   21752:	2300      	movs	r3, #0
   21754:	9308      	str	r3, [sp, #32]
   21756:	e585      	b.n	21264 <_strtod_l+0x3fc>
   21758:	eeb4 9bce 	vcmpe.f64	d9, d14
   2175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21760:	f57f ae63 	bpl.w	2142a <_strtod_l+0x5c2>
   21764:	e763      	b.n	2162e <_strtod_l+0x7c6>
   21766:	3216      	adds	r2, #22
   21768:	f6ff ad62 	blt.w	21230 <_strtod_l+0x3c8>
   2176c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2176e:	eba3 0b0b 	sub.w	fp, r3, fp
   21772:	4b3f      	ldr	r3, [pc, #252]	; (21870 <_strtod_l+0xa08>)
   21774:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   21778:	ed93 7b00 	vldr	d7, [r3]
   2177c:	ed9d 6b04 	vldr	d6, [sp, #16]
   21780:	ee86 8b07 	vdiv.f64	d8, d6, d7
   21784:	e52d      	b.n	211e2 <_strtod_l+0x37a>
   21786:	f04f 0e00 	mov.w	lr, #0
   2178a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   2178e:	f04f 0c01 	mov.w	ip, #1
   21792:	e44e      	b.n	21032 <_strtod_l+0x1ca>
   21794:	2c6e      	cmp	r4, #110	; 0x6e
   21796:	f43f ad10 	beq.w	211ba <_strtod_l+0x352>
   2179a:	e44d      	b.n	21038 <_strtod_l+0x1d0>
   2179c:	f43f ad60 	beq.w	21260 <_strtod_l+0x3f8>
   217a0:	425b      	negs	r3, r3
   217a2:	f013 010f 	ands.w	r1, r3, #15
   217a6:	d00a      	beq.n	217be <_strtod_l+0x956>
   217a8:	4a31      	ldr	r2, [pc, #196]	; (21870 <_strtod_l+0xa08>)
   217aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   217ae:	ed9d 6b04 	vldr	d6, [sp, #16]
   217b2:	ed92 7b00 	vldr	d7, [r2]
   217b6:	ee86 7b07 	vdiv.f64	d7, d6, d7
   217ba:	ed8d 7b04 	vstr	d7, [sp, #16]
   217be:	111b      	asrs	r3, r3, #4
   217c0:	f43f ad4e 	beq.w	21260 <_strtod_l+0x3f8>
   217c4:	2b1f      	cmp	r3, #31
   217c6:	dc33      	bgt.n	21830 <_strtod_l+0x9c8>
   217c8:	f013 0210 	ands.w	r2, r3, #16
   217cc:	bf18      	it	ne
   217ce:	226a      	movne	r2, #106	; 0x6a
   217d0:	ed9d 7b04 	vldr	d7, [sp, #16]
   217d4:	9208      	str	r2, [sp, #32]
   217d6:	4a27      	ldr	r2, [pc, #156]	; (21874 <_strtod_l+0xa0c>)
   217d8:	2100      	movs	r1, #0
   217da:	07d8      	lsls	r0, r3, #31
   217dc:	d504      	bpl.n	217e8 <_strtod_l+0x980>
   217de:	ed92 6b00 	vldr	d6, [r2]
   217e2:	2101      	movs	r1, #1
   217e4:	ee27 7b06 	vmul.f64	d7, d7, d6
   217e8:	105b      	asrs	r3, r3, #1
   217ea:	f102 0208 	add.w	r2, r2, #8
   217ee:	d1f4      	bne.n	217da <_strtod_l+0x972>
   217f0:	b109      	cbz	r1, 217f6 <_strtod_l+0x98e>
   217f2:	ed8d 7b04 	vstr	d7, [sp, #16]
   217f6:	9b08      	ldr	r3, [sp, #32]
   217f8:	b193      	cbz	r3, 21820 <_strtod_l+0x9b8>
   217fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   217fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
   21802:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   21806:	2b00      	cmp	r3, #0
   21808:	dd0a      	ble.n	21820 <_strtod_l+0x9b8>
   2180a:	2b1f      	cmp	r3, #31
   2180c:	f340 822f 	ble.w	21c6e <_strtod_l+0xe06>
   21810:	2000      	movs	r0, #0
   21812:	2b34      	cmp	r3, #52	; 0x34
   21814:	9004      	str	r0, [sp, #16]
   21816:	f340 8240 	ble.w	21c9a <_strtod_l+0xe32>
   2181a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   2181e:	9305      	str	r3, [sp, #20]
   21820:	ed9d 7b04 	vldr	d7, [sp, #16]
   21824:	eeb5 7b40 	vcmp.f64	d7, #0.0
   21828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2182c:	f47f ad1a 	bne.w	21264 <_strtod_l+0x3fc>
   21830:	2322      	movs	r3, #34	; 0x22
   21832:	ed9f 8b05 	vldr	d8, [pc, #20]	; 21848 <_strtod_l+0x9e0>
   21836:	f8c8 3000 	str.w	r3, [r8]
   2183a:	e4d2      	b.n	211e2 <_strtod_l+0x37a>
   2183c:	2322      	movs	r3, #34	; 0x22
   2183e:	ed9f 8b04 	vldr	d8, [pc, #16]	; 21850 <_strtod_l+0x9e8>
   21842:	f8c8 3000 	str.w	r3, [r8]
   21846:	e4cc      	b.n	211e2 <_strtod_l+0x37a>
	...
   21854:	7ff00000 	.word	0x7ff00000
   21858:	bff00000 	.word	0xbff00000
   2185c:	7ff00000 	.word	0x7ff00000
   21860:	7c9fffff 	.word	0x7c9fffff
   21864:	7fefffff 	.word	0x7fefffff
   21868:	200018a0 	.word	0x200018a0
   2186c:	7ca00000 	.word	0x7ca00000
   21870:	200018c8 	.word	0x200018c8
   21874:	200029d8 	.word	0x200029d8
   21878:	9302      	str	r3, [sp, #8]
   2187a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2187c:	9301      	str	r3, [sp, #4]
   2187e:	ab12      	add	r3, sp, #72	; 0x48
   21880:	9300      	str	r3, [sp, #0]
   21882:	4aa7      	ldr	r2, [pc, #668]	; (21b20 <_strtod_l+0xcb8>)
   21884:	ab13      	add	r3, sp, #76	; 0x4c
   21886:	a911      	add	r1, sp, #68	; 0x44
   21888:	4640      	mov	r0, r8
   2188a:	f001 f9b3 	bl	22bf4 <__gethex>
   2188e:	f010 050f 	ands.w	r5, r0, #15
   21892:	4604      	mov	r4, r0
   21894:	f43f aca3 	beq.w	211de <_strtod_l+0x376>
   21898:	2d06      	cmp	r5, #6
   2189a:	d174      	bne.n	21986 <_strtod_l+0xb1e>
   2189c:	9b07      	ldr	r3, [sp, #28]
   2189e:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 21b08 <_strtod_l+0xca0>
   218a2:	3701      	adds	r7, #1
   218a4:	2b00      	cmp	r3, #0
   218a6:	f43f abce 	beq.w	21046 <_strtod_l+0x1de>
   218aa:	601f      	str	r7, [r3, #0]
   218ac:	f7ff bbcb 	b.w	21046 <_strtod_l+0x1de>
   218b0:	ed9d 8b04 	vldr	d8, [sp, #16]
   218b4:	e495      	b.n	211e2 <_strtod_l+0x37a>
   218b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   218b8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   218bc:	4403      	add	r3, r0
   218be:	930b      	str	r3, [sp, #44]	; 0x2c
   218c0:	2801      	cmp	r0, #1
   218c2:	f105 0301 	add.w	r3, r5, #1
   218c6:	461a      	mov	r2, r3
   218c8:	d014      	beq.n	218f4 <_strtod_l+0xa8c>
   218ca:	4428      	add	r0, r5
   218cc:	1e44      	subs	r4, r0, #1
   218ce:	e003      	b.n	218d8 <_strtod_l+0xa70>
   218d0:	0046      	lsls	r6, r0, #1
   218d2:	429c      	cmp	r4, r3
   218d4:	d00d      	beq.n	218f2 <_strtod_l+0xa8a>
   218d6:	3301      	adds	r3, #1
   218d8:	462a      	mov	r2, r5
   218da:	2a08      	cmp	r2, #8
   218dc:	461d      	mov	r5, r3
   218de:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   218e2:	d9f5      	bls.n	218d0 <_strtod_l+0xa68>
   218e4:	2b10      	cmp	r3, #16
   218e6:	bfdc      	itt	le
   218e8:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   218ec:	ea4f 0949 	movle.w	r9, r9, lsl #1
   218f0:	e7ef      	b.n	218d2 <_strtod_l+0xa6a>
   218f2:	3202      	adds	r2, #2
   218f4:	2d08      	cmp	r5, #8
   218f6:	dc3c      	bgt.n	21972 <_strtod_l+0xb0a>
   218f8:	4615      	mov	r5, r2
   218fa:	f7ff bb79 	b.w	20ff0 <_strtod_l+0x188>
   218fe:	4989      	ldr	r1, [pc, #548]	; (21b24 <_strtod_l+0xcbc>)
   21900:	2201      	movs	r2, #1
   21902:	4638      	mov	r0, r7
   21904:	f000 fd4e 	bl	223a4 <strncmp>
   21908:	2800      	cmp	r0, #0
   2190a:	f000 8082 	beq.w	21a12 <_strtod_l+0xbaa>
   2190e:	f04f 0e00 	mov.w	lr, #0
   21912:	46f1      	mov	r9, lr
   21914:	4676      	mov	r6, lr
   21916:	4675      	mov	r5, lr
   21918:	f7ff bbb5 	b.w	21086 <_strtod_l+0x21e>
   2191c:	f644 631f 	movw	r3, #19999	; 0x4e1f
   21920:	459b      	cmp	fp, r3
   21922:	bfa8      	it	ge
   21924:	469b      	movge	fp, r3
   21926:	e42f      	b.n	21188 <_strtod_l+0x320>
   21928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2192c:	4618      	mov	r0, r3
   2192e:	2b00      	cmp	r3, #0
   21930:	f47f ae23 	bne.w	2157a <_strtod_l+0x712>
   21934:	2322      	movs	r3, #34	; 0x22
   21936:	ed9f 8b74 	vldr	d8, [pc, #464]	; 21b08 <_strtod_l+0xca0>
   2193a:	9812      	ldr	r0, [sp, #72]	; 0x48
   2193c:	f8c8 3000 	str.w	r3, [r8]
   21940:	e678      	b.n	21634 <_strtod_l+0x7cc>
   21942:	eeb0 7b49 	vmov.f64	d7, d9
   21946:	e6c0      	b.n	216ca <_strtod_l+0x862>
   21948:	4977      	ldr	r1, [pc, #476]	; (21b28 <_strtod_l+0xcc0>)
   2194a:	a811      	add	r0, sp, #68	; 0x44
   2194c:	f001 fc1c 	bl	23188 <__match>
   21950:	2800      	cmp	r0, #0
   21952:	f43f ab71 	beq.w	21038 <_strtod_l+0x1d0>
   21956:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21958:	4974      	ldr	r1, [pc, #464]	; (21b2c <_strtod_l+0xcc4>)
   2195a:	3b01      	subs	r3, #1
   2195c:	a811      	add	r0, sp, #68	; 0x44
   2195e:	9311      	str	r3, [sp, #68]	; 0x44
   21960:	f001 fc12 	bl	23188 <__match>
   21964:	b910      	cbnz	r0, 2196c <_strtod_l+0xb04>
   21966:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21968:	3301      	adds	r3, #1
   2196a:	9311      	str	r3, [sp, #68]	; 0x44
   2196c:	ed9f 8b68 	vldr	d8, [pc, #416]	; 21b10 <_strtod_l+0xca8>
   21970:	e437      	b.n	211e2 <_strtod_l+0x37a>
   21972:	2a10      	cmp	r2, #16
   21974:	bfdc      	itt	le
   21976:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   2197a:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   2197e:	4615      	mov	r5, r2
   21980:	2000      	movs	r0, #0
   21982:	f7ff bb3a 	b.w	20ffa <_strtod_l+0x192>
   21986:	9a12      	ldr	r2, [sp, #72]	; 0x48
   21988:	b13a      	cbz	r2, 2199a <_strtod_l+0xb32>
   2198a:	2135      	movs	r1, #53	; 0x35
   2198c:	a814      	add	r0, sp, #80	; 0x50
   2198e:	f003 ff83 	bl	25898 <__copybits>
   21992:	9912      	ldr	r1, [sp, #72]	; 0x48
   21994:	4640      	mov	r0, r8
   21996:	f003 facb 	bl	24f30 <_Bfree>
   2199a:	3d01      	subs	r5, #1
   2199c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2199e:	2d04      	cmp	r5, #4
   219a0:	f200 818f 	bhi.w	21cc2 <_strtod_l+0xe5a>
   219a4:	e8df f005 	tbb	[pc, r5]
   219a8:	1f2a2d03 	.word	0x1f2a2d03
   219ac:	03          	.byte	0x03
   219ad:	00          	.byte	0x00
   219ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
   219b0:	9204      	str	r2, [sp, #16]
   219b2:	f203 4233 	addw	r2, r3, #1075	; 0x433
   219b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   219b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   219bc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   219c0:	9305      	str	r3, [sp, #20]
   219c2:	05e5      	lsls	r5, r4, #23
   219c4:	d502      	bpl.n	219cc <_strtod_l+0xb64>
   219c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   219ca:	9305      	str	r3, [sp, #20]
   219cc:	4a58      	ldr	r2, [pc, #352]	; (21b30 <_strtod_l+0xcc8>)
   219ce:	401a      	ands	r2, r3
   219d0:	ed9d 8b04 	vldr	d8, [sp, #16]
   219d4:	2a00      	cmp	r2, #0
   219d6:	f47f ac04 	bne.w	211e2 <_strtod_l+0x37a>
   219da:	f000 fdc7 	bl	2256c <__errno>
   219de:	2322      	movs	r3, #34	; 0x22
   219e0:	6003      	str	r3, [r0, #0]
   219e2:	f7ff bbfe 	b.w	211e2 <_strtod_l+0x37a>
   219e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   219ea:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   219ee:	e9cd 3604 	strd	r3, r6, [sp, #16]
   219f2:	05e3      	lsls	r3, r4, #23
   219f4:	f57f af5c 	bpl.w	218b0 <_strtod_l+0xa48>
   219f8:	9b05      	ldr	r3, [sp, #20]
   219fa:	e7e4      	b.n	219c6 <_strtod_l+0xb5e>
   219fc:	4b4c      	ldr	r3, [pc, #304]	; (21b30 <_strtod_l+0xcc8>)
   219fe:	9305      	str	r3, [sp, #20]
   21a00:	e7f7      	b.n	219f2 <_strtod_l+0xb8a>
   21a02:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21a04:	9304      	str	r3, [sp, #16]
   21a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21a08:	9305      	str	r3, [sp, #20]
   21a0a:	e7da      	b.n	219c2 <_strtod_l+0xb5a>
   21a0c:	2000      	movs	r0, #0
   21a0e:	f7ff bae1 	b.w	20fd4 <_strtod_l+0x16c>
   21a12:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21a14:	461a      	mov	r2, r3
   21a16:	3301      	adds	r3, #1
   21a18:	9311      	str	r3, [sp, #68]	; 0x44
   21a1a:	7854      	ldrb	r4, [r2, #1]
   21a1c:	4606      	mov	r6, r0
   21a1e:	4681      	mov	r9, r0
   21a20:	f7ff bacd 	b.w	20fbe <_strtod_l+0x156>
   21a24:	4b43      	ldr	r3, [pc, #268]	; (21b34 <_strtod_l+0xccc>)
   21a26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21a2a:	ed93 8b00 	vldr	d8, [r3]
   21a2e:	ed9d 7b04 	vldr	d7, [sp, #16]
   21a32:	ee28 8b07 	vmul.f64	d8, d8, d7
   21a36:	f7ff bbd4 	b.w	211e2 <_strtod_l+0x37a>
   21a3a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   21a3e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   21a42:	e511      	b.n	21468 <_strtod_l+0x600>
   21a44:	46ae      	mov	lr, r5
   21a46:	900b      	str	r0, [sp, #44]	; 0x2c
   21a48:	f7ff badc 	b.w	21004 <_strtod_l+0x19c>
   21a4c:	4b39      	ldr	r3, [pc, #228]	; (21b34 <_strtod_l+0xccc>)
   21a4e:	f1c5 050f 	rsb	r5, r5, #15
   21a52:	1b4a      	subs	r2, r1, r5
   21a54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   21a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21a5c:	ed95 8b00 	vldr	d8, [r5]
   21a60:	ed93 7b00 	vldr	d7, [r3]
   21a64:	ed9d 6b04 	vldr	d6, [sp, #16]
   21a68:	ee28 8b06 	vmul.f64	d8, d8, d6
   21a6c:	ee28 8b07 	vmul.f64	d8, d8, d7
   21a70:	f7ff bbb7 	b.w	211e2 <_strtod_l+0x37a>
   21a74:	2d00      	cmp	r5, #0
   21a76:	f000 8095 	beq.w	21ba4 <_strtod_l+0xd3c>
   21a7a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   21a7e:	4b2e      	ldr	r3, [pc, #184]	; (21b38 <_strtod_l+0xcd0>)
   21a80:	f3cc 0113 	ubfx	r1, ip, #0, #20
   21a84:	4299      	cmp	r1, r3
   21a86:	4662      	mov	r2, ip
   21a88:	f000 80d2 	beq.w	21c30 <_strtod_l+0xdc8>
   21a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21a8e:	2b00      	cmp	r3, #0
   21a90:	f000 80a5 	beq.w	21bde <_strtod_l+0xd76>
   21a94:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   21a98:	4213      	tst	r3, r2
   21a9a:	4617      	mov	r7, r2
   21a9c:	d01a      	beq.n	21ad4 <_strtod_l+0xc6c>
   21a9e:	eeb0 0b48 	vmov.f64	d0, d8
   21aa2:	2d00      	cmp	r5, #0
   21aa4:	f000 80a6 	beq.w	21bf4 <_strtod_l+0xd8c>
   21aa8:	f003 fdc6 	bl	25638 <__ulp>
   21aac:	9b08      	ldr	r3, [sp, #32]
   21aae:	b17b      	cbz	r3, 21ad0 <_strtod_l+0xc68>
   21ab0:	f3c7 530a 	ubfx	r3, r7, #20, #11
   21ab4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   21ab8:	2b00      	cmp	r3, #0
   21aba:	dd09      	ble.n	21ad0 <_strtod_l+0xc68>
   21abc:	051b      	lsls	r3, r3, #20
   21abe:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   21ac2:	2000      	movs	r0, #0
   21ac4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   21ac8:	ec41 0b17 	vmov	d7, r0, r1
   21acc:	ee20 0b07 	vmul.f64	d0, d0, d7
   21ad0:	ee38 8b00 	vadd.f64	d8, d8, d0
   21ad4:	9b08      	ldr	r3, [sp, #32]
   21ad6:	b15b      	cbz	r3, 21af0 <_strtod_l+0xc88>
   21ad8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 21b18 <_strtod_l+0xcb0>
   21adc:	4b14      	ldr	r3, [pc, #80]	; (21b30 <_strtod_l+0xcc8>)
   21ade:	ee28 8b07 	vmul.f64	d8, d8, d7
   21ae2:	ee18 2a90 	vmov	r2, s17
   21ae6:	4013      	ands	r3, r2
   21ae8:	b913      	cbnz	r3, 21af0 <_strtod_l+0xc88>
   21aea:	2322      	movs	r3, #34	; 0x22
   21aec:	f8c8 3000 	str.w	r3, [r8]
   21af0:	9812      	ldr	r0, [sp, #72]	; 0x48
   21af2:	e59f      	b.n	21634 <_strtod_l+0x7cc>
   21af4:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   21af8:	9305      	str	r3, [sp, #20]
   21afa:	2300      	movs	r3, #0
   21afc:	9308      	str	r3, [sp, #32]
   21afe:	f7ff bbb1 	b.w	21264 <_strtod_l+0x3fc>
   21b02:	bf00      	nop
   21b04:	f3af 8000 	nop.w
	...
   21b14:	7ff00000 	.word	0x7ff00000
   21b18:	00000000 	.word	0x00000000
   21b1c:	39500000 	.word	0x39500000
   21b20:	20004f60 	.word	0x20004f60
   21b24:	20003a58 	.word	0x20003a58
   21b28:	20004380 	.word	0x20004380
   21b2c:	20004384 	.word	0x20004384
   21b30:	7ff00000 	.word	0x7ff00000
   21b34:	200018c8 	.word	0x200018c8
   21b38:	000fffff 	.word	0x000fffff
   21b3c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   21b40:	430d      	orrs	r5, r1
   21b42:	d1c7      	bne.n	21ad4 <_strtod_l+0xc6c>
   21b44:	f3c2 0313 	ubfx	r3, r2, #0, #20
   21b48:	4617      	mov	r7, r2
   21b4a:	2b00      	cmp	r3, #0
   21b4c:	d1c2      	bne.n	21ad4 <_strtod_l+0xc6c>
   21b4e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   21b52:	0d1b      	lsrs	r3, r3, #20
   21b54:	051b      	lsls	r3, r3, #20
   21b56:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   21b5a:	d9bb      	bls.n	21ad4 <_strtod_l+0xc6c>
   21b5c:	f8da 3014 	ldr.w	r3, [sl, #20]
   21b60:	b91b      	cbnz	r3, 21b6a <_strtod_l+0xd02>
   21b62:	f8da 3010 	ldr.w	r3, [sl, #16]
   21b66:	2b01      	cmp	r3, #1
   21b68:	ddb4      	ble.n	21ad4 <_strtod_l+0xc6c>
   21b6a:	4651      	mov	r1, sl
   21b6c:	2201      	movs	r2, #1
   21b6e:	4640      	mov	r0, r8
   21b70:	f003 fc1e 	bl	253b0 <__lshift>
   21b74:	4621      	mov	r1, r4
   21b76:	4682      	mov	sl, r0
   21b78:	f003 fc92 	bl	254a0 <__mcmp>
   21b7c:	2800      	cmp	r0, #0
   21b7e:	dda9      	ble.n	21ad4 <_strtod_l+0xc6c>
   21b80:	9b08      	ldr	r3, [sp, #32]
   21b82:	2b00      	cmp	r3, #0
   21b84:	d17e      	bne.n	21c84 <_strtod_l+0xe1c>
   21b86:	4b50      	ldr	r3, [pc, #320]	; (21cc8 <_strtod_l+0xe60>)
   21b88:	403b      	ands	r3, r7
   21b8a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   21b8e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   21b92:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   21b96:	9305      	str	r3, [sp, #20]
   21b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21b9c:	9304      	str	r3, [sp, #16]
   21b9e:	ed9d 8b04 	vldr	d8, [sp, #16]
   21ba2:	e797      	b.n	21ad4 <_strtod_l+0xc6c>
   21ba4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   21ba8:	f3c2 0313 	ubfx	r3, r2, #0, #20
   21bac:	430b      	orrs	r3, r1
   21bae:	4617      	mov	r7, r2
   21bb0:	f47f af6c 	bne.w	21a8c <_strtod_l+0xc24>
   21bb4:	e7e4      	b.n	21b80 <_strtod_l+0xd18>
   21bb6:	4945      	ldr	r1, [pc, #276]	; (21ccc <_strtod_l+0xe64>)
   21bb8:	a811      	add	r0, sp, #68	; 0x44
   21bba:	aa14      	add	r2, sp, #80	; 0x50
   21bbc:	f001 fb00 	bl	231c0 <__hexnan>
   21bc0:	2805      	cmp	r0, #5
   21bc2:	f47f ab06 	bne.w	211d2 <_strtod_l+0x36a>
   21bc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21bc8:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   21bcc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   21bd0:	9305      	str	r3, [sp, #20]
   21bd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21bd4:	9304      	str	r3, [sp, #16]
   21bd6:	ed9d 8b04 	vldr	d8, [sp, #16]
   21bda:	f7ff bb02 	b.w	211e2 <_strtod_l+0x37a>
   21bde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21be4:	4203      	tst	r3, r0
   21be6:	f43f af75 	beq.w	21ad4 <_strtod_l+0xc6c>
   21bea:	460f      	mov	r7, r1
   21bec:	e757      	b.n	21a9e <_strtod_l+0xc36>
   21bee:	4c38      	ldr	r4, [pc, #224]	; (21cd0 <_strtod_l+0xe68>)
   21bf0:	2100      	movs	r1, #0
   21bf2:	e58f      	b.n	21714 <_strtod_l+0x8ac>
   21bf4:	f003 fd20 	bl	25638 <__ulp>
   21bf8:	9b08      	ldr	r3, [sp, #32]
   21bfa:	2b00      	cmp	r3, #0
   21bfc:	d055      	beq.n	21caa <_strtod_l+0xe42>
   21bfe:	f3c7 530a 	ubfx	r3, r7, #20, #11
   21c02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   21c06:	2b00      	cmp	r3, #0
   21c08:	dd09      	ble.n	21c1e <_strtod_l+0xdb6>
   21c0a:	051b      	lsls	r3, r3, #20
   21c0c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   21c10:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   21c14:	4628      	mov	r0, r5
   21c16:	ec41 0b17 	vmov	d7, r0, r1
   21c1a:	ee20 0b07 	vmul.f64	d0, d0, d7
   21c1e:	ee38 8b40 	vsub.f64	d8, d8, d0
   21c22:	eeb5 8b40 	vcmp.f64	d8, #0.0
   21c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21c2a:	f47f af55 	bne.w	21ad8 <_strtod_l+0xc70>
   21c2e:	e681      	b.n	21934 <_strtod_l+0xacc>
   21c30:	9b08      	ldr	r3, [sp, #32]
   21c32:	9904      	ldr	r1, [sp, #16]
   21c34:	b31b      	cbz	r3, 21c7e <_strtod_l+0xe16>
   21c36:	4b24      	ldr	r3, [pc, #144]	; (21cc8 <_strtod_l+0xe60>)
   21c38:	4013      	ands	r3, r2
   21c3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   21c3e:	d81e      	bhi.n	21c7e <_strtod_l+0xe16>
   21c40:	0d1b      	lsrs	r3, r3, #20
   21c42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   21c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21c4a:	fa00 f303 	lsl.w	r3, r0, r3
   21c4e:	4299      	cmp	r1, r3
   21c50:	f47f af1c 	bne.w	21a8c <_strtod_l+0xc24>
   21c54:	4b1f      	ldr	r3, [pc, #124]	; (21cd4 <_strtod_l+0xe6c>)
   21c56:	429a      	cmp	r2, r3
   21c58:	d030      	beq.n	21cbc <_strtod_l+0xe54>
   21c5a:	4b1b      	ldr	r3, [pc, #108]	; (21cc8 <_strtod_l+0xe60>)
   21c5c:	4013      	ands	r3, r2
   21c5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   21c62:	9305      	str	r3, [sp, #20]
   21c64:	2300      	movs	r3, #0
   21c66:	9304      	str	r3, [sp, #16]
   21c68:	ed9d 8b04 	vldr	d8, [sp, #16]
   21c6c:	e732      	b.n	21ad4 <_strtod_l+0xc6c>
   21c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21c72:	fa02 f303 	lsl.w	r3, r2, r3
   21c76:	9a04      	ldr	r2, [sp, #16]
   21c78:	401a      	ands	r2, r3
   21c7a:	9204      	str	r2, [sp, #16]
   21c7c:	e5d0      	b.n	21820 <_strtod_l+0x9b8>
   21c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21c82:	e7e4      	b.n	21c4e <_strtod_l+0xde6>
   21c84:	4b10      	ldr	r3, [pc, #64]	; (21cc8 <_strtod_l+0xe60>)
   21c86:	403b      	ands	r3, r7
   21c88:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   21c8c:	f73f af7d 	bgt.w	21b8a <_strtod_l+0xd22>
   21c90:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   21c94:	f73f af20 	bgt.w	21ad8 <_strtod_l+0xc70>
   21c98:	e64c      	b.n	21934 <_strtod_l+0xacc>
   21c9a:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   21c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21ca2:	4093      	lsls	r3, r2
   21ca4:	400b      	ands	r3, r1
   21ca6:	9305      	str	r3, [sp, #20]
   21ca8:	e5ba      	b.n	21820 <_strtod_l+0x9b8>
   21caa:	ee38 8b40 	vsub.f64	d8, d8, d0
   21cae:	eeb5 8b40 	vcmp.f64	d8, #0.0
   21cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21cb6:	f47f af1b 	bne.w	21af0 <_strtod_l+0xc88>
   21cba:	e63b      	b.n	21934 <_strtod_l+0xacc>
   21cbc:	3101      	adds	r1, #1
   21cbe:	d1cc      	bne.n	21c5a <_strtod_l+0xdf2>
   21cc0:	e409      	b.n	214d6 <_strtod_l+0x66e>
   21cc2:	2300      	movs	r3, #0
   21cc4:	e67d      	b.n	219c2 <_strtod_l+0xb5a>
   21cc6:	bf00      	nop
   21cc8:	7ff00000 	.word	0x7ff00000
   21ccc:	20004f74 	.word	0x20004f74
   21cd0:	200018a0 	.word	0x200018a0
   21cd4:	7fefffff 	.word	0x7fefffff

00021cd8 <strtof>:
   21cd8:	b510      	push	{r4, lr}
   21cda:	4c23      	ldr	r4, [pc, #140]	; (21d68 <strtof+0x90>)
   21cdc:	4b23      	ldr	r3, [pc, #140]	; (21d6c <strtof+0x94>)
   21cde:	4684      	mov	ip, r0
   21ce0:	460a      	mov	r2, r1
   21ce2:	6820      	ldr	r0, [r4, #0]
   21ce4:	4661      	mov	r1, ip
   21ce6:	f7ff f8bf 	bl	20e68 <_strtod_l>
   21cea:	eeb4 0b40 	vcmp.f64	d0, d0
   21cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21cf2:	d627      	bvs.n	21d44 <strtof+0x6c>
   21cf4:	eef7 7bc0 	vcvt.f32.f64	s15, d0
   21cf8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 21d70 <strtof+0x98>
   21cfc:	eef0 6ae7 	vabs.f32	s13, s15
   21d00:	eef4 6a47 	vcmp.f32	s13, s14
   21d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21d08:	dd0e      	ble.n	21d28 <strtof+0x50>
   21d0a:	eeb0 5bc0 	vabs.f64	d5, d0
   21d0e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 21d60 <strtof+0x88>
   21d12:	eeb4 5b46 	vcmp.f64	d5, d6
   21d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   21d1a:	dc05      	bgt.n	21d28 <strtof+0x50>
   21d1c:	6823      	ldr	r3, [r4, #0]
   21d1e:	2222      	movs	r2, #34	; 0x22
   21d20:	601a      	str	r2, [r3, #0]
   21d22:	eeb0 0a67 	vmov.f32	s0, s15
   21d26:	bd10      	pop	{r4, pc}
   21d28:	ee17 3a90 	vmov	r3, s15
   21d2c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
   21d30:	d1f7      	bne.n	21d22 <strtof+0x4a>
   21d32:	4b10      	ldr	r3, [pc, #64]	; (21d74 <strtof+0x9c>)
   21d34:	ee10 2a90 	vmov	r2, s1
   21d38:	4013      	ands	r3, r2
   21d3a:	2b00      	cmp	r3, #0
   21d3c:	d1ee      	bne.n	21d1c <strtof+0x44>
   21d3e:	eeb0 0a67 	vmov.f32	s0, s15
   21d42:	bd10      	pop	{r4, pc}
   21d44:	ee10 3a90 	vmov	r3, s1
   21d48:	2b00      	cmp	r3, #0
   21d4a:	480b      	ldr	r0, [pc, #44]	; (21d78 <strtof+0xa0>)
   21d4c:	da04      	bge.n	21d58 <strtof+0x80>
   21d4e:	f7fc fe0b 	bl	1e968 <nanf>
   21d52:	eef1 7a40 	vneg.f32	s15, s0
   21d56:	e7e4      	b.n	21d22 <strtof+0x4a>
   21d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21d5c:	f7fc be04 	b.w	1e968 <nanf>
   21d60:	ffffffff 	.word	0xffffffff
   21d64:	7fefffff 	.word	0x7fefffff
   21d68:	200099ec 	.word	0x200099ec
   21d6c:	20009464 	.word	0x20009464
   21d70:	7f7fffff 	.word	0x7f7fffff
   21d74:	7ff00000 	.word	0x7ff00000
   21d78:	200039f8 	.word	0x200039f8

00021d7c <_strtol_l.constprop.0>:
   21d7c:	2b01      	cmp	r3, #1
   21d7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d82:	d040      	beq.n	21e06 <_strtol_l.constprop.0+0x8a>
   21d84:	2b24      	cmp	r3, #36	; 0x24
   21d86:	4698      	mov	r8, r3
   21d88:	d83d      	bhi.n	21e06 <_strtol_l.constprop.0+0x8a>
   21d8a:	4d4c      	ldr	r5, [pc, #304]	; (21ebc <_strtol_l.constprop.0+0x140>)
   21d8c:	468e      	mov	lr, r1
   21d8e:	4676      	mov	r6, lr
   21d90:	f81e bb01 	ldrb.w	fp, [lr], #1
   21d94:	f815 400b 	ldrb.w	r4, [r5, fp]
   21d98:	f014 0408 	ands.w	r4, r4, #8
   21d9c:	d1f7      	bne.n	21d8e <_strtol_l.constprop.0+0x12>
   21d9e:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   21da2:	d072      	beq.n	21e8a <_strtol_l.constprop.0+0x10e>
   21da4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   21da8:	bf08      	it	eq
   21daa:	f89e b000 	ldrbeq.w	fp, [lr]
   21dae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   21db2:	bf08      	it	eq
   21db4:	f106 0e02 	addeq.w	lr, r6, #2
   21db8:	2b00      	cmp	r3, #0
   21dba:	d042      	beq.n	21e42 <_strtol_l.constprop.0+0xc6>
   21dbc:	2b10      	cmp	r3, #16
   21dbe:	d057      	beq.n	21e70 <_strtol_l.constprop.0+0xf4>
   21dc0:	fbb9 f7f8 	udiv	r7, r9, r8
   21dc4:	2500      	movs	r5, #0
   21dc6:	462e      	mov	r6, r5
   21dc8:	fb08 9a17 	mls	sl, r8, r7, r9
   21dcc:	e005      	b.n	21dda <_strtol_l.constprop.0+0x5e>
   21dce:	d033      	beq.n	21e38 <_strtol_l.constprop.0+0xbc>
   21dd0:	fb08 c606 	mla	r6, r8, r6, ip
   21dd4:	2501      	movs	r5, #1
   21dd6:	f81e bb01 	ldrb.w	fp, [lr], #1
   21dda:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   21dde:	f1bc 0f09 	cmp.w	ip, #9
   21de2:	d906      	bls.n	21df2 <_strtol_l.constprop.0+0x76>
   21de4:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   21de8:	f1bc 0f19 	cmp.w	ip, #25
   21dec:	d812      	bhi.n	21e14 <_strtol_l.constprop.0+0x98>
   21dee:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   21df2:	4563      	cmp	r3, ip
   21df4:	dd17      	ble.n	21e26 <_strtol_l.constprop.0+0xaa>
   21df6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   21dfa:	d0ec      	beq.n	21dd6 <_strtol_l.constprop.0+0x5a>
   21dfc:	42b7      	cmp	r7, r6
   21dfe:	d2e6      	bcs.n	21dce <_strtol_l.constprop.0+0x52>
   21e00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   21e04:	e7e7      	b.n	21dd6 <_strtol_l.constprop.0+0x5a>
   21e06:	f000 fbb1 	bl	2256c <__errno>
   21e0a:	2316      	movs	r3, #22
   21e0c:	6003      	str	r3, [r0, #0]
   21e0e:	2000      	movs	r0, #0
   21e10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e14:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   21e18:	f1bc 0f19 	cmp.w	ip, #25
   21e1c:	d803      	bhi.n	21e26 <_strtol_l.constprop.0+0xaa>
   21e1e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   21e22:	4563      	cmp	r3, ip
   21e24:	dce7      	bgt.n	21df6 <_strtol_l.constprop.0+0x7a>
   21e26:	1c6b      	adds	r3, r5, #1
   21e28:	d027      	beq.n	21e7a <_strtol_l.constprop.0+0xfe>
   21e2a:	b98c      	cbnz	r4, 21e50 <_strtol_l.constprop.0+0xd4>
   21e2c:	b10a      	cbz	r2, 21e32 <_strtol_l.constprop.0+0xb6>
   21e2e:	bba5      	cbnz	r5, 21e9a <_strtol_l.constprop.0+0x11e>
   21e30:	6011      	str	r1, [r2, #0]
   21e32:	4630      	mov	r0, r6
   21e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e38:	45e2      	cmp	sl, ip
   21e3a:	dac9      	bge.n	21dd0 <_strtol_l.constprop.0+0x54>
   21e3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   21e40:	e7c9      	b.n	21dd6 <_strtol_l.constprop.0+0x5a>
   21e42:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   21e46:	d005      	beq.n	21e54 <_strtol_l.constprop.0+0xd8>
   21e48:	f04f 080a 	mov.w	r8, #10
   21e4c:	4643      	mov	r3, r8
   21e4e:	e7b7      	b.n	21dc0 <_strtol_l.constprop.0+0x44>
   21e50:	4276      	negs	r6, r6
   21e52:	e7eb      	b.n	21e2c <_strtol_l.constprop.0+0xb0>
   21e54:	f89e 3000 	ldrb.w	r3, [lr]
   21e58:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   21e5c:	2b58      	cmp	r3, #88	; 0x58
   21e5e:	d121      	bne.n	21ea4 <_strtol_l.constprop.0+0x128>
   21e60:	f04f 0810 	mov.w	r8, #16
   21e64:	f89e b001 	ldrb.w	fp, [lr, #1]
   21e68:	4643      	mov	r3, r8
   21e6a:	f10e 0e02 	add.w	lr, lr, #2
   21e6e:	e7a7      	b.n	21dc0 <_strtol_l.constprop.0+0x44>
   21e70:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   21e74:	d01a      	beq.n	21eac <_strtol_l.constprop.0+0x130>
   21e76:	4698      	mov	r8, r3
   21e78:	e7a2      	b.n	21dc0 <_strtol_l.constprop.0+0x44>
   21e7a:	2322      	movs	r3, #34	; 0x22
   21e7c:	6003      	str	r3, [r0, #0]
   21e7e:	b172      	cbz	r2, 21e9e <_strtol_l.constprop.0+0x122>
   21e80:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   21e84:	464e      	mov	r6, r9
   21e86:	6011      	str	r1, [r2, #0]
   21e88:	e7d3      	b.n	21e32 <_strtol_l.constprop.0+0xb6>
   21e8a:	f89e b000 	ldrb.w	fp, [lr]
   21e8e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   21e92:	f106 0e02 	add.w	lr, r6, #2
   21e96:	2401      	movs	r4, #1
   21e98:	e78e      	b.n	21db8 <_strtol_l.constprop.0+0x3c>
   21e9a:	46b1      	mov	r9, r6
   21e9c:	e7f0      	b.n	21e80 <_strtol_l.constprop.0+0x104>
   21e9e:	464e      	mov	r6, r9
   21ea0:	4630      	mov	r0, r6
   21ea2:	e7c7      	b.n	21e34 <_strtol_l.constprop.0+0xb8>
   21ea4:	f04f 0808 	mov.w	r8, #8
   21ea8:	4643      	mov	r3, r8
   21eaa:	e789      	b.n	21dc0 <_strtol_l.constprop.0+0x44>
   21eac:	f89e 5000 	ldrb.w	r5, [lr]
   21eb0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   21eb4:	2d58      	cmp	r5, #88	; 0x58
   21eb6:	d0d3      	beq.n	21e60 <_strtol_l.constprop.0+0xe4>
   21eb8:	4698      	mov	r8, r3
   21eba:	e781      	b.n	21dc0 <_strtol_l.constprop.0+0x44>
   21ebc:	20004209 	.word	0x20004209

00021ec0 <strtol>:
   21ec0:	b410      	push	{r4}
   21ec2:	4c05      	ldr	r4, [pc, #20]	; (21ed8 <strtol+0x18>)
   21ec4:	4684      	mov	ip, r0
   21ec6:	4613      	mov	r3, r2
   21ec8:	6820      	ldr	r0, [r4, #0]
   21eca:	f85d 4b04 	ldr.w	r4, [sp], #4
   21ece:	460a      	mov	r2, r1
   21ed0:	4661      	mov	r1, ip
   21ed2:	f7ff bf53 	b.w	21d7c <_strtol_l.constprop.0>
   21ed6:	bf00      	nop
   21ed8:	200099ec 	.word	0x200099ec

00021edc <__utoa>:
   21edc:	b5f0      	push	{r4, r5, r6, r7, lr}
   21ede:	4f25      	ldr	r7, [pc, #148]	; (21f74 <__utoa+0x98>)
   21ee0:	f1a2 0e02 	sub.w	lr, r2, #2
   21ee4:	4616      	mov	r6, r2
   21ee6:	4605      	mov	r5, r0
   21ee8:	460c      	mov	r4, r1
   21eea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21eec:	b08b      	sub	sp, #44	; 0x2c
   21eee:	46ec      	mov	ip, sp
   21ef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21ef4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21ef6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21efa:	e897 0003 	ldmia.w	r7, {r0, r1}
   21efe:	f84c 0b04 	str.w	r0, [ip], #4
   21f02:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   21f06:	f88c 1000 	strb.w	r1, [ip]
   21f0a:	d82e      	bhi.n	21f6a <__utoa+0x8e>
   21f0c:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   21f10:	4670      	mov	r0, lr
   21f12:	f04f 0c00 	mov.w	ip, #0
   21f16:	fbb5 f2f6 	udiv	r2, r5, r6
   21f1a:	fb06 5312 	mls	r3, r6, r2, r5
   21f1e:	3328      	adds	r3, #40	; 0x28
   21f20:	446b      	add	r3, sp
   21f22:	4661      	mov	r1, ip
   21f24:	f813 cc28 	ldrb.w	ip, [r3, #-40]
   21f28:	f800 cf01 	strb.w	ip, [r0, #1]!
   21f2c:	462b      	mov	r3, r5
   21f2e:	429e      	cmp	r6, r3
   21f30:	f101 0c01 	add.w	ip, r1, #1
   21f34:	4615      	mov	r5, r2
   21f36:	d9ee      	bls.n	21f16 <__utoa+0x3a>
   21f38:	2300      	movs	r3, #0
   21f3a:	f804 300c 	strb.w	r3, [r4, ip]
   21f3e:	b189      	cbz	r1, 21f64 <__utoa+0x88>
   21f40:	44a4      	add	ip, r4
   21f42:	4672      	mov	r2, lr
   21f44:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   21f48:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
   21f4c:	f88e 5000 	strb.w	r5, [lr]
   21f50:	eba4 030e 	sub.w	r3, r4, lr
   21f54:	3202      	adds	r2, #2
   21f56:	3b01      	subs	r3, #1
   21f58:	1b12      	subs	r2, r2, r4
   21f5a:	440b      	add	r3, r1
   21f5c:	429a      	cmp	r2, r3
   21f5e:	f88c 0000 	strb.w	r0, [ip]
   21f62:	dbee      	blt.n	21f42 <__utoa+0x66>
   21f64:	4620      	mov	r0, r4
   21f66:	b00b      	add	sp, #44	; 0x2c
   21f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21f6a:	2300      	movs	r3, #0
   21f6c:	4618      	mov	r0, r3
   21f6e:	7023      	strb	r3, [r4, #0]
   21f70:	b00b      	add	sp, #44	; 0x2c
   21f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21f74:	200041e0 	.word	0x200041e0

00021f78 <stdio_exit_handler>:
   21f78:	4a02      	ldr	r2, [pc, #8]	; (21f84 <stdio_exit_handler+0xc>)
   21f7a:	4903      	ldr	r1, [pc, #12]	; (21f88 <stdio_exit_handler+0x10>)
   21f7c:	4803      	ldr	r0, [pc, #12]	; (21f8c <stdio_exit_handler+0x14>)
   21f7e:	f000 b8ef 	b.w	22160 <_fwalk_sglue>
   21f82:	bf00      	nop
   21f84:	200099e0 	.word	0x200099e0
   21f88:	00025959 	.word	0x00025959
   21f8c:	20008988 	.word	0x20008988

00021f90 <cleanup_stdio>:
   21f90:	4b0c      	ldr	r3, [pc, #48]	; (21fc4 <cleanup_stdio+0x34>)
   21f92:	6841      	ldr	r1, [r0, #4]
   21f94:	4299      	cmp	r1, r3
   21f96:	b510      	push	{r4, lr}
   21f98:	4604      	mov	r4, r0
   21f9a:	d001      	beq.n	21fa0 <cleanup_stdio+0x10>
   21f9c:	f003 fcdc 	bl	25958 <_fclose_r>
   21fa0:	68a1      	ldr	r1, [r4, #8]
   21fa2:	4b09      	ldr	r3, [pc, #36]	; (21fc8 <cleanup_stdio+0x38>)
   21fa4:	4299      	cmp	r1, r3
   21fa6:	d002      	beq.n	21fae <cleanup_stdio+0x1e>
   21fa8:	4620      	mov	r0, r4
   21faa:	f003 fcd5 	bl	25958 <_fclose_r>
   21fae:	68e1      	ldr	r1, [r4, #12]
   21fb0:	4b06      	ldr	r3, [pc, #24]	; (21fcc <cleanup_stdio+0x3c>)
   21fb2:	4299      	cmp	r1, r3
   21fb4:	d004      	beq.n	21fc0 <cleanup_stdio+0x30>
   21fb6:	4620      	mov	r0, r4
   21fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21fbc:	f003 bccc 	b.w	25958 <_fclose_r>
   21fc0:	bd10      	pop	{r4, pc}
   21fc2:	bf00      	nop
   21fc4:	2000c994 	.word	0x2000c994
   21fc8:	2000c9fc 	.word	0x2000c9fc
   21fcc:	2000ca64 	.word	0x2000ca64

00021fd0 <global_stdio_init.part.0>:
   21fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21fd4:	4c2a      	ldr	r4, [pc, #168]	; (22080 <global_stdio_init.part.0+0xb0>)
   21fd6:	4b2b      	ldr	r3, [pc, #172]	; (22084 <global_stdio_init.part.0+0xb4>)
   21fd8:	482b      	ldr	r0, [pc, #172]	; (22088 <global_stdio_init.part.0+0xb8>)
   21fda:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 2209c <global_stdio_init.part.0+0xcc>
   21fde:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 220a0 <global_stdio_init.part.0+0xd0>
   21fe2:	4f2a      	ldr	r7, [pc, #168]	; (2208c <global_stdio_init.part.0+0xbc>)
   21fe4:	6018      	str	r0, [r3, #0]
   21fe6:	2500      	movs	r5, #0
   21fe8:	2304      	movs	r3, #4
   21fea:	2208      	movs	r2, #8
   21fec:	4629      	mov	r1, r5
   21fee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   21ff2:	4e27      	ldr	r6, [pc, #156]	; (22090 <global_stdio_init.part.0+0xc0>)
   21ff4:	6665      	str	r5, [r4, #100]	; 0x64
   21ff6:	e9c4 5302 	strd	r5, r3, [r4, #8]
   21ffa:	e9c4 5500 	strd	r5, r5, [r4]
   21ffe:	e9c4 5504 	strd	r5, r5, [r4, #16]
   22002:	61a5      	str	r5, [r4, #24]
   22004:	f000 f97c 	bl	22300 <memset>
   22008:	4b22      	ldr	r3, [pc, #136]	; (22094 <global_stdio_init.part.0+0xc4>)
   2200a:	6763      	str	r3, [r4, #116]	; 0x74
   2200c:	2208      	movs	r2, #8
   2200e:	4629      	mov	r1, r5
   22010:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   22014:	e9c4 4907 	strd	r4, r9, [r4, #28]
   22018:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   2201c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   22020:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   22024:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   22028:	6725      	str	r5, [r4, #112]	; 0x70
   2202a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   2202e:	62e6      	str	r6, [r4, #44]	; 0x2c
   22030:	f000 f966 	bl	22300 <memset>
   22034:	4b18      	ldr	r3, [pc, #96]	; (22098 <global_stdio_init.part.0+0xc8>)
   22036:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   2203a:	4629      	mov	r1, r5
   2203c:	f104 0368 	add.w	r3, r4, #104	; 0x68
   22040:	2208      	movs	r2, #8
   22042:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   22046:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   2204a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   2204e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   22052:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   22056:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   2205a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   2205e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   22062:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   22066:	f000 f94b 	bl	22300 <memset>
   2206a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   2206e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   22072:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   22076:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   2207a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2207e:	bf00      	nop
   22080:	2000c994 	.word	0x2000c994
   22084:	2000cacc 	.word	0x2000cacc
   22088:	00021f79 	.word	0x00021f79
   2208c:	00025c09 	.word	0x00025c09
   22090:	00025c29 	.word	0x00025c29
   22094:	00010009 	.word	0x00010009
   22098:	00020012 	.word	0x00020012
   2209c:	00025ba5 	.word	0x00025ba5
   220a0:	00025bc9 	.word	0x00025bc9

000220a4 <__sinit>:
   220a4:	b510      	push	{r4, lr}
   220a6:	4604      	mov	r4, r0
   220a8:	480a      	ldr	r0, [pc, #40]	; (220d4 <__sinit+0x30>)
   220aa:	f000 faeb 	bl	22684 <__retarget_lock_acquire_recursive>
   220ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   220b0:	b923      	cbnz	r3, 220bc <__sinit+0x18>
   220b2:	4b09      	ldr	r3, [pc, #36]	; (220d8 <__sinit+0x34>)
   220b4:	4a09      	ldr	r2, [pc, #36]	; (220dc <__sinit+0x38>)
   220b6:	681b      	ldr	r3, [r3, #0]
   220b8:	6362      	str	r2, [r4, #52]	; 0x34
   220ba:	b123      	cbz	r3, 220c6 <__sinit+0x22>
   220bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   220c0:	4804      	ldr	r0, [pc, #16]	; (220d4 <__sinit+0x30>)
   220c2:	f000 bae1 	b.w	22688 <__retarget_lock_release_recursive>
   220c6:	f7ff ff83 	bl	21fd0 <global_stdio_init.part.0>
   220ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   220ce:	4801      	ldr	r0, [pc, #4]	; (220d4 <__sinit+0x30>)
   220d0:	f000 bada 	b.w	22688 <__retarget_lock_release_recursive>
   220d4:	2000c95c 	.word	0x2000c95c
   220d8:	2000cacc 	.word	0x2000cacc
   220dc:	00021f91 	.word	0x00021f91

000220e0 <__sfp_lock_acquire>:
   220e0:	4801      	ldr	r0, [pc, #4]	; (220e8 <__sfp_lock_acquire+0x8>)
   220e2:	f000 bacf 	b.w	22684 <__retarget_lock_acquire_recursive>
   220e6:	bf00      	nop
   220e8:	2000c95c 	.word	0x2000c95c

000220ec <__sfp_lock_release>:
   220ec:	4801      	ldr	r0, [pc, #4]	; (220f4 <__sfp_lock_release+0x8>)
   220ee:	f000 bacb 	b.w	22688 <__retarget_lock_release_recursive>
   220f2:	bf00      	nop
   220f4:	2000c95c 	.word	0x2000c95c

000220f8 <_vdprintf_r>:
   220f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   220fa:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   220fe:	af04      	add	r7, sp, #16
   22100:	9300      	str	r3, [sp, #0]
   22102:	4613      	mov	r3, r2
   22104:	f44f 7200 	mov.w	r2, #512	; 0x200
   22108:	460e      	mov	r6, r1
   2210a:	9203      	str	r2, [sp, #12]
   2210c:	4639      	mov	r1, r7
   2210e:	aa03      	add	r2, sp, #12
   22110:	4605      	mov	r5, r0
   22112:	f000 f9bf 	bl	22494 <_vasnprintf_r>
   22116:	b188      	cbz	r0, 2213c <_vdprintf_r+0x44>
   22118:	4604      	mov	r4, r0
   2211a:	4602      	mov	r2, r0
   2211c:	9b03      	ldr	r3, [sp, #12]
   2211e:	4631      	mov	r1, r6
   22120:	4628      	mov	r0, r5
   22122:	f000 fa0d 	bl	22540 <_write_r>
   22126:	42bc      	cmp	r4, r7
   22128:	9003      	str	r0, [sp, #12]
   2212a:	d004      	beq.n	22136 <_vdprintf_r+0x3e>
   2212c:	4628      	mov	r0, r5
   2212e:	4621      	mov	r1, r4
   22130:	f000 fc08 	bl	22944 <_free_r>
   22134:	9803      	ldr	r0, [sp, #12]
   22136:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   2213a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2213c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22140:	e7f9      	b.n	22136 <_vdprintf_r+0x3e>
   22142:	bf00      	nop

00022144 <vdprintf>:
   22144:	b410      	push	{r4}
   22146:	4c05      	ldr	r4, [pc, #20]	; (2215c <vdprintf+0x18>)
   22148:	4684      	mov	ip, r0
   2214a:	4613      	mov	r3, r2
   2214c:	6820      	ldr	r0, [r4, #0]
   2214e:	f85d 4b04 	ldr.w	r4, [sp], #4
   22152:	460a      	mov	r2, r1
   22154:	4661      	mov	r1, ip
   22156:	f7ff bfcf 	b.w	220f8 <_vdprintf_r>
   2215a:	bf00      	nop
   2215c:	200099ec 	.word	0x200099ec

00022160 <_fwalk_sglue>:
   22160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22164:	4680      	mov	r8, r0
   22166:	460f      	mov	r7, r1
   22168:	4616      	mov	r6, r2
   2216a:	f04f 0900 	mov.w	r9, #0
   2216e:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   22172:	3d01      	subs	r5, #1
   22174:	d411      	bmi.n	2219a <_fwalk_sglue+0x3a>
   22176:	89a3      	ldrh	r3, [r4, #12]
   22178:	2b01      	cmp	r3, #1
   2217a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   2217e:	d908      	bls.n	22192 <_fwalk_sglue+0x32>
   22180:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   22184:	3301      	adds	r3, #1
   22186:	4621      	mov	r1, r4
   22188:	d003      	beq.n	22192 <_fwalk_sglue+0x32>
   2218a:	4640      	mov	r0, r8
   2218c:	47b8      	blx	r7
   2218e:	ea49 0900 	orr.w	r9, r9, r0
   22192:	1c6b      	adds	r3, r5, #1
   22194:	f104 0468 	add.w	r4, r4, #104	; 0x68
   22198:	d1ed      	bne.n	22176 <_fwalk_sglue+0x16>
   2219a:	6836      	ldr	r6, [r6, #0]
   2219c:	2e00      	cmp	r6, #0
   2219e:	d1e6      	bne.n	2216e <_fwalk_sglue+0xe>
   221a0:	4648      	mov	r0, r9
   221a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   221a6:	bf00      	nop

000221a8 <memcmp>:
   221a8:	2a03      	cmp	r2, #3
   221aa:	b570      	push	{r4, r5, r6, lr}
   221ac:	d914      	bls.n	221d8 <memcmp+0x30>
   221ae:	ea40 0301 	orr.w	r3, r0, r1
   221b2:	079b      	lsls	r3, r3, #30
   221b4:	d122      	bne.n	221fc <memcmp+0x54>
   221b6:	4604      	mov	r4, r0
   221b8:	460b      	mov	r3, r1
   221ba:	4619      	mov	r1, r3
   221bc:	4620      	mov	r0, r4
   221be:	680e      	ldr	r6, [r1, #0]
   221c0:	6805      	ldr	r5, [r0, #0]
   221c2:	42b5      	cmp	r5, r6
   221c4:	f104 0404 	add.w	r4, r4, #4
   221c8:	f103 0304 	add.w	r3, r3, #4
   221cc:	d116      	bne.n	221fc <memcmp+0x54>
   221ce:	3a04      	subs	r2, #4
   221d0:	2a03      	cmp	r2, #3
   221d2:	4620      	mov	r0, r4
   221d4:	4619      	mov	r1, r3
   221d6:	d8f0      	bhi.n	221ba <memcmp+0x12>
   221d8:	1e54      	subs	r4, r2, #1
   221da:	b19a      	cbz	r2, 22204 <memcmp+0x5c>
   221dc:	1e42      	subs	r2, r0, #1
   221de:	3901      	subs	r1, #1
   221e0:	e001      	b.n	221e6 <memcmp+0x3e>
   221e2:	18c3      	adds	r3, r0, r3
   221e4:	d00c      	beq.n	22200 <memcmp+0x58>
   221e6:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   221ea:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   221ee:	45e6      	cmp	lr, ip
   221f0:	eba4 0302 	sub.w	r3, r4, r2
   221f4:	d0f5      	beq.n	221e2 <memcmp+0x3a>
   221f6:	ebae 000c 	sub.w	r0, lr, ip
   221fa:	bd70      	pop	{r4, r5, r6, pc}
   221fc:	1e54      	subs	r4, r2, #1
   221fe:	e7ed      	b.n	221dc <memcmp+0x34>
   22200:	4618      	mov	r0, r3
   22202:	bd70      	pop	{r4, r5, r6, pc}
   22204:	4610      	mov	r0, r2
   22206:	bd70      	pop	{r4, r5, r6, pc}

00022208 <memmove>:
   22208:	4288      	cmp	r0, r1
   2220a:	d90d      	bls.n	22228 <memmove+0x20>
   2220c:	188b      	adds	r3, r1, r2
   2220e:	4283      	cmp	r3, r0
   22210:	d90a      	bls.n	22228 <memmove+0x20>
   22212:	eb00 0c02 	add.w	ip, r0, r2
   22216:	b1ba      	cbz	r2, 22248 <memmove+0x40>
   22218:	4662      	mov	r2, ip
   2221a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   2221e:	f802 cd01 	strb.w	ip, [r2, #-1]!
   22222:	4299      	cmp	r1, r3
   22224:	d1f9      	bne.n	2221a <memmove+0x12>
   22226:	4770      	bx	lr
   22228:	2a0f      	cmp	r2, #15
   2222a:	d80e      	bhi.n	2224a <memmove+0x42>
   2222c:	4603      	mov	r3, r0
   2222e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   22232:	b14a      	cbz	r2, 22248 <memmove+0x40>
   22234:	f10c 0c01 	add.w	ip, ip, #1
   22238:	3b01      	subs	r3, #1
   2223a:	448c      	add	ip, r1
   2223c:	f811 2b01 	ldrb.w	r2, [r1], #1
   22240:	f803 2f01 	strb.w	r2, [r3, #1]!
   22244:	4561      	cmp	r1, ip
   22246:	d1f9      	bne.n	2223c <memmove+0x34>
   22248:	4770      	bx	lr
   2224a:	ea40 0301 	orr.w	r3, r0, r1
   2224e:	079b      	lsls	r3, r3, #30
   22250:	d150      	bne.n	222f4 <memmove+0xec>
   22252:	f1a2 0310 	sub.w	r3, r2, #16
   22256:	b570      	push	{r4, r5, r6, lr}
   22258:	f101 0c20 	add.w	ip, r1, #32
   2225c:	f023 050f 	bic.w	r5, r3, #15
   22260:	f101 0e10 	add.w	lr, r1, #16
   22264:	f100 0410 	add.w	r4, r0, #16
   22268:	44ac      	add	ip, r5
   2226a:	091b      	lsrs	r3, r3, #4
   2226c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   22270:	f844 5c10 	str.w	r5, [r4, #-16]
   22274:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   22278:	f844 5c0c 	str.w	r5, [r4, #-12]
   2227c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   22280:	f844 5c08 	str.w	r5, [r4, #-8]
   22284:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   22288:	f844 5c04 	str.w	r5, [r4, #-4]
   2228c:	f10e 0e10 	add.w	lr, lr, #16
   22290:	45e6      	cmp	lr, ip
   22292:	f104 0410 	add.w	r4, r4, #16
   22296:	d1e9      	bne.n	2226c <memmove+0x64>
   22298:	3301      	adds	r3, #1
   2229a:	f012 0f0c 	tst.w	r2, #12
   2229e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   222a2:	f002 040f 	and.w	r4, r2, #15
   222a6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   222aa:	d027      	beq.n	222fc <memmove+0xf4>
   222ac:	3c04      	subs	r4, #4
   222ae:	f024 0603 	bic.w	r6, r4, #3
   222b2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   222b6:	441e      	add	r6, r3
   222b8:	1f1c      	subs	r4, r3, #4
   222ba:	468e      	mov	lr, r1
   222bc:	f85e 5b04 	ldr.w	r5, [lr], #4
   222c0:	f844 5f04 	str.w	r5, [r4, #4]!
   222c4:	42b4      	cmp	r4, r6
   222c6:	d1f9      	bne.n	222bc <memmove+0xb4>
   222c8:	f10c 0401 	add.w	r4, ip, #1
   222cc:	f002 0203 	and.w	r2, r2, #3
   222d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   222d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   222d8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   222dc:	b14a      	cbz	r2, 222f2 <memmove+0xea>
   222de:	f10c 0c01 	add.w	ip, ip, #1
   222e2:	3b01      	subs	r3, #1
   222e4:	448c      	add	ip, r1
   222e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   222ea:	f803 2f01 	strb.w	r2, [r3, #1]!
   222ee:	4561      	cmp	r1, ip
   222f0:	d1f9      	bne.n	222e6 <memmove+0xde>
   222f2:	bd70      	pop	{r4, r5, r6, pc}
   222f4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   222f8:	4603      	mov	r3, r0
   222fa:	e79b      	b.n	22234 <memmove+0x2c>
   222fc:	4622      	mov	r2, r4
   222fe:	e7eb      	b.n	222d8 <memmove+0xd0>

00022300 <memset>:
   22300:	0783      	lsls	r3, r0, #30
   22302:	b530      	push	{r4, r5, lr}
   22304:	d048      	beq.n	22398 <memset+0x98>
   22306:	1e54      	subs	r4, r2, #1
   22308:	2a00      	cmp	r2, #0
   2230a:	d03f      	beq.n	2238c <memset+0x8c>
   2230c:	b2ca      	uxtb	r2, r1
   2230e:	4603      	mov	r3, r0
   22310:	e001      	b.n	22316 <memset+0x16>
   22312:	3c01      	subs	r4, #1
   22314:	d33a      	bcc.n	2238c <memset+0x8c>
   22316:	f803 2b01 	strb.w	r2, [r3], #1
   2231a:	079d      	lsls	r5, r3, #30
   2231c:	d1f9      	bne.n	22312 <memset+0x12>
   2231e:	2c03      	cmp	r4, #3
   22320:	d92d      	bls.n	2237e <memset+0x7e>
   22322:	b2cd      	uxtb	r5, r1
   22324:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   22328:	2c0f      	cmp	r4, #15
   2232a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2232e:	d936      	bls.n	2239e <memset+0x9e>
   22330:	f1a4 0210 	sub.w	r2, r4, #16
   22334:	f022 0c0f 	bic.w	ip, r2, #15
   22338:	f103 0e20 	add.w	lr, r3, #32
   2233c:	44e6      	add	lr, ip
   2233e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   22342:	f103 0210 	add.w	r2, r3, #16
   22346:	e942 5504 	strd	r5, r5, [r2, #-16]
   2234a:	e942 5502 	strd	r5, r5, [r2, #-8]
   2234e:	3210      	adds	r2, #16
   22350:	4572      	cmp	r2, lr
   22352:	d1f8      	bne.n	22346 <memset+0x46>
   22354:	f10c 0201 	add.w	r2, ip, #1
   22358:	f014 0f0c 	tst.w	r4, #12
   2235c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   22360:	f004 0c0f 	and.w	ip, r4, #15
   22364:	d013      	beq.n	2238e <memset+0x8e>
   22366:	f1ac 0304 	sub.w	r3, ip, #4
   2236a:	f023 0303 	bic.w	r3, r3, #3
   2236e:	3304      	adds	r3, #4
   22370:	4413      	add	r3, r2
   22372:	f842 5b04 	str.w	r5, [r2], #4
   22376:	4293      	cmp	r3, r2
   22378:	d1fb      	bne.n	22372 <memset+0x72>
   2237a:	f00c 0403 	and.w	r4, ip, #3
   2237e:	b12c      	cbz	r4, 2238c <memset+0x8c>
   22380:	b2c9      	uxtb	r1, r1
   22382:	441c      	add	r4, r3
   22384:	f803 1b01 	strb.w	r1, [r3], #1
   22388:	429c      	cmp	r4, r3
   2238a:	d1fb      	bne.n	22384 <memset+0x84>
   2238c:	bd30      	pop	{r4, r5, pc}
   2238e:	4664      	mov	r4, ip
   22390:	4613      	mov	r3, r2
   22392:	2c00      	cmp	r4, #0
   22394:	d1f4      	bne.n	22380 <memset+0x80>
   22396:	e7f9      	b.n	2238c <memset+0x8c>
   22398:	4603      	mov	r3, r0
   2239a:	4614      	mov	r4, r2
   2239c:	e7bf      	b.n	2231e <memset+0x1e>
   2239e:	461a      	mov	r2, r3
   223a0:	46a4      	mov	ip, r4
   223a2:	e7e0      	b.n	22366 <memset+0x66>

000223a4 <strncmp>:
   223a4:	2a00      	cmp	r2, #0
   223a6:	d03e      	beq.n	22426 <strncmp+0x82>
   223a8:	ea40 0301 	orr.w	r3, r0, r1
   223ac:	079b      	lsls	r3, r3, #30
   223ae:	b530      	push	{r4, r5, lr}
   223b0:	4684      	mov	ip, r0
   223b2:	d12f      	bne.n	22414 <strncmp+0x70>
   223b4:	2a03      	cmp	r2, #3
   223b6:	d92d      	bls.n	22414 <strncmp+0x70>
   223b8:	460b      	mov	r3, r1
   223ba:	e008      	b.n	223ce <strncmp+0x2a>
   223bc:	3a04      	subs	r2, #4
   223be:	4684      	mov	ip, r0
   223c0:	4619      	mov	r1, r3
   223c2:	d025      	beq.n	22410 <strncmp+0x6c>
   223c4:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   223c8:	d122      	bne.n	22410 <strncmp+0x6c>
   223ca:	2a03      	cmp	r2, #3
   223cc:	d922      	bls.n	22414 <strncmp+0x70>
   223ce:	6804      	ldr	r4, [r0, #0]
   223d0:	4619      	mov	r1, r3
   223d2:	f853 5b04 	ldr.w	r5, [r3], #4
   223d6:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   223da:	42ac      	cmp	r4, r5
   223dc:	4684      	mov	ip, r0
   223de:	ea2e 0e04 	bic.w	lr, lr, r4
   223e2:	f100 0004 	add.w	r0, r0, #4
   223e6:	d0e9      	beq.n	223bc <strncmp+0x18>
   223e8:	f89c 0000 	ldrb.w	r0, [ip]
   223ec:	780c      	ldrb	r4, [r1, #0]
   223ee:	42a0      	cmp	r0, r4
   223f0:	d11b      	bne.n	2242a <strncmp+0x86>
   223f2:	46e6      	mov	lr, ip
   223f4:	b168      	cbz	r0, 22412 <strncmp+0x6e>
   223f6:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   223fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   223fe:	eba2 030e 	sub.w	r3, r2, lr
   22402:	42a0      	cmp	r0, r4
   22404:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   22408:	d10f      	bne.n	2242a <strncmp+0x86>
   2240a:	eb1c 0303 	adds.w	r3, ip, r3
   2240e:	d1f1      	bne.n	223f4 <strncmp+0x50>
   22410:	2000      	movs	r0, #0
   22412:	bd30      	pop	{r4, r5, pc}
   22414:	f89c 0000 	ldrb.w	r0, [ip]
   22418:	780c      	ldrb	r4, [r1, #0]
   2241a:	4284      	cmp	r4, r0
   2241c:	d105      	bne.n	2242a <strncmp+0x86>
   2241e:	2a01      	cmp	r2, #1
   22420:	d0f6      	beq.n	22410 <strncmp+0x6c>
   22422:	46e6      	mov	lr, ip
   22424:	e7e6      	b.n	223f4 <strncmp+0x50>
   22426:	4610      	mov	r0, r2
   22428:	4770      	bx	lr
   2242a:	1b00      	subs	r0, r0, r4
   2242c:	bd30      	pop	{r4, r5, pc}
   2242e:	bf00      	nop

00022430 <strncpy>:
   22430:	ea40 0301 	orr.w	r3, r0, r1
   22434:	079b      	lsls	r3, r3, #30
   22436:	b530      	push	{r4, r5, lr}
   22438:	d101      	bne.n	2243e <strncpy+0xe>
   2243a:	2a03      	cmp	r2, #3
   2243c:	d80f      	bhi.n	2245e <strncpy+0x2e>
   2243e:	4684      	mov	ip, r0
   22440:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   22444:	e007      	b.n	22456 <strncpy+0x26>
   22446:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   2244a:	f803 1b01 	strb.w	r1, [r3], #1
   2244e:	1e54      	subs	r4, r2, #1
   22450:	b1c1      	cbz	r1, 22484 <strncpy+0x54>
   22452:	469c      	mov	ip, r3
   22454:	4622      	mov	r2, r4
   22456:	4663      	mov	r3, ip
   22458:	2a00      	cmp	r2, #0
   2245a:	d1f4      	bne.n	22446 <strncpy+0x16>
   2245c:	bd30      	pop	{r4, r5, pc}
   2245e:	460b      	mov	r3, r1
   22460:	4684      	mov	ip, r0
   22462:	4619      	mov	r1, r3
   22464:	f853 5b04 	ldr.w	r5, [r3], #4
   22468:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2246c:	ea24 0405 	bic.w	r4, r4, r5
   22470:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   22474:	d1e4      	bne.n	22440 <strncpy+0x10>
   22476:	3a04      	subs	r2, #4
   22478:	2a03      	cmp	r2, #3
   2247a:	f84c 5b04 	str.w	r5, [ip], #4
   2247e:	4619      	mov	r1, r3
   22480:	d8ef      	bhi.n	22462 <strncpy+0x32>
   22482:	e7dd      	b.n	22440 <strncpy+0x10>
   22484:	4494      	add	ip, r2
   22486:	2c00      	cmp	r4, #0
   22488:	d0e8      	beq.n	2245c <strncpy+0x2c>
   2248a:	f803 1b01 	strb.w	r1, [r3], #1
   2248e:	4563      	cmp	r3, ip
   22490:	d1fb      	bne.n	2248a <strncpy+0x5a>
   22492:	bd30      	pop	{r4, r5, pc}

00022494 <_vasnprintf_r>:
   22494:	b530      	push	{r4, r5, lr}
   22496:	6814      	ldr	r4, [r2, #0]
   22498:	4615      	mov	r5, r2
   2249a:	b09b      	sub	sp, #108	; 0x6c
   2249c:	461a      	mov	r2, r3
   2249e:	b109      	cbz	r1, 224a4 <_vasnprintf_r+0x10>
   224a0:	2c00      	cmp	r4, #0
   224a2:	d119      	bne.n	224d8 <_vasnprintf_r+0x44>
   224a4:	2100      	movs	r1, #0
   224a6:	f44f 7322 	mov.w	r3, #648	; 0x288
   224aa:	f8ad 300c 	strh.w	r3, [sp, #12]
   224ae:	9100      	str	r1, [sp, #0]
   224b0:	9104      	str	r1, [sp, #16]
   224b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   224b6:	9102      	str	r1, [sp, #8]
   224b8:	9105      	str	r1, [sp, #20]
   224ba:	f8ad 300e 	strh.w	r3, [sp, #14]
   224be:	4669      	mov	r1, sp
   224c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   224c2:	f000 ff6d 	bl	233a0 <_svfprintf_r>
   224c6:	2800      	cmp	r0, #0
   224c8:	db13      	blt.n	224f2 <_vasnprintf_r+0x5e>
   224ca:	9b00      	ldr	r3, [sp, #0]
   224cc:	6028      	str	r0, [r5, #0]
   224ce:	2200      	movs	r2, #0
   224d0:	701a      	strb	r2, [r3, #0]
   224d2:	9804      	ldr	r0, [sp, #16]
   224d4:	b01b      	add	sp, #108	; 0x6c
   224d6:	bd30      	pop	{r4, r5, pc}
   224d8:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   224dc:	9100      	str	r1, [sp, #0]
   224de:	9104      	str	r1, [sp, #16]
   224e0:	f8ad 300c 	strh.w	r3, [sp, #12]
   224e4:	4621      	mov	r1, r4
   224e6:	dae4      	bge.n	224b2 <_vasnprintf_r+0x1e>
   224e8:	238b      	movs	r3, #139	; 0x8b
   224ea:	6003      	str	r3, [r0, #0]
   224ec:	2000      	movs	r0, #0
   224ee:	b01b      	add	sp, #108	; 0x6c
   224f0:	bd30      	pop	{r4, r5, pc}
   224f2:	2000      	movs	r0, #0
   224f4:	e7ee      	b.n	224d4 <_vasnprintf_r+0x40>
   224f6:	bf00      	nop

000224f8 <__locale_mb_cur_max>:
   224f8:	4b01      	ldr	r3, [pc, #4]	; (22500 <__locale_mb_cur_max+0x8>)
   224fa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   224fe:	4770      	bx	lr
   22500:	20009464 	.word	0x20009464

00022504 <__cxa_atexit>:
   22504:	4613      	mov	r3, r2
   22506:	460a      	mov	r2, r1
   22508:	4601      	mov	r1, r0
   2250a:	2002      	movs	r0, #2
   2250c:	f000 b986 	b.w	2281c <__register_exitproc>

00022510 <fcvtf>:
   22510:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   22514:	2300      	movs	r3, #0
   22516:	f003 bbdb 	b.w	25cd0 <fcvtbuf>
   2251a:	bf00      	nop

0002251c <_sbrk_r>:
   2251c:	b538      	push	{r3, r4, r5, lr}
   2251e:	4d07      	ldr	r5, [pc, #28]	; (2253c <_sbrk_r+0x20>)
   22520:	2200      	movs	r2, #0
   22522:	4604      	mov	r4, r0
   22524:	4608      	mov	r0, r1
   22526:	602a      	str	r2, [r5, #0]
   22528:	f7f9 ff94 	bl	1c454 <_sbrk>
   2252c:	1c43      	adds	r3, r0, #1
   2252e:	d000      	beq.n	22532 <_sbrk_r+0x16>
   22530:	bd38      	pop	{r3, r4, r5, pc}
   22532:	682b      	ldr	r3, [r5, #0]
   22534:	2b00      	cmp	r3, #0
   22536:	d0fb      	beq.n	22530 <_sbrk_r+0x14>
   22538:	6023      	str	r3, [r4, #0]
   2253a:	bd38      	pop	{r3, r4, r5, pc}
   2253c:	200106f0 	.word	0x200106f0

00022540 <_write_r>:
   22540:	b538      	push	{r3, r4, r5, lr}
   22542:	460c      	mov	r4, r1
   22544:	4d08      	ldr	r5, [pc, #32]	; (22568 <_write_r+0x28>)
   22546:	4684      	mov	ip, r0
   22548:	4611      	mov	r1, r2
   2254a:	4620      	mov	r0, r4
   2254c:	461a      	mov	r2, r3
   2254e:	2300      	movs	r3, #0
   22550:	602b      	str	r3, [r5, #0]
   22552:	4664      	mov	r4, ip
   22554:	f7f8 fbbc 	bl	1acd0 <_write>
   22558:	1c43      	adds	r3, r0, #1
   2255a:	d000      	beq.n	2255e <_write_r+0x1e>
   2255c:	bd38      	pop	{r3, r4, r5, pc}
   2255e:	682b      	ldr	r3, [r5, #0]
   22560:	2b00      	cmp	r3, #0
   22562:	d0fb      	beq.n	2255c <_write_r+0x1c>
   22564:	6023      	str	r3, [r4, #0]
   22566:	bd38      	pop	{r3, r4, r5, pc}
   22568:	200106f0 	.word	0x200106f0

0002256c <__errno>:
   2256c:	4b01      	ldr	r3, [pc, #4]	; (22574 <__errno+0x8>)
   2256e:	6818      	ldr	r0, [r3, #0]
   22570:	4770      	bx	lr
   22572:	bf00      	nop
   22574:	200099ec 	.word	0x200099ec

00022578 <strcpy>:
   22578:	ea80 0201 	eor.w	r2, r0, r1
   2257c:	4684      	mov	ip, r0
   2257e:	f012 0f03 	tst.w	r2, #3
   22582:	d14f      	bne.n	22624 <strcpy+0xac>
   22584:	f011 0f03 	tst.w	r1, #3
   22588:	d132      	bne.n	225f0 <strcpy+0x78>
   2258a:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2258e:	f011 0f04 	tst.w	r1, #4
   22592:	f851 3b04 	ldr.w	r3, [r1], #4
   22596:	d00b      	beq.n	225b0 <strcpy+0x38>
   22598:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2259c:	439a      	bics	r2, r3
   2259e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   225a2:	bf04      	itt	eq
   225a4:	f84c 3b04 	streq.w	r3, [ip], #4
   225a8:	f851 3b04 	ldreq.w	r3, [r1], #4
   225ac:	d116      	bne.n	225dc <strcpy+0x64>
   225ae:	bf00      	nop
   225b0:	f851 4b04 	ldr.w	r4, [r1], #4
   225b4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   225b8:	439a      	bics	r2, r3
   225ba:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   225be:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   225c2:	d10b      	bne.n	225dc <strcpy+0x64>
   225c4:	f84c 3b04 	str.w	r3, [ip], #4
   225c8:	43a2      	bics	r2, r4
   225ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   225ce:	bf04      	itt	eq
   225d0:	f851 3b04 	ldreq.w	r3, [r1], #4
   225d4:	f84c 4b04 	streq.w	r4, [ip], #4
   225d8:	d0ea      	beq.n	225b0 <strcpy+0x38>
   225da:	4623      	mov	r3, r4
   225dc:	f80c 3b01 	strb.w	r3, [ip], #1
   225e0:	f013 0fff 	tst.w	r3, #255	; 0xff
   225e4:	ea4f 2333 	mov.w	r3, r3, ror #8
   225e8:	d1f8      	bne.n	225dc <strcpy+0x64>
   225ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   225ee:	4770      	bx	lr
   225f0:	f011 0f01 	tst.w	r1, #1
   225f4:	d006      	beq.n	22604 <strcpy+0x8c>
   225f6:	f811 2b01 	ldrb.w	r2, [r1], #1
   225fa:	f80c 2b01 	strb.w	r2, [ip], #1
   225fe:	2a00      	cmp	r2, #0
   22600:	bf08      	it	eq
   22602:	4770      	bxeq	lr
   22604:	f011 0f02 	tst.w	r1, #2
   22608:	d0bf      	beq.n	2258a <strcpy+0x12>
   2260a:	f831 2b02 	ldrh.w	r2, [r1], #2
   2260e:	f012 0fff 	tst.w	r2, #255	; 0xff
   22612:	bf16      	itet	ne
   22614:	f82c 2b02 	strhne.w	r2, [ip], #2
   22618:	f88c 2000 	strbeq.w	r2, [ip]
   2261c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   22620:	d1b3      	bne.n	2258a <strcpy+0x12>
   22622:	4770      	bx	lr
   22624:	f811 2b01 	ldrb.w	r2, [r1], #1
   22628:	f80c 2b01 	strb.w	r2, [ip], #1
   2262c:	2a00      	cmp	r2, #0
   2262e:	d1f9      	bne.n	22624 <strcpy+0xac>
   22630:	4770      	bx	lr
   22632:	bf00      	nop

00022634 <__libc_init_array>:
   22634:	b570      	push	{r4, r5, r6, lr}
   22636:	4e0d      	ldr	r6, [pc, #52]	; (2266c <__libc_init_array+0x38>)
   22638:	4d0d      	ldr	r5, [pc, #52]	; (22670 <__libc_init_array+0x3c>)
   2263a:	1b76      	subs	r6, r6, r5
   2263c:	10b6      	asrs	r6, r6, #2
   2263e:	d006      	beq.n	2264e <__libc_init_array+0x1a>
   22640:	2400      	movs	r4, #0
   22642:	f855 3b04 	ldr.w	r3, [r5], #4
   22646:	3401      	adds	r4, #1
   22648:	4798      	blx	r3
   2264a:	42a6      	cmp	r6, r4
   2264c:	d1f9      	bne.n	22642 <__libc_init_array+0xe>
   2264e:	4e09      	ldr	r6, [pc, #36]	; (22674 <__libc_init_array+0x40>)
   22650:	4d09      	ldr	r5, [pc, #36]	; (22678 <__libc_init_array+0x44>)
   22652:	1b76      	subs	r6, r6, r5
   22654:	f006 f864 	bl	28720 <___init_veneer>
   22658:	10b6      	asrs	r6, r6, #2
   2265a:	d006      	beq.n	2266a <__libc_init_array+0x36>
   2265c:	2400      	movs	r4, #0
   2265e:	f855 3b04 	ldr.w	r3, [r5], #4
   22662:	3401      	adds	r4, #1
   22664:	4798      	blx	r3
   22666:	42a6      	cmp	r6, r4
   22668:	d1f9      	bne.n	2265e <__libc_init_array+0x2a>
   2266a:	bd70      	pop	{r4, r5, r6, pc}
   2266c:	600020b0 	.word	0x600020b0
   22670:	600020b0 	.word	0x600020b0
   22674:	6000212c 	.word	0x6000212c
   22678:	600020b0 	.word	0x600020b0

0002267c <__retarget_lock_init_recursive>:
   2267c:	4770      	bx	lr
   2267e:	bf00      	nop

00022680 <__retarget_lock_close_recursive>:
   22680:	4770      	bx	lr
   22682:	bf00      	nop

00022684 <__retarget_lock_acquire_recursive>:
   22684:	4770      	bx	lr
   22686:	bf00      	nop

00022688 <__retarget_lock_release_recursive>:
   22688:	4770      	bx	lr
   2268a:	bf00      	nop
   2268c:	0000      	movs	r0, r0
	...

00022690 <memchr>:
   22690:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   22694:	2a10      	cmp	r2, #16
   22696:	db2b      	blt.n	226f0 <memchr+0x60>
   22698:	f010 0f07 	tst.w	r0, #7
   2269c:	d008      	beq.n	226b0 <memchr+0x20>
   2269e:	f810 3b01 	ldrb.w	r3, [r0], #1
   226a2:	3a01      	subs	r2, #1
   226a4:	428b      	cmp	r3, r1
   226a6:	d02d      	beq.n	22704 <memchr+0x74>
   226a8:	f010 0f07 	tst.w	r0, #7
   226ac:	b342      	cbz	r2, 22700 <memchr+0x70>
   226ae:	d1f6      	bne.n	2269e <memchr+0xe>
   226b0:	b4f0      	push	{r4, r5, r6, r7}
   226b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   226b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   226ba:	f022 0407 	bic.w	r4, r2, #7
   226be:	f07f 0700 	mvns.w	r7, #0
   226c2:	2300      	movs	r3, #0
   226c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   226c8:	3c08      	subs	r4, #8
   226ca:	ea85 0501 	eor.w	r5, r5, r1
   226ce:	ea86 0601 	eor.w	r6, r6, r1
   226d2:	fa85 f547 	uadd8	r5, r5, r7
   226d6:	faa3 f587 	sel	r5, r3, r7
   226da:	fa86 f647 	uadd8	r6, r6, r7
   226de:	faa5 f687 	sel	r6, r5, r7
   226e2:	b98e      	cbnz	r6, 22708 <memchr+0x78>
   226e4:	d1ee      	bne.n	226c4 <memchr+0x34>
   226e6:	bcf0      	pop	{r4, r5, r6, r7}
   226e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   226ec:	f002 0207 	and.w	r2, r2, #7
   226f0:	b132      	cbz	r2, 22700 <memchr+0x70>
   226f2:	f810 3b01 	ldrb.w	r3, [r0], #1
   226f6:	3a01      	subs	r2, #1
   226f8:	ea83 0301 	eor.w	r3, r3, r1
   226fc:	b113      	cbz	r3, 22704 <memchr+0x74>
   226fe:	d1f8      	bne.n	226f2 <memchr+0x62>
   22700:	2000      	movs	r0, #0
   22702:	4770      	bx	lr
   22704:	3801      	subs	r0, #1
   22706:	4770      	bx	lr
   22708:	2d00      	cmp	r5, #0
   2270a:	bf06      	itte	eq
   2270c:	4635      	moveq	r5, r6
   2270e:	3803      	subeq	r0, #3
   22710:	3807      	subne	r0, #7
   22712:	f015 0f01 	tst.w	r5, #1
   22716:	d107      	bne.n	22728 <memchr+0x98>
   22718:	3001      	adds	r0, #1
   2271a:	f415 7f80 	tst.w	r5, #256	; 0x100
   2271e:	bf02      	ittt	eq
   22720:	3001      	addeq	r0, #1
   22722:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   22726:	3001      	addeq	r0, #1
   22728:	bcf0      	pop	{r4, r5, r6, r7}
   2272a:	3801      	subs	r0, #1
   2272c:	4770      	bx	lr
   2272e:	bf00      	nop
	...

00022740 <strlen>:
   22740:	f890 f000 	pld	[r0]
   22744:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   22748:	f020 0107 	bic.w	r1, r0, #7
   2274c:	f06f 0c00 	mvn.w	ip, #0
   22750:	f010 0407 	ands.w	r4, r0, #7
   22754:	f891 f020 	pld	[r1, #32]
   22758:	f040 8049 	bne.w	227ee <strlen+0xae>
   2275c:	f04f 0400 	mov.w	r4, #0
   22760:	f06f 0007 	mvn.w	r0, #7
   22764:	e9d1 2300 	ldrd	r2, r3, [r1]
   22768:	f891 f040 	pld	[r1, #64]	; 0x40
   2276c:	f100 0008 	add.w	r0, r0, #8
   22770:	fa82 f24c 	uadd8	r2, r2, ip
   22774:	faa4 f28c 	sel	r2, r4, ip
   22778:	fa83 f34c 	uadd8	r3, r3, ip
   2277c:	faa2 f38c 	sel	r3, r2, ip
   22780:	bb4b      	cbnz	r3, 227d6 <strlen+0x96>
   22782:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   22786:	fa82 f24c 	uadd8	r2, r2, ip
   2278a:	f100 0008 	add.w	r0, r0, #8
   2278e:	faa4 f28c 	sel	r2, r4, ip
   22792:	fa83 f34c 	uadd8	r3, r3, ip
   22796:	faa2 f38c 	sel	r3, r2, ip
   2279a:	b9e3      	cbnz	r3, 227d6 <strlen+0x96>
   2279c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   227a0:	fa82 f24c 	uadd8	r2, r2, ip
   227a4:	f100 0008 	add.w	r0, r0, #8
   227a8:	faa4 f28c 	sel	r2, r4, ip
   227ac:	fa83 f34c 	uadd8	r3, r3, ip
   227b0:	faa2 f38c 	sel	r3, r2, ip
   227b4:	b97b      	cbnz	r3, 227d6 <strlen+0x96>
   227b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   227ba:	f101 0120 	add.w	r1, r1, #32
   227be:	fa82 f24c 	uadd8	r2, r2, ip
   227c2:	f100 0008 	add.w	r0, r0, #8
   227c6:	faa4 f28c 	sel	r2, r4, ip
   227ca:	fa83 f34c 	uadd8	r3, r3, ip
   227ce:	faa2 f38c 	sel	r3, r2, ip
   227d2:	2b00      	cmp	r3, #0
   227d4:	d0c6      	beq.n	22764 <strlen+0x24>
   227d6:	2a00      	cmp	r2, #0
   227d8:	bf04      	itt	eq
   227da:	3004      	addeq	r0, #4
   227dc:	461a      	moveq	r2, r3
   227de:	ba12      	rev	r2, r2
   227e0:	fab2 f282 	clz	r2, r2
   227e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   227e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   227ec:	4770      	bx	lr
   227ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   227f2:	f004 0503 	and.w	r5, r4, #3
   227f6:	f1c4 0000 	rsb	r0, r4, #0
   227fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   227fe:	f014 0f04 	tst.w	r4, #4
   22802:	f891 f040 	pld	[r1, #64]	; 0x40
   22806:	fa0c f505 	lsl.w	r5, ip, r5
   2280a:	ea62 0205 	orn	r2, r2, r5
   2280e:	bf1c      	itt	ne
   22810:	ea63 0305 	ornne	r3, r3, r5
   22814:	4662      	movne	r2, ip
   22816:	f04f 0400 	mov.w	r4, #0
   2281a:	e7a9      	b.n	22770 <strlen+0x30>

0002281c <__register_exitproc>:
   2281c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22820:	f8df a07c 	ldr.w	sl, [pc, #124]	; 228a0 <__register_exitproc+0x84>
   22824:	4606      	mov	r6, r0
   22826:	f8da 0000 	ldr.w	r0, [sl]
   2282a:	4698      	mov	r8, r3
   2282c:	460f      	mov	r7, r1
   2282e:	4691      	mov	r9, r2
   22830:	f7ff ff28 	bl	22684 <__retarget_lock_acquire_recursive>
   22834:	4b18      	ldr	r3, [pc, #96]	; (22898 <__register_exitproc+0x7c>)
   22836:	681c      	ldr	r4, [r3, #0]
   22838:	b324      	cbz	r4, 22884 <__register_exitproc+0x68>
   2283a:	6865      	ldr	r5, [r4, #4]
   2283c:	2d1f      	cmp	r5, #31
   2283e:	dc24      	bgt.n	2288a <__register_exitproc+0x6e>
   22840:	b95e      	cbnz	r6, 2285a <__register_exitproc+0x3e>
   22842:	1c6b      	adds	r3, r5, #1
   22844:	3502      	adds	r5, #2
   22846:	f8da 0000 	ldr.w	r0, [sl]
   2284a:	6063      	str	r3, [r4, #4]
   2284c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   22850:	f7ff ff1a 	bl	22688 <__retarget_lock_release_recursive>
   22854:	2000      	movs	r0, #0
   22856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2285a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   2285e:	2301      	movs	r3, #1
   22860:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22864:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   22868:	40ab      	lsls	r3, r5
   2286a:	431a      	orrs	r2, r3
   2286c:	2e02      	cmp	r6, #2
   2286e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   22872:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   22876:	d1e4      	bne.n	22842 <__register_exitproc+0x26>
   22878:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   2287c:	431a      	orrs	r2, r3
   2287e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   22882:	e7de      	b.n	22842 <__register_exitproc+0x26>
   22884:	4c05      	ldr	r4, [pc, #20]	; (2289c <__register_exitproc+0x80>)
   22886:	601c      	str	r4, [r3, #0]
   22888:	e7d7      	b.n	2283a <__register_exitproc+0x1e>
   2288a:	f8da 0000 	ldr.w	r0, [sl]
   2288e:	f7ff fefb 	bl	22688 <__retarget_lock_release_recursive>
   22892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22896:	e7de      	b.n	22856 <__register_exitproc+0x3a>
   22898:	2000c7c0 	.word	0x2000c7c0
   2289c:	2000c7c4 	.word	0x2000c7c4
   228a0:	20009458 	.word	0x20009458

000228a4 <_malloc_trim_r>:
   228a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228a6:	4f24      	ldr	r7, [pc, #144]	; (22938 <_malloc_trim_r+0x94>)
   228a8:	460c      	mov	r4, r1
   228aa:	4606      	mov	r6, r0
   228ac:	f7fe f8d6 	bl	20a5c <__malloc_lock>
   228b0:	68bb      	ldr	r3, [r7, #8]
   228b2:	685d      	ldr	r5, [r3, #4]
   228b4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   228b8:	310f      	adds	r1, #15
   228ba:	f025 0503 	bic.w	r5, r5, #3
   228be:	194b      	adds	r3, r1, r5
   228c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   228c4:	f023 030f 	bic.w	r3, r3, #15
   228c8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   228cc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   228d0:	db07      	blt.n	228e2 <_malloc_trim_r+0x3e>
   228d2:	2100      	movs	r1, #0
   228d4:	4630      	mov	r0, r6
   228d6:	f7ff fe21 	bl	2251c <_sbrk_r>
   228da:	68bb      	ldr	r3, [r7, #8]
   228dc:	442b      	add	r3, r5
   228de:	4298      	cmp	r0, r3
   228e0:	d004      	beq.n	228ec <_malloc_trim_r+0x48>
   228e2:	4630      	mov	r0, r6
   228e4:	f7fe f8c0 	bl	20a68 <__malloc_unlock>
   228e8:	2000      	movs	r0, #0
   228ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   228ec:	4261      	negs	r1, r4
   228ee:	4630      	mov	r0, r6
   228f0:	f7ff fe14 	bl	2251c <_sbrk_r>
   228f4:	3001      	adds	r0, #1
   228f6:	d00d      	beq.n	22914 <_malloc_trim_r+0x70>
   228f8:	4a10      	ldr	r2, [pc, #64]	; (2293c <_malloc_trim_r+0x98>)
   228fa:	68bb      	ldr	r3, [r7, #8]
   228fc:	1b2d      	subs	r5, r5, r4
   228fe:	f045 0501 	orr.w	r5, r5, #1
   22902:	605d      	str	r5, [r3, #4]
   22904:	6813      	ldr	r3, [r2, #0]
   22906:	4630      	mov	r0, r6
   22908:	1b1b      	subs	r3, r3, r4
   2290a:	6013      	str	r3, [r2, #0]
   2290c:	f7fe f8ac 	bl	20a68 <__malloc_unlock>
   22910:	2001      	movs	r0, #1
   22912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22914:	2100      	movs	r1, #0
   22916:	4630      	mov	r0, r6
   22918:	f7ff fe00 	bl	2251c <_sbrk_r>
   2291c:	68ba      	ldr	r2, [r7, #8]
   2291e:	1a83      	subs	r3, r0, r2
   22920:	2b0f      	cmp	r3, #15
   22922:	ddde      	ble.n	228e2 <_malloc_trim_r+0x3e>
   22924:	f043 0301 	orr.w	r3, r3, #1
   22928:	6053      	str	r3, [r2, #4]
   2292a:	4b05      	ldr	r3, [pc, #20]	; (22940 <_malloc_trim_r+0x9c>)
   2292c:	4903      	ldr	r1, [pc, #12]	; (2293c <_malloc_trim_r+0x98>)
   2292e:	681b      	ldr	r3, [r3, #0]
   22930:	1ac0      	subs	r0, r0, r3
   22932:	6008      	str	r0, [r1, #0]
   22934:	e7d5      	b.n	228e2 <_malloc_trim_r+0x3e>
   22936:	bf00      	nop
   22938:	200095d0 	.word	0x200095d0
   2293c:	2000c960 	.word	0x2000c960
   22940:	200099d8 	.word	0x200099d8

00022944 <_free_r>:
   22944:	2900      	cmp	r1, #0
   22946:	d061      	beq.n	22a0c <_free_r+0xc8>
   22948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2294a:	460c      	mov	r4, r1
   2294c:	4606      	mov	r6, r0
   2294e:	f7fe f885 	bl	20a5c <__malloc_lock>
   22952:	f854 2c04 	ldr.w	r2, [r4, #-4]
   22956:	4f7b      	ldr	r7, [pc, #492]	; (22b44 <_free_r+0x200>)
   22958:	f1a4 0508 	sub.w	r5, r4, #8
   2295c:	f022 0101 	bic.w	r1, r2, #1
   22960:	eb05 0c01 	add.w	ip, r5, r1
   22964:	68b8      	ldr	r0, [r7, #8]
   22966:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2296a:	4560      	cmp	r0, ip
   2296c:	f023 0303 	bic.w	r3, r3, #3
   22970:	f000 808b 	beq.w	22a8a <_free_r+0x146>
   22974:	07d2      	lsls	r2, r2, #31
   22976:	f8cc 3004 	str.w	r3, [ip, #4]
   2297a:	d432      	bmi.n	229e2 <_free_r+0x9e>
   2297c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   22980:	1aad      	subs	r5, r5, r2
   22982:	4411      	add	r1, r2
   22984:	68aa      	ldr	r2, [r5, #8]
   22986:	f107 0008 	add.w	r0, r7, #8
   2298a:	4282      	cmp	r2, r0
   2298c:	d06a      	beq.n	22a64 <_free_r+0x120>
   2298e:	eb0c 0403 	add.w	r4, ip, r3
   22992:	f8d4 e004 	ldr.w	lr, [r4, #4]
   22996:	68ec      	ldr	r4, [r5, #12]
   22998:	60d4      	str	r4, [r2, #12]
   2299a:	f01e 0f01 	tst.w	lr, #1
   2299e:	60a2      	str	r2, [r4, #8]
   229a0:	f000 8097 	beq.w	22ad2 <_free_r+0x18e>
   229a4:	f041 0301 	orr.w	r3, r1, #1
   229a8:	606b      	str	r3, [r5, #4]
   229aa:	f8cc 1000 	str.w	r1, [ip]
   229ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   229b2:	d235      	bcs.n	22a20 <_free_r+0xdc>
   229b4:	6878      	ldr	r0, [r7, #4]
   229b6:	08cb      	lsrs	r3, r1, #3
   229b8:	2201      	movs	r2, #1
   229ba:	0949      	lsrs	r1, r1, #5
   229bc:	3301      	adds	r3, #1
   229be:	408a      	lsls	r2, r1
   229c0:	4302      	orrs	r2, r0
   229c2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   229c6:	607a      	str	r2, [r7, #4]
   229c8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   229cc:	3a08      	subs	r2, #8
   229ce:	e9c5 1202 	strd	r1, r2, [r5, #8]
   229d2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   229d6:	60cd      	str	r5, [r1, #12]
   229d8:	4630      	mov	r0, r6
   229da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   229de:	f7fe b843 	b.w	20a68 <__malloc_unlock>
   229e2:	eb0c 0203 	add.w	r2, ip, r3
   229e6:	6852      	ldr	r2, [r2, #4]
   229e8:	07d0      	lsls	r0, r2, #31
   229ea:	d410      	bmi.n	22a0e <_free_r+0xca>
   229ec:	4419      	add	r1, r3
   229ee:	f107 0008 	add.w	r0, r7, #8
   229f2:	f8dc 3008 	ldr.w	r3, [ip, #8]
   229f6:	4283      	cmp	r3, r0
   229f8:	d073      	beq.n	22ae2 <_free_r+0x19e>
   229fa:	f8dc 200c 	ldr.w	r2, [ip, #12]
   229fe:	60da      	str	r2, [r3, #12]
   22a00:	6093      	str	r3, [r2, #8]
   22a02:	f041 0301 	orr.w	r3, r1, #1
   22a06:	606b      	str	r3, [r5, #4]
   22a08:	5069      	str	r1, [r5, r1]
   22a0a:	e7d0      	b.n	229ae <_free_r+0x6a>
   22a0c:	4770      	bx	lr
   22a0e:	f041 0301 	orr.w	r3, r1, #1
   22a12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   22a16:	f844 3c04 	str.w	r3, [r4, #-4]
   22a1a:	f8cc 1000 	str.w	r1, [ip]
   22a1e:	d3c9      	bcc.n	229b4 <_free_r+0x70>
   22a20:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   22a24:	ea4f 2351 	mov.w	r3, r1, lsr #9
   22a28:	d248      	bcs.n	22abc <_free_r+0x178>
   22a2a:	098b      	lsrs	r3, r1, #6
   22a2c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   22a30:	f103 0238 	add.w	r2, r3, #56	; 0x38
   22a34:	00c3      	lsls	r3, r0, #3
   22a36:	18f8      	adds	r0, r7, r3
   22a38:	58fb      	ldr	r3, [r7, r3]
   22a3a:	3808      	subs	r0, #8
   22a3c:	4298      	cmp	r0, r3
   22a3e:	d059      	beq.n	22af4 <_free_r+0x1b0>
   22a40:	685a      	ldr	r2, [r3, #4]
   22a42:	f022 0203 	bic.w	r2, r2, #3
   22a46:	428a      	cmp	r2, r1
   22a48:	d902      	bls.n	22a50 <_free_r+0x10c>
   22a4a:	689b      	ldr	r3, [r3, #8]
   22a4c:	4298      	cmp	r0, r3
   22a4e:	d1f7      	bne.n	22a40 <_free_r+0xfc>
   22a50:	68d8      	ldr	r0, [r3, #12]
   22a52:	e9c5 3002 	strd	r3, r0, [r5, #8]
   22a56:	6085      	str	r5, [r0, #8]
   22a58:	60dd      	str	r5, [r3, #12]
   22a5a:	4630      	mov	r0, r6
   22a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22a60:	f7fe b802 	b.w	20a68 <__malloc_unlock>
   22a64:	eb0c 0203 	add.w	r2, ip, r3
   22a68:	6852      	ldr	r2, [r2, #4]
   22a6a:	07d2      	lsls	r2, r2, #31
   22a6c:	d463      	bmi.n	22b36 <_free_r+0x1f2>
   22a6e:	440b      	add	r3, r1
   22a70:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   22a74:	60ca      	str	r2, [r1, #12]
   22a76:	6091      	str	r1, [r2, #8]
   22a78:	f043 0201 	orr.w	r2, r3, #1
   22a7c:	606a      	str	r2, [r5, #4]
   22a7e:	4630      	mov	r0, r6
   22a80:	50eb      	str	r3, [r5, r3]
   22a82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22a86:	f7fd bfef 	b.w	20a68 <__malloc_unlock>
   22a8a:	440b      	add	r3, r1
   22a8c:	07d1      	lsls	r1, r2, #31
   22a8e:	d407      	bmi.n	22aa0 <_free_r+0x15c>
   22a90:	f854 2c08 	ldr.w	r2, [r4, #-8]
   22a94:	1aad      	subs	r5, r5, r2
   22a96:	4413      	add	r3, r2
   22a98:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   22a9c:	60ca      	str	r2, [r1, #12]
   22a9e:	6091      	str	r1, [r2, #8]
   22aa0:	f043 0201 	orr.w	r2, r3, #1
   22aa4:	606a      	str	r2, [r5, #4]
   22aa6:	4a28      	ldr	r2, [pc, #160]	; (22b48 <_free_r+0x204>)
   22aa8:	60bd      	str	r5, [r7, #8]
   22aaa:	6812      	ldr	r2, [r2, #0]
   22aac:	429a      	cmp	r2, r3
   22aae:	d893      	bhi.n	229d8 <_free_r+0x94>
   22ab0:	4b26      	ldr	r3, [pc, #152]	; (22b4c <_free_r+0x208>)
   22ab2:	4630      	mov	r0, r6
   22ab4:	6819      	ldr	r1, [r3, #0]
   22ab6:	f7ff fef5 	bl	228a4 <_malloc_trim_r>
   22aba:	e78d      	b.n	229d8 <_free_r+0x94>
   22abc:	2b14      	cmp	r3, #20
   22abe:	d90a      	bls.n	22ad6 <_free_r+0x192>
   22ac0:	2b54      	cmp	r3, #84	; 0x54
   22ac2:	d81f      	bhi.n	22b04 <_free_r+0x1c0>
   22ac4:	0b0b      	lsrs	r3, r1, #12
   22ac6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   22aca:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   22ace:	00c3      	lsls	r3, r0, #3
   22ad0:	e7b1      	b.n	22a36 <_free_r+0xf2>
   22ad2:	4419      	add	r1, r3
   22ad4:	e78d      	b.n	229f2 <_free_r+0xae>
   22ad6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   22ada:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   22ade:	00c3      	lsls	r3, r0, #3
   22ae0:	e7a9      	b.n	22a36 <_free_r+0xf2>
   22ae2:	f041 0301 	orr.w	r3, r1, #1
   22ae6:	e9c7 5504 	strd	r5, r5, [r7, #16]
   22aea:	e9c5 0002 	strd	r0, r0, [r5, #8]
   22aee:	606b      	str	r3, [r5, #4]
   22af0:	5069      	str	r1, [r5, r1]
   22af2:	e771      	b.n	229d8 <_free_r+0x94>
   22af4:	6879      	ldr	r1, [r7, #4]
   22af6:	1092      	asrs	r2, r2, #2
   22af8:	2401      	movs	r4, #1
   22afa:	fa04 f202 	lsl.w	r2, r4, r2
   22afe:	430a      	orrs	r2, r1
   22b00:	607a      	str	r2, [r7, #4]
   22b02:	e7a6      	b.n	22a52 <_free_r+0x10e>
   22b04:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   22b08:	d806      	bhi.n	22b18 <_free_r+0x1d4>
   22b0a:	0bcb      	lsrs	r3, r1, #15
   22b0c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   22b10:	f103 0277 	add.w	r2, r3, #119	; 0x77
   22b14:	00c3      	lsls	r3, r0, #3
   22b16:	e78e      	b.n	22a36 <_free_r+0xf2>
   22b18:	f240 5254 	movw	r2, #1364	; 0x554
   22b1c:	4293      	cmp	r3, r2
   22b1e:	d806      	bhi.n	22b2e <_free_r+0x1ea>
   22b20:	0c8b      	lsrs	r3, r1, #18
   22b22:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   22b26:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   22b2a:	00c3      	lsls	r3, r0, #3
   22b2c:	e783      	b.n	22a36 <_free_r+0xf2>
   22b2e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   22b32:	227e      	movs	r2, #126	; 0x7e
   22b34:	e77f      	b.n	22a36 <_free_r+0xf2>
   22b36:	f041 0301 	orr.w	r3, r1, #1
   22b3a:	606b      	str	r3, [r5, #4]
   22b3c:	f8cc 1000 	str.w	r1, [ip]
   22b40:	e74a      	b.n	229d8 <_free_r+0x94>
   22b42:	bf00      	nop
   22b44:	200095d0 	.word	0x200095d0
   22b48:	200099dc 	.word	0x200099dc
   22b4c:	2000c990 	.word	0x2000c990

00022b50 <rshift>:
   22b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b54:	6904      	ldr	r4, [r0, #16]
   22b56:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   22b5a:	dd2f      	ble.n	22bbc <rshift+0x6c>
   22b5c:	f100 0e14 	add.w	lr, r0, #20
   22b60:	114e      	asrs	r6, r1, #5
   22b62:	f011 0c1f 	ands.w	ip, r1, #31
   22b66:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   22b6a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   22b6e:	d02b      	beq.n	22bc8 <rshift+0x78>
   22b70:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   22b74:	3304      	adds	r3, #4
   22b76:	429d      	cmp	r5, r3
   22b78:	fa21 f10c 	lsr.w	r1, r1, ip
   22b7c:	f1cc 0820 	rsb	r8, ip, #32
   22b80:	d918      	bls.n	22bb4 <rshift+0x64>
   22b82:	4677      	mov	r7, lr
   22b84:	681a      	ldr	r2, [r3, #0]
   22b86:	fa02 f208 	lsl.w	r2, r2, r8
   22b8a:	430a      	orrs	r2, r1
   22b8c:	f847 2b04 	str.w	r2, [r7], #4
   22b90:	f853 1b04 	ldr.w	r1, [r3], #4
   22b94:	429d      	cmp	r5, r3
   22b96:	fa21 f10c 	lsr.w	r1, r1, ip
   22b9a:	d8f3      	bhi.n	22b84 <rshift+0x34>
   22b9c:	1ba3      	subs	r3, r4, r6
   22b9e:	009b      	lsls	r3, r3, #2
   22ba0:	3b05      	subs	r3, #5
   22ba2:	089b      	lsrs	r3, r3, #2
   22ba4:	3301      	adds	r3, #1
   22ba6:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   22baa:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   22bae:	b1c9      	cbz	r1, 22be4 <rshift+0x94>
   22bb0:	3404      	adds	r4, #4
   22bb2:	e017      	b.n	22be4 <rshift+0x94>
   22bb4:	6141      	str	r1, [r0, #20]
   22bb6:	4674      	mov	r4, lr
   22bb8:	2900      	cmp	r1, #0
   22bba:	d1f9      	bne.n	22bb0 <rshift+0x60>
   22bbc:	2300      	movs	r3, #0
   22bbe:	6103      	str	r3, [r0, #16]
   22bc0:	2300      	movs	r3, #0
   22bc2:	6143      	str	r3, [r0, #20]
   22bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22bc8:	429d      	cmp	r5, r3
   22bca:	bf88      	it	hi
   22bcc:	f100 0210 	addhi.w	r2, r0, #16
   22bd0:	d9f4      	bls.n	22bbc <rshift+0x6c>
   22bd2:	f853 1b04 	ldr.w	r1, [r3], #4
   22bd6:	f842 1f04 	str.w	r1, [r2, #4]!
   22bda:	429d      	cmp	r5, r3
   22bdc:	d8f9      	bhi.n	22bd2 <rshift+0x82>
   22bde:	1ba4      	subs	r4, r4, r6
   22be0:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   22be4:	eba4 030e 	sub.w	r3, r4, lr
   22be8:	109b      	asrs	r3, r3, #2
   22bea:	4574      	cmp	r4, lr
   22bec:	6103      	str	r3, [r0, #16]
   22bee:	d0e7      	beq.n	22bc0 <rshift+0x70>
   22bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022bf4 <__gethex>:
   22bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22bf8:	ed2d 8b02 	vpush	{d8}
   22bfc:	680c      	ldr	r4, [r1, #0]
   22bfe:	468b      	mov	fp, r1
   22c00:	78a1      	ldrb	r1, [r4, #2]
   22c02:	b085      	sub	sp, #20
   22c04:	2930      	cmp	r1, #48	; 0x30
   22c06:	ee08 0a10 	vmov	s16, r0
   22c0a:	4692      	mov	sl, r2
   22c0c:	9302      	str	r3, [sp, #8]
   22c0e:	f040 81ce 	bne.w	22fae <__gethex+0x3ba>
   22c12:	f06f 0001 	mvn.w	r0, #1
   22c16:	1b00      	subs	r0, r0, r4
   22c18:	1ce2      	adds	r2, r4, #3
   22c1a:	1883      	adds	r3, r0, r2
   22c1c:	4614      	mov	r4, r2
   22c1e:	f812 1b01 	ldrb.w	r1, [r2], #1
   22c22:	2930      	cmp	r1, #48	; 0x30
   22c24:	d0f9      	beq.n	22c1a <__gethex+0x26>
   22c26:	f8df 8300 	ldr.w	r8, [pc, #768]	; 22f28 <__gethex+0x334>
   22c2a:	f818 2001 	ldrb.w	r2, [r8, r1]
   22c2e:	2a00      	cmp	r2, #0
   22c30:	f000 80e5 	beq.w	22dfe <__gethex+0x20a>
   22c34:	7822      	ldrb	r2, [r4, #0]
   22c36:	2700      	movs	r7, #0
   22c38:	f818 2002 	ldrb.w	r2, [r8, r2]
   22c3c:	463d      	mov	r5, r7
   22c3e:	4626      	mov	r6, r4
   22c40:	b12a      	cbz	r2, 22c4e <__gethex+0x5a>
   22c42:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   22c46:	f818 2002 	ldrb.w	r2, [r8, r2]
   22c4a:	2a00      	cmp	r2, #0
   22c4c:	d1f9      	bne.n	22c42 <__gethex+0x4e>
   22c4e:	49b5      	ldr	r1, [pc, #724]	; (22f24 <__gethex+0x330>)
   22c50:	9301      	str	r3, [sp, #4]
   22c52:	2201      	movs	r2, #1
   22c54:	4630      	mov	r0, r6
   22c56:	f7ff fba5 	bl	223a4 <strncmp>
   22c5a:	9b01      	ldr	r3, [sp, #4]
   22c5c:	4681      	mov	r9, r0
   22c5e:	2800      	cmp	r0, #0
   22c60:	d04d      	beq.n	22cfe <__gethex+0x10a>
   22c62:	2d00      	cmp	r5, #0
   22c64:	d14e      	bne.n	22d04 <__gethex+0x110>
   22c66:	7832      	ldrb	r2, [r6, #0]
   22c68:	46a9      	mov	r9, r5
   22c6a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   22c6e:	2a50      	cmp	r2, #80	; 0x50
   22c70:	4635      	mov	r5, r6
   22c72:	d050      	beq.n	22d16 <__gethex+0x122>
   22c74:	f8cb 6000 	str.w	r6, [fp]
   22c78:	2f00      	cmp	r7, #0
   22c7a:	d169      	bne.n	22d50 <__gethex+0x15c>
   22c7c:	1b2b      	subs	r3, r5, r4
   22c7e:	3b01      	subs	r3, #1
   22c80:	2b07      	cmp	r3, #7
   22c82:	4639      	mov	r1, r7
   22c84:	dd04      	ble.n	22c90 <__gethex+0x9c>
   22c86:	105b      	asrs	r3, r3, #1
   22c88:	2b07      	cmp	r3, #7
   22c8a:	f101 0101 	add.w	r1, r1, #1
   22c8e:	dcfa      	bgt.n	22c86 <__gethex+0x92>
   22c90:	ee18 0a10 	vmov	r0, s16
   22c94:	f002 f926 	bl	24ee4 <_Balloc>
   22c98:	4683      	mov	fp, r0
   22c9a:	2800      	cmp	r0, #0
   22c9c:	f000 8266 	beq.w	2316c <__gethex+0x578>
   22ca0:	f100 0614 	add.w	r6, r0, #20
   22ca4:	42ac      	cmp	r4, r5
   22ca6:	9601      	str	r6, [sp, #4]
   22ca8:	f080 81d2 	bcs.w	23050 <__gethex+0x45c>
   22cac:	2700      	movs	r7, #0
   22cae:	f8cd 900c 	str.w	r9, [sp, #12]
   22cb2:	499c      	ldr	r1, [pc, #624]	; (22f24 <__gethex+0x330>)
   22cb4:	46a1      	mov	r9, r4
   22cb6:	463c      	mov	r4, r7
   22cb8:	e00c      	b.n	22cd4 <__gethex+0xe0>
   22cba:	2f20      	cmp	r7, #32
   22cbc:	d019      	beq.n	22cf2 <__gethex+0xfe>
   22cbe:	4638      	mov	r0, r7
   22cc0:	3704      	adds	r7, #4
   22cc2:	782a      	ldrb	r2, [r5, #0]
   22cc4:	f818 2002 	ldrb.w	r2, [r8, r2]
   22cc8:	f002 020f 	and.w	r2, r2, #15
   22ccc:	4082      	lsls	r2, r0
   22cce:	4314      	orrs	r4, r2
   22cd0:	454d      	cmp	r5, r9
   22cd2:	d047      	beq.n	22d64 <__gethex+0x170>
   22cd4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   22cd8:	2a2e      	cmp	r2, #46	; 0x2e
   22cda:	d1ee      	bne.n	22cba <__gethex+0xc6>
   22cdc:	454d      	cmp	r5, r9
   22cde:	d3ec      	bcc.n	22cba <__gethex+0xc6>
   22ce0:	2201      	movs	r2, #1
   22ce2:	4628      	mov	r0, r5
   22ce4:	f7ff fb5e 	bl	223a4 <strncmp>
   22ce8:	498e      	ldr	r1, [pc, #568]	; (22f24 <__gethex+0x330>)
   22cea:	2800      	cmp	r0, #0
   22cec:	d0f0      	beq.n	22cd0 <__gethex+0xdc>
   22cee:	2f20      	cmp	r7, #32
   22cf0:	d1e5      	bne.n	22cbe <__gethex+0xca>
   22cf2:	2000      	movs	r0, #0
   22cf4:	f846 4b04 	str.w	r4, [r6], #4
   22cf8:	2704      	movs	r7, #4
   22cfa:	4604      	mov	r4, r0
   22cfc:	e7e1      	b.n	22cc2 <__gethex+0xce>
   22cfe:	2d00      	cmp	r5, #0
   22d00:	f000 8142 	beq.w	22f88 <__gethex+0x394>
   22d04:	7832      	ldrb	r2, [r6, #0]
   22d06:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   22d0a:	1bad      	subs	r5, r5, r6
   22d0c:	2a50      	cmp	r2, #80	; 0x50
   22d0e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   22d12:	4635      	mov	r5, r6
   22d14:	d1ae      	bne.n	22c74 <__gethex+0x80>
   22d16:	786a      	ldrb	r2, [r5, #1]
   22d18:	2a2b      	cmp	r2, #43	; 0x2b
   22d1a:	f000 8125 	beq.w	22f68 <__gethex+0x374>
   22d1e:	2a2d      	cmp	r2, #45	; 0x2d
   22d20:	f000 80a5 	beq.w	22e6e <__gethex+0x27a>
   22d24:	1c6e      	adds	r6, r5, #1
   22d26:	2000      	movs	r0, #0
   22d28:	f818 1002 	ldrb.w	r1, [r8, r2]
   22d2c:	1e4a      	subs	r2, r1, #1
   22d2e:	2a18      	cmp	r2, #24
   22d30:	f200 809b 	bhi.w	22e6a <__gethex+0x276>
   22d34:	7872      	ldrb	r2, [r6, #1]
   22d36:	f818 2002 	ldrb.w	r2, [r8, r2]
   22d3a:	3910      	subs	r1, #16
   22d3c:	3601      	adds	r6, #1
   22d3e:	2a00      	cmp	r2, #0
   22d40:	d15a      	bne.n	22df8 <__gethex+0x204>
   22d42:	b100      	cbz	r0, 22d46 <__gethex+0x152>
   22d44:	4249      	negs	r1, r1
   22d46:	4489      	add	r9, r1
   22d48:	f8cb 6000 	str.w	r6, [fp]
   22d4c:	2f00      	cmp	r7, #0
   22d4e:	d095      	beq.n	22c7c <__gethex+0x88>
   22d50:	2b00      	cmp	r3, #0
   22d52:	bf14      	ite	ne
   22d54:	2500      	movne	r5, #0
   22d56:	2506      	moveq	r5, #6
   22d58:	4628      	mov	r0, r5
   22d5a:	b005      	add	sp, #20
   22d5c:	ecbd 8b02 	vpop	{d8}
   22d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d64:	f8dd 900c 	ldr.w	r9, [sp, #12]
   22d68:	4623      	mov	r3, r4
   22d6a:	f846 3b04 	str.w	r3, [r6], #4
   22d6e:	4618      	mov	r0, r3
   22d70:	9b01      	ldr	r3, [sp, #4]
   22d72:	1af6      	subs	r6, r6, r3
   22d74:	10b6      	asrs	r6, r6, #2
   22d76:	f8cb 6010 	str.w	r6, [fp, #16]
   22d7a:	f002 f98d 	bl	25098 <__hi0bits>
   22d7e:	0176      	lsls	r6, r6, #5
   22d80:	f8da 4000 	ldr.w	r4, [sl]
   22d84:	1a30      	subs	r0, r6, r0
   22d86:	42a0      	cmp	r0, r4
   22d88:	dc75      	bgt.n	22e76 <__gethex+0x282>
   22d8a:	f2c0 80ef 	blt.w	22f6c <__gethex+0x378>
   22d8e:	2700      	movs	r7, #0
   22d90:	f8da 3008 	ldr.w	r3, [sl, #8]
   22d94:	454b      	cmp	r3, r9
   22d96:	f2c0 8151 	blt.w	2303c <__gethex+0x448>
   22d9a:	f8da 3004 	ldr.w	r3, [sl, #4]
   22d9e:	454b      	cmp	r3, r9
   22da0:	dd4a      	ble.n	22e38 <__gethex+0x244>
   22da2:	eba3 0909 	sub.w	r9, r3, r9
   22da6:	454c      	cmp	r4, r9
   22da8:	f300 8082 	bgt.w	22eb0 <__gethex+0x2bc>
   22dac:	f8da 200c 	ldr.w	r2, [sl, #12]
   22db0:	2a02      	cmp	r2, #2
   22db2:	f000 8165 	beq.w	23080 <__gethex+0x48c>
   22db6:	2a03      	cmp	r2, #3
   22db8:	f000 8181 	beq.w	230be <__gethex+0x4ca>
   22dbc:	2a01      	cmp	r2, #1
   22dbe:	f000 816f 	beq.w	230a0 <__gethex+0x4ac>
   22dc2:	ee18 0a10 	vmov	r0, s16
   22dc6:	4659      	mov	r1, fp
   22dc8:	f002 f8b2 	bl	24f30 <_Bfree>
   22dcc:	2550      	movs	r5, #80	; 0x50
   22dce:	9a10      	ldr	r2, [sp, #64]	; 0x40
   22dd0:	2300      	movs	r3, #0
   22dd2:	4628      	mov	r0, r5
   22dd4:	6013      	str	r3, [r2, #0]
   22dd6:	b005      	add	sp, #20
   22dd8:	ecbd 8b02 	vpop	{d8}
   22ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22de0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   22de4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   22de8:	f1a2 0110 	sub.w	r1, r2, #16
   22dec:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   22df0:	f818 2002 	ldrb.w	r2, [r8, r2]
   22df4:	2a00      	cmp	r2, #0
   22df6:	d0a4      	beq.n	22d42 <__gethex+0x14e>
   22df8:	2a19      	cmp	r2, #25
   22dfa:	ddf1      	ble.n	22de0 <__gethex+0x1ec>
   22dfc:	e7a1      	b.n	22d42 <__gethex+0x14e>
   22dfe:	4949      	ldr	r1, [pc, #292]	; (22f24 <__gethex+0x330>)
   22e00:	9301      	str	r3, [sp, #4]
   22e02:	2201      	movs	r2, #1
   22e04:	4620      	mov	r0, r4
   22e06:	f7ff facd 	bl	223a4 <strncmp>
   22e0a:	9b01      	ldr	r3, [sp, #4]
   22e0c:	2800      	cmp	r0, #0
   22e0e:	d16d      	bne.n	22eec <__gethex+0x2f8>
   22e10:	7861      	ldrb	r1, [r4, #1]
   22e12:	f818 2001 	ldrb.w	r2, [r8, r1]
   22e16:	1c65      	adds	r5, r4, #1
   22e18:	2a00      	cmp	r2, #0
   22e1a:	d069      	beq.n	22ef0 <__gethex+0x2fc>
   22e1c:	2930      	cmp	r1, #48	; 0x30
   22e1e:	462c      	mov	r4, r5
   22e20:	d105      	bne.n	22e2e <__gethex+0x23a>
   22e22:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   22e26:	2b30      	cmp	r3, #48	; 0x30
   22e28:	d0fb      	beq.n	22e22 <__gethex+0x22e>
   22e2a:	f818 2003 	ldrb.w	r2, [r8, r3]
   22e2e:	fab2 f782 	clz	r7, r2
   22e32:	097f      	lsrs	r7, r7, #5
   22e34:	2301      	movs	r3, #1
   22e36:	e702      	b.n	22c3e <__gethex+0x4a>
   22e38:	2501      	movs	r5, #1
   22e3a:	b157      	cbz	r7, 22e52 <__gethex+0x25e>
   22e3c:	f8da 300c 	ldr.w	r3, [sl, #12]
   22e40:	2b02      	cmp	r3, #2
   22e42:	d05d      	beq.n	22f00 <__gethex+0x30c>
   22e44:	2b03      	cmp	r3, #3
   22e46:	d05f      	beq.n	22f08 <__gethex+0x314>
   22e48:	2b01      	cmp	r3, #1
   22e4a:	f000 8084 	beq.w	22f56 <__gethex+0x362>
   22e4e:	f045 0510 	orr.w	r5, r5, #16
   22e52:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22e54:	f8c3 b000 	str.w	fp, [r3]
   22e58:	9b02      	ldr	r3, [sp, #8]
   22e5a:	4628      	mov	r0, r5
   22e5c:	f8c3 9000 	str.w	r9, [r3]
   22e60:	b005      	add	sp, #20
   22e62:	ecbd 8b02 	vpop	{d8}
   22e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e6a:	462e      	mov	r6, r5
   22e6c:	e702      	b.n	22c74 <__gethex+0x80>
   22e6e:	2001      	movs	r0, #1
   22e70:	78aa      	ldrb	r2, [r5, #2]
   22e72:	1cae      	adds	r6, r5, #2
   22e74:	e758      	b.n	22d28 <__gethex+0x134>
   22e76:	1b06      	subs	r6, r0, r4
   22e78:	4631      	mov	r1, r6
   22e7a:	4658      	mov	r0, fp
   22e7c:	f002 fd3a 	bl	258f4 <__any_on>
   22e80:	4607      	mov	r7, r0
   22e82:	b178      	cbz	r0, 22ea4 <__gethex+0x2b0>
   22e84:	1e72      	subs	r2, r6, #1
   22e86:	1153      	asrs	r3, r2, #5
   22e88:	9901      	ldr	r1, [sp, #4]
   22e8a:	2701      	movs	r7, #1
   22e8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   22e90:	f002 031f 	and.w	r3, r2, #31
   22e94:	fa07 f303 	lsl.w	r3, r7, r3
   22e98:	420b      	tst	r3, r1
   22e9a:	d003      	beq.n	22ea4 <__gethex+0x2b0>
   22e9c:	42ba      	cmp	r2, r7
   22e9e:	f300 80e2 	bgt.w	23066 <__gethex+0x472>
   22ea2:	2702      	movs	r7, #2
   22ea4:	4631      	mov	r1, r6
   22ea6:	4658      	mov	r0, fp
   22ea8:	44b1      	add	r9, r6
   22eaa:	f7ff fe51 	bl	22b50 <rshift>
   22eae:	e76f      	b.n	22d90 <__gethex+0x19c>
   22eb0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
   22eb4:	2f00      	cmp	r7, #0
   22eb6:	f040 80ce 	bne.w	23056 <__gethex+0x462>
   22eba:	2d00      	cmp	r5, #0
   22ebc:	f040 80cd 	bne.w	2305a <__gethex+0x466>
   22ec0:	116b      	asrs	r3, r5, #5
   22ec2:	9a01      	ldr	r2, [sp, #4]
   22ec4:	f005 051f 	and.w	r5, r5, #31
   22ec8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   22ecc:	2301      	movs	r3, #1
   22ece:	40ab      	lsls	r3, r5
   22ed0:	4213      	tst	r3, r2
   22ed2:	4649      	mov	r1, r9
   22ed4:	4658      	mov	r0, fp
   22ed6:	bf18      	it	ne
   22ed8:	f047 0702 	orrne.w	r7, r7, #2
   22edc:	eba4 0409 	sub.w	r4, r4, r9
   22ee0:	f7ff fe36 	bl	22b50 <rshift>
   22ee4:	2502      	movs	r5, #2
   22ee6:	f8da 9004 	ldr.w	r9, [sl, #4]
   22eea:	e7a6      	b.n	22e3a <__gethex+0x246>
   22eec:	7821      	ldrb	r1, [r4, #0]
   22eee:	4625      	mov	r5, r4
   22ef0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   22ef4:	2950      	cmp	r1, #80	; 0x50
   22ef6:	f000 80bf 	beq.w	23078 <__gethex+0x484>
   22efa:	f8cb 5000 	str.w	r5, [fp]
   22efe:	e727      	b.n	22d50 <__gethex+0x15c>
   22f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22f02:	f1c3 0301 	rsb	r3, r3, #1
   22f06:	9311      	str	r3, [sp, #68]	; 0x44
   22f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22f0a:	2b00      	cmp	r3, #0
   22f0c:	d09f      	beq.n	22e4e <__gethex+0x25a>
   22f0e:	f8db 7010 	ldr.w	r7, [fp, #16]
   22f12:	f8dd 8004 	ldr.w	r8, [sp, #4]
   22f16:	00ba      	lsls	r2, r7, #2
   22f18:	4643      	mov	r3, r8
   22f1a:	9201      	str	r2, [sp, #4]
   22f1c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   22f20:	2100      	movs	r1, #0
   22f22:	e007      	b.n	22f34 <__gethex+0x340>
   22f24:	20003a58 	.word	0x20003a58
   22f28:	2000407c 	.word	0x2000407c
   22f2c:	4298      	cmp	r0, r3
   22f2e:	f843 1c04 	str.w	r1, [r3, #-4]
   22f32:	d93f      	bls.n	22fb4 <__gethex+0x3c0>
   22f34:	461e      	mov	r6, r3
   22f36:	f853 2b04 	ldr.w	r2, [r3], #4
   22f3a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   22f3e:	d0f5      	beq.n	22f2c <__gethex+0x338>
   22f40:	3201      	adds	r2, #1
   22f42:	2d02      	cmp	r5, #2
   22f44:	6032      	str	r2, [r6, #0]
   22f46:	f000 80bf 	beq.w	230c8 <__gethex+0x4d4>
   22f4a:	f014 041f 	ands.w	r4, r4, #31
   22f4e:	f040 80e7 	bne.w	23120 <__gethex+0x52c>
   22f52:	2521      	movs	r5, #33	; 0x21
   22f54:	e77d      	b.n	22e52 <__gethex+0x25e>
   22f56:	07ba      	lsls	r2, r7, #30
   22f58:	f57f af79 	bpl.w	22e4e <__gethex+0x25a>
   22f5c:	9b01      	ldr	r3, [sp, #4]
   22f5e:	681b      	ldr	r3, [r3, #0]
   22f60:	431f      	orrs	r7, r3
   22f62:	07fb      	lsls	r3, r7, #31
   22f64:	d4d3      	bmi.n	22f0e <__gethex+0x31a>
   22f66:	e772      	b.n	22e4e <__gethex+0x25a>
   22f68:	2000      	movs	r0, #0
   22f6a:	e781      	b.n	22e70 <__gethex+0x27c>
   22f6c:	1a22      	subs	r2, r4, r0
   22f6e:	4659      	mov	r1, fp
   22f70:	ee18 0a10 	vmov	r0, s16
   22f74:	eba9 0902 	sub.w	r9, r9, r2
   22f78:	f002 fa1a 	bl	253b0 <__lshift>
   22f7c:	f100 0314 	add.w	r3, r0, #20
   22f80:	4683      	mov	fp, r0
   22f82:	9301      	str	r3, [sp, #4]
   22f84:	2700      	movs	r7, #0
   22f86:	e703      	b.n	22d90 <__gethex+0x19c>
   22f88:	7872      	ldrb	r2, [r6, #1]
   22f8a:	f818 0002 	ldrb.w	r0, [r8, r2]
   22f8e:	1c71      	adds	r1, r6, #1
   22f90:	2800      	cmp	r0, #0
   22f92:	f000 80a0 	beq.w	230d6 <__gethex+0x4e2>
   22f96:	460d      	mov	r5, r1
   22f98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   22f9c:	f818 0002 	ldrb.w	r0, [r8, r2]
   22fa0:	2800      	cmp	r0, #0
   22fa2:	d1f8      	bne.n	22f96 <__gethex+0x3a2>
   22fa4:	1b75      	subs	r5, r6, r5
   22fa6:	ea4f 0985 	mov.w	r9, r5, lsl #2
   22faa:	460e      	mov	r6, r1
   22fac:	e65d      	b.n	22c6a <__gethex+0x76>
   22fae:	3402      	adds	r4, #2
   22fb0:	2300      	movs	r3, #0
   22fb2:	e638      	b.n	22c26 <__gethex+0x32>
   22fb4:	f8db 3008 	ldr.w	r3, [fp, #8]
   22fb8:	429f      	cmp	r7, r3
   22fba:	f280 808e 	bge.w	230da <__gethex+0x4e6>
   22fbe:	463b      	mov	r3, r7
   22fc0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   22fc4:	2101      	movs	r1, #1
   22fc6:	3301      	adds	r3, #1
   22fc8:	2d02      	cmp	r5, #2
   22fca:	f8cb 3010 	str.w	r3, [fp, #16]
   22fce:	6151      	str	r1, [r2, #20]
   22fd0:	d07a      	beq.n	230c8 <__gethex+0x4d4>
   22fd2:	429f      	cmp	r7, r3
   22fd4:	dab9      	bge.n	22f4a <__gethex+0x356>
   22fd6:	2b00      	cmp	r3, #0
   22fd8:	f340 809b 	ble.w	23112 <__gethex+0x51e>
   22fdc:	f8db 2014 	ldr.w	r2, [fp, #20]
   22fe0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   22fe4:	f10b 0018 	add.w	r0, fp, #24
   22fe8:	4283      	cmp	r3, r0
   22fea:	ea4f 0252 	mov.w	r2, r2, lsr #1
   22fee:	f240 80b1 	bls.w	23154 <__gethex+0x560>
   22ff2:	4644      	mov	r4, r8
   22ff4:	6801      	ldr	r1, [r0, #0]
   22ff6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   22ffa:	f844 2b04 	str.w	r2, [r4], #4
   22ffe:	f850 2b04 	ldr.w	r2, [r0], #4
   23002:	4283      	cmp	r3, r0
   23004:	ea4f 0252 	mov.w	r2, r2, lsr #1
   23008:	d8f4      	bhi.n	22ff4 <__gethex+0x400>
   2300a:	eba3 030b 	sub.w	r3, r3, fp
   2300e:	3b19      	subs	r3, #25
   23010:	089b      	lsrs	r3, r3, #2
   23012:	3301      	adds	r3, #1
   23014:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   23018:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2301c:	2a00      	cmp	r2, #0
   2301e:	f040 809d 	bne.w	2315c <__gethex+0x568>
   23022:	eba3 0208 	sub.w	r2, r3, r8
   23026:	1092      	asrs	r2, r2, #2
   23028:	4543      	cmp	r3, r8
   2302a:	f8cb 2010 	str.w	r2, [fp, #16]
   2302e:	d073      	beq.n	23118 <__gethex+0x524>
   23030:	f8da 3008 	ldr.w	r3, [sl, #8]
   23034:	f109 0901 	add.w	r9, r9, #1
   23038:	454b      	cmp	r3, r9
   2303a:	da8a      	bge.n	22f52 <__gethex+0x35e>
   2303c:	ee18 0a10 	vmov	r0, s16
   23040:	4659      	mov	r1, fp
   23042:	f001 ff75 	bl	24f30 <_Bfree>
   23046:	9a10      	ldr	r2, [sp, #64]	; 0x40
   23048:	2300      	movs	r3, #0
   2304a:	6013      	str	r3, [r2, #0]
   2304c:	25a3      	movs	r5, #163	; 0xa3
   2304e:	e683      	b.n	22d58 <__gethex+0x164>
   23050:	9e01      	ldr	r6, [sp, #4]
   23052:	2300      	movs	r3, #0
   23054:	e689      	b.n	22d6a <__gethex+0x176>
   23056:	2701      	movs	r7, #1
   23058:	e732      	b.n	22ec0 <__gethex+0x2cc>
   2305a:	4629      	mov	r1, r5
   2305c:	4658      	mov	r0, fp
   2305e:	f002 fc49 	bl	258f4 <__any_on>
   23062:	4607      	mov	r7, r0
   23064:	e72c      	b.n	22ec0 <__gethex+0x2cc>
   23066:	1eb1      	subs	r1, r6, #2
   23068:	4658      	mov	r0, fp
   2306a:	f002 fc43 	bl	258f4 <__any_on>
   2306e:	2800      	cmp	r0, #0
   23070:	f43f af17 	beq.w	22ea2 <__gethex+0x2ae>
   23074:	2703      	movs	r7, #3
   23076:	e715      	b.n	22ea4 <__gethex+0x2b0>
   23078:	f04f 0900 	mov.w	r9, #0
   2307c:	2701      	movs	r7, #1
   2307e:	e64a      	b.n	22d16 <__gethex+0x122>
   23080:	9a11      	ldr	r2, [sp, #68]	; 0x44
   23082:	2a00      	cmp	r2, #0
   23084:	f47f ae9d 	bne.w	22dc2 <__gethex+0x1ce>
   23088:	9902      	ldr	r1, [sp, #8]
   2308a:	600b      	str	r3, [r1, #0]
   2308c:	9b01      	ldr	r3, [sp, #4]
   2308e:	2201      	movs	r2, #1
   23090:	f8cb 2010 	str.w	r2, [fp, #16]
   23094:	601a      	str	r2, [r3, #0]
   23096:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23098:	2562      	movs	r5, #98	; 0x62
   2309a:	f8c3 b000 	str.w	fp, [r3]
   2309e:	e65b      	b.n	22d58 <__gethex+0x164>
   230a0:	454c      	cmp	r4, r9
   230a2:	f47f ae8e 	bne.w	22dc2 <__gethex+0x1ce>
   230a6:	2c01      	cmp	r4, #1
   230a8:	d0ee      	beq.n	23088 <__gethex+0x494>
   230aa:	1e61      	subs	r1, r4, #1
   230ac:	4658      	mov	r0, fp
   230ae:	f002 fc21 	bl	258f4 <__any_on>
   230b2:	2800      	cmp	r0, #0
   230b4:	f43f ae85 	beq.w	22dc2 <__gethex+0x1ce>
   230b8:	f8da 3004 	ldr.w	r3, [sl, #4]
   230bc:	e7e4      	b.n	23088 <__gethex+0x494>
   230be:	9a11      	ldr	r2, [sp, #68]	; 0x44
   230c0:	2a00      	cmp	r2, #0
   230c2:	f43f ae7e 	beq.w	22dc2 <__gethex+0x1ce>
   230c6:	e7df      	b.n	23088 <__gethex+0x494>
   230c8:	f8da 3000 	ldr.w	r3, [sl]
   230cc:	3b01      	subs	r3, #1
   230ce:	42a3      	cmp	r3, r4
   230d0:	d034      	beq.n	2313c <__gethex+0x548>
   230d2:	2522      	movs	r5, #34	; 0x22
   230d4:	e6bd      	b.n	22e52 <__gethex+0x25e>
   230d6:	460e      	mov	r6, r1
   230d8:	e5c7      	b.n	22c6a <__gethex+0x76>
   230da:	f8db 1004 	ldr.w	r1, [fp, #4]
   230de:	ee18 0a10 	vmov	r0, s16
   230e2:	3101      	adds	r1, #1
   230e4:	f001 fefe 	bl	24ee4 <_Balloc>
   230e8:	4606      	mov	r6, r0
   230ea:	b3c8      	cbz	r0, 23160 <__gethex+0x56c>
   230ec:	f8db 3010 	ldr.w	r3, [fp, #16]
   230f0:	3302      	adds	r3, #2
   230f2:	009a      	lsls	r2, r3, #2
   230f4:	f10b 010c 	add.w	r1, fp, #12
   230f8:	300c      	adds	r0, #12
   230fa:	f7f8 fd95 	bl	1bc28 <memcpy>
   230fe:	4659      	mov	r1, fp
   23100:	ee18 0a10 	vmov	r0, s16
   23104:	f001 ff14 	bl	24f30 <_Bfree>
   23108:	f106 0814 	add.w	r8, r6, #20
   2310c:	6933      	ldr	r3, [r6, #16]
   2310e:	46b3      	mov	fp, r6
   23110:	e756      	b.n	22fc0 <__gethex+0x3cc>
   23112:	2300      	movs	r3, #0
   23114:	f8cb 3010 	str.w	r3, [fp, #16]
   23118:	2300      	movs	r3, #0
   2311a:	f8cb 3014 	str.w	r3, [fp, #20]
   2311e:	e787      	b.n	23030 <__gethex+0x43c>
   23120:	9b01      	ldr	r3, [sp, #4]
   23122:	4443      	add	r3, r8
   23124:	f1c4 0420 	rsb	r4, r4, #32
   23128:	f853 0c04 	ldr.w	r0, [r3, #-4]
   2312c:	f001 ffb4 	bl	25098 <__hi0bits>
   23130:	42a0      	cmp	r0, r4
   23132:	f6bf af0e 	bge.w	22f52 <__gethex+0x35e>
   23136:	f8db 3010 	ldr.w	r3, [fp, #16]
   2313a:	e74c      	b.n	22fd6 <__gethex+0x3e2>
   2313c:	1163      	asrs	r3, r4, #5
   2313e:	f004 041f 	and.w	r4, r4, #31
   23142:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   23146:	2301      	movs	r3, #1
   23148:	40a3      	lsls	r3, r4
   2314a:	4213      	tst	r3, r2
   2314c:	bf0c      	ite	eq
   2314e:	2522      	moveq	r5, #34	; 0x22
   23150:	2521      	movne	r5, #33	; 0x21
   23152:	e67e      	b.n	22e52 <__gethex+0x25e>
   23154:	f8c8 2000 	str.w	r2, [r8]
   23158:	4643      	mov	r3, r8
   2315a:	b16a      	cbz	r2, 23178 <__gethex+0x584>
   2315c:	3304      	adds	r3, #4
   2315e:	e760      	b.n	23022 <__gethex+0x42e>
   23160:	4b07      	ldr	r3, [pc, #28]	; (23180 <__gethex+0x58c>)
   23162:	4808      	ldr	r0, [pc, #32]	; (23184 <__gethex+0x590>)
   23164:	4632      	mov	r2, r6
   23166:	2184      	movs	r1, #132	; 0x84
   23168:	f002 fe72 	bl	25e50 <__assert_func>
   2316c:	4b04      	ldr	r3, [pc, #16]	; (23180 <__gethex+0x58c>)
   2316e:	4805      	ldr	r0, [pc, #20]	; (23184 <__gethex+0x590>)
   23170:	465a      	mov	r2, fp
   23172:	21e4      	movs	r1, #228	; 0xe4
   23174:	f002 fe6c 	bl	25e50 <__assert_func>
   23178:	f8cb 2010 	str.w	r2, [fp, #16]
   2317c:	e7cc      	b.n	23118 <__gethex+0x524>
   2317e:	bf00      	nop
   23180:	20003ffc 	.word	0x20003ffc
   23184:	20004010 	.word	0x20004010

00023188 <__match>:
   23188:	b410      	push	{r4}
   2318a:	6804      	ldr	r4, [r0, #0]
   2318c:	e009      	b.n	231a2 <__match+0x1a>
   2318e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   23192:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   23196:	f1bc 0f19 	cmp.w	ip, #25
   2319a:	bf98      	it	ls
   2319c:	3320      	addls	r3, #32
   2319e:	4293      	cmp	r3, r2
   231a0:	d109      	bne.n	231b6 <__match+0x2e>
   231a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   231a6:	2a00      	cmp	r2, #0
   231a8:	d1f1      	bne.n	2318e <__match+0x6>
   231aa:	3401      	adds	r4, #1
   231ac:	6004      	str	r4, [r0, #0]
   231ae:	2001      	movs	r0, #1
   231b0:	f85d 4b04 	ldr.w	r4, [sp], #4
   231b4:	4770      	bx	lr
   231b6:	2000      	movs	r0, #0
   231b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   231bc:	4770      	bx	lr
   231be:	bf00      	nop

000231c0 <__hexnan>:
   231c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231c4:	6809      	ldr	r1, [r1, #0]
   231c6:	b085      	sub	sp, #20
   231c8:	114b      	asrs	r3, r1, #5
   231ca:	f011 011f 	ands.w	r1, r1, #31
   231ce:	9002      	str	r0, [sp, #8]
   231d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   231d4:	9103      	str	r1, [sp, #12]
   231d6:	f040 808f 	bne.w	232f8 <__hexnan+0x138>
   231da:	1f1d      	subs	r5, r3, #4
   231dc:	9301      	str	r3, [sp, #4]
   231de:	9b02      	ldr	r3, [sp, #8]
   231e0:	9901      	ldr	r1, [sp, #4]
   231e2:	681c      	ldr	r4, [r3, #0]
   231e4:	2300      	movs	r3, #0
   231e6:	f841 3c04 	str.w	r3, [r1, #-4]
   231ea:	7861      	ldrb	r1, [r4, #1]
   231ec:	3401      	adds	r4, #1
   231ee:	2900      	cmp	r1, #0
   231f0:	f000 8098 	beq.w	23324 <__hexnan+0x164>
   231f4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 2336c <__hexnan+0x1ac>
   231f8:	46a8      	mov	r8, r5
   231fa:	46ac      	mov	ip, r5
   231fc:	469a      	mov	sl, r3
   231fe:	461e      	mov	r6, r3
   23200:	e00e      	b.n	23220 <__hexnan+0x60>
   23202:	2920      	cmp	r1, #32
   23204:	f200 808c 	bhi.w	23320 <__hexnan+0x160>
   23208:	4556      	cmp	r6, sl
   2320a:	dd06      	ble.n	2321a <__hexnan+0x5a>
   2320c:	45c4      	cmp	ip, r8
   2320e:	d201      	bcs.n	23214 <__hexnan+0x54>
   23210:	2b07      	cmp	r3, #7
   23212:	dd5b      	ble.n	232cc <__hexnan+0x10c>
   23214:	4562      	cmp	r2, ip
   23216:	d351      	bcc.n	232bc <__hexnan+0xfc>
   23218:	2308      	movs	r3, #8
   2321a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   2321e:	b1a1      	cbz	r1, 2324a <__hexnan+0x8a>
   23220:	f819 0001 	ldrb.w	r0, [r9, r1]
   23224:	2800      	cmp	r0, #0
   23226:	d0ec      	beq.n	23202 <__hexnan+0x42>
   23228:	3301      	adds	r3, #1
   2322a:	2b08      	cmp	r3, #8
   2322c:	f106 0601 	add.w	r6, r6, #1
   23230:	dc3a      	bgt.n	232a8 <__hexnan+0xe8>
   23232:	f8dc 1000 	ldr.w	r1, [ip]
   23236:	0109      	lsls	r1, r1, #4
   23238:	f000 000f 	and.w	r0, r0, #15
   2323c:	4308      	orrs	r0, r1
   2323e:	f8cc 0000 	str.w	r0, [ip]
   23242:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   23246:	2900      	cmp	r1, #0
   23248:	d1ea      	bne.n	23220 <__hexnan+0x60>
   2324a:	2e00      	cmp	r6, #0
   2324c:	d06a      	beq.n	23324 <__hexnan+0x164>
   2324e:	45c4      	cmp	ip, r8
   23250:	d201      	bcs.n	23256 <__hexnan+0x96>
   23252:	2b07      	cmp	r3, #7
   23254:	dd74      	ble.n	23340 <__hexnan+0x180>
   23256:	4562      	cmp	r2, ip
   23258:	d252      	bcs.n	23300 <__hexnan+0x140>
   2325a:	1f11      	subs	r1, r2, #4
   2325c:	4663      	mov	r3, ip
   2325e:	f853 0b04 	ldr.w	r0, [r3], #4
   23262:	f841 0f04 	str.w	r0, [r1, #4]!
   23266:	42ab      	cmp	r3, r5
   23268:	d9f9      	bls.n	2325e <__hexnan+0x9e>
   2326a:	eba5 030c 	sub.w	r3, r5, ip
   2326e:	f023 0303 	bic.w	r3, r3, #3
   23272:	1c69      	adds	r1, r5, #1
   23274:	3304      	adds	r3, #4
   23276:	f10c 0c01 	add.w	ip, ip, #1
   2327a:	4561      	cmp	r1, ip
   2327c:	bf38      	it	cc
   2327e:	2304      	movcc	r3, #4
   23280:	4413      	add	r3, r2
   23282:	2100      	movs	r1, #0
   23284:	f843 1b04 	str.w	r1, [r3], #4
   23288:	42ab      	cmp	r3, r5
   2328a:	d9fb      	bls.n	23284 <__hexnan+0xc4>
   2328c:	9b01      	ldr	r3, [sp, #4]
   2328e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   23292:	b92b      	cbnz	r3, 232a0 <__hexnan+0xe0>
   23294:	42aa      	cmp	r2, r5
   23296:	d049      	beq.n	2332c <__hexnan+0x16c>
   23298:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   2329c:	2b00      	cmp	r3, #0
   2329e:	d0f9      	beq.n	23294 <__hexnan+0xd4>
   232a0:	2005      	movs	r0, #5
   232a2:	b005      	add	sp, #20
   232a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   232a8:	4562      	cmp	r2, ip
   232aa:	d2b6      	bcs.n	2321a <__hexnan+0x5a>
   232ac:	2300      	movs	r3, #0
   232ae:	f84c 3c04 	str.w	r3, [ip, #-4]
   232b2:	4619      	mov	r1, r3
   232b4:	f1ac 0c04 	sub.w	ip, ip, #4
   232b8:	2301      	movs	r3, #1
   232ba:	e7bd      	b.n	23238 <__hexnan+0x78>
   232bc:	2300      	movs	r3, #0
   232be:	f1ac 0804 	sub.w	r8, ip, #4
   232c2:	f84c 3c04 	str.w	r3, [ip, #-4]
   232c6:	46b2      	mov	sl, r6
   232c8:	46c4      	mov	ip, r8
   232ca:	e7a6      	b.n	2321a <__hexnan+0x5a>
   232cc:	f1c3 0108 	rsb	r1, r3, #8
   232d0:	f8dc 3000 	ldr.w	r3, [ip]
   232d4:	0089      	lsls	r1, r1, #2
   232d6:	f1c1 0e20 	rsb	lr, r1, #32
   232da:	4660      	mov	r0, ip
   232dc:	469b      	mov	fp, r3
   232de:	6847      	ldr	r7, [r0, #4]
   232e0:	fa07 f30e 	lsl.w	r3, r7, lr
   232e4:	ea43 030b 	orr.w	r3, r3, fp
   232e8:	fa27 fb01 	lsr.w	fp, r7, r1
   232ec:	6003      	str	r3, [r0, #0]
   232ee:	f840 bf04 	str.w	fp, [r0, #4]!
   232f2:	4540      	cmp	r0, r8
   232f4:	d3f3      	bcc.n	232de <__hexnan+0x11e>
   232f6:	e78d      	b.n	23214 <__hexnan+0x54>
   232f8:	1d19      	adds	r1, r3, #4
   232fa:	9101      	str	r1, [sp, #4]
   232fc:	461d      	mov	r5, r3
   232fe:	e76e      	b.n	231de <__hexnan+0x1e>
   23300:	9b03      	ldr	r3, [sp, #12]
   23302:	2b00      	cmp	r3, #0
   23304:	d0c2      	beq.n	2328c <__hexnan+0xcc>
   23306:	9b03      	ldr	r3, [sp, #12]
   23308:	9801      	ldr	r0, [sp, #4]
   2330a:	f1c3 0120 	rsb	r1, r3, #32
   2330e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23312:	40cb      	lsrs	r3, r1
   23314:	f850 1c04 	ldr.w	r1, [r0, #-4]
   23318:	400b      	ands	r3, r1
   2331a:	f840 3c04 	str.w	r3, [r0, #-4]
   2331e:	e7b8      	b.n	23292 <__hexnan+0xd2>
   23320:	2929      	cmp	r1, #41	; 0x29
   23322:	d009      	beq.n	23338 <__hexnan+0x178>
   23324:	2004      	movs	r0, #4
   23326:	b005      	add	sp, #20
   23328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2332c:	2301      	movs	r3, #1
   2332e:	2005      	movs	r0, #5
   23330:	602b      	str	r3, [r5, #0]
   23332:	b005      	add	sp, #20
   23334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23338:	9902      	ldr	r1, [sp, #8]
   2333a:	3401      	adds	r4, #1
   2333c:	600c      	str	r4, [r1, #0]
   2333e:	e784      	b.n	2324a <__hexnan+0x8a>
   23340:	f8dc 1000 	ldr.w	r1, [ip]
   23344:	f1c3 0308 	rsb	r3, r3, #8
   23348:	009b      	lsls	r3, r3, #2
   2334a:	f1c3 0720 	rsb	r7, r3, #32
   2334e:	4664      	mov	r4, ip
   23350:	4608      	mov	r0, r1
   23352:	6866      	ldr	r6, [r4, #4]
   23354:	fa06 f107 	lsl.w	r1, r6, r7
   23358:	4301      	orrs	r1, r0
   2335a:	fa26 f003 	lsr.w	r0, r6, r3
   2335e:	6021      	str	r1, [r4, #0]
   23360:	f844 0f04 	str.w	r0, [r4, #4]!
   23364:	4544      	cmp	r4, r8
   23366:	d3f4      	bcc.n	23352 <__hexnan+0x192>
   23368:	e775      	b.n	23256 <__hexnan+0x96>
   2336a:	bf00      	nop
   2336c:	2000407c 	.word	0x2000407c

00023370 <__ascii_mbtowc>:
   23370:	b082      	sub	sp, #8
   23372:	b149      	cbz	r1, 23388 <__ascii_mbtowc+0x18>
   23374:	b15a      	cbz	r2, 2338e <__ascii_mbtowc+0x1e>
   23376:	b16b      	cbz	r3, 23394 <__ascii_mbtowc+0x24>
   23378:	7813      	ldrb	r3, [r2, #0]
   2337a:	600b      	str	r3, [r1, #0]
   2337c:	7812      	ldrb	r2, [r2, #0]
   2337e:	1e10      	subs	r0, r2, #0
   23380:	bf18      	it	ne
   23382:	2001      	movne	r0, #1
   23384:	b002      	add	sp, #8
   23386:	4770      	bx	lr
   23388:	a901      	add	r1, sp, #4
   2338a:	2a00      	cmp	r2, #0
   2338c:	d1f3      	bne.n	23376 <__ascii_mbtowc+0x6>
   2338e:	4610      	mov	r0, r2
   23390:	b002      	add	sp, #8
   23392:	4770      	bx	lr
   23394:	f06f 0001 	mvn.w	r0, #1
   23398:	e7f4      	b.n	23384 <__ascii_mbtowc+0x14>
   2339a:	bf00      	nop
   2339c:	0000      	movs	r0, r0
	...

000233a0 <_svfprintf_r>:
   233a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233a4:	ed2d 8b08 	vpush	{d8-d11}
   233a8:	b0d1      	sub	sp, #324	; 0x144
   233aa:	460c      	mov	r4, r1
   233ac:	ee0b 1a10 	vmov	s22, r1
   233b0:	4690      	mov	r8, r2
   233b2:	9308      	str	r3, [sp, #32]
   233b4:	4683      	mov	fp, r0
   233b6:	f002 fc49 	bl	25c4c <_localeconv_r>
   233ba:	6803      	ldr	r3, [r0, #0]
   233bc:	9312      	str	r3, [sp, #72]	; 0x48
   233be:	4618      	mov	r0, r3
   233c0:	f7ff f9be 	bl	22740 <strlen>
   233c4:	af20      	add	r7, sp, #128	; 0x80
   233c6:	9010      	str	r0, [sp, #64]	; 0x40
   233c8:	2208      	movs	r2, #8
   233ca:	2100      	movs	r1, #0
   233cc:	4638      	mov	r0, r7
   233ce:	f7fe ff97 	bl	22300 <memset>
   233d2:	89a3      	ldrh	r3, [r4, #12]
   233d4:	061b      	lsls	r3, r3, #24
   233d6:	d503      	bpl.n	233e0 <_svfprintf_r+0x40>
   233d8:	6923      	ldr	r3, [r4, #16]
   233da:	2b00      	cmp	r3, #0
   233dc:	f000 8755 	beq.w	2428a <_svfprintf_r+0xeea>
   233e0:	2300      	movs	r3, #0
   233e2:	ed9f 8b83 	vldr	d8, [pc, #524]	; 235f0 <_svfprintf_r+0x250>
   233e6:	ed9f 9b84 	vldr	d9, [pc, #528]	; 235f8 <_svfprintf_r+0x258>
   233ea:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   233ee:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   233f2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   233f6:	aa27      	add	r2, sp, #156	; 0x9c
   233f8:	930e      	str	r3, [sp, #56]	; 0x38
   233fa:	9224      	str	r2, [sp, #144]	; 0x90
   233fc:	4692      	mov	sl, r2
   233fe:	9311      	str	r3, [sp, #68]	; 0x44
   23400:	9304      	str	r3, [sp, #16]
   23402:	4644      	mov	r4, r8
   23404:	46a1      	mov	r9, r4
   23406:	4b7e      	ldr	r3, [pc, #504]	; (23600 <_svfprintf_r+0x260>)
   23408:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   2340c:	f7ff f874 	bl	224f8 <__locale_mb_cur_max>
   23410:	464a      	mov	r2, r9
   23412:	4603      	mov	r3, r0
   23414:	a91c      	add	r1, sp, #112	; 0x70
   23416:	9700      	str	r7, [sp, #0]
   23418:	4658      	mov	r0, fp
   2341a:	47a8      	blx	r5
   2341c:	2800      	cmp	r0, #0
   2341e:	f000 80b0 	beq.w	23582 <_svfprintf_r+0x1e2>
   23422:	f2c0 80a6 	blt.w	23572 <_svfprintf_r+0x1d2>
   23426:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   23428:	2a25      	cmp	r2, #37	; 0x25
   2342a:	4603      	mov	r3, r0
   2342c:	d001      	beq.n	23432 <_svfprintf_r+0x92>
   2342e:	4499      	add	r9, r3
   23430:	e7e9      	b.n	23406 <_svfprintf_r+0x66>
   23432:	ebb9 0504 	subs.w	r5, r9, r4
   23436:	4606      	mov	r6, r0
   23438:	f040 80a7 	bne.w	2358a <_svfprintf_r+0x1ea>
   2343c:	2300      	movs	r3, #0
   2343e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23442:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   23446:	4698      	mov	r8, r3
   23448:	9306      	str	r3, [sp, #24]
   2344a:	f109 0901 	add.w	r9, r9, #1
   2344e:	f899 3000 	ldrb.w	r3, [r9]
   23452:	9203      	str	r2, [sp, #12]
   23454:	252b      	movs	r5, #43	; 0x2b
   23456:	2620      	movs	r6, #32
   23458:	f109 0901 	add.w	r9, r9, #1
   2345c:	f1a3 0220 	sub.w	r2, r3, #32
   23460:	2a5a      	cmp	r2, #90	; 0x5a
   23462:	f200 80cf 	bhi.w	23604 <_svfprintf_r+0x264>
   23466:	e8df f012 	tbh	[pc, r2, lsl #1]
   2346a:	02e8      	.short	0x02e8
   2346c:	00cd00cd 	.word	0x00cd00cd
   23470:	00cd02e3 	.word	0x00cd02e3
   23474:	00cd00cd 	.word	0x00cd00cd
   23478:	00cd006a 	.word	0x00cd006a
   2347c:	020500cd 	.word	0x020500cd
   23480:	00cd0284 	.word	0x00cd0284
   23484:	02c90210 	.word	0x02c90210
   23488:	02bd00cd 	.word	0x02bd00cd
   2348c:	005b005b 	.word	0x005b005b
   23490:	005b005b 	.word	0x005b005b
   23494:	005b005b 	.word	0x005b005b
   23498:	005b005b 	.word	0x005b005b
   2349c:	00cd005b 	.word	0x00cd005b
   234a0:	00cd00cd 	.word	0x00cd00cd
   234a4:	00cd00cd 	.word	0x00cd00cd
   234a8:	00cd00cd 	.word	0x00cd00cd
   234ac:	00cd0153 	.word	0x00cd0153
   234b0:	021a0183 	.word	0x021a0183
   234b4:	01530153 	.word	0x01530153
   234b8:	00cd0153 	.word	0x00cd0153
   234bc:	00cd00cd 	.word	0x00cd00cd
   234c0:	021500cd 	.word	0x021500cd
   234c4:	00cd00cd 	.word	0x00cd00cd
   234c8:	00cd0296 	.word	0x00cd0296
   234cc:	00cd00cd 	.word	0x00cd00cd
   234d0:	00cd01ab 	.word	0x00cd01ab
   234d4:	00cd02aa 	.word	0x00cd02aa
   234d8:	06e300cd 	.word	0x06e300cd
   234dc:	00cd00cd 	.word	0x00cd00cd
   234e0:	00cd00cd 	.word	0x00cd00cd
   234e4:	00cd00cd 	.word	0x00cd00cd
   234e8:	00cd00cd 	.word	0x00cd00cd
   234ec:	00cd0153 	.word	0x00cd0153
   234f0:	01de0183 	.word	0x01de0183
   234f4:	01530153 	.word	0x01530153
   234f8:	02770153 	.word	0x02770153
   234fc:	007f01de 	.word	0x007f01de
   23500:	028900cd 	.word	0x028900cd
   23504:	025f00cd 	.word	0x025f00cd
   23508:	022f06e0 	.word	0x022f06e0
   2350c:	00cd007f 	.word	0x00cd007f
   23510:	007c01ab 	.word	0x007c01ab
   23514:	00cd06b8 	.word	0x00cd06b8
   23518:	06bd00cd 	.word	0x06bd00cd
   2351c:	007c00cd 	.word	0x007c00cd
   23520:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   23524:	2100      	movs	r1, #0
   23526:	f819 3b01 	ldrb.w	r3, [r9], #1
   2352a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   2352e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   23532:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   23536:	2a09      	cmp	r2, #9
   23538:	d9f5      	bls.n	23526 <_svfprintf_r+0x186>
   2353a:	9106      	str	r1, [sp, #24]
   2353c:	e78e      	b.n	2345c <_svfprintf_r+0xbc>
   2353e:	4658      	mov	r0, fp
   23540:	f002 fb84 	bl	25c4c <_localeconv_r>
   23544:	6843      	ldr	r3, [r0, #4]
   23546:	9315      	str	r3, [sp, #84]	; 0x54
   23548:	4618      	mov	r0, r3
   2354a:	f7ff f8f9 	bl	22740 <strlen>
   2354e:	9016      	str	r0, [sp, #88]	; 0x58
   23550:	4658      	mov	r0, fp
   23552:	f002 fb7b 	bl	25c4c <_localeconv_r>
   23556:	6883      	ldr	r3, [r0, #8]
   23558:	9313      	str	r3, [sp, #76]	; 0x4c
   2355a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2355c:	2b00      	cmp	r3, #0
   2355e:	f040 862d 	bne.w	241bc <_svfprintf_r+0xe1c>
   23562:	f899 3000 	ldrb.w	r3, [r9]
   23566:	e777      	b.n	23458 <_svfprintf_r+0xb8>
   23568:	f899 3000 	ldrb.w	r3, [r9]
   2356c:	f048 0820 	orr.w	r8, r8, #32
   23570:	e772      	b.n	23458 <_svfprintf_r+0xb8>
   23572:	2208      	movs	r2, #8
   23574:	2100      	movs	r1, #0
   23576:	4638      	mov	r0, r7
   23578:	f7fe fec2 	bl	22300 <memset>
   2357c:	2301      	movs	r3, #1
   2357e:	4499      	add	r9, r3
   23580:	e741      	b.n	23406 <_svfprintf_r+0x66>
   23582:	ebb9 0504 	subs.w	r5, r9, r4
   23586:	4606      	mov	r6, r0
   23588:	d011      	beq.n	235ae <_svfprintf_r+0x20e>
   2358a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2358c:	442b      	add	r3, r5
   2358e:	9326      	str	r3, [sp, #152]	; 0x98
   23590:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23592:	3301      	adds	r3, #1
   23594:	2b07      	cmp	r3, #7
   23596:	e9ca 4500 	strd	r4, r5, [sl]
   2359a:	9325      	str	r3, [sp, #148]	; 0x94
   2359c:	dc1c      	bgt.n	235d8 <_svfprintf_r+0x238>
   2359e:	f10a 0a08 	add.w	sl, sl, #8
   235a2:	9b04      	ldr	r3, [sp, #16]
   235a4:	442b      	add	r3, r5
   235a6:	9304      	str	r3, [sp, #16]
   235a8:	2e00      	cmp	r6, #0
   235aa:	f47f af47 	bne.w	2343c <_svfprintf_r+0x9c>
   235ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   235b0:	2b00      	cmp	r3, #0
   235b2:	f041 820b 	bne.w	249cc <_svfprintf_r+0x162c>
   235b6:	ee1b 3a10 	vmov	r3, s22
   235ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   235be:	f013 0f40 	tst.w	r3, #64	; 0x40
   235c2:	9b04      	ldr	r3, [sp, #16]
   235c4:	bf18      	it	ne
   235c6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   235ca:	9304      	str	r3, [sp, #16]
   235cc:	9804      	ldr	r0, [sp, #16]
   235ce:	b051      	add	sp, #324	; 0x144
   235d0:	ecbd 8b08 	vpop	{d8-d11}
   235d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   235d8:	ee1b 1a10 	vmov	r1, s22
   235dc:	aa24      	add	r2, sp, #144	; 0x90
   235de:	4658      	mov	r0, fp
   235e0:	f003 fbb0 	bl	26d44 <__ssprint_r>
   235e4:	2800      	cmp	r0, #0
   235e6:	d1e6      	bne.n	235b6 <_svfprintf_r+0x216>
   235e8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   235ec:	e7d9      	b.n	235a2 <_svfprintf_r+0x202>
   235ee:	bf00      	nop
	...
   235f8:	ffffffff 	.word	0xffffffff
   235fc:	7fefffff 	.word	0x7fefffff
   23600:	20009464 	.word	0x20009464
   23604:	930b      	str	r3, [sp, #44]	; 0x2c
   23606:	2b00      	cmp	r3, #0
   23608:	d0d1      	beq.n	235ae <_svfprintf_r+0x20e>
   2360a:	2100      	movs	r1, #0
   2360c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   23610:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   23614:	2301      	movs	r3, #1
   23616:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   2361a:	9302      	str	r3, [sp, #8]
   2361c:	9107      	str	r1, [sp, #28]
   2361e:	9305      	str	r3, [sp, #20]
   23620:	9103      	str	r1, [sp, #12]
   23622:	910f      	str	r1, [sp, #60]	; 0x3c
   23624:	ac37      	add	r4, sp, #220	; 0xdc
   23626:	f018 0302 	ands.w	r3, r8, #2
   2362a:	9309      	str	r3, [sp, #36]	; 0x24
   2362c:	d002      	beq.n	23634 <_svfprintf_r+0x294>
   2362e:	9b02      	ldr	r3, [sp, #8]
   23630:	3302      	adds	r3, #2
   23632:	9302      	str	r3, [sp, #8]
   23634:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   23638:	930a      	str	r3, [sp, #40]	; 0x28
   2363a:	d105      	bne.n	23648 <_svfprintf_r+0x2a8>
   2363c:	9b06      	ldr	r3, [sp, #24]
   2363e:	9a02      	ldr	r2, [sp, #8]
   23640:	1a9d      	subs	r5, r3, r2
   23642:	2d00      	cmp	r5, #0
   23644:	f300 8369 	bgt.w	23d1a <_svfprintf_r+0x97a>
   23648:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2364a:	b189      	cbz	r1, 23670 <_svfprintf_r+0x2d0>
   2364c:	9925      	ldr	r1, [sp, #148]	; 0x94
   2364e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   23652:	3101      	adds	r1, #1
   23654:	3201      	adds	r2, #1
   23656:	f8ca 0000 	str.w	r0, [sl]
   2365a:	2907      	cmp	r1, #7
   2365c:	f04f 0001 	mov.w	r0, #1
   23660:	9226      	str	r2, [sp, #152]	; 0x98
   23662:	9125      	str	r1, [sp, #148]	; 0x94
   23664:	f8ca 0004 	str.w	r0, [sl, #4]
   23668:	f300 83a2 	bgt.w	23db0 <_svfprintf_r+0xa10>
   2366c:	f10a 0a08 	add.w	sl, sl, #8
   23670:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23672:	b183      	cbz	r3, 23696 <_svfprintf_r+0x2f6>
   23674:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23676:	a91a      	add	r1, sp, #104	; 0x68
   23678:	3301      	adds	r3, #1
   2367a:	3202      	adds	r2, #2
   2367c:	f8ca 1000 	str.w	r1, [sl]
   23680:	2b07      	cmp	r3, #7
   23682:	f04f 0102 	mov.w	r1, #2
   23686:	9226      	str	r2, [sp, #152]	; 0x98
   23688:	9325      	str	r3, [sp, #148]	; 0x94
   2368a:	f8ca 1004 	str.w	r1, [sl, #4]
   2368e:	f300 83a3 	bgt.w	23dd8 <_svfprintf_r+0xa38>
   23692:	f10a 0a08 	add.w	sl, sl, #8
   23696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23698:	2b80      	cmp	r3, #128	; 0x80
   2369a:	f000 826c 	beq.w	23b76 <_svfprintf_r+0x7d6>
   2369e:	9b03      	ldr	r3, [sp, #12]
   236a0:	9905      	ldr	r1, [sp, #20]
   236a2:	1a5d      	subs	r5, r3, r1
   236a4:	2d00      	cmp	r5, #0
   236a6:	f300 82a5 	bgt.w	23bf4 <_svfprintf_r+0x854>
   236aa:	f418 7f80 	tst.w	r8, #256	; 0x100
   236ae:	f040 820d 	bne.w	23acc <_svfprintf_r+0x72c>
   236b2:	9b05      	ldr	r3, [sp, #20]
   236b4:	f8ca 3004 	str.w	r3, [sl, #4]
   236b8:	441a      	add	r2, r3
   236ba:	9b25      	ldr	r3, [sp, #148]	; 0x94
   236bc:	f8ca 4000 	str.w	r4, [sl]
   236c0:	3301      	adds	r3, #1
   236c2:	2b07      	cmp	r3, #7
   236c4:	9226      	str	r2, [sp, #152]	; 0x98
   236c6:	9325      	str	r3, [sp, #148]	; 0x94
   236c8:	f300 831b 	bgt.w	23d02 <_svfprintf_r+0x962>
   236cc:	f10a 0a08 	add.w	sl, sl, #8
   236d0:	f018 0f04 	tst.w	r8, #4
   236d4:	d005      	beq.n	236e2 <_svfprintf_r+0x342>
   236d6:	9b06      	ldr	r3, [sp, #24]
   236d8:	9902      	ldr	r1, [sp, #8]
   236da:	1a5c      	subs	r4, r3, r1
   236dc:	2c00      	cmp	r4, #0
   236de:	f300 8388 	bgt.w	23df2 <_svfprintf_r+0xa52>
   236e2:	9b04      	ldr	r3, [sp, #16]
   236e4:	9906      	ldr	r1, [sp, #24]
   236e6:	9802      	ldr	r0, [sp, #8]
   236e8:	4281      	cmp	r1, r0
   236ea:	bfac      	ite	ge
   236ec:	185b      	addge	r3, r3, r1
   236ee:	181b      	addlt	r3, r3, r0
   236f0:	9304      	str	r3, [sp, #16]
   236f2:	2a00      	cmp	r2, #0
   236f4:	f040 82b0 	bne.w	23c58 <_svfprintf_r+0x8b8>
   236f8:	2300      	movs	r3, #0
   236fa:	9325      	str	r3, [sp, #148]	; 0x94
   236fc:	9b07      	ldr	r3, [sp, #28]
   236fe:	b11b      	cbz	r3, 23708 <_svfprintf_r+0x368>
   23700:	9907      	ldr	r1, [sp, #28]
   23702:	4658      	mov	r0, fp
   23704:	f7ff f91e 	bl	22944 <_free_r>
   23708:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2370c:	464c      	mov	r4, r9
   2370e:	e679      	b.n	23404 <_svfprintf_r+0x64>
   23710:	930b      	str	r3, [sp, #44]	; 0x2c
   23712:	9b08      	ldr	r3, [sp, #32]
   23714:	3307      	adds	r3, #7
   23716:	f023 0307 	bic.w	r3, r3, #7
   2371a:	ecb3 8b02 	vldmia	r3!, {d8}
   2371e:	eeb0 7bc8 	vabs.f64	d7, d8
   23722:	eeb4 7b49 	vcmp.f64	d7, d9
   23726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2372a:	9308      	str	r3, [sp, #32]
   2372c:	f340 84e9 	ble.w	24102 <_svfprintf_r+0xd62>
   23730:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   23734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23738:	f101 8059 	bmi.w	247ee <_svfprintf_r+0x144e>
   2373c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23740:	4cab      	ldr	r4, [pc, #684]	; (239f0 <_svfprintf_r+0x650>)
   23742:	4bac      	ldr	r3, [pc, #688]	; (239f4 <_svfprintf_r+0x654>)
   23744:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   23748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2374a:	2a47      	cmp	r2, #71	; 0x47
   2374c:	bfc8      	it	gt
   2374e:	461c      	movgt	r4, r3
   23750:	2300      	movs	r3, #0
   23752:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   23756:	2203      	movs	r2, #3
   23758:	9307      	str	r3, [sp, #28]
   2375a:	9202      	str	r2, [sp, #8]
   2375c:	9205      	str	r2, [sp, #20]
   2375e:	9303      	str	r3, [sp, #12]
   23760:	930f      	str	r3, [sp, #60]	; 0x3c
   23762:	2900      	cmp	r1, #0
   23764:	f43f af5f 	beq.w	23626 <_svfprintf_r+0x286>
   23768:	9b02      	ldr	r3, [sp, #8]
   2376a:	3301      	adds	r3, #1
   2376c:	9302      	str	r3, [sp, #8]
   2376e:	e75a      	b.n	23626 <_svfprintf_r+0x286>
   23770:	2b43      	cmp	r3, #67	; 0x43
   23772:	930b      	str	r3, [sp, #44]	; 0x2c
   23774:	d003      	beq.n	2377e <_svfprintf_r+0x3de>
   23776:	f018 0f10 	tst.w	r8, #16
   2377a:	f000 855d 	beq.w	24238 <_svfprintf_r+0xe98>
   2377e:	9d08      	ldr	r5, [sp, #32]
   23780:	2208      	movs	r2, #8
   23782:	2100      	movs	r1, #0
   23784:	a822      	add	r0, sp, #136	; 0x88
   23786:	ac37      	add	r4, sp, #220	; 0xdc
   23788:	f7fe fdba 	bl	22300 <memset>
   2378c:	ab22      	add	r3, sp, #136	; 0x88
   2378e:	f855 2b04 	ldr.w	r2, [r5], #4
   23792:	4621      	mov	r1, r4
   23794:	4658      	mov	r0, fp
   23796:	f002 faed 	bl	25d74 <_wcrtomb_r>
   2379a:	4603      	mov	r3, r0
   2379c:	3301      	adds	r3, #1
   2379e:	9005      	str	r0, [sp, #20]
   237a0:	f001 82ee 	beq.w	24d80 <_svfprintf_r+0x19e0>
   237a4:	9b05      	ldr	r3, [sp, #20]
   237a6:	9508      	str	r5, [sp, #32]
   237a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   237ac:	9302      	str	r3, [sp, #8]
   237ae:	2100      	movs	r1, #0
   237b0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   237b4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   237b8:	9107      	str	r1, [sp, #28]
   237ba:	9103      	str	r1, [sp, #12]
   237bc:	910f      	str	r1, [sp, #60]	; 0x3c
   237be:	e732      	b.n	23626 <_svfprintf_r+0x286>
   237c0:	930b      	str	r3, [sp, #44]	; 0x2c
   237c2:	9b08      	ldr	r3, [sp, #32]
   237c4:	461a      	mov	r2, r3
   237c6:	2300      	movs	r3, #0
   237c8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   237cc:	4613      	mov	r3, r2
   237ce:	f853 4b04 	ldr.w	r4, [r3], #4
   237d2:	9308      	str	r3, [sp, #32]
   237d4:	2c00      	cmp	r4, #0
   237d6:	f000 8548 	beq.w	2426a <_svfprintf_r+0xeca>
   237da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   237dc:	2b53      	cmp	r3, #83	; 0x53
   237de:	f000 86ec 	beq.w	245ba <_svfprintf_r+0x121a>
   237e2:	f018 0310 	ands.w	r3, r8, #16
   237e6:	930c      	str	r3, [sp, #48]	; 0x30
   237e8:	f040 86e7 	bne.w	245ba <_svfprintf_r+0x121a>
   237ec:	9b03      	ldr	r3, [sp, #12]
   237ee:	1c5d      	adds	r5, r3, #1
   237f0:	f001 80e5 	beq.w	249be <_svfprintf_r+0x161e>
   237f4:	990c      	ldr	r1, [sp, #48]	; 0x30
   237f6:	461a      	mov	r2, r3
   237f8:	4620      	mov	r0, r4
   237fa:	f7fe ff49 	bl	22690 <memchr>
   237fe:	9007      	str	r0, [sp, #28]
   23800:	2800      	cmp	r0, #0
   23802:	f001 8328 	beq.w	24e56 <_svfprintf_r+0x1ab6>
   23806:	9b07      	ldr	r3, [sp, #28]
   23808:	1b1a      	subs	r2, r3, r4
   2380a:	9205      	str	r2, [sp, #20]
   2380c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2380e:	9303      	str	r3, [sp, #12]
   23810:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   23814:	930f      	str	r3, [sp, #60]	; 0x3c
   23816:	930d      	str	r3, [sp, #52]	; 0x34
   23818:	9307      	str	r3, [sp, #28]
   2381a:	2373      	movs	r3, #115	; 0x73
   2381c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23820:	9202      	str	r2, [sp, #8]
   23822:	930b      	str	r3, [sp, #44]	; 0x2c
   23824:	e79d      	b.n	23762 <_svfprintf_r+0x3c2>
   23826:	f018 0f20 	tst.w	r8, #32
   2382a:	930b      	str	r3, [sp, #44]	; 0x2c
   2382c:	9b08      	ldr	r3, [sp, #32]
   2382e:	d03d      	beq.n	238ac <_svfprintf_r+0x50c>
   23830:	3307      	adds	r3, #7
   23832:	f023 0307 	bic.w	r3, r3, #7
   23836:	461a      	mov	r2, r3
   23838:	4611      	mov	r1, r2
   2383a:	685b      	ldr	r3, [r3, #4]
   2383c:	f851 2b08 	ldr.w	r2, [r1], #8
   23840:	9108      	str	r1, [sp, #32]
   23842:	4619      	mov	r1, r3
   23844:	2b00      	cmp	r3, #0
   23846:	f2c0 840c 	blt.w	24062 <_svfprintf_r+0xcc2>
   2384a:	9b03      	ldr	r3, [sp, #12]
   2384c:	3301      	adds	r3, #1
   2384e:	f000 829e 	beq.w	23d8e <_svfprintf_r+0x9ee>
   23852:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   23856:	ea52 0301 	orrs.w	r3, r2, r1
   2385a:	9002      	str	r0, [sp, #8]
   2385c:	f040 8299 	bne.w	23d92 <_svfprintf_r+0x9f2>
   23860:	9b03      	ldr	r3, [sp, #12]
   23862:	2b00      	cmp	r3, #0
   23864:	f040 829a 	bne.w	23d9c <_svfprintf_r+0x9fc>
   23868:	4680      	mov	r8, r0
   2386a:	2300      	movs	r3, #0
   2386c:	9303      	str	r3, [sp, #12]
   2386e:	9305      	str	r3, [sp, #20]
   23870:	ac50      	add	r4, sp, #320	; 0x140
   23872:	e106      	b.n	23a82 <_svfprintf_r+0x6e2>
   23874:	9b08      	ldr	r3, [sp, #32]
   23876:	f853 2b04 	ldr.w	r2, [r3], #4
   2387a:	9206      	str	r2, [sp, #24]
   2387c:	2a00      	cmp	r2, #0
   2387e:	f280 8419 	bge.w	240b4 <_svfprintf_r+0xd14>
   23882:	9a06      	ldr	r2, [sp, #24]
   23884:	9308      	str	r3, [sp, #32]
   23886:	4252      	negs	r2, r2
   23888:	9206      	str	r2, [sp, #24]
   2388a:	f899 3000 	ldrb.w	r3, [r9]
   2388e:	f048 0804 	orr.w	r8, r8, #4
   23892:	e5e1      	b.n	23458 <_svfprintf_r+0xb8>
   23894:	f899 3000 	ldrb.w	r3, [r9]
   23898:	f048 0808 	orr.w	r8, r8, #8
   2389c:	e5dc      	b.n	23458 <_svfprintf_r+0xb8>
   2389e:	f048 0810 	orr.w	r8, r8, #16
   238a2:	f018 0f20 	tst.w	r8, #32
   238a6:	930b      	str	r3, [sp, #44]	; 0x2c
   238a8:	9b08      	ldr	r3, [sp, #32]
   238aa:	d1c1      	bne.n	23830 <_svfprintf_r+0x490>
   238ac:	f018 0f10 	tst.w	r8, #16
   238b0:	f040 840b 	bne.w	240ca <_svfprintf_r+0xd2a>
   238b4:	f018 0f40 	tst.w	r8, #64	; 0x40
   238b8:	f000 8403 	beq.w	240c2 <_svfprintf_r+0xd22>
   238bc:	f933 2b04 	ldrsh.w	r2, [r3], #4
   238c0:	9308      	str	r3, [sp, #32]
   238c2:	17d1      	asrs	r1, r2, #31
   238c4:	460b      	mov	r3, r1
   238c6:	e7bd      	b.n	23844 <_svfprintf_r+0x4a4>
   238c8:	9b08      	ldr	r3, [sp, #32]
   238ca:	f048 0202 	orr.w	r2, r8, #2
   238ce:	9202      	str	r2, [sp, #8]
   238d0:	f853 2b04 	ldr.w	r2, [r3], #4
   238d4:	9308      	str	r3, [sp, #32]
   238d6:	f647 0330 	movw	r3, #30768	; 0x7830
   238da:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   238de:	2078      	movs	r0, #120	; 0x78
   238e0:	4b45      	ldr	r3, [pc, #276]	; (239f8 <_svfprintf_r+0x658>)
   238e2:	9311      	str	r3, [sp, #68]	; 0x44
   238e4:	2100      	movs	r1, #0
   238e6:	2302      	movs	r3, #2
   238e8:	900b      	str	r0, [sp, #44]	; 0x2c
   238ea:	2000      	movs	r0, #0
   238ec:	9c03      	ldr	r4, [sp, #12]
   238ee:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   238f2:	1c60      	adds	r0, r4, #1
   238f4:	f000 80ad 	beq.w	23a52 <_svfprintf_r+0x6b2>
   238f8:	9802      	ldr	r0, [sp, #8]
   238fa:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   238fe:	ea52 0001 	orrs.w	r0, r2, r1
   23902:	f040 80a4 	bne.w	23a4e <_svfprintf_r+0x6ae>
   23906:	2c00      	cmp	r4, #0
   23908:	f040 86ae 	bne.w	24668 <_svfprintf_r+0x12c8>
   2390c:	2b00      	cmp	r3, #0
   2390e:	d1ac      	bne.n	2386a <_svfprintf_r+0x4ca>
   23910:	9b02      	ldr	r3, [sp, #8]
   23912:	f013 0301 	ands.w	r3, r3, #1
   23916:	9305      	str	r3, [sp, #20]
   23918:	f000 83d1 	beq.w	240be <_svfprintf_r+0xd1e>
   2391c:	2330      	movs	r3, #48	; 0x30
   2391e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   23922:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   23926:	e0ac      	b.n	23a82 <_svfprintf_r+0x6e2>
   23928:	f018 0f20 	tst.w	r8, #32
   2392c:	f040 83d4 	bne.w	240d8 <_svfprintf_r+0xd38>
   23930:	f018 0f10 	tst.w	r8, #16
   23934:	f040 869f 	bne.w	24676 <_svfprintf_r+0x12d6>
   23938:	f018 0f40 	tst.w	r8, #64	; 0x40
   2393c:	f040 8797 	bne.w	2486e <_svfprintf_r+0x14ce>
   23940:	f418 7f00 	tst.w	r8, #512	; 0x200
   23944:	f000 8697 	beq.w	24676 <_svfprintf_r+0x12d6>
   23948:	9b08      	ldr	r3, [sp, #32]
   2394a:	9904      	ldr	r1, [sp, #16]
   2394c:	f853 2b04 	ldr.w	r2, [r3], #4
   23950:	9308      	str	r3, [sp, #32]
   23952:	7011      	strb	r1, [r2, #0]
   23954:	464c      	mov	r4, r9
   23956:	e555      	b.n	23404 <_svfprintf_r+0x64>
   23958:	f899 3000 	ldrb.w	r3, [r9]
   2395c:	2b68      	cmp	r3, #104	; 0x68
   2395e:	bf03      	ittte	eq
   23960:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   23964:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   23968:	f109 0901 	addeq.w	r9, r9, #1
   2396c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   23970:	e572      	b.n	23458 <_svfprintf_r+0xb8>
   23972:	f899 3000 	ldrb.w	r3, [r9]
   23976:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   2397a:	e56d      	b.n	23458 <_svfprintf_r+0xb8>
   2397c:	f899 3000 	ldrb.w	r3, [r9]
   23980:	2b6c      	cmp	r3, #108	; 0x6c
   23982:	bf03      	ittte	eq
   23984:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   23988:	f048 0820 	orreq.w	r8, r8, #32
   2398c:	f109 0901 	addeq.w	r9, r9, #1
   23990:	f048 0810 	orrne.w	r8, r8, #16
   23994:	e560      	b.n	23458 <_svfprintf_r+0xb8>
   23996:	930b      	str	r3, [sp, #44]	; 0x2c
   23998:	f048 0810 	orr.w	r8, r8, #16
   2399c:	f018 0120 	ands.w	r1, r8, #32
   239a0:	f000 8351 	beq.w	24046 <_svfprintf_r+0xca6>
   239a4:	9b08      	ldr	r3, [sp, #32]
   239a6:	3307      	adds	r3, #7
   239a8:	f023 0307 	bic.w	r3, r3, #7
   239ac:	6859      	ldr	r1, [r3, #4]
   239ae:	f853 2b08 	ldr.w	r2, [r3], #8
   239b2:	9308      	str	r3, [sp, #32]
   239b4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   239b8:	9302      	str	r3, [sp, #8]
   239ba:	2300      	movs	r3, #0
   239bc:	e795      	b.n	238ea <_svfprintf_r+0x54a>
   239be:	930b      	str	r3, [sp, #44]	; 0x2c
   239c0:	f048 0310 	orr.w	r3, r8, #16
   239c4:	9302      	str	r3, [sp, #8]
   239c6:	9b02      	ldr	r3, [sp, #8]
   239c8:	f013 0120 	ands.w	r1, r3, #32
   239cc:	f000 8329 	beq.w	24022 <_svfprintf_r+0xc82>
   239d0:	9b08      	ldr	r3, [sp, #32]
   239d2:	3307      	adds	r3, #7
   239d4:	f023 0307 	bic.w	r3, r3, #7
   239d8:	6859      	ldr	r1, [r3, #4]
   239da:	f853 2b08 	ldr.w	r2, [r3], #8
   239de:	9308      	str	r3, [sp, #32]
   239e0:	2301      	movs	r3, #1
   239e2:	e782      	b.n	238ea <_svfprintf_r+0x54a>
   239e4:	f899 3000 	ldrb.w	r3, [r9]
   239e8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   239ec:	e534      	b.n	23458 <_svfprintf_r+0xb8>
   239ee:	bf00      	nop
   239f0:	20004390 	.word	0x20004390
   239f4:	20003ab0 	.word	0x20003ab0
   239f8:	20004398 	.word	0x20004398
   239fc:	4649      	mov	r1, r9
   239fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   23a02:	2b2a      	cmp	r3, #42	; 0x2a
   23a04:	f001 8249 	beq.w	24e9a <_svfprintf_r+0x1afa>
   23a08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   23a0c:	2a09      	cmp	r2, #9
   23a0e:	4689      	mov	r9, r1
   23a10:	bf98      	it	ls
   23a12:	2100      	movls	r1, #0
   23a14:	f201 8144 	bhi.w	24ca0 <_svfprintf_r+0x1900>
   23a18:	f819 3b01 	ldrb.w	r3, [r9], #1
   23a1c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   23a20:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   23a24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   23a28:	2a09      	cmp	r2, #9
   23a2a:	d9f5      	bls.n	23a18 <_svfprintf_r+0x678>
   23a2c:	9103      	str	r1, [sp, #12]
   23a2e:	e515      	b.n	2345c <_svfprintf_r+0xbc>
   23a30:	f899 3000 	ldrb.w	r3, [r9]
   23a34:	f048 0801 	orr.w	r8, r8, #1
   23a38:	e50e      	b.n	23458 <_svfprintf_r+0xb8>
   23a3a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   23a3e:	2b00      	cmp	r3, #0
   23a40:	f47f ad8f 	bne.w	23562 <_svfprintf_r+0x1c2>
   23a44:	f899 3000 	ldrb.w	r3, [r9]
   23a48:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   23a4c:	e504      	b.n	23458 <_svfprintf_r+0xb8>
   23a4e:	f8cd 8008 	str.w	r8, [sp, #8]
   23a52:	2b01      	cmp	r3, #1
   23a54:	f000 819d 	beq.w	23d92 <_svfprintf_r+0x9f2>
   23a58:	2b02      	cmp	r3, #2
   23a5a:	ac50      	add	r4, sp, #320	; 0x140
   23a5c:	d120      	bne.n	23aa0 <_svfprintf_r+0x700>
   23a5e:	9811      	ldr	r0, [sp, #68]	; 0x44
   23a60:	f002 030f 	and.w	r3, r2, #15
   23a64:	0912      	lsrs	r2, r2, #4
   23a66:	5cc3      	ldrb	r3, [r0, r3]
   23a68:	f804 3d01 	strb.w	r3, [r4, #-1]!
   23a6c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   23a70:	0909      	lsrs	r1, r1, #4
   23a72:	ea52 0301 	orrs.w	r3, r2, r1
   23a76:	d1f3      	bne.n	23a60 <_svfprintf_r+0x6c0>
   23a78:	ab50      	add	r3, sp, #320	; 0x140
   23a7a:	1b1b      	subs	r3, r3, r4
   23a7c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   23a80:	9305      	str	r3, [sp, #20]
   23a82:	9a05      	ldr	r2, [sp, #20]
   23a84:	9803      	ldr	r0, [sp, #12]
   23a86:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23a8a:	4282      	cmp	r2, r0
   23a8c:	f04f 0300 	mov.w	r3, #0
   23a90:	bfb8      	it	lt
   23a92:	4602      	movlt	r2, r0
   23a94:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   23a98:	9307      	str	r3, [sp, #28]
   23a9a:	9202      	str	r2, [sp, #8]
   23a9c:	930f      	str	r3, [sp, #60]	; 0x3c
   23a9e:	e660      	b.n	23762 <_svfprintf_r+0x3c2>
   23aa0:	f002 0307 	and.w	r3, r2, #7
   23aa4:	08d2      	lsrs	r2, r2, #3
   23aa6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   23aaa:	08c9      	lsrs	r1, r1, #3
   23aac:	3330      	adds	r3, #48	; 0x30
   23aae:	ea52 0501 	orrs.w	r5, r2, r1
   23ab2:	4620      	mov	r0, r4
   23ab4:	f804 3d01 	strb.w	r3, [r4, #-1]!
   23ab8:	d1f2      	bne.n	23aa0 <_svfprintf_r+0x700>
   23aba:	9a02      	ldr	r2, [sp, #8]
   23abc:	07d1      	lsls	r1, r2, #31
   23abe:	f100 824d 	bmi.w	23f5c <_svfprintf_r+0xbbc>
   23ac2:	ab50      	add	r3, sp, #320	; 0x140
   23ac4:	1b1b      	subs	r3, r3, r4
   23ac6:	4690      	mov	r8, r2
   23ac8:	9305      	str	r3, [sp, #20]
   23aca:	e7da      	b.n	23a82 <_svfprintf_r+0x6e2>
   23acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23ace:	2b65      	cmp	r3, #101	; 0x65
   23ad0:	f340 80d4 	ble.w	23c7c <_svfprintf_r+0x8dc>
   23ad4:	eeb5 8b40 	vcmp.f64	d8, #0.0
   23ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23adc:	f040 81c1 	bne.w	23e62 <_svfprintf_r+0xac2>
   23ae0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23ae2:	49ba      	ldr	r1, [pc, #744]	; (23dcc <_svfprintf_r+0xa2c>)
   23ae4:	f8ca 1000 	str.w	r1, [sl]
   23ae8:	3301      	adds	r3, #1
   23aea:	3201      	adds	r2, #1
   23aec:	2101      	movs	r1, #1
   23aee:	2b07      	cmp	r3, #7
   23af0:	9226      	str	r2, [sp, #152]	; 0x98
   23af2:	9325      	str	r3, [sp, #148]	; 0x94
   23af4:	f8ca 1004 	str.w	r1, [sl, #4]
   23af8:	f300 8551 	bgt.w	2459e <_svfprintf_r+0x11fe>
   23afc:	f10a 0a08 	add.w	sl, sl, #8
   23b00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   23b02:	990e      	ldr	r1, [sp, #56]	; 0x38
   23b04:	428b      	cmp	r3, r1
   23b06:	f280 82d0 	bge.w	240aa <_svfprintf_r+0xd0a>
   23b0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23b0c:	9912      	ldr	r1, [sp, #72]	; 0x48
   23b0e:	441a      	add	r2, r3
   23b10:	e9ca 1300 	strd	r1, r3, [sl]
   23b14:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23b16:	9226      	str	r2, [sp, #152]	; 0x98
   23b18:	3301      	adds	r3, #1
   23b1a:	2b07      	cmp	r3, #7
   23b1c:	9325      	str	r3, [sp, #148]	; 0x94
   23b1e:	f300 8397 	bgt.w	24250 <_svfprintf_r+0xeb0>
   23b22:	f10a 0a08 	add.w	sl, sl, #8
   23b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23b28:	1e5c      	subs	r4, r3, #1
   23b2a:	2c00      	cmp	r4, #0
   23b2c:	f77f add0 	ble.w	236d0 <_svfprintf_r+0x330>
   23b30:	2c10      	cmp	r4, #16
   23b32:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23b34:	f340 856e 	ble.w	24614 <_svfprintf_r+0x1274>
   23b38:	ee1b 6a10 	vmov	r6, s22
   23b3c:	2510      	movs	r5, #16
   23b3e:	e005      	b.n	23b4c <_svfprintf_r+0x7ac>
   23b40:	f10a 0a08 	add.w	sl, sl, #8
   23b44:	3c10      	subs	r4, #16
   23b46:	2c10      	cmp	r4, #16
   23b48:	f340 8564 	ble.w	24614 <_svfprintf_r+0x1274>
   23b4c:	3301      	adds	r3, #1
   23b4e:	49a0      	ldr	r1, [pc, #640]	; (23dd0 <_svfprintf_r+0xa30>)
   23b50:	3210      	adds	r2, #16
   23b52:	2b07      	cmp	r3, #7
   23b54:	e9ca 1500 	strd	r1, r5, [sl]
   23b58:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23b5c:	ddf0      	ble.n	23b40 <_svfprintf_r+0x7a0>
   23b5e:	aa24      	add	r2, sp, #144	; 0x90
   23b60:	4631      	mov	r1, r6
   23b62:	4658      	mov	r0, fp
   23b64:	f003 f8ee 	bl	26d44 <__ssprint_r>
   23b68:	2800      	cmp	r0, #0
   23b6a:	d17e      	bne.n	23c6a <_svfprintf_r+0x8ca>
   23b6c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23b70:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23b74:	e7e6      	b.n	23b44 <_svfprintf_r+0x7a4>
   23b76:	9b06      	ldr	r3, [sp, #24]
   23b78:	9902      	ldr	r1, [sp, #8]
   23b7a:	1a5d      	subs	r5, r3, r1
   23b7c:	2d00      	cmp	r5, #0
   23b7e:	f77f ad8e 	ble.w	2369e <_svfprintf_r+0x2fe>
   23b82:	2d10      	cmp	r5, #16
   23b84:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23b86:	dd21      	ble.n	23bcc <_svfprintf_r+0x82c>
   23b88:	9409      	str	r4, [sp, #36]	; 0x24
   23b8a:	2610      	movs	r6, #16
   23b8c:	ee1b 4a10 	vmov	r4, s22
   23b90:	e004      	b.n	23b9c <_svfprintf_r+0x7fc>
   23b92:	3d10      	subs	r5, #16
   23b94:	2d10      	cmp	r5, #16
   23b96:	f10a 0a08 	add.w	sl, sl, #8
   23b9a:	dd16      	ble.n	23bca <_svfprintf_r+0x82a>
   23b9c:	3301      	adds	r3, #1
   23b9e:	498c      	ldr	r1, [pc, #560]	; (23dd0 <_svfprintf_r+0xa30>)
   23ba0:	3210      	adds	r2, #16
   23ba2:	2b07      	cmp	r3, #7
   23ba4:	e9ca 1600 	strd	r1, r6, [sl]
   23ba8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23bac:	ddf1      	ble.n	23b92 <_svfprintf_r+0x7f2>
   23bae:	aa24      	add	r2, sp, #144	; 0x90
   23bb0:	4621      	mov	r1, r4
   23bb2:	4658      	mov	r0, fp
   23bb4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23bb8:	f003 f8c4 	bl	26d44 <__ssprint_r>
   23bbc:	2800      	cmp	r0, #0
   23bbe:	d154      	bne.n	23c6a <_svfprintf_r+0x8ca>
   23bc0:	3d10      	subs	r5, #16
   23bc2:	2d10      	cmp	r5, #16
   23bc4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23bc8:	dce8      	bgt.n	23b9c <_svfprintf_r+0x7fc>
   23bca:	9c09      	ldr	r4, [sp, #36]	; 0x24
   23bcc:	4980      	ldr	r1, [pc, #512]	; (23dd0 <_svfprintf_r+0xa30>)
   23bce:	f8ca 5004 	str.w	r5, [sl, #4]
   23bd2:	3301      	adds	r3, #1
   23bd4:	442a      	add	r2, r5
   23bd6:	2b07      	cmp	r3, #7
   23bd8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23bdc:	f8ca 1000 	str.w	r1, [sl]
   23be0:	f300 8526 	bgt.w	24630 <_svfprintf_r+0x1290>
   23be4:	9b03      	ldr	r3, [sp, #12]
   23be6:	9905      	ldr	r1, [sp, #20]
   23be8:	1a5d      	subs	r5, r3, r1
   23bea:	2d00      	cmp	r5, #0
   23bec:	f10a 0a08 	add.w	sl, sl, #8
   23bf0:	f77f ad5b 	ble.w	236aa <_svfprintf_r+0x30a>
   23bf4:	2d10      	cmp	r5, #16
   23bf6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23bf8:	dd1f      	ble.n	23c3a <_svfprintf_r+0x89a>
   23bfa:	4651      	mov	r1, sl
   23bfc:	2610      	movs	r6, #16
   23bfe:	ee1b aa10 	vmov	sl, s22
   23c02:	e004      	b.n	23c0e <_svfprintf_r+0x86e>
   23c04:	3d10      	subs	r5, #16
   23c06:	2d10      	cmp	r5, #16
   23c08:	f101 0108 	add.w	r1, r1, #8
   23c0c:	dd14      	ble.n	23c38 <_svfprintf_r+0x898>
   23c0e:	3301      	adds	r3, #1
   23c10:	486f      	ldr	r0, [pc, #444]	; (23dd0 <_svfprintf_r+0xa30>)
   23c12:	3210      	adds	r2, #16
   23c14:	2b07      	cmp	r3, #7
   23c16:	e9c1 0600 	strd	r0, r6, [r1]
   23c1a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23c1e:	ddf1      	ble.n	23c04 <_svfprintf_r+0x864>
   23c20:	aa24      	add	r2, sp, #144	; 0x90
   23c22:	4651      	mov	r1, sl
   23c24:	4658      	mov	r0, fp
   23c26:	f003 f88d 	bl	26d44 <__ssprint_r>
   23c2a:	b9f0      	cbnz	r0, 23c6a <_svfprintf_r+0x8ca>
   23c2c:	3d10      	subs	r5, #16
   23c2e:	2d10      	cmp	r5, #16
   23c30:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23c34:	a927      	add	r1, sp, #156	; 0x9c
   23c36:	dcea      	bgt.n	23c0e <_svfprintf_r+0x86e>
   23c38:	468a      	mov	sl, r1
   23c3a:	3301      	adds	r3, #1
   23c3c:	4964      	ldr	r1, [pc, #400]	; (23dd0 <_svfprintf_r+0xa30>)
   23c3e:	f8ca 5004 	str.w	r5, [sl, #4]
   23c42:	442a      	add	r2, r5
   23c44:	2b07      	cmp	r3, #7
   23c46:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23c4a:	f8ca 1000 	str.w	r1, [sl]
   23c4e:	f300 81da 	bgt.w	24006 <_svfprintf_r+0xc66>
   23c52:	f10a 0a08 	add.w	sl, sl, #8
   23c56:	e528      	b.n	236aa <_svfprintf_r+0x30a>
   23c58:	ee1b 1a10 	vmov	r1, s22
   23c5c:	aa24      	add	r2, sp, #144	; 0x90
   23c5e:	4658      	mov	r0, fp
   23c60:	f003 f870 	bl	26d44 <__ssprint_r>
   23c64:	2800      	cmp	r0, #0
   23c66:	f43f ad47 	beq.w	236f8 <_svfprintf_r+0x358>
   23c6a:	9b07      	ldr	r3, [sp, #28]
   23c6c:	2b00      	cmp	r3, #0
   23c6e:	f43f aca2 	beq.w	235b6 <_svfprintf_r+0x216>
   23c72:	9907      	ldr	r1, [sp, #28]
   23c74:	4658      	mov	r0, fp
   23c76:	f7fe fe65 	bl	22944 <_free_r>
   23c7a:	e49c      	b.n	235b6 <_svfprintf_r+0x216>
   23c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23c7e:	2b01      	cmp	r3, #1
   23c80:	f340 817a 	ble.w	23f78 <_svfprintf_r+0xbd8>
   23c84:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23c86:	f8ca 4000 	str.w	r4, [sl]
   23c8a:	3301      	adds	r3, #1
   23c8c:	3201      	adds	r2, #1
   23c8e:	2101      	movs	r1, #1
   23c90:	2b07      	cmp	r3, #7
   23c92:	9226      	str	r2, [sp, #152]	; 0x98
   23c94:	9325      	str	r3, [sp, #148]	; 0x94
   23c96:	f8ca 1004 	str.w	r1, [sl, #4]
   23c9a:	f300 81f8 	bgt.w	2408e <_svfprintf_r+0xcee>
   23c9e:	f10a 0a08 	add.w	sl, sl, #8
   23ca2:	9910      	ldr	r1, [sp, #64]	; 0x40
   23ca4:	9812      	ldr	r0, [sp, #72]	; 0x48
   23ca6:	3301      	adds	r3, #1
   23ca8:	440a      	add	r2, r1
   23caa:	2b07      	cmp	r3, #7
   23cac:	e9ca 0100 	strd	r0, r1, [sl]
   23cb0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23cb4:	f300 81dd 	bgt.w	24072 <_svfprintf_r+0xcd2>
   23cb8:	f10a 0a08 	add.w	sl, sl, #8
   23cbc:	eeb5 8b40 	vcmp.f64	d8, #0.0
   23cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23cc4:	f000 8177 	beq.w	23fb6 <_svfprintf_r+0xc16>
   23cc8:	990e      	ldr	r1, [sp, #56]	; 0x38
   23cca:	3301      	adds	r3, #1
   23ccc:	3901      	subs	r1, #1
   23cce:	3401      	adds	r4, #1
   23cd0:	440a      	add	r2, r1
   23cd2:	2b07      	cmp	r3, #7
   23cd4:	f8ca 4000 	str.w	r4, [sl]
   23cd8:	9325      	str	r3, [sp, #148]	; 0x94
   23cda:	f8ca 1004 	str.w	r1, [sl, #4]
   23cde:	9226      	str	r2, [sp, #152]	; 0x98
   23ce0:	f300 815b 	bgt.w	23f9a <_svfprintf_r+0xbfa>
   23ce4:	f10a 0a08 	add.w	sl, sl, #8
   23ce8:	9914      	ldr	r1, [sp, #80]	; 0x50
   23cea:	f8ca 1004 	str.w	r1, [sl, #4]
   23cee:	3301      	adds	r3, #1
   23cf0:	440a      	add	r2, r1
   23cf2:	2b07      	cmp	r3, #7
   23cf4:	a91e      	add	r1, sp, #120	; 0x78
   23cf6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23cfa:	f8ca 1000 	str.w	r1, [sl]
   23cfe:	f77f ace5 	ble.w	236cc <_svfprintf_r+0x32c>
   23d02:	ee1b 1a10 	vmov	r1, s22
   23d06:	aa24      	add	r2, sp, #144	; 0x90
   23d08:	4658      	mov	r0, fp
   23d0a:	f003 f81b 	bl	26d44 <__ssprint_r>
   23d0e:	2800      	cmp	r0, #0
   23d10:	d1ab      	bne.n	23c6a <_svfprintf_r+0x8ca>
   23d12:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23d14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23d18:	e4da      	b.n	236d0 <_svfprintf_r+0x330>
   23d1a:	2d10      	cmp	r5, #16
   23d1c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   23d20:	4e2c      	ldr	r6, [pc, #176]	; (23dd4 <_svfprintf_r+0xa34>)
   23d22:	dd24      	ble.n	23d6e <_svfprintf_r+0x9ce>
   23d24:	9417      	str	r4, [sp, #92]	; 0x5c
   23d26:	2310      	movs	r3, #16
   23d28:	ee1b 4a10 	vmov	r4, s22
   23d2c:	4608      	mov	r0, r1
   23d2e:	e004      	b.n	23d3a <_svfprintf_r+0x99a>
   23d30:	3d10      	subs	r5, #16
   23d32:	2d10      	cmp	r5, #16
   23d34:	f10a 0a08 	add.w	sl, sl, #8
   23d38:	dd17      	ble.n	23d6a <_svfprintf_r+0x9ca>
   23d3a:	3001      	adds	r0, #1
   23d3c:	3210      	adds	r2, #16
   23d3e:	2807      	cmp	r0, #7
   23d40:	e9ca 6300 	strd	r6, r3, [sl]
   23d44:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   23d48:	ddf2      	ble.n	23d30 <_svfprintf_r+0x990>
   23d4a:	aa24      	add	r2, sp, #144	; 0x90
   23d4c:	4621      	mov	r1, r4
   23d4e:	4658      	mov	r0, fp
   23d50:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23d54:	f002 fff6 	bl	26d44 <__ssprint_r>
   23d58:	2800      	cmp	r0, #0
   23d5a:	d186      	bne.n	23c6a <_svfprintf_r+0x8ca>
   23d5c:	3d10      	subs	r5, #16
   23d5e:	2d10      	cmp	r5, #16
   23d60:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   23d64:	f04f 0310 	mov.w	r3, #16
   23d68:	dce7      	bgt.n	23d3a <_svfprintf_r+0x99a>
   23d6a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   23d6c:	4601      	mov	r1, r0
   23d6e:	3101      	adds	r1, #1
   23d70:	442a      	add	r2, r5
   23d72:	2907      	cmp	r1, #7
   23d74:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   23d78:	f8ca 6000 	str.w	r6, [sl]
   23d7c:	f8ca 5004 	str.w	r5, [sl, #4]
   23d80:	f300 83bd 	bgt.w	244fe <_svfprintf_r+0x115e>
   23d84:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23d88:	f10a 0a08 	add.w	sl, sl, #8
   23d8c:	e45d      	b.n	2364a <_svfprintf_r+0x2aa>
   23d8e:	f8cd 8008 	str.w	r8, [sp, #8]
   23d92:	2a0a      	cmp	r2, #10
   23d94:	f171 0300 	sbcs.w	r3, r1, #0
   23d98:	f080 8345 	bcs.w	24426 <_svfprintf_r+0x1086>
   23d9c:	3230      	adds	r2, #48	; 0x30
   23d9e:	2301      	movs	r3, #1
   23da0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   23da4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   23da8:	9305      	str	r3, [sp, #20]
   23daa:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   23dae:	e668      	b.n	23a82 <_svfprintf_r+0x6e2>
   23db0:	ee1b 1a10 	vmov	r1, s22
   23db4:	aa24      	add	r2, sp, #144	; 0x90
   23db6:	4658      	mov	r0, fp
   23db8:	f002 ffc4 	bl	26d44 <__ssprint_r>
   23dbc:	2800      	cmp	r0, #0
   23dbe:	f47f af54 	bne.w	23c6a <_svfprintf_r+0x8ca>
   23dc2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23dc4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23dc8:	e452      	b.n	23670 <_svfprintf_r+0x2d0>
   23dca:	bf00      	nop
   23dcc:	20004f58 	.word	0x20004f58
   23dd0:	20008964 	.word	0x20008964
   23dd4:	20004bc8 	.word	0x20004bc8
   23dd8:	ee1b 1a10 	vmov	r1, s22
   23ddc:	aa24      	add	r2, sp, #144	; 0x90
   23dde:	4658      	mov	r0, fp
   23de0:	f002 ffb0 	bl	26d44 <__ssprint_r>
   23de4:	2800      	cmp	r0, #0
   23de6:	f47f af40 	bne.w	23c6a <_svfprintf_r+0x8ca>
   23dea:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23dec:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23df0:	e451      	b.n	23696 <_svfprintf_r+0x2f6>
   23df2:	2c10      	cmp	r4, #16
   23df4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23df6:	4ebe      	ldr	r6, [pc, #760]	; (240f0 <_svfprintf_r+0xd50>)
   23df8:	dd1f      	ble.n	23e3a <_svfprintf_r+0xa9a>
   23dfa:	ee1b 8a10 	vmov	r8, s22
   23dfe:	2510      	movs	r5, #16
   23e00:	e004      	b.n	23e0c <_svfprintf_r+0xa6c>
   23e02:	3c10      	subs	r4, #16
   23e04:	2c10      	cmp	r4, #16
   23e06:	f10a 0a08 	add.w	sl, sl, #8
   23e0a:	dd16      	ble.n	23e3a <_svfprintf_r+0xa9a>
   23e0c:	3301      	adds	r3, #1
   23e0e:	3210      	adds	r2, #16
   23e10:	2b07      	cmp	r3, #7
   23e12:	e9ca 6500 	strd	r6, r5, [sl]
   23e16:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23e1a:	ddf2      	ble.n	23e02 <_svfprintf_r+0xa62>
   23e1c:	aa24      	add	r2, sp, #144	; 0x90
   23e1e:	4641      	mov	r1, r8
   23e20:	4658      	mov	r0, fp
   23e22:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23e26:	f002 ff8d 	bl	26d44 <__ssprint_r>
   23e2a:	2800      	cmp	r0, #0
   23e2c:	f47f af1d 	bne.w	23c6a <_svfprintf_r+0x8ca>
   23e30:	3c10      	subs	r4, #16
   23e32:	2c10      	cmp	r4, #16
   23e34:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23e38:	dce8      	bgt.n	23e0c <_svfprintf_r+0xa6c>
   23e3a:	3301      	adds	r3, #1
   23e3c:	4422      	add	r2, r4
   23e3e:	2b07      	cmp	r3, #7
   23e40:	e9ca 6400 	strd	r6, r4, [sl]
   23e44:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23e48:	f77f ac4b 	ble.w	236e2 <_svfprintf_r+0x342>
   23e4c:	ee1b 1a10 	vmov	r1, s22
   23e50:	aa24      	add	r2, sp, #144	; 0x90
   23e52:	4658      	mov	r0, fp
   23e54:	f002 ff76 	bl	26d44 <__ssprint_r>
   23e58:	2800      	cmp	r0, #0
   23e5a:	f47f af06 	bne.w	23c6a <_svfprintf_r+0x8ca>
   23e5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23e60:	e43f      	b.n	236e2 <_svfprintf_r+0x342>
   23e62:	991b      	ldr	r1, [sp, #108]	; 0x6c
   23e64:	2900      	cmp	r1, #0
   23e66:	f340 835a 	ble.w	2451e <_svfprintf_r+0x117e>
   23e6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   23e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23e6e:	429e      	cmp	r6, r3
   23e70:	bfa8      	it	ge
   23e72:	461e      	movge	r6, r3
   23e74:	2e00      	cmp	r6, #0
   23e76:	dd0b      	ble.n	23e90 <_svfprintf_r+0xaf0>
   23e78:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23e7a:	3301      	adds	r3, #1
   23e7c:	4432      	add	r2, r6
   23e7e:	2b07      	cmp	r3, #7
   23e80:	e9ca 4600 	strd	r4, r6, [sl]
   23e84:	9226      	str	r2, [sp, #152]	; 0x98
   23e86:	9325      	str	r3, [sp, #148]	; 0x94
   23e88:	f300 8689 	bgt.w	24b9e <_svfprintf_r+0x17fe>
   23e8c:	f10a 0a08 	add.w	sl, sl, #8
   23e90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23e92:	2e00      	cmp	r6, #0
   23e94:	bfa8      	it	ge
   23e96:	1bad      	subge	r5, r5, r6
   23e98:	2d00      	cmp	r5, #0
   23e9a:	f300 8203 	bgt.w	242a4 <_svfprintf_r+0xf04>
   23e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23ea0:	f418 6f80 	tst.w	r8, #1024	; 0x400
   23ea4:	4423      	add	r3, r4
   23ea6:	9305      	str	r3, [sp, #20]
   23ea8:	f040 821f 	bne.w	242ea <_svfprintf_r+0xf4a>
   23eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   23eae:	990e      	ldr	r1, [sp, #56]	; 0x38
   23eb0:	428b      	cmp	r3, r1
   23eb2:	db03      	blt.n	23ebc <_svfprintf_r+0xb1c>
   23eb4:	f018 0f01 	tst.w	r8, #1
   23eb8:	f000 84cf 	beq.w	2485a <_svfprintf_r+0x14ba>
   23ebc:	9910      	ldr	r1, [sp, #64]	; 0x40
   23ebe:	9812      	ldr	r0, [sp, #72]	; 0x48
   23ec0:	440a      	add	r2, r1
   23ec2:	e9ca 0100 	strd	r0, r1, [sl]
   23ec6:	9925      	ldr	r1, [sp, #148]	; 0x94
   23ec8:	9226      	str	r2, [sp, #152]	; 0x98
   23eca:	3101      	adds	r1, #1
   23ecc:	2907      	cmp	r1, #7
   23ece:	9125      	str	r1, [sp, #148]	; 0x94
   23ed0:	f300 86a5 	bgt.w	24c1e <_svfprintf_r+0x187e>
   23ed4:	f10a 0a08 	add.w	sl, sl, #8
   23ed8:	990e      	ldr	r1, [sp, #56]	; 0x38
   23eda:	1865      	adds	r5, r4, r1
   23edc:	1acc      	subs	r4, r1, r3
   23ede:	9b05      	ldr	r3, [sp, #20]
   23ee0:	1aed      	subs	r5, r5, r3
   23ee2:	42a5      	cmp	r5, r4
   23ee4:	bfa8      	it	ge
   23ee6:	4625      	movge	r5, r4
   23ee8:	2d00      	cmp	r5, #0
   23eea:	dd0d      	ble.n	23f08 <_svfprintf_r+0xb68>
   23eec:	f8ca 3000 	str.w	r3, [sl]
   23ef0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23ef2:	f8ca 5004 	str.w	r5, [sl, #4]
   23ef6:	3301      	adds	r3, #1
   23ef8:	442a      	add	r2, r5
   23efa:	2b07      	cmp	r3, #7
   23efc:	9226      	str	r2, [sp, #152]	; 0x98
   23efe:	9325      	str	r3, [sp, #148]	; 0x94
   23f00:	f300 86bb 	bgt.w	24c7a <_svfprintf_r+0x18da>
   23f04:	f10a 0a08 	add.w	sl, sl, #8
   23f08:	2d00      	cmp	r5, #0
   23f0a:	bfa8      	it	ge
   23f0c:	1b64      	subge	r4, r4, r5
   23f0e:	2c00      	cmp	r4, #0
   23f10:	f77f abde 	ble.w	236d0 <_svfprintf_r+0x330>
   23f14:	2c10      	cmp	r4, #16
   23f16:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23f18:	f340 837c 	ble.w	24614 <_svfprintf_r+0x1274>
   23f1c:	ee1b 6a10 	vmov	r6, s22
   23f20:	2510      	movs	r5, #16
   23f22:	e005      	b.n	23f30 <_svfprintf_r+0xb90>
   23f24:	f10a 0a08 	add.w	sl, sl, #8
   23f28:	3c10      	subs	r4, #16
   23f2a:	2c10      	cmp	r4, #16
   23f2c:	f340 8372 	ble.w	24614 <_svfprintf_r+0x1274>
   23f30:	3301      	adds	r3, #1
   23f32:	4970      	ldr	r1, [pc, #448]	; (240f4 <_svfprintf_r+0xd54>)
   23f34:	3210      	adds	r2, #16
   23f36:	2b07      	cmp	r3, #7
   23f38:	e9ca 1500 	strd	r1, r5, [sl]
   23f3c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23f40:	ddf0      	ble.n	23f24 <_svfprintf_r+0xb84>
   23f42:	aa24      	add	r2, sp, #144	; 0x90
   23f44:	4631      	mov	r1, r6
   23f46:	4658      	mov	r0, fp
   23f48:	f002 fefc 	bl	26d44 <__ssprint_r>
   23f4c:	2800      	cmp	r0, #0
   23f4e:	f47f ae8c 	bne.w	23c6a <_svfprintf_r+0x8ca>
   23f52:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23f56:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23f5a:	e7e5      	b.n	23f28 <_svfprintf_r+0xb88>
   23f5c:	2b30      	cmp	r3, #48	; 0x30
   23f5e:	f43f ad8b 	beq.w	23a78 <_svfprintf_r+0x6d8>
   23f62:	2330      	movs	r3, #48	; 0x30
   23f64:	3802      	subs	r0, #2
   23f66:	f804 3c01 	strb.w	r3, [r4, #-1]
   23f6a:	ab50      	add	r3, sp, #320	; 0x140
   23f6c:	1a1b      	subs	r3, r3, r0
   23f6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   23f72:	9305      	str	r3, [sp, #20]
   23f74:	4604      	mov	r4, r0
   23f76:	e584      	b.n	23a82 <_svfprintf_r+0x6e2>
   23f78:	f018 0f01 	tst.w	r8, #1
   23f7c:	f47f ae82 	bne.w	23c84 <_svfprintf_r+0x8e4>
   23f80:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23f82:	f8ca 4000 	str.w	r4, [sl]
   23f86:	3301      	adds	r3, #1
   23f88:	3201      	adds	r2, #1
   23f8a:	2101      	movs	r1, #1
   23f8c:	2b07      	cmp	r3, #7
   23f8e:	9226      	str	r2, [sp, #152]	; 0x98
   23f90:	9325      	str	r3, [sp, #148]	; 0x94
   23f92:	f8ca 1004 	str.w	r1, [sl, #4]
   23f96:	f77f aea5 	ble.w	23ce4 <_svfprintf_r+0x944>
   23f9a:	ee1b 1a10 	vmov	r1, s22
   23f9e:	aa24      	add	r2, sp, #144	; 0x90
   23fa0:	4658      	mov	r0, fp
   23fa2:	f002 fecf 	bl	26d44 <__ssprint_r>
   23fa6:	2800      	cmp	r0, #0
   23fa8:	f47f ae5f 	bne.w	23c6a <_svfprintf_r+0x8ca>
   23fac:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23fb0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23fb4:	e698      	b.n	23ce8 <_svfprintf_r+0x948>
   23fb6:	990e      	ldr	r1, [sp, #56]	; 0x38
   23fb8:	1e4c      	subs	r4, r1, #1
   23fba:	2c00      	cmp	r4, #0
   23fbc:	f77f ae94 	ble.w	23ce8 <_svfprintf_r+0x948>
   23fc0:	2c10      	cmp	r4, #16
   23fc2:	f340 8361 	ble.w	24688 <_svfprintf_r+0x12e8>
   23fc6:	ee1b 6a10 	vmov	r6, s22
   23fca:	2510      	movs	r5, #16
   23fcc:	e005      	b.n	23fda <_svfprintf_r+0xc3a>
   23fce:	f10a 0a08 	add.w	sl, sl, #8
   23fd2:	3c10      	subs	r4, #16
   23fd4:	2c10      	cmp	r4, #16
   23fd6:	f340 8357 	ble.w	24688 <_svfprintf_r+0x12e8>
   23fda:	3301      	adds	r3, #1
   23fdc:	4945      	ldr	r1, [pc, #276]	; (240f4 <_svfprintf_r+0xd54>)
   23fde:	3210      	adds	r2, #16
   23fe0:	2b07      	cmp	r3, #7
   23fe2:	e9ca 1500 	strd	r1, r5, [sl]
   23fe6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23fea:	ddf0      	ble.n	23fce <_svfprintf_r+0xc2e>
   23fec:	aa24      	add	r2, sp, #144	; 0x90
   23fee:	4631      	mov	r1, r6
   23ff0:	4658      	mov	r0, fp
   23ff2:	f002 fea7 	bl	26d44 <__ssprint_r>
   23ff6:	2800      	cmp	r0, #0
   23ff8:	f47f ae37 	bne.w	23c6a <_svfprintf_r+0x8ca>
   23ffc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24000:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24004:	e7e5      	b.n	23fd2 <_svfprintf_r+0xc32>
   24006:	ee1b 1a10 	vmov	r1, s22
   2400a:	aa24      	add	r2, sp, #144	; 0x90
   2400c:	4658      	mov	r0, fp
   2400e:	f002 fe99 	bl	26d44 <__ssprint_r>
   24012:	2800      	cmp	r0, #0
   24014:	f47f ae29 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24018:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2401a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2401e:	f7ff bb44 	b.w	236aa <_svfprintf_r+0x30a>
   24022:	9b02      	ldr	r3, [sp, #8]
   24024:	f013 0310 	ands.w	r3, r3, #16
   24028:	f040 80c1 	bne.w	241ae <_svfprintf_r+0xe0e>
   2402c:	9a02      	ldr	r2, [sp, #8]
   2402e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   24032:	f000 837a 	beq.w	2472a <_svfprintf_r+0x138a>
   24036:	9808      	ldr	r0, [sp, #32]
   24038:	f850 2b04 	ldr.w	r2, [r0], #4
   2403c:	9008      	str	r0, [sp, #32]
   2403e:	4619      	mov	r1, r3
   24040:	b292      	uxth	r2, r2
   24042:	2301      	movs	r3, #1
   24044:	e451      	b.n	238ea <_svfprintf_r+0x54a>
   24046:	f018 0310 	ands.w	r3, r8, #16
   2404a:	d155      	bne.n	240f8 <_svfprintf_r+0xd58>
   2404c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   24050:	f000 835d 	beq.w	2470e <_svfprintf_r+0x136e>
   24054:	9808      	ldr	r0, [sp, #32]
   24056:	f850 2b04 	ldr.w	r2, [r0], #4
   2405a:	9008      	str	r0, [sp, #32]
   2405c:	4619      	mov	r1, r3
   2405e:	b292      	uxth	r2, r2
   24060:	e4a8      	b.n	239b4 <_svfprintf_r+0x614>
   24062:	4252      	negs	r2, r2
   24064:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   24068:	f8cd 8008 	str.w	r8, [sp, #8]
   2406c:	202d      	movs	r0, #45	; 0x2d
   2406e:	2301      	movs	r3, #1
   24070:	e43c      	b.n	238ec <_svfprintf_r+0x54c>
   24072:	ee1b 1a10 	vmov	r1, s22
   24076:	aa24      	add	r2, sp, #144	; 0x90
   24078:	4658      	mov	r0, fp
   2407a:	f002 fe63 	bl	26d44 <__ssprint_r>
   2407e:	2800      	cmp	r0, #0
   24080:	f47f adf3 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24084:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24088:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2408c:	e616      	b.n	23cbc <_svfprintf_r+0x91c>
   2408e:	ee1b 1a10 	vmov	r1, s22
   24092:	aa24      	add	r2, sp, #144	; 0x90
   24094:	4658      	mov	r0, fp
   24096:	f002 fe55 	bl	26d44 <__ssprint_r>
   2409a:	2800      	cmp	r0, #0
   2409c:	f47f ade5 	bne.w	23c6a <_svfprintf_r+0x8ca>
   240a0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   240a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   240a8:	e5fb      	b.n	23ca2 <_svfprintf_r+0x902>
   240aa:	f018 0f01 	tst.w	r8, #1
   240ae:	f43f ab0f 	beq.w	236d0 <_svfprintf_r+0x330>
   240b2:	e52a      	b.n	23b0a <_svfprintf_r+0x76a>
   240b4:	9308      	str	r3, [sp, #32]
   240b6:	f899 3000 	ldrb.w	r3, [r9]
   240ba:	f7ff b9cd 	b.w	23458 <_svfprintf_r+0xb8>
   240be:	ac50      	add	r4, sp, #320	; 0x140
   240c0:	e4df      	b.n	23a82 <_svfprintf_r+0x6e2>
   240c2:	f418 7f00 	tst.w	r8, #512	; 0x200
   240c6:	f040 83db 	bne.w	24880 <_svfprintf_r+0x14e0>
   240ca:	f853 2b04 	ldr.w	r2, [r3], #4
   240ce:	9308      	str	r3, [sp, #32]
   240d0:	17d1      	asrs	r1, r2, #31
   240d2:	460b      	mov	r3, r1
   240d4:	f7ff bbb6 	b.w	23844 <_svfprintf_r+0x4a4>
   240d8:	9b08      	ldr	r3, [sp, #32]
   240da:	9804      	ldr	r0, [sp, #16]
   240dc:	f853 1b04 	ldr.w	r1, [r3], #4
   240e0:	9308      	str	r3, [sp, #32]
   240e2:	17c2      	asrs	r2, r0, #31
   240e4:	e9c1 0200 	strd	r0, r2, [r1]
   240e8:	464c      	mov	r4, r9
   240ea:	f7ff b98b 	b.w	23404 <_svfprintf_r+0x64>
   240ee:	bf00      	nop
   240f0:	20004bc8 	.word	0x20004bc8
   240f4:	20008964 	.word	0x20008964
   240f8:	9b08      	ldr	r3, [sp, #32]
   240fa:	f853 2b04 	ldr.w	r2, [r3], #4
   240fe:	9308      	str	r3, [sp, #32]
   24100:	e458      	b.n	239b4 <_svfprintf_r+0x614>
   24102:	eeb4 8b48 	vcmp.f64	d8, d8
   24106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2410a:	f180 8694 	bvs.w	24e36 <_svfprintf_r+0x1a96>
   2410e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24110:	2b61      	cmp	r3, #97	; 0x61
   24112:	f000 8552 	beq.w	24bba <_svfprintf_r+0x181a>
   24116:	2b41      	cmp	r3, #65	; 0x41
   24118:	f000 85c0 	beq.w	24c9c <_svfprintf_r+0x18fc>
   2411c:	9b03      	ldr	r3, [sp, #12]
   2411e:	3301      	adds	r3, #1
   24120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24122:	f023 0520 	bic.w	r5, r3, #32
   24126:	f000 8480 	beq.w	24a2a <_svfprintf_r+0x168a>
   2412a:	2d47      	cmp	r5, #71	; 0x47
   2412c:	d104      	bne.n	24138 <_svfprintf_r+0xd98>
   2412e:	9b03      	ldr	r3, [sp, #12]
   24130:	2b00      	cmp	r3, #0
   24132:	bf08      	it	eq
   24134:	2301      	moveq	r3, #1
   24136:	9303      	str	r3, [sp, #12]
   24138:	ee18 3a90 	vmov	r3, s17
   2413c:	2b00      	cmp	r3, #0
   2413e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   24142:	4646      	mov	r6, r8
   24144:	f2c0 8618 	blt.w	24d78 <_svfprintf_r+0x19d8>
   24148:	eeb0 ab48 	vmov.f64	d10, d8
   2414c:	2300      	movs	r3, #0
   2414e:	4690      	mov	r8, r2
   24150:	9309      	str	r3, [sp, #36]	; 0x24
   24152:	9307      	str	r3, [sp, #28]
   24154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24156:	3b41      	subs	r3, #65	; 0x41
   24158:	2b25      	cmp	r3, #37	; 0x25
   2415a:	f200 8398 	bhi.w	2488e <_svfprintf_r+0x14ee>
   2415e:	e8df f013 	tbh	[pc, r3, lsl #1]
   24162:	046f      	.short	0x046f
   24164:	03960396 	.word	0x03960396
   24168:	04680396 	.word	0x04680396
   2416c:	0396046c 	.word	0x0396046c
   24170:	03960396 	.word	0x03960396
   24174:	03960396 	.word	0x03960396
   24178:	03960396 	.word	0x03960396
   2417c:	03960396 	.word	0x03960396
   24180:	03960396 	.word	0x03960396
   24184:	03960396 	.word	0x03960396
   24188:	03960396 	.word	0x03960396
   2418c:	03960396 	.word	0x03960396
   24190:	03960396 	.word	0x03960396
   24194:	03960396 	.word	0x03960396
   24198:	03960396 	.word	0x03960396
   2419c:	03960396 	.word	0x03960396
   241a0:	03960396 	.word	0x03960396
   241a4:	03960396 	.word	0x03960396
   241a8:	04680396 	.word	0x04680396
   241ac:	046c      	.short	0x046c
   241ae:	9b08      	ldr	r3, [sp, #32]
   241b0:	f853 2b04 	ldr.w	r2, [r3], #4
   241b4:	9308      	str	r3, [sp, #32]
   241b6:	2301      	movs	r3, #1
   241b8:	f7ff bb97 	b.w	238ea <_svfprintf_r+0x54a>
   241bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   241be:	2b00      	cmp	r3, #0
   241c0:	f43f a9cf 	beq.w	23562 <_svfprintf_r+0x1c2>
   241c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   241c6:	781b      	ldrb	r3, [r3, #0]
   241c8:	2b00      	cmp	r3, #0
   241ca:	f43f a9ca 	beq.w	23562 <_svfprintf_r+0x1c2>
   241ce:	f899 3000 	ldrb.w	r3, [r9]
   241d2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   241d6:	f7ff b93f 	b.w	23458 <_svfprintf_r+0xb8>
   241da:	930b      	str	r3, [sp, #44]	; 0x2c
   241dc:	f8cd 8008 	str.w	r8, [sp, #8]
   241e0:	f7ff bbf1 	b.w	239c6 <_svfprintf_r+0x626>
   241e4:	930b      	str	r3, [sp, #44]	; 0x2c
   241e6:	4b9a      	ldr	r3, [pc, #616]	; (24450 <_svfprintf_r+0x10b0>)
   241e8:	9311      	str	r3, [sp, #68]	; 0x44
   241ea:	f018 0120 	ands.w	r1, r8, #32
   241ee:	f000 8105 	beq.w	243fc <_svfprintf_r+0x105c>
   241f2:	9b08      	ldr	r3, [sp, #32]
   241f4:	3307      	adds	r3, #7
   241f6:	f023 0307 	bic.w	r3, r3, #7
   241fa:	6859      	ldr	r1, [r3, #4]
   241fc:	f853 2b08 	ldr.w	r2, [r3], #8
   24200:	9308      	str	r3, [sp, #32]
   24202:	f018 0f01 	tst.w	r8, #1
   24206:	d00a      	beq.n	2421e <_svfprintf_r+0xe7e>
   24208:	ea52 0301 	orrs.w	r3, r2, r1
   2420c:	d007      	beq.n	2421e <_svfprintf_r+0xe7e>
   2420e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24210:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   24214:	2330      	movs	r3, #48	; 0x30
   24216:	f048 0802 	orr.w	r8, r8, #2
   2421a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   2421e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   24222:	9302      	str	r3, [sp, #8]
   24224:	2302      	movs	r3, #2
   24226:	f7ff bb60 	b.w	238ea <_svfprintf_r+0x54a>
   2422a:	930b      	str	r3, [sp, #44]	; 0x2c
   2422c:	f7ff bbb6 	b.w	2399c <_svfprintf_r+0x5fc>
   24230:	930b      	str	r3, [sp, #44]	; 0x2c
   24232:	4b88      	ldr	r3, [pc, #544]	; (24454 <_svfprintf_r+0x10b4>)
   24234:	9311      	str	r3, [sp, #68]	; 0x44
   24236:	e7d8      	b.n	241ea <_svfprintf_r+0xe4a>
   24238:	9b08      	ldr	r3, [sp, #32]
   2423a:	2101      	movs	r1, #1
   2423c:	f853 2b04 	ldr.w	r2, [r3], #4
   24240:	9102      	str	r1, [sp, #8]
   24242:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   24246:	9308      	str	r3, [sp, #32]
   24248:	9105      	str	r1, [sp, #20]
   2424a:	ac37      	add	r4, sp, #220	; 0xdc
   2424c:	f7ff baaf 	b.w	237ae <_svfprintf_r+0x40e>
   24250:	ee1b 1a10 	vmov	r1, s22
   24254:	aa24      	add	r2, sp, #144	; 0x90
   24256:	4658      	mov	r0, fp
   24258:	f002 fd74 	bl	26d44 <__ssprint_r>
   2425c:	2800      	cmp	r0, #0
   2425e:	f47f ad04 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24262:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24264:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24268:	e45d      	b.n	23b26 <_svfprintf_r+0x786>
   2426a:	9b03      	ldr	r3, [sp, #12]
   2426c:	9407      	str	r4, [sp, #28]
   2426e:	2b06      	cmp	r3, #6
   24270:	4622      	mov	r2, r4
   24272:	bf28      	it	cs
   24274:	2306      	movcs	r3, #6
   24276:	9403      	str	r4, [sp, #12]
   24278:	4621      	mov	r1, r4
   2427a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   2427e:	4c76      	ldr	r4, [pc, #472]	; (24458 <_svfprintf_r+0x10b8>)
   24280:	9302      	str	r3, [sp, #8]
   24282:	9305      	str	r3, [sp, #20]
   24284:	920f      	str	r2, [sp, #60]	; 0x3c
   24286:	f7ff ba6c 	b.w	23762 <_svfprintf_r+0x3c2>
   2428a:	2140      	movs	r1, #64	; 0x40
   2428c:	4658      	mov	r0, fp
   2428e:	f7fc f935 	bl	204fc <_malloc_r>
   24292:	6020      	str	r0, [r4, #0]
   24294:	6120      	str	r0, [r4, #16]
   24296:	2800      	cmp	r0, #0
   24298:	f000 860f 	beq.w	24eba <_svfprintf_r+0x1b1a>
   2429c:	2340      	movs	r3, #64	; 0x40
   2429e:	6163      	str	r3, [r4, #20]
   242a0:	f7ff b89e 	b.w	233e0 <_svfprintf_r+0x40>
   242a4:	2d10      	cmp	r5, #16
   242a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   242a8:	f340 825d 	ble.w	24766 <_svfprintf_r+0x13c6>
   242ac:	4651      	mov	r1, sl
   242ae:	2610      	movs	r6, #16
   242b0:	ee1b aa10 	vmov	sl, s22
   242b4:	e004      	b.n	242c0 <_svfprintf_r+0xf20>
   242b6:	3108      	adds	r1, #8
   242b8:	3d10      	subs	r5, #16
   242ba:	2d10      	cmp	r5, #16
   242bc:	f340 8252 	ble.w	24764 <_svfprintf_r+0x13c4>
   242c0:	3301      	adds	r3, #1
   242c2:	4866      	ldr	r0, [pc, #408]	; (2445c <_svfprintf_r+0x10bc>)
   242c4:	3210      	adds	r2, #16
   242c6:	2b07      	cmp	r3, #7
   242c8:	e9c1 0600 	strd	r0, r6, [r1]
   242cc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   242d0:	ddf1      	ble.n	242b6 <_svfprintf_r+0xf16>
   242d2:	aa24      	add	r2, sp, #144	; 0x90
   242d4:	4651      	mov	r1, sl
   242d6:	4658      	mov	r0, fp
   242d8:	f002 fd34 	bl	26d44 <__ssprint_r>
   242dc:	2800      	cmp	r0, #0
   242de:	f47f acc4 	bne.w	23c6a <_svfprintf_r+0x8ca>
   242e2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   242e6:	a927      	add	r1, sp, #156	; 0x9c
   242e8:	e7e6      	b.n	242b8 <_svfprintf_r+0xf18>
   242ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   242ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   242f0:	18e3      	adds	r3, r4, r3
   242f2:	9303      	str	r3, [sp, #12]
   242f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   242f6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   242fa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   242fc:	9d05      	ldr	r5, [sp, #20]
   242fe:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   24302:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   24306:	940b      	str	r4, [sp, #44]	; 0x2c
   24308:	ee1b 1a10 	vmov	r1, s22
   2430c:	4650      	mov	r0, sl
   2430e:	2b00      	cmp	r3, #0
   24310:	d034      	beq.n	2437c <_svfprintf_r+0xfdc>
   24312:	f1b8 0f00 	cmp.w	r8, #0
   24316:	d135      	bne.n	24384 <_svfprintf_r+0xfe4>
   24318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2431a:	3b01      	subs	r3, #1
   2431c:	3e01      	subs	r6, #1
   2431e:	930d      	str	r3, [sp, #52]	; 0x34
   24320:	9b15      	ldr	r3, [sp, #84]	; 0x54
   24322:	e9c0 3900 	strd	r3, r9, [r0]
   24326:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24328:	3301      	adds	r3, #1
   2432a:	444a      	add	r2, r9
   2432c:	2b07      	cmp	r3, #7
   2432e:	9226      	str	r2, [sp, #152]	; 0x98
   24330:	9325      	str	r3, [sp, #148]	; 0x94
   24332:	dc6c      	bgt.n	2440e <_svfprintf_r+0x106e>
   24334:	3008      	adds	r0, #8
   24336:	9b03      	ldr	r3, [sp, #12]
   24338:	f896 c000 	ldrb.w	ip, [r6]
   2433c:	1b5b      	subs	r3, r3, r5
   2433e:	4563      	cmp	r3, ip
   24340:	bfa8      	it	ge
   24342:	4663      	movge	r3, ip
   24344:	2b00      	cmp	r3, #0
   24346:	469a      	mov	sl, r3
   24348:	dd0c      	ble.n	24364 <_svfprintf_r+0xfc4>
   2434a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   2434c:	3401      	adds	r4, #1
   2434e:	441a      	add	r2, r3
   24350:	2c07      	cmp	r4, #7
   24352:	e9c0 5300 	strd	r5, r3, [r0]
   24356:	9226      	str	r2, [sp, #152]	; 0x98
   24358:	9425      	str	r4, [sp, #148]	; 0x94
   2435a:	f300 8177 	bgt.w	2464c <_svfprintf_r+0x12ac>
   2435e:	f896 c000 	ldrb.w	ip, [r6]
   24362:	3008      	adds	r0, #8
   24364:	f1ba 0f00 	cmp.w	sl, #0
   24368:	bfac      	ite	ge
   2436a:	ebac 040a 	subge.w	r4, ip, sl
   2436e:	4664      	movlt	r4, ip
   24370:	2c00      	cmp	r4, #0
   24372:	dc0a      	bgt.n	2438a <_svfprintf_r+0xfea>
   24374:	4465      	add	r5, ip
   24376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24378:	2b00      	cmp	r3, #0
   2437a:	d1ca      	bne.n	24312 <_svfprintf_r+0xf72>
   2437c:	f1b8 0f00 	cmp.w	r8, #0
   24380:	f000 83ac 	beq.w	24adc <_svfprintf_r+0x173c>
   24384:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   24388:	e7ca      	b.n	24320 <_svfprintf_r+0xf80>
   2438a:	2c10      	cmp	r4, #16
   2438c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   24390:	dd24      	ble.n	243dc <_svfprintf_r+0x103c>
   24392:	9505      	str	r5, [sp, #20]
   24394:	f04f 0a10 	mov.w	sl, #16
   24398:	4663      	mov	r3, ip
   2439a:	460d      	mov	r5, r1
   2439c:	e004      	b.n	243a8 <_svfprintf_r+0x1008>
   2439e:	3c10      	subs	r4, #16
   243a0:	2c10      	cmp	r4, #16
   243a2:	f100 0008 	add.w	r0, r0, #8
   243a6:	dd16      	ble.n	243d6 <_svfprintf_r+0x1036>
   243a8:	3301      	adds	r3, #1
   243aa:	492c      	ldr	r1, [pc, #176]	; (2445c <_svfprintf_r+0x10bc>)
   243ac:	3210      	adds	r2, #16
   243ae:	2b07      	cmp	r3, #7
   243b0:	e9c0 1a00 	strd	r1, sl, [r0]
   243b4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   243b8:	ddf1      	ble.n	2439e <_svfprintf_r+0xffe>
   243ba:	aa24      	add	r2, sp, #144	; 0x90
   243bc:	4629      	mov	r1, r5
   243be:	4658      	mov	r0, fp
   243c0:	f002 fcc0 	bl	26d44 <__ssprint_r>
   243c4:	2800      	cmp	r0, #0
   243c6:	f47f ac50 	bne.w	23c6a <_svfprintf_r+0x8ca>
   243ca:	3c10      	subs	r4, #16
   243cc:	2c10      	cmp	r4, #16
   243ce:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   243d2:	a827      	add	r0, sp, #156	; 0x9c
   243d4:	dce8      	bgt.n	243a8 <_svfprintf_r+0x1008>
   243d6:	4629      	mov	r1, r5
   243d8:	9d05      	ldr	r5, [sp, #20]
   243da:	469c      	mov	ip, r3
   243dc:	f10c 0301 	add.w	r3, ip, #1
   243e0:	4422      	add	r2, r4
   243e2:	6044      	str	r4, [r0, #4]
   243e4:	2b07      	cmp	r3, #7
   243e6:	4c1d      	ldr	r4, [pc, #116]	; (2445c <_svfprintf_r+0x10bc>)
   243e8:	6004      	str	r4, [r0, #0]
   243ea:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   243ee:	f300 83c6 	bgt.w	24b7e <_svfprintf_r+0x17de>
   243f2:	f896 c000 	ldrb.w	ip, [r6]
   243f6:	3008      	adds	r0, #8
   243f8:	4465      	add	r5, ip
   243fa:	e7bc      	b.n	24376 <_svfprintf_r+0xfd6>
   243fc:	f018 0310 	ands.w	r3, r8, #16
   24400:	f000 80c2 	beq.w	24588 <_svfprintf_r+0x11e8>
   24404:	9b08      	ldr	r3, [sp, #32]
   24406:	f853 2b04 	ldr.w	r2, [r3], #4
   2440a:	9308      	str	r3, [sp, #32]
   2440c:	e6f9      	b.n	24202 <_svfprintf_r+0xe62>
   2440e:	aa24      	add	r2, sp, #144	; 0x90
   24410:	4658      	mov	r0, fp
   24412:	9105      	str	r1, [sp, #20]
   24414:	f002 fc96 	bl	26d44 <__ssprint_r>
   24418:	2800      	cmp	r0, #0
   2441a:	f47f ac26 	bne.w	23c6a <_svfprintf_r+0x8ca>
   2441e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24420:	9905      	ldr	r1, [sp, #20]
   24422:	a827      	add	r0, sp, #156	; 0x9c
   24424:	e787      	b.n	24336 <_svfprintf_r+0xf96>
   24426:	9802      	ldr	r0, [sp, #8]
   24428:	f8cd a01c 	str.w	sl, [sp, #28]
   2442c:	ac50      	add	r4, sp, #320	; 0x140
   2442e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   24432:	2500      	movs	r5, #0
   24434:	ee0a ba10 	vmov	s20, fp
   24438:	4b09      	ldr	r3, [pc, #36]	; (24460 <_svfprintf_r+0x10c0>)
   2443a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   2443e:	f8cd 9014 	str.w	r9, [sp, #20]
   24442:	46a3      	mov	fp, r4
   24444:	f04f 0805 	mov.w	r8, #5
   24448:	46ac      	mov	ip, r5
   2444a:	4604      	mov	r4, r0
   2444c:	e010      	b.n	24470 <_svfprintf_r+0x10d0>
   2444e:	bf00      	nop
   24450:	20004398 	.word	0x20004398
   24454:	200043ac 	.word	0x200043ac
   24458:	200043c0 	.word	0x200043c0
   2445c:	20008964 	.word	0x20008964
   24460:	cccccccd 	.word	0xcccccccd
   24464:	2a0a      	cmp	r2, #10
   24466:	f171 0100 	sbcs.w	r1, r1, #0
   2446a:	d336      	bcc.n	244da <_svfprintf_r+0x113a>
   2446c:	464a      	mov	r2, r9
   2446e:	4631      	mov	r1, r6
   24470:	1850      	adds	r0, r2, r1
   24472:	f140 0000 	adc.w	r0, r0, #0
   24476:	fba3 5600 	umull	r5, r6, r3, r0
   2447a:	f026 0503 	bic.w	r5, r6, #3
   2447e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   24482:	1b40      	subs	r0, r0, r5
   24484:	1a15      	subs	r5, r2, r0
   24486:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   2448a:	f161 0e00 	sbc.w	lr, r1, #0
   2448e:	fb06 f605 	mul.w	r6, r6, r5
   24492:	fba5 9503 	umull	r9, r5, r5, r3
   24496:	fb03 660e 	mla	r6, r3, lr, r6
   2449a:	f009 0e01 	and.w	lr, r9, #1
   2449e:	442e      	add	r6, r5
   244a0:	fbae 5e08 	umull	r5, lr, lr, r8
   244a4:	182d      	adds	r5, r5, r0
   244a6:	ea4f 0959 	mov.w	r9, r9, lsr #1
   244aa:	3530      	adds	r5, #48	; 0x30
   244ac:	f80b 5c01 	strb.w	r5, [fp, #-1]
   244b0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   244b4:	f10c 0c01 	add.w	ip, ip, #1
   244b8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   244bc:	0876      	lsrs	r6, r6, #1
   244be:	2c00      	cmp	r4, #0
   244c0:	d0d0      	beq.n	24464 <_svfprintf_r+0x10c4>
   244c2:	f89a 0000 	ldrb.w	r0, [sl]
   244c6:	4584      	cmp	ip, r0
   244c8:	d1cc      	bne.n	24464 <_svfprintf_r+0x10c4>
   244ca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   244ce:	d0c9      	beq.n	24464 <_svfprintf_r+0x10c4>
   244d0:	2a0a      	cmp	r2, #10
   244d2:	f171 0100 	sbcs.w	r1, r1, #0
   244d6:	f080 818f 	bcs.w	247f8 <_svfprintf_r+0x1458>
   244da:	465c      	mov	r4, fp
   244dc:	ab50      	add	r3, sp, #320	; 0x140
   244de:	1b1b      	subs	r3, r3, r4
   244e0:	f8dd 9014 	ldr.w	r9, [sp, #20]
   244e4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   244e8:	ee1a ba10 	vmov	fp, s20
   244ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
   244f0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   244f4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   244f8:	9305      	str	r3, [sp, #20]
   244fa:	f7ff bac2 	b.w	23a82 <_svfprintf_r+0x6e2>
   244fe:	ee1b 1a10 	vmov	r1, s22
   24502:	aa24      	add	r2, sp, #144	; 0x90
   24504:	4658      	mov	r0, fp
   24506:	f002 fc1d 	bl	26d44 <__ssprint_r>
   2450a:	2800      	cmp	r0, #0
   2450c:	f47f abad 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24510:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   24514:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24516:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2451a:	f7ff b896 	b.w	2364a <_svfprintf_r+0x2aa>
   2451e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24520:	48be      	ldr	r0, [pc, #760]	; (2481c <_svfprintf_r+0x147c>)
   24522:	f8ca 0000 	str.w	r0, [sl]
   24526:	3301      	adds	r3, #1
   24528:	3201      	adds	r2, #1
   2452a:	2001      	movs	r0, #1
   2452c:	2b07      	cmp	r3, #7
   2452e:	9226      	str	r2, [sp, #152]	; 0x98
   24530:	9325      	str	r3, [sp, #148]	; 0x94
   24532:	f8ca 0004 	str.w	r0, [sl, #4]
   24536:	f300 8177 	bgt.w	24828 <_svfprintf_r+0x1488>
   2453a:	f10a 0a08 	add.w	sl, sl, #8
   2453e:	2900      	cmp	r1, #0
   24540:	f040 80af 	bne.w	246a2 <_svfprintf_r+0x1302>
   24544:	990e      	ldr	r1, [sp, #56]	; 0x38
   24546:	f008 0301 	and.w	r3, r8, #1
   2454a:	430b      	orrs	r3, r1
   2454c:	f43f a8c0 	beq.w	236d0 <_svfprintf_r+0x330>
   24550:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24552:	9912      	ldr	r1, [sp, #72]	; 0x48
   24554:	441a      	add	r2, r3
   24556:	e9ca 1300 	strd	r1, r3, [sl]
   2455a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2455c:	9226      	str	r2, [sp, #152]	; 0x98
   2455e:	3301      	adds	r3, #1
   24560:	2b07      	cmp	r3, #7
   24562:	9325      	str	r3, [sp, #148]	; 0x94
   24564:	f300 8252 	bgt.w	24a0c <_svfprintf_r+0x166c>
   24568:	f10a 0a08 	add.w	sl, sl, #8
   2456c:	990e      	ldr	r1, [sp, #56]	; 0x38
   2456e:	f8ca 4000 	str.w	r4, [sl]
   24572:	3301      	adds	r3, #1
   24574:	440a      	add	r2, r1
   24576:	2b07      	cmp	r3, #7
   24578:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2457c:	f8ca 1004 	str.w	r1, [sl, #4]
   24580:	f77f a8a4 	ble.w	236cc <_svfprintf_r+0x32c>
   24584:	f7ff bbbd 	b.w	23d02 <_svfprintf_r+0x962>
   24588:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   2458c:	f000 80dd 	beq.w	2474a <_svfprintf_r+0x13aa>
   24590:	9808      	ldr	r0, [sp, #32]
   24592:	f850 2b04 	ldr.w	r2, [r0], #4
   24596:	9008      	str	r0, [sp, #32]
   24598:	4619      	mov	r1, r3
   2459a:	b292      	uxth	r2, r2
   2459c:	e631      	b.n	24202 <_svfprintf_r+0xe62>
   2459e:	ee1b 1a10 	vmov	r1, s22
   245a2:	aa24      	add	r2, sp, #144	; 0x90
   245a4:	4658      	mov	r0, fp
   245a6:	f002 fbcd 	bl	26d44 <__ssprint_r>
   245aa:	2800      	cmp	r0, #0
   245ac:	f47f ab5d 	bne.w	23c6a <_svfprintf_r+0x8ca>
   245b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   245b2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   245b6:	f7ff baa3 	b.w	23b00 <_svfprintf_r+0x760>
   245ba:	ae22      	add	r6, sp, #136	; 0x88
   245bc:	2208      	movs	r2, #8
   245be:	2100      	movs	r1, #0
   245c0:	4630      	mov	r0, r6
   245c2:	941d      	str	r4, [sp, #116]	; 0x74
   245c4:	f7fd fe9c 	bl	22300 <memset>
   245c8:	9b03      	ldr	r3, [sp, #12]
   245ca:	1c5a      	adds	r2, r3, #1
   245cc:	f000 80db 	beq.w	24786 <_svfprintf_r+0x13e6>
   245d0:	2500      	movs	r5, #0
   245d2:	f8cd 9008 	str.w	r9, [sp, #8]
   245d6:	f8cd 801c 	str.w	r8, [sp, #28]
   245da:	4699      	mov	r9, r3
   245dc:	46a8      	mov	r8, r5
   245de:	e00c      	b.n	245fa <_svfprintf_r+0x125a>
   245e0:	a937      	add	r1, sp, #220	; 0xdc
   245e2:	4658      	mov	r0, fp
   245e4:	f001 fbc6 	bl	25d74 <_wcrtomb_r>
   245e8:	1c43      	adds	r3, r0, #1
   245ea:	4440      	add	r0, r8
   245ec:	f000 83c8 	beq.w	24d80 <_svfprintf_r+0x19e0>
   245f0:	4548      	cmp	r0, r9
   245f2:	dc08      	bgt.n	24606 <_svfprintf_r+0x1266>
   245f4:	f000 8418 	beq.w	24e28 <_svfprintf_r+0x1a88>
   245f8:	4680      	mov	r8, r0
   245fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   245fc:	5952      	ldr	r2, [r2, r5]
   245fe:	4633      	mov	r3, r6
   24600:	3504      	adds	r5, #4
   24602:	2a00      	cmp	r2, #0
   24604:	d1ec      	bne.n	245e0 <_svfprintf_r+0x1240>
   24606:	f8cd 8014 	str.w	r8, [sp, #20]
   2460a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   2460e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   24612:	e0c5      	b.n	247a0 <_svfprintf_r+0x1400>
   24614:	3301      	adds	r3, #1
   24616:	4982      	ldr	r1, [pc, #520]	; (24820 <_svfprintf_r+0x1480>)
   24618:	f8ca 4004 	str.w	r4, [sl, #4]
   2461c:	4422      	add	r2, r4
   2461e:	2b07      	cmp	r3, #7
   24620:	f8ca 1000 	str.w	r1, [sl]
   24624:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24628:	f77f a850 	ble.w	236cc <_svfprintf_r+0x32c>
   2462c:	f7ff bb69 	b.w	23d02 <_svfprintf_r+0x962>
   24630:	ee1b 1a10 	vmov	r1, s22
   24634:	aa24      	add	r2, sp, #144	; 0x90
   24636:	4658      	mov	r0, fp
   24638:	f002 fb84 	bl	26d44 <__ssprint_r>
   2463c:	2800      	cmp	r0, #0
   2463e:	f47f ab14 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24642:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24644:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24648:	f7ff b829 	b.w	2369e <_svfprintf_r+0x2fe>
   2464c:	aa24      	add	r2, sp, #144	; 0x90
   2464e:	4658      	mov	r0, fp
   24650:	9105      	str	r1, [sp, #20]
   24652:	f002 fb77 	bl	26d44 <__ssprint_r>
   24656:	2800      	cmp	r0, #0
   24658:	f47f ab07 	bne.w	23c6a <_svfprintf_r+0x8ca>
   2465c:	f896 c000 	ldrb.w	ip, [r6]
   24660:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24662:	9905      	ldr	r1, [sp, #20]
   24664:	a827      	add	r0, sp, #156	; 0x9c
   24666:	e67d      	b.n	24364 <_svfprintf_r+0xfc4>
   24668:	2b01      	cmp	r3, #1
   2466a:	f8cd 8008 	str.w	r8, [sp, #8]
   2466e:	f47f a9f3 	bne.w	23a58 <_svfprintf_r+0x6b8>
   24672:	f7ff bb93 	b.w	23d9c <_svfprintf_r+0x9fc>
   24676:	9b08      	ldr	r3, [sp, #32]
   24678:	9904      	ldr	r1, [sp, #16]
   2467a:	f853 2b04 	ldr.w	r2, [r3], #4
   2467e:	464c      	mov	r4, r9
   24680:	6011      	str	r1, [r2, #0]
   24682:	9308      	str	r3, [sp, #32]
   24684:	f7fe bebe 	b.w	23404 <_svfprintf_r+0x64>
   24688:	3301      	adds	r3, #1
   2468a:	4965      	ldr	r1, [pc, #404]	; (24820 <_svfprintf_r+0x1480>)
   2468c:	f8ca 4004 	str.w	r4, [sl, #4]
   24690:	4422      	add	r2, r4
   24692:	2b07      	cmp	r3, #7
   24694:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24698:	f8ca 1000 	str.w	r1, [sl]
   2469c:	f77f ab22 	ble.w	23ce4 <_svfprintf_r+0x944>
   246a0:	e47b      	b.n	23f9a <_svfprintf_r+0xbfa>
   246a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   246a4:	9812      	ldr	r0, [sp, #72]	; 0x48
   246a6:	441a      	add	r2, r3
   246a8:	e9ca 0300 	strd	r0, r3, [sl]
   246ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   246ae:	9226      	str	r2, [sp, #152]	; 0x98
   246b0:	3301      	adds	r3, #1
   246b2:	2b07      	cmp	r3, #7
   246b4:	9325      	str	r3, [sp, #148]	; 0x94
   246b6:	f300 81a9 	bgt.w	24a0c <_svfprintf_r+0x166c>
   246ba:	f10a 0a08 	add.w	sl, sl, #8
   246be:	2900      	cmp	r1, #0
   246c0:	f6bf af54 	bge.w	2456c <_svfprintf_r+0x11cc>
   246c4:	424d      	negs	r5, r1
   246c6:	3110      	adds	r1, #16
   246c8:	f280 830f 	bge.w	24cea <_svfprintf_r+0x194a>
   246cc:	ee1b 1a10 	vmov	r1, s22
   246d0:	2610      	movs	r6, #16
   246d2:	e005      	b.n	246e0 <_svfprintf_r+0x1340>
   246d4:	f10a 0a08 	add.w	sl, sl, #8
   246d8:	3d10      	subs	r5, #16
   246da:	2d10      	cmp	r5, #16
   246dc:	f340 8305 	ble.w	24cea <_svfprintf_r+0x194a>
   246e0:	3301      	adds	r3, #1
   246e2:	484f      	ldr	r0, [pc, #316]	; (24820 <_svfprintf_r+0x1480>)
   246e4:	3210      	adds	r2, #16
   246e6:	2b07      	cmp	r3, #7
   246e8:	e9ca 0600 	strd	r0, r6, [sl]
   246ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   246f0:	ddf0      	ble.n	246d4 <_svfprintf_r+0x1334>
   246f2:	aa24      	add	r2, sp, #144	; 0x90
   246f4:	4658      	mov	r0, fp
   246f6:	9103      	str	r1, [sp, #12]
   246f8:	f002 fb24 	bl	26d44 <__ssprint_r>
   246fc:	2800      	cmp	r0, #0
   246fe:	f47f aab4 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24702:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24706:	9903      	ldr	r1, [sp, #12]
   24708:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2470c:	e7e4      	b.n	246d8 <_svfprintf_r+0x1338>
   2470e:	9b08      	ldr	r3, [sp, #32]
   24710:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   24714:	bf1a      	itte	ne
   24716:	4611      	movne	r1, r2
   24718:	f853 2b04 	ldrne.w	r2, [r3], #4
   2471c:	f853 2b04 	ldreq.w	r2, [r3], #4
   24720:	9308      	str	r3, [sp, #32]
   24722:	bf18      	it	ne
   24724:	b2d2      	uxtbne	r2, r2
   24726:	f7ff b945 	b.w	239b4 <_svfprintf_r+0x614>
   2472a:	9b02      	ldr	r3, [sp, #8]
   2472c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   24730:	9b08      	ldr	r3, [sp, #32]
   24732:	bf1a      	itte	ne
   24734:	4611      	movne	r1, r2
   24736:	f853 2b04 	ldrne.w	r2, [r3], #4
   2473a:	f853 2b04 	ldreq.w	r2, [r3], #4
   2473e:	9308      	str	r3, [sp, #32]
   24740:	bf18      	it	ne
   24742:	b2d2      	uxtbne	r2, r2
   24744:	2301      	movs	r3, #1
   24746:	f7ff b8d0 	b.w	238ea <_svfprintf_r+0x54a>
   2474a:	9b08      	ldr	r3, [sp, #32]
   2474c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   24750:	bf1a      	itte	ne
   24752:	4611      	movne	r1, r2
   24754:	f853 2b04 	ldrne.w	r2, [r3], #4
   24758:	f853 2b04 	ldreq.w	r2, [r3], #4
   2475c:	9308      	str	r3, [sp, #32]
   2475e:	bf18      	it	ne
   24760:	b2d2      	uxtbne	r2, r2
   24762:	e54e      	b.n	24202 <_svfprintf_r+0xe62>
   24764:	468a      	mov	sl, r1
   24766:	3301      	adds	r3, #1
   24768:	492d      	ldr	r1, [pc, #180]	; (24820 <_svfprintf_r+0x1480>)
   2476a:	f8ca 5004 	str.w	r5, [sl, #4]
   2476e:	442a      	add	r2, r5
   24770:	2b07      	cmp	r3, #7
   24772:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24776:	f8ca 1000 	str.w	r1, [sl]
   2477a:	f300 8139 	bgt.w	249f0 <_svfprintf_r+0x1650>
   2477e:	f10a 0a08 	add.w	sl, sl, #8
   24782:	f7ff bb8c 	b.w	23e9e <_svfprintf_r+0xafe>
   24786:	2300      	movs	r3, #0
   24788:	4619      	mov	r1, r3
   2478a:	9600      	str	r6, [sp, #0]
   2478c:	aa1d      	add	r2, sp, #116	; 0x74
   2478e:	4658      	mov	r0, fp
   24790:	f001 fb16 	bl	25dc0 <_wcsrtombs_r>
   24794:	4603      	mov	r3, r0
   24796:	3301      	adds	r3, #1
   24798:	9005      	str	r0, [sp, #20]
   2479a:	f000 82f1 	beq.w	24d80 <_svfprintf_r+0x19e0>
   2479e:	941d      	str	r4, [sp, #116]	; 0x74
   247a0:	9b05      	ldr	r3, [sp, #20]
   247a2:	2b00      	cmp	r3, #0
   247a4:	d04e      	beq.n	24844 <_svfprintf_r+0x14a4>
   247a6:	2b63      	cmp	r3, #99	; 0x63
   247a8:	f300 8118 	bgt.w	249dc <_svfprintf_r+0x163c>
   247ac:	2300      	movs	r3, #0
   247ae:	9307      	str	r3, [sp, #28]
   247b0:	ac37      	add	r4, sp, #220	; 0xdc
   247b2:	2208      	movs	r2, #8
   247b4:	2100      	movs	r1, #0
   247b6:	4630      	mov	r0, r6
   247b8:	f7fd fda2 	bl	22300 <memset>
   247bc:	9d05      	ldr	r5, [sp, #20]
   247be:	9600      	str	r6, [sp, #0]
   247c0:	462b      	mov	r3, r5
   247c2:	aa1d      	add	r2, sp, #116	; 0x74
   247c4:	4621      	mov	r1, r4
   247c6:	4658      	mov	r0, fp
   247c8:	f001 fafa 	bl	25dc0 <_wcsrtombs_r>
   247cc:	4285      	cmp	r5, r0
   247ce:	f040 837c 	bne.w	24eca <_svfprintf_r+0x1b2a>
   247d2:	9a05      	ldr	r2, [sp, #20]
   247d4:	2300      	movs	r3, #0
   247d6:	54a3      	strb	r3, [r4, r2]
   247d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   247dc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   247e0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   247e4:	9303      	str	r3, [sp, #12]
   247e6:	9202      	str	r2, [sp, #8]
   247e8:	930f      	str	r3, [sp, #60]	; 0x3c
   247ea:	f7fe bfba 	b.w	23762 <_svfprintf_r+0x3c2>
   247ee:	212d      	movs	r1, #45	; 0x2d
   247f0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   247f4:	f7fe bfa4 	b.w	23740 <_svfprintf_r+0x3a0>
   247f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   247fa:	9915      	ldr	r1, [sp, #84]	; 0x54
   247fc:	ebab 0b03 	sub.w	fp, fp, r3
   24800:	461a      	mov	r2, r3
   24802:	4658      	mov	r0, fp
   24804:	f7fd fe14 	bl	22430 <strncpy>
   24808:	f89a 2001 	ldrb.w	r2, [sl, #1]
   2480c:	4b05      	ldr	r3, [pc, #20]	; (24824 <_svfprintf_r+0x1484>)
   2480e:	b10a      	cbz	r2, 24814 <_svfprintf_r+0x1474>
   24810:	f10a 0a01 	add.w	sl, sl, #1
   24814:	f04f 0c00 	mov.w	ip, #0
   24818:	e628      	b.n	2446c <_svfprintf_r+0x10cc>
   2481a:	bf00      	nop
   2481c:	20004f58 	.word	0x20004f58
   24820:	20008964 	.word	0x20008964
   24824:	cccccccd 	.word	0xcccccccd
   24828:	ee1b 1a10 	vmov	r1, s22
   2482c:	aa24      	add	r2, sp, #144	; 0x90
   2482e:	4658      	mov	r0, fp
   24830:	f002 fa88 	bl	26d44 <__ssprint_r>
   24834:	2800      	cmp	r0, #0
   24836:	f47f aa18 	bne.w	23c6a <_svfprintf_r+0x8ca>
   2483a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   2483c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2483e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24842:	e67c      	b.n	2453e <_svfprintf_r+0x119e>
   24844:	9b05      	ldr	r3, [sp, #20]
   24846:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2484a:	930f      	str	r3, [sp, #60]	; 0x3c
   2484c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   24850:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   24854:	9307      	str	r3, [sp, #28]
   24856:	f7fe bf84 	b.w	23762 <_svfprintf_r+0x3c2>
   2485a:	990e      	ldr	r1, [sp, #56]	; 0x38
   2485c:	9805      	ldr	r0, [sp, #20]
   2485e:	1865      	adds	r5, r4, r1
   24860:	1a2d      	subs	r5, r5, r0
   24862:	1acc      	subs	r4, r1, r3
   24864:	42a5      	cmp	r5, r4
   24866:	bfa8      	it	ge
   24868:	4625      	movge	r5, r4
   2486a:	f7ff bb4d 	b.w	23f08 <_svfprintf_r+0xb68>
   2486e:	9b08      	ldr	r3, [sp, #32]
   24870:	9904      	ldr	r1, [sp, #16]
   24872:	f853 2b04 	ldr.w	r2, [r3], #4
   24876:	9308      	str	r3, [sp, #32]
   24878:	8011      	strh	r1, [r2, #0]
   2487a:	464c      	mov	r4, r9
   2487c:	f7fe bdc2 	b.w	23404 <_svfprintf_r+0x64>
   24880:	f913 2b04 	ldrsb.w	r2, [r3], #4
   24884:	9308      	str	r3, [sp, #32]
   24886:	17d1      	asrs	r1, r2, #31
   24888:	460b      	mov	r3, r1
   2488a:	f7fe bfdb 	b.w	23844 <_svfprintf_r+0x4a4>
   2488e:	9a03      	ldr	r2, [sp, #12]
   24890:	2102      	movs	r1, #2
   24892:	ab22      	add	r3, sp, #136	; 0x88
   24894:	9301      	str	r3, [sp, #4]
   24896:	ab1d      	add	r3, sp, #116	; 0x74
   24898:	9300      	str	r3, [sp, #0]
   2489a:	4658      	mov	r0, fp
   2489c:	ab1b      	add	r3, sp, #108	; 0x6c
   2489e:	eeb0 0b4a 	vmov.f64	d0, d10
   248a2:	9202      	str	r2, [sp, #8]
   248a4:	f001 fbc4 	bl	26030 <_dtoa_r>
   248a8:	2d47      	cmp	r5, #71	; 0x47
   248aa:	9a02      	ldr	r2, [sp, #8]
   248ac:	4604      	mov	r4, r0
   248ae:	f000 8161 	beq.w	24b74 <_svfprintf_r+0x17d4>
   248b2:	2d46      	cmp	r5, #70	; 0x46
   248b4:	4410      	add	r0, r2
   248b6:	d105      	bne.n	248c4 <_svfprintf_r+0x1524>
   248b8:	7823      	ldrb	r3, [r4, #0]
   248ba:	2b30      	cmp	r3, #48	; 0x30
   248bc:	f000 826f 	beq.w	24d9e <_svfprintf_r+0x19fe>
   248c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   248c2:	4410      	add	r0, r2
   248c4:	eeb5 ab40 	vcmp.f64	d10, #0.0
   248c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   248cc:	f040 8146 	bne.w	24b5c <_svfprintf_r+0x17bc>
   248d0:	4603      	mov	r3, r0
   248d2:	1b1b      	subs	r3, r3, r4
   248d4:	930e      	str	r3, [sp, #56]	; 0x38
   248d6:	2d47      	cmp	r5, #71	; 0x47
   248d8:	f000 8110 	beq.w	24afc <_svfprintf_r+0x175c>
   248dc:	2d46      	cmp	r5, #70	; 0x46
   248de:	f000 81b5 	beq.w	24c4c <_svfprintf_r+0x18ac>
   248e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   248e4:	930c      	str	r3, [sp, #48]	; 0x30
   248e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   248e8:	2d41      	cmp	r5, #65	; 0x41
   248ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   248ee:	931b      	str	r3, [sp, #108]	; 0x6c
   248f0:	f000 81e5 	beq.w	24cbe <_svfprintf_r+0x191e>
   248f4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   248f8:	2100      	movs	r1, #0
   248fa:	2b00      	cmp	r3, #0
   248fc:	bfb8      	it	lt
   248fe:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   24900:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   24904:	bfba      	itte	lt
   24906:	f1c3 0301 	rsblt	r3, r3, #1
   2490a:	222d      	movlt	r2, #45	; 0x2d
   2490c:	222b      	movge	r2, #43	; 0x2b
   2490e:	2b09      	cmp	r3, #9
   24910:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   24914:	f340 81da 	ble.w	24ccc <_svfprintf_r+0x192c>
   24918:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   2491c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 24d3c <_svfprintf_r+0x199c>
   24920:	462a      	mov	r2, r5
   24922:	4610      	mov	r0, r2
   24924:	fb8c 2103 	smull	r2, r1, ip, r3
   24928:	17da      	asrs	r2, r3, #31
   2492a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   2492e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   24932:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   24936:	3130      	adds	r1, #48	; 0x30
   24938:	f800 1c01 	strb.w	r1, [r0, #-1]
   2493c:	4619      	mov	r1, r3
   2493e:	2963      	cmp	r1, #99	; 0x63
   24940:	4613      	mov	r3, r2
   24942:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   24946:	dcec      	bgt.n	24922 <_svfprintf_r+0x1582>
   24948:	3330      	adds	r3, #48	; 0x30
   2494a:	b2d9      	uxtb	r1, r3
   2494c:	1e83      	subs	r3, r0, #2
   2494e:	429d      	cmp	r5, r3
   24950:	f802 1c01 	strb.w	r1, [r2, #-1]
   24954:	f240 828b 	bls.w	24e6e <_svfprintf_r+0x1ace>
   24958:	4613      	mov	r3, r2
   2495a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   2495e:	e001      	b.n	24964 <_svfprintf_r+0x15c4>
   24960:	f813 1b01 	ldrb.w	r1, [r3], #1
   24964:	f802 1b01 	strb.w	r1, [r2], #1
   24968:	429d      	cmp	r5, r3
   2496a:	d1f9      	bne.n	24960 <_svfprintf_r+0x15c0>
   2496c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   24970:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   24974:	1a1b      	subs	r3, r3, r0
   24976:	4413      	add	r3, r2
   24978:	aa1e      	add	r2, sp, #120	; 0x78
   2497a:	1a9b      	subs	r3, r3, r2
   2497c:	9314      	str	r3, [sp, #80]	; 0x50
   2497e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24980:	9a14      	ldr	r2, [sp, #80]	; 0x50
   24982:	2b01      	cmp	r3, #1
   24984:	441a      	add	r2, r3
   24986:	9205      	str	r2, [sp, #20]
   24988:	f340 8203 	ble.w	24d92 <_svfprintf_r+0x19f2>
   2498c:	9b05      	ldr	r3, [sp, #20]
   2498e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   24990:	4413      	add	r3, r2
   24992:	9305      	str	r3, [sp, #20]
   24994:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   24998:	9a05      	ldr	r2, [sp, #20]
   2499a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   2499e:	2300      	movs	r3, #0
   249a0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   249a4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   249a8:	930f      	str	r3, [sp, #60]	; 0x3c
   249aa:	9202      	str	r2, [sp, #8]
   249ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   249ae:	2b00      	cmp	r3, #0
   249b0:	f040 80b1 	bne.w	24b16 <_svfprintf_r+0x1776>
   249b4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   249b8:	9303      	str	r3, [sp, #12]
   249ba:	f7fe bed2 	b.w	23762 <_svfprintf_r+0x3c2>
   249be:	4620      	mov	r0, r4
   249c0:	f7fd febe 	bl	22740 <strlen>
   249c4:	4602      	mov	r2, r0
   249c6:	9005      	str	r0, [sp, #20]
   249c8:	f7fe bf20 	b.w	2380c <_svfprintf_r+0x46c>
   249cc:	ee1b 1a10 	vmov	r1, s22
   249d0:	aa24      	add	r2, sp, #144	; 0x90
   249d2:	4658      	mov	r0, fp
   249d4:	f002 f9b6 	bl	26d44 <__ssprint_r>
   249d8:	f7fe bded 	b.w	235b6 <_svfprintf_r+0x216>
   249dc:	1c59      	adds	r1, r3, #1
   249de:	4658      	mov	r0, fp
   249e0:	f7fb fd8c 	bl	204fc <_malloc_r>
   249e4:	4604      	mov	r4, r0
   249e6:	2800      	cmp	r0, #0
   249e8:	f000 81ca 	beq.w	24d80 <_svfprintf_r+0x19e0>
   249ec:	9007      	str	r0, [sp, #28]
   249ee:	e6e0      	b.n	247b2 <_svfprintf_r+0x1412>
   249f0:	ee1b 1a10 	vmov	r1, s22
   249f4:	aa24      	add	r2, sp, #144	; 0x90
   249f6:	4658      	mov	r0, fp
   249f8:	f002 f9a4 	bl	26d44 <__ssprint_r>
   249fc:	2800      	cmp	r0, #0
   249fe:	f47f a934 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24a02:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24a04:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24a08:	f7ff ba49 	b.w	23e9e <_svfprintf_r+0xafe>
   24a0c:	ee1b 1a10 	vmov	r1, s22
   24a10:	aa24      	add	r2, sp, #144	; 0x90
   24a12:	4658      	mov	r0, fp
   24a14:	f002 f996 	bl	26d44 <__ssprint_r>
   24a18:	2800      	cmp	r0, #0
   24a1a:	f47f a926 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24a1e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24a22:	991b      	ldr	r1, [sp, #108]	; 0x6c
   24a24:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24a28:	e649      	b.n	246be <_svfprintf_r+0x131e>
   24a2a:	2306      	movs	r3, #6
   24a2c:	9303      	str	r3, [sp, #12]
   24a2e:	f7ff bb83 	b.w	24138 <_svfprintf_r+0xd98>
   24a32:	9b03      	ldr	r3, [sp, #12]
   24a34:	2102      	movs	r1, #2
   24a36:	1c5a      	adds	r2, r3, #1
   24a38:	e72b      	b.n	24892 <_svfprintf_r+0x14f2>
   24a3a:	9a03      	ldr	r2, [sp, #12]
   24a3c:	2103      	movs	r1, #3
   24a3e:	e728      	b.n	24892 <_svfprintf_r+0x14f2>
   24a40:	a81b      	add	r0, sp, #108	; 0x6c
   24a42:	eeb0 0b4a 	vmov.f64	d0, d10
   24a46:	f001 f9c7 	bl	25dd8 <frexp>
   24a4a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   24a4e:	ee20 0b07 	vmul.f64	d0, d0, d7
   24a52:	eeb5 0b40 	vcmp.f64	d0, #0.0
   24a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24a5a:	d101      	bne.n	24a60 <_svfprintf_r+0x16c0>
   24a5c:	2301      	movs	r3, #1
   24a5e:	931b      	str	r3, [sp, #108]	; 0x6c
   24a60:	48b3      	ldr	r0, [pc, #716]	; (24d30 <_svfprintf_r+0x1990>)
   24a62:	9b03      	ldr	r3, [sp, #12]
   24a64:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   24a68:	3b01      	subs	r3, #1
   24a6a:	4622      	mov	r2, r4
   24a6c:	e004      	b.n	24a78 <_svfprintf_r+0x16d8>
   24a6e:	eeb5 0b40 	vcmp.f64	d0, #0.0
   24a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24a76:	d013      	beq.n	24aa0 <_svfprintf_r+0x1700>
   24a78:	ee20 0b05 	vmul.f64	d0, d0, d5
   24a7c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   24a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24a84:	ee17 1a90 	vmov	r1, s15
   24a88:	5c41      	ldrb	r1, [r0, r1]
   24a8a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   24a8e:	4694      	mov	ip, r2
   24a90:	ee30 0b46 	vsub.f64	d0, d0, d6
   24a94:	f802 1b01 	strb.w	r1, [r2], #1
   24a98:	4619      	mov	r1, r3
   24a9a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   24a9e:	d1e6      	bne.n	24a6e <_svfprintf_r+0x16ce>
   24aa0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   24aa4:	eeb4 0bc6 	vcmpe.f64	d0, d6
   24aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24aac:	f300 8148 	bgt.w	24d40 <_svfprintf_r+0x19a0>
   24ab0:	eeb4 0b46 	vcmp.f64	d0, d6
   24ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24ab8:	d104      	bne.n	24ac4 <_svfprintf_r+0x1724>
   24aba:	ee17 3a90 	vmov	r3, s15
   24abe:	07db      	lsls	r3, r3, #31
   24ac0:	f100 813e 	bmi.w	24d40 <_svfprintf_r+0x19a0>
   24ac4:	2900      	cmp	r1, #0
   24ac6:	db06      	blt.n	24ad6 <_svfprintf_r+0x1736>
   24ac8:	1c4b      	adds	r3, r1, #1
   24aca:	4413      	add	r3, r2
   24acc:	2130      	movs	r1, #48	; 0x30
   24ace:	f802 1b01 	strb.w	r1, [r2], #1
   24ad2:	4293      	cmp	r3, r2
   24ad4:	d1fb      	bne.n	24ace <_svfprintf_r+0x172e>
   24ad6:	1b13      	subs	r3, r2, r4
   24ad8:	930e      	str	r3, [sp, #56]	; 0x38
   24ada:	e6fc      	b.n	248d6 <_svfprintf_r+0x1536>
   24adc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   24ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24ae0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   24ae4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   24ae8:	9613      	str	r6, [sp, #76]	; 0x4c
   24aea:	18e3      	adds	r3, r4, r3
   24aec:	429d      	cmp	r5, r3
   24aee:	4629      	mov	r1, r5
   24af0:	bf28      	it	cs
   24af2:	4619      	movcs	r1, r3
   24af4:	4682      	mov	sl, r0
   24af6:	9105      	str	r1, [sp, #20]
   24af8:	f7ff b9d8 	b.w	23eac <_svfprintf_r+0xb0c>
   24afc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   24afe:	930c      	str	r3, [sp, #48]	; 0x30
   24b00:	1cda      	adds	r2, r3, #3
   24b02:	db02      	blt.n	24b0a <_svfprintf_r+0x176a>
   24b04:	9a03      	ldr	r2, [sp, #12]
   24b06:	4293      	cmp	r3, r2
   24b08:	dd0c      	ble.n	24b24 <_svfprintf_r+0x1784>
   24b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24b0c:	3b02      	subs	r3, #2
   24b0e:	930b      	str	r3, [sp, #44]	; 0x2c
   24b10:	f023 0520 	bic.w	r5, r3, #32
   24b14:	e6e7      	b.n	248e6 <_svfprintf_r+0x1546>
   24b16:	212d      	movs	r1, #45	; 0x2d
   24b18:	2300      	movs	r3, #0
   24b1a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   24b1e:	9303      	str	r3, [sp, #12]
   24b20:	f7fe be22 	b.w	23768 <_svfprintf_r+0x3c8>
   24b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   24b28:	4293      	cmp	r3, r2
   24b2a:	f2c0 80bd 	blt.w	24ca8 <_svfprintf_r+0x1908>
   24b2e:	07f0      	lsls	r0, r6, #31
   24b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24b32:	f140 8132 	bpl.w	24d9a <_svfprintf_r+0x19fa>
   24b36:	9a10      	ldr	r2, [sp, #64]	; 0x40
   24b38:	4413      	add	r3, r2
   24b3a:	9305      	str	r3, [sp, #20]
   24b3c:	0571      	lsls	r1, r6, #21
   24b3e:	d503      	bpl.n	24b48 <_svfprintf_r+0x17a8>
   24b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24b42:	2b00      	cmp	r3, #0
   24b44:	f300 8135 	bgt.w	24db2 <_svfprintf_r+0x1a12>
   24b48:	9b05      	ldr	r3, [sp, #20]
   24b4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24b4e:	9302      	str	r3, [sp, #8]
   24b50:	2367      	movs	r3, #103	; 0x67
   24b52:	930b      	str	r3, [sp, #44]	; 0x2c
   24b54:	2300      	movs	r3, #0
   24b56:	930f      	str	r3, [sp, #60]	; 0x3c
   24b58:	930d      	str	r3, [sp, #52]	; 0x34
   24b5a:	e727      	b.n	249ac <_svfprintf_r+0x160c>
   24b5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   24b5e:	4283      	cmp	r3, r0
   24b60:	f4bf aeb7 	bcs.w	248d2 <_svfprintf_r+0x1532>
   24b64:	2130      	movs	r1, #48	; 0x30
   24b66:	1c5a      	adds	r2, r3, #1
   24b68:	9222      	str	r2, [sp, #136]	; 0x88
   24b6a:	7019      	strb	r1, [r3, #0]
   24b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   24b6e:	4298      	cmp	r0, r3
   24b70:	d8f9      	bhi.n	24b66 <_svfprintf_r+0x17c6>
   24b72:	e6ae      	b.n	248d2 <_svfprintf_r+0x1532>
   24b74:	07f3      	lsls	r3, r6, #31
   24b76:	f100 80a7 	bmi.w	24cc8 <_svfprintf_r+0x1928>
   24b7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   24b7c:	e6a9      	b.n	248d2 <_svfprintf_r+0x1532>
   24b7e:	aa24      	add	r2, sp, #144	; 0x90
   24b80:	4658      	mov	r0, fp
   24b82:	9105      	str	r1, [sp, #20]
   24b84:	f002 f8de 	bl	26d44 <__ssprint_r>
   24b88:	2800      	cmp	r0, #0
   24b8a:	f47f a86e 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24b8e:	f896 c000 	ldrb.w	ip, [r6]
   24b92:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24b94:	9905      	ldr	r1, [sp, #20]
   24b96:	a827      	add	r0, sp, #156	; 0x9c
   24b98:	4465      	add	r5, ip
   24b9a:	f7ff bbec 	b.w	24376 <_svfprintf_r+0xfd6>
   24b9e:	ee1b 1a10 	vmov	r1, s22
   24ba2:	aa24      	add	r2, sp, #144	; 0x90
   24ba4:	4658      	mov	r0, fp
   24ba6:	f002 f8cd 	bl	26d44 <__ssprint_r>
   24baa:	2800      	cmp	r0, #0
   24bac:	f47f a85d 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24bb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24bb2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24bb6:	f7ff b96b 	b.w	23e90 <_svfprintf_r+0xaf0>
   24bba:	2378      	movs	r3, #120	; 0x78
   24bbc:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   24bc0:	2330      	movs	r3, #48	; 0x30
   24bc2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   24bc6:	9b03      	ldr	r3, [sp, #12]
   24bc8:	2b63      	cmp	r3, #99	; 0x63
   24bca:	f048 0602 	orr.w	r6, r8, #2
   24bce:	f300 80a6 	bgt.w	24d1e <_svfprintf_r+0x197e>
   24bd2:	2300      	movs	r3, #0
   24bd4:	9307      	str	r3, [sp, #28]
   24bd6:	ac37      	add	r4, sp, #220	; 0xdc
   24bd8:	ee18 3a90 	vmov	r3, s17
   24bdc:	2b00      	cmp	r3, #0
   24bde:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   24be2:	db2b      	blt.n	24c3c <_svfprintf_r+0x189c>
   24be4:	eeb0 ab48 	vmov.f64	d10, d8
   24be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24bea:	f023 0520 	bic.w	r5, r3, #32
   24bee:	2300      	movs	r3, #0
   24bf0:	9309      	str	r3, [sp, #36]	; 0x24
   24bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24bf4:	2b61      	cmp	r3, #97	; 0x61
   24bf6:	f47f aaad 	bne.w	24154 <_svfprintf_r+0xdb4>
   24bfa:	eeb0 0b4a 	vmov.f64	d0, d10
   24bfe:	a81b      	add	r0, sp, #108	; 0x6c
   24c00:	f001 f8ea 	bl	25dd8 <frexp>
   24c04:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   24c08:	ee20 0b07 	vmul.f64	d0, d0, d7
   24c0c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   24c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24c14:	d101      	bne.n	24c1a <_svfprintf_r+0x187a>
   24c16:	2301      	movs	r3, #1
   24c18:	931b      	str	r3, [sp, #108]	; 0x6c
   24c1a:	4846      	ldr	r0, [pc, #280]	; (24d34 <_svfprintf_r+0x1994>)
   24c1c:	e721      	b.n	24a62 <_svfprintf_r+0x16c2>
   24c1e:	ee1b 1a10 	vmov	r1, s22
   24c22:	aa24      	add	r2, sp, #144	; 0x90
   24c24:	4658      	mov	r0, fp
   24c26:	f002 f88d 	bl	26d44 <__ssprint_r>
   24c2a:	2800      	cmp	r0, #0
   24c2c:	f47f a81d 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   24c32:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24c34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24c38:	f7ff b94e 	b.w	23ed8 <_svfprintf_r+0xb38>
   24c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24c3e:	f023 0520 	bic.w	r5, r3, #32
   24c42:	232d      	movs	r3, #45	; 0x2d
   24c44:	9309      	str	r3, [sp, #36]	; 0x24
   24c46:	eeb1 ab48 	vneg.f64	d10, d8
   24c4a:	e7d2      	b.n	24bf2 <_svfprintf_r+0x1852>
   24c4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   24c4e:	920c      	str	r2, [sp, #48]	; 0x30
   24c50:	2a00      	cmp	r2, #0
   24c52:	f006 0301 	and.w	r3, r6, #1
   24c56:	f340 810d 	ble.w	24e74 <_svfprintf_r+0x1ad4>
   24c5a:	9903      	ldr	r1, [sp, #12]
   24c5c:	430b      	orrs	r3, r1
   24c5e:	f040 80cf 	bne.w	24e00 <_svfprintf_r+0x1a60>
   24c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24c64:	9305      	str	r3, [sp, #20]
   24c66:	2366      	movs	r3, #102	; 0x66
   24c68:	930b      	str	r3, [sp, #44]	; 0x2c
   24c6a:	0572      	lsls	r2, r6, #21
   24c6c:	f100 80a3 	bmi.w	24db6 <_svfprintf_r+0x1a16>
   24c70:	9b05      	ldr	r3, [sp, #20]
   24c72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24c76:	9302      	str	r3, [sp, #8]
   24c78:	e76c      	b.n	24b54 <_svfprintf_r+0x17b4>
   24c7a:	ee1b 1a10 	vmov	r1, s22
   24c7e:	aa24      	add	r2, sp, #144	; 0x90
   24c80:	4658      	mov	r0, fp
   24c82:	f002 f85f 	bl	26d44 <__ssprint_r>
   24c86:	2800      	cmp	r0, #0
   24c88:	f47e afef 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24c8c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   24c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24c90:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24c92:	1b1c      	subs	r4, r3, r4
   24c94:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24c98:	f7ff b936 	b.w	23f08 <_svfprintf_r+0xb68>
   24c9c:	2358      	movs	r3, #88	; 0x58
   24c9e:	e78d      	b.n	24bbc <_svfprintf_r+0x181c>
   24ca0:	2200      	movs	r2, #0
   24ca2:	9203      	str	r2, [sp, #12]
   24ca4:	f7fe bbda 	b.w	2345c <_svfprintf_r+0xbc>
   24ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24caa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   24cac:	189a      	adds	r2, r3, r2
   24cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24cb0:	9205      	str	r2, [sp, #20]
   24cb2:	2b00      	cmp	r3, #0
   24cb4:	f340 80ab 	ble.w	24e0e <_svfprintf_r+0x1a6e>
   24cb8:	2367      	movs	r3, #103	; 0x67
   24cba:	930b      	str	r3, [sp, #44]	; 0x2c
   24cbc:	e7d5      	b.n	24c6a <_svfprintf_r+0x18ca>
   24cbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24cc0:	320f      	adds	r2, #15
   24cc2:	b2d2      	uxtb	r2, r2
   24cc4:	2101      	movs	r1, #1
   24cc6:	e618      	b.n	248fa <_svfprintf_r+0x155a>
   24cc8:	18a0      	adds	r0, r4, r2
   24cca:	e5fb      	b.n	248c4 <_svfprintf_r+0x1524>
   24ccc:	2900      	cmp	r1, #0
   24cce:	f040 80a8 	bne.w	24e22 <_svfprintf_r+0x1a82>
   24cd2:	2230      	movs	r2, #48	; 0x30
   24cd4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   24cd8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   24cdc:	3330      	adds	r3, #48	; 0x30
   24cde:	f802 3b01 	strb.w	r3, [r2], #1
   24ce2:	ab1e      	add	r3, sp, #120	; 0x78
   24ce4:	1ad3      	subs	r3, r2, r3
   24ce6:	9314      	str	r3, [sp, #80]	; 0x50
   24ce8:	e649      	b.n	2497e <_svfprintf_r+0x15de>
   24cea:	3301      	adds	r3, #1
   24cec:	4912      	ldr	r1, [pc, #72]	; (24d38 <_svfprintf_r+0x1998>)
   24cee:	f8ca 5004 	str.w	r5, [sl, #4]
   24cf2:	442a      	add	r2, r5
   24cf4:	2b07      	cmp	r3, #7
   24cf6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24cfa:	f8ca 1000 	str.w	r1, [sl]
   24cfe:	f77f ac33 	ble.w	24568 <_svfprintf_r+0x11c8>
   24d02:	ee1b 1a10 	vmov	r1, s22
   24d06:	aa24      	add	r2, sp, #144	; 0x90
   24d08:	4658      	mov	r0, fp
   24d0a:	f002 f81b 	bl	26d44 <__ssprint_r>
   24d0e:	2800      	cmp	r0, #0
   24d10:	f47e afab 	bne.w	23c6a <_svfprintf_r+0x8ca>
   24d14:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24d18:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24d1c:	e426      	b.n	2456c <_svfprintf_r+0x11cc>
   24d1e:	1c59      	adds	r1, r3, #1
   24d20:	4658      	mov	r0, fp
   24d22:	f7fb fbeb 	bl	204fc <_malloc_r>
   24d26:	4604      	mov	r4, r0
   24d28:	b350      	cbz	r0, 24d80 <_svfprintf_r+0x19e0>
   24d2a:	9007      	str	r0, [sp, #28]
   24d2c:	e754      	b.n	24bd8 <_svfprintf_r+0x1838>
   24d2e:	bf00      	nop
   24d30:	200043ac 	.word	0x200043ac
   24d34:	20004398 	.word	0x20004398
   24d38:	20008964 	.word	0x20008964
   24d3c:	66666667 	.word	0x66666667
   24d40:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   24d44:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   24d48:	f890 c00f 	ldrb.w	ip, [r0, #15]
   24d4c:	4561      	cmp	r1, ip
   24d4e:	4613      	mov	r3, r2
   24d50:	d10a      	bne.n	24d68 <_svfprintf_r+0x19c8>
   24d52:	f04f 0e30 	mov.w	lr, #48	; 0x30
   24d56:	f803 ec01 	strb.w	lr, [r3, #-1]
   24d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   24d5c:	1e59      	subs	r1, r3, #1
   24d5e:	9122      	str	r1, [sp, #136]	; 0x88
   24d60:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   24d64:	458c      	cmp	ip, r1
   24d66:	d0f6      	beq.n	24d56 <_svfprintf_r+0x19b6>
   24d68:	2939      	cmp	r1, #57	; 0x39
   24d6a:	bf16      	itet	ne
   24d6c:	3101      	addne	r1, #1
   24d6e:	7a81      	ldrbeq	r1, [r0, #10]
   24d70:	b2c9      	uxtbne	r1, r1
   24d72:	f803 1c01 	strb.w	r1, [r3, #-1]
   24d76:	e6ae      	b.n	24ad6 <_svfprintf_r+0x1736>
   24d78:	2300      	movs	r3, #0
   24d7a:	4690      	mov	r8, r2
   24d7c:	9307      	str	r3, [sp, #28]
   24d7e:	e760      	b.n	24c42 <_svfprintf_r+0x18a2>
   24d80:	ee1b 2a10 	vmov	r2, s22
   24d84:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   24d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24d8c:	8193      	strh	r3, [r2, #12]
   24d8e:	f7fe bc16 	b.w	235be <_svfprintf_r+0x21e>
   24d92:	07f5      	lsls	r5, r6, #31
   24d94:	f57f adfe 	bpl.w	24994 <_svfprintf_r+0x15f4>
   24d98:	e5f8      	b.n	2498c <_svfprintf_r+0x15ec>
   24d9a:	9305      	str	r3, [sp, #20]
   24d9c:	e6ce      	b.n	24b3c <_svfprintf_r+0x179c>
   24d9e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   24da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24da6:	f43f ad8b 	beq.w	248c0 <_svfprintf_r+0x1520>
   24daa:	f1c2 0201 	rsb	r2, r2, #1
   24dae:	921b      	str	r2, [sp, #108]	; 0x6c
   24db0:	e587      	b.n	248c2 <_svfprintf_r+0x1522>
   24db2:	2367      	movs	r3, #103	; 0x67
   24db4:	930b      	str	r3, [sp, #44]	; 0x2c
   24db6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   24db8:	780b      	ldrb	r3, [r1, #0]
   24dba:	2bff      	cmp	r3, #255	; 0xff
   24dbc:	d079      	beq.n	24eb2 <_svfprintf_r+0x1b12>
   24dbe:	2500      	movs	r5, #0
   24dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24dc2:	4628      	mov	r0, r5
   24dc4:	e003      	b.n	24dce <_svfprintf_r+0x1a2e>
   24dc6:	3001      	adds	r0, #1
   24dc8:	3101      	adds	r1, #1
   24dca:	2bff      	cmp	r3, #255	; 0xff
   24dcc:	d008      	beq.n	24de0 <_svfprintf_r+0x1a40>
   24dce:	4293      	cmp	r3, r2
   24dd0:	da06      	bge.n	24de0 <_svfprintf_r+0x1a40>
   24dd2:	1ad2      	subs	r2, r2, r3
   24dd4:	784b      	ldrb	r3, [r1, #1]
   24dd6:	2b00      	cmp	r3, #0
   24dd8:	d1f5      	bne.n	24dc6 <_svfprintf_r+0x1a26>
   24dda:	780b      	ldrb	r3, [r1, #0]
   24ddc:	3501      	adds	r5, #1
   24dde:	e7f4      	b.n	24dca <_svfprintf_r+0x1a2a>
   24de0:	920c      	str	r2, [sp, #48]	; 0x30
   24de2:	9113      	str	r1, [sp, #76]	; 0x4c
   24de4:	900d      	str	r0, [sp, #52]	; 0x34
   24de6:	950f      	str	r5, [sp, #60]	; 0x3c
   24de8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   24dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24dec:	9916      	ldr	r1, [sp, #88]	; 0x58
   24dee:	4413      	add	r3, r2
   24df0:	9a05      	ldr	r2, [sp, #20]
   24df2:	fb01 2303 	mla	r3, r1, r3, r2
   24df6:	9305      	str	r3, [sp, #20]
   24df8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24dfc:	9302      	str	r3, [sp, #8]
   24dfe:	e5d5      	b.n	249ac <_svfprintf_r+0x160c>
   24e00:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24e02:	18d3      	adds	r3, r2, r3
   24e04:	4419      	add	r1, r3
   24e06:	2366      	movs	r3, #102	; 0x66
   24e08:	9105      	str	r1, [sp, #20]
   24e0a:	930b      	str	r3, [sp, #44]	; 0x2c
   24e0c:	e72d      	b.n	24c6a <_svfprintf_r+0x18ca>
   24e0e:	f1c3 0301 	rsb	r3, r3, #1
   24e12:	441a      	add	r2, r3
   24e14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   24e18:	9302      	str	r3, [sp, #8]
   24e1a:	2367      	movs	r3, #103	; 0x67
   24e1c:	9205      	str	r2, [sp, #20]
   24e1e:	930b      	str	r3, [sp, #44]	; 0x2c
   24e20:	e698      	b.n	24b54 <_svfprintf_r+0x17b4>
   24e22:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   24e26:	e759      	b.n	24cdc <_svfprintf_r+0x193c>
   24e28:	9b03      	ldr	r3, [sp, #12]
   24e2a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   24e2e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   24e32:	9305      	str	r3, [sp, #20]
   24e34:	e4b4      	b.n	247a0 <_svfprintf_r+0x1400>
   24e36:	ee18 3a90 	vmov	r3, s17
   24e3a:	2b00      	cmp	r3, #0
   24e3c:	bfb4      	ite	lt
   24e3e:	212d      	movlt	r1, #45	; 0x2d
   24e40:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   24e44:	4c25      	ldr	r4, [pc, #148]	; (24edc <_svfprintf_r+0x1b3c>)
   24e46:	4b26      	ldr	r3, [pc, #152]	; (24ee0 <_svfprintf_r+0x1b40>)
   24e48:	bfb8      	it	lt
   24e4a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   24e4e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   24e52:	f7fe bc79 	b.w	23748 <_svfprintf_r+0x3a8>
   24e56:	9b03      	ldr	r3, [sp, #12]
   24e58:	9302      	str	r3, [sp, #8]
   24e5a:	9305      	str	r3, [sp, #20]
   24e5c:	2373      	movs	r3, #115	; 0x73
   24e5e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   24e62:	9003      	str	r0, [sp, #12]
   24e64:	900f      	str	r0, [sp, #60]	; 0x3c
   24e66:	900d      	str	r0, [sp, #52]	; 0x34
   24e68:	930b      	str	r3, [sp, #44]	; 0x2c
   24e6a:	f7fe bc7a 	b.w	23762 <_svfprintf_r+0x3c2>
   24e6e:	2302      	movs	r3, #2
   24e70:	9314      	str	r3, [sp, #80]	; 0x50
   24e72:	e584      	b.n	2497e <_svfprintf_r+0x15de>
   24e74:	9a03      	ldr	r2, [sp, #12]
   24e76:	4313      	orrs	r3, r2
   24e78:	d105      	bne.n	24e86 <_svfprintf_r+0x1ae6>
   24e7a:	2301      	movs	r3, #1
   24e7c:	2266      	movs	r2, #102	; 0x66
   24e7e:	9302      	str	r3, [sp, #8]
   24e80:	920b      	str	r2, [sp, #44]	; 0x2c
   24e82:	9305      	str	r3, [sp, #20]
   24e84:	e666      	b.n	24b54 <_svfprintf_r+0x17b4>
   24e86:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24e88:	3301      	adds	r3, #1
   24e8a:	441a      	add	r2, r3
   24e8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   24e90:	9302      	str	r3, [sp, #8]
   24e92:	2366      	movs	r3, #102	; 0x66
   24e94:	9205      	str	r2, [sp, #20]
   24e96:	930b      	str	r3, [sp, #44]	; 0x2c
   24e98:	e65c      	b.n	24b54 <_svfprintf_r+0x17b4>
   24e9a:	9a08      	ldr	r2, [sp, #32]
   24e9c:	f899 3001 	ldrb.w	r3, [r9, #1]
   24ea0:	4689      	mov	r9, r1
   24ea2:	f852 1b04 	ldr.w	r1, [r2], #4
   24ea6:	9208      	str	r2, [sp, #32]
   24ea8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   24eac:	9103      	str	r1, [sp, #12]
   24eae:	f7fe bad3 	b.w	23458 <_svfprintf_r+0xb8>
   24eb2:	2300      	movs	r3, #0
   24eb4:	930f      	str	r3, [sp, #60]	; 0x3c
   24eb6:	930d      	str	r3, [sp, #52]	; 0x34
   24eb8:	e796      	b.n	24de8 <_svfprintf_r+0x1a48>
   24eba:	230c      	movs	r3, #12
   24ebc:	f8cb 3000 	str.w	r3, [fp]
   24ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24ec4:	9304      	str	r3, [sp, #16]
   24ec6:	f7fe bb81 	b.w	235cc <_svfprintf_r+0x22c>
   24eca:	ee1b 2a10 	vmov	r2, s22
   24ece:	8993      	ldrh	r3, [r2, #12]
   24ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24ed4:	8193      	strh	r3, [r2, #12]
   24ed6:	f7fe bec8 	b.w	23c6a <_svfprintf_r+0x8ca>
   24eda:	bf00      	nop
   24edc:	20004394 	.word	0x20004394
   24ee0:	20003aac 	.word	0x20003aac

00024ee4 <_Balloc>:
   24ee4:	6c43      	ldr	r3, [r0, #68]	; 0x44
   24ee6:	b570      	push	{r4, r5, r6, lr}
   24ee8:	4605      	mov	r5, r0
   24eea:	460c      	mov	r4, r1
   24eec:	b14b      	cbz	r3, 24f02 <_Balloc+0x1e>
   24eee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   24ef2:	b180      	cbz	r0, 24f16 <_Balloc+0x32>
   24ef4:	6802      	ldr	r2, [r0, #0]
   24ef6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   24efa:	2300      	movs	r3, #0
   24efc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   24f00:	bd70      	pop	{r4, r5, r6, pc}
   24f02:	2221      	movs	r2, #33	; 0x21
   24f04:	2104      	movs	r1, #4
   24f06:	f000 ffc3 	bl	25e90 <_calloc_r>
   24f0a:	4603      	mov	r3, r0
   24f0c:	6468      	str	r0, [r5, #68]	; 0x44
   24f0e:	2800      	cmp	r0, #0
   24f10:	d1ed      	bne.n	24eee <_Balloc+0xa>
   24f12:	2000      	movs	r0, #0
   24f14:	bd70      	pop	{r4, r5, r6, pc}
   24f16:	2101      	movs	r1, #1
   24f18:	fa01 f604 	lsl.w	r6, r1, r4
   24f1c:	1d72      	adds	r2, r6, #5
   24f1e:	0092      	lsls	r2, r2, #2
   24f20:	4628      	mov	r0, r5
   24f22:	f000 ffb5 	bl	25e90 <_calloc_r>
   24f26:	2800      	cmp	r0, #0
   24f28:	d0f3      	beq.n	24f12 <_Balloc+0x2e>
   24f2a:	e9c0 4601 	strd	r4, r6, [r0, #4]
   24f2e:	e7e4      	b.n	24efa <_Balloc+0x16>

00024f30 <_Bfree>:
   24f30:	b131      	cbz	r1, 24f40 <_Bfree+0x10>
   24f32:	6c43      	ldr	r3, [r0, #68]	; 0x44
   24f34:	684a      	ldr	r2, [r1, #4]
   24f36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   24f3a:	6008      	str	r0, [r1, #0]
   24f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   24f40:	4770      	bx	lr
   24f42:	bf00      	nop

00024f44 <__multadd>:
   24f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f48:	690e      	ldr	r6, [r1, #16]
   24f4a:	4680      	mov	r8, r0
   24f4c:	460f      	mov	r7, r1
   24f4e:	461d      	mov	r5, r3
   24f50:	f101 0e14 	add.w	lr, r1, #20
   24f54:	2000      	movs	r0, #0
   24f56:	f8de 1000 	ldr.w	r1, [lr]
   24f5a:	b28c      	uxth	r4, r1
   24f5c:	fb02 5304 	mla	r3, r2, r4, r5
   24f60:	0c09      	lsrs	r1, r1, #16
   24f62:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   24f66:	fb02 cc01 	mla	ip, r2, r1, ip
   24f6a:	3001      	adds	r0, #1
   24f6c:	b29c      	uxth	r4, r3
   24f6e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   24f72:	4286      	cmp	r6, r0
   24f74:	f84e 4b04 	str.w	r4, [lr], #4
   24f78:	ea4f 451c 	mov.w	r5, ip, lsr #16
   24f7c:	dceb      	bgt.n	24f56 <__multadd+0x12>
   24f7e:	b13d      	cbz	r5, 24f90 <__multadd+0x4c>
   24f80:	68bb      	ldr	r3, [r7, #8]
   24f82:	42b3      	cmp	r3, r6
   24f84:	dd07      	ble.n	24f96 <__multadd+0x52>
   24f86:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   24f8a:	3601      	adds	r6, #1
   24f8c:	615d      	str	r5, [r3, #20]
   24f8e:	613e      	str	r6, [r7, #16]
   24f90:	4638      	mov	r0, r7
   24f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24f96:	6879      	ldr	r1, [r7, #4]
   24f98:	4640      	mov	r0, r8
   24f9a:	3101      	adds	r1, #1
   24f9c:	f7ff ffa2 	bl	24ee4 <_Balloc>
   24fa0:	4604      	mov	r4, r0
   24fa2:	b1b0      	cbz	r0, 24fd2 <__multadd+0x8e>
   24fa4:	693a      	ldr	r2, [r7, #16]
   24fa6:	3202      	adds	r2, #2
   24fa8:	f107 010c 	add.w	r1, r7, #12
   24fac:	0092      	lsls	r2, r2, #2
   24fae:	300c      	adds	r0, #12
   24fb0:	f7f6 fe3a 	bl	1bc28 <memcpy>
   24fb4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   24fb8:	687a      	ldr	r2, [r7, #4]
   24fba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   24fbe:	6039      	str	r1, [r7, #0]
   24fc0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   24fc4:	4627      	mov	r7, r4
   24fc6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   24fca:	3601      	adds	r6, #1
   24fcc:	615d      	str	r5, [r3, #20]
   24fce:	613e      	str	r6, [r7, #16]
   24fd0:	e7de      	b.n	24f90 <__multadd+0x4c>
   24fd2:	4b03      	ldr	r3, [pc, #12]	; (24fe0 <__multadd+0x9c>)
   24fd4:	4803      	ldr	r0, [pc, #12]	; (24fe4 <__multadd+0xa0>)
   24fd6:	4622      	mov	r2, r4
   24fd8:	21ba      	movs	r1, #186	; 0xba
   24fda:	f000 ff39 	bl	25e50 <__assert_func>
   24fde:	bf00      	nop
   24fe0:	20003ffc 	.word	0x20003ffc
   24fe4:	2000417c 	.word	0x2000417c

00024fe8 <__s2b>:
   24fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24fec:	4617      	mov	r7, r2
   24fee:	4a27      	ldr	r2, [pc, #156]	; (2508c <__s2b+0xa4>)
   24ff0:	461e      	mov	r6, r3
   24ff2:	3308      	adds	r3, #8
   24ff4:	460c      	mov	r4, r1
   24ff6:	2e09      	cmp	r6, #9
   24ff8:	fb82 1203 	smull	r1, r2, r2, r3
   24ffc:	ea4f 73e3 	mov.w	r3, r3, asr #31
   25000:	4605      	mov	r5, r0
   25002:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   25006:	dd39      	ble.n	2507c <__s2b+0x94>
   25008:	f04f 0c01 	mov.w	ip, #1
   2500c:	2100      	movs	r1, #0
   2500e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   25012:	4563      	cmp	r3, ip
   25014:	f101 0101 	add.w	r1, r1, #1
   25018:	dcf9      	bgt.n	2500e <__s2b+0x26>
   2501a:	4628      	mov	r0, r5
   2501c:	f7ff ff62 	bl	24ee4 <_Balloc>
   25020:	4601      	mov	r1, r0
   25022:	b368      	cbz	r0, 25080 <__s2b+0x98>
   25024:	9b08      	ldr	r3, [sp, #32]
   25026:	6143      	str	r3, [r0, #20]
   25028:	2f09      	cmp	r7, #9
   2502a:	f04f 0301 	mov.w	r3, #1
   2502e:	6103      	str	r3, [r0, #16]
   25030:	dc12      	bgt.n	25058 <__s2b+0x70>
   25032:	340a      	adds	r4, #10
   25034:	2709      	movs	r7, #9
   25036:	42be      	cmp	r6, r7
   25038:	dd0b      	ble.n	25052 <__s2b+0x6a>
   2503a:	1bf2      	subs	r2, r6, r7
   2503c:	18a6      	adds	r6, r4, r2
   2503e:	f814 3b01 	ldrb.w	r3, [r4], #1
   25042:	220a      	movs	r2, #10
   25044:	3b30      	subs	r3, #48	; 0x30
   25046:	4628      	mov	r0, r5
   25048:	f7ff ff7c 	bl	24f44 <__multadd>
   2504c:	42a6      	cmp	r6, r4
   2504e:	4601      	mov	r1, r0
   25050:	d1f5      	bne.n	2503e <__s2b+0x56>
   25052:	4608      	mov	r0, r1
   25054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25058:	f104 0909 	add.w	r9, r4, #9
   2505c:	46c8      	mov	r8, r9
   2505e:	443c      	add	r4, r7
   25060:	f818 3b01 	ldrb.w	r3, [r8], #1
   25064:	220a      	movs	r2, #10
   25066:	3b30      	subs	r3, #48	; 0x30
   25068:	4628      	mov	r0, r5
   2506a:	f7ff ff6b 	bl	24f44 <__multadd>
   2506e:	45a0      	cmp	r8, r4
   25070:	4601      	mov	r1, r0
   25072:	d1f5      	bne.n	25060 <__s2b+0x78>
   25074:	f1a7 0408 	sub.w	r4, r7, #8
   25078:	444c      	add	r4, r9
   2507a:	e7dc      	b.n	25036 <__s2b+0x4e>
   2507c:	2100      	movs	r1, #0
   2507e:	e7cc      	b.n	2501a <__s2b+0x32>
   25080:	460a      	mov	r2, r1
   25082:	4b03      	ldr	r3, [pc, #12]	; (25090 <__s2b+0xa8>)
   25084:	4803      	ldr	r0, [pc, #12]	; (25094 <__s2b+0xac>)
   25086:	21d3      	movs	r1, #211	; 0xd3
   25088:	f000 fee2 	bl	25e50 <__assert_func>
   2508c:	38e38e39 	.word	0x38e38e39
   25090:	20003ffc 	.word	0x20003ffc
   25094:	2000417c 	.word	0x2000417c

00025098 <__hi0bits>:
   25098:	0c03      	lsrs	r3, r0, #16
   2509a:	041b      	lsls	r3, r3, #16
   2509c:	b9d3      	cbnz	r3, 250d4 <__hi0bits+0x3c>
   2509e:	0400      	lsls	r0, r0, #16
   250a0:	2310      	movs	r3, #16
   250a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   250a6:	bf04      	itt	eq
   250a8:	0200      	lsleq	r0, r0, #8
   250aa:	3308      	addeq	r3, #8
   250ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   250b0:	bf04      	itt	eq
   250b2:	0100      	lsleq	r0, r0, #4
   250b4:	3304      	addeq	r3, #4
   250b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   250ba:	bf04      	itt	eq
   250bc:	0080      	lsleq	r0, r0, #2
   250be:	3302      	addeq	r3, #2
   250c0:	2800      	cmp	r0, #0
   250c2:	db05      	blt.n	250d0 <__hi0bits+0x38>
   250c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   250c8:	f103 0301 	add.w	r3, r3, #1
   250cc:	bf08      	it	eq
   250ce:	2320      	moveq	r3, #32
   250d0:	4618      	mov	r0, r3
   250d2:	4770      	bx	lr
   250d4:	2300      	movs	r3, #0
   250d6:	e7e4      	b.n	250a2 <__hi0bits+0xa>

000250d8 <__lo0bits>:
   250d8:	6803      	ldr	r3, [r0, #0]
   250da:	f013 0207 	ands.w	r2, r3, #7
   250de:	d008      	beq.n	250f2 <__lo0bits+0x1a>
   250e0:	07d9      	lsls	r1, r3, #31
   250e2:	d41f      	bmi.n	25124 <__lo0bits+0x4c>
   250e4:	079a      	lsls	r2, r3, #30
   250e6:	d522      	bpl.n	2512e <__lo0bits+0x56>
   250e8:	085b      	lsrs	r3, r3, #1
   250ea:	6003      	str	r3, [r0, #0]
   250ec:	2201      	movs	r2, #1
   250ee:	4610      	mov	r0, r2
   250f0:	4770      	bx	lr
   250f2:	b299      	uxth	r1, r3
   250f4:	b909      	cbnz	r1, 250fa <__lo0bits+0x22>
   250f6:	0c1b      	lsrs	r3, r3, #16
   250f8:	2210      	movs	r2, #16
   250fa:	b2d9      	uxtb	r1, r3
   250fc:	b909      	cbnz	r1, 25102 <__lo0bits+0x2a>
   250fe:	3208      	adds	r2, #8
   25100:	0a1b      	lsrs	r3, r3, #8
   25102:	0719      	lsls	r1, r3, #28
   25104:	bf04      	itt	eq
   25106:	091b      	lsreq	r3, r3, #4
   25108:	3204      	addeq	r2, #4
   2510a:	0799      	lsls	r1, r3, #30
   2510c:	bf04      	itt	eq
   2510e:	089b      	lsreq	r3, r3, #2
   25110:	3202      	addeq	r2, #2
   25112:	07d9      	lsls	r1, r3, #31
   25114:	d403      	bmi.n	2511e <__lo0bits+0x46>
   25116:	085b      	lsrs	r3, r3, #1
   25118:	f102 0201 	add.w	r2, r2, #1
   2511c:	d005      	beq.n	2512a <__lo0bits+0x52>
   2511e:	6003      	str	r3, [r0, #0]
   25120:	4610      	mov	r0, r2
   25122:	4770      	bx	lr
   25124:	2200      	movs	r2, #0
   25126:	4610      	mov	r0, r2
   25128:	4770      	bx	lr
   2512a:	2220      	movs	r2, #32
   2512c:	e7df      	b.n	250ee <__lo0bits+0x16>
   2512e:	089b      	lsrs	r3, r3, #2
   25130:	2202      	movs	r2, #2
   25132:	6003      	str	r3, [r0, #0]
   25134:	4610      	mov	r0, r2
   25136:	4770      	bx	lr

00025138 <__i2b>:
   25138:	b538      	push	{r3, r4, r5, lr}
   2513a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   2513c:	4604      	mov	r4, r0
   2513e:	460d      	mov	r5, r1
   25140:	b14b      	cbz	r3, 25156 <__i2b+0x1e>
   25142:	6858      	ldr	r0, [r3, #4]
   25144:	b1b0      	cbz	r0, 25174 <__i2b+0x3c>
   25146:	6802      	ldr	r2, [r0, #0]
   25148:	605a      	str	r2, [r3, #4]
   2514a:	2200      	movs	r2, #0
   2514c:	2301      	movs	r3, #1
   2514e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   25152:	60c2      	str	r2, [r0, #12]
   25154:	bd38      	pop	{r3, r4, r5, pc}
   25156:	2221      	movs	r2, #33	; 0x21
   25158:	2104      	movs	r1, #4
   2515a:	f000 fe99 	bl	25e90 <_calloc_r>
   2515e:	4603      	mov	r3, r0
   25160:	6460      	str	r0, [r4, #68]	; 0x44
   25162:	2800      	cmp	r0, #0
   25164:	d1ed      	bne.n	25142 <__i2b+0xa>
   25166:	4b09      	ldr	r3, [pc, #36]	; (2518c <__i2b+0x54>)
   25168:	4809      	ldr	r0, [pc, #36]	; (25190 <__i2b+0x58>)
   2516a:	2200      	movs	r2, #0
   2516c:	f240 1145 	movw	r1, #325	; 0x145
   25170:	f000 fe6e 	bl	25e50 <__assert_func>
   25174:	221c      	movs	r2, #28
   25176:	2101      	movs	r1, #1
   25178:	4620      	mov	r0, r4
   2517a:	f000 fe89 	bl	25e90 <_calloc_r>
   2517e:	2800      	cmp	r0, #0
   25180:	d0f1      	beq.n	25166 <__i2b+0x2e>
   25182:	2201      	movs	r2, #1
   25184:	2302      	movs	r3, #2
   25186:	e9c0 2301 	strd	r2, r3, [r0, #4]
   2518a:	e7de      	b.n	2514a <__i2b+0x12>
   2518c:	20003ffc 	.word	0x20003ffc
   25190:	2000417c 	.word	0x2000417c

00025194 <__multiply>:
   25194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25198:	690e      	ldr	r6, [r1, #16]
   2519a:	6915      	ldr	r5, [r2, #16]
   2519c:	42ae      	cmp	r6, r5
   2519e:	b085      	sub	sp, #20
   251a0:	4688      	mov	r8, r1
   251a2:	4614      	mov	r4, r2
   251a4:	db05      	blt.n	251b2 <__multiply+0x1e>
   251a6:	462a      	mov	r2, r5
   251a8:	4623      	mov	r3, r4
   251aa:	4635      	mov	r5, r6
   251ac:	460c      	mov	r4, r1
   251ae:	4616      	mov	r6, r2
   251b0:	4698      	mov	r8, r3
   251b2:	68a3      	ldr	r3, [r4, #8]
   251b4:	6861      	ldr	r1, [r4, #4]
   251b6:	19af      	adds	r7, r5, r6
   251b8:	42bb      	cmp	r3, r7
   251ba:	bfb8      	it	lt
   251bc:	3101      	addlt	r1, #1
   251be:	f7ff fe91 	bl	24ee4 <_Balloc>
   251c2:	9001      	str	r0, [sp, #4]
   251c4:	2800      	cmp	r0, #0
   251c6:	f000 8087 	beq.w	252d8 <__multiply+0x144>
   251ca:	9b01      	ldr	r3, [sp, #4]
   251cc:	f103 0914 	add.w	r9, r3, #20
   251d0:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   251d4:	45d1      	cmp	r9, sl
   251d6:	d205      	bcs.n	251e4 <__multiply+0x50>
   251d8:	464b      	mov	r3, r9
   251da:	2200      	movs	r2, #0
   251dc:	f843 2b04 	str.w	r2, [r3], #4
   251e0:	459a      	cmp	sl, r3
   251e2:	d8fb      	bhi.n	251dc <__multiply+0x48>
   251e4:	f108 0814 	add.w	r8, r8, #20
   251e8:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   251ec:	f104 0314 	add.w	r3, r4, #20
   251f0:	45d8      	cmp	r8, fp
   251f2:	461a      	mov	r2, r3
   251f4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   251f8:	d25f      	bcs.n	252ba <__multiply+0x126>
   251fa:	1b2b      	subs	r3, r5, r4
   251fc:	3b15      	subs	r3, #21
   251fe:	f023 0303 	bic.w	r3, r3, #3
   25202:	3304      	adds	r3, #4
   25204:	3415      	adds	r4, #21
   25206:	42a5      	cmp	r5, r4
   25208:	bf38      	it	cc
   2520a:	2304      	movcc	r3, #4
   2520c:	e9cd a702 	strd	sl, r7, [sp, #8]
   25210:	46ac      	mov	ip, r5
   25212:	461f      	mov	r7, r3
   25214:	4692      	mov	sl, r2
   25216:	e005      	b.n	25224 <__multiply+0x90>
   25218:	0c09      	lsrs	r1, r1, #16
   2521a:	d129      	bne.n	25270 <__multiply+0xdc>
   2521c:	45c3      	cmp	fp, r8
   2521e:	f109 0904 	add.w	r9, r9, #4
   25222:	d948      	bls.n	252b6 <__multiply+0x122>
   25224:	f858 1b04 	ldr.w	r1, [r8], #4
   25228:	b28d      	uxth	r5, r1
   2522a:	2d00      	cmp	r5, #0
   2522c:	d0f4      	beq.n	25218 <__multiply+0x84>
   2522e:	4656      	mov	r6, sl
   25230:	464c      	mov	r4, r9
   25232:	2300      	movs	r3, #0
   25234:	f856 1b04 	ldr.w	r1, [r6], #4
   25238:	6822      	ldr	r2, [r4, #0]
   2523a:	fa1f fe81 	uxth.w	lr, r1
   2523e:	b290      	uxth	r0, r2
   25240:	0c09      	lsrs	r1, r1, #16
   25242:	fb05 000e 	mla	r0, r5, lr, r0
   25246:	0c12      	lsrs	r2, r2, #16
   25248:	4403      	add	r3, r0
   2524a:	fb05 2201 	mla	r2, r5, r1, r2
   2524e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   25252:	b29b      	uxth	r3, r3
   25254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   25258:	45b4      	cmp	ip, r6
   2525a:	f844 3b04 	str.w	r3, [r4], #4
   2525e:	ea4f 4312 	mov.w	r3, r2, lsr #16
   25262:	d8e7      	bhi.n	25234 <__multiply+0xa0>
   25264:	f849 3007 	str.w	r3, [r9, r7]
   25268:	f858 1c04 	ldr.w	r1, [r8, #-4]
   2526c:	0c09      	lsrs	r1, r1, #16
   2526e:	d0d5      	beq.n	2521c <__multiply+0x88>
   25270:	f8d9 3000 	ldr.w	r3, [r9]
   25274:	4650      	mov	r0, sl
   25276:	461a      	mov	r2, r3
   25278:	464c      	mov	r4, r9
   2527a:	2600      	movs	r6, #0
   2527c:	8805      	ldrh	r5, [r0, #0]
   2527e:	0c12      	lsrs	r2, r2, #16
   25280:	fb01 2205 	mla	r2, r1, r5, r2
   25284:	4416      	add	r6, r2
   25286:	b29b      	uxth	r3, r3
   25288:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2528c:	f844 3b04 	str.w	r3, [r4], #4
   25290:	f850 5b04 	ldr.w	r5, [r0], #4
   25294:	6822      	ldr	r2, [r4, #0]
   25296:	0c2d      	lsrs	r5, r5, #16
   25298:	b293      	uxth	r3, r2
   2529a:	fb01 3305 	mla	r3, r1, r5, r3
   2529e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   252a2:	4584      	cmp	ip, r0
   252a4:	ea4f 4613 	mov.w	r6, r3, lsr #16
   252a8:	d8e8      	bhi.n	2527c <__multiply+0xe8>
   252aa:	45c3      	cmp	fp, r8
   252ac:	f849 3007 	str.w	r3, [r9, r7]
   252b0:	f109 0904 	add.w	r9, r9, #4
   252b4:	d8b6      	bhi.n	25224 <__multiply+0x90>
   252b6:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   252ba:	2f00      	cmp	r7, #0
   252bc:	dc02      	bgt.n	252c4 <__multiply+0x130>
   252be:	e005      	b.n	252cc <__multiply+0x138>
   252c0:	3f01      	subs	r7, #1
   252c2:	d003      	beq.n	252cc <__multiply+0x138>
   252c4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   252c8:	2b00      	cmp	r3, #0
   252ca:	d0f9      	beq.n	252c0 <__multiply+0x12c>
   252cc:	9b01      	ldr	r3, [sp, #4]
   252ce:	4618      	mov	r0, r3
   252d0:	611f      	str	r7, [r3, #16]
   252d2:	b005      	add	sp, #20
   252d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252d8:	4b03      	ldr	r3, [pc, #12]	; (252e8 <__multiply+0x154>)
   252da:	4804      	ldr	r0, [pc, #16]	; (252ec <__multiply+0x158>)
   252dc:	9a01      	ldr	r2, [sp, #4]
   252de:	f44f 71b1 	mov.w	r1, #354	; 0x162
   252e2:	f000 fdb5 	bl	25e50 <__assert_func>
   252e6:	bf00      	nop
   252e8:	20003ffc 	.word	0x20003ffc
   252ec:	2000417c 	.word	0x2000417c

000252f0 <__pow5mult>:
   252f0:	f012 0303 	ands.w	r3, r2, #3
   252f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252f8:	4614      	mov	r4, r2
   252fa:	4606      	mov	r6, r0
   252fc:	d132      	bne.n	25364 <__pow5mult+0x74>
   252fe:	460d      	mov	r5, r1
   25300:	10a4      	asrs	r4, r4, #2
   25302:	d020      	beq.n	25346 <__pow5mult+0x56>
   25304:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   25308:	f1b8 0f00 	cmp.w	r8, #0
   2530c:	d033      	beq.n	25376 <__pow5mult+0x86>
   2530e:	07e3      	lsls	r3, r4, #31
   25310:	f04f 0700 	mov.w	r7, #0
   25314:	d407      	bmi.n	25326 <__pow5mult+0x36>
   25316:	1064      	asrs	r4, r4, #1
   25318:	d015      	beq.n	25346 <__pow5mult+0x56>
   2531a:	f8d8 0000 	ldr.w	r0, [r8]
   2531e:	b1a8      	cbz	r0, 2534c <__pow5mult+0x5c>
   25320:	4680      	mov	r8, r0
   25322:	07e3      	lsls	r3, r4, #31
   25324:	d5f7      	bpl.n	25316 <__pow5mult+0x26>
   25326:	4642      	mov	r2, r8
   25328:	4629      	mov	r1, r5
   2532a:	4630      	mov	r0, r6
   2532c:	f7ff ff32 	bl	25194 <__multiply>
   25330:	b1b5      	cbz	r5, 25360 <__pow5mult+0x70>
   25332:	6869      	ldr	r1, [r5, #4]
   25334:	6c73      	ldr	r3, [r6, #68]	; 0x44
   25336:	1064      	asrs	r4, r4, #1
   25338:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   2533c:	602a      	str	r2, [r5, #0]
   2533e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   25342:	4605      	mov	r5, r0
   25344:	d1e9      	bne.n	2531a <__pow5mult+0x2a>
   25346:	4628      	mov	r0, r5
   25348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2534c:	4642      	mov	r2, r8
   2534e:	4641      	mov	r1, r8
   25350:	4630      	mov	r0, r6
   25352:	f7ff ff1f 	bl	25194 <__multiply>
   25356:	f8c8 0000 	str.w	r0, [r8]
   2535a:	6007      	str	r7, [r0, #0]
   2535c:	4680      	mov	r8, r0
   2535e:	e7e0      	b.n	25322 <__pow5mult+0x32>
   25360:	4605      	mov	r5, r0
   25362:	e7d8      	b.n	25316 <__pow5mult+0x26>
   25364:	3b01      	subs	r3, #1
   25366:	4a0f      	ldr	r2, [pc, #60]	; (253a4 <__pow5mult+0xb4>)
   25368:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   2536c:	2300      	movs	r3, #0
   2536e:	f7ff fde9 	bl	24f44 <__multadd>
   25372:	4605      	mov	r5, r0
   25374:	e7c4      	b.n	25300 <__pow5mult+0x10>
   25376:	2101      	movs	r1, #1
   25378:	4630      	mov	r0, r6
   2537a:	f7ff fdb3 	bl	24ee4 <_Balloc>
   2537e:	4680      	mov	r8, r0
   25380:	b140      	cbz	r0, 25394 <__pow5mult+0xa4>
   25382:	2301      	movs	r3, #1
   25384:	f240 2271 	movw	r2, #625	; 0x271
   25388:	e9c0 3204 	strd	r3, r2, [r0, #16]
   2538c:	2300      	movs	r3, #0
   2538e:	6430      	str	r0, [r6, #64]	; 0x40
   25390:	6003      	str	r3, [r0, #0]
   25392:	e7bc      	b.n	2530e <__pow5mult+0x1e>
   25394:	4b04      	ldr	r3, [pc, #16]	; (253a8 <__pow5mult+0xb8>)
   25396:	4805      	ldr	r0, [pc, #20]	; (253ac <__pow5mult+0xbc>)
   25398:	4642      	mov	r2, r8
   2539a:	f240 1145 	movw	r1, #325	; 0x145
   2539e:	f000 fd57 	bl	25e50 <__assert_func>
   253a2:	bf00      	nop
   253a4:	20005624 	.word	0x20005624
   253a8:	20003ffc 	.word	0x20003ffc
   253ac:	2000417c 	.word	0x2000417c

000253b0 <__lshift>:
   253b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   253b4:	460d      	mov	r5, r1
   253b6:	4614      	mov	r4, r2
   253b8:	692f      	ldr	r7, [r5, #16]
   253ba:	68ab      	ldr	r3, [r5, #8]
   253bc:	6849      	ldr	r1, [r1, #4]
   253be:	eb07 1762 	add.w	r7, r7, r2, asr #5
   253c2:	1c7e      	adds	r6, r7, #1
   253c4:	429e      	cmp	r6, r3
   253c6:	4680      	mov	r8, r0
   253c8:	ea4f 1962 	mov.w	r9, r2, asr #5
   253cc:	dd04      	ble.n	253d8 <__lshift+0x28>
   253ce:	005b      	lsls	r3, r3, #1
   253d0:	429e      	cmp	r6, r3
   253d2:	f101 0101 	add.w	r1, r1, #1
   253d6:	dcfa      	bgt.n	253ce <__lshift+0x1e>
   253d8:	4640      	mov	r0, r8
   253da:	f7ff fd83 	bl	24ee4 <_Balloc>
   253de:	4684      	mov	ip, r0
   253e0:	2800      	cmp	r0, #0
   253e2:	d052      	beq.n	2548a <__lshift+0xda>
   253e4:	f1b9 0f00 	cmp.w	r9, #0
   253e8:	f100 0214 	add.w	r2, r0, #20
   253ec:	dd0e      	ble.n	2540c <__lshift+0x5c>
   253ee:	f109 0105 	add.w	r1, r9, #5
   253f2:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   253f6:	4613      	mov	r3, r2
   253f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   253fc:	2000      	movs	r0, #0
   253fe:	f843 0b04 	str.w	r0, [r3], #4
   25402:	428b      	cmp	r3, r1
   25404:	d1fb      	bne.n	253fe <__lshift+0x4e>
   25406:	f1ae 0314 	sub.w	r3, lr, #20
   2540a:	441a      	add	r2, r3
   2540c:	6929      	ldr	r1, [r5, #16]
   2540e:	f105 0314 	add.w	r3, r5, #20
   25412:	f014 0e1f 	ands.w	lr, r4, #31
   25416:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2541a:	d02e      	beq.n	2547a <__lshift+0xca>
   2541c:	f1ce 0920 	rsb	r9, lr, #32
   25420:	4610      	mov	r0, r2
   25422:	f04f 0a00 	mov.w	sl, #0
   25426:	681c      	ldr	r4, [r3, #0]
   25428:	fa04 f40e 	lsl.w	r4, r4, lr
   2542c:	ea44 040a 	orr.w	r4, r4, sl
   25430:	f840 4b04 	str.w	r4, [r0], #4
   25434:	f853 4b04 	ldr.w	r4, [r3], #4
   25438:	4299      	cmp	r1, r3
   2543a:	fa24 fa09 	lsr.w	sl, r4, r9
   2543e:	d8f2      	bhi.n	25426 <__lshift+0x76>
   25440:	1b4b      	subs	r3, r1, r5
   25442:	3b15      	subs	r3, #21
   25444:	f023 0303 	bic.w	r3, r3, #3
   25448:	3304      	adds	r3, #4
   2544a:	f105 0015 	add.w	r0, r5, #21
   2544e:	4281      	cmp	r1, r0
   25450:	bf38      	it	cc
   25452:	2304      	movcc	r3, #4
   25454:	f1ba 0f00 	cmp.w	sl, #0
   25458:	bf18      	it	ne
   2545a:	4637      	movne	r7, r6
   2545c:	f842 a003 	str.w	sl, [r2, r3]
   25460:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   25464:	686a      	ldr	r2, [r5, #4]
   25466:	f8cc 7010 	str.w	r7, [ip, #16]
   2546a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2546e:	6029      	str	r1, [r5, #0]
   25470:	4660      	mov	r0, ip
   25472:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   25476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2547a:	3a04      	subs	r2, #4
   2547c:	f853 0b04 	ldr.w	r0, [r3], #4
   25480:	f842 0f04 	str.w	r0, [r2, #4]!
   25484:	4299      	cmp	r1, r3
   25486:	d8f9      	bhi.n	2547c <__lshift+0xcc>
   25488:	e7ea      	b.n	25460 <__lshift+0xb0>
   2548a:	4b03      	ldr	r3, [pc, #12]	; (25498 <__lshift+0xe8>)
   2548c:	4803      	ldr	r0, [pc, #12]	; (2549c <__lshift+0xec>)
   2548e:	4662      	mov	r2, ip
   25490:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   25494:	f000 fcdc 	bl	25e50 <__assert_func>
   25498:	20003ffc 	.word	0x20003ffc
   2549c:	2000417c 	.word	0x2000417c

000254a0 <__mcmp>:
   254a0:	690b      	ldr	r3, [r1, #16]
   254a2:	4684      	mov	ip, r0
   254a4:	6900      	ldr	r0, [r0, #16]
   254a6:	1ac0      	subs	r0, r0, r3
   254a8:	d116      	bne.n	254d8 <__mcmp+0x38>
   254aa:	f10c 0c14 	add.w	ip, ip, #20
   254ae:	3114      	adds	r1, #20
   254b0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   254b4:	b410      	push	{r4}
   254b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   254ba:	e001      	b.n	254c0 <__mcmp+0x20>
   254bc:	4594      	cmp	ip, r2
   254be:	d208      	bcs.n	254d2 <__mcmp+0x32>
   254c0:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   254c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   254c8:	428c      	cmp	r4, r1
   254ca:	d0f7      	beq.n	254bc <__mcmp+0x1c>
   254cc:	d205      	bcs.n	254da <__mcmp+0x3a>
   254ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   254d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   254d6:	4770      	bx	lr
   254d8:	4770      	bx	lr
   254da:	2001      	movs	r0, #1
   254dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   254e0:	4770      	bx	lr
   254e2:	bf00      	nop

000254e4 <__mdiff>:
   254e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254e8:	690f      	ldr	r7, [r1, #16]
   254ea:	6913      	ldr	r3, [r2, #16]
   254ec:	1aff      	subs	r7, r7, r3
   254ee:	2f00      	cmp	r7, #0
   254f0:	460e      	mov	r6, r1
   254f2:	4690      	mov	r8, r2
   254f4:	d17f      	bne.n	255f6 <__mdiff+0x112>
   254f6:	f101 0514 	add.w	r5, r1, #20
   254fa:	3214      	adds	r2, #20
   254fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   25500:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   25504:	e001      	b.n	2550a <__mdiff+0x26>
   25506:	429d      	cmp	r5, r3
   25508:	d278      	bcs.n	255fc <__mdiff+0x118>
   2550a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2550e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   25512:	42a1      	cmp	r1, r4
   25514:	d0f7      	beq.n	25506 <__mdiff+0x22>
   25516:	d369      	bcc.n	255ec <__mdiff+0x108>
   25518:	6871      	ldr	r1, [r6, #4]
   2551a:	f7ff fce3 	bl	24ee4 <_Balloc>
   2551e:	4681      	mov	r9, r0
   25520:	2800      	cmp	r0, #0
   25522:	d077      	beq.n	25614 <__mdiff+0x130>
   25524:	6935      	ldr	r5, [r6, #16]
   25526:	f8d8 2010 	ldr.w	r2, [r8, #16]
   2552a:	60c7      	str	r7, [r0, #12]
   2552c:	f108 0e14 	add.w	lr, r8, #20
   25530:	f106 0014 	add.w	r0, r6, #20
   25534:	f109 0a14 	add.w	sl, r9, #20
   25538:	f106 0110 	add.w	r1, r6, #16
   2553c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   25540:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   25544:	4656      	mov	r6, sl
   25546:	f04f 0c00 	mov.w	ip, #0
   2554a:	f85e 4b04 	ldr.w	r4, [lr], #4
   2554e:	f851 bf04 	ldr.w	fp, [r1, #4]!
   25552:	b2a3      	uxth	r3, r4
   25554:	fa1c fc8b 	uxtah	ip, ip, fp
   25558:	ebac 0303 	sub.w	r3, ip, r3
   2555c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   25560:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   25564:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   25568:	b29b      	uxth	r3, r3
   2556a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   2556e:	4572      	cmp	r2, lr
   25570:	f846 3b04 	str.w	r3, [r6], #4
   25574:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   25578:	d8e7      	bhi.n	2554a <__mdiff+0x66>
   2557a:	eba2 0108 	sub.w	r1, r2, r8
   2557e:	3915      	subs	r1, #21
   25580:	f108 0815 	add.w	r8, r8, #21
   25584:	4542      	cmp	r2, r8
   25586:	f021 0403 	bic.w	r4, r1, #3
   2558a:	f104 0404 	add.w	r4, r4, #4
   2558e:	bf38      	it	cc
   25590:	2404      	movcc	r4, #4
   25592:	4420      	add	r0, r4
   25594:	f021 0203 	bic.w	r2, r1, #3
   25598:	bf38      	it	cc
   2559a:	2200      	movcc	r2, #0
   2559c:	4287      	cmp	r7, r0
   2559e:	4452      	add	r2, sl
   255a0:	4454      	add	r4, sl
   255a2:	d918      	bls.n	255d6 <__mdiff+0xf2>
   255a4:	4626      	mov	r6, r4
   255a6:	4601      	mov	r1, r0
   255a8:	f851 3b04 	ldr.w	r3, [r1], #4
   255ac:	fa1c fc83 	uxtah	ip, ip, r3
   255b0:	ea4f 422c 	mov.w	r2, ip, asr #16
   255b4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   255b8:	fa1f fc8c 	uxth.w	ip, ip
   255bc:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   255c0:	428f      	cmp	r7, r1
   255c2:	f846 3b04 	str.w	r3, [r6], #4
   255c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
   255ca:	d8ed      	bhi.n	255a8 <__mdiff+0xc4>
   255cc:	3f01      	subs	r7, #1
   255ce:	1a3f      	subs	r7, r7, r0
   255d0:	f027 0703 	bic.w	r7, r7, #3
   255d4:	19e2      	adds	r2, r4, r7
   255d6:	b923      	cbnz	r3, 255e2 <__mdiff+0xfe>
   255d8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   255dc:	3d01      	subs	r5, #1
   255de:	2b00      	cmp	r3, #0
   255e0:	d0fa      	beq.n	255d8 <__mdiff+0xf4>
   255e2:	f8c9 5010 	str.w	r5, [r9, #16]
   255e6:	4648      	mov	r0, r9
   255e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   255ec:	4633      	mov	r3, r6
   255ee:	2701      	movs	r7, #1
   255f0:	4646      	mov	r6, r8
   255f2:	4698      	mov	r8, r3
   255f4:	e790      	b.n	25518 <__mdiff+0x34>
   255f6:	dbf9      	blt.n	255ec <__mdiff+0x108>
   255f8:	2700      	movs	r7, #0
   255fa:	e78d      	b.n	25518 <__mdiff+0x34>
   255fc:	2100      	movs	r1, #0
   255fe:	f7ff fc71 	bl	24ee4 <_Balloc>
   25602:	4681      	mov	r9, r0
   25604:	b168      	cbz	r0, 25622 <__mdiff+0x13e>
   25606:	2201      	movs	r2, #1
   25608:	2300      	movs	r3, #0
   2560a:	e9c9 2304 	strd	r2, r3, [r9, #16]
   2560e:	4648      	mov	r0, r9
   25610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25614:	4b06      	ldr	r3, [pc, #24]	; (25630 <__mdiff+0x14c>)
   25616:	4807      	ldr	r0, [pc, #28]	; (25634 <__mdiff+0x150>)
   25618:	464a      	mov	r2, r9
   2561a:	f240 2145 	movw	r1, #581	; 0x245
   2561e:	f000 fc17 	bl	25e50 <__assert_func>
   25622:	4b03      	ldr	r3, [pc, #12]	; (25630 <__mdiff+0x14c>)
   25624:	4803      	ldr	r0, [pc, #12]	; (25634 <__mdiff+0x150>)
   25626:	464a      	mov	r2, r9
   25628:	f240 2137 	movw	r1, #567	; 0x237
   2562c:	f000 fc10 	bl	25e50 <__assert_func>
   25630:	20003ffc 	.word	0x20003ffc
   25634:	2000417c 	.word	0x2000417c

00025638 <__ulp>:
   25638:	b082      	sub	sp, #8
   2563a:	ed8d 0b00 	vstr	d0, [sp]
   2563e:	4b16      	ldr	r3, [pc, #88]	; (25698 <__ulp+0x60>)
   25640:	9a01      	ldr	r2, [sp, #4]
   25642:	4013      	ands	r3, r2
   25644:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   25648:	2b00      	cmp	r3, #0
   2564a:	dd06      	ble.n	2565a <__ulp+0x22>
   2564c:	2200      	movs	r2, #0
   2564e:	4619      	mov	r1, r3
   25650:	4610      	mov	r0, r2
   25652:	ec41 0b10 	vmov	d0, r0, r1
   25656:	b002      	add	sp, #8
   25658:	4770      	bx	lr
   2565a:	425b      	negs	r3, r3
   2565c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   25660:	ea4f 5223 	mov.w	r2, r3, asr #20
   25664:	da09      	bge.n	2567a <__ulp+0x42>
   25666:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2566a:	4113      	asrs	r3, r2
   2566c:	2200      	movs	r2, #0
   2566e:	4619      	mov	r1, r3
   25670:	4610      	mov	r0, r2
   25672:	ec41 0b10 	vmov	d0, r0, r1
   25676:	b002      	add	sp, #8
   25678:	4770      	bx	lr
   2567a:	f1a2 0314 	sub.w	r3, r2, #20
   2567e:	2b1e      	cmp	r3, #30
   25680:	bfda      	itte	le
   25682:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   25686:	40da      	lsrle	r2, r3
   25688:	2201      	movgt	r2, #1
   2568a:	2300      	movs	r3, #0
   2568c:	4619      	mov	r1, r3
   2568e:	4610      	mov	r0, r2
   25690:	ec41 0b10 	vmov	d0, r0, r1
   25694:	b002      	add	sp, #8
   25696:	4770      	bx	lr
   25698:	7ff00000 	.word	0x7ff00000

0002569c <__b2d>:
   2569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2569e:	6904      	ldr	r4, [r0, #16]
   256a0:	f100 0614 	add.w	r6, r0, #20
   256a4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   256a8:	1f27      	subs	r7, r4, #4
   256aa:	f854 5c04 	ldr.w	r5, [r4, #-4]
   256ae:	4628      	mov	r0, r5
   256b0:	f7ff fcf2 	bl	25098 <__hi0bits>
   256b4:	f1c0 0320 	rsb	r3, r0, #32
   256b8:	280a      	cmp	r0, #10
   256ba:	600b      	str	r3, [r1, #0]
   256bc:	dd1b      	ble.n	256f6 <__b2d+0x5a>
   256be:	42be      	cmp	r6, r7
   256c0:	d20b      	bcs.n	256da <__b2d+0x3e>
   256c2:	380b      	subs	r0, #11
   256c4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   256c8:	d12e      	bne.n	25728 <__b2d+0x8c>
   256ca:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   256ce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   256d2:	460a      	mov	r2, r1
   256d4:	ec43 2b10 	vmov	d0, r2, r3
   256d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   256da:	f1b0 010b 	subs.w	r1, r0, #11
   256de:	d0f4      	beq.n	256ca <__b2d+0x2e>
   256e0:	fa05 f101 	lsl.w	r1, r5, r1
   256e4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   256e8:	2100      	movs	r1, #0
   256ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   256ee:	460a      	mov	r2, r1
   256f0:	ec43 2b10 	vmov	d0, r2, r3
   256f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   256f6:	f1c0 0c0b 	rsb	ip, r0, #11
   256fa:	fa25 f10c 	lsr.w	r1, r5, ip
   256fe:	42be      	cmp	r6, r7
   25700:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   25704:	bf38      	it	cc
   25706:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   2570a:	f100 0015 	add.w	r0, r0, #21
   2570e:	bf34      	ite	cc
   25710:	fa21 f10c 	lsrcc.w	r1, r1, ip
   25714:	2100      	movcs	r1, #0
   25716:	fa05 f000 	lsl.w	r0, r5, r0
   2571a:	4301      	orrs	r1, r0
   2571c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   25720:	460a      	mov	r2, r1
   25722:	ec43 2b10 	vmov	d0, r2, r3
   25726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25728:	f1c0 0c20 	rsb	ip, r0, #32
   2572c:	4085      	lsls	r5, r0
   2572e:	fa21 f30c 	lsr.w	r3, r1, ip
   25732:	ea45 0703 	orr.w	r7, r5, r3
   25736:	f1a4 0508 	sub.w	r5, r4, #8
   2573a:	42ae      	cmp	r6, r5
   2573c:	fa01 f100 	lsl.w	r1, r1, r0
   25740:	bf3c      	itt	cc
   25742:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   25746:	fa20 f00c 	lsrcc.w	r0, r0, ip
   2574a:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   2574e:	bf38      	it	cc
   25750:	4301      	orrcc	r1, r0
   25752:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   25756:	460a      	mov	r2, r1
   25758:	ec43 2b10 	vmov	d0, r2, r3
   2575c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2575e:	bf00      	nop

00025760 <__d2b>:
   25760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25764:	4688      	mov	r8, r1
   25766:	b083      	sub	sp, #12
   25768:	2101      	movs	r1, #1
   2576a:	ec57 6b10 	vmov	r6, r7, d0
   2576e:	4615      	mov	r5, r2
   25770:	f7ff fbb8 	bl	24ee4 <_Balloc>
   25774:	4604      	mov	r4, r0
   25776:	2800      	cmp	r0, #0
   25778:	d051      	beq.n	2581e <__d2b+0xbe>
   2577a:	f3c7 590a 	ubfx	r9, r7, #20, #11
   2577e:	f3c7 0313 	ubfx	r3, r7, #0, #20
   25782:	f1b9 0f00 	cmp.w	r9, #0
   25786:	d001      	beq.n	2578c <__d2b+0x2c>
   25788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2578c:	2e00      	cmp	r6, #0
   2578e:	9301      	str	r3, [sp, #4]
   25790:	d118      	bne.n	257c4 <__d2b+0x64>
   25792:	a801      	add	r0, sp, #4
   25794:	f7ff fca0 	bl	250d8 <__lo0bits>
   25798:	9a01      	ldr	r2, [sp, #4]
   2579a:	6162      	str	r2, [r4, #20]
   2579c:	2201      	movs	r2, #1
   2579e:	f100 0320 	add.w	r3, r0, #32
   257a2:	6122      	str	r2, [r4, #16]
   257a4:	f1b9 0f00 	cmp.w	r9, #0
   257a8:	d025      	beq.n	257f6 <__d2b+0x96>
   257aa:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   257ae:	eb09 0203 	add.w	r2, r9, r3
   257b2:	4620      	mov	r0, r4
   257b4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   257b8:	f8c8 2000 	str.w	r2, [r8]
   257bc:	602b      	str	r3, [r5, #0]
   257be:	b003      	add	sp, #12
   257c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   257c4:	4668      	mov	r0, sp
   257c6:	9600      	str	r6, [sp, #0]
   257c8:	f7ff fc86 	bl	250d8 <__lo0bits>
   257cc:	4603      	mov	r3, r0
   257ce:	b310      	cbz	r0, 25816 <__d2b+0xb6>
   257d0:	e9dd 0200 	ldrd	r0, r2, [sp]
   257d4:	f1c3 0120 	rsb	r1, r3, #32
   257d8:	fa02 f101 	lsl.w	r1, r2, r1
   257dc:	4301      	orrs	r1, r0
   257de:	40da      	lsrs	r2, r3
   257e0:	6161      	str	r1, [r4, #20]
   257e2:	9201      	str	r2, [sp, #4]
   257e4:	2a00      	cmp	r2, #0
   257e6:	61a2      	str	r2, [r4, #24]
   257e8:	bf14      	ite	ne
   257ea:	2202      	movne	r2, #2
   257ec:	2201      	moveq	r2, #1
   257ee:	6122      	str	r2, [r4, #16]
   257f0:	f1b9 0f00 	cmp.w	r9, #0
   257f4:	d1d9      	bne.n	257aa <__d2b+0x4a>
   257f6:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   257fa:	f8c8 3000 	str.w	r3, [r8]
   257fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   25802:	6918      	ldr	r0, [r3, #16]
   25804:	f7ff fc48 	bl	25098 <__hi0bits>
   25808:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   2580c:	4620      	mov	r0, r4
   2580e:	602b      	str	r3, [r5, #0]
   25810:	b003      	add	sp, #12
   25812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25816:	9a00      	ldr	r2, [sp, #0]
   25818:	6162      	str	r2, [r4, #20]
   2581a:	9a01      	ldr	r2, [sp, #4]
   2581c:	e7e2      	b.n	257e4 <__d2b+0x84>
   2581e:	4b03      	ldr	r3, [pc, #12]	; (2582c <__d2b+0xcc>)
   25820:	4803      	ldr	r0, [pc, #12]	; (25830 <__d2b+0xd0>)
   25822:	4622      	mov	r2, r4
   25824:	f240 310f 	movw	r1, #783	; 0x30f
   25828:	f000 fb12 	bl	25e50 <__assert_func>
   2582c:	20003ffc 	.word	0x20003ffc
   25830:	2000417c 	.word	0x2000417c

00025834 <__ratio>:
   25834:	b5f0      	push	{r4, r5, r6, r7, lr}
   25836:	b083      	sub	sp, #12
   25838:	460e      	mov	r6, r1
   2583a:	4669      	mov	r1, sp
   2583c:	4607      	mov	r7, r0
   2583e:	f7ff ff2d 	bl	2569c <__b2d>
   25842:	a901      	add	r1, sp, #4
   25844:	4630      	mov	r0, r6
   25846:	ec55 4b10 	vmov	r4, r5, d0
   2584a:	eeb0 7b40 	vmov.f64	d7, d0
   2584e:	f7ff ff25 	bl	2569c <__b2d>
   25852:	6933      	ldr	r3, [r6, #16]
   25854:	693a      	ldr	r2, [r7, #16]
   25856:	1ad2      	subs	r2, r2, r3
   25858:	e9dd 3100 	ldrd	r3, r1, [sp]
   2585c:	1a5b      	subs	r3, r3, r1
   2585e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   25862:	2b00      	cmp	r3, #0
   25864:	dd09      	ble.n	2587a <__ratio+0x46>
   25866:	ee17 2a90 	vmov	r2, s15
   2586a:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   2586e:	ec45 4b17 	vmov	d7, r4, r5
   25872:	ee87 0b00 	vdiv.f64	d0, d7, d0
   25876:	b003      	add	sp, #12
   25878:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2587a:	ee10 2a90 	vmov	r2, s1
   2587e:	ec51 0b10 	vmov	r0, r1, d0
   25882:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   25886:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   2588a:	ec41 0b10 	vmov	d0, r0, r1
   2588e:	ee87 0b00 	vdiv.f64	d0, d7, d0
   25892:	b003      	add	sp, #12
   25894:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25896:	bf00      	nop

00025898 <__copybits>:
   25898:	3901      	subs	r1, #1
   2589a:	1149      	asrs	r1, r1, #5
   2589c:	f101 0c01 	add.w	ip, r1, #1
   258a0:	6911      	ldr	r1, [r2, #16]
   258a2:	f102 0314 	add.w	r3, r2, #20
   258a6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   258aa:	428b      	cmp	r3, r1
   258ac:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   258b0:	d217      	bcs.n	258e2 <__copybits+0x4a>
   258b2:	b510      	push	{r4, lr}
   258b4:	f1a0 0e04 	sub.w	lr, r0, #4
   258b8:	f853 4b04 	ldr.w	r4, [r3], #4
   258bc:	f84e 4f04 	str.w	r4, [lr, #4]!
   258c0:	4299      	cmp	r1, r3
   258c2:	d8f9      	bhi.n	258b8 <__copybits+0x20>
   258c4:	1a8a      	subs	r2, r1, r2
   258c6:	f1a2 0315 	sub.w	r3, r2, #21
   258ca:	f023 0303 	bic.w	r3, r3, #3
   258ce:	3304      	adds	r3, #4
   258d0:	4418      	add	r0, r3
   258d2:	4584      	cmp	ip, r0
   258d4:	d904      	bls.n	258e0 <__copybits+0x48>
   258d6:	2300      	movs	r3, #0
   258d8:	f840 3b04 	str.w	r3, [r0], #4
   258dc:	4584      	cmp	ip, r0
   258de:	d8fb      	bhi.n	258d8 <__copybits+0x40>
   258e0:	bd10      	pop	{r4, pc}
   258e2:	4584      	cmp	ip, r0
   258e4:	d905      	bls.n	258f2 <__copybits+0x5a>
   258e6:	2300      	movs	r3, #0
   258e8:	f840 3b04 	str.w	r3, [r0], #4
   258ec:	4584      	cmp	ip, r0
   258ee:	d8fb      	bhi.n	258e8 <__copybits+0x50>
   258f0:	4770      	bx	lr
   258f2:	4770      	bx	lr

000258f4 <__any_on>:
   258f4:	6903      	ldr	r3, [r0, #16]
   258f6:	114a      	asrs	r2, r1, #5
   258f8:	4293      	cmp	r3, r2
   258fa:	f100 0014 	add.w	r0, r0, #20
   258fe:	da09      	bge.n	25914 <__any_on+0x20>
   25900:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   25904:	e002      	b.n	2590c <__any_on+0x18>
   25906:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2590a:	b9c2      	cbnz	r2, 2593e <__any_on+0x4a>
   2590c:	4283      	cmp	r3, r0
   2590e:	d8fa      	bhi.n	25906 <__any_on+0x12>
   25910:	2000      	movs	r0, #0
   25912:	4770      	bx	lr
   25914:	dd10      	ble.n	25938 <__any_on+0x44>
   25916:	f011 011f 	ands.w	r1, r1, #31
   2591a:	d00d      	beq.n	25938 <__any_on+0x44>
   2591c:	b410      	push	{r4}
   2591e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   25922:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   25926:	fa24 f201 	lsr.w	r2, r4, r1
   2592a:	408a      	lsls	r2, r1
   2592c:	4294      	cmp	r4, r2
   2592e:	d00c      	beq.n	2594a <__any_on+0x56>
   25930:	2001      	movs	r0, #1
   25932:	f85d 4b04 	ldr.w	r4, [sp], #4
   25936:	4770      	bx	lr
   25938:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   2593c:	e7e6      	b.n	2590c <__any_on+0x18>
   2593e:	2001      	movs	r0, #1
   25940:	4770      	bx	lr
   25942:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   25946:	2a00      	cmp	r2, #0
   25948:	d1f2      	bne.n	25930 <__any_on+0x3c>
   2594a:	4283      	cmp	r3, r0
   2594c:	d8f9      	bhi.n	25942 <__any_on+0x4e>
   2594e:	2000      	movs	r0, #0
   25950:	f85d 4b04 	ldr.w	r4, [sp], #4
   25954:	4770      	bx	lr
   25956:	bf00      	nop

00025958 <_fclose_r>:
   25958:	b570      	push	{r4, r5, r6, lr}
   2595a:	2900      	cmp	r1, #0
   2595c:	d04b      	beq.n	259f6 <_fclose_r+0x9e>
   2595e:	4606      	mov	r6, r0
   25960:	460c      	mov	r4, r1
   25962:	b110      	cbz	r0, 2596a <_fclose_r+0x12>
   25964:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25966:	2b00      	cmp	r3, #0
   25968:	d048      	beq.n	259fc <_fclose_r+0xa4>
   2596a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2596c:	07d8      	lsls	r0, r3, #31
   2596e:	d534      	bpl.n	259da <_fclose_r+0x82>
   25970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25974:	2b00      	cmp	r3, #0
   25976:	d03e      	beq.n	259f6 <_fclose_r+0x9e>
   25978:	4621      	mov	r1, r4
   2597a:	4630      	mov	r0, r6
   2597c:	f000 f850 	bl	25a20 <__sflush_r>
   25980:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25982:	4605      	mov	r5, r0
   25984:	b133      	cbz	r3, 25994 <_fclose_r+0x3c>
   25986:	69e1      	ldr	r1, [r4, #28]
   25988:	4630      	mov	r0, r6
   2598a:	4798      	blx	r3
   2598c:	2800      	cmp	r0, #0
   2598e:	bfb8      	it	lt
   25990:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   25994:	89a3      	ldrh	r3, [r4, #12]
   25996:	061a      	lsls	r2, r3, #24
   25998:	d43c      	bmi.n	25a14 <_fclose_r+0xbc>
   2599a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2599c:	b141      	cbz	r1, 259b0 <_fclose_r+0x58>
   2599e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   259a2:	4299      	cmp	r1, r3
   259a4:	d002      	beq.n	259ac <_fclose_r+0x54>
   259a6:	4630      	mov	r0, r6
   259a8:	f7fc ffcc 	bl	22944 <_free_r>
   259ac:	2300      	movs	r3, #0
   259ae:	6323      	str	r3, [r4, #48]	; 0x30
   259b0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   259b2:	b121      	cbz	r1, 259be <_fclose_r+0x66>
   259b4:	4630      	mov	r0, r6
   259b6:	f7fc ffc5 	bl	22944 <_free_r>
   259ba:	2300      	movs	r3, #0
   259bc:	6463      	str	r3, [r4, #68]	; 0x44
   259be:	f7fc fb8f 	bl	220e0 <__sfp_lock_acquire>
   259c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   259c4:	2200      	movs	r2, #0
   259c6:	07db      	lsls	r3, r3, #31
   259c8:	81a2      	strh	r2, [r4, #12]
   259ca:	d51f      	bpl.n	25a0c <_fclose_r+0xb4>
   259cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   259ce:	f7fc fe57 	bl	22680 <__retarget_lock_close_recursive>
   259d2:	f7fc fb8b 	bl	220ec <__sfp_lock_release>
   259d6:	4628      	mov	r0, r5
   259d8:	bd70      	pop	{r4, r5, r6, pc}
   259da:	89a3      	ldrh	r3, [r4, #12]
   259dc:	0599      	lsls	r1, r3, #22
   259de:	d4cb      	bmi.n	25978 <_fclose_r+0x20>
   259e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   259e2:	f7fc fe4f 	bl	22684 <__retarget_lock_acquire_recursive>
   259e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   259ea:	2b00      	cmp	r3, #0
   259ec:	d1c4      	bne.n	25978 <_fclose_r+0x20>
   259ee:	6e65      	ldr	r5, [r4, #100]	; 0x64
   259f0:	f015 0501 	ands.w	r5, r5, #1
   259f4:	d005      	beq.n	25a02 <_fclose_r+0xaa>
   259f6:	2500      	movs	r5, #0
   259f8:	4628      	mov	r0, r5
   259fa:	bd70      	pop	{r4, r5, r6, pc}
   259fc:	f7fc fb52 	bl	220a4 <__sinit>
   25a00:	e7b3      	b.n	2596a <_fclose_r+0x12>
   25a02:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25a04:	f7fc fe40 	bl	22688 <__retarget_lock_release_recursive>
   25a08:	4628      	mov	r0, r5
   25a0a:	bd70      	pop	{r4, r5, r6, pc}
   25a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25a0e:	f7fc fe3b 	bl	22688 <__retarget_lock_release_recursive>
   25a12:	e7db      	b.n	259cc <_fclose_r+0x74>
   25a14:	6921      	ldr	r1, [r4, #16]
   25a16:	4630      	mov	r0, r6
   25a18:	f7fc ff94 	bl	22944 <_free_r>
   25a1c:	e7bd      	b.n	2599a <_fclose_r+0x42>
   25a1e:	bf00      	nop

00025a20 <__sflush_r>:
   25a20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   25a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25a28:	460c      	mov	r4, r1
   25a2a:	0711      	lsls	r1, r2, #28
   25a2c:	4680      	mov	r8, r0
   25a2e:	d447      	bmi.n	25ac0 <__sflush_r+0xa0>
   25a30:	6863      	ldr	r3, [r4, #4]
   25a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   25a36:	2b00      	cmp	r3, #0
   25a38:	81a2      	strh	r2, [r4, #12]
   25a3a:	dd5e      	ble.n	25afa <__sflush_r+0xda>
   25a3c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   25a3e:	2d00      	cmp	r5, #0
   25a40:	d058      	beq.n	25af4 <__sflush_r+0xd4>
   25a42:	2300      	movs	r3, #0
   25a44:	f8d8 6000 	ldr.w	r6, [r8]
   25a48:	f8c8 3000 	str.w	r3, [r8]
   25a4c:	b293      	uxth	r3, r2
   25a4e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   25a52:	d156      	bne.n	25b02 <__sflush_r+0xe2>
   25a54:	2301      	movs	r3, #1
   25a56:	69e1      	ldr	r1, [r4, #28]
   25a58:	4640      	mov	r0, r8
   25a5a:	47a8      	blx	r5
   25a5c:	1c43      	adds	r3, r0, #1
   25a5e:	d067      	beq.n	25b30 <__sflush_r+0x110>
   25a60:	89a3      	ldrh	r3, [r4, #12]
   25a62:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   25a64:	075f      	lsls	r7, r3, #29
   25a66:	d505      	bpl.n	25a74 <__sflush_r+0x54>
   25a68:	6863      	ldr	r3, [r4, #4]
   25a6a:	1ac0      	subs	r0, r0, r3
   25a6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25a6e:	b10b      	cbz	r3, 25a74 <__sflush_r+0x54>
   25a70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   25a72:	1ac0      	subs	r0, r0, r3
   25a74:	69e1      	ldr	r1, [r4, #28]
   25a76:	4602      	mov	r2, r0
   25a78:	2300      	movs	r3, #0
   25a7a:	4640      	mov	r0, r8
   25a7c:	47a8      	blx	r5
   25a7e:	1c41      	adds	r1, r0, #1
   25a80:	d141      	bne.n	25b06 <__sflush_r+0xe6>
   25a82:	f8d8 3000 	ldr.w	r3, [r8]
   25a86:	2b00      	cmp	r3, #0
   25a88:	d03d      	beq.n	25b06 <__sflush_r+0xe6>
   25a8a:	2b1d      	cmp	r3, #29
   25a8c:	d001      	beq.n	25a92 <__sflush_r+0x72>
   25a8e:	2b16      	cmp	r3, #22
   25a90:	d156      	bne.n	25b40 <__sflush_r+0x120>
   25a92:	89a3      	ldrh	r3, [r4, #12]
   25a94:	6922      	ldr	r2, [r4, #16]
   25a96:	6022      	str	r2, [r4, #0]
   25a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   25a9c:	2100      	movs	r1, #0
   25a9e:	6061      	str	r1, [r4, #4]
   25aa0:	81a3      	strh	r3, [r4, #12]
   25aa2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   25aa4:	f8c8 6000 	str.w	r6, [r8]
   25aa8:	b321      	cbz	r1, 25af4 <__sflush_r+0xd4>
   25aaa:	f104 0340 	add.w	r3, r4, #64	; 0x40
   25aae:	4299      	cmp	r1, r3
   25ab0:	d002      	beq.n	25ab8 <__sflush_r+0x98>
   25ab2:	4640      	mov	r0, r8
   25ab4:	f7fc ff46 	bl	22944 <_free_r>
   25ab8:	2000      	movs	r0, #0
   25aba:	6320      	str	r0, [r4, #48]	; 0x30
   25abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25ac0:	6926      	ldr	r6, [r4, #16]
   25ac2:	b1be      	cbz	r6, 25af4 <__sflush_r+0xd4>
   25ac4:	b293      	uxth	r3, r2
   25ac6:	6825      	ldr	r5, [r4, #0]
   25ac8:	6026      	str	r6, [r4, #0]
   25aca:	079a      	lsls	r2, r3, #30
   25acc:	bf0c      	ite	eq
   25ace:	6963      	ldreq	r3, [r4, #20]
   25ad0:	2300      	movne	r3, #0
   25ad2:	1bad      	subs	r5, r5, r6
   25ad4:	60a3      	str	r3, [r4, #8]
   25ad6:	e00b      	b.n	25af0 <__sflush_r+0xd0>
   25ad8:	462b      	mov	r3, r5
   25ada:	4632      	mov	r2, r6
   25adc:	69e1      	ldr	r1, [r4, #28]
   25ade:	6a67      	ldr	r7, [r4, #36]	; 0x24
   25ae0:	4640      	mov	r0, r8
   25ae2:	47b8      	blx	r7
   25ae4:	f1b0 0c00 	subs.w	ip, r0, #0
   25ae8:	eba5 050c 	sub.w	r5, r5, ip
   25aec:	4466      	add	r6, ip
   25aee:	dd17      	ble.n	25b20 <__sflush_r+0x100>
   25af0:	2d00      	cmp	r5, #0
   25af2:	dcf1      	bgt.n	25ad8 <__sflush_r+0xb8>
   25af4:	2000      	movs	r0, #0
   25af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25afa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   25afc:	2b00      	cmp	r3, #0
   25afe:	dc9d      	bgt.n	25a3c <__sflush_r+0x1c>
   25b00:	e7f8      	b.n	25af4 <__sflush_r+0xd4>
   25b02:	6d20      	ldr	r0, [r4, #80]	; 0x50
   25b04:	e7ae      	b.n	25a64 <__sflush_r+0x44>
   25b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25b0a:	6922      	ldr	r2, [r4, #16]
   25b0c:	6022      	str	r2, [r4, #0]
   25b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   25b12:	81a3      	strh	r3, [r4, #12]
   25b14:	2200      	movs	r2, #0
   25b16:	04db      	lsls	r3, r3, #19
   25b18:	6062      	str	r2, [r4, #4]
   25b1a:	d5c2      	bpl.n	25aa2 <__sflush_r+0x82>
   25b1c:	6520      	str	r0, [r4, #80]	; 0x50
   25b1e:	e7c0      	b.n	25aa2 <__sflush_r+0x82>
   25b20:	89a3      	ldrh	r3, [r4, #12]
   25b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b2a:	81a3      	strh	r3, [r4, #12]
   25b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25b30:	f8d8 3000 	ldr.w	r3, [r8]
   25b34:	2b00      	cmp	r3, #0
   25b36:	d093      	beq.n	25a60 <__sflush_r+0x40>
   25b38:	2b1d      	cmp	r3, #29
   25b3a:	d006      	beq.n	25b4a <__sflush_r+0x12a>
   25b3c:	2b16      	cmp	r3, #22
   25b3e:	d004      	beq.n	25b4a <__sflush_r+0x12a>
   25b40:	89a3      	ldrh	r3, [r4, #12]
   25b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25b46:	81a3      	strh	r3, [r4, #12]
   25b48:	e7d5      	b.n	25af6 <__sflush_r+0xd6>
   25b4a:	f8c8 6000 	str.w	r6, [r8]
   25b4e:	e7d1      	b.n	25af4 <__sflush_r+0xd4>

00025b50 <_fflush_r>:
   25b50:	b538      	push	{r3, r4, r5, lr}
   25b52:	460c      	mov	r4, r1
   25b54:	4605      	mov	r5, r0
   25b56:	b108      	cbz	r0, 25b5c <_fflush_r+0xc>
   25b58:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25b5a:	b303      	cbz	r3, 25b9e <_fflush_r+0x4e>
   25b5c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   25b60:	b188      	cbz	r0, 25b86 <_fflush_r+0x36>
   25b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25b64:	07db      	lsls	r3, r3, #31
   25b66:	d401      	bmi.n	25b6c <_fflush_r+0x1c>
   25b68:	0581      	lsls	r1, r0, #22
   25b6a:	d50f      	bpl.n	25b8c <_fflush_r+0x3c>
   25b6c:	4628      	mov	r0, r5
   25b6e:	4621      	mov	r1, r4
   25b70:	f7ff ff56 	bl	25a20 <__sflush_r>
   25b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25b76:	07da      	lsls	r2, r3, #31
   25b78:	4605      	mov	r5, r0
   25b7a:	d402      	bmi.n	25b82 <_fflush_r+0x32>
   25b7c:	89a3      	ldrh	r3, [r4, #12]
   25b7e:	059b      	lsls	r3, r3, #22
   25b80:	d508      	bpl.n	25b94 <_fflush_r+0x44>
   25b82:	4628      	mov	r0, r5
   25b84:	bd38      	pop	{r3, r4, r5, pc}
   25b86:	4605      	mov	r5, r0
   25b88:	4628      	mov	r0, r5
   25b8a:	bd38      	pop	{r3, r4, r5, pc}
   25b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25b8e:	f7fc fd79 	bl	22684 <__retarget_lock_acquire_recursive>
   25b92:	e7eb      	b.n	25b6c <_fflush_r+0x1c>
   25b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25b96:	f7fc fd77 	bl	22688 <__retarget_lock_release_recursive>
   25b9a:	4628      	mov	r0, r5
   25b9c:	bd38      	pop	{r3, r4, r5, pc}
   25b9e:	f7fc fa81 	bl	220a4 <__sinit>
   25ba2:	e7db      	b.n	25b5c <_fflush_r+0xc>

00025ba4 <__sread>:
   25ba4:	b510      	push	{r4, lr}
   25ba6:	460c      	mov	r4, r1
   25ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   25bac:	f000 f87a 	bl	25ca4 <_read_r>
   25bb0:	2800      	cmp	r0, #0
   25bb2:	db03      	blt.n	25bbc <__sread+0x18>
   25bb4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   25bb6:	4403      	add	r3, r0
   25bb8:	6523      	str	r3, [r4, #80]	; 0x50
   25bba:	bd10      	pop	{r4, pc}
   25bbc:	89a3      	ldrh	r3, [r4, #12]
   25bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   25bc2:	81a3      	strh	r3, [r4, #12]
   25bc4:	bd10      	pop	{r4, pc}
   25bc6:	bf00      	nop

00025bc8 <__swrite>:
   25bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25bcc:	460c      	mov	r4, r1
   25bce:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   25bd2:	461f      	mov	r7, r3
   25bd4:	05cb      	lsls	r3, r1, #23
   25bd6:	4605      	mov	r5, r0
   25bd8:	4616      	mov	r6, r2
   25bda:	d40b      	bmi.n	25bf4 <__swrite+0x2c>
   25bdc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   25be0:	81a1      	strh	r1, [r4, #12]
   25be2:	463b      	mov	r3, r7
   25be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   25be8:	4632      	mov	r2, r6
   25bea:	4628      	mov	r0, r5
   25bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25bf0:	f7fc bca6 	b.w	22540 <_write_r>
   25bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   25bf8:	2302      	movs	r3, #2
   25bfa:	2200      	movs	r2, #0
   25bfc:	f000 f83c 	bl	25c78 <_lseek_r>
   25c00:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   25c04:	e7ea      	b.n	25bdc <__swrite+0x14>
   25c06:	bf00      	nop

00025c08 <__sseek>:
   25c08:	b510      	push	{r4, lr}
   25c0a:	460c      	mov	r4, r1
   25c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   25c10:	f000 f832 	bl	25c78 <_lseek_r>
   25c14:	89a3      	ldrh	r3, [r4, #12]
   25c16:	1c42      	adds	r2, r0, #1
   25c18:	bf0e      	itee	eq
   25c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   25c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   25c22:	6520      	strne	r0, [r4, #80]	; 0x50
   25c24:	81a3      	strh	r3, [r4, #12]
   25c26:	bd10      	pop	{r4, pc}

00025c28 <__sclose>:
   25c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   25c2c:	f000 b812 	b.w	25c54 <_close_r>

00025c30 <__ascii_wctomb>:
   25c30:	b149      	cbz	r1, 25c46 <__ascii_wctomb+0x16>
   25c32:	2aff      	cmp	r2, #255	; 0xff
   25c34:	d802      	bhi.n	25c3c <__ascii_wctomb+0xc>
   25c36:	700a      	strb	r2, [r1, #0]
   25c38:	2001      	movs	r0, #1
   25c3a:	4770      	bx	lr
   25c3c:	238a      	movs	r3, #138	; 0x8a
   25c3e:	6003      	str	r3, [r0, #0]
   25c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25c44:	4770      	bx	lr
   25c46:	4608      	mov	r0, r1
   25c48:	4770      	bx	lr
   25c4a:	bf00      	nop

00025c4c <_localeconv_r>:
   25c4c:	4800      	ldr	r0, [pc, #0]	; (25c50 <_localeconv_r+0x4>)
   25c4e:	4770      	bx	lr
   25c50:	20009554 	.word	0x20009554

00025c54 <_close_r>:
   25c54:	b538      	push	{r3, r4, r5, lr}
   25c56:	4d07      	ldr	r5, [pc, #28]	; (25c74 <_close_r+0x20>)
   25c58:	2200      	movs	r2, #0
   25c5a:	4604      	mov	r4, r0
   25c5c:	4608      	mov	r0, r1
   25c5e:	602a      	str	r2, [r5, #0]
   25c60:	f7f6 fc14 	bl	1c48c <_close>
   25c64:	1c43      	adds	r3, r0, #1
   25c66:	d000      	beq.n	25c6a <_close_r+0x16>
   25c68:	bd38      	pop	{r3, r4, r5, pc}
   25c6a:	682b      	ldr	r3, [r5, #0]
   25c6c:	2b00      	cmp	r3, #0
   25c6e:	d0fb      	beq.n	25c68 <_close_r+0x14>
   25c70:	6023      	str	r3, [r4, #0]
   25c72:	bd38      	pop	{r3, r4, r5, pc}
   25c74:	200106f0 	.word	0x200106f0

00025c78 <_lseek_r>:
   25c78:	b538      	push	{r3, r4, r5, lr}
   25c7a:	460c      	mov	r4, r1
   25c7c:	4d08      	ldr	r5, [pc, #32]	; (25ca0 <_lseek_r+0x28>)
   25c7e:	4684      	mov	ip, r0
   25c80:	4611      	mov	r1, r2
   25c82:	4620      	mov	r0, r4
   25c84:	461a      	mov	r2, r3
   25c86:	2300      	movs	r3, #0
   25c88:	602b      	str	r3, [r5, #0]
   25c8a:	4664      	mov	r4, ip
   25c8c:	f7f6 fc0a 	bl	1c4a4 <_lseek>
   25c90:	1c43      	adds	r3, r0, #1
   25c92:	d000      	beq.n	25c96 <_lseek_r+0x1e>
   25c94:	bd38      	pop	{r3, r4, r5, pc}
   25c96:	682b      	ldr	r3, [r5, #0]
   25c98:	2b00      	cmp	r3, #0
   25c9a:	d0fb      	beq.n	25c94 <_lseek_r+0x1c>
   25c9c:	6023      	str	r3, [r4, #0]
   25c9e:	bd38      	pop	{r3, r4, r5, pc}
   25ca0:	200106f0 	.word	0x200106f0

00025ca4 <_read_r>:
   25ca4:	b538      	push	{r3, r4, r5, lr}
   25ca6:	460c      	mov	r4, r1
   25ca8:	4d08      	ldr	r5, [pc, #32]	; (25ccc <_read_r+0x28>)
   25caa:	4684      	mov	ip, r0
   25cac:	4611      	mov	r1, r2
   25cae:	4620      	mov	r0, r4
   25cb0:	461a      	mov	r2, r3
   25cb2:	2300      	movs	r3, #0
   25cb4:	602b      	str	r3, [r5, #0]
   25cb6:	4664      	mov	r4, ip
   25cb8:	f7f6 fbe6 	bl	1c488 <_read>
   25cbc:	1c43      	adds	r3, r0, #1
   25cbe:	d000      	beq.n	25cc2 <_read_r+0x1e>
   25cc0:	bd38      	pop	{r3, r4, r5, pc}
   25cc2:	682b      	ldr	r3, [r5, #0]
   25cc4:	2b00      	cmp	r3, #0
   25cc6:	d0fb      	beq.n	25cc0 <_read_r+0x1c>
   25cc8:	6023      	str	r3, [r4, #0]
   25cca:	bd38      	pop	{r3, r4, r5, pc}
   25ccc:	200106f0 	.word	0x200106f0

00025cd0 <fcvtbuf>:
   25cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25cd4:	460e      	mov	r6, r1
   25cd6:	4926      	ldr	r1, [pc, #152]	; (25d70 <fcvtbuf+0xa0>)
   25cd8:	b087      	sub	sp, #28
   25cda:	680f      	ldr	r7, [r1, #0]
   25cdc:	4604      	mov	r4, r0
   25cde:	4690      	mov	r8, r2
   25ce0:	461d      	mov	r5, r3
   25ce2:	b353      	cbz	r3, 25d3a <fcvtbuf+0x6a>
   25ce4:	aa05      	add	r2, sp, #20
   25ce6:	4633      	mov	r3, r6
   25ce8:	9201      	str	r2, [sp, #4]
   25cea:	2103      	movs	r1, #3
   25cec:	4622      	mov	r2, r4
   25cee:	f8cd 8000 	str.w	r8, [sp]
   25cf2:	4638      	mov	r0, r7
   25cf4:	f000 f99c 	bl	26030 <_dtoa_r>
   25cf8:	9b05      	ldr	r3, [sp, #20]
   25cfa:	6832      	ldr	r2, [r6, #0]
   25cfc:	4298      	cmp	r0, r3
   25cfe:	4684      	mov	ip, r0
   25d00:	f1c2 0200 	rsb	r2, r2, #0
   25d04:	4629      	mov	r1, r5
   25d06:	d209      	bcs.n	25d1c <fcvtbuf+0x4c>
   25d08:	1a10      	subs	r0, r2, r0
   25d0a:	f81c 3b01 	ldrb.w	r3, [ip], #1
   25d0e:	f801 3b01 	strb.w	r3, [r1], #1
   25d12:	9b05      	ldr	r3, [sp, #20]
   25d14:	4563      	cmp	r3, ip
   25d16:	eb00 020c 	add.w	r2, r0, ip
   25d1a:	d8f6      	bhi.n	25d0a <fcvtbuf+0x3a>
   25d1c:	4294      	cmp	r4, r2
   25d1e:	dd24      	ble.n	25d6a <fcvtbuf+0x9a>
   25d20:	1aa2      	subs	r2, r4, r2
   25d22:	440a      	add	r2, r1
   25d24:	2330      	movs	r3, #48	; 0x30
   25d26:	f801 3b01 	strb.w	r3, [r1], #1
   25d2a:	4291      	cmp	r1, r2
   25d2c:	d1fb      	bne.n	25d26 <fcvtbuf+0x56>
   25d2e:	2300      	movs	r3, #0
   25d30:	7013      	strb	r3, [r2, #0]
   25d32:	4628      	mov	r0, r5
   25d34:	b007      	add	sp, #28
   25d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   25d3c:	f100 0323 	add.w	r3, r0, #35	; 0x23
   25d40:	429a      	cmp	r2, r3
   25d42:	dd01      	ble.n	25d48 <fcvtbuf+0x78>
   25d44:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   25d46:	e7cd      	b.n	25ce4 <fcvtbuf+0x14>
   25d48:	f100 0924 	add.w	r9, r0, #36	; 0x24
   25d4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   25d4e:	464a      	mov	r2, r9
   25d50:	4638      	mov	r0, r7
   25d52:	ed8d 0b02 	vstr	d0, [sp, #8]
   25d56:	f7fa fe99 	bl	20a8c <_realloc_r>
   25d5a:	4605      	mov	r5, r0
   25d5c:	2800      	cmp	r0, #0
   25d5e:	d0e8      	beq.n	25d32 <fcvtbuf+0x62>
   25d60:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   25d64:	ed9d 0b02 	vldr	d0, [sp, #8]
   25d68:	e7bc      	b.n	25ce4 <fcvtbuf+0x14>
   25d6a:	460a      	mov	r2, r1
   25d6c:	e7df      	b.n	25d2e <fcvtbuf+0x5e>
   25d6e:	bf00      	nop
   25d70:	200099ec 	.word	0x200099ec

00025d74 <_wcrtomb_r>:
   25d74:	b570      	push	{r4, r5, r6, lr}
   25d76:	4605      	mov	r5, r0
   25d78:	b084      	sub	sp, #16
   25d7a:	b15b      	cbz	r3, 25d94 <_wcrtomb_r+0x20>
   25d7c:	461c      	mov	r4, r3
   25d7e:	b169      	cbz	r1, 25d9c <_wcrtomb_r+0x28>
   25d80:	4b0e      	ldr	r3, [pc, #56]	; (25dbc <_wcrtomb_r+0x48>)
   25d82:	4628      	mov	r0, r5
   25d84:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   25d88:	4623      	mov	r3, r4
   25d8a:	47b0      	blx	r6
   25d8c:	1c43      	adds	r3, r0, #1
   25d8e:	d00f      	beq.n	25db0 <_wcrtomb_r+0x3c>
   25d90:	b004      	add	sp, #16
   25d92:	bd70      	pop	{r4, r5, r6, pc}
   25d94:	f500 7482 	add.w	r4, r0, #260	; 0x104
   25d98:	2900      	cmp	r1, #0
   25d9a:	d1f1      	bne.n	25d80 <_wcrtomb_r+0xc>
   25d9c:	4a07      	ldr	r2, [pc, #28]	; (25dbc <_wcrtomb_r+0x48>)
   25d9e:	4623      	mov	r3, r4
   25da0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   25da4:	4628      	mov	r0, r5
   25da6:	460a      	mov	r2, r1
   25da8:	a901      	add	r1, sp, #4
   25daa:	47b0      	blx	r6
   25dac:	1c43      	adds	r3, r0, #1
   25dae:	d1ef      	bne.n	25d90 <_wcrtomb_r+0x1c>
   25db0:	2200      	movs	r2, #0
   25db2:	238a      	movs	r3, #138	; 0x8a
   25db4:	6022      	str	r2, [r4, #0]
   25db6:	602b      	str	r3, [r5, #0]
   25db8:	b004      	add	sp, #16
   25dba:	bd70      	pop	{r4, r5, r6, pc}
   25dbc:	20009464 	.word	0x20009464

00025dc0 <_wcsrtombs_r>:
   25dc0:	b510      	push	{r4, lr}
   25dc2:	b082      	sub	sp, #8
   25dc4:	9c04      	ldr	r4, [sp, #16]
   25dc6:	e9cd 3400 	strd	r3, r4, [sp]
   25dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25dce:	f002 fb69 	bl	284a4 <_wcsnrtombs_r>
   25dd2:	b002      	add	sp, #8
   25dd4:	bd10      	pop	{r4, pc}
   25dd6:	bf00      	nop

00025dd8 <frexp>:
   25dd8:	b430      	push	{r4, r5}
   25dda:	b082      	sub	sp, #8
   25ddc:	ed8d 0b00 	vstr	d0, [sp]
   25de0:	9a01      	ldr	r2, [sp, #4]
   25de2:	4c19      	ldr	r4, [pc, #100]	; (25e48 <frexp+0x70>)
   25de4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   25de8:	2100      	movs	r1, #0
   25dea:	42a3      	cmp	r3, r4
   25dec:	6001      	str	r1, [r0, #0]
   25dee:	dc21      	bgt.n	25e34 <frexp+0x5c>
   25df0:	9c00      	ldr	r4, [sp, #0]
   25df2:	431c      	orrs	r4, r3
   25df4:	d01e      	beq.n	25e34 <frexp+0x5c>
   25df6:	4c15      	ldr	r4, [pc, #84]	; (25e4c <frexp+0x74>)
   25df8:	4014      	ands	r4, r2
   25dfa:	b954      	cbnz	r4, 25e12 <frexp+0x3a>
   25dfc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 25e40 <frexp+0x68>
   25e00:	ee20 7b07 	vmul.f64	d7, d0, d7
   25e04:	ed8d 7b00 	vstr	d7, [sp]
   25e08:	9a01      	ldr	r2, [sp, #4]
   25e0a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   25e0e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   25e12:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   25e16:	e9dd 4500 	ldrd	r4, r5, [sp]
   25e1a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   25e1e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   25e22:	151b      	asrs	r3, r3, #20
   25e24:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   25e28:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   25e2c:	e9cd 4500 	strd	r4, r5, [sp]
   25e30:	440b      	add	r3, r1
   25e32:	6003      	str	r3, [r0, #0]
   25e34:	ed9d 0b00 	vldr	d0, [sp]
   25e38:	b002      	add	sp, #8
   25e3a:	bc30      	pop	{r4, r5}
   25e3c:	4770      	bx	lr
   25e3e:	bf00      	nop
   25e40:	00000000 	.word	0x00000000
   25e44:	43500000 	.word	0x43500000
   25e48:	7fefffff 	.word	0x7fefffff
   25e4c:	7ff00000 	.word	0x7ff00000

00025e50 <__assert_func>:
   25e50:	b500      	push	{lr}
   25e52:	4c0b      	ldr	r4, [pc, #44]	; (25e80 <__assert_func+0x30>)
   25e54:	6825      	ldr	r5, [r4, #0]
   25e56:	4614      	mov	r4, r2
   25e58:	68ee      	ldr	r6, [r5, #12]
   25e5a:	461a      	mov	r2, r3
   25e5c:	b085      	sub	sp, #20
   25e5e:	4603      	mov	r3, r0
   25e60:	460d      	mov	r5, r1
   25e62:	b14c      	cbz	r4, 25e78 <__assert_func+0x28>
   25e64:	4907      	ldr	r1, [pc, #28]	; (25e84 <__assert_func+0x34>)
   25e66:	9500      	str	r5, [sp, #0]
   25e68:	e9cd 1401 	strd	r1, r4, [sp, #4]
   25e6c:	4630      	mov	r0, r6
   25e6e:	4906      	ldr	r1, [pc, #24]	; (25e88 <__assert_func+0x38>)
   25e70:	f000 ff54 	bl	26d1c <fiprintf>
   25e74:	f7f6 fb1c 	bl	1c4b0 <abort>
   25e78:	4904      	ldr	r1, [pc, #16]	; (25e8c <__assert_func+0x3c>)
   25e7a:	460c      	mov	r4, r1
   25e7c:	e7f3      	b.n	25e66 <__assert_func+0x16>
   25e7e:	bf00      	nop
   25e80:	200099ec 	.word	0x200099ec
   25e84:	20003fbc 	.word	0x20003fbc
   25e88:	20003fcc 	.word	0x20003fcc
   25e8c:	200039f8 	.word	0x200039f8

00025e90 <_calloc_r>:
   25e90:	b538      	push	{r3, r4, r5, lr}
   25e92:	fba1 1402 	umull	r1, r4, r1, r2
   25e96:	bb8c      	cbnz	r4, 25efc <_calloc_r+0x6c>
   25e98:	f7fa fb30 	bl	204fc <_malloc_r>
   25e9c:	4605      	mov	r5, r0
   25e9e:	b1e0      	cbz	r0, 25eda <_calloc_r+0x4a>
   25ea0:	f850 2c04 	ldr.w	r2, [r0, #-4]
   25ea4:	f022 0203 	bic.w	r2, r2, #3
   25ea8:	3a04      	subs	r2, #4
   25eaa:	2a24      	cmp	r2, #36	; 0x24
   25eac:	d817      	bhi.n	25ede <_calloc_r+0x4e>
   25eae:	2a13      	cmp	r2, #19
   25eb0:	d91a      	bls.n	25ee8 <_calloc_r+0x58>
   25eb2:	2a1b      	cmp	r2, #27
   25eb4:	e9c0 4400 	strd	r4, r4, [r0]
   25eb8:	d91d      	bls.n	25ef6 <_calloc_r+0x66>
   25eba:	2a24      	cmp	r2, #36	; 0x24
   25ebc:	bf14      	ite	ne
   25ebe:	f100 0210 	addne.w	r2, r0, #16
   25ec2:	f100 0218 	addeq.w	r2, r0, #24
   25ec6:	f04f 0300 	mov.w	r3, #0
   25eca:	e9c0 4402 	strd	r4, r4, [r0, #8]
   25ece:	bf04      	itt	eq
   25ed0:	6104      	streq	r4, [r0, #16]
   25ed2:	6144      	streq	r4, [r0, #20]
   25ed4:	e9c2 3300 	strd	r3, r3, [r2]
   25ed8:	6093      	str	r3, [r2, #8]
   25eda:	4628      	mov	r0, r5
   25edc:	bd38      	pop	{r3, r4, r5, pc}
   25ede:	4621      	mov	r1, r4
   25ee0:	f7fc fa0e 	bl	22300 <memset>
   25ee4:	4628      	mov	r0, r5
   25ee6:	bd38      	pop	{r3, r4, r5, pc}
   25ee8:	4602      	mov	r2, r0
   25eea:	2300      	movs	r3, #0
   25eec:	e9c2 3300 	strd	r3, r3, [r2]
   25ef0:	6093      	str	r3, [r2, #8]
   25ef2:	4628      	mov	r0, r5
   25ef4:	bd38      	pop	{r3, r4, r5, pc}
   25ef6:	f100 0208 	add.w	r2, r0, #8
   25efa:	e7f6      	b.n	25eea <_calloc_r+0x5a>
   25efc:	f7fc fb36 	bl	2256c <__errno>
   25f00:	230c      	movs	r3, #12
   25f02:	2500      	movs	r5, #0
   25f04:	6003      	str	r3, [r0, #0]
   25f06:	e7e8      	b.n	25eda <_calloc_r+0x4a>

00025f08 <quorem>:
   25f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f0c:	6903      	ldr	r3, [r0, #16]
   25f0e:	690c      	ldr	r4, [r1, #16]
   25f10:	42a3      	cmp	r3, r4
   25f12:	b083      	sub	sp, #12
   25f14:	f2c0 8087 	blt.w	26026 <quorem+0x11e>
   25f18:	3c01      	subs	r4, #1
   25f1a:	f101 0514 	add.w	r5, r1, #20
   25f1e:	00a3      	lsls	r3, r4, #2
   25f20:	f100 0814 	add.w	r8, r0, #20
   25f24:	9300      	str	r3, [sp, #0]
   25f26:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   25f2a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   25f2e:	3301      	adds	r3, #1
   25f30:	4681      	mov	r9, r0
   25f32:	429a      	cmp	r2, r3
   25f34:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   25f38:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   25f3c:	9001      	str	r0, [sp, #4]
   25f3e:	fbb2 f6f3 	udiv	r6, r2, r3
   25f42:	d33b      	bcc.n	25fbc <quorem+0xb4>
   25f44:	f04f 0c00 	mov.w	ip, #0
   25f48:	46ae      	mov	lr, r5
   25f4a:	4640      	mov	r0, r8
   25f4c:	46e2      	mov	sl, ip
   25f4e:	4663      	mov	r3, ip
   25f50:	f85e bb04 	ldr.w	fp, [lr], #4
   25f54:	6802      	ldr	r2, [r0, #0]
   25f56:	fa1f fc8b 	uxth.w	ip, fp
   25f5a:	fb06 330c 	mla	r3, r6, ip, r3
   25f5e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   25f62:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   25f66:	fb06 cc0b 	mla	ip, r6, fp, ip
   25f6a:	b29b      	uxth	r3, r3
   25f6c:	ebaa 0303 	sub.w	r3, sl, r3
   25f70:	fa1f fa8c 	uxth.w	sl, ip
   25f74:	fa13 f382 	uxtah	r3, r3, r2
   25f78:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   25f7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   25f80:	b29b      	uxth	r3, r3
   25f82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   25f86:	4577      	cmp	r7, lr
   25f88:	f840 3b04 	str.w	r3, [r0], #4
   25f8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   25f90:	ea4f 431c 	mov.w	r3, ip, lsr #16
   25f94:	d2dc      	bcs.n	25f50 <quorem+0x48>
   25f96:	9b00      	ldr	r3, [sp, #0]
   25f98:	f858 3003 	ldr.w	r3, [r8, r3]
   25f9c:	b973      	cbnz	r3, 25fbc <quorem+0xb4>
   25f9e:	9b01      	ldr	r3, [sp, #4]
   25fa0:	3b04      	subs	r3, #4
   25fa2:	4598      	cmp	r8, r3
   25fa4:	d304      	bcc.n	25fb0 <quorem+0xa8>
   25fa6:	e007      	b.n	25fb8 <quorem+0xb0>
   25fa8:	4598      	cmp	r8, r3
   25faa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   25fae:	d203      	bcs.n	25fb8 <quorem+0xb0>
   25fb0:	f853 2904 	ldr.w	r2, [r3], #-4
   25fb4:	2a00      	cmp	r2, #0
   25fb6:	d0f7      	beq.n	25fa8 <quorem+0xa0>
   25fb8:	f8c9 4010 	str.w	r4, [r9, #16]
   25fbc:	4648      	mov	r0, r9
   25fbe:	f7ff fa6f 	bl	254a0 <__mcmp>
   25fc2:	2800      	cmp	r0, #0
   25fc4:	db2b      	blt.n	2601e <quorem+0x116>
   25fc6:	3601      	adds	r6, #1
   25fc8:	4641      	mov	r1, r8
   25fca:	2300      	movs	r3, #0
   25fcc:	f855 0b04 	ldr.w	r0, [r5], #4
   25fd0:	f8d1 c000 	ldr.w	ip, [r1]
   25fd4:	b282      	uxth	r2, r0
   25fd6:	1a9a      	subs	r2, r3, r2
   25fd8:	0c03      	lsrs	r3, r0, #16
   25fda:	fa12 f28c 	uxtah	r2, r2, ip
   25fde:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   25fe2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   25fe6:	b292      	uxth	r2, r2
   25fe8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   25fec:	42af      	cmp	r7, r5
   25fee:	f841 2b04 	str.w	r2, [r1], #4
   25ff2:	ea4f 4323 	mov.w	r3, r3, asr #16
   25ff6:	d2e9      	bcs.n	25fcc <quorem+0xc4>
   25ff8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   25ffc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   26000:	b96a      	cbnz	r2, 2601e <quorem+0x116>
   26002:	3b04      	subs	r3, #4
   26004:	4598      	cmp	r8, r3
   26006:	d304      	bcc.n	26012 <quorem+0x10a>
   26008:	e007      	b.n	2601a <quorem+0x112>
   2600a:	4598      	cmp	r8, r3
   2600c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   26010:	d203      	bcs.n	2601a <quorem+0x112>
   26012:	f853 2904 	ldr.w	r2, [r3], #-4
   26016:	2a00      	cmp	r2, #0
   26018:	d0f7      	beq.n	2600a <quorem+0x102>
   2601a:	f8c9 4010 	str.w	r4, [r9, #16]
   2601e:	4630      	mov	r0, r6
   26020:	b003      	add	sp, #12
   26022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26026:	2000      	movs	r0, #0
   26028:	b003      	add	sp, #12
   2602a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2602e:	bf00      	nop

00026030 <_dtoa_r>:
   26030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26034:	ed2d 8b02 	vpush	{d8}
   26038:	b08f      	sub	sp, #60	; 0x3c
   2603a:	ed8d 0b02 	vstr	d0, [sp, #8]
   2603e:	9101      	str	r1, [sp, #4]
   26040:	6b81      	ldr	r1, [r0, #56]	; 0x38
   26042:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   26044:	9305      	str	r3, [sp, #20]
   26046:	ec57 6b10 	vmov	r6, r7, d0
   2604a:	4604      	mov	r4, r0
   2604c:	4693      	mov	fp, r2
   2604e:	b141      	cbz	r1, 26062 <_dtoa_r+0x32>
   26050:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   26052:	604a      	str	r2, [r1, #4]
   26054:	2301      	movs	r3, #1
   26056:	4093      	lsls	r3, r2
   26058:	608b      	str	r3, [r1, #8]
   2605a:	f7fe ff69 	bl	24f30 <_Bfree>
   2605e:	2300      	movs	r3, #0
   26060:	63a3      	str	r3, [r4, #56]	; 0x38
   26062:	f1b7 0800 	subs.w	r8, r7, #0
   26066:	bfb4      	ite	lt
   26068:	2301      	movlt	r3, #1
   2606a:	2300      	movge	r3, #0
   2606c:	602b      	str	r3, [r5, #0]
   2606e:	4bbe      	ldr	r3, [pc, #760]	; (26368 <_dtoa_r+0x338>)
   26070:	bfbc      	itt	lt
   26072:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   26076:	f8cd 800c 	strlt.w	r8, [sp, #12]
   2607a:	ea33 0308 	bics.w	r3, r3, r8
   2607e:	f000 809f 	beq.w	261c0 <_dtoa_r+0x190>
   26082:	ed9d 8b02 	vldr	d8, [sp, #8]
   26086:	eeb5 8b40 	vcmp.f64	d8, #0.0
   2608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2608e:	d111      	bne.n	260b4 <_dtoa_r+0x84>
   26090:	9a05      	ldr	r2, [sp, #20]
   26092:	2301      	movs	r3, #1
   26094:	6013      	str	r3, [r2, #0]
   26096:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   26098:	2b00      	cmp	r3, #0
   2609a:	f000 823f 	beq.w	2651c <_dtoa_r+0x4ec>
   2609e:	4bb3      	ldr	r3, [pc, #716]	; (2636c <_dtoa_r+0x33c>)
   260a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   260a2:	6013      	str	r3, [r2, #0]
   260a4:	3b01      	subs	r3, #1
   260a6:	9300      	str	r3, [sp, #0]
   260a8:	9800      	ldr	r0, [sp, #0]
   260aa:	b00f      	add	sp, #60	; 0x3c
   260ac:	ecbd 8b02 	vpop	{d8}
   260b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260b4:	aa0c      	add	r2, sp, #48	; 0x30
   260b6:	a90d      	add	r1, sp, #52	; 0x34
   260b8:	4620      	mov	r0, r4
   260ba:	eeb0 0b48 	vmov.f64	d0, d8
   260be:	f7ff fb4f 	bl	25760 <__d2b>
   260c2:	ea5f 5318 	movs.w	r3, r8, lsr #20
   260c6:	4605      	mov	r5, r0
   260c8:	f040 8092 	bne.w	261f0 <_dtoa_r+0x1c0>
   260cc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   260d0:	440b      	add	r3, r1
   260d2:	f203 4232 	addw	r2, r3, #1074	; 0x432
   260d6:	2a20      	cmp	r2, #32
   260d8:	f340 82fa 	ble.w	266d0 <_dtoa_r+0x6a0>
   260dc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   260e0:	fa08 f802 	lsl.w	r8, r8, r2
   260e4:	f203 4212 	addw	r2, r3, #1042	; 0x412
   260e8:	40d6      	lsrs	r6, r2
   260ea:	ea48 0206 	orr.w	r2, r8, r6
   260ee:	ee07 2a10 	vmov	s14, r2
   260f2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   260f6:	1e58      	subs	r0, r3, #1
   260f8:	ee17 6a90 	vmov	r6, s15
   260fc:	ec53 2b17 	vmov	r2, r3, d7
   26100:	f04f 0a01 	mov.w	sl, #1
   26104:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   26108:	ed9f 3b91 	vldr	d3, [pc, #580]	; 26350 <_dtoa_r+0x320>
   2610c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 26358 <_dtoa_r+0x328>
   26110:	ed9f 5b93 	vldr	d5, [pc, #588]	; 26360 <_dtoa_r+0x330>
   26114:	ee06 0a90 	vmov	s13, r0
   26118:	ec43 2b12 	vmov	d2, r2, r3
   2611c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   26120:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   26124:	ee32 6b46 	vsub.f64	d6, d2, d6
   26128:	eea6 7b03 	vfma.f64	d7, d6, d3
   2612c:	eea4 7b05 	vfma.f64	d7, d4, d5
   26130:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   26134:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   26138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2613c:	ee16 7a90 	vmov	r7, s13
   26140:	d508      	bpl.n	26154 <_dtoa_r+0x124>
   26142:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   26146:	eeb4 6b47 	vcmp.f64	d6, d7
   2614a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2614e:	bf18      	it	ne
   26150:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   26154:	2f16      	cmp	r7, #22
   26156:	f200 8145 	bhi.w	263e4 <_dtoa_r+0x3b4>
   2615a:	4b85      	ldr	r3, [pc, #532]	; (26370 <_dtoa_r+0x340>)
   2615c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   26160:	ed93 7b00 	vldr	d7, [r3]
   26164:	eeb4 8bc7 	vcmpe.f64	d8, d7
   26168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2616c:	d557      	bpl.n	2621e <_dtoa_r+0x1ee>
   2616e:	1a09      	subs	r1, r1, r0
   26170:	2300      	movs	r3, #0
   26172:	f1b1 0801 	subs.w	r8, r1, #1
   26176:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   2617a:	930a      	str	r3, [sp, #40]	; 0x28
   2617c:	f100 8139 	bmi.w	263f2 <_dtoa_r+0x3c2>
   26180:	2300      	movs	r3, #0
   26182:	9306      	str	r3, [sp, #24]
   26184:	2f00      	cmp	r7, #0
   26186:	da52      	bge.n	2622e <_dtoa_r+0x1fe>
   26188:	9b06      	ldr	r3, [sp, #24]
   2618a:	9704      	str	r7, [sp, #16]
   2618c:	1bdb      	subs	r3, r3, r7
   2618e:	9306      	str	r3, [sp, #24]
   26190:	427b      	negs	r3, r7
   26192:	9308      	str	r3, [sp, #32]
   26194:	9b01      	ldr	r3, [sp, #4]
   26196:	2b09      	cmp	r3, #9
   26198:	f04f 0700 	mov.w	r7, #0
   2619c:	d84e      	bhi.n	2623c <_dtoa_r+0x20c>
   2619e:	2b05      	cmp	r3, #5
   261a0:	f340 829d 	ble.w	266de <_dtoa_r+0x6ae>
   261a4:	3b04      	subs	r3, #4
   261a6:	9301      	str	r3, [sp, #4]
   261a8:	2600      	movs	r6, #0
   261aa:	9b01      	ldr	r3, [sp, #4]
   261ac:	1e9a      	subs	r2, r3, #2
   261ae:	2a03      	cmp	r2, #3
   261b0:	f200 8125 	bhi.w	263fe <_dtoa_r+0x3ce>
   261b4:	e8df f012 	tbh	[pc, r2, lsl #1]
   261b8:	03a703aa 	.word	0x03a703aa
   261bc:	037e039d 	.word	0x037e039d
   261c0:	9a05      	ldr	r2, [sp, #20]
   261c2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   261c6:	f242 730f 	movw	r3, #9999	; 0x270f
   261ca:	ea58 0806 	orrs.w	r8, r8, r6
   261ce:	6013      	str	r3, [r2, #0]
   261d0:	d11e      	bne.n	26210 <_dtoa_r+0x1e0>
   261d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   261d4:	2b00      	cmp	r3, #0
   261d6:	f000 8591 	beq.w	26cfc <_dtoa_r+0xccc>
   261da:	4b66      	ldr	r3, [pc, #408]	; (26374 <_dtoa_r+0x344>)
   261dc:	9300      	str	r3, [sp, #0]
   261de:	3308      	adds	r3, #8
   261e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   261e2:	9800      	ldr	r0, [sp, #0]
   261e4:	6013      	str	r3, [r2, #0]
   261e6:	b00f      	add	sp, #60	; 0x3c
   261e8:	ecbd 8b02 	vpop	{d8}
   261ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261f0:	ee18 6a90 	vmov	r6, s17
   261f4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   261f8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   261fc:	ec53 2b18 	vmov	r2, r3, d8
   26200:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   26204:	990c      	ldr	r1, [sp, #48]	; 0x30
   26206:	f04f 0a00 	mov.w	sl, #0
   2620a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   2620e:	e77b      	b.n	26108 <_dtoa_r+0xd8>
   26210:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   26212:	2b00      	cmp	r3, #0
   26214:	f040 833b 	bne.w	2688e <_dtoa_r+0x85e>
   26218:	4b57      	ldr	r3, [pc, #348]	; (26378 <_dtoa_r+0x348>)
   2621a:	9300      	str	r3, [sp, #0]
   2621c:	e744      	b.n	260a8 <_dtoa_r+0x78>
   2621e:	1a09      	subs	r1, r1, r0
   26220:	2300      	movs	r3, #0
   26222:	f1b1 0801 	subs.w	r8, r1, #1
   26226:	930a      	str	r3, [sp, #40]	; 0x28
   26228:	f100 80e3 	bmi.w	263f2 <_dtoa_r+0x3c2>
   2622c:	9306      	str	r3, [sp, #24]
   2622e:	2300      	movs	r3, #0
   26230:	9308      	str	r3, [sp, #32]
   26232:	9b01      	ldr	r3, [sp, #4]
   26234:	9704      	str	r7, [sp, #16]
   26236:	2b09      	cmp	r3, #9
   26238:	44b8      	add	r8, r7
   2623a:	d9b0      	bls.n	2619e <_dtoa_r+0x16e>
   2623c:	2300      	movs	r3, #0
   2623e:	2601      	movs	r6, #1
   26240:	9301      	str	r3, [sp, #4]
   26242:	9607      	str	r6, [sp, #28]
   26244:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   26248:	469b      	mov	fp, r3
   2624a:	2100      	movs	r1, #0
   2624c:	63e1      	str	r1, [r4, #60]	; 0x3c
   2624e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   26252:	4620      	mov	r0, r4
   26254:	f7fe fe46 	bl	24ee4 <_Balloc>
   26258:	9000      	str	r0, [sp, #0]
   2625a:	2800      	cmp	r0, #0
   2625c:	f000 8540 	beq.w	26ce0 <_dtoa_r+0xcb0>
   26260:	9b00      	ldr	r3, [sp, #0]
   26262:	63a3      	str	r3, [r4, #56]	; 0x38
   26264:	f1b9 0f0e 	cmp.w	r9, #14
   26268:	f200 80dc 	bhi.w	26424 <_dtoa_r+0x3f4>
   2626c:	2e00      	cmp	r6, #0
   2626e:	f000 80d9 	beq.w	26424 <_dtoa_r+0x3f4>
   26272:	9b04      	ldr	r3, [sp, #16]
   26274:	2b00      	cmp	r3, #0
   26276:	f340 83de 	ble.w	26a36 <_dtoa_r+0xa06>
   2627a:	4a3d      	ldr	r2, [pc, #244]	; (26370 <_dtoa_r+0x340>)
   2627c:	f003 010f 	and.w	r1, r3, #15
   26280:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   26284:	ed92 7b00 	vldr	d7, [r2]
   26288:	111a      	asrs	r2, r3, #4
   2628a:	05db      	lsls	r3, r3, #23
   2628c:	f140 8382 	bpl.w	26994 <_dtoa_r+0x964>
   26290:	493a      	ldr	r1, [pc, #232]	; (2637c <_dtoa_r+0x34c>)
   26292:	ed91 6b08 	vldr	d6, [r1, #32]
   26296:	f002 020f 	and.w	r2, r2, #15
   2629a:	2003      	movs	r0, #3
   2629c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   262a0:	b15a      	cbz	r2, 262ba <_dtoa_r+0x28a>
   262a2:	4936      	ldr	r1, [pc, #216]	; (2637c <_dtoa_r+0x34c>)
   262a4:	07d6      	lsls	r6, r2, #31
   262a6:	d504      	bpl.n	262b2 <_dtoa_r+0x282>
   262a8:	ed91 6b00 	vldr	d6, [r1]
   262ac:	3001      	adds	r0, #1
   262ae:	ee27 7b06 	vmul.f64	d7, d7, d6
   262b2:	1052      	asrs	r2, r2, #1
   262b4:	f101 0108 	add.w	r1, r1, #8
   262b8:	d1f4      	bne.n	262a4 <_dtoa_r+0x274>
   262ba:	ee85 6b07 	vdiv.f64	d6, d5, d7
   262be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   262c0:	b13b      	cbz	r3, 262d2 <_dtoa_r+0x2a2>
   262c2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   262c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   262ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   262ce:	f100 84ae 	bmi.w	26c2e <_dtoa_r+0xbfe>
   262d2:	ee07 0a90 	vmov	s15, r0
   262d6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   262da:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   262de:	eea5 7b06 	vfma.f64	d7, d5, d6
   262e2:	ee17 2a90 	vmov	r2, s15
   262e6:	ec51 0b17 	vmov	r0, r1, d7
   262ea:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   262ee:	f1b9 0f00 	cmp.w	r9, #0
   262f2:	f000 8388 	beq.w	26a06 <_dtoa_r+0x9d6>
   262f6:	9e04      	ldr	r6, [sp, #16]
   262f8:	464a      	mov	r2, r9
   262fa:	9b07      	ldr	r3, [sp, #28]
   262fc:	2b00      	cmp	r3, #0
   262fe:	f000 8447 	beq.w	26b90 <_dtoa_r+0xb60>
   26302:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   26306:	4b1a      	ldr	r3, [pc, #104]	; (26370 <_dtoa_r+0x340>)
   26308:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   2630c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   26310:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   26314:	ee36 7b47 	vsub.f64	d7, d6, d7
   26318:	ed1c 6b02 	vldr	d6, [ip, #-8]
   2631c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   26320:	ec41 0b16 	vmov	d6, r0, r1
   26324:	ee14 0a90 	vmov	r0, s9
   26328:	ee35 5b46 	vsub.f64	d5, d5, d6
   2632c:	9900      	ldr	r1, [sp, #0]
   2632e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   26332:	3030      	adds	r0, #48	; 0x30
   26334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26338:	f801 0b01 	strb.w	r0, [r1], #1
   2633c:	f300 84ac 	bgt.w	26c98 <_dtoa_r+0xc68>
   26340:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   26344:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   26348:	f04f 0c00 	mov.w	ip, #0
   2634c:	e031      	b.n	263b2 <_dtoa_r+0x382>
   2634e:	bf00      	nop
   26350:	636f4361 	.word	0x636f4361
   26354:	3fd287a7 	.word	0x3fd287a7
   26358:	8b60c8b3 	.word	0x8b60c8b3
   2635c:	3fc68a28 	.word	0x3fc68a28
   26360:	509f79fb 	.word	0x509f79fb
   26364:	3fd34413 	.word	0x3fd34413
   26368:	7ff00000 	.word	0x7ff00000
   2636c:	20004f59 	.word	0x20004f59
   26370:	200018c8 	.word	0x200018c8
   26374:	2000430c 	.word	0x2000430c
   26378:	20004318 	.word	0x20004318
   2637c:	200018a0 	.word	0x200018a0
   26380:	f10c 0c01 	add.w	ip, ip, #1
   26384:	4594      	cmp	ip, r2
   26386:	da4d      	bge.n	26424 <_dtoa_r+0x3f4>
   26388:	ee27 7b04 	vmul.f64	d7, d7, d4
   2638c:	ee25 5b04 	vmul.f64	d5, d5, d4
   26390:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   26394:	ee16 3a90 	vmov	r3, s13
   26398:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   2639c:	3330      	adds	r3, #48	; 0x30
   2639e:	ee37 7b43 	vsub.f64	d7, d7, d3
   263a2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   263a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   263aa:	f801 3b01 	strb.w	r3, [r1], #1
   263ae:	f100 8473 	bmi.w	26c98 <_dtoa_r+0xc68>
   263b2:	ee32 6b47 	vsub.f64	d6, d2, d7
   263b6:	eeb4 6bc5 	vcmpe.f64	d6, d5
   263ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   263be:	d5df      	bpl.n	26380 <_dtoa_r+0x350>
   263c0:	9a00      	ldr	r2, [sp, #0]
   263c2:	9604      	str	r6, [sp, #16]
   263c4:	e002      	b.n	263cc <_dtoa_r+0x39c>
   263c6:	428a      	cmp	r2, r1
   263c8:	f000 8450 	beq.w	26c6c <_dtoa_r+0xc3c>
   263cc:	4689      	mov	r9, r1
   263ce:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   263d2:	2b39      	cmp	r3, #57	; 0x39
   263d4:	d0f7      	beq.n	263c6 <_dtoa_r+0x396>
   263d6:	3301      	adds	r3, #1
   263d8:	b2db      	uxtb	r3, r3
   263da:	700b      	strb	r3, [r1, #0]
   263dc:	9b04      	ldr	r3, [sp, #16]
   263de:	3301      	adds	r3, #1
   263e0:	9304      	str	r3, [sp, #16]
   263e2:	e155      	b.n	26690 <_dtoa_r+0x660>
   263e4:	1a09      	subs	r1, r1, r0
   263e6:	2301      	movs	r3, #1
   263e8:	f1b1 0801 	subs.w	r8, r1, #1
   263ec:	930a      	str	r3, [sp, #40]	; 0x28
   263ee:	f57f aec7 	bpl.w	26180 <_dtoa_r+0x150>
   263f2:	f1c1 0301 	rsb	r3, r1, #1
   263f6:	9306      	str	r3, [sp, #24]
   263f8:	f04f 0800 	mov.w	r8, #0
   263fc:	e6c2      	b.n	26184 <_dtoa_r+0x154>
   263fe:	2600      	movs	r6, #0
   26400:	63e6      	str	r6, [r4, #60]	; 0x3c
   26402:	4631      	mov	r1, r6
   26404:	4620      	mov	r0, r4
   26406:	f7fe fd6d 	bl	24ee4 <_Balloc>
   2640a:	9000      	str	r0, [sp, #0]
   2640c:	2800      	cmp	r0, #0
   2640e:	f000 8467 	beq.w	26ce0 <_dtoa_r+0xcb0>
   26412:	9b00      	ldr	r3, [sp, #0]
   26414:	63a3      	str	r3, [r4, #56]	; 0x38
   26416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2641a:	930b      	str	r3, [sp, #44]	; 0x2c
   2641c:	4699      	mov	r9, r3
   2641e:	2301      	movs	r3, #1
   26420:	46b3      	mov	fp, r6
   26422:	9307      	str	r3, [sp, #28]
   26424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   26426:	2a00      	cmp	r2, #0
   26428:	db55      	blt.n	264d6 <_dtoa_r+0x4a6>
   2642a:	9904      	ldr	r1, [sp, #16]
   2642c:	290e      	cmp	r1, #14
   2642e:	dc52      	bgt.n	264d6 <_dtoa_r+0x4a6>
   26430:	4bb7      	ldr	r3, [pc, #732]	; (26710 <_dtoa_r+0x6e0>)
   26432:	f1bb 0f00 	cmp.w	fp, #0
   26436:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   2643a:	ed93 6b00 	vldr	d6, [r3]
   2643e:	da15      	bge.n	2646c <_dtoa_r+0x43c>
   26440:	f1b9 0f00 	cmp.w	r9, #0
   26444:	dc12      	bgt.n	2646c <_dtoa_r+0x43c>
   26446:	f040 82f2 	bne.w	26a2e <_dtoa_r+0x9fe>
   2644a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   2644e:	ee26 7b07 	vmul.f64	d7, d6, d7
   26452:	eeb4 8bc7 	vcmpe.f64	d8, d7
   26456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2645a:	46ca      	mov	sl, r9
   2645c:	464e      	mov	r6, r9
   2645e:	f200 826d 	bhi.w	2693c <_dtoa_r+0x90c>
   26462:	f8dd 8000 	ldr.w	r8, [sp]
   26466:	ea6f 0b0b 	mvn.w	fp, fp
   2646a:	e270      	b.n	2694e <_dtoa_r+0x91e>
   2646c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   26470:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   26474:	9900      	ldr	r1, [sp, #0]
   26476:	ee17 3a10 	vmov	r3, s14
   2647a:	f1b9 0f01 	cmp.w	r9, #1
   2647e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   26482:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   26486:	f801 3b01 	strb.w	r3, [r1], #1
   2648a:	eea5 8b46 	vfms.f64	d8, d5, d6
   2648e:	f000 8334 	beq.w	26afa <_dtoa_r+0xaca>
   26492:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   26496:	2301      	movs	r3, #1
   26498:	e011      	b.n	264be <_dtoa_r+0x48e>
   2649a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   2649e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   264a2:	3301      	adds	r3, #1
   264a4:	ee17 2a10 	vmov	r2, s14
   264a8:	454b      	cmp	r3, r9
   264aa:	f102 0230 	add.w	r2, r2, #48	; 0x30
   264ae:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   264b2:	f801 2b01 	strb.w	r2, [r1], #1
   264b6:	eea5 8b46 	vfms.f64	d8, d5, d6
   264ba:	f000 831e 	beq.w	26afa <_dtoa_r+0xaca>
   264be:	ee28 8b04 	vmul.f64	d8, d8, d4
   264c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
   264c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   264ca:	d1e6      	bne.n	2649a <_dtoa_r+0x46a>
   264cc:	9b04      	ldr	r3, [sp, #16]
   264ce:	3301      	adds	r3, #1
   264d0:	9304      	str	r3, [sp, #16]
   264d2:	4689      	mov	r9, r1
   264d4:	e0dc      	b.n	26690 <_dtoa_r+0x660>
   264d6:	9b07      	ldr	r3, [sp, #28]
   264d8:	b343      	cbz	r3, 2652c <_dtoa_r+0x4fc>
   264da:	9b01      	ldr	r3, [sp, #4]
   264dc:	2b01      	cmp	r3, #1
   264de:	f340 8276 	ble.w	269ce <_dtoa_r+0x99e>
   264e2:	9b08      	ldr	r3, [sp, #32]
   264e4:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   264e8:	4553      	cmp	r3, sl
   264ea:	f280 823f 	bge.w	2696c <_dtoa_r+0x93c>
   264ee:	9b08      	ldr	r3, [sp, #32]
   264f0:	f8cd a020 	str.w	sl, [sp, #32]
   264f4:	ebaa 0203 	sub.w	r2, sl, r3
   264f8:	4417      	add	r7, r2
   264fa:	f04f 0a00 	mov.w	sl, #0
   264fe:	f1b9 0f00 	cmp.w	r9, #0
   26502:	f2c0 8325 	blt.w	26b50 <_dtoa_r+0xb20>
   26506:	9b06      	ldr	r3, [sp, #24]
   26508:	9309      	str	r3, [sp, #36]	; 0x24
   2650a:	444b      	add	r3, r9
   2650c:	44c8      	add	r8, r9
   2650e:	9306      	str	r3, [sp, #24]
   26510:	2101      	movs	r1, #1
   26512:	4620      	mov	r0, r4
   26514:	f7fe fe10 	bl	25138 <__i2b>
   26518:	4606      	mov	r6, r0
   2651a:	e00c      	b.n	26536 <_dtoa_r+0x506>
   2651c:	4b7d      	ldr	r3, [pc, #500]	; (26714 <_dtoa_r+0x6e4>)
   2651e:	9300      	str	r3, [sp, #0]
   26520:	9800      	ldr	r0, [sp, #0]
   26522:	b00f      	add	sp, #60	; 0x3c
   26524:	ecbd 8b02 	vpop	{d8}
   26528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2652c:	9b06      	ldr	r3, [sp, #24]
   2652e:	f8dd a020 	ldr.w	sl, [sp, #32]
   26532:	9e07      	ldr	r6, [sp, #28]
   26534:	9309      	str	r3, [sp, #36]	; 0x24
   26536:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26538:	b16b      	cbz	r3, 26556 <_dtoa_r+0x526>
   2653a:	f1b8 0f00 	cmp.w	r8, #0
   2653e:	dd0a      	ble.n	26556 <_dtoa_r+0x526>
   26540:	4543      	cmp	r3, r8
   26542:	9906      	ldr	r1, [sp, #24]
   26544:	461a      	mov	r2, r3
   26546:	bfa8      	it	ge
   26548:	4642      	movge	r2, r8
   2654a:	1a89      	subs	r1, r1, r2
   2654c:	1a9b      	subs	r3, r3, r2
   2654e:	9106      	str	r1, [sp, #24]
   26550:	9309      	str	r3, [sp, #36]	; 0x24
   26552:	eba8 0802 	sub.w	r8, r8, r2
   26556:	9b08      	ldr	r3, [sp, #32]
   26558:	b163      	cbz	r3, 26574 <_dtoa_r+0x544>
   2655a:	9b07      	ldr	r3, [sp, #28]
   2655c:	2b00      	cmp	r3, #0
   2655e:	f000 82a7 	beq.w	26ab0 <_dtoa_r+0xa80>
   26562:	f1ba 0f00 	cmp.w	sl, #0
   26566:	f300 8204 	bgt.w	26972 <_dtoa_r+0x942>
   2656a:	9b08      	ldr	r3, [sp, #32]
   2656c:	ebb3 020a 	subs.w	r2, r3, sl
   26570:	f040 82ff 	bne.w	26b72 <_dtoa_r+0xb42>
   26574:	2101      	movs	r1, #1
   26576:	4620      	mov	r0, r4
   26578:	f7fe fdde 	bl	25138 <__i2b>
   2657c:	2f00      	cmp	r7, #0
   2657e:	4682      	mov	sl, r0
   26580:	f300 80af 	bgt.w	266e2 <_dtoa_r+0x6b2>
   26584:	9b01      	ldr	r3, [sp, #4]
   26586:	2b01      	cmp	r3, #1
   26588:	f340 8187 	ble.w	2689a <_dtoa_r+0x86a>
   2658c:	2300      	movs	r3, #0
   2658e:	9308      	str	r3, [sp, #32]
   26590:	2001      	movs	r0, #1
   26592:	2f00      	cmp	r7, #0
   26594:	f040 80b1 	bne.w	266fa <_dtoa_r+0x6ca>
   26598:	4440      	add	r0, r8
   2659a:	f010 001f 	ands.w	r0, r0, #31
   2659e:	f000 817a 	beq.w	26896 <_dtoa_r+0x866>
   265a2:	f1c0 0220 	rsb	r2, r0, #32
   265a6:	2a04      	cmp	r2, #4
   265a8:	f300 8088 	bgt.w	266bc <_dtoa_r+0x68c>
   265ac:	f040 81f6 	bne.w	2699c <_dtoa_r+0x96c>
   265b0:	9b06      	ldr	r3, [sp, #24]
   265b2:	2b00      	cmp	r3, #0
   265b4:	dd05      	ble.n	265c2 <_dtoa_r+0x592>
   265b6:	4629      	mov	r1, r5
   265b8:	461a      	mov	r2, r3
   265ba:	4620      	mov	r0, r4
   265bc:	f7fe fef8 	bl	253b0 <__lshift>
   265c0:	4605      	mov	r5, r0
   265c2:	f1b8 0f00 	cmp.w	r8, #0
   265c6:	dd05      	ble.n	265d4 <_dtoa_r+0x5a4>
   265c8:	4651      	mov	r1, sl
   265ca:	4642      	mov	r2, r8
   265cc:	4620      	mov	r0, r4
   265ce:	f7fe feef 	bl	253b0 <__lshift>
   265d2:	4682      	mov	sl, r0
   265d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   265d6:	2b00      	cmp	r3, #0
   265d8:	f040 813f 	bne.w	2685a <_dtoa_r+0x82a>
   265dc:	f1b9 0f00 	cmp.w	r9, #0
   265e0:	f340 8125 	ble.w	2682e <_dtoa_r+0x7fe>
   265e4:	9b07      	ldr	r3, [sp, #28]
   265e6:	2b00      	cmp	r3, #0
   265e8:	f040 80a3 	bne.w	26732 <_dtoa_r+0x702>
   265ec:	9b04      	ldr	r3, [sp, #16]
   265ee:	3301      	adds	r3, #1
   265f0:	9304      	str	r3, [sp, #16]
   265f2:	f8dd 8000 	ldr.w	r8, [sp]
   265f6:	2701      	movs	r7, #1
   265f8:	e007      	b.n	2660a <_dtoa_r+0x5da>
   265fa:	4629      	mov	r1, r5
   265fc:	2300      	movs	r3, #0
   265fe:	220a      	movs	r2, #10
   26600:	4620      	mov	r0, r4
   26602:	f7fe fc9f 	bl	24f44 <__multadd>
   26606:	3701      	adds	r7, #1
   26608:	4605      	mov	r5, r0
   2660a:	4651      	mov	r1, sl
   2660c:	4628      	mov	r0, r5
   2660e:	f7ff fc7b 	bl	25f08 <quorem>
   26612:	45b9      	cmp	r9, r7
   26614:	f100 0030 	add.w	r0, r0, #48	; 0x30
   26618:	f808 0b01 	strb.w	r0, [r8], #1
   2661c:	dced      	bgt.n	265fa <_dtoa_r+0x5ca>
   2661e:	f1b9 0f00 	cmp.w	r9, #0
   26622:	9a00      	ldr	r2, [sp, #0]
   26624:	bfcc      	ite	gt
   26626:	46cb      	movgt	fp, r9
   26628:	f04f 0b01 	movle.w	fp, #1
   2662c:	4603      	mov	r3, r0
   2662e:	4493      	add	fp, r2
   26630:	2700      	movs	r7, #0
   26632:	4629      	mov	r1, r5
   26634:	2201      	movs	r2, #1
   26636:	4620      	mov	r0, r4
   26638:	9301      	str	r3, [sp, #4]
   2663a:	f7fe feb9 	bl	253b0 <__lshift>
   2663e:	4651      	mov	r1, sl
   26640:	4605      	mov	r5, r0
   26642:	f7fe ff2d 	bl	254a0 <__mcmp>
   26646:	2800      	cmp	r0, #0
   26648:	f340 81af 	ble.w	269aa <_dtoa_r+0x97a>
   2664c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   26650:	9a00      	ldr	r2, [sp, #0]
   26652:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   26656:	e004      	b.n	26662 <_dtoa_r+0x632>
   26658:	455a      	cmp	r2, fp
   2665a:	f000 81b1 	beq.w	269c0 <_dtoa_r+0x990>
   2665e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   26662:	2b39      	cmp	r3, #57	; 0x39
   26664:	f10b 0901 	add.w	r9, fp, #1
   26668:	d0f6      	beq.n	26658 <_dtoa_r+0x628>
   2666a:	3301      	adds	r3, #1
   2666c:	f88b 3000 	strb.w	r3, [fp]
   26670:	4651      	mov	r1, sl
   26672:	4620      	mov	r0, r4
   26674:	f7fe fc5c 	bl	24f30 <_Bfree>
   26678:	b156      	cbz	r6, 26690 <_dtoa_r+0x660>
   2667a:	b12f      	cbz	r7, 26688 <_dtoa_r+0x658>
   2667c:	42b7      	cmp	r7, r6
   2667e:	d003      	beq.n	26688 <_dtoa_r+0x658>
   26680:	4639      	mov	r1, r7
   26682:	4620      	mov	r0, r4
   26684:	f7fe fc54 	bl	24f30 <_Bfree>
   26688:	4631      	mov	r1, r6
   2668a:	4620      	mov	r0, r4
   2668c:	f7fe fc50 	bl	24f30 <_Bfree>
   26690:	4629      	mov	r1, r5
   26692:	4620      	mov	r0, r4
   26694:	f7fe fc4c 	bl	24f30 <_Bfree>
   26698:	2300      	movs	r3, #0
   2669a:	f889 3000 	strb.w	r3, [r9]
   2669e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   266a2:	601a      	str	r2, [r3, #0]
   266a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   266a6:	2b00      	cmp	r3, #0
   266a8:	f43f acfe 	beq.w	260a8 <_dtoa_r+0x78>
   266ac:	9800      	ldr	r0, [sp, #0]
   266ae:	f8c3 9000 	str.w	r9, [r3]
   266b2:	b00f      	add	sp, #60	; 0x3c
   266b4:	ecbd 8b02 	vpop	{d8}
   266b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266bc:	f1c0 001c 	rsb	r0, r0, #28
   266c0:	9b06      	ldr	r3, [sp, #24]
   266c2:	4403      	add	r3, r0
   266c4:	9306      	str	r3, [sp, #24]
   266c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   266c8:	4403      	add	r3, r0
   266ca:	9309      	str	r3, [sp, #36]	; 0x24
   266cc:	4480      	add	r8, r0
   266ce:	e76f      	b.n	265b0 <_dtoa_r+0x580>
   266d0:	f1c2 0220 	rsb	r2, r2, #32
   266d4:	fa06 f202 	lsl.w	r2, r6, r2
   266d8:	ee07 2a10 	vmov	s14, r2
   266dc:	e509      	b.n	260f2 <_dtoa_r+0xc2>
   266de:	2601      	movs	r6, #1
   266e0:	e563      	b.n	261aa <_dtoa_r+0x17a>
   266e2:	4601      	mov	r1, r0
   266e4:	463a      	mov	r2, r7
   266e6:	4620      	mov	r0, r4
   266e8:	f7fe fe02 	bl	252f0 <__pow5mult>
   266ec:	9b01      	ldr	r3, [sp, #4]
   266ee:	2b01      	cmp	r3, #1
   266f0:	4682      	mov	sl, r0
   266f2:	f340 81c5 	ble.w	26a80 <_dtoa_r+0xa50>
   266f6:	2300      	movs	r3, #0
   266f8:	9308      	str	r3, [sp, #32]
   266fa:	f8da 2010 	ldr.w	r2, [sl, #16]
   266fe:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   26702:	6910      	ldr	r0, [r2, #16]
   26704:	f7fe fcc8 	bl	25098 <__hi0bits>
   26708:	f1c0 0020 	rsb	r0, r0, #32
   2670c:	e744      	b.n	26598 <_dtoa_r+0x568>
   2670e:	bf00      	nop
   26710:	200018c8 	.word	0x200018c8
   26714:	20004f58 	.word	0x20004f58
   26718:	4631      	mov	r1, r6
   2671a:	2300      	movs	r3, #0
   2671c:	220a      	movs	r2, #10
   2671e:	4620      	mov	r0, r4
   26720:	f7fe fc10 	bl	24f44 <__multadd>
   26724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26726:	2b00      	cmp	r3, #0
   26728:	4606      	mov	r6, r0
   2672a:	f340 82ce 	ble.w	26cca <_dtoa_r+0xc9a>
   2672e:	9704      	str	r7, [sp, #16]
   26730:	4699      	mov	r9, r3
   26732:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26734:	2b00      	cmp	r3, #0
   26736:	dd05      	ble.n	26744 <_dtoa_r+0x714>
   26738:	4631      	mov	r1, r6
   2673a:	461a      	mov	r2, r3
   2673c:	4620      	mov	r0, r4
   2673e:	f7fe fe37 	bl	253b0 <__lshift>
   26742:	4606      	mov	r6, r0
   26744:	9b08      	ldr	r3, [sp, #32]
   26746:	2b00      	cmp	r3, #0
   26748:	f040 81eb 	bne.w	26b22 <_dtoa_r+0xaf2>
   2674c:	46b0      	mov	r8, r6
   2674e:	9b02      	ldr	r3, [sp, #8]
   26750:	9f00      	ldr	r7, [sp, #0]
   26752:	f003 0201 	and.w	r2, r3, #1
   26756:	1e7b      	subs	r3, r7, #1
   26758:	444b      	add	r3, r9
   2675a:	9308      	str	r3, [sp, #32]
   2675c:	9b01      	ldr	r3, [sp, #4]
   2675e:	920a      	str	r2, [sp, #40]	; 0x28
   26760:	4313      	orrs	r3, r2
   26762:	9309      	str	r3, [sp, #36]	; 0x24
   26764:	4651      	mov	r1, sl
   26766:	4628      	mov	r0, r5
   26768:	f7ff fbce 	bl	25f08 <quorem>
   2676c:	4631      	mov	r1, r6
   2676e:	4683      	mov	fp, r0
   26770:	4628      	mov	r0, r5
   26772:	f7fe fe95 	bl	254a0 <__mcmp>
   26776:	4642      	mov	r2, r8
   26778:	4651      	mov	r1, sl
   2677a:	4681      	mov	r9, r0
   2677c:	4620      	mov	r0, r4
   2677e:	f7fe feb1 	bl	254e4 <__mdiff>
   26782:	68c2      	ldr	r2, [r0, #12]
   26784:	4601      	mov	r1, r0
   26786:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   2678a:	2a00      	cmp	r2, #0
   2678c:	d142      	bne.n	26814 <_dtoa_r+0x7e4>
   2678e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   26792:	4628      	mov	r0, r5
   26794:	f7fe fe84 	bl	254a0 <__mcmp>
   26798:	9906      	ldr	r1, [sp, #24]
   2679a:	9002      	str	r0, [sp, #8]
   2679c:	4620      	mov	r0, r4
   2679e:	f7fe fbc7 	bl	24f30 <_Bfree>
   267a2:	9a02      	ldr	r2, [sp, #8]
   267a4:	9b07      	ldr	r3, [sp, #28]
   267a6:	b91a      	cbnz	r2, 267b0 <_dtoa_r+0x780>
   267a8:	9909      	ldr	r1, [sp, #36]	; 0x24
   267aa:	2900      	cmp	r1, #0
   267ac:	f000 827e 	beq.w	26cac <_dtoa_r+0xc7c>
   267b0:	f1b9 0f00 	cmp.w	r9, #0
   267b4:	f2c0 8183 	blt.w	26abe <_dtoa_r+0xa8e>
   267b8:	9901      	ldr	r1, [sp, #4]
   267ba:	ea49 0901 	orr.w	r9, r9, r1
   267be:	990a      	ldr	r1, [sp, #40]	; 0x28
   267c0:	ea51 0909 	orrs.w	r9, r1, r9
   267c4:	f000 817b 	beq.w	26abe <_dtoa_r+0xa8e>
   267c8:	2a00      	cmp	r2, #0
   267ca:	f300 81c6 	bgt.w	26b5a <_dtoa_r+0xb2a>
   267ce:	9a08      	ldr	r2, [sp, #32]
   267d0:	703b      	strb	r3, [r7, #0]
   267d2:	f107 0901 	add.w	r9, r7, #1
   267d6:	4297      	cmp	r7, r2
   267d8:	46cb      	mov	fp, r9
   267da:	f000 81c4 	beq.w	26b66 <_dtoa_r+0xb36>
   267de:	4629      	mov	r1, r5
   267e0:	2300      	movs	r3, #0
   267e2:	220a      	movs	r2, #10
   267e4:	4620      	mov	r0, r4
   267e6:	f7fe fbad 	bl	24f44 <__multadd>
   267ea:	4546      	cmp	r6, r8
   267ec:	4605      	mov	r5, r0
   267ee:	4631      	mov	r1, r6
   267f0:	f04f 0300 	mov.w	r3, #0
   267f4:	f04f 020a 	mov.w	r2, #10
   267f8:	4620      	mov	r0, r4
   267fa:	d012      	beq.n	26822 <_dtoa_r+0x7f2>
   267fc:	f7fe fba2 	bl	24f44 <__multadd>
   26800:	4641      	mov	r1, r8
   26802:	4606      	mov	r6, r0
   26804:	2300      	movs	r3, #0
   26806:	220a      	movs	r2, #10
   26808:	4620      	mov	r0, r4
   2680a:	f7fe fb9b 	bl	24f44 <__multadd>
   2680e:	464f      	mov	r7, r9
   26810:	4680      	mov	r8, r0
   26812:	e7a7      	b.n	26764 <_dtoa_r+0x734>
   26814:	4620      	mov	r0, r4
   26816:	9302      	str	r3, [sp, #8]
   26818:	f7fe fb8a 	bl	24f30 <_Bfree>
   2681c:	9b02      	ldr	r3, [sp, #8]
   2681e:	2201      	movs	r2, #1
   26820:	e7c6      	b.n	267b0 <_dtoa_r+0x780>
   26822:	f7fe fb8f 	bl	24f44 <__multadd>
   26826:	464f      	mov	r7, r9
   26828:	4606      	mov	r6, r0
   2682a:	4680      	mov	r8, r0
   2682c:	e79a      	b.n	26764 <_dtoa_r+0x734>
   2682e:	9b01      	ldr	r3, [sp, #4]
   26830:	2b02      	cmp	r3, #2
   26832:	dc71      	bgt.n	26918 <_dtoa_r+0x8e8>
   26834:	9b07      	ldr	r3, [sp, #28]
   26836:	2b00      	cmp	r3, #0
   26838:	f47f af7b 	bne.w	26732 <_dtoa_r+0x702>
   2683c:	9b04      	ldr	r3, [sp, #16]
   2683e:	4651      	mov	r1, sl
   26840:	3301      	adds	r3, #1
   26842:	4628      	mov	r0, r5
   26844:	9304      	str	r3, [sp, #16]
   26846:	f7ff fb5f 	bl	25f08 <quorem>
   2684a:	f8dd b000 	ldr.w	fp, [sp]
   2684e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   26852:	f80b 3b01 	strb.w	r3, [fp], #1
   26856:	2700      	movs	r7, #0
   26858:	e6eb      	b.n	26632 <_dtoa_r+0x602>
   2685a:	4651      	mov	r1, sl
   2685c:	4628      	mov	r0, r5
   2685e:	f7fe fe1f 	bl	254a0 <__mcmp>
   26862:	2800      	cmp	r0, #0
   26864:	f6bf aeba 	bge.w	265dc <_dtoa_r+0x5ac>
   26868:	4629      	mov	r1, r5
   2686a:	2300      	movs	r3, #0
   2686c:	220a      	movs	r2, #10
   2686e:	4620      	mov	r0, r4
   26870:	f7fe fb68 	bl	24f44 <__multadd>
   26874:	9b04      	ldr	r3, [sp, #16]
   26876:	1e5f      	subs	r7, r3, #1
   26878:	9b07      	ldr	r3, [sp, #28]
   2687a:	4605      	mov	r5, r0
   2687c:	2b00      	cmp	r3, #0
   2687e:	f47f af4b 	bne.w	26718 <_dtoa_r+0x6e8>
   26882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26884:	2b00      	cmp	r3, #0
   26886:	f340 8218 	ble.w	26cba <_dtoa_r+0xc8a>
   2688a:	4699      	mov	r9, r3
   2688c:	e6b1      	b.n	265f2 <_dtoa_r+0x5c2>
   2688e:	4bbc      	ldr	r3, [pc, #752]	; (26b80 <_dtoa_r+0xb50>)
   26890:	9300      	str	r3, [sp, #0]
   26892:	3303      	adds	r3, #3
   26894:	e4a4      	b.n	261e0 <_dtoa_r+0x1b0>
   26896:	201c      	movs	r0, #28
   26898:	e712      	b.n	266c0 <_dtoa_r+0x690>
   2689a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2689e:	2800      	cmp	r0, #0
   268a0:	f47f ae74 	bne.w	2658c <_dtoa_r+0x55c>
   268a4:	f3c1 0213 	ubfx	r2, r1, #0, #20
   268a8:	2a00      	cmp	r2, #0
   268aa:	f000 80f4 	beq.w	26a96 <_dtoa_r+0xa66>
   268ae:	9b02      	ldr	r3, [sp, #8]
   268b0:	9308      	str	r3, [sp, #32]
   268b2:	e66d      	b.n	26590 <_dtoa_r+0x560>
   268b4:	2301      	movs	r3, #1
   268b6:	9307      	str	r3, [sp, #28]
   268b8:	9b04      	ldr	r3, [sp, #16]
   268ba:	445b      	add	r3, fp
   268bc:	f103 0901 	add.w	r9, r3, #1
   268c0:	f1b9 0f01 	cmp.w	r9, #1
   268c4:	46cc      	mov	ip, r9
   268c6:	930b      	str	r3, [sp, #44]	; 0x2c
   268c8:	bfb8      	it	lt
   268ca:	f04f 0c01 	movlt.w	ip, #1
   268ce:	2100      	movs	r1, #0
   268d0:	f1bc 0f17 	cmp.w	ip, #23
   268d4:	63e1      	str	r1, [r4, #60]	; 0x3c
   268d6:	f77f acbc 	ble.w	26252 <_dtoa_r+0x222>
   268da:	2001      	movs	r0, #1
   268dc:	2204      	movs	r2, #4
   268de:	0052      	lsls	r2, r2, #1
   268e0:	f102 0314 	add.w	r3, r2, #20
   268e4:	4563      	cmp	r3, ip
   268e6:	4601      	mov	r1, r0
   268e8:	f100 0001 	add.w	r0, r0, #1
   268ec:	d9f7      	bls.n	268de <_dtoa_r+0x8ae>
   268ee:	63e1      	str	r1, [r4, #60]	; 0x3c
   268f0:	e4af      	b.n	26252 <_dtoa_r+0x222>
   268f2:	2301      	movs	r3, #1
   268f4:	9307      	str	r3, [sp, #28]
   268f6:	f1bb 0f00 	cmp.w	fp, #0
   268fa:	dd52      	ble.n	269a2 <_dtoa_r+0x972>
   268fc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   26900:	46d9      	mov	r9, fp
   26902:	46dc      	mov	ip, fp
   26904:	e7e3      	b.n	268ce <_dtoa_r+0x89e>
   26906:	2300      	movs	r3, #0
   26908:	9307      	str	r3, [sp, #28]
   2690a:	e7d5      	b.n	268b8 <_dtoa_r+0x888>
   2690c:	2300      	movs	r3, #0
   2690e:	9307      	str	r3, [sp, #28]
   26910:	e7f1      	b.n	268f6 <_dtoa_r+0x8c6>
   26912:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   26916:	9704      	str	r7, [sp, #16]
   26918:	f1b9 0f00 	cmp.w	r9, #0
   2691c:	f47f ada1 	bne.w	26462 <_dtoa_r+0x432>
   26920:	4651      	mov	r1, sl
   26922:	464b      	mov	r3, r9
   26924:	2205      	movs	r2, #5
   26926:	4620      	mov	r0, r4
   26928:	f7fe fb0c 	bl	24f44 <__multadd>
   2692c:	4601      	mov	r1, r0
   2692e:	4682      	mov	sl, r0
   26930:	4628      	mov	r0, r5
   26932:	f7fe fdb5 	bl	254a0 <__mcmp>
   26936:	2800      	cmp	r0, #0
   26938:	f77f ad93 	ble.w	26462 <_dtoa_r+0x432>
   2693c:	9b04      	ldr	r3, [sp, #16]
   2693e:	f103 0b01 	add.w	fp, r3, #1
   26942:	9b00      	ldr	r3, [sp, #0]
   26944:	2231      	movs	r2, #49	; 0x31
   26946:	4698      	mov	r8, r3
   26948:	f803 2b01 	strb.w	r2, [r3], #1
   2694c:	9300      	str	r3, [sp, #0]
   2694e:	4651      	mov	r1, sl
   26950:	4620      	mov	r0, r4
   26952:	f7fe faed 	bl	24f30 <_Bfree>
   26956:	f10b 0301 	add.w	r3, fp, #1
   2695a:	f8dd 9000 	ldr.w	r9, [sp]
   2695e:	9304      	str	r3, [sp, #16]
   26960:	f8cd 8000 	str.w	r8, [sp]
   26964:	2e00      	cmp	r6, #0
   26966:	f47f ae8f 	bne.w	26688 <_dtoa_r+0x658>
   2696a:	e691      	b.n	26690 <_dtoa_r+0x660>
   2696c:	eba3 0a0a 	sub.w	sl, r3, sl
   26970:	e5c5      	b.n	264fe <_dtoa_r+0x4ce>
   26972:	4631      	mov	r1, r6
   26974:	4652      	mov	r2, sl
   26976:	4620      	mov	r0, r4
   26978:	f7fe fcba 	bl	252f0 <__pow5mult>
   2697c:	462a      	mov	r2, r5
   2697e:	4601      	mov	r1, r0
   26980:	4606      	mov	r6, r0
   26982:	4620      	mov	r0, r4
   26984:	f7fe fc06 	bl	25194 <__multiply>
   26988:	4629      	mov	r1, r5
   2698a:	4605      	mov	r5, r0
   2698c:	4620      	mov	r0, r4
   2698e:	f7fe facf 	bl	24f30 <_Bfree>
   26992:	e5ea      	b.n	2656a <_dtoa_r+0x53a>
   26994:	2002      	movs	r0, #2
   26996:	eeb0 5b48 	vmov.f64	d5, d8
   2699a:	e481      	b.n	262a0 <_dtoa_r+0x270>
   2699c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   269a0:	e68e      	b.n	266c0 <_dtoa_r+0x690>
   269a2:	f04f 0b01 	mov.w	fp, #1
   269a6:	46d9      	mov	r9, fp
   269a8:	e44f      	b.n	2624a <_dtoa_r+0x21a>
   269aa:	d103      	bne.n	269b4 <_dtoa_r+0x984>
   269ac:	9b01      	ldr	r3, [sp, #4]
   269ae:	07db      	lsls	r3, r3, #31
   269b0:	f53f ae4c 	bmi.w	2664c <_dtoa_r+0x61c>
   269b4:	46d9      	mov	r9, fp
   269b6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   269ba:	2b30      	cmp	r3, #48	; 0x30
   269bc:	d0fa      	beq.n	269b4 <_dtoa_r+0x984>
   269be:	e657      	b.n	26670 <_dtoa_r+0x640>
   269c0:	9b04      	ldr	r3, [sp, #16]
   269c2:	9a00      	ldr	r2, [sp, #0]
   269c4:	3301      	adds	r3, #1
   269c6:	9304      	str	r3, [sp, #16]
   269c8:	2331      	movs	r3, #49	; 0x31
   269ca:	7013      	strb	r3, [r2, #0]
   269cc:	e650      	b.n	26670 <_dtoa_r+0x640>
   269ce:	f1ba 0f00 	cmp.w	sl, #0
   269d2:	f000 8123 	beq.w	26c1c <_dtoa_r+0xbec>
   269d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   269da:	9b06      	ldr	r3, [sp, #24]
   269dc:	9309      	str	r3, [sp, #36]	; 0x24
   269de:	4413      	add	r3, r2
   269e0:	f8dd a020 	ldr.w	sl, [sp, #32]
   269e4:	9306      	str	r3, [sp, #24]
   269e6:	4490      	add	r8, r2
   269e8:	e592      	b.n	26510 <_dtoa_r+0x4e0>
   269ea:	ee07 0a90 	vmov	s15, r0
   269ee:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   269f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   269f6:	eea6 5b07 	vfma.f64	d5, d6, d7
   269fa:	ee15 2a90 	vmov	r2, s11
   269fe:	ec51 0b15 	vmov	r0, r1, d5
   26a02:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   26a06:	ec41 0b15 	vmov	d5, r0, r1
   26a0a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   26a0e:	ee36 7b47 	vsub.f64	d7, d6, d7
   26a12:	eeb4 7bc5 	vcmpe.f64	d7, d5
   26a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26a1a:	f300 8137 	bgt.w	26c8c <_dtoa_r+0xc5c>
   26a1e:	eeb1 5b45 	vneg.f64	d5, d5
   26a22:	eeb4 7bc5 	vcmpe.f64	d7, d5
   26a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26a2a:	f57f acfb 	bpl.w	26424 <_dtoa_r+0x3f4>
   26a2e:	f04f 0a00 	mov.w	sl, #0
   26a32:	4656      	mov	r6, sl
   26a34:	e515      	b.n	26462 <_dtoa_r+0x432>
   26a36:	f000 80f5 	beq.w	26c24 <_dtoa_r+0xbf4>
   26a3a:	9b04      	ldr	r3, [sp, #16]
   26a3c:	4951      	ldr	r1, [pc, #324]	; (26b84 <_dtoa_r+0xb54>)
   26a3e:	425a      	negs	r2, r3
   26a40:	f002 000f 	and.w	r0, r2, #15
   26a44:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   26a48:	ed91 6b00 	vldr	d6, [r1]
   26a4c:	1112      	asrs	r2, r2, #4
   26a4e:	ee28 6b06 	vmul.f64	d6, d8, d6
   26a52:	f000 8142 	beq.w	26cda <_dtoa_r+0xcaa>
   26a56:	eeb0 7b46 	vmov.f64	d7, d6
   26a5a:	494b      	ldr	r1, [pc, #300]	; (26b88 <_dtoa_r+0xb58>)
   26a5c:	2600      	movs	r6, #0
   26a5e:	2002      	movs	r0, #2
   26a60:	07d3      	lsls	r3, r2, #31
   26a62:	d505      	bpl.n	26a70 <_dtoa_r+0xa40>
   26a64:	ed91 5b00 	vldr	d5, [r1]
   26a68:	3001      	adds	r0, #1
   26a6a:	2601      	movs	r6, #1
   26a6c:	ee27 7b05 	vmul.f64	d7, d7, d5
   26a70:	1052      	asrs	r2, r2, #1
   26a72:	f101 0108 	add.w	r1, r1, #8
   26a76:	d1f3      	bne.n	26a60 <_dtoa_r+0xa30>
   26a78:	2e00      	cmp	r6, #0
   26a7a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   26a7e:	e41e      	b.n	262be <_dtoa_r+0x28e>
   26a80:	9b02      	ldr	r3, [sp, #8]
   26a82:	2b00      	cmp	r3, #0
   26a84:	f47f ae37 	bne.w	266f6 <_dtoa_r+0x6c6>
   26a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   26a8c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   26a90:	2a00      	cmp	r2, #0
   26a92:	f040 8137 	bne.w	26d04 <_dtoa_r+0xcd4>
   26a96:	4a3d      	ldr	r2, [pc, #244]	; (26b8c <_dtoa_r+0xb5c>)
   26a98:	400a      	ands	r2, r1
   26a9a:	2a00      	cmp	r2, #0
   26a9c:	f000 80fa 	beq.w	26c94 <_dtoa_r+0xc64>
   26aa0:	9b06      	ldr	r3, [sp, #24]
   26aa2:	3301      	adds	r3, #1
   26aa4:	9306      	str	r3, [sp, #24]
   26aa6:	2301      	movs	r3, #1
   26aa8:	f108 0801 	add.w	r8, r8, #1
   26aac:	9308      	str	r3, [sp, #32]
   26aae:	e56f      	b.n	26590 <_dtoa_r+0x560>
   26ab0:	4629      	mov	r1, r5
   26ab2:	9a08      	ldr	r2, [sp, #32]
   26ab4:	4620      	mov	r0, r4
   26ab6:	f7fe fc1b 	bl	252f0 <__pow5mult>
   26aba:	4605      	mov	r5, r0
   26abc:	e55a      	b.n	26574 <_dtoa_r+0x544>
   26abe:	2a00      	cmp	r2, #0
   26ac0:	dd12      	ble.n	26ae8 <_dtoa_r+0xab8>
   26ac2:	4629      	mov	r1, r5
   26ac4:	2201      	movs	r2, #1
   26ac6:	4620      	mov	r0, r4
   26ac8:	9301      	str	r3, [sp, #4]
   26aca:	f7fe fc71 	bl	253b0 <__lshift>
   26ace:	4651      	mov	r1, sl
   26ad0:	4605      	mov	r5, r0
   26ad2:	f7fe fce5 	bl	254a0 <__mcmp>
   26ad6:	2800      	cmp	r0, #0
   26ad8:	9b01      	ldr	r3, [sp, #4]
   26ada:	f340 80e1 	ble.w	26ca0 <_dtoa_r+0xc70>
   26ade:	2b39      	cmp	r3, #57	; 0x39
   26ae0:	f000 80ca 	beq.w	26c78 <_dtoa_r+0xc48>
   26ae4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   26ae8:	46b9      	mov	r9, r7
   26aea:	f809 3b01 	strb.w	r3, [r9], #1
   26aee:	9b04      	ldr	r3, [sp, #16]
   26af0:	3301      	adds	r3, #1
   26af2:	4637      	mov	r7, r6
   26af4:	9304      	str	r3, [sp, #16]
   26af6:	4646      	mov	r6, r8
   26af8:	e5ba      	b.n	26670 <_dtoa_r+0x640>
   26afa:	ee38 8b08 	vadd.f64	d8, d8, d8
   26afe:	eeb4 8bc6 	vcmpe.f64	d8, d6
   26b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26b06:	dc0a      	bgt.n	26b1e <_dtoa_r+0xaee>
   26b08:	eeb4 8b46 	vcmp.f64	d8, d6
   26b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26b10:	f47f acdc 	bne.w	264cc <_dtoa_r+0x49c>
   26b14:	ee17 3a10 	vmov	r3, s14
   26b18:	07d8      	lsls	r0, r3, #31
   26b1a:	f57f acd7 	bpl.w	264cc <_dtoa_r+0x49c>
   26b1e:	9a00      	ldr	r2, [sp, #0]
   26b20:	e454      	b.n	263cc <_dtoa_r+0x39c>
   26b22:	6871      	ldr	r1, [r6, #4]
   26b24:	4620      	mov	r0, r4
   26b26:	f7fe f9dd 	bl	24ee4 <_Balloc>
   26b2a:	4607      	mov	r7, r0
   26b2c:	2800      	cmp	r0, #0
   26b2e:	f000 80de 	beq.w	26cee <_dtoa_r+0xcbe>
   26b32:	6933      	ldr	r3, [r6, #16]
   26b34:	3302      	adds	r3, #2
   26b36:	009a      	lsls	r2, r3, #2
   26b38:	f106 010c 	add.w	r1, r6, #12
   26b3c:	300c      	adds	r0, #12
   26b3e:	f7f5 f873 	bl	1bc28 <memcpy>
   26b42:	4639      	mov	r1, r7
   26b44:	2201      	movs	r2, #1
   26b46:	4620      	mov	r0, r4
   26b48:	f7fe fc32 	bl	253b0 <__lshift>
   26b4c:	4680      	mov	r8, r0
   26b4e:	e5fe      	b.n	2674e <_dtoa_r+0x71e>
   26b50:	9b06      	ldr	r3, [sp, #24]
   26b52:	eba3 0309 	sub.w	r3, r3, r9
   26b56:	9309      	str	r3, [sp, #36]	; 0x24
   26b58:	e4da      	b.n	26510 <_dtoa_r+0x4e0>
   26b5a:	2b39      	cmp	r3, #57	; 0x39
   26b5c:	f000 808c 	beq.w	26c78 <_dtoa_r+0xc48>
   26b60:	46b9      	mov	r9, r7
   26b62:	3301      	adds	r3, #1
   26b64:	e7c1      	b.n	26aea <_dtoa_r+0xaba>
   26b66:	9a04      	ldr	r2, [sp, #16]
   26b68:	3201      	adds	r2, #1
   26b6a:	4637      	mov	r7, r6
   26b6c:	9204      	str	r2, [sp, #16]
   26b6e:	4646      	mov	r6, r8
   26b70:	e55f      	b.n	26632 <_dtoa_r+0x602>
   26b72:	4629      	mov	r1, r5
   26b74:	4620      	mov	r0, r4
   26b76:	f7fe fbbb 	bl	252f0 <__pow5mult>
   26b7a:	4605      	mov	r5, r0
   26b7c:	e4fa      	b.n	26574 <_dtoa_r+0x544>
   26b7e:	bf00      	nop
   26b80:	20004318 	.word	0x20004318
   26b84:	200018c8 	.word	0x200018c8
   26b88:	200018a0 	.word	0x200018a0
   26b8c:	7ff00000 	.word	0x7ff00000
   26b90:	4b5e      	ldr	r3, [pc, #376]	; (26d0c <_dtoa_r+0xcdc>)
   26b92:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   26b96:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   26b9a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   26b9e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   26ba2:	ee36 7b47 	vsub.f64	d7, d6, d7
   26ba6:	ec41 0b16 	vmov	d6, r0, r1
   26baa:	ee15 1a90 	vmov	r1, s11
   26bae:	ee23 3b06 	vmul.f64	d3, d3, d6
   26bb2:	9800      	ldr	r0, [sp, #0]
   26bb4:	3130      	adds	r1, #48	; 0x30
   26bb6:	2a01      	cmp	r2, #1
   26bb8:	f800 1b01 	strb.w	r1, [r0], #1
   26bbc:	f000 8083 	beq.w	26cc6 <_dtoa_r+0xc96>
   26bc0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   26bc4:	9b00      	ldr	r3, [sp, #0]
   26bc6:	1899      	adds	r1, r3, r2
   26bc8:	ee27 7b04 	vmul.f64	d7, d7, d4
   26bcc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   26bd0:	ee16 3a90 	vmov	r3, s13
   26bd4:	3330      	adds	r3, #48	; 0x30
   26bd6:	f800 3b01 	strb.w	r3, [r0], #1
   26bda:	4281      	cmp	r1, r0
   26bdc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   26be0:	ee37 7b45 	vsub.f64	d7, d7, d5
   26be4:	d1f0      	bne.n	26bc8 <_dtoa_r+0xb98>
   26be6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   26bea:	ee33 5b06 	vadd.f64	d5, d3, d6
   26bee:	eeb4 5bc7 	vcmpe.f64	d5, d7
   26bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26bf6:	f53f abe3 	bmi.w	263c0 <_dtoa_r+0x390>
   26bfa:	ee36 6b43 	vsub.f64	d6, d6, d3
   26bfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
   26c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26c06:	f77f ac0d 	ble.w	26424 <_dtoa_r+0x3f4>
   26c0a:	4689      	mov	r9, r1
   26c0c:	3901      	subs	r1, #1
   26c0e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   26c12:	2b30      	cmp	r3, #48	; 0x30
   26c14:	d0f9      	beq.n	26c0a <_dtoa_r+0xbda>
   26c16:	1c73      	adds	r3, r6, #1
   26c18:	9304      	str	r3, [sp, #16]
   26c1a:	e539      	b.n	26690 <_dtoa_r+0x660>
   26c1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   26c1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   26c22:	e6da      	b.n	269da <_dtoa_r+0x9aa>
   26c24:	2002      	movs	r0, #2
   26c26:	eeb0 6b48 	vmov.f64	d6, d8
   26c2a:	f7ff bb48 	b.w	262be <_dtoa_r+0x28e>
   26c2e:	f1b9 0f00 	cmp.w	r9, #0
   26c32:	f43f aeda 	beq.w	269ea <_dtoa_r+0x9ba>
   26c36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   26c38:	2a00      	cmp	r2, #0
   26c3a:	f77f abf3 	ble.w	26424 <_dtoa_r+0x3f4>
   26c3e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   26c42:	ee26 6b04 	vmul.f64	d6, d6, d4
   26c46:	3001      	adds	r0, #1
   26c48:	ee07 0a90 	vmov	s15, r0
   26c4c:	9b04      	ldr	r3, [sp, #16]
   26c4e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   26c52:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   26c56:	eea6 7b05 	vfma.f64	d7, d6, d5
   26c5a:	ee17 ca90 	vmov	ip, s15
   26c5e:	ec51 0b17 	vmov	r0, r1, d7
   26c62:	1e5e      	subs	r6, r3, #1
   26c64:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   26c68:	f7ff bb47 	b.w	262fa <_dtoa_r+0x2ca>
   26c6c:	9b04      	ldr	r3, [sp, #16]
   26c6e:	3301      	adds	r3, #1
   26c70:	9304      	str	r3, [sp, #16]
   26c72:	2331      	movs	r3, #49	; 0x31
   26c74:	f7ff bbb1 	b.w	263da <_dtoa_r+0x3aa>
   26c78:	9b04      	ldr	r3, [sp, #16]
   26c7a:	46bb      	mov	fp, r7
   26c7c:	3301      	adds	r3, #1
   26c7e:	9304      	str	r3, [sp, #16]
   26c80:	2339      	movs	r3, #57	; 0x39
   26c82:	4637      	mov	r7, r6
   26c84:	f80b 3b01 	strb.w	r3, [fp], #1
   26c88:	4646      	mov	r6, r8
   26c8a:	e4e1      	b.n	26650 <_dtoa_r+0x620>
   26c8c:	f04f 0a00 	mov.w	sl, #0
   26c90:	4656      	mov	r6, sl
   26c92:	e653      	b.n	2693c <_dtoa_r+0x90c>
   26c94:	9208      	str	r2, [sp, #32]
   26c96:	e47b      	b.n	26590 <_dtoa_r+0x560>
   26c98:	1c73      	adds	r3, r6, #1
   26c9a:	9304      	str	r3, [sp, #16]
   26c9c:	4689      	mov	r9, r1
   26c9e:	e4f7      	b.n	26690 <_dtoa_r+0x660>
   26ca0:	f47f af22 	bne.w	26ae8 <_dtoa_r+0xab8>
   26ca4:	07da      	lsls	r2, r3, #31
   26ca6:	f57f af1f 	bpl.w	26ae8 <_dtoa_r+0xab8>
   26caa:	e718      	b.n	26ade <_dtoa_r+0xaae>
   26cac:	2b39      	cmp	r3, #57	; 0x39
   26cae:	d0e3      	beq.n	26c78 <_dtoa_r+0xc48>
   26cb0:	f1b9 0f00 	cmp.w	r9, #0
   26cb4:	f73f af16 	bgt.w	26ae4 <_dtoa_r+0xab4>
   26cb8:	e716      	b.n	26ae8 <_dtoa_r+0xab8>
   26cba:	9b01      	ldr	r3, [sp, #4]
   26cbc:	2b02      	cmp	r3, #2
   26cbe:	f73f ae28 	bgt.w	26912 <_dtoa_r+0x8e2>
   26cc2:	9704      	str	r7, [sp, #16]
   26cc4:	e5ba      	b.n	2683c <_dtoa_r+0x80c>
   26cc6:	4601      	mov	r1, r0
   26cc8:	e78d      	b.n	26be6 <_dtoa_r+0xbb6>
   26cca:	9b01      	ldr	r3, [sp, #4]
   26ccc:	2b02      	cmp	r3, #2
   26cce:	f73f ae20 	bgt.w	26912 <_dtoa_r+0x8e2>
   26cd2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   26cd6:	9704      	str	r7, [sp, #16]
   26cd8:	e52b      	b.n	26732 <_dtoa_r+0x702>
   26cda:	2002      	movs	r0, #2
   26cdc:	f7ff baef 	b.w	262be <_dtoa_r+0x28e>
   26ce0:	4b0b      	ldr	r3, [pc, #44]	; (26d10 <_dtoa_r+0xce0>)
   26ce2:	480c      	ldr	r0, [pc, #48]	; (26d14 <_dtoa_r+0xce4>)
   26ce4:	2200      	movs	r2, #0
   26ce6:	f240 11af 	movw	r1, #431	; 0x1af
   26cea:	f7ff f8b1 	bl	25e50 <__assert_func>
   26cee:	4b08      	ldr	r3, [pc, #32]	; (26d10 <_dtoa_r+0xce0>)
   26cf0:	4808      	ldr	r0, [pc, #32]	; (26d14 <_dtoa_r+0xce4>)
   26cf2:	463a      	mov	r2, r7
   26cf4:	f240 21ef 	movw	r1, #751	; 0x2ef
   26cf8:	f7ff f8aa 	bl	25e50 <__assert_func>
   26cfc:	4b06      	ldr	r3, [pc, #24]	; (26d18 <_dtoa_r+0xce8>)
   26cfe:	9300      	str	r3, [sp, #0]
   26d00:	f7ff b9d2 	b.w	260a8 <_dtoa_r+0x78>
   26d04:	9b02      	ldr	r3, [sp, #8]
   26d06:	9308      	str	r3, [sp, #32]
   26d08:	e4f7      	b.n	266fa <_dtoa_r+0x6ca>
   26d0a:	bf00      	nop
   26d0c:	200018c8 	.word	0x200018c8
   26d10:	20003ffc 	.word	0x20003ffc
   26d14:	2000431c 	.word	0x2000431c
   26d18:	2000430c 	.word	0x2000430c

00026d1c <fiprintf>:
   26d1c:	b40e      	push	{r1, r2, r3}
   26d1e:	b510      	push	{r4, lr}
   26d20:	b083      	sub	sp, #12
   26d22:	ab05      	add	r3, sp, #20
   26d24:	4c06      	ldr	r4, [pc, #24]	; (26d40 <fiprintf+0x24>)
   26d26:	f853 2b04 	ldr.w	r2, [r3], #4
   26d2a:	9301      	str	r3, [sp, #4]
   26d2c:	4601      	mov	r1, r0
   26d2e:	6820      	ldr	r0, [r4, #0]
   26d30:	f000 f8c4 	bl	26ebc <_vfiprintf_r>
   26d34:	b003      	add	sp, #12
   26d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26d3a:	b003      	add	sp, #12
   26d3c:	4770      	bx	lr
   26d3e:	bf00      	nop
   26d40:	200099ec 	.word	0x200099ec

00026d44 <__ssprint_r>:
   26d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d48:	6893      	ldr	r3, [r2, #8]
   26d4a:	6817      	ldr	r7, [r2, #0]
   26d4c:	b083      	sub	sp, #12
   26d4e:	4692      	mov	sl, r2
   26d50:	2b00      	cmp	r3, #0
   26d52:	d070      	beq.n	26e36 <__ssprint_r+0xf2>
   26d54:	4681      	mov	r9, r0
   26d56:	688a      	ldr	r2, [r1, #8]
   26d58:	6808      	ldr	r0, [r1, #0]
   26d5a:	460c      	mov	r4, r1
   26d5c:	3708      	adds	r7, #8
   26d5e:	e043      	b.n	26de8 <__ssprint_r+0xa4>
   26d60:	89a3      	ldrh	r3, [r4, #12]
   26d62:	f413 6f90 	tst.w	r3, #1152	; 0x480
   26d66:	d02e      	beq.n	26dc6 <__ssprint_r+0x82>
   26d68:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   26d6c:	eba0 0801 	sub.w	r8, r0, r1
   26d70:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   26d74:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   26d78:	f108 0001 	add.w	r0, r8, #1
   26d7c:	1076      	asrs	r6, r6, #1
   26d7e:	4428      	add	r0, r5
   26d80:	42b0      	cmp	r0, r6
   26d82:	4632      	mov	r2, r6
   26d84:	bf84      	itt	hi
   26d86:	4606      	movhi	r6, r0
   26d88:	4632      	movhi	r2, r6
   26d8a:	055b      	lsls	r3, r3, #21
   26d8c:	d537      	bpl.n	26dfe <__ssprint_r+0xba>
   26d8e:	4611      	mov	r1, r2
   26d90:	4648      	mov	r0, r9
   26d92:	f7f9 fbb3 	bl	204fc <_malloc_r>
   26d96:	9001      	str	r0, [sp, #4]
   26d98:	2800      	cmp	r0, #0
   26d9a:	d03a      	beq.n	26e12 <__ssprint_r+0xce>
   26d9c:	4642      	mov	r2, r8
   26d9e:	6921      	ldr	r1, [r4, #16]
   26da0:	f7f4 ff42 	bl	1bc28 <memcpy>
   26da4:	89a2      	ldrh	r2, [r4, #12]
   26da6:	9b01      	ldr	r3, [sp, #4]
   26da8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   26dac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   26db0:	81a2      	strh	r2, [r4, #12]
   26db2:	eba6 0208 	sub.w	r2, r6, r8
   26db6:	eb03 0008 	add.w	r0, r3, r8
   26dba:	6166      	str	r6, [r4, #20]
   26dbc:	60a2      	str	r2, [r4, #8]
   26dbe:	6123      	str	r3, [r4, #16]
   26dc0:	6020      	str	r0, [r4, #0]
   26dc2:	462e      	mov	r6, r5
   26dc4:	46a8      	mov	r8, r5
   26dc6:	4642      	mov	r2, r8
   26dc8:	4659      	mov	r1, fp
   26dca:	f7fb fa1d 	bl	22208 <memmove>
   26dce:	f8da 3008 	ldr.w	r3, [sl, #8]
   26dd2:	68a2      	ldr	r2, [r4, #8]
   26dd4:	6820      	ldr	r0, [r4, #0]
   26dd6:	1b92      	subs	r2, r2, r6
   26dd8:	4440      	add	r0, r8
   26dda:	1b5b      	subs	r3, r3, r5
   26ddc:	60a2      	str	r2, [r4, #8]
   26dde:	6020      	str	r0, [r4, #0]
   26de0:	f8ca 3008 	str.w	r3, [sl, #8]
   26de4:	b33b      	cbz	r3, 26e36 <__ssprint_r+0xf2>
   26de6:	3708      	adds	r7, #8
   26de8:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   26dec:	2d00      	cmp	r5, #0
   26dee:	d0fa      	beq.n	26de6 <__ssprint_r+0xa2>
   26df0:	42aa      	cmp	r2, r5
   26df2:	4616      	mov	r6, r2
   26df4:	4690      	mov	r8, r2
   26df6:	d9b3      	bls.n	26d60 <__ssprint_r+0x1c>
   26df8:	462e      	mov	r6, r5
   26dfa:	46a8      	mov	r8, r5
   26dfc:	e7e3      	b.n	26dc6 <__ssprint_r+0x82>
   26dfe:	4648      	mov	r0, r9
   26e00:	f7f9 fe44 	bl	20a8c <_realloc_r>
   26e04:	4603      	mov	r3, r0
   26e06:	2800      	cmp	r0, #0
   26e08:	d1d3      	bne.n	26db2 <__ssprint_r+0x6e>
   26e0a:	6921      	ldr	r1, [r4, #16]
   26e0c:	4648      	mov	r0, r9
   26e0e:	f7fb fd99 	bl	22944 <_free_r>
   26e12:	89a3      	ldrh	r3, [r4, #12]
   26e14:	220c      	movs	r2, #12
   26e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26e1a:	f8c9 2000 	str.w	r2, [r9]
   26e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26e22:	81a3      	strh	r3, [r4, #12]
   26e24:	2200      	movs	r2, #0
   26e26:	2300      	movs	r3, #0
   26e28:	f8ca 2008 	str.w	r2, [sl, #8]
   26e2c:	f8ca 3004 	str.w	r3, [sl, #4]
   26e30:	b003      	add	sp, #12
   26e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e36:	2000      	movs	r0, #0
   26e38:	2300      	movs	r3, #0
   26e3a:	f8ca 3004 	str.w	r3, [sl, #4]
   26e3e:	b003      	add	sp, #12
   26e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026e44 <__sprint_r.part.0>:
   26e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e48:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   26e4a:	049c      	lsls	r4, r3, #18
   26e4c:	4690      	mov	r8, r2
   26e4e:	d52d      	bpl.n	26eac <__sprint_r.part.0+0x68>
   26e50:	6893      	ldr	r3, [r2, #8]
   26e52:	6812      	ldr	r2, [r2, #0]
   26e54:	b343      	cbz	r3, 26ea8 <__sprint_r.part.0+0x64>
   26e56:	468b      	mov	fp, r1
   26e58:	4606      	mov	r6, r0
   26e5a:	f102 0908 	add.w	r9, r2, #8
   26e5e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   26e62:	ea5f 079a 	movs.w	r7, sl, lsr #2
   26e66:	d015      	beq.n	26e94 <__sprint_r.part.0+0x50>
   26e68:	3d04      	subs	r5, #4
   26e6a:	2400      	movs	r4, #0
   26e6c:	e001      	b.n	26e72 <__sprint_r.part.0+0x2e>
   26e6e:	42a7      	cmp	r7, r4
   26e70:	d00e      	beq.n	26e90 <__sprint_r.part.0+0x4c>
   26e72:	f855 1f04 	ldr.w	r1, [r5, #4]!
   26e76:	465a      	mov	r2, fp
   26e78:	4630      	mov	r0, r6
   26e7a:	f001 fa5b 	bl	28334 <_fputwc_r>
   26e7e:	1c43      	adds	r3, r0, #1
   26e80:	f104 0401 	add.w	r4, r4, #1
   26e84:	d1f3      	bne.n	26e6e <__sprint_r.part.0+0x2a>
   26e86:	2300      	movs	r3, #0
   26e88:	e9c8 3301 	strd	r3, r3, [r8, #4]
   26e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e90:	f8d8 3008 	ldr.w	r3, [r8, #8]
   26e94:	f02a 0a03 	bic.w	sl, sl, #3
   26e98:	eba3 030a 	sub.w	r3, r3, sl
   26e9c:	f8c8 3008 	str.w	r3, [r8, #8]
   26ea0:	f109 0908 	add.w	r9, r9, #8
   26ea4:	2b00      	cmp	r3, #0
   26ea6:	d1da      	bne.n	26e5e <__sprint_r.part.0+0x1a>
   26ea8:	2000      	movs	r0, #0
   26eaa:	e7ec      	b.n	26e86 <__sprint_r.part.0+0x42>
   26eac:	f001 f80c 	bl	27ec8 <__sfvwrite_r>
   26eb0:	2300      	movs	r3, #0
   26eb2:	e9c8 3301 	strd	r3, r3, [r8, #4]
   26eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26eba:	bf00      	nop

00026ebc <_vfiprintf_r>:
   26ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ec0:	ed2d 8b02 	vpush	{d8}
   26ec4:	b0c5      	sub	sp, #276	; 0x114
   26ec6:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   26eca:	4683      	mov	fp, r0
   26ecc:	ee08 1a10 	vmov	s16, r1
   26ed0:	4616      	mov	r6, r2
   26ed2:	2100      	movs	r1, #0
   26ed4:	2208      	movs	r2, #8
   26ed6:	4650      	mov	r0, sl
   26ed8:	461c      	mov	r4, r3
   26eda:	9307      	str	r3, [sp, #28]
   26edc:	f7fb fa10 	bl	22300 <memset>
   26ee0:	f1bb 0f00 	cmp.w	fp, #0
   26ee4:	d004      	beq.n	26ef0 <_vfiprintf_r+0x34>
   26ee6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   26eea:	2b00      	cmp	r3, #0
   26eec:	f000 86a0 	beq.w	27c30 <_vfiprintf_r+0xd74>
   26ef0:	ee18 2a10 	vmov	r2, s16
   26ef4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   26ef6:	07db      	lsls	r3, r3, #31
   26ef8:	f140 8513 	bpl.w	27922 <_vfiprintf_r+0xa66>
   26efc:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   26f00:	b28a      	uxth	r2, r1
   26f02:	0495      	lsls	r5, r2, #18
   26f04:	d40b      	bmi.n	26f1e <_vfiprintf_r+0x62>
   26f06:	ee18 3a10 	vmov	r3, s16
   26f0a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   26f0e:	8199      	strh	r1, [r3, #12]
   26f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   26f12:	b28a      	uxth	r2, r1
   26f14:	ee18 1a10 	vmov	r1, s16
   26f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   26f1c:	664b      	str	r3, [r1, #100]	; 0x64
   26f1e:	0710      	lsls	r0, r2, #28
   26f20:	f140 8105 	bpl.w	2712e <_vfiprintf_r+0x272>
   26f24:	ee18 3a10 	vmov	r3, s16
   26f28:	691b      	ldr	r3, [r3, #16]
   26f2a:	2b00      	cmp	r3, #0
   26f2c:	f000 80ff 	beq.w	2712e <_vfiprintf_r+0x272>
   26f30:	f002 031a 	and.w	r3, r2, #26
   26f34:	2b0a      	cmp	r3, #10
   26f36:	f000 810a 	beq.w	2714e <_vfiprintf_r+0x292>
   26f3a:	2300      	movs	r3, #0
   26f3c:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   26f40:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   26f44:	aa1b      	add	r2, sp, #108	; 0x6c
   26f46:	930c      	str	r3, [sp, #48]	; 0x30
   26f48:	9218      	str	r2, [sp, #96]	; 0x60
   26f4a:	4691      	mov	r9, r2
   26f4c:	930b      	str	r3, [sp, #44]	; 0x2c
   26f4e:	9305      	str	r3, [sp, #20]
   26f50:	46b0      	mov	r8, r6
   26f52:	4644      	mov	r4, r8
   26f54:	4ba8      	ldr	r3, [pc, #672]	; (271f8 <_vfiprintf_r+0x33c>)
   26f56:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   26f5a:	f7fb facd 	bl	224f8 <__locale_mb_cur_max>
   26f5e:	4622      	mov	r2, r4
   26f60:	4603      	mov	r3, r0
   26f62:	a912      	add	r1, sp, #72	; 0x48
   26f64:	f8cd a000 	str.w	sl, [sp]
   26f68:	4658      	mov	r0, fp
   26f6a:	47a8      	blx	r5
   26f6c:	2800      	cmp	r0, #0
   26f6e:	f000 8145 	beq.w	271fc <_vfiprintf_r+0x340>
   26f72:	f2c0 8139 	blt.w	271e8 <_vfiprintf_r+0x32c>
   26f76:	9a12      	ldr	r2, [sp, #72]	; 0x48
   26f78:	2a25      	cmp	r2, #37	; 0x25
   26f7a:	4603      	mov	r3, r0
   26f7c:	d001      	beq.n	26f82 <_vfiprintf_r+0xc6>
   26f7e:	441c      	add	r4, r3
   26f80:	e7e8      	b.n	26f54 <_vfiprintf_r+0x98>
   26f82:	ebb4 0608 	subs.w	r6, r4, r8
   26f86:	4605      	mov	r5, r0
   26f88:	f040 813c 	bne.w	27204 <_vfiprintf_r+0x348>
   26f8c:	2300      	movs	r3, #0
   26f8e:	7861      	ldrb	r1, [r4, #1]
   26f90:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   26f94:	f104 0801 	add.w	r8, r4, #1
   26f98:	9306      	str	r3, [sp, #24]
   26f9a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   26f9e:	461e      	mov	r6, r3
   26fa0:	242b      	movs	r4, #43	; 0x2b
   26fa2:	f108 0801 	add.w	r8, r8, #1
   26fa6:	f1a1 0320 	sub.w	r3, r1, #32
   26faa:	2b5a      	cmp	r3, #90	; 0x5a
   26fac:	f200 8178 	bhi.w	272a0 <_vfiprintf_r+0x3e4>
   26fb0:	e8df f013 	tbh	[pc, r3, lsl #1]
   26fb4:	017602b5 	.word	0x017602b5
   26fb8:	02b00176 	.word	0x02b00176
   26fbc:	01760176 	.word	0x01760176
   26fc0:	006a0176 	.word	0x006a0176
   26fc4:	01760176 	.word	0x01760176
   26fc8:	028d027d 	.word	0x028d027d
   26fcc:	02880176 	.word	0x02880176
   26fd0:	01760297 	.word	0x01760297
   26fd4:	005b0292 	.word	0x005b0292
   26fd8:	005b005b 	.word	0x005b005b
   26fdc:	005b005b 	.word	0x005b005b
   26fe0:	005b005b 	.word	0x005b005b
   26fe4:	005b005b 	.word	0x005b005b
   26fe8:	01760176 	.word	0x01760176
   26fec:	01760176 	.word	0x01760176
   26ff0:	01760176 	.word	0x01760176
   26ff4:	01760176 	.word	0x01760176
   26ff8:	025c0176 	.word	0x025c0176
   26ffc:	01760084 	.word	0x01760084
   27000:	01760176 	.word	0x01760176
   27004:	01760176 	.word	0x01760176
   27008:	01760176 	.word	0x01760176
   2700c:	01760176 	.word	0x01760176
   27010:	00e80176 	.word	0x00e80176
   27014:	01760176 	.word	0x01760176
   27018:	02330176 	.word	0x02330176
   2701c:	02da0176 	.word	0x02da0176
   27020:	01760176 	.word	0x01760176
   27024:	0176058b 	.word	0x0176058b
   27028:	01760176 	.word	0x01760176
   2702c:	01760176 	.word	0x01760176
   27030:	01760176 	.word	0x01760176
   27034:	01760176 	.word	0x01760176
   27038:	025c0176 	.word	0x025c0176
   2703c:	01760086 	.word	0x01760086
   27040:	01760176 	.word	0x01760176
   27044:	008602cd 	.word	0x008602cd
   27048:	0176007f 	.word	0x0176007f
   2704c:	017602c0 	.word	0x017602c0
   27050:	00ea02fd 	.word	0x00ea02fd
   27054:	007f02ed 	.word	0x007f02ed
   27058:	02330176 	.word	0x02330176
   2705c:	0569007c 	.word	0x0569007c
   27060:	01760176 	.word	0x01760176
   27064:	0176056b 	.word	0x0176056b
   27068:	007c      	.short	0x007c
   2706a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2706e:	2200      	movs	r2, #0
   27070:	f818 1b01 	ldrb.w	r1, [r8], #1
   27074:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   27078:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   2707c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   27080:	2b09      	cmp	r3, #9
   27082:	d9f5      	bls.n	27070 <_vfiprintf_r+0x1b4>
   27084:	9206      	str	r2, [sp, #24]
   27086:	e78e      	b.n	26fa6 <_vfiprintf_r+0xea>
   27088:	4658      	mov	r0, fp
   2708a:	f7fe fddf 	bl	25c4c <_localeconv_r>
   2708e:	6843      	ldr	r3, [r0, #4]
   27090:	930d      	str	r3, [sp, #52]	; 0x34
   27092:	4618      	mov	r0, r3
   27094:	f7fb fb54 	bl	22740 <strlen>
   27098:	900e      	str	r0, [sp, #56]	; 0x38
   2709a:	4605      	mov	r5, r0
   2709c:	4658      	mov	r0, fp
   2709e:	f7fe fdd5 	bl	25c4c <_localeconv_r>
   270a2:	6883      	ldr	r3, [r0, #8]
   270a4:	930b      	str	r3, [sp, #44]	; 0x2c
   270a6:	2d00      	cmp	r5, #0
   270a8:	f040 84d6 	bne.w	27a58 <_vfiprintf_r+0xb9c>
   270ac:	f898 1000 	ldrb.w	r1, [r8]
   270b0:	e777      	b.n	26fa2 <_vfiprintf_r+0xe6>
   270b2:	f898 1000 	ldrb.w	r1, [r8]
   270b6:	f046 0620 	orr.w	r6, r6, #32
   270ba:	e772      	b.n	26fa2 <_vfiprintf_r+0xe6>
   270bc:	f046 0610 	orr.w	r6, r6, #16
   270c0:	06b4      	lsls	r4, r6, #26
   270c2:	f140 818e 	bpl.w	273e2 <_vfiprintf_r+0x526>
   270c6:	9b07      	ldr	r3, [sp, #28]
   270c8:	3307      	adds	r3, #7
   270ca:	f023 0307 	bic.w	r3, r3, #7
   270ce:	461a      	mov	r2, r3
   270d0:	6859      	ldr	r1, [r3, #4]
   270d2:	f852 3b08 	ldr.w	r3, [r2], #8
   270d6:	9207      	str	r2, [sp, #28]
   270d8:	460a      	mov	r2, r1
   270da:	2900      	cmp	r1, #0
   270dc:	f2c0 8470 	blt.w	279c0 <_vfiprintf_r+0xb04>
   270e0:	1c79      	adds	r1, r7, #1
   270e2:	f000 85a2 	beq.w	27c2a <_vfiprintf_r+0xd6e>
   270e6:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   270ea:	9103      	str	r1, [sp, #12]
   270ec:	ea53 0102 	orrs.w	r1, r3, r2
   270f0:	f000 843f 	beq.w	27972 <_vfiprintf_r+0xab6>
   270f4:	2b0a      	cmp	r3, #10
   270f6:	f172 0100 	sbcs.w	r1, r2, #0
   270fa:	f080 8541 	bcs.w	27b80 <_vfiprintf_r+0xcc4>
   270fe:	3330      	adds	r3, #48	; 0x30
   27100:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   27104:	9e03      	ldr	r6, [sp, #12]
   27106:	2301      	movs	r3, #1
   27108:	9304      	str	r3, [sp, #16]
   2710a:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   2710e:	9b04      	ldr	r3, [sp, #16]
   27110:	42bb      	cmp	r3, r7
   27112:	bfb8      	it	lt
   27114:	463b      	movlt	r3, r7
   27116:	9303      	str	r3, [sp, #12]
   27118:	2300      	movs	r3, #0
   2711a:	9308      	str	r3, [sp, #32]
   2711c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   27120:	2b00      	cmp	r3, #0
   27122:	f000 80cb 	beq.w	272bc <_vfiprintf_r+0x400>
   27126:	9b03      	ldr	r3, [sp, #12]
   27128:	3301      	adds	r3, #1
   2712a:	9303      	str	r3, [sp, #12]
   2712c:	e0c6      	b.n	272bc <_vfiprintf_r+0x400>
   2712e:	ee18 1a10 	vmov	r1, s16
   27132:	4658      	mov	r0, fp
   27134:	ee18 5a10 	vmov	r5, s16
   27138:	f001 f840 	bl	281bc <__swsetup_r>
   2713c:	2800      	cmp	r0, #0
   2713e:	f040 8652 	bne.w	27de6 <_vfiprintf_r+0xf2a>
   27142:	89aa      	ldrh	r2, [r5, #12]
   27144:	f002 031a 	and.w	r3, r2, #26
   27148:	2b0a      	cmp	r3, #10
   2714a:	f47f aef6 	bne.w	26f3a <_vfiprintf_r+0x7e>
   2714e:	ee18 1a10 	vmov	r1, s16
   27152:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   27156:	2b00      	cmp	r3, #0
   27158:	f6ff aeef 	blt.w	26f3a <_vfiprintf_r+0x7e>
   2715c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2715e:	07db      	lsls	r3, r3, #31
   27160:	d402      	bmi.n	27168 <_vfiprintf_r+0x2ac>
   27162:	0597      	lsls	r7, r2, #22
   27164:	f140 8612 	bpl.w	27d8c <_vfiprintf_r+0xed0>
   27168:	ee18 1a10 	vmov	r1, s16
   2716c:	4623      	mov	r3, r4
   2716e:	4632      	mov	r2, r6
   27170:	4658      	mov	r0, fp
   27172:	f000 fe69 	bl	27e48 <__sbprintf>
   27176:	9005      	str	r0, [sp, #20]
   27178:	9805      	ldr	r0, [sp, #20]
   2717a:	b045      	add	sp, #276	; 0x114
   2717c:	ecbd 8b02 	vpop	{d8}
   27180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27184:	f046 0610 	orr.w	r6, r6, #16
   27188:	f016 0220 	ands.w	r2, r6, #32
   2718c:	f000 8136 	beq.w	273fc <_vfiprintf_r+0x540>
   27190:	9b07      	ldr	r3, [sp, #28]
   27192:	3307      	adds	r3, #7
   27194:	f023 0307 	bic.w	r3, r3, #7
   27198:	4619      	mov	r1, r3
   2719a:	685a      	ldr	r2, [r3, #4]
   2719c:	f851 3b08 	ldr.w	r3, [r1], #8
   271a0:	9107      	str	r1, [sp, #28]
   271a2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   271a6:	9103      	str	r1, [sp, #12]
   271a8:	2100      	movs	r1, #0
   271aa:	2000      	movs	r0, #0
   271ac:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   271b0:	1c78      	adds	r0, r7, #1
   271b2:	f000 8210 	beq.w	275d6 <_vfiprintf_r+0x71a>
   271b6:	9803      	ldr	r0, [sp, #12]
   271b8:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   271bc:	ea53 0002 	orrs.w	r0, r3, r2
   271c0:	f040 8208 	bne.w	275d4 <_vfiprintf_r+0x718>
   271c4:	2f00      	cmp	r7, #0
   271c6:	f040 8538 	bne.w	27c3a <_vfiprintf_r+0xd7e>
   271ca:	2900      	cmp	r1, #0
   271cc:	f040 83d5 	bne.w	2797a <_vfiprintf_r+0xabe>
   271d0:	9b03      	ldr	r3, [sp, #12]
   271d2:	f013 0301 	ands.w	r3, r3, #1
   271d6:	9304      	str	r3, [sp, #16]
   271d8:	f000 8411 	beq.w	279fe <_vfiprintf_r+0xb42>
   271dc:	2330      	movs	r3, #48	; 0x30
   271de:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   271e2:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   271e6:	e792      	b.n	2710e <_vfiprintf_r+0x252>
   271e8:	2208      	movs	r2, #8
   271ea:	2100      	movs	r1, #0
   271ec:	4650      	mov	r0, sl
   271ee:	f7fb f887 	bl	22300 <memset>
   271f2:	2301      	movs	r3, #1
   271f4:	441c      	add	r4, r3
   271f6:	e6ad      	b.n	26f54 <_vfiprintf_r+0x98>
   271f8:	20009464 	.word	0x20009464
   271fc:	ebb4 0608 	subs.w	r6, r4, r8
   27200:	4605      	mov	r5, r0
   27202:	d01b      	beq.n	2723c <_vfiprintf_r+0x380>
   27204:	9b19      	ldr	r3, [sp, #100]	; 0x64
   27206:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   27208:	3301      	adds	r3, #1
   2720a:	4432      	add	r2, r6
   2720c:	2b07      	cmp	r3, #7
   2720e:	e9c9 8600 	strd	r8, r6, [r9]
   27212:	921a      	str	r2, [sp, #104]	; 0x68
   27214:	9319      	str	r3, [sp, #100]	; 0x64
   27216:	dd1c      	ble.n	27252 <_vfiprintf_r+0x396>
   27218:	2a00      	cmp	r2, #0
   2721a:	f000 83a6 	beq.w	2796a <_vfiprintf_r+0xaae>
   2721e:	ee18 1a10 	vmov	r1, s16
   27222:	aa18      	add	r2, sp, #96	; 0x60
   27224:	4658      	mov	r0, fp
   27226:	f7ff fe0d 	bl	26e44 <__sprint_r.part.0>
   2722a:	bb20      	cbnz	r0, 27276 <_vfiprintf_r+0x3ba>
   2722c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27230:	9b05      	ldr	r3, [sp, #20]
   27232:	4433      	add	r3, r6
   27234:	9305      	str	r3, [sp, #20]
   27236:	2d00      	cmp	r5, #0
   27238:	f47f aea8 	bne.w	26f8c <_vfiprintf_r+0xd0>
   2723c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2723e:	2b00      	cmp	r3, #0
   27240:	f040 85c1 	bne.w	27dc6 <_vfiprintf_r+0xf0a>
   27244:	ee18 3a10 	vmov	r3, s16
   27248:	2200      	movs	r2, #0
   2724a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   2724e:	9219      	str	r2, [sp, #100]	; 0x64
   27250:	e015      	b.n	2727e <_vfiprintf_r+0x3c2>
   27252:	f109 0908 	add.w	r9, r9, #8
   27256:	e7eb      	b.n	27230 <_vfiprintf_r+0x374>
   27258:	ee18 1a10 	vmov	r1, s16
   2725c:	aa18      	add	r2, sp, #96	; 0x60
   2725e:	4658      	mov	r0, fp
   27260:	f7ff fdf0 	bl	26e44 <__sprint_r.part.0>
   27264:	2800      	cmp	r0, #0
   27266:	f000 80a6 	beq.w	273b6 <_vfiprintf_r+0x4fa>
   2726a:	9b08      	ldr	r3, [sp, #32]
   2726c:	b11b      	cbz	r3, 27276 <_vfiprintf_r+0x3ba>
   2726e:	9908      	ldr	r1, [sp, #32]
   27270:	4658      	mov	r0, fp
   27272:	f7fb fb67 	bl	22944 <_free_r>
   27276:	ee18 3a10 	vmov	r3, s16
   2727a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   2727e:	ee18 2a10 	vmov	r2, s16
   27282:	6e52      	ldr	r2, [r2, #100]	; 0x64
   27284:	f012 0f01 	tst.w	r2, #1
   27288:	b29a      	uxth	r2, r3
   2728a:	f000 80a0 	beq.w	273ce <_vfiprintf_r+0x512>
   2728e:	0650      	lsls	r0, r2, #25
   27290:	f100 85b2 	bmi.w	27df8 <_vfiprintf_r+0xf3c>
   27294:	9805      	ldr	r0, [sp, #20]
   27296:	b045      	add	sp, #276	; 0x114
   27298:	ecbd 8b02 	vpop	{d8}
   2729c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272a0:	2900      	cmp	r1, #0
   272a2:	d0cb      	beq.n	2723c <_vfiprintf_r+0x380>
   272a4:	2300      	movs	r3, #0
   272a6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   272aa:	2301      	movs	r3, #1
   272ac:	e9cd 3303 	strd	r3, r3, [sp, #12]
   272b0:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   272b4:	ac2b      	add	r4, sp, #172	; 0xac
   272b6:	2300      	movs	r3, #0
   272b8:	9308      	str	r3, [sp, #32]
   272ba:	461f      	mov	r7, r3
   272bc:	f016 0302 	ands.w	r3, r6, #2
   272c0:	9309      	str	r3, [sp, #36]	; 0x24
   272c2:	d002      	beq.n	272ca <_vfiprintf_r+0x40e>
   272c4:	9b03      	ldr	r3, [sp, #12]
   272c6:	3302      	adds	r3, #2
   272c8:	9303      	str	r3, [sp, #12]
   272ca:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   272ce:	930a      	str	r3, [sp, #40]	; 0x28
   272d0:	d105      	bne.n	272de <_vfiprintf_r+0x422>
   272d2:	9b06      	ldr	r3, [sp, #24]
   272d4:	9a03      	ldr	r2, [sp, #12]
   272d6:	1a9d      	subs	r5, r3, r2
   272d8:	2d00      	cmp	r5, #0
   272da:	f300 827b 	bgt.w	277d4 <_vfiprintf_r+0x918>
   272de:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   272e2:	1c41      	adds	r1, r0, #1
   272e4:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   272e8:	b182      	cbz	r2, 2730c <_vfiprintf_r+0x450>
   272ea:	2201      	movs	r2, #1
   272ec:	3301      	adds	r3, #1
   272ee:	f8c9 2004 	str.w	r2, [r9, #4]
   272f2:	2907      	cmp	r1, #7
   272f4:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   272f8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   272fc:	f8c9 2000 	str.w	r2, [r9]
   27300:	f300 824a 	bgt.w	27798 <_vfiprintf_r+0x8dc>
   27304:	4608      	mov	r0, r1
   27306:	f109 0908 	add.w	r9, r9, #8
   2730a:	3101      	adds	r1, #1
   2730c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2730e:	b1e2      	cbz	r2, 2734a <_vfiprintf_r+0x48e>
   27310:	aa11      	add	r2, sp, #68	; 0x44
   27312:	3302      	adds	r3, #2
   27314:	f8c9 2000 	str.w	r2, [r9]
   27318:	2907      	cmp	r1, #7
   2731a:	f04f 0202 	mov.w	r2, #2
   2731e:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   27322:	f8c9 2004 	str.w	r2, [r9, #4]
   27326:	f340 8250 	ble.w	277ca <_vfiprintf_r+0x90e>
   2732a:	2b00      	cmp	r3, #0
   2732c:	f000 8343 	beq.w	279b6 <_vfiprintf_r+0xafa>
   27330:	ee18 1a10 	vmov	r1, s16
   27334:	aa18      	add	r2, sp, #96	; 0x60
   27336:	4658      	mov	r0, fp
   27338:	f7ff fd84 	bl	26e44 <__sprint_r.part.0>
   2733c:	2800      	cmp	r0, #0
   2733e:	d194      	bne.n	2726a <_vfiprintf_r+0x3ae>
   27340:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27344:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27348:	1c41      	adds	r1, r0, #1
   2734a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2734c:	2a80      	cmp	r2, #128	; 0x80
   2734e:	f000 8184 	beq.w	2765a <_vfiprintf_r+0x79e>
   27352:	9a04      	ldr	r2, [sp, #16]
   27354:	1abd      	subs	r5, r7, r2
   27356:	2d00      	cmp	r5, #0
   27358:	f300 81d7 	bgt.w	2770a <_vfiprintf_r+0x84e>
   2735c:	9a04      	ldr	r2, [sp, #16]
   2735e:	f8c9 4000 	str.w	r4, [r9]
   27362:	4413      	add	r3, r2
   27364:	2907      	cmp	r1, #7
   27366:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   2736a:	f8c9 2004 	str.w	r2, [r9, #4]
   2736e:	f340 816e 	ble.w	2764e <_vfiprintf_r+0x792>
   27372:	2b00      	cmp	r3, #0
   27374:	f000 8275 	beq.w	27862 <_vfiprintf_r+0x9a6>
   27378:	ee18 1a10 	vmov	r1, s16
   2737c:	aa18      	add	r2, sp, #96	; 0x60
   2737e:	4658      	mov	r0, fp
   27380:	f7ff fd60 	bl	26e44 <__sprint_r.part.0>
   27384:	2800      	cmp	r0, #0
   27386:	f47f af70 	bne.w	2726a <_vfiprintf_r+0x3ae>
   2738a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2738c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27390:	0775      	lsls	r5, r6, #29
   27392:	d505      	bpl.n	273a0 <_vfiprintf_r+0x4e4>
   27394:	9a06      	ldr	r2, [sp, #24]
   27396:	9903      	ldr	r1, [sp, #12]
   27398:	1a54      	subs	r4, r2, r1
   2739a:	2c00      	cmp	r4, #0
   2739c:	f300 826b 	bgt.w	27876 <_vfiprintf_r+0x9ba>
   273a0:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   273a4:	9803      	ldr	r0, [sp, #12]
   273a6:	4281      	cmp	r1, r0
   273a8:	bfac      	ite	ge
   273aa:	1852      	addge	r2, r2, r1
   273ac:	1812      	addlt	r2, r2, r0
   273ae:	9205      	str	r2, [sp, #20]
   273b0:	2b00      	cmp	r3, #0
   273b2:	f47f af51 	bne.w	27258 <_vfiprintf_r+0x39c>
   273b6:	9908      	ldr	r1, [sp, #32]
   273b8:	2300      	movs	r3, #0
   273ba:	9319      	str	r3, [sp, #100]	; 0x64
   273bc:	2900      	cmp	r1, #0
   273be:	f000 8149 	beq.w	27654 <_vfiprintf_r+0x798>
   273c2:	4658      	mov	r0, fp
   273c4:	f7fb fabe 	bl	22944 <_free_r>
   273c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   273cc:	e5c1      	b.n	26f52 <_vfiprintf_r+0x96>
   273ce:	059c      	lsls	r4, r3, #22
   273d0:	f53f af5d 	bmi.w	2728e <_vfiprintf_r+0x3d2>
   273d4:	ee18 4a10 	vmov	r4, s16
   273d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   273da:	f7fb f955 	bl	22688 <__retarget_lock_release_recursive>
   273de:	89a2      	ldrh	r2, [r4, #12]
   273e0:	e755      	b.n	2728e <_vfiprintf_r+0x3d2>
   273e2:	06f0      	lsls	r0, r6, #27
   273e4:	9a07      	ldr	r2, [sp, #28]
   273e6:	f100 831f 	bmi.w	27a28 <_vfiprintf_r+0xb6c>
   273ea:	0671      	lsls	r1, r6, #25
   273ec:	f140 8319 	bpl.w	27a22 <_vfiprintf_r+0xb66>
   273f0:	f932 3b04 	ldrsh.w	r3, [r2], #4
   273f4:	9207      	str	r2, [sp, #28]
   273f6:	17da      	asrs	r2, r3, #31
   273f8:	4611      	mov	r1, r2
   273fa:	e66e      	b.n	270da <_vfiprintf_r+0x21e>
   273fc:	f016 0310 	ands.w	r3, r6, #16
   27400:	9907      	ldr	r1, [sp, #28]
   27402:	f040 8309 	bne.w	27a18 <_vfiprintf_r+0xb5c>
   27406:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   2740a:	f000 8301 	beq.w	27a10 <_vfiprintf_r+0xb54>
   2740e:	461a      	mov	r2, r3
   27410:	f851 3b04 	ldr.w	r3, [r1], #4
   27414:	9107      	str	r1, [sp, #28]
   27416:	b29b      	uxth	r3, r3
   27418:	e6c3      	b.n	271a2 <_vfiprintf_r+0x2e6>
   2741a:	9b07      	ldr	r3, [sp, #28]
   2741c:	461a      	mov	r2, r3
   2741e:	2300      	movs	r3, #0
   27420:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27424:	4613      	mov	r3, r2
   27426:	f853 4b04 	ldr.w	r4, [r3], #4
   2742a:	9303      	str	r3, [sp, #12]
   2742c:	2c00      	cmp	r4, #0
   2742e:	f000 8412 	beq.w	27c56 <_vfiprintf_r+0xd9a>
   27432:	2953      	cmp	r1, #83	; 0x53
   27434:	f000 8365 	beq.w	27b02 <_vfiprintf_r+0xc46>
   27438:	f016 0510 	ands.w	r5, r6, #16
   2743c:	f040 8361 	bne.w	27b02 <_vfiprintf_r+0xc46>
   27440:	1c7b      	adds	r3, r7, #1
   27442:	f000 84b3 	beq.w	27dac <_vfiprintf_r+0xef0>
   27446:	463a      	mov	r2, r7
   27448:	4629      	mov	r1, r5
   2744a:	4620      	mov	r0, r4
   2744c:	f7fb f920 	bl	22690 <memchr>
   27450:	9008      	str	r0, [sp, #32]
   27452:	2800      	cmp	r0, #0
   27454:	f000 849f 	beq.w	27d96 <_vfiprintf_r+0xeda>
   27458:	1b03      	subs	r3, r0, r4
   2745a:	9a03      	ldr	r2, [sp, #12]
   2745c:	9304      	str	r3, [sp, #16]
   2745e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27462:	462f      	mov	r7, r5
   27464:	9207      	str	r2, [sp, #28]
   27466:	9303      	str	r3, [sp, #12]
   27468:	9508      	str	r5, [sp, #32]
   2746a:	e657      	b.n	2711c <_vfiprintf_r+0x260>
   2746c:	2943      	cmp	r1, #67	; 0x43
   2746e:	d002      	beq.n	27476 <_vfiprintf_r+0x5ba>
   27470:	06f5      	lsls	r5, r6, #27
   27472:	f140 832d 	bpl.w	27ad0 <_vfiprintf_r+0xc14>
   27476:	9d07      	ldr	r5, [sp, #28]
   27478:	2208      	movs	r2, #8
   2747a:	2100      	movs	r1, #0
   2747c:	a816      	add	r0, sp, #88	; 0x58
   2747e:	ac2b      	add	r4, sp, #172	; 0xac
   27480:	f7fa ff3e 	bl	22300 <memset>
   27484:	ab16      	add	r3, sp, #88	; 0x58
   27486:	f855 2b04 	ldr.w	r2, [r5], #4
   2748a:	4621      	mov	r1, r4
   2748c:	4658      	mov	r0, fp
   2748e:	f7fe fc71 	bl	25d74 <_wcrtomb_r>
   27492:	4603      	mov	r3, r0
   27494:	3301      	adds	r3, #1
   27496:	9004      	str	r0, [sp, #16]
   27498:	f000 84b3 	beq.w	27e02 <_vfiprintf_r+0xf46>
   2749c:	9b04      	ldr	r3, [sp, #16]
   2749e:	9507      	str	r5, [sp, #28]
   274a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   274a4:	9303      	str	r3, [sp, #12]
   274a6:	2300      	movs	r3, #0
   274a8:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   274ac:	e703      	b.n	272b6 <_vfiprintf_r+0x3fa>
   274ae:	9b07      	ldr	r3, [sp, #28]
   274b0:	f853 2b04 	ldr.w	r2, [r3], #4
   274b4:	9206      	str	r2, [sp, #24]
   274b6:	2a00      	cmp	r2, #0
   274b8:	f280 829c 	bge.w	279f4 <_vfiprintf_r+0xb38>
   274bc:	9a06      	ldr	r2, [sp, #24]
   274be:	4252      	negs	r2, r2
   274c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   274c4:	f898 1000 	ldrb.w	r1, [r8]
   274c8:	f046 0604 	orr.w	r6, r6, #4
   274cc:	e569      	b.n	26fa2 <_vfiprintf_r+0xe6>
   274ce:	f898 1000 	ldrb.w	r1, [r8]
   274d2:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   274d6:	e564      	b.n	26fa2 <_vfiprintf_r+0xe6>
   274d8:	f898 1000 	ldrb.w	r1, [r8]
   274dc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   274e0:	e55f      	b.n	26fa2 <_vfiprintf_r+0xe6>
   274e2:	4642      	mov	r2, r8
   274e4:	f812 1b01 	ldrb.w	r1, [r2], #1
   274e8:	292a      	cmp	r1, #42	; 0x2a
   274ea:	f000 8496 	beq.w	27e1a <_vfiprintf_r+0xf5e>
   274ee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   274f2:	2b09      	cmp	r3, #9
   274f4:	4690      	mov	r8, r2
   274f6:	f04f 0700 	mov.w	r7, #0
   274fa:	f63f ad54 	bhi.w	26fa6 <_vfiprintf_r+0xea>
   274fe:	f818 1b01 	ldrb.w	r1, [r8], #1
   27502:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   27506:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   2750a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2750e:	2b09      	cmp	r3, #9
   27510:	d9f5      	bls.n	274fe <_vfiprintf_r+0x642>
   27512:	e548      	b.n	26fa6 <_vfiprintf_r+0xea>
   27514:	f898 1000 	ldrb.w	r1, [r8]
   27518:	f046 0601 	orr.w	r6, r6, #1
   2751c:	e541      	b.n	26fa2 <_vfiprintf_r+0xe6>
   2751e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   27522:	2b00      	cmp	r3, #0
   27524:	f47f adc2 	bne.w	270ac <_vfiprintf_r+0x1f0>
   27528:	2320      	movs	r3, #32
   2752a:	f898 1000 	ldrb.w	r1, [r8]
   2752e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27532:	e536      	b.n	26fa2 <_vfiprintf_r+0xe6>
   27534:	f898 1000 	ldrb.w	r1, [r8]
   27538:	296c      	cmp	r1, #108	; 0x6c
   2753a:	bf03      	ittte	eq
   2753c:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   27540:	f046 0620 	orreq.w	r6, r6, #32
   27544:	f108 0801 	addeq.w	r8, r8, #1
   27548:	f046 0610 	orrne.w	r6, r6, #16
   2754c:	e529      	b.n	26fa2 <_vfiprintf_r+0xe6>
   2754e:	f898 1000 	ldrb.w	r1, [r8]
   27552:	2968      	cmp	r1, #104	; 0x68
   27554:	bf03      	ittte	eq
   27556:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   2755a:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   2755e:	f108 0801 	addeq.w	r8, r8, #1
   27562:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   27566:	e51c      	b.n	26fa2 <_vfiprintf_r+0xe6>
   27568:	f046 0310 	orr.w	r3, r6, #16
   2756c:	9303      	str	r3, [sp, #12]
   2756e:	9b03      	ldr	r3, [sp, #12]
   27570:	f013 0220 	ands.w	r2, r3, #32
   27574:	f000 8206 	beq.w	27984 <_vfiprintf_r+0xac8>
   27578:	9b07      	ldr	r3, [sp, #28]
   2757a:	3307      	adds	r3, #7
   2757c:	f023 0307 	bic.w	r3, r3, #7
   27580:	4619      	mov	r1, r3
   27582:	685a      	ldr	r2, [r3, #4]
   27584:	f851 3b08 	ldr.w	r3, [r1], #8
   27588:	9107      	str	r1, [sp, #28]
   2758a:	2101      	movs	r1, #1
   2758c:	e60d      	b.n	271aa <_vfiprintf_r+0x2ee>
   2758e:	9a07      	ldr	r2, [sp, #28]
   27590:	f046 0302 	orr.w	r3, r6, #2
   27594:	9303      	str	r3, [sp, #12]
   27596:	f852 3b04 	ldr.w	r3, [r2], #4
   2759a:	9207      	str	r2, [sp, #28]
   2759c:	f647 0230 	movw	r2, #30768	; 0x7830
   275a0:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   275a4:	4ab8      	ldr	r2, [pc, #736]	; (27888 <_vfiprintf_r+0x9cc>)
   275a6:	920c      	str	r2, [sp, #48]	; 0x30
   275a8:	2102      	movs	r1, #2
   275aa:	2200      	movs	r2, #0
   275ac:	e5fd      	b.n	271aa <_vfiprintf_r+0x2ee>
   275ae:	06b7      	lsls	r7, r6, #26
   275b0:	f100 8248 	bmi.w	27a44 <_vfiprintf_r+0xb88>
   275b4:	06f5      	lsls	r5, r6, #27
   275b6:	f100 8346 	bmi.w	27c46 <_vfiprintf_r+0xd8a>
   275ba:	0674      	lsls	r4, r6, #25
   275bc:	f100 83d5 	bmi.w	27d6a <_vfiprintf_r+0xeae>
   275c0:	05b0      	lsls	r0, r6, #22
   275c2:	f140 8340 	bpl.w	27c46 <_vfiprintf_r+0xd8a>
   275c6:	9b07      	ldr	r3, [sp, #28]
   275c8:	9905      	ldr	r1, [sp, #20]
   275ca:	f853 2b04 	ldr.w	r2, [r3], #4
   275ce:	9307      	str	r3, [sp, #28]
   275d0:	7011      	strb	r1, [r2, #0]
   275d2:	e4be      	b.n	26f52 <_vfiprintf_r+0x96>
   275d4:	9603      	str	r6, [sp, #12]
   275d6:	2901      	cmp	r1, #1
   275d8:	f43f ad8c 	beq.w	270f4 <_vfiprintf_r+0x238>
   275dc:	2902      	cmp	r1, #2
   275de:	ac44      	add	r4, sp, #272	; 0x110
   275e0:	d111      	bne.n	27606 <_vfiprintf_r+0x74a>
   275e2:	980c      	ldr	r0, [sp, #48]	; 0x30
   275e4:	f003 010f 	and.w	r1, r3, #15
   275e8:	091b      	lsrs	r3, r3, #4
   275ea:	5c41      	ldrb	r1, [r0, r1]
   275ec:	f804 1d01 	strb.w	r1, [r4, #-1]!
   275f0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   275f4:	0912      	lsrs	r2, r2, #4
   275f6:	ea53 0102 	orrs.w	r1, r3, r2
   275fa:	d1f3      	bne.n	275e4 <_vfiprintf_r+0x728>
   275fc:	9e03      	ldr	r6, [sp, #12]
   275fe:	ab44      	add	r3, sp, #272	; 0x110
   27600:	1b1b      	subs	r3, r3, r4
   27602:	9304      	str	r3, [sp, #16]
   27604:	e583      	b.n	2710e <_vfiprintf_r+0x252>
   27606:	f003 0107 	and.w	r1, r3, #7
   2760a:	08db      	lsrs	r3, r3, #3
   2760c:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   27610:	08d2      	lsrs	r2, r2, #3
   27612:	3130      	adds	r1, #48	; 0x30
   27614:	ea53 0502 	orrs.w	r5, r3, r2
   27618:	4620      	mov	r0, r4
   2761a:	f804 1d01 	strb.w	r1, [r4, #-1]!
   2761e:	d1f2      	bne.n	27606 <_vfiprintf_r+0x74a>
   27620:	9e03      	ldr	r6, [sp, #12]
   27622:	07f3      	lsls	r3, r6, #31
   27624:	d5eb      	bpl.n	275fe <_vfiprintf_r+0x742>
   27626:	2930      	cmp	r1, #48	; 0x30
   27628:	d0e8      	beq.n	275fc <_vfiprintf_r+0x740>
   2762a:	2330      	movs	r3, #48	; 0x30
   2762c:	3802      	subs	r0, #2
   2762e:	f804 3c01 	strb.w	r3, [r4, #-1]
   27632:	ab44      	add	r3, sp, #272	; 0x110
   27634:	1a1b      	subs	r3, r3, r0
   27636:	9e03      	ldr	r6, [sp, #12]
   27638:	9304      	str	r3, [sp, #16]
   2763a:	4604      	mov	r4, r0
   2763c:	e567      	b.n	2710e <_vfiprintf_r+0x252>
   2763e:	9b04      	ldr	r3, [sp, #16]
   27640:	941b      	str	r4, [sp, #108]	; 0x6c
   27642:	2201      	movs	r2, #1
   27644:	931c      	str	r3, [sp, #112]	; 0x70
   27646:	931a      	str	r3, [sp, #104]	; 0x68
   27648:	9219      	str	r2, [sp, #100]	; 0x64
   2764a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2764e:	f109 0908 	add.w	r9, r9, #8
   27652:	e69d      	b.n	27390 <_vfiprintf_r+0x4d4>
   27654:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27658:	e47b      	b.n	26f52 <_vfiprintf_r+0x96>
   2765a:	9a06      	ldr	r2, [sp, #24]
   2765c:	9d03      	ldr	r5, [sp, #12]
   2765e:	1b55      	subs	r5, r2, r5
   27660:	2d00      	cmp	r5, #0
   27662:	f77f ae76 	ble.w	27352 <_vfiprintf_r+0x496>
   27666:	2d10      	cmp	r5, #16
   27668:	f340 83bb 	ble.w	27de2 <_vfiprintf_r+0xf26>
   2766c:	9409      	str	r4, [sp, #36]	; 0x24
   2766e:	ee18 4a10 	vmov	r4, s16
   27672:	e007      	b.n	27684 <_vfiprintf_r+0x7c8>
   27674:	f100 0c02 	add.w	ip, r0, #2
   27678:	f109 0908 	add.w	r9, r9, #8
   2767c:	4610      	mov	r0, r2
   2767e:	3d10      	subs	r5, #16
   27680:	2d10      	cmp	r5, #16
   27682:	dd1e      	ble.n	276c2 <_vfiprintf_r+0x806>
   27684:	4981      	ldr	r1, [pc, #516]	; (2788c <_vfiprintf_r+0x9d0>)
   27686:	f8c9 1000 	str.w	r1, [r9]
   2768a:	1c42      	adds	r2, r0, #1
   2768c:	3310      	adds	r3, #16
   2768e:	2110      	movs	r1, #16
   27690:	2a07      	cmp	r2, #7
   27692:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   27696:	f8c9 1004 	str.w	r1, [r9, #4]
   2769a:	ddeb      	ble.n	27674 <_vfiprintf_r+0x7b8>
   2769c:	aa18      	add	r2, sp, #96	; 0x60
   2769e:	2b00      	cmp	r3, #0
   276a0:	d074      	beq.n	2778c <_vfiprintf_r+0x8d0>
   276a2:	4621      	mov	r1, r4
   276a4:	4658      	mov	r0, fp
   276a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   276aa:	f7ff fbcb 	bl	26e44 <__sprint_r.part.0>
   276ae:	2800      	cmp	r0, #0
   276b0:	f47f addb 	bne.w	2726a <_vfiprintf_r+0x3ae>
   276b4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   276b8:	3d10      	subs	r5, #16
   276ba:	2d10      	cmp	r5, #16
   276bc:	f100 0c01 	add.w	ip, r0, #1
   276c0:	dce0      	bgt.n	27684 <_vfiprintf_r+0x7c8>
   276c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   276c4:	4a71      	ldr	r2, [pc, #452]	; (2788c <_vfiprintf_r+0x9d0>)
   276c6:	f8c9 5004 	str.w	r5, [r9, #4]
   276ca:	442b      	add	r3, r5
   276cc:	f1bc 0f07 	cmp.w	ip, #7
   276d0:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   276d4:	f8c9 2000 	str.w	r2, [r9]
   276d8:	f340 8194 	ble.w	27a04 <_vfiprintf_r+0xb48>
   276dc:	2b00      	cmp	r3, #0
   276de:	f000 831f 	beq.w	27d20 <_vfiprintf_r+0xe64>
   276e2:	ee18 1a10 	vmov	r1, s16
   276e6:	aa18      	add	r2, sp, #96	; 0x60
   276e8:	4658      	mov	r0, fp
   276ea:	f7ff fbab 	bl	26e44 <__sprint_r.part.0>
   276ee:	2800      	cmp	r0, #0
   276f0:	f47f adbb 	bne.w	2726a <_vfiprintf_r+0x3ae>
   276f4:	9a04      	ldr	r2, [sp, #16]
   276f6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   276fa:	1abd      	subs	r5, r7, r2
   276fc:	2d00      	cmp	r5, #0
   276fe:	f100 0101 	add.w	r1, r0, #1
   27702:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27706:	f77f ae29 	ble.w	2735c <_vfiprintf_r+0x4a0>
   2770a:	2d10      	cmp	r5, #16
   2770c:	dd29      	ble.n	27762 <_vfiprintf_r+0x8a6>
   2770e:	9409      	str	r4, [sp, #36]	; 0x24
   27710:	2710      	movs	r7, #16
   27712:	ee18 4a10 	vmov	r4, s16
   27716:	e007      	b.n	27728 <_vfiprintf_r+0x86c>
   27718:	f100 0c02 	add.w	ip, r0, #2
   2771c:	f109 0908 	add.w	r9, r9, #8
   27720:	4610      	mov	r0, r2
   27722:	3d10      	subs	r5, #16
   27724:	2d10      	cmp	r5, #16
   27726:	dd1a      	ble.n	2775e <_vfiprintf_r+0x8a2>
   27728:	1c42      	adds	r2, r0, #1
   2772a:	4958      	ldr	r1, [pc, #352]	; (2788c <_vfiprintf_r+0x9d0>)
   2772c:	3310      	adds	r3, #16
   2772e:	2a07      	cmp	r2, #7
   27730:	e9c9 1700 	strd	r1, r7, [r9]
   27734:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   27738:	ddee      	ble.n	27718 <_vfiprintf_r+0x85c>
   2773a:	aa18      	add	r2, sp, #96	; 0x60
   2773c:	b303      	cbz	r3, 27780 <_vfiprintf_r+0x8c4>
   2773e:	4621      	mov	r1, r4
   27740:	4658      	mov	r0, fp
   27742:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27746:	f7ff fb7d 	bl	26e44 <__sprint_r.part.0>
   2774a:	2800      	cmp	r0, #0
   2774c:	f47f ad8d 	bne.w	2726a <_vfiprintf_r+0x3ae>
   27750:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27754:	3d10      	subs	r5, #16
   27756:	2d10      	cmp	r5, #16
   27758:	f100 0c01 	add.w	ip, r0, #1
   2775c:	dce4      	bgt.n	27728 <_vfiprintf_r+0x86c>
   2775e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   27760:	4661      	mov	r1, ip
   27762:	4a4a      	ldr	r2, [pc, #296]	; (2788c <_vfiprintf_r+0x9d0>)
   27764:	f8c9 5004 	str.w	r5, [r9, #4]
   27768:	442b      	add	r3, r5
   2776a:	2907      	cmp	r1, #7
   2776c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   27770:	f8c9 2000 	str.w	r2, [r9]
   27774:	f300 80e7 	bgt.w	27946 <_vfiprintf_r+0xa8a>
   27778:	f109 0908 	add.w	r9, r9, #8
   2777c:	3101      	adds	r1, #1
   2777e:	e5ed      	b.n	2735c <_vfiprintf_r+0x4a0>
   27780:	f04f 0c01 	mov.w	ip, #1
   27784:	4618      	mov	r0, r3
   27786:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2778a:	e7ca      	b.n	27722 <_vfiprintf_r+0x866>
   2778c:	f04f 0c01 	mov.w	ip, #1
   27790:	4618      	mov	r0, r3
   27792:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27796:	e772      	b.n	2767e <_vfiprintf_r+0x7c2>
   27798:	2b00      	cmp	r3, #0
   2779a:	f000 8104 	beq.w	279a6 <_vfiprintf_r+0xaea>
   2779e:	ee18 1a10 	vmov	r1, s16
   277a2:	aa18      	add	r2, sp, #96	; 0x60
   277a4:	4658      	mov	r0, fp
   277a6:	f7ff fb4d 	bl	26e44 <__sprint_r.part.0>
   277aa:	2800      	cmp	r0, #0
   277ac:	f47f ad5d 	bne.w	2726a <_vfiprintf_r+0x3ae>
   277b0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   277b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   277b8:	1c41      	adds	r1, r0, #1
   277ba:	e5a7      	b.n	2730c <_vfiprintf_r+0x450>
   277bc:	2302      	movs	r3, #2
   277be:	aa11      	add	r2, sp, #68	; 0x44
   277c0:	931c      	str	r3, [sp, #112]	; 0x70
   277c2:	921b      	str	r2, [sp, #108]	; 0x6c
   277c4:	2101      	movs	r1, #1
   277c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   277ca:	4608      	mov	r0, r1
   277cc:	f109 0908 	add.w	r9, r9, #8
   277d0:	1c41      	adds	r1, r0, #1
   277d2:	e5ba      	b.n	2734a <_vfiprintf_r+0x48e>
   277d4:	2d10      	cmp	r5, #16
   277d6:	f340 82e5 	ble.w	27da4 <_vfiprintf_r+0xee8>
   277da:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   277de:	940f      	str	r4, [sp, #60]	; 0x3c
   277e0:	4608      	mov	r0, r1
   277e2:	ee18 4a10 	vmov	r4, s16
   277e6:	e007      	b.n	277f8 <_vfiprintf_r+0x93c>
   277e8:	f100 0c02 	add.w	ip, r0, #2
   277ec:	f109 0908 	add.w	r9, r9, #8
   277f0:	4610      	mov	r0, r2
   277f2:	3d10      	subs	r5, #16
   277f4:	2d10      	cmp	r5, #16
   277f6:	dd1d      	ble.n	27834 <_vfiprintf_r+0x978>
   277f8:	4925      	ldr	r1, [pc, #148]	; (27890 <_vfiprintf_r+0x9d4>)
   277fa:	f8c9 1000 	str.w	r1, [r9]
   277fe:	1c42      	adds	r2, r0, #1
   27800:	3310      	adds	r3, #16
   27802:	2110      	movs	r1, #16
   27804:	2a07      	cmp	r2, #7
   27806:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   2780a:	f8c9 1004 	str.w	r1, [r9, #4]
   2780e:	ddeb      	ble.n	277e8 <_vfiprintf_r+0x92c>
   27810:	aa18      	add	r2, sp, #96	; 0x60
   27812:	b303      	cbz	r3, 27856 <_vfiprintf_r+0x99a>
   27814:	4621      	mov	r1, r4
   27816:	4658      	mov	r0, fp
   27818:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2781c:	f7ff fb12 	bl	26e44 <__sprint_r.part.0>
   27820:	2800      	cmp	r0, #0
   27822:	f47f ad22 	bne.w	2726a <_vfiprintf_r+0x3ae>
   27826:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   2782a:	3d10      	subs	r5, #16
   2782c:	2d10      	cmp	r5, #16
   2782e:	f100 0c01 	add.w	ip, r0, #1
   27832:	dce1      	bgt.n	277f8 <_vfiprintf_r+0x93c>
   27834:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   27836:	4660      	mov	r0, ip
   27838:	4a15      	ldr	r2, [pc, #84]	; (27890 <_vfiprintf_r+0x9d4>)
   2783a:	f8c9 5004 	str.w	r5, [r9, #4]
   2783e:	442b      	add	r3, r5
   27840:	2807      	cmp	r0, #7
   27842:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   27846:	f8c9 2000 	str.w	r2, [r9]
   2784a:	f300 80c1 	bgt.w	279d0 <_vfiprintf_r+0xb14>
   2784e:	f109 0908 	add.w	r9, r9, #8
   27852:	1c41      	adds	r1, r0, #1
   27854:	e546      	b.n	272e4 <_vfiprintf_r+0x428>
   27856:	4618      	mov	r0, r3
   27858:	f04f 0c01 	mov.w	ip, #1
   2785c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27860:	e7c7      	b.n	277f2 <_vfiprintf_r+0x936>
   27862:	0776      	lsls	r6, r6, #29
   27864:	9319      	str	r3, [sp, #100]	; 0x64
   27866:	d553      	bpl.n	27910 <_vfiprintf_r+0xa54>
   27868:	9a06      	ldr	r2, [sp, #24]
   2786a:	9903      	ldr	r1, [sp, #12]
   2786c:	1a54      	subs	r4, r2, r1
   2786e:	2c00      	cmp	r4, #0
   27870:	dd4e      	ble.n	27910 <_vfiprintf_r+0xa54>
   27872:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27876:	2c10      	cmp	r4, #16
   27878:	f340 82b0 	ble.w	27ddc <_vfiprintf_r+0xf20>
   2787c:	9919      	ldr	r1, [sp, #100]	; 0x64
   2787e:	ee18 6a10 	vmov	r6, s16
   27882:	2510      	movs	r5, #16
   27884:	e00d      	b.n	278a2 <_vfiprintf_r+0x9e6>
   27886:	bf00      	nop
   27888:	20004398 	.word	0x20004398
   2788c:	20008974 	.word	0x20008974
   27890:	20004bd8 	.word	0x20004bd8
   27894:	1c88      	adds	r0, r1, #2
   27896:	f109 0908 	add.w	r9, r9, #8
   2789a:	4611      	mov	r1, r2
   2789c:	3c10      	subs	r4, #16
   2789e:	2c10      	cmp	r4, #16
   278a0:	dd1a      	ble.n	278d8 <_vfiprintf_r+0xa1c>
   278a2:	1c4a      	adds	r2, r1, #1
   278a4:	48b3      	ldr	r0, [pc, #716]	; (27b74 <_vfiprintf_r+0xcb8>)
   278a6:	3310      	adds	r3, #16
   278a8:	2a07      	cmp	r2, #7
   278aa:	e9c9 0500 	strd	r0, r5, [r9]
   278ae:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   278b2:	ddef      	ble.n	27894 <_vfiprintf_r+0x9d8>
   278b4:	aa18      	add	r2, sp, #96	; 0x60
   278b6:	b333      	cbz	r3, 27906 <_vfiprintf_r+0xa4a>
   278b8:	4631      	mov	r1, r6
   278ba:	4658      	mov	r0, fp
   278bc:	f7ff fac2 	bl	26e44 <__sprint_r.part.0>
   278c0:	2800      	cmp	r0, #0
   278c2:	f47f acd2 	bne.w	2726a <_vfiprintf_r+0x3ae>
   278c6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   278ca:	3c10      	subs	r4, #16
   278cc:	2c10      	cmp	r4, #16
   278ce:	f101 0001 	add.w	r0, r1, #1
   278d2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   278d6:	dce4      	bgt.n	278a2 <_vfiprintf_r+0x9e6>
   278d8:	4aa6      	ldr	r2, [pc, #664]	; (27b74 <_vfiprintf_r+0xcb8>)
   278da:	f8c9 4004 	str.w	r4, [r9, #4]
   278de:	4423      	add	r3, r4
   278e0:	2807      	cmp	r0, #7
   278e2:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   278e6:	f8c9 2000 	str.w	r2, [r9]
   278ea:	f77f ad59 	ble.w	273a0 <_vfiprintf_r+0x4e4>
   278ee:	b17b      	cbz	r3, 27910 <_vfiprintf_r+0xa54>
   278f0:	ee18 1a10 	vmov	r1, s16
   278f4:	aa18      	add	r2, sp, #96	; 0x60
   278f6:	4658      	mov	r0, fp
   278f8:	f7ff faa4 	bl	26e44 <__sprint_r.part.0>
   278fc:	2800      	cmp	r0, #0
   278fe:	f47f acb4 	bne.w	2726a <_vfiprintf_r+0x3ae>
   27902:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27904:	e54c      	b.n	273a0 <_vfiprintf_r+0x4e4>
   27906:	2001      	movs	r0, #1
   27908:	4619      	mov	r1, r3
   2790a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2790e:	e7c5      	b.n	2789c <_vfiprintf_r+0x9e0>
   27910:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   27914:	9903      	ldr	r1, [sp, #12]
   27916:	428a      	cmp	r2, r1
   27918:	bfac      	ite	ge
   2791a:	189b      	addge	r3, r3, r2
   2791c:	185b      	addlt	r3, r3, r1
   2791e:	9305      	str	r3, [sp, #20]
   27920:	e549      	b.n	273b6 <_vfiprintf_r+0x4fa>
   27922:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   27926:	058f      	lsls	r7, r1, #22
   27928:	ee18 3a10 	vmov	r3, s16
   2792c:	b28a      	uxth	r2, r1
   2792e:	f53f aae8 	bmi.w	26f02 <_vfiprintf_r+0x46>
   27932:	ee18 5a10 	vmov	r5, s16
   27936:	6d98      	ldr	r0, [r3, #88]	; 0x58
   27938:	f7fa fea4 	bl	22684 <__retarget_lock_acquire_recursive>
   2793c:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   27940:	b28a      	uxth	r2, r1
   27942:	f7ff bade 	b.w	26f02 <_vfiprintf_r+0x46>
   27946:	2b00      	cmp	r3, #0
   27948:	f43f ae79 	beq.w	2763e <_vfiprintf_r+0x782>
   2794c:	ee18 1a10 	vmov	r1, s16
   27950:	aa18      	add	r2, sp, #96	; 0x60
   27952:	4658      	mov	r0, fp
   27954:	f7ff fa76 	bl	26e44 <__sprint_r.part.0>
   27958:	2800      	cmp	r0, #0
   2795a:	f47f ac86 	bne.w	2726a <_vfiprintf_r+0x3ae>
   2795e:	9919      	ldr	r1, [sp, #100]	; 0x64
   27960:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27962:	3101      	adds	r1, #1
   27964:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27968:	e4f8      	b.n	2735c <_vfiprintf_r+0x4a0>
   2796a:	9219      	str	r2, [sp, #100]	; 0x64
   2796c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27970:	e45e      	b.n	27230 <_vfiprintf_r+0x374>
   27972:	2f00      	cmp	r7, #0
   27974:	f47f abc3 	bne.w	270fe <_vfiprintf_r+0x242>
   27978:	9e03      	ldr	r6, [sp, #12]
   2797a:	2700      	movs	r7, #0
   2797c:	9704      	str	r7, [sp, #16]
   2797e:	ac44      	add	r4, sp, #272	; 0x110
   27980:	f7ff bbc5 	b.w	2710e <_vfiprintf_r+0x252>
   27984:	9b03      	ldr	r3, [sp, #12]
   27986:	f013 0310 	ands.w	r3, r3, #16
   2798a:	d154      	bne.n	27a36 <_vfiprintf_r+0xb7a>
   2798c:	9a03      	ldr	r2, [sp, #12]
   2798e:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   27992:	f000 816b 	beq.w	27c6c <_vfiprintf_r+0xdb0>
   27996:	9907      	ldr	r1, [sp, #28]
   27998:	461a      	mov	r2, r3
   2799a:	f851 3b04 	ldr.w	r3, [r1], #4
   2799e:	9107      	str	r1, [sp, #28]
   279a0:	b29b      	uxth	r3, r3
   279a2:	2101      	movs	r1, #1
   279a4:	e401      	b.n	271aa <_vfiprintf_r+0x2ee>
   279a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   279a8:	2a00      	cmp	r2, #0
   279aa:	d164      	bne.n	27a76 <_vfiprintf_r+0xbba>
   279ac:	4618      	mov	r0, r3
   279ae:	2101      	movs	r1, #1
   279b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   279b4:	e4c9      	b.n	2734a <_vfiprintf_r+0x48e>
   279b6:	2101      	movs	r1, #1
   279b8:	4618      	mov	r0, r3
   279ba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   279be:	e4c4      	b.n	2734a <_vfiprintf_r+0x48e>
   279c0:	425b      	negs	r3, r3
   279c2:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   279c6:	9603      	str	r6, [sp, #12]
   279c8:	202d      	movs	r0, #45	; 0x2d
   279ca:	2101      	movs	r1, #1
   279cc:	f7ff bbee 	b.w	271ac <_vfiprintf_r+0x2f0>
   279d0:	2b00      	cmp	r3, #0
   279d2:	f000 8088 	beq.w	27ae6 <_vfiprintf_r+0xc2a>
   279d6:	ee18 1a10 	vmov	r1, s16
   279da:	aa18      	add	r2, sp, #96	; 0x60
   279dc:	4658      	mov	r0, fp
   279de:	f7ff fa31 	bl	26e44 <__sprint_r.part.0>
   279e2:	2800      	cmp	r0, #0
   279e4:	f47f ac41 	bne.w	2726a <_vfiprintf_r+0x3ae>
   279e8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   279ec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   279f0:	1c41      	adds	r1, r0, #1
   279f2:	e477      	b.n	272e4 <_vfiprintf_r+0x428>
   279f4:	f898 1000 	ldrb.w	r1, [r8]
   279f8:	9307      	str	r3, [sp, #28]
   279fa:	f7ff bad2 	b.w	26fa2 <_vfiprintf_r+0xe6>
   279fe:	ac44      	add	r4, sp, #272	; 0x110
   27a00:	f7ff bb85 	b.w	2710e <_vfiprintf_r+0x252>
   27a04:	f109 0908 	add.w	r9, r9, #8
   27a08:	f10c 0101 	add.w	r1, ip, #1
   27a0c:	4660      	mov	r0, ip
   27a0e:	e4a0      	b.n	27352 <_vfiprintf_r+0x496>
   27a10:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   27a14:	f040 8197 	bne.w	27d46 <_vfiprintf_r+0xe8a>
   27a18:	f851 3b04 	ldr.w	r3, [r1], #4
   27a1c:	9107      	str	r1, [sp, #28]
   27a1e:	f7ff bbc0 	b.w	271a2 <_vfiprintf_r+0x2e6>
   27a22:	05b3      	lsls	r3, r6, #22
   27a24:	f100 8188 	bmi.w	27d38 <_vfiprintf_r+0xe7c>
   27a28:	f852 3b04 	ldr.w	r3, [r2], #4
   27a2c:	9207      	str	r2, [sp, #28]
   27a2e:	17da      	asrs	r2, r3, #31
   27a30:	4611      	mov	r1, r2
   27a32:	f7ff bb52 	b.w	270da <_vfiprintf_r+0x21e>
   27a36:	9907      	ldr	r1, [sp, #28]
   27a38:	f851 3b04 	ldr.w	r3, [r1], #4
   27a3c:	9107      	str	r1, [sp, #28]
   27a3e:	2101      	movs	r1, #1
   27a40:	f7ff bbb3 	b.w	271aa <_vfiprintf_r+0x2ee>
   27a44:	9b07      	ldr	r3, [sp, #28]
   27a46:	9805      	ldr	r0, [sp, #20]
   27a48:	f853 1b04 	ldr.w	r1, [r3], #4
   27a4c:	9307      	str	r3, [sp, #28]
   27a4e:	17c2      	asrs	r2, r0, #31
   27a50:	e9c1 0200 	strd	r0, r2, [r1]
   27a54:	f7ff ba7d 	b.w	26f52 <_vfiprintf_r+0x96>
   27a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27a5a:	2b00      	cmp	r3, #0
   27a5c:	f43f ab26 	beq.w	270ac <_vfiprintf_r+0x1f0>
   27a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27a62:	781b      	ldrb	r3, [r3, #0]
   27a64:	2b00      	cmp	r3, #0
   27a66:	f43f ab21 	beq.w	270ac <_vfiprintf_r+0x1f0>
   27a6a:	f898 1000 	ldrb.w	r1, [r8]
   27a6e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   27a72:	f7ff ba96 	b.w	26fa2 <_vfiprintf_r+0xe6>
   27a76:	2302      	movs	r3, #2
   27a78:	aa11      	add	r2, sp, #68	; 0x44
   27a7a:	931c      	str	r3, [sp, #112]	; 0x70
   27a7c:	921b      	str	r2, [sp, #108]	; 0x6c
   27a7e:	2001      	movs	r0, #1
   27a80:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27a84:	e6a2      	b.n	277cc <_vfiprintf_r+0x910>
   27a86:	9603      	str	r6, [sp, #12]
   27a88:	e571      	b.n	2756e <_vfiprintf_r+0x6b2>
   27a8a:	4b3b      	ldr	r3, [pc, #236]	; (27b78 <_vfiprintf_r+0xcbc>)
   27a8c:	930c      	str	r3, [sp, #48]	; 0x30
   27a8e:	f016 0220 	ands.w	r2, r6, #32
   27a92:	d059      	beq.n	27b48 <_vfiprintf_r+0xc8c>
   27a94:	9b07      	ldr	r3, [sp, #28]
   27a96:	3307      	adds	r3, #7
   27a98:	f023 0307 	bic.w	r3, r3, #7
   27a9c:	4618      	mov	r0, r3
   27a9e:	685a      	ldr	r2, [r3, #4]
   27aa0:	f850 3b08 	ldr.w	r3, [r0], #8
   27aa4:	9007      	str	r0, [sp, #28]
   27aa6:	07f4      	lsls	r4, r6, #31
   27aa8:	d509      	bpl.n	27abe <_vfiprintf_r+0xc02>
   27aaa:	ea53 0002 	orrs.w	r0, r3, r2
   27aae:	d006      	beq.n	27abe <_vfiprintf_r+0xc02>
   27ab0:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   27ab4:	2130      	movs	r1, #48	; 0x30
   27ab6:	f046 0602 	orr.w	r6, r6, #2
   27aba:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   27abe:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   27ac2:	9103      	str	r1, [sp, #12]
   27ac4:	2102      	movs	r1, #2
   27ac6:	f7ff bb70 	b.w	271aa <_vfiprintf_r+0x2ee>
   27aca:	4b2c      	ldr	r3, [pc, #176]	; (27b7c <_vfiprintf_r+0xcc0>)
   27acc:	930c      	str	r3, [sp, #48]	; 0x30
   27ace:	e7de      	b.n	27a8e <_vfiprintf_r+0xbd2>
   27ad0:	9b07      	ldr	r3, [sp, #28]
   27ad2:	2101      	movs	r1, #1
   27ad4:	f853 2b04 	ldr.w	r2, [r3], #4
   27ad8:	9103      	str	r1, [sp, #12]
   27ada:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   27ade:	9307      	str	r3, [sp, #28]
   27ae0:	9104      	str	r1, [sp, #16]
   27ae2:	ac2b      	add	r4, sp, #172	; 0xac
   27ae4:	e4df      	b.n	274a6 <_vfiprintf_r+0x5ea>
   27ae6:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   27aea:	2a00      	cmp	r2, #0
   27aec:	f040 8132 	bne.w	27d54 <_vfiprintf_r+0xe98>
   27af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27af2:	2a00      	cmp	r2, #0
   27af4:	f47f ae62 	bne.w	277bc <_vfiprintf_r+0x900>
   27af8:	4618      	mov	r0, r3
   27afa:	2101      	movs	r1, #1
   27afc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27b00:	e427      	b.n	27352 <_vfiprintf_r+0x496>
   27b02:	2100      	movs	r1, #0
   27b04:	2208      	movs	r2, #8
   27b06:	a816      	add	r0, sp, #88	; 0x58
   27b08:	9413      	str	r4, [sp, #76]	; 0x4c
   27b0a:	f7fa fbf9 	bl	22300 <memset>
   27b0e:	1c79      	adds	r1, r7, #1
   27b10:	f000 80bc 	beq.w	27c8c <_vfiprintf_r+0xdd0>
   27b14:	2500      	movs	r5, #0
   27b16:	9407      	str	r4, [sp, #28]
   27b18:	462c      	mov	r4, r5
   27b1a:	e00c      	b.n	27b36 <_vfiprintf_r+0xc7a>
   27b1c:	a92b      	add	r1, sp, #172	; 0xac
   27b1e:	4658      	mov	r0, fp
   27b20:	f7fe f928 	bl	25d74 <_wcrtomb_r>
   27b24:	1c42      	adds	r2, r0, #1
   27b26:	4420      	add	r0, r4
   27b28:	f000 816b 	beq.w	27e02 <_vfiprintf_r+0xf46>
   27b2c:	42b8      	cmp	r0, r7
   27b2e:	dc08      	bgt.n	27b42 <_vfiprintf_r+0xc86>
   27b30:	f000 8170 	beq.w	27e14 <_vfiprintf_r+0xf58>
   27b34:	4604      	mov	r4, r0
   27b36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   27b38:	5952      	ldr	r2, [r2, r5]
   27b3a:	ab16      	add	r3, sp, #88	; 0x58
   27b3c:	3504      	adds	r5, #4
   27b3e:	2a00      	cmp	r2, #0
   27b40:	d1ec      	bne.n	27b1c <_vfiprintf_r+0xc60>
   27b42:	9404      	str	r4, [sp, #16]
   27b44:	9c07      	ldr	r4, [sp, #28]
   27b46:	e0af      	b.n	27ca8 <_vfiprintf_r+0xdec>
   27b48:	f016 0310 	ands.w	r3, r6, #16
   27b4c:	9807      	ldr	r0, [sp, #28]
   27b4e:	d10c      	bne.n	27b6a <_vfiprintf_r+0xcae>
   27b50:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   27b54:	d005      	beq.n	27b62 <_vfiprintf_r+0xca6>
   27b56:	461a      	mov	r2, r3
   27b58:	f850 3b04 	ldr.w	r3, [r0], #4
   27b5c:	9007      	str	r0, [sp, #28]
   27b5e:	b29b      	uxth	r3, r3
   27b60:	e7a1      	b.n	27aa6 <_vfiprintf_r+0xbea>
   27b62:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   27b66:	f040 80e1 	bne.w	27d2c <_vfiprintf_r+0xe70>
   27b6a:	f850 3b04 	ldr.w	r3, [r0], #4
   27b6e:	9007      	str	r0, [sp, #28]
   27b70:	e799      	b.n	27aa6 <_vfiprintf_r+0xbea>
   27b72:	bf00      	nop
   27b74:	20004bd8 	.word	0x20004bd8
   27b78:	20004398 	.word	0x20004398
   27b7c:	200043ac 	.word	0x200043ac
   27b80:	9903      	ldr	r1, [sp, #12]
   27b82:	9704      	str	r7, [sp, #16]
   27b84:	ac44      	add	r4, sp, #272	; 0x110
   27b86:	469e      	mov	lr, r3
   27b88:	ee08 ba90 	vmov	s17, fp
   27b8c:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   27b90:	f04f 0c00 	mov.w	ip, #0
   27b94:	4623      	mov	r3, r4
   27b96:	e006      	b.n	27ba6 <_vfiprintf_r+0xcea>
   27b98:	f1be 0f0a 	cmp.w	lr, #10
   27b9c:	f172 0200 	sbcs.w	r2, r2, #0
   27ba0:	d339      	bcc.n	27c16 <_vfiprintf_r+0xd5a>
   27ba2:	46a6      	mov	lr, r4
   27ba4:	462a      	mov	r2, r5
   27ba6:	49a6      	ldr	r1, [pc, #664]	; (27e40 <_vfiprintf_r+0xf84>)
   27ba8:	eb1e 0002 	adds.w	r0, lr, r2
   27bac:	f140 0000 	adc.w	r0, r0, #0
   27bb0:	460f      	mov	r7, r1
   27bb2:	fba1 1400 	umull	r1, r4, r1, r0
   27bb6:	f024 0103 	bic.w	r1, r4, #3
   27bba:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   27bbe:	1a40      	subs	r0, r0, r1
   27bc0:	ebbe 0100 	subs.w	r1, lr, r0
   27bc4:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   27bc8:	f162 0400 	sbc.w	r4, r2, #0
   27bcc:	fb05 f501 	mul.w	r5, r5, r1
   27bd0:	fb07 5504 	mla	r5, r7, r4, r5
   27bd4:	fba1 4107 	umull	r4, r1, r1, r7
   27bd8:	440d      	add	r5, r1
   27bda:	2705      	movs	r7, #5
   27bdc:	f004 0101 	and.w	r1, r4, #1
   27be0:	fba1 1b07 	umull	r1, fp, r1, r7
   27be4:	1809      	adds	r1, r1, r0
   27be6:	0864      	lsrs	r4, r4, #1
   27be8:	3130      	adds	r1, #48	; 0x30
   27bea:	f803 1c01 	strb.w	r1, [r3, #-1]
   27bee:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   27bf2:	f10c 0c01 	add.w	ip, ip, #1
   27bf6:	3b01      	subs	r3, #1
   27bf8:	086d      	lsrs	r5, r5, #1
   27bfa:	2e00      	cmp	r6, #0
   27bfc:	d0cc      	beq.n	27b98 <_vfiprintf_r+0xcdc>
   27bfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   27c00:	7809      	ldrb	r1, [r1, #0]
   27c02:	4561      	cmp	r1, ip
   27c04:	d1c8      	bne.n	27b98 <_vfiprintf_r+0xcdc>
   27c06:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   27c0a:	d0c5      	beq.n	27b98 <_vfiprintf_r+0xcdc>
   27c0c:	f1be 0f0a 	cmp.w	lr, #10
   27c10:	f172 0200 	sbcs.w	r2, r2, #0
   27c14:	d26c      	bcs.n	27cf0 <_vfiprintf_r+0xe34>
   27c16:	461c      	mov	r4, r3
   27c18:	ab44      	add	r3, sp, #272	; 0x110
   27c1a:	1b1b      	subs	r3, r3, r4
   27c1c:	9f04      	ldr	r7, [sp, #16]
   27c1e:	9e03      	ldr	r6, [sp, #12]
   27c20:	9304      	str	r3, [sp, #16]
   27c22:	ee18 ba90 	vmov	fp, s17
   27c26:	f7ff ba72 	b.w	2710e <_vfiprintf_r+0x252>
   27c2a:	9603      	str	r6, [sp, #12]
   27c2c:	f7ff ba62 	b.w	270f4 <_vfiprintf_r+0x238>
   27c30:	4658      	mov	r0, fp
   27c32:	f7fa fa37 	bl	220a4 <__sinit>
   27c36:	f7ff b95b 	b.w	26ef0 <_vfiprintf_r+0x34>
   27c3a:	2901      	cmp	r1, #1
   27c3c:	9603      	str	r6, [sp, #12]
   27c3e:	f47f accd 	bne.w	275dc <_vfiprintf_r+0x720>
   27c42:	f7ff ba5c 	b.w	270fe <_vfiprintf_r+0x242>
   27c46:	9b07      	ldr	r3, [sp, #28]
   27c48:	9905      	ldr	r1, [sp, #20]
   27c4a:	f853 2b04 	ldr.w	r2, [r3], #4
   27c4e:	6011      	str	r1, [r2, #0]
   27c50:	9307      	str	r3, [sp, #28]
   27c52:	f7ff b97e 	b.w	26f52 <_vfiprintf_r+0x96>
   27c56:	2f06      	cmp	r7, #6
   27c58:	463b      	mov	r3, r7
   27c5a:	9a03      	ldr	r2, [sp, #12]
   27c5c:	4c79      	ldr	r4, [pc, #484]	; (27e44 <_vfiprintf_r+0xf88>)
   27c5e:	9207      	str	r2, [sp, #28]
   27c60:	bf28      	it	cs
   27c62:	2306      	movcs	r3, #6
   27c64:	9304      	str	r3, [sp, #16]
   27c66:	9303      	str	r3, [sp, #12]
   27c68:	f7ff bb25 	b.w	272b6 <_vfiprintf_r+0x3fa>
   27c6c:	9b03      	ldr	r3, [sp, #12]
   27c6e:	9907      	ldr	r1, [sp, #28]
   27c70:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   27c74:	bf14      	ite	ne
   27c76:	f851 3b04 	ldrne.w	r3, [r1], #4
   27c7a:	f851 3b04 	ldreq.w	r3, [r1], #4
   27c7e:	9107      	str	r1, [sp, #28]
   27c80:	bf1c      	itt	ne
   27c82:	4602      	movne	r2, r0
   27c84:	b2db      	uxtbne	r3, r3
   27c86:	2101      	movs	r1, #1
   27c88:	f7ff ba8f 	b.w	271aa <_vfiprintf_r+0x2ee>
   27c8c:	ab16      	add	r3, sp, #88	; 0x58
   27c8e:	9300      	str	r3, [sp, #0]
   27c90:	2300      	movs	r3, #0
   27c92:	4619      	mov	r1, r3
   27c94:	aa13      	add	r2, sp, #76	; 0x4c
   27c96:	4658      	mov	r0, fp
   27c98:	f7fe f892 	bl	25dc0 <_wcsrtombs_r>
   27c9c:	4603      	mov	r3, r0
   27c9e:	3301      	adds	r3, #1
   27ca0:	9004      	str	r0, [sp, #16]
   27ca2:	f000 80ae 	beq.w	27e02 <_vfiprintf_r+0xf46>
   27ca6:	9413      	str	r4, [sp, #76]	; 0x4c
   27ca8:	9b04      	ldr	r3, [sp, #16]
   27caa:	2b00      	cmp	r3, #0
   27cac:	d030      	beq.n	27d10 <_vfiprintf_r+0xe54>
   27cae:	2b63      	cmp	r3, #99	; 0x63
   27cb0:	dc63      	bgt.n	27d7a <_vfiprintf_r+0xebe>
   27cb2:	2300      	movs	r3, #0
   27cb4:	9308      	str	r3, [sp, #32]
   27cb6:	ac2b      	add	r4, sp, #172	; 0xac
   27cb8:	2208      	movs	r2, #8
   27cba:	2100      	movs	r1, #0
   27cbc:	a816      	add	r0, sp, #88	; 0x58
   27cbe:	f7fa fb1f 	bl	22300 <memset>
   27cc2:	9d04      	ldr	r5, [sp, #16]
   27cc4:	ab16      	add	r3, sp, #88	; 0x58
   27cc6:	9300      	str	r3, [sp, #0]
   27cc8:	aa13      	add	r2, sp, #76	; 0x4c
   27cca:	462b      	mov	r3, r5
   27ccc:	4621      	mov	r1, r4
   27cce:	4658      	mov	r0, fp
   27cd0:	f7fe f876 	bl	25dc0 <_wcsrtombs_r>
   27cd4:	4285      	cmp	r5, r0
   27cd6:	f040 80ab 	bne.w	27e30 <_vfiprintf_r+0xf74>
   27cda:	9b03      	ldr	r3, [sp, #12]
   27cdc:	9a04      	ldr	r2, [sp, #16]
   27cde:	9307      	str	r3, [sp, #28]
   27ce0:	2300      	movs	r3, #0
   27ce2:	54a3      	strb	r3, [r4, r2]
   27ce4:	461f      	mov	r7, r3
   27ce6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   27cea:	9303      	str	r3, [sp, #12]
   27cec:	f7ff ba16 	b.w	2711c <_vfiprintf_r+0x260>
   27cf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   27cf2:	990d      	ldr	r1, [sp, #52]	; 0x34
   27cf4:	1a9b      	subs	r3, r3, r2
   27cf6:	4618      	mov	r0, r3
   27cf8:	9308      	str	r3, [sp, #32]
   27cfa:	f7fa fb99 	bl	22430 <strncpy>
   27cfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   27d00:	9b08      	ldr	r3, [sp, #32]
   27d02:	784a      	ldrb	r2, [r1, #1]
   27d04:	b10a      	cbz	r2, 27d0a <_vfiprintf_r+0xe4e>
   27d06:	3101      	adds	r1, #1
   27d08:	910b      	str	r1, [sp, #44]	; 0x2c
   27d0a:	f04f 0c00 	mov.w	ip, #0
   27d0e:	e748      	b.n	27ba2 <_vfiprintf_r+0xce6>
   27d10:	9b03      	ldr	r3, [sp, #12]
   27d12:	9307      	str	r3, [sp, #28]
   27d14:	9b04      	ldr	r3, [sp, #16]
   27d16:	9303      	str	r3, [sp, #12]
   27d18:	461f      	mov	r7, r3
   27d1a:	9308      	str	r3, [sp, #32]
   27d1c:	f7ff b9fe 	b.w	2711c <_vfiprintf_r+0x260>
   27d20:	2101      	movs	r1, #1
   27d22:	4618      	mov	r0, r3
   27d24:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27d28:	f7ff bb13 	b.w	27352 <_vfiprintf_r+0x496>
   27d2c:	f850 3b04 	ldr.w	r3, [r0], #4
   27d30:	9007      	str	r0, [sp, #28]
   27d32:	4622      	mov	r2, r4
   27d34:	b2db      	uxtb	r3, r3
   27d36:	e6b6      	b.n	27aa6 <_vfiprintf_r+0xbea>
   27d38:	f912 3b04 	ldrsb.w	r3, [r2], #4
   27d3c:	9207      	str	r2, [sp, #28]
   27d3e:	17da      	asrs	r2, r3, #31
   27d40:	4611      	mov	r1, r2
   27d42:	f7ff b9ca 	b.w	270da <_vfiprintf_r+0x21e>
   27d46:	f851 3b04 	ldr.w	r3, [r1], #4
   27d4a:	9107      	str	r1, [sp, #28]
   27d4c:	4602      	mov	r2, r0
   27d4e:	b2db      	uxtb	r3, r3
   27d50:	f7ff ba27 	b.w	271a2 <_vfiprintf_r+0x2e6>
   27d54:	2301      	movs	r3, #1
   27d56:	931c      	str	r3, [sp, #112]	; 0x70
   27d58:	2101      	movs	r1, #1
   27d5a:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   27d5e:	931b      	str	r3, [sp, #108]	; 0x6c
   27d60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27d64:	460b      	mov	r3, r1
   27d66:	f7ff bacd 	b.w	27304 <_vfiprintf_r+0x448>
   27d6a:	9b07      	ldr	r3, [sp, #28]
   27d6c:	9905      	ldr	r1, [sp, #20]
   27d6e:	f853 2b04 	ldr.w	r2, [r3], #4
   27d72:	9307      	str	r3, [sp, #28]
   27d74:	8011      	strh	r1, [r2, #0]
   27d76:	f7ff b8ec 	b.w	26f52 <_vfiprintf_r+0x96>
   27d7a:	1c59      	adds	r1, r3, #1
   27d7c:	4658      	mov	r0, fp
   27d7e:	f7f8 fbbd 	bl	204fc <_malloc_r>
   27d82:	4604      	mov	r4, r0
   27d84:	2800      	cmp	r0, #0
   27d86:	d03c      	beq.n	27e02 <_vfiprintf_r+0xf46>
   27d88:	9008      	str	r0, [sp, #32]
   27d8a:	e795      	b.n	27cb8 <_vfiprintf_r+0xdfc>
   27d8c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   27d8e:	f7fa fc7b 	bl	22688 <__retarget_lock_release_recursive>
   27d92:	f7ff b9e9 	b.w	27168 <_vfiprintf_r+0x2ac>
   27d96:	9b03      	ldr	r3, [sp, #12]
   27d98:	9307      	str	r3, [sp, #28]
   27d9a:	e9cd 7703 	strd	r7, r7, [sp, #12]
   27d9e:	9f08      	ldr	r7, [sp, #32]
   27da0:	f7ff b9bc 	b.w	2711c <_vfiprintf_r+0x260>
   27da4:	9819      	ldr	r0, [sp, #100]	; 0x64
   27da6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27da8:	3001      	adds	r0, #1
   27daa:	e545      	b.n	27838 <_vfiprintf_r+0x97c>
   27dac:	9b03      	ldr	r3, [sp, #12]
   27dae:	9307      	str	r3, [sp, #28]
   27db0:	4620      	mov	r0, r4
   27db2:	f7fa fcc5 	bl	22740 <strlen>
   27db6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   27dba:	462f      	mov	r7, r5
   27dbc:	9004      	str	r0, [sp, #16]
   27dbe:	9303      	str	r3, [sp, #12]
   27dc0:	9508      	str	r5, [sp, #32]
   27dc2:	f7ff b9ab 	b.w	2711c <_vfiprintf_r+0x260>
   27dc6:	ee18 1a10 	vmov	r1, s16
   27dca:	aa18      	add	r2, sp, #96	; 0x60
   27dcc:	4658      	mov	r0, fp
   27dce:	f7ff f839 	bl	26e44 <__sprint_r.part.0>
   27dd2:	2800      	cmp	r0, #0
   27dd4:	f43f aa36 	beq.w	27244 <_vfiprintf_r+0x388>
   27dd8:	f7ff ba4d 	b.w	27276 <_vfiprintf_r+0x3ba>
   27ddc:	9819      	ldr	r0, [sp, #100]	; 0x64
   27dde:	3001      	adds	r0, #1
   27de0:	e57a      	b.n	278d8 <_vfiprintf_r+0xa1c>
   27de2:	468c      	mov	ip, r1
   27de4:	e46e      	b.n	276c4 <_vfiprintf_r+0x808>
   27de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   27de8:	07d9      	lsls	r1, r3, #31
   27dea:	d405      	bmi.n	27df8 <_vfiprintf_r+0xf3c>
   27dec:	89ab      	ldrh	r3, [r5, #12]
   27dee:	059a      	lsls	r2, r3, #22
   27df0:	d402      	bmi.n	27df8 <_vfiprintf_r+0xf3c>
   27df2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   27df4:	f7fa fc48 	bl	22688 <__retarget_lock_release_recursive>
   27df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27dfc:	9305      	str	r3, [sp, #20]
   27dfe:	f7ff ba49 	b.w	27294 <_vfiprintf_r+0x3d8>
   27e02:	ee18 2a10 	vmov	r2, s16
   27e06:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   27e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27e0e:	8193      	strh	r3, [r2, #12]
   27e10:	f7ff ba35 	b.w	2727e <_vfiprintf_r+0x3c2>
   27e14:	9c07      	ldr	r4, [sp, #28]
   27e16:	9704      	str	r7, [sp, #16]
   27e18:	e746      	b.n	27ca8 <_vfiprintf_r+0xdec>
   27e1a:	9b07      	ldr	r3, [sp, #28]
   27e1c:	f898 1001 	ldrb.w	r1, [r8, #1]
   27e20:	f853 7b04 	ldr.w	r7, [r3], #4
   27e24:	9307      	str	r3, [sp, #28]
   27e26:	4690      	mov	r8, r2
   27e28:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   27e2c:	f7ff b8b9 	b.w	26fa2 <_vfiprintf_r+0xe6>
   27e30:	ee18 2a10 	vmov	r2, s16
   27e34:	8993      	ldrh	r3, [r2, #12]
   27e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27e3a:	8193      	strh	r3, [r2, #12]
   27e3c:	f7ff ba15 	b.w	2726a <_vfiprintf_r+0x3ae>
   27e40:	cccccccd 	.word	0xcccccccd
   27e44:	200043c0 	.word	0x200043c0

00027e48 <__sbprintf>:
   27e48:	b570      	push	{r4, r5, r6, lr}
   27e4a:	460c      	mov	r4, r1
   27e4c:	8989      	ldrh	r1, [r1, #12]
   27e4e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   27e52:	f021 0102 	bic.w	r1, r1, #2
   27e56:	f8ad 1014 	strh.w	r1, [sp, #20]
   27e5a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   27e5c:	911b      	str	r1, [sp, #108]	; 0x6c
   27e5e:	89e1      	ldrh	r1, [r4, #14]
   27e60:	f8ad 1016 	strh.w	r1, [sp, #22]
   27e64:	69e1      	ldr	r1, [r4, #28]
   27e66:	9109      	str	r1, [sp, #36]	; 0x24
   27e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
   27e6a:	910b      	str	r1, [sp, #44]	; 0x2c
   27e6c:	a91c      	add	r1, sp, #112	; 0x70
   27e6e:	9102      	str	r1, [sp, #8]
   27e70:	9106      	str	r1, [sp, #24]
   27e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
   27e76:	4606      	mov	r6, r0
   27e78:	9104      	str	r1, [sp, #16]
   27e7a:	9107      	str	r1, [sp, #28]
   27e7c:	a818      	add	r0, sp, #96	; 0x60
   27e7e:	2100      	movs	r1, #0
   27e80:	e9cd 3200 	strd	r3, r2, [sp]
   27e84:	9108      	str	r1, [sp, #32]
   27e86:	f7fa fbf9 	bl	2267c <__retarget_lock_init_recursive>
   27e8a:	e9dd 3200 	ldrd	r3, r2, [sp]
   27e8e:	a902      	add	r1, sp, #8
   27e90:	4630      	mov	r0, r6
   27e92:	f7ff f813 	bl	26ebc <_vfiprintf_r>
   27e96:	1e05      	subs	r5, r0, #0
   27e98:	db07      	blt.n	27eaa <__sbprintf+0x62>
   27e9a:	a902      	add	r1, sp, #8
   27e9c:	4630      	mov	r0, r6
   27e9e:	f7fd fe57 	bl	25b50 <_fflush_r>
   27ea2:	2800      	cmp	r0, #0
   27ea4:	bf18      	it	ne
   27ea6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   27eaa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   27eae:	065b      	lsls	r3, r3, #25
   27eb0:	d503      	bpl.n	27eba <__sbprintf+0x72>
   27eb2:	89a3      	ldrh	r3, [r4, #12]
   27eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27eb8:	81a3      	strh	r3, [r4, #12]
   27eba:	9818      	ldr	r0, [sp, #96]	; 0x60
   27ebc:	f7fa fbe0 	bl	22680 <__retarget_lock_close_recursive>
   27ec0:	4628      	mov	r0, r5
   27ec2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   27ec6:	bd70      	pop	{r4, r5, r6, pc}

00027ec8 <__sfvwrite_r>:
   27ec8:	6893      	ldr	r3, [r2, #8]
   27eca:	2b00      	cmp	r3, #0
   27ecc:	f000 8085 	beq.w	27fda <__sfvwrite_r+0x112>
   27ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ed4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   27ed8:	460c      	mov	r4, r1
   27eda:	0719      	lsls	r1, r3, #28
   27edc:	4680      	mov	r8, r0
   27ede:	b083      	sub	sp, #12
   27ee0:	4617      	mov	r7, r2
   27ee2:	b298      	uxth	r0, r3
   27ee4:	d525      	bpl.n	27f32 <__sfvwrite_r+0x6a>
   27ee6:	6923      	ldr	r3, [r4, #16]
   27ee8:	b31b      	cbz	r3, 27f32 <__sfvwrite_r+0x6a>
   27eea:	f010 0302 	ands.w	r3, r0, #2
   27eee:	683d      	ldr	r5, [r7, #0]
   27ef0:	d02d      	beq.n	27f4e <__sfvwrite_r+0x86>
   27ef2:	f04f 0a00 	mov.w	sl, #0
   27ef6:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 281b8 <__sfvwrite_r+0x2f0>
   27efa:	4656      	mov	r6, sl
   27efc:	46b9      	mov	r9, r7
   27efe:	455e      	cmp	r6, fp
   27f00:	4633      	mov	r3, r6
   27f02:	4652      	mov	r2, sl
   27f04:	bf28      	it	cs
   27f06:	465b      	movcs	r3, fp
   27f08:	4640      	mov	r0, r8
   27f0a:	2e00      	cmp	r6, #0
   27f0c:	d052      	beq.n	27fb4 <__sfvwrite_r+0xec>
   27f0e:	69e1      	ldr	r1, [r4, #28]
   27f10:	6a67      	ldr	r7, [r4, #36]	; 0x24
   27f12:	47b8      	blx	r7
   27f14:	2800      	cmp	r0, #0
   27f16:	dd56      	ble.n	27fc6 <__sfvwrite_r+0xfe>
   27f18:	f8d9 3008 	ldr.w	r3, [r9, #8]
   27f1c:	1a1b      	subs	r3, r3, r0
   27f1e:	4482      	add	sl, r0
   27f20:	1a36      	subs	r6, r6, r0
   27f22:	f8c9 3008 	str.w	r3, [r9, #8]
   27f26:	2b00      	cmp	r3, #0
   27f28:	d1e9      	bne.n	27efe <__sfvwrite_r+0x36>
   27f2a:	2000      	movs	r0, #0
   27f2c:	b003      	add	sp, #12
   27f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f32:	4621      	mov	r1, r4
   27f34:	4640      	mov	r0, r8
   27f36:	f000 f941 	bl	281bc <__swsetup_r>
   27f3a:	2800      	cmp	r0, #0
   27f3c:	f040 8138 	bne.w	281b0 <__sfvwrite_r+0x2e8>
   27f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27f44:	683d      	ldr	r5, [r7, #0]
   27f46:	b298      	uxth	r0, r3
   27f48:	f010 0302 	ands.w	r3, r0, #2
   27f4c:	d1d1      	bne.n	27ef2 <__sfvwrite_r+0x2a>
   27f4e:	f010 0901 	ands.w	r9, r0, #1
   27f52:	d144      	bne.n	27fde <__sfvwrite_r+0x116>
   27f54:	464e      	mov	r6, r9
   27f56:	9700      	str	r7, [sp, #0]
   27f58:	b346      	cbz	r6, 27fac <__sfvwrite_r+0xe4>
   27f5a:	0582      	lsls	r2, r0, #22
   27f5c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   27f60:	f140 8085 	bpl.w	2806e <__sfvwrite_r+0x1a6>
   27f64:	45b3      	cmp	fp, r6
   27f66:	465a      	mov	r2, fp
   27f68:	f200 80b4 	bhi.w	280d4 <__sfvwrite_r+0x20c>
   27f6c:	f410 6f90 	tst.w	r0, #1152	; 0x480
   27f70:	f040 80c1 	bne.w	280f6 <__sfvwrite_r+0x22e>
   27f74:	6820      	ldr	r0, [r4, #0]
   27f76:	9201      	str	r2, [sp, #4]
   27f78:	4649      	mov	r1, r9
   27f7a:	f7fa f945 	bl	22208 <memmove>
   27f7e:	68a3      	ldr	r3, [r4, #8]
   27f80:	9a01      	ldr	r2, [sp, #4]
   27f82:	eba3 010b 	sub.w	r1, r3, fp
   27f86:	6823      	ldr	r3, [r4, #0]
   27f88:	60a1      	str	r1, [r4, #8]
   27f8a:	4413      	add	r3, r2
   27f8c:	46b2      	mov	sl, r6
   27f8e:	6023      	str	r3, [r4, #0]
   27f90:	2600      	movs	r6, #0
   27f92:	9a00      	ldr	r2, [sp, #0]
   27f94:	6893      	ldr	r3, [r2, #8]
   27f96:	eba3 030a 	sub.w	r3, r3, sl
   27f9a:	44d1      	add	r9, sl
   27f9c:	6093      	str	r3, [r2, #8]
   27f9e:	2b00      	cmp	r3, #0
   27fa0:	d0c3      	beq.n	27f2a <__sfvwrite_r+0x62>
   27fa2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   27fa6:	b280      	uxth	r0, r0
   27fa8:	2e00      	cmp	r6, #0
   27faa:	d1d6      	bne.n	27f5a <__sfvwrite_r+0x92>
   27fac:	e9d5 9600 	ldrd	r9, r6, [r5]
   27fb0:	3508      	adds	r5, #8
   27fb2:	e7d1      	b.n	27f58 <__sfvwrite_r+0x90>
   27fb4:	e9d5 a600 	ldrd	sl, r6, [r5]
   27fb8:	3508      	adds	r5, #8
   27fba:	e7a0      	b.n	27efe <__sfvwrite_r+0x36>
   27fbc:	4621      	mov	r1, r4
   27fbe:	4640      	mov	r0, r8
   27fc0:	f7fd fdc6 	bl	25b50 <_fflush_r>
   27fc4:	b388      	cbz	r0, 2802a <__sfvwrite_r+0x162>
   27fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27fce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27fd2:	81a3      	strh	r3, [r4, #12]
   27fd4:	b003      	add	sp, #12
   27fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27fda:	2000      	movs	r0, #0
   27fdc:	4770      	bx	lr
   27fde:	461e      	mov	r6, r3
   27fe0:	46ba      	mov	sl, r7
   27fe2:	4699      	mov	r9, r3
   27fe4:	4618      	mov	r0, r3
   27fe6:	9500      	str	r5, [sp, #0]
   27fe8:	461f      	mov	r7, r3
   27fea:	b366      	cbz	r6, 28046 <__sfvwrite_r+0x17e>
   27fec:	2800      	cmp	r0, #0
   27fee:	d032      	beq.n	28056 <__sfvwrite_r+0x18e>
   27ff0:	464a      	mov	r2, r9
   27ff2:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   27ff6:	6820      	ldr	r0, [r4, #0]
   27ff8:	68a5      	ldr	r5, [r4, #8]
   27ffa:	42b2      	cmp	r2, r6
   27ffc:	bf28      	it	cs
   27ffe:	4632      	movcs	r2, r6
   28000:	4288      	cmp	r0, r1
   28002:	d904      	bls.n	2800e <__sfvwrite_r+0x146>
   28004:	eb05 0b03 	add.w	fp, r5, r3
   28008:	455a      	cmp	r2, fp
   2800a:	f300 80a7 	bgt.w	2815c <__sfvwrite_r+0x294>
   2800e:	4293      	cmp	r3, r2
   28010:	dc64      	bgt.n	280dc <__sfvwrite_r+0x214>
   28012:	69e1      	ldr	r1, [r4, #28]
   28014:	6a65      	ldr	r5, [r4, #36]	; 0x24
   28016:	463a      	mov	r2, r7
   28018:	4640      	mov	r0, r8
   2801a:	47a8      	blx	r5
   2801c:	f1b0 0b00 	subs.w	fp, r0, #0
   28020:	ddd1      	ble.n	27fc6 <__sfvwrite_r+0xfe>
   28022:	ebb9 090b 	subs.w	r9, r9, fp
   28026:	d0c9      	beq.n	27fbc <__sfvwrite_r+0xf4>
   28028:	2001      	movs	r0, #1
   2802a:	f8da 3008 	ldr.w	r3, [sl, #8]
   2802e:	eba3 030b 	sub.w	r3, r3, fp
   28032:	445f      	add	r7, fp
   28034:	eba6 060b 	sub.w	r6, r6, fp
   28038:	f8ca 3008 	str.w	r3, [sl, #8]
   2803c:	2b00      	cmp	r3, #0
   2803e:	f43f af74 	beq.w	27f2a <__sfvwrite_r+0x62>
   28042:	2e00      	cmp	r6, #0
   28044:	d1d2      	bne.n	27fec <__sfvwrite_r+0x124>
   28046:	9a00      	ldr	r2, [sp, #0]
   28048:	6856      	ldr	r6, [r2, #4]
   2804a:	4613      	mov	r3, r2
   2804c:	3208      	adds	r2, #8
   2804e:	9200      	str	r2, [sp, #0]
   28050:	2e00      	cmp	r6, #0
   28052:	d0f8      	beq.n	28046 <__sfvwrite_r+0x17e>
   28054:	681f      	ldr	r7, [r3, #0]
   28056:	4632      	mov	r2, r6
   28058:	210a      	movs	r1, #10
   2805a:	4638      	mov	r0, r7
   2805c:	f7fa fb18 	bl	22690 <memchr>
   28060:	2800      	cmp	r0, #0
   28062:	f000 809c 	beq.w	2819e <__sfvwrite_r+0x2d6>
   28066:	3001      	adds	r0, #1
   28068:	eba0 0907 	sub.w	r9, r0, r7
   2806c:	e7c0      	b.n	27ff0 <__sfvwrite_r+0x128>
   2806e:	6820      	ldr	r0, [r4, #0]
   28070:	6923      	ldr	r3, [r4, #16]
   28072:	4298      	cmp	r0, r3
   28074:	d816      	bhi.n	280a4 <__sfvwrite_r+0x1dc>
   28076:	6962      	ldr	r2, [r4, #20]
   28078:	42b2      	cmp	r2, r6
   2807a:	d813      	bhi.n	280a4 <__sfvwrite_r+0x1dc>
   2807c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   28080:	42b3      	cmp	r3, r6
   28082:	bf28      	it	cs
   28084:	4633      	movcs	r3, r6
   28086:	69e1      	ldr	r1, [r4, #28]
   28088:	fb93 f3f2 	sdiv	r3, r3, r2
   2808c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2808e:	fb02 f303 	mul.w	r3, r2, r3
   28092:	4640      	mov	r0, r8
   28094:	464a      	mov	r2, r9
   28096:	47b8      	blx	r7
   28098:	f1b0 0a00 	subs.w	sl, r0, #0
   2809c:	dd93      	ble.n	27fc6 <__sfvwrite_r+0xfe>
   2809e:	eba6 060a 	sub.w	r6, r6, sl
   280a2:	e776      	b.n	27f92 <__sfvwrite_r+0xca>
   280a4:	45b3      	cmp	fp, r6
   280a6:	46da      	mov	sl, fp
   280a8:	bf28      	it	cs
   280aa:	46b2      	movcs	sl, r6
   280ac:	4652      	mov	r2, sl
   280ae:	4649      	mov	r1, r9
   280b0:	f7fa f8aa 	bl	22208 <memmove>
   280b4:	68a3      	ldr	r3, [r4, #8]
   280b6:	6822      	ldr	r2, [r4, #0]
   280b8:	eba3 030a 	sub.w	r3, r3, sl
   280bc:	4452      	add	r2, sl
   280be:	60a3      	str	r3, [r4, #8]
   280c0:	6022      	str	r2, [r4, #0]
   280c2:	2b00      	cmp	r3, #0
   280c4:	d1eb      	bne.n	2809e <__sfvwrite_r+0x1d6>
   280c6:	4621      	mov	r1, r4
   280c8:	4640      	mov	r0, r8
   280ca:	f7fd fd41 	bl	25b50 <_fflush_r>
   280ce:	2800      	cmp	r0, #0
   280d0:	d0e5      	beq.n	2809e <__sfvwrite_r+0x1d6>
   280d2:	e778      	b.n	27fc6 <__sfvwrite_r+0xfe>
   280d4:	6820      	ldr	r0, [r4, #0]
   280d6:	46b3      	mov	fp, r6
   280d8:	4632      	mov	r2, r6
   280da:	e74c      	b.n	27f76 <__sfvwrite_r+0xae>
   280dc:	4639      	mov	r1, r7
   280de:	9201      	str	r2, [sp, #4]
   280e0:	f7fa f892 	bl	22208 <memmove>
   280e4:	9a01      	ldr	r2, [sp, #4]
   280e6:	68a3      	ldr	r3, [r4, #8]
   280e8:	1a9b      	subs	r3, r3, r2
   280ea:	60a3      	str	r3, [r4, #8]
   280ec:	6823      	ldr	r3, [r4, #0]
   280ee:	4413      	add	r3, r2
   280f0:	6023      	str	r3, [r4, #0]
   280f2:	4693      	mov	fp, r2
   280f4:	e795      	b.n	28022 <__sfvwrite_r+0x15a>
   280f6:	6823      	ldr	r3, [r4, #0]
   280f8:	6921      	ldr	r1, [r4, #16]
   280fa:	eba3 0b01 	sub.w	fp, r3, r1
   280fe:	6963      	ldr	r3, [r4, #20]
   28100:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   28104:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   28108:	f10b 0301 	add.w	r3, fp, #1
   2810c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   28110:	4433      	add	r3, r6
   28112:	4553      	cmp	r3, sl
   28114:	4652      	mov	r2, sl
   28116:	bf84      	itt	hi
   28118:	469a      	movhi	sl, r3
   2811a:	4652      	movhi	r2, sl
   2811c:	0543      	lsls	r3, r0, #21
   2811e:	d52c      	bpl.n	2817a <__sfvwrite_r+0x2b2>
   28120:	4611      	mov	r1, r2
   28122:	4640      	mov	r0, r8
   28124:	f7f8 f9ea 	bl	204fc <_malloc_r>
   28128:	2800      	cmp	r0, #0
   2812a:	d03b      	beq.n	281a4 <__sfvwrite_r+0x2dc>
   2812c:	465a      	mov	r2, fp
   2812e:	6921      	ldr	r1, [r4, #16]
   28130:	9001      	str	r0, [sp, #4]
   28132:	f7f3 fd79 	bl	1bc28 <memcpy>
   28136:	89a2      	ldrh	r2, [r4, #12]
   28138:	9b01      	ldr	r3, [sp, #4]
   2813a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2813e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   28142:	81a2      	strh	r2, [r4, #12]
   28144:	eb03 000b 	add.w	r0, r3, fp
   28148:	6123      	str	r3, [r4, #16]
   2814a:	ebaa 030b 	sub.w	r3, sl, fp
   2814e:	f8c4 a014 	str.w	sl, [r4, #20]
   28152:	60a3      	str	r3, [r4, #8]
   28154:	6020      	str	r0, [r4, #0]
   28156:	46b3      	mov	fp, r6
   28158:	4632      	mov	r2, r6
   2815a:	e70c      	b.n	27f76 <__sfvwrite_r+0xae>
   2815c:	4639      	mov	r1, r7
   2815e:	465a      	mov	r2, fp
   28160:	f7fa f852 	bl	22208 <memmove>
   28164:	6823      	ldr	r3, [r4, #0]
   28166:	445b      	add	r3, fp
   28168:	6023      	str	r3, [r4, #0]
   2816a:	4621      	mov	r1, r4
   2816c:	4640      	mov	r0, r8
   2816e:	f7fd fcef 	bl	25b50 <_fflush_r>
   28172:	2800      	cmp	r0, #0
   28174:	f43f af55 	beq.w	28022 <__sfvwrite_r+0x15a>
   28178:	e725      	b.n	27fc6 <__sfvwrite_r+0xfe>
   2817a:	4640      	mov	r0, r8
   2817c:	f7f8 fc86 	bl	20a8c <_realloc_r>
   28180:	4603      	mov	r3, r0
   28182:	2800      	cmp	r0, #0
   28184:	d1de      	bne.n	28144 <__sfvwrite_r+0x27c>
   28186:	6921      	ldr	r1, [r4, #16]
   28188:	4640      	mov	r0, r8
   2818a:	f7fa fbdb 	bl	22944 <_free_r>
   2818e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28192:	220c      	movs	r2, #12
   28194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   28198:	f8c8 2000 	str.w	r2, [r8]
   2819c:	e715      	b.n	27fca <__sfvwrite_r+0x102>
   2819e:	1c72      	adds	r2, r6, #1
   281a0:	4691      	mov	r9, r2
   281a2:	e726      	b.n	27ff2 <__sfvwrite_r+0x12a>
   281a4:	220c      	movs	r2, #12
   281a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   281aa:	f8c8 2000 	str.w	r2, [r8]
   281ae:	e70c      	b.n	27fca <__sfvwrite_r+0x102>
   281b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   281b4:	e6ba      	b.n	27f2c <__sfvwrite_r+0x64>
   281b6:	bf00      	nop
   281b8:	7ffffc00 	.word	0x7ffffc00

000281bc <__swsetup_r>:
   281bc:	b538      	push	{r3, r4, r5, lr}
   281be:	4b31      	ldr	r3, [pc, #196]	; (28284 <__swsetup_r+0xc8>)
   281c0:	681b      	ldr	r3, [r3, #0]
   281c2:	4605      	mov	r5, r0
   281c4:	460c      	mov	r4, r1
   281c6:	b113      	cbz	r3, 281ce <__swsetup_r+0x12>
   281c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   281ca:	2a00      	cmp	r2, #0
   281cc:	d04e      	beq.n	2826c <__swsetup_r+0xb0>
   281ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   281d2:	0718      	lsls	r0, r3, #28
   281d4:	b29a      	uxth	r2, r3
   281d6:	d51c      	bpl.n	28212 <__swsetup_r+0x56>
   281d8:	6921      	ldr	r1, [r4, #16]
   281da:	b329      	cbz	r1, 28228 <__swsetup_r+0x6c>
   281dc:	f012 0001 	ands.w	r0, r2, #1
   281e0:	d007      	beq.n	281f2 <__swsetup_r+0x36>
   281e2:	2000      	movs	r0, #0
   281e4:	60a0      	str	r0, [r4, #8]
   281e6:	6960      	ldr	r0, [r4, #20]
   281e8:	4240      	negs	r0, r0
   281ea:	61a0      	str	r0, [r4, #24]
   281ec:	b139      	cbz	r1, 281fe <__swsetup_r+0x42>
   281ee:	2000      	movs	r0, #0
   281f0:	bd38      	pop	{r3, r4, r5, pc}
   281f2:	0795      	lsls	r5, r2, #30
   281f4:	bf58      	it	pl
   281f6:	6960      	ldrpl	r0, [r4, #20]
   281f8:	60a0      	str	r0, [r4, #8]
   281fa:	2900      	cmp	r1, #0
   281fc:	d1f7      	bne.n	281ee <__swsetup_r+0x32>
   281fe:	0612      	lsls	r2, r2, #24
   28200:	bf58      	it	pl
   28202:	4608      	movpl	r0, r1
   28204:	d5f4      	bpl.n	281f0 <__swsetup_r+0x34>
   28206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2820a:	81a3      	strh	r3, [r4, #12]
   2820c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28210:	bd38      	pop	{r3, r4, r5, pc}
   28212:	06d1      	lsls	r1, r2, #27
   28214:	d52e      	bpl.n	28274 <__swsetup_r+0xb8>
   28216:	0752      	lsls	r2, r2, #29
   28218:	d414      	bmi.n	28244 <__swsetup_r+0x88>
   2821a:	6921      	ldr	r1, [r4, #16]
   2821c:	f043 0308 	orr.w	r3, r3, #8
   28220:	81a3      	strh	r3, [r4, #12]
   28222:	b29a      	uxth	r2, r3
   28224:	2900      	cmp	r1, #0
   28226:	d1d9      	bne.n	281dc <__swsetup_r+0x20>
   28228:	f402 7020 	and.w	r0, r2, #640	; 0x280
   2822c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   28230:	d0d4      	beq.n	281dc <__swsetup_r+0x20>
   28232:	4621      	mov	r1, r4
   28234:	4628      	mov	r0, r5
   28236:	f000 f947 	bl	284c8 <__smakebuf_r>
   2823a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2823e:	6921      	ldr	r1, [r4, #16]
   28240:	b29a      	uxth	r2, r3
   28242:	e7cb      	b.n	281dc <__swsetup_r+0x20>
   28244:	6b21      	ldr	r1, [r4, #48]	; 0x30
   28246:	b151      	cbz	r1, 2825e <__swsetup_r+0xa2>
   28248:	f104 0240 	add.w	r2, r4, #64	; 0x40
   2824c:	4291      	cmp	r1, r2
   2824e:	d004      	beq.n	2825a <__swsetup_r+0x9e>
   28250:	4628      	mov	r0, r5
   28252:	f7fa fb77 	bl	22944 <_free_r>
   28256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2825a:	2200      	movs	r2, #0
   2825c:	6322      	str	r2, [r4, #48]	; 0x30
   2825e:	6921      	ldr	r1, [r4, #16]
   28260:	2200      	movs	r2, #0
   28262:	e9c4 1200 	strd	r1, r2, [r4]
   28266:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2826a:	e7d7      	b.n	2821c <__swsetup_r+0x60>
   2826c:	4618      	mov	r0, r3
   2826e:	f7f9 ff19 	bl	220a4 <__sinit>
   28272:	e7ac      	b.n	281ce <__swsetup_r+0x12>
   28274:	2209      	movs	r2, #9
   28276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2827a:	602a      	str	r2, [r5, #0]
   2827c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28280:	81a3      	strh	r3, [r4, #12]
   28282:	bd38      	pop	{r3, r4, r5, pc}
   28284:	200099ec 	.word	0x200099ec

00028288 <__fputwc>:
   28288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2828c:	b082      	sub	sp, #8
   2828e:	4682      	mov	sl, r0
   28290:	4688      	mov	r8, r1
   28292:	4614      	mov	r4, r2
   28294:	f7fa f930 	bl	224f8 <__locale_mb_cur_max>
   28298:	2801      	cmp	r0, #1
   2829a:	d103      	bne.n	282a4 <__fputwc+0x1c>
   2829c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   282a0:	2bfe      	cmp	r3, #254	; 0xfe
   282a2:	d936      	bls.n	28312 <__fputwc+0x8a>
   282a4:	f10d 0904 	add.w	r9, sp, #4
   282a8:	4642      	mov	r2, r8
   282aa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   282ae:	4649      	mov	r1, r9
   282b0:	4650      	mov	r0, sl
   282b2:	f7fd fd5f 	bl	25d74 <_wcrtomb_r>
   282b6:	1c42      	adds	r2, r0, #1
   282b8:	4606      	mov	r6, r0
   282ba:	d032      	beq.n	28322 <__fputwc+0x9a>
   282bc:	b320      	cbz	r0, 28308 <__fputwc+0x80>
   282be:	f89d c004 	ldrb.w	ip, [sp, #4]
   282c2:	2500      	movs	r5, #0
   282c4:	e009      	b.n	282da <__fputwc+0x52>
   282c6:	6823      	ldr	r3, [r4, #0]
   282c8:	1c5a      	adds	r2, r3, #1
   282ca:	6022      	str	r2, [r4, #0]
   282cc:	f883 c000 	strb.w	ip, [r3]
   282d0:	3501      	adds	r5, #1
   282d2:	42b5      	cmp	r5, r6
   282d4:	d218      	bcs.n	28308 <__fputwc+0x80>
   282d6:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   282da:	68a3      	ldr	r3, [r4, #8]
   282dc:	3b01      	subs	r3, #1
   282de:	2b00      	cmp	r3, #0
   282e0:	60a3      	str	r3, [r4, #8]
   282e2:	daf0      	bge.n	282c6 <__fputwc+0x3e>
   282e4:	69a7      	ldr	r7, [r4, #24]
   282e6:	42bb      	cmp	r3, r7
   282e8:	4661      	mov	r1, ip
   282ea:	4622      	mov	r2, r4
   282ec:	4650      	mov	r0, sl
   282ee:	db02      	blt.n	282f6 <__fputwc+0x6e>
   282f0:	f1bc 0f0a 	cmp.w	ip, #10
   282f4:	d1e7      	bne.n	282c6 <__fputwc+0x3e>
   282f6:	f000 f953 	bl	285a0 <__swbuf_r>
   282fa:	1c43      	adds	r3, r0, #1
   282fc:	d1e8      	bne.n	282d0 <__fputwc+0x48>
   282fe:	4606      	mov	r6, r0
   28300:	4630      	mov	r0, r6
   28302:	b002      	add	sp, #8
   28304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28308:	4646      	mov	r6, r8
   2830a:	4630      	mov	r0, r6
   2830c:	b002      	add	sp, #8
   2830e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28312:	fa5f fc88 	uxtb.w	ip, r8
   28316:	f88d c004 	strb.w	ip, [sp, #4]
   2831a:	4606      	mov	r6, r0
   2831c:	f10d 0904 	add.w	r9, sp, #4
   28320:	e7cf      	b.n	282c2 <__fputwc+0x3a>
   28322:	89a3      	ldrh	r3, [r4, #12]
   28324:	4630      	mov	r0, r6
   28326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2832a:	81a3      	strh	r3, [r4, #12]
   2832c:	b002      	add	sp, #8
   2832e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28332:	bf00      	nop

00028334 <_fputwc_r>:
   28334:	b530      	push	{r4, r5, lr}
   28336:	6e53      	ldr	r3, [r2, #100]	; 0x64
   28338:	f013 0f01 	tst.w	r3, #1
   2833c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   28340:	4614      	mov	r4, r2
   28342:	b083      	sub	sp, #12
   28344:	4605      	mov	r5, r0
   28346:	b29a      	uxth	r2, r3
   28348:	d101      	bne.n	2834e <_fputwc_r+0x1a>
   2834a:	0598      	lsls	r0, r3, #22
   2834c:	d51c      	bpl.n	28388 <_fputwc_r+0x54>
   2834e:	0490      	lsls	r0, r2, #18
   28350:	d406      	bmi.n	28360 <_fputwc_r+0x2c>
   28352:	6e62      	ldr	r2, [r4, #100]	; 0x64
   28354:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   28358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2835c:	81a3      	strh	r3, [r4, #12]
   2835e:	6662      	str	r2, [r4, #100]	; 0x64
   28360:	4622      	mov	r2, r4
   28362:	4628      	mov	r0, r5
   28364:	f7ff ff90 	bl	28288 <__fputwc>
   28368:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2836a:	07da      	lsls	r2, r3, #31
   2836c:	4605      	mov	r5, r0
   2836e:	d402      	bmi.n	28376 <_fputwc_r+0x42>
   28370:	89a3      	ldrh	r3, [r4, #12]
   28372:	059b      	lsls	r3, r3, #22
   28374:	d502      	bpl.n	2837c <_fputwc_r+0x48>
   28376:	4628      	mov	r0, r5
   28378:	b003      	add	sp, #12
   2837a:	bd30      	pop	{r4, r5, pc}
   2837c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2837e:	f7fa f983 	bl	22688 <__retarget_lock_release_recursive>
   28382:	4628      	mov	r0, r5
   28384:	b003      	add	sp, #12
   28386:	bd30      	pop	{r4, r5, pc}
   28388:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2838a:	9101      	str	r1, [sp, #4]
   2838c:	f7fa f97a 	bl	22684 <__retarget_lock_acquire_recursive>
   28390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28394:	9901      	ldr	r1, [sp, #4]
   28396:	b29a      	uxth	r2, r3
   28398:	e7d9      	b.n	2834e <_fputwc_r+0x1a>
   2839a:	bf00      	nop

0002839c <_wcsnrtombs_l>:
   2839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283a0:	b08b      	sub	sp, #44	; 0x2c
   283a2:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   283a6:	9f14      	ldr	r7, [sp, #80]	; 0x50
   283a8:	9103      	str	r1, [sp, #12]
   283aa:	4681      	mov	r9, r0
   283ac:	9205      	str	r2, [sp, #20]
   283ae:	461e      	mov	r6, r3
   283b0:	f1b8 0f00 	cmp.w	r8, #0
   283b4:	d05c      	beq.n	28470 <_wcsnrtombs_l+0xd4>
   283b6:	9b03      	ldr	r3, [sp, #12]
   283b8:	2b00      	cmp	r3, #0
   283ba:	d05e      	beq.n	2847a <_wcsnrtombs_l+0xde>
   283bc:	9b05      	ldr	r3, [sp, #20]
   283be:	681d      	ldr	r5, [r3, #0]
   283c0:	2f00      	cmp	r7, #0
   283c2:	d06a      	beq.n	2849a <_wcsnrtombs_l+0xfe>
   283c4:	1e74      	subs	r4, r6, #1
   283c6:	b34e      	cbz	r6, 2841c <_wcsnrtombs_l+0x80>
   283c8:	9b03      	ldr	r3, [sp, #12]
   283ca:	9304      	str	r3, [sp, #16]
   283cc:	3d04      	subs	r5, #4
   283ce:	2600      	movs	r6, #0
   283d0:	9501      	str	r5, [sp, #4]
   283d2:	e00b      	b.n	283ec <_wcsnrtombs_l+0x50>
   283d4:	9b03      	ldr	r3, [sp, #12]
   283d6:	bb2b      	cbnz	r3, 28424 <_wcsnrtombs_l+0x88>
   283d8:	9b01      	ldr	r3, [sp, #4]
   283da:	681a      	ldr	r2, [r3, #0]
   283dc:	2a00      	cmp	r2, #0
   283de:	d03a      	beq.n	28456 <_wcsnrtombs_l+0xba>
   283e0:	45bc      	cmp	ip, r7
   283e2:	d25c      	bcs.n	2849e <_wcsnrtombs_l+0x102>
   283e4:	3c01      	subs	r4, #1
   283e6:	1c63      	adds	r3, r4, #1
   283e8:	4666      	mov	r6, ip
   283ea:	d017      	beq.n	2841c <_wcsnrtombs_l+0x80>
   283ec:	f8d8 3000 	ldr.w	r3, [r8]
   283f0:	9302      	str	r3, [sp, #8]
   283f2:	9b01      	ldr	r3, [sp, #4]
   283f4:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   283f8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   283fc:	9301      	str	r3, [sp, #4]
   283fe:	a907      	add	r1, sp, #28
   28400:	4643      	mov	r3, r8
   28402:	4648      	mov	r0, r9
   28404:	f8d8 b004 	ldr.w	fp, [r8, #4]
   28408:	47a8      	blx	r5
   2840a:	1c42      	adds	r2, r0, #1
   2840c:	d03a      	beq.n	28484 <_wcsnrtombs_l+0xe8>
   2840e:	eb00 0c06 	add.w	ip, r0, r6
   28412:	45bc      	cmp	ip, r7
   28414:	d9de      	bls.n	283d4 <_wcsnrtombs_l+0x38>
   28416:	9b02      	ldr	r3, [sp, #8]
   28418:	e9c8 3b00 	strd	r3, fp, [r8]
   2841c:	4630      	mov	r0, r6
   2841e:	b00b      	add	sp, #44	; 0x2c
   28420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28424:	2800      	cmp	r0, #0
   28426:	dd0e      	ble.n	28446 <_wcsnrtombs_l+0xaa>
   28428:	9b04      	ldr	r3, [sp, #16]
   2842a:	9d01      	ldr	r5, [sp, #4]
   2842c:	4418      	add	r0, r3
   2842e:	1e5a      	subs	r2, r3, #1
   28430:	a907      	add	r1, sp, #28
   28432:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   28436:	f811 3b01 	ldrb.w	r3, [r1], #1
   2843a:	f802 3f01 	strb.w	r3, [r2, #1]!
   2843e:	4572      	cmp	r2, lr
   28440:	d1f9      	bne.n	28436 <_wcsnrtombs_l+0x9a>
   28442:	9501      	str	r5, [sp, #4]
   28444:	9004      	str	r0, [sp, #16]
   28446:	9b05      	ldr	r3, [sp, #20]
   28448:	681a      	ldr	r2, [r3, #0]
   2844a:	3204      	adds	r2, #4
   2844c:	601a      	str	r2, [r3, #0]
   2844e:	9b01      	ldr	r3, [sp, #4]
   28450:	681a      	ldr	r2, [r3, #0]
   28452:	2a00      	cmp	r2, #0
   28454:	d1c4      	bne.n	283e0 <_wcsnrtombs_l+0x44>
   28456:	9b03      	ldr	r3, [sp, #12]
   28458:	b10b      	cbz	r3, 2845e <_wcsnrtombs_l+0xc2>
   2845a:	9b05      	ldr	r3, [sp, #20]
   2845c:	601a      	str	r2, [r3, #0]
   2845e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   28462:	2200      	movs	r2, #0
   28464:	4630      	mov	r0, r6
   28466:	f8c8 2000 	str.w	r2, [r8]
   2846a:	b00b      	add	sp, #44	; 0x2c
   2846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28470:	9b03      	ldr	r3, [sp, #12]
   28472:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   28476:	2b00      	cmp	r3, #0
   28478:	d1a0      	bne.n	283bc <_wcsnrtombs_l+0x20>
   2847a:	9b05      	ldr	r3, [sp, #20]
   2847c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   28480:	681d      	ldr	r5, [r3, #0]
   28482:	e79f      	b.n	283c4 <_wcsnrtombs_l+0x28>
   28484:	4606      	mov	r6, r0
   28486:	218a      	movs	r1, #138	; 0x8a
   28488:	2200      	movs	r2, #0
   2848a:	4630      	mov	r0, r6
   2848c:	f8c9 1000 	str.w	r1, [r9]
   28490:	f8c8 2000 	str.w	r2, [r8]
   28494:	b00b      	add	sp, #44	; 0x2c
   28496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2849a:	463e      	mov	r6, r7
   2849c:	e7be      	b.n	2841c <_wcsnrtombs_l+0x80>
   2849e:	4666      	mov	r6, ip
   284a0:	e7bc      	b.n	2841c <_wcsnrtombs_l+0x80>
   284a2:	bf00      	nop

000284a4 <_wcsnrtombs_r>:
   284a4:	b510      	push	{r4, lr}
   284a6:	b084      	sub	sp, #16
   284a8:	4c05      	ldr	r4, [pc, #20]	; (284c0 <_wcsnrtombs_r+0x1c>)
   284aa:	9806      	ldr	r0, [sp, #24]
   284ac:	9000      	str	r0, [sp, #0]
   284ae:	9807      	ldr	r0, [sp, #28]
   284b0:	9001      	str	r0, [sp, #4]
   284b2:	4804      	ldr	r0, [pc, #16]	; (284c4 <_wcsnrtombs_r+0x20>)
   284b4:	6800      	ldr	r0, [r0, #0]
   284b6:	9402      	str	r4, [sp, #8]
   284b8:	f7ff ff70 	bl	2839c <_wcsnrtombs_l>
   284bc:	b004      	add	sp, #16
   284be:	bd10      	pop	{r4, pc}
   284c0:	20009464 	.word	0x20009464
   284c4:	200099ec 	.word	0x200099ec

000284c8 <__smakebuf_r>:
   284c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   284cc:	898b      	ldrh	r3, [r1, #12]
   284ce:	460c      	mov	r4, r1
   284d0:	0799      	lsls	r1, r3, #30
   284d2:	b096      	sub	sp, #88	; 0x58
   284d4:	d508      	bpl.n	284e8 <__smakebuf_r+0x20>
   284d6:	f104 0343 	add.w	r3, r4, #67	; 0x43
   284da:	2201      	movs	r2, #1
   284dc:	e9c4 3204 	strd	r3, r2, [r4, #16]
   284e0:	6023      	str	r3, [r4, #0]
   284e2:	b016      	add	sp, #88	; 0x58
   284e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   284e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   284ec:	2900      	cmp	r1, #0
   284ee:	4606      	mov	r6, r0
   284f0:	db25      	blt.n	2853e <__smakebuf_r+0x76>
   284f2:	466a      	mov	r2, sp
   284f4:	f000 f8ac 	bl	28650 <_fstat_r>
   284f8:	2800      	cmp	r0, #0
   284fa:	db1f      	blt.n	2853c <__smakebuf_r+0x74>
   284fc:	9d01      	ldr	r5, [sp, #4]
   284fe:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   28502:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   28506:	fab5 f585 	clz	r5, r5
   2850a:	f44f 6880 	mov.w	r8, #1024	; 0x400
   2850e:	096d      	lsrs	r5, r5, #5
   28510:	f44f 6700 	mov.w	r7, #2048	; 0x800
   28514:	4641      	mov	r1, r8
   28516:	4630      	mov	r0, r6
   28518:	f7f7 fff0 	bl	204fc <_malloc_r>
   2851c:	b1e0      	cbz	r0, 28558 <__smakebuf_r+0x90>
   2851e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28522:	f8c4 8014 	str.w	r8, [r4, #20]
   28526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2852a:	6020      	str	r0, [r4, #0]
   2852c:	6120      	str	r0, [r4, #16]
   2852e:	81a3      	strh	r3, [r4, #12]
   28530:	bb35      	cbnz	r5, 28580 <__smakebuf_r+0xb8>
   28532:	433b      	orrs	r3, r7
   28534:	81a3      	strh	r3, [r4, #12]
   28536:	b016      	add	sp, #88	; 0x58
   28538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2853c:	89a3      	ldrh	r3, [r4, #12]
   2853e:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   28542:	d019      	beq.n	28578 <__smakebuf_r+0xb0>
   28544:	f04f 0840 	mov.w	r8, #64	; 0x40
   28548:	2500      	movs	r5, #0
   2854a:	4641      	mov	r1, r8
   2854c:	4630      	mov	r0, r6
   2854e:	462f      	mov	r7, r5
   28550:	f7f7 ffd4 	bl	204fc <_malloc_r>
   28554:	2800      	cmp	r0, #0
   28556:	d1e2      	bne.n	2851e <__smakebuf_r+0x56>
   28558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2855c:	059a      	lsls	r2, r3, #22
   2855e:	d4c0      	bmi.n	284e2 <__smakebuf_r+0x1a>
   28560:	f023 0303 	bic.w	r3, r3, #3
   28564:	f104 0243 	add.w	r2, r4, #67	; 0x43
   28568:	f043 0302 	orr.w	r3, r3, #2
   2856c:	2101      	movs	r1, #1
   2856e:	e9c4 2104 	strd	r2, r1, [r4, #16]
   28572:	81a3      	strh	r3, [r4, #12]
   28574:	6022      	str	r2, [r4, #0]
   28576:	e7b4      	b.n	284e2 <__smakebuf_r+0x1a>
   28578:	f44f 6880 	mov.w	r8, #1024	; 0x400
   2857c:	462f      	mov	r7, r5
   2857e:	e7c9      	b.n	28514 <__smakebuf_r+0x4c>
   28580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   28584:	4630      	mov	r0, r6
   28586:	f000 f879 	bl	2867c <_isatty_r>
   2858a:	b910      	cbnz	r0, 28592 <__smakebuf_r+0xca>
   2858c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   28590:	e7cf      	b.n	28532 <__smakebuf_r+0x6a>
   28592:	89a3      	ldrh	r3, [r4, #12]
   28594:	f023 0303 	bic.w	r3, r3, #3
   28598:	f043 0301 	orr.w	r3, r3, #1
   2859c:	b21b      	sxth	r3, r3
   2859e:	e7c8      	b.n	28532 <__smakebuf_r+0x6a>

000285a0 <__swbuf_r>:
   285a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   285a2:	460d      	mov	r5, r1
   285a4:	4614      	mov	r4, r2
   285a6:	4606      	mov	r6, r0
   285a8:	b110      	cbz	r0, 285b0 <__swbuf_r+0x10>
   285aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   285ac:	2b00      	cmp	r3, #0
   285ae:	d04c      	beq.n	2864a <__swbuf_r+0xaa>
   285b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   285b4:	69a3      	ldr	r3, [r4, #24]
   285b6:	60a3      	str	r3, [r4, #8]
   285b8:	0717      	lsls	r7, r2, #28
   285ba:	b290      	uxth	r0, r2
   285bc:	d51b      	bpl.n	285f6 <__swbuf_r+0x56>
   285be:	6923      	ldr	r3, [r4, #16]
   285c0:	b1cb      	cbz	r3, 285f6 <__swbuf_r+0x56>
   285c2:	b2ed      	uxtb	r5, r5
   285c4:	0481      	lsls	r1, r0, #18
   285c6:	462f      	mov	r7, r5
   285c8:	d522      	bpl.n	28610 <__swbuf_r+0x70>
   285ca:	6822      	ldr	r2, [r4, #0]
   285cc:	6961      	ldr	r1, [r4, #20]
   285ce:	1ad3      	subs	r3, r2, r3
   285d0:	4299      	cmp	r1, r3
   285d2:	dd29      	ble.n	28628 <__swbuf_r+0x88>
   285d4:	3301      	adds	r3, #1
   285d6:	68a1      	ldr	r1, [r4, #8]
   285d8:	3901      	subs	r1, #1
   285da:	60a1      	str	r1, [r4, #8]
   285dc:	1c51      	adds	r1, r2, #1
   285de:	6021      	str	r1, [r4, #0]
   285e0:	7015      	strb	r5, [r2, #0]
   285e2:	6962      	ldr	r2, [r4, #20]
   285e4:	429a      	cmp	r2, r3
   285e6:	d027      	beq.n	28638 <__swbuf_r+0x98>
   285e8:	89a3      	ldrh	r3, [r4, #12]
   285ea:	07db      	lsls	r3, r3, #31
   285ec:	d501      	bpl.n	285f2 <__swbuf_r+0x52>
   285ee:	2d0a      	cmp	r5, #10
   285f0:	d022      	beq.n	28638 <__swbuf_r+0x98>
   285f2:	4638      	mov	r0, r7
   285f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   285f6:	4621      	mov	r1, r4
   285f8:	4630      	mov	r0, r6
   285fa:	f7ff fddf 	bl	281bc <__swsetup_r>
   285fe:	bb08      	cbnz	r0, 28644 <__swbuf_r+0xa4>
   28600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   28604:	6923      	ldr	r3, [r4, #16]
   28606:	b290      	uxth	r0, r2
   28608:	b2ed      	uxtb	r5, r5
   2860a:	0481      	lsls	r1, r0, #18
   2860c:	462f      	mov	r7, r5
   2860e:	d4dc      	bmi.n	285ca <__swbuf_r+0x2a>
   28610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   28614:	81a2      	strh	r2, [r4, #12]
   28616:	6e62      	ldr	r2, [r4, #100]	; 0x64
   28618:	6961      	ldr	r1, [r4, #20]
   2861a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   2861e:	6662      	str	r2, [r4, #100]	; 0x64
   28620:	6822      	ldr	r2, [r4, #0]
   28622:	1ad3      	subs	r3, r2, r3
   28624:	4299      	cmp	r1, r3
   28626:	dcd5      	bgt.n	285d4 <__swbuf_r+0x34>
   28628:	4621      	mov	r1, r4
   2862a:	4630      	mov	r0, r6
   2862c:	f7fd fa90 	bl	25b50 <_fflush_r>
   28630:	b940      	cbnz	r0, 28644 <__swbuf_r+0xa4>
   28632:	6822      	ldr	r2, [r4, #0]
   28634:	2301      	movs	r3, #1
   28636:	e7ce      	b.n	285d6 <__swbuf_r+0x36>
   28638:	4621      	mov	r1, r4
   2863a:	4630      	mov	r0, r6
   2863c:	f7fd fa88 	bl	25b50 <_fflush_r>
   28640:	2800      	cmp	r0, #0
   28642:	d0d6      	beq.n	285f2 <__swbuf_r+0x52>
   28644:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   28648:	e7d3      	b.n	285f2 <__swbuf_r+0x52>
   2864a:	f7f9 fd2b 	bl	220a4 <__sinit>
   2864e:	e7af      	b.n	285b0 <__swbuf_r+0x10>

00028650 <_fstat_r>:
   28650:	b570      	push	{r4, r5, r6, lr}
   28652:	460c      	mov	r4, r1
   28654:	4d08      	ldr	r5, [pc, #32]	; (28678 <_fstat_r+0x28>)
   28656:	4603      	mov	r3, r0
   28658:	2600      	movs	r6, #0
   2865a:	4620      	mov	r0, r4
   2865c:	4611      	mov	r1, r2
   2865e:	461c      	mov	r4, r3
   28660:	602e      	str	r6, [r5, #0]
   28662:	f7f3 ff17 	bl	1c494 <_fstat>
   28666:	1c43      	adds	r3, r0, #1
   28668:	d000      	beq.n	2866c <_fstat_r+0x1c>
   2866a:	bd70      	pop	{r4, r5, r6, pc}
   2866c:	682b      	ldr	r3, [r5, #0]
   2866e:	2b00      	cmp	r3, #0
   28670:	d0fb      	beq.n	2866a <_fstat_r+0x1a>
   28672:	6023      	str	r3, [r4, #0]
   28674:	bd70      	pop	{r4, r5, r6, pc}
   28676:	bf00      	nop
   28678:	200106f0 	.word	0x200106f0

0002867c <_isatty_r>:
   2867c:	b538      	push	{r3, r4, r5, lr}
   2867e:	4d07      	ldr	r5, [pc, #28]	; (2869c <_isatty_r+0x20>)
   28680:	2200      	movs	r2, #0
   28682:	4604      	mov	r4, r0
   28684:	4608      	mov	r0, r1
   28686:	602a      	str	r2, [r5, #0]
   28688:	f7f3 ff0a 	bl	1c4a0 <_isatty>
   2868c:	1c43      	adds	r3, r0, #1
   2868e:	d000      	beq.n	28692 <_isatty_r+0x16>
   28690:	bd38      	pop	{r3, r4, r5, pc}
   28692:	682b      	ldr	r3, [r5, #0]
   28694:	2b00      	cmp	r3, #0
   28696:	d0fb      	beq.n	28690 <_isatty_r+0x14>
   28698:	6023      	str	r3, [r4, #0]
   2869a:	bd38      	pop	{r3, r4, r5, pc}
   2869c:	200106f0 	.word	0x200106f0

000286a0 <__aeabi_d2lz>:
   286a0:	b508      	push	{r3, lr}
   286a2:	4602      	mov	r2, r0
   286a4:	460b      	mov	r3, r1
   286a6:	ec43 2b17 	vmov	d7, r2, r3
   286aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   286ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   286b2:	d403      	bmi.n	286bc <__aeabi_d2lz+0x1c>
   286b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   286b8:	f000 b80a 	b.w	286d0 <__aeabi_d2ulz>
   286bc:	eeb1 7b47 	vneg.f64	d7, d7
   286c0:	ec51 0b17 	vmov	r0, r1, d7
   286c4:	f000 f804 	bl	286d0 <__aeabi_d2ulz>
   286c8:	4240      	negs	r0, r0
   286ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   286ce:	bd08      	pop	{r3, pc}

000286d0 <__aeabi_d2ulz>:
   286d0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 28700 <__aeabi_d2ulz+0x30>
   286d4:	ec41 0b17 	vmov	d7, r0, r1
   286d8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 28708 <__aeabi_d2ulz+0x38>
   286dc:	ee27 6b06 	vmul.f64	d6, d7, d6
   286e0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   286e4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   286e8:	eea4 7b45 	vfms.f64	d7, d4, d5
   286ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   286f0:	ee16 1a10 	vmov	r1, s12
   286f4:	ee17 0a90 	vmov	r0, s15
   286f8:	4770      	bx	lr
   286fa:	bf00      	nop
   286fc:	f3af 8000 	nop.w
   28700:	00000000 	.word	0x00000000
   28704:	3df00000 	.word	0x3df00000
   28708:	00000000 	.word	0x00000000
   2870c:	41f00000 	.word	0x41f00000

00028710 <___reboot_Teensyduino__veneer>:
   28710:	f85f f000 	ldr.w	pc, [pc]	; 28714 <___reboot_Teensyduino__veneer+0x4>
   28714:	60001fa5 	.word	0x60001fa5

00028718 <___Z14set_audioClockilmb_veneer>:
   28718:	f85f f000 	ldr.w	pc, [pc]	; 2871c <___Z14set_audioClockilmb_veneer+0x4>
   2871c:	60001619 	.word	0x60001619

00028720 <___init_veneer>:
   28720:	f85f f000 	ldr.w	pc, [pc]	; 28724 <___init_veneer+0x4>
   28724:	6000204d 	.word	0x6000204d

00028728 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   28728:	f85f f000 	ldr.w	pc, [pc]	; 2872c <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   2872c:	600017e9 	.word	0x600017e9

00028730 <___ZN7TwoWire5beginEv_veneer>:
   28730:	f85f f000 	ldr.w	pc, [pc]	; 28734 <___ZN7TwoWire5beginEv_veneer+0x4>
   28734:	60001781 	.word	0x60001781
	...

Disassembly of section .fini:

00028740 <_fini>:
   28740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28742:	bf00      	nop
